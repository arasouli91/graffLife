// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'index.data';
    var REMOTE_PACKAGE_BASE = 'index.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'assets', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  var fileData8 = [];
fileData8.push.apply(fileData8, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 218, 0, 0, 1, 156, 8, 6, 0, 0, 0, 231, 7, 7, 223, 0, 0, 32, 0, 73, 68, 65, 84, 120, 156, 237, 221, 237, 149, 219, 56, 182, 46, 224, 119, 102, 221, 255, 170, 12, 168, 27, 65, 57, 3, 242, 68, 96, 159, 8, 168, 27, 129, 59, 3, 105, 34, 176, 39, 2, 213, 68, 80, 221, 17, 80, 29, 65, 217, 17, 72, 142, 160, 236, 8, 116, 127, 168, 56, 150, 101, 145, 220, 27, 196, 198, 23, 223, 103, 45, 174, 153, 238, 166, 0, 112, 23, 8, 130, 32, 8, 254, 3, 233, 170, 1, 188, 3, 240, 48, 178, 207, 151, 183, 237, 91, 144, 18, 17, 17, 17, 17, 17, 101, 168, 2, 176, 5, 208, 1, 56, 43, 183, 35, 128, 61, 128, 54, 120, 169, 137, 136, 136, 136, 136, 18, 245, 8, 183, 206, 245, 208, 246, 138, 75, 135, 157, 136, 136, 136, 136, 104, 145, 42, 248, 237, 96, 223, 235, 112, 127, 12, 118, 52, 68, 68, 68, 68, 68, 9, 216, 226, 210, 17, 182, 234, 100, 95, 111, 29, 46, 163, 230, 68, 68, 68, 68, 68, 197, 90, 225, 50, 151, 58, 68, 7, 251, 118, 116, 187, 14, 112, 124, 68, 68, 68, 68, 68, 193, 173, 0, 188, 32, 124, 39, 251, 122, 107, 205, 143, 146, 136, 136, 136, 136, 40, 176, 103, 196, 237, 100, 247, 27, 167, 145, 16, 17, 17, 17, 81, 49, 98, 76, 23, 25, 155, 70, 194, 206, 54, 17, 17, 17, 17, 101, 239, 35, 226, 119, 174, 111, 183, 23, 92, 166, 178, 16, 17, 17, 17, 17, 101, 169, 70, 252, 78, 245, 208, 246, 108, 120, 220, 68, 68, 68, 68, 68, 102, 86, 184, 124, 177, 49, 118, 135, 122, 108, 171, 205, 142, 158, 136, 136, 136, 136, 200, 200, 39, 196, 239, 72, 79, 109, 71, 179, 163, 39, 34, 34, 34, 34, 50, 80, 33, 126, 39, 90, 186, 181, 70, 49, 32, 34, 34, 34, 34, 242, 46, 135, 209, 108, 142, 106, 19, 17, 17, 17, 81, 86, 86, 8, 247, 121, 117, 95, 219, 123, 147, 72, 16, 17, 17, 17, 209, 98, 253, 211, 32, 205, 15, 0, 30, 12, 210, 181, 244, 33, 118, 1, 136, 136, 136, 136, 136, 166, 164, 242, 5, 72, 205, 246, 106, 18, 9, 34, 34, 34, 34, 34, 143, 114, 155, 54, 210, 111, 252, 90, 36, 17, 17, 17, 17, 121, 227, 123, 234, 72, 133, 252, 166, 141, 244, 154, 216, 5, 32, 34, 34, 34, 162, 114, 248, 238, 104, 175, 61, 167, 23, 82, 174, 55, 8, 68, 68, 68, 68, 148, 32, 223, 29, 237, 198, 115, 122, 33, 53, 177, 11, 64, 68, 68, 68, 68, 229, 176, 88, 117, 132, 136, 136, 136, 136, 104, 241, 216, 209, 38, 34, 34, 34, 34, 50, 192, 142, 54, 17, 17, 17, 17, 145, 1, 118, 180, 137, 136, 136, 136, 136, 12, 248, 238, 104, 127, 247, 156, 94, 72, 57, 151, 157, 136, 136, 136, 136, 18, 227, 187, 163, 253, 197, 115, 122, 33, 229, 92, 118, 34, 34, 34, 34, 74, 140, 239, 142, 246, 201, 115, 122, 33, 157, 98, 23, 128, 136, 136, 136, 136, 202, 225, 187, 163, 253, 13, 249, 78, 193, 224, 136, 54, 17, 17, 17, 17, 121, 99, 241, 50, 228, 193, 32, 77, 107, 223, 1, 124, 141, 93, 8, 34, 34, 34, 34, 42, 135, 69, 71, 251, 79, 131, 52, 173, 229, 88, 102, 34, 34, 34, 34, 74, 24, 59, 218, 23, 135, 216, 5, 32, 34, 34, 34, 34, 146, 216, 3, 56, 103, 178, 189, 26, 197, 128, 136, 136, 136, 136, 200, 187, 10, 241, 59, 208, 210, 237, 163, 81, 12, 136, 136, 136, 136, 136, 76, 124, 66, 252, 78, 244, 212, 118, 52, 59, 122, 34, 34, 34, 34, 34, 35, 43, 92, 58, 178, 177, 59, 211, 99, 219, 123, 179, 163, 39, 34, 34, 34, 34, 50, 84, 35, 126, 103, 122, 104, 219, 27, 30, 55, 17, 17, 17, 17, 145, 185, 45, 226, 119, 170, 111, 183, 23, 92, 70, 220, 137, 136, 136, 136, 136, 178, 182, 71, 252, 206, 117, 191, 189, 2, 120, 180, 61, 92, 34, 34, 34, 34, 162, 112, 82, 120, 57, 242, 8, 118, 178, 137, 136, 136, 136, 168, 64, 45, 56, 93, 132, 136, 136, 136, 136, 200, 68, 139, 203, 244, 13, 118, 178, 137, 136, 136, 136, 136, 60, 123, 196, 165, 243, 27, 162, 147, 253, 17, 236, 100, 19, 17, 17, 17, 209, 130, 172, 112, 233, 4, 91, 141, 110, 191, 128, 243, 177, 137, 136, 136, 136, 104, 193, 86, 184, 172, 74, 226, 171, 195, 253, 2, 126, 136, 134, 136, 136, 136, 136, 232, 191, 86, 184, 204, 223, 126, 134, 190, 211, 125, 196, 101, 85, 147, 58, 120, 169, 137, 136, 136, 136, 136, 50, 243, 136, 75, 199, 251, 136, 241, 78, 54, 71, 175, 137, 136, 136, 136, 136, 148, 30, 49, 61, 154, 189, 143, 86, 58, 34, 34, 34, 34, 162, 76, 237, 33, 155, 58, 194, 41, 35, 68, 68, 68, 68, 68, 10, 210, 185, 218, 71, 112, 9, 63, 34, 34, 34, 34, 34, 49, 205, 11, 145, 156, 66, 66, 68, 68, 68, 68, 36, 32, 153, 159, 205, 23, 35, 137, 136, 136, 136, 136, 148, 62, 66, 223, 209, 126, 5, 167, 144, 16, 17, 17, 17, 17, 141, 122, 134, 219, 7, 107, 158, 99, 20, 150, 136, 136, 136, 136, 40, 23, 115, 190, 20, 201, 41, 36, 68, 68, 68, 68, 68, 119, 184, 204, 207, 230, 20, 18, 34, 34, 34, 34, 74, 198, 63, 99, 23, 96, 64, 51, 243, 247, 15, 0, 254, 244, 80, 14, 34, 34, 34, 34, 162, 162, 116, 152, 55, 162, 221, 111, 31, 67, 23, 156, 136, 136, 136, 136, 40, 101, 62, 58, 217, 253, 20, 146, 42, 112, 217, 137, 136, 136, 136, 136, 146, 84, 195, 95, 71, 251, 140, 203, 232, 56, 17, 17, 17, 17, 81, 80, 41, 206, 209, 110, 12, 210, 227, 20, 18, 34, 34, 34, 34, 90, 60, 95, 243, 179, 57, 133, 132, 136, 136, 136, 136, 232, 138, 239, 78, 118, 191, 189, 132, 60, 8, 34, 34, 34, 34, 162, 148, 248, 158, 159, 125, 187, 109, 195, 29, 10, 17, 17, 17, 17, 81, 58, 62, 193, 182, 163, 125, 198, 229, 99, 56, 68, 68, 68, 68, 68, 139, 242, 2, 251, 142, 54, 167, 144, 16, 17, 17, 17, 209, 162, 172, 96, 223, 201, 230, 20, 18, 34, 34, 34, 34, 90, 156, 247, 8, 215, 209, 230, 20, 18, 34, 34, 34, 34, 50, 149, 210, 58, 218, 77, 224, 252, 254, 196, 101, 20, 157, 136, 136, 136, 136, 168, 104, 33, 230, 103, 223, 110, 159, 130, 28, 25, 17, 17, 17, 17, 81, 36, 62, 231, 103, 191, 42, 247, 175, 3, 28, 31, 17, 17, 17, 17, 81, 20, 45, 252, 117, 180, 181, 115, 189, 187, 0, 199, 71, 68, 68, 68, 68, 20, 197, 30, 254, 58, 218, 0, 240, 172, 252, 13, 95, 140, 36, 34, 34, 34, 162, 34, 29, 225, 183, 163, 189, 82, 166, 249, 209, 248, 248, 136, 136, 136, 136, 136, 130, 171, 224, 175, 147, 125, 126, 75, 15, 208, 125, 206, 125, 111, 123, 136, 68, 68, 68, 68, 180, 52, 41, 44, 239, 215, 120, 78, 111, 253, 246, 191, 127, 3, 120, 18, 254, 230, 157, 231, 50, 16, 17, 17, 17, 209, 194, 149, 216, 209, 190, 118, 16, 238, 247, 14, 92, 83, 155, 136, 136, 136, 136, 60, 42, 189, 163, 253, 69, 177, 47, 71, 181, 137, 136, 136, 136, 200, 155, 216, 29, 237, 22, 63, 167, 122, 88, 248, 10, 224, 187, 112, 223, 198, 176, 28, 68, 68, 68, 68, 180, 48, 177, 59, 218, 59, 225, 126, 135, 25, 121, 72, 71, 181, 57, 162, 77, 68, 68, 68, 68, 222, 196, 236, 104, 107, 70, 179, 15, 112, 239, 108, 75, 127, 199, 142, 54, 17, 17, 17, 17, 121, 19, 179, 163, 189, 83, 236, 123, 152, 145, 143, 116, 68, 123, 13, 190, 16, 73, 68, 68, 68, 68, 158, 196, 234, 104, 107, 70, 179, 79, 184, 44, 213, 247, 224, 152, 151, 230, 133, 200, 198, 49, 15, 34, 34, 34, 34, 162, 36, 104, 190, 218, 216, 190, 253, 70, 186, 127, 125, 39, 191, 87, 225, 111, 183, 94, 143, 146, 136, 136, 136, 136, 40, 160, 22, 242, 78, 243, 241, 234, 119, 115, 58, 218, 207, 194, 223, 118, 222, 142, 146, 136, 136, 136, 136, 22, 45, 198, 212, 145, 157, 209, 190, 99, 184, 242, 8, 17, 17, 17, 17, 21, 237, 35, 220, 70, 179, 161, 248, 221, 189, 17, 237, 90, 241, 251, 202, 199, 129, 18, 17, 17, 17, 17, 133, 178, 130, 124, 174, 244, 245, 220, 236, 222, 156, 142, 246, 74, 241, 251, 247, 30, 142, 149, 136, 136, 136, 136, 40, 152, 45, 220, 71, 179, 161, 248, 237, 144, 163, 240, 247, 91, 247, 67, 36, 34, 34, 34, 34, 10, 107, 238, 104, 54, 20, 191, 29, 194, 23, 34, 137, 136, 136, 136, 168, 56, 115, 71, 179, 43, 197, 239, 125, 148, 129, 136, 136, 136, 136, 40, 121, 218, 209, 236, 123, 115, 172, 107, 197, 239, 135, 104, 210, 120, 116, 60, 86, 34, 34, 34, 34, 34, 0, 97, 150, 247, 251, 3, 242, 175, 58, 30, 112, 249, 10, 164, 5, 77, 186, 92, 230, 143, 136, 136, 136, 136, 146, 230, 99, 52, 27, 144, 143, 70, 79, 205, 175, 126, 17, 166, 243, 73, 123, 160, 68, 68, 68, 68, 68, 215, 172, 71, 180, 125, 141, 102, 251, 26, 97, 230, 135, 107, 136, 136, 136, 136, 40, 8, 203, 142, 118, 5, 127, 95, 129, 148, 118, 214, 167, 72, 59, 218, 141, 167, 252, 136, 136, 136, 136, 104, 161, 44, 59, 218, 59, 197, 190, 7, 248, 153, 155, 61, 213, 145, 150, 118, 180, 129, 225, 105, 44, 68, 68, 68, 68, 68, 147, 172, 58, 218, 21, 128, 141, 98, 255, 221, 196, 127, 151, 78, 229, 248, 62, 241, 223, 249, 66, 36, 17, 17, 17, 17, 5, 97, 213, 209, 222, 41, 246, 61, 96, 186, 3, 236, 107, 234, 72, 159, 159, 4, 59, 218, 68, 68, 68, 68, 148, 20, 205, 199, 101, 164, 107, 86, 31, 133, 105, 73, 166, 123, 124, 18, 166, 245, 34, 72, 139, 136, 136, 136, 136, 40, 152, 61, 228, 157, 236, 189, 48, 205, 185, 203, 3, 94, 107, 21, 233, 17, 17, 17, 17, 17, 37, 65, 59, 154, 93, 9, 210, 92, 121, 78, 239, 81, 145, 30, 95, 136, 36, 34, 34, 34, 162, 36, 88, 140, 102, 215, 138, 52, 165, 164, 233, 109, 21, 105, 18, 17, 17, 17, 17, 153, 208, 140, 20, 75, 71, 159, 1, 224, 189, 48, 189, 87, 69, 89, 59, 97, 154, 207, 138, 52, 137, 136, 136, 136, 136, 254, 203, 231, 170, 35, 59, 197, 190, 79, 0, 190, 9, 247, 149, 174, 254, 161, 89, 35, 251, 224, 57, 111, 34, 34, 34, 34, 162, 95, 248, 236, 104, 55, 138, 125, 119, 138, 125, 215, 194, 253, 78, 138, 52, 165, 157, 242, 53, 46, 115, 196, 137, 136, 136, 136, 136, 84, 124, 118, 180, 165, 107, 93, 63, 65, 62, 154, 13, 196, 237, 104, 107, 242, 39, 34, 34, 34, 34, 50, 33, 125, 17, 82, 58, 55, 187, 247, 42, 76, 183, 85, 166, 123, 20, 164, 169, 153, 247, 77, 68, 68, 68, 68, 100, 66, 242, 50, 164, 118, 21, 15, 205, 210, 126, 218, 165, 248, 62, 26, 148, 151, 136, 136, 136, 136, 200, 68, 11, 191, 43, 120, 88, 44, 237, 119, 109, 108, 245, 145, 189, 99, 154, 68, 68, 68, 68, 68, 38, 106, 92, 70, 130, 187, 183, 237, 25, 250, 105, 29, 61, 201, 168, 243, 220, 41, 30, 31, 241, 251, 180, 23, 142, 100, 19, 17, 17, 17, 81, 209, 164, 243, 190, 187, 88, 5, 36, 34, 34, 34, 34, 202, 141, 102, 218, 200, 167, 72, 101, 36, 34, 34, 34, 34, 186, 203, 231, 242, 126, 190, 61, 41, 246, 253, 110, 85, 8, 34, 34, 34, 34, 34, 23, 169, 118, 180, 183, 208, 173, 95, 205, 142, 54, 17, 17, 17, 17, 209, 4, 201, 50, 129, 92, 134, 143, 136, 136, 136, 136, 146, 150, 226, 136, 246, 83, 236, 2, 16, 17, 17, 17, 17, 149, 102, 11, 253, 104, 182, 235, 26, 221, 68, 68, 68, 68, 68, 139, 80, 193, 173, 147, 205, 229, 253, 136, 136, 136, 136, 40, 57, 41, 77, 29, 121, 138, 93, 0, 34, 34, 34, 34, 162, 210, 72, 191, 0, 105, 241, 101, 72, 34, 34, 34, 34, 162, 34, 85, 184, 116, 148, 231, 116, 180, 207, 193, 75, 77, 68, 68, 68, 68, 148, 184, 14, 243, 59, 217, 236, 104, 19, 17, 17, 17, 17, 93, 105, 225, 167, 147, 125, 198, 101, 253, 109, 34, 34, 34, 34, 162, 197, 91, 193, 207, 148, 145, 126, 171, 195, 22, 159, 136, 136, 136, 136, 104, 88, 204, 85, 71, 158, 0, 60, 68, 204, 159, 136, 136, 136, 136, 200, 76, 172, 142, 246, 123, 0, 31, 60, 167, 217, 120, 78, 143, 136, 136, 136, 136, 200, 89, 140, 142, 246, 10, 92, 51, 155, 136, 136, 136, 136, 10, 23, 163, 163, 253, 25, 186, 41, 35, 39, 163, 114, 16, 17, 17, 17, 17, 21, 163, 134, 238, 5, 199, 23, 0, 91, 225, 190, 252, 12, 59, 17, 17, 17, 17, 37, 227, 255, 4, 204, 203, 101, 202, 200, 6, 124, 97, 146, 136, 136, 136, 136, 50, 20, 114, 234, 200, 14, 192, 90, 185, 255, 87, 139, 130, 16, 17, 17, 17, 17, 149, 194, 101, 202, 136, 203, 111, 137, 136, 136, 136, 136, 22, 99, 5, 224, 136, 121, 95, 121, 100, 71, 155, 136, 136, 136, 136, 232, 134, 244, 101, 198, 126, 251, 116, 39, 13, 118, 180, 137, 136, 136, 136, 136, 174, 60, 66, 215, 201, 62, 226, 50, 2, 126, 139, 159, 97, 39, 34, 34, 34, 34, 186, 242, 2, 93, 71, 123, 168, 163, 220, 205, 252, 61, 17, 17, 17, 17, 81, 80, 150, 171, 142, 108, 1, 188, 83, 236, 255, 25, 192, 223, 70, 101, 33, 34, 34, 34, 34, 42, 130, 175, 41, 35, 61, 233, 136, 246, 214, 255, 161, 16, 17, 17, 17, 17, 233, 89, 141, 104, 127, 86, 238, 191, 1, 240, 99, 228, 191, 31, 156, 75, 66, 68, 68, 68, 68, 20, 129, 69, 71, 251, 35, 128, 70, 177, 255, 159, 240, 55, 101, 132, 95, 145, 36, 34, 34, 34, 162, 34, 85, 0, 94, 33, 159, 50, 242, 138, 241, 41, 35, 189, 143, 194, 244, 58, 127, 135, 66, 68, 68, 68, 68, 228, 206, 247, 136, 246, 19, 116, 163, 202, 27, 140, 79, 25, 233, 125, 113, 41, 12, 17, 17, 17, 17, 81, 9, 164, 163, 206, 253, 246, 172, 72, 187, 22, 166, 249, 50, 148, 0, 17, 17, 17, 17, 81, 142, 86, 176, 153, 50, 210, 211, 172, 98, 66, 68, 68, 68, 68, 84, 140, 103, 232, 70, 179, 63, 58, 228, 193, 142, 54, 17, 17, 17, 17, 45, 202, 123, 232, 58, 217, 174, 47, 44, 74, 211, 215, 140, 148, 19, 17, 17, 17, 17, 37, 235, 8, 221, 148, 145, 202, 49, 31, 233, 212, 148, 218, 49, 125, 34, 34, 34, 34, 34, 111, 230, 174, 58, 242, 8, 96, 173, 216, 127, 7, 224, 155, 99, 94, 92, 121, 132, 136, 136, 136, 136, 178, 49, 183, 163, 253, 65, 177, 239, 1, 192, 191, 103, 230, 39, 193, 143, 214, 16, 17, 17, 17, 81, 116, 115, 59, 218, 141, 98, 223, 63, 102, 230, 245, 93, 184, 95, 51, 51, 31, 34, 34, 34, 34, 162, 168, 86, 144, 207, 205, 222, 122, 200, 111, 43, 204, 235, 232, 33, 47, 34, 34, 34, 34, 162, 104, 164, 171, 141, 248, 234, 248, 106, 62, 136, 195, 23, 34, 137, 136, 136, 136, 40, 170, 57, 83, 71, 26, 225, 126, 135, 25, 121, 184, 166, 179, 241, 148, 39, 17, 17, 17, 17, 81, 112, 210, 101, 253, 222, 123, 204, 243, 69, 152, 39, 215, 211, 38, 34, 34, 34, 162, 44, 85, 136, 211, 225, 213, 76, 31, 113, 249, 250, 36, 17, 17, 17, 17, 81, 84, 210, 14, 239, 139, 231, 124, 53, 47, 96, 250, 206, 155, 136, 136, 136, 136, 72, 204, 117, 142, 118, 35, 220, 239, 79, 199, 244, 135, 252, 0, 240, 36, 220, 247, 29, 46, 31, 212, 33, 34, 34, 34, 34, 202, 134, 244, 115, 232, 22, 29, 221, 90, 152, 247, 25, 192, 222, 32, 127, 34, 34, 34, 34, 34, 19, 210, 142, 238, 171, 97, 25, 164, 47, 98, 190, 130, 47, 69, 18, 17, 17, 17, 81, 4, 46, 83, 71, 26, 225, 126, 7, 135, 180, 165, 158, 132, 251, 61, 64, 247, 153, 120, 34, 34, 34, 34, 162, 104, 164, 75, 236, 181, 134, 101, 208, 172, 122, 210, 25, 150, 131, 136, 136, 136, 136, 200, 11, 205, 170, 31, 149, 113, 89, 158, 19, 42, 11, 17, 17, 17, 17, 209, 44, 161, 63, 187, 238, 163, 44, 103, 0, 159, 2, 148, 135, 136, 136, 136, 136, 200, 217, 30, 105, 117, 108, 165, 171, 159, 88, 190, 152, 73, 68, 68, 68, 68, 244, 27, 237, 203, 144, 141, 112, 191, 131, 50, 93, 87, 79, 194, 253, 30, 224, 247, 83, 240, 68, 68, 68, 68, 68, 222, 60, 66, 62, 85, 35, 212, 146, 122, 154, 151, 34, 159, 3, 149, 137, 136, 136, 136, 136, 72, 69, 250, 217, 245, 208, 171, 124, 116, 194, 114, 241, 165, 72, 34, 34, 34, 34, 10, 70, 51, 117, 164, 17, 238, 231, 251, 179, 235, 83, 158, 20, 251, 110, 140, 202, 64, 68, 68, 68, 68, 228, 76, 58, 106, 108, 241, 217, 245, 49, 43, 200, 95, 138, 12, 177, 26, 10, 17, 17, 17, 17, 145, 88, 141, 180, 87, 247, 144, 174, 134, 114, 198, 229, 88, 136, 136, 136, 136, 136, 76, 73, 167, 142, 72, 63, 99, 30, 122, 218, 72, 239, 179, 98, 223, 141, 85, 33, 136, 136, 136, 136, 136, 180, 82, 248, 236, 250, 20, 105, 25, 67, 174, 138, 66, 68, 68, 68, 68, 52, 40, 165, 207, 174, 143, 145, 174, 138, 114, 126, 219, 151, 136, 136, 136, 136, 40, 170, 22, 178, 206, 235, 75, 172, 2, 190, 209, 220, 16, 196, 46, 43, 17, 17, 17, 17, 21, 78, 50, 71, 187, 17, 166, 117, 112, 47, 134, 23, 63, 32, 95, 234, 239, 29, 194, 175, 142, 66, 68, 68, 68, 68, 244, 11, 233, 210, 121, 41, 124, 226, 92, 186, 58, 202, 25, 151, 149, 74, 136, 136, 136, 136, 136, 162, 208, 124, 118, 61, 21, 71, 200, 151, 34, 228, 75, 145, 68, 68, 68, 68, 100, 98, 106, 234, 72, 35, 76, 39, 214, 178, 126, 247, 60, 9, 247, 123, 128, 124, 217, 66, 34, 34, 34, 34, 34, 175, 58, 228, 183, 138, 71, 5, 249, 40, 124, 23, 169, 140, 68, 68, 68, 68, 180, 112, 210, 14, 107, 106, 47, 22, 62, 35, 143, 37, 9, 137, 136, 136, 136, 104, 129, 222, 67, 214, 81, 61, 198, 42, 224, 8, 105, 217, 207, 0, 62, 69, 42, 35, 17, 17, 17, 17, 45, 212, 39, 228, 189, 122, 135, 116, 181, 148, 215, 88, 5, 36, 34, 34, 34, 162, 114, 141, 189, 12, 217, 8, 211, 56, 204, 47, 134, 137, 39, 225, 126, 15, 72, 99, 105, 66, 34, 34, 34, 34, 90, 0, 205, 11, 133, 169, 46, 145, 167, 57, 134, 231, 72, 101, 36, 34, 34, 34, 162, 133, 105, 33, 235, 160, 166, 254, 41, 115, 233, 170, 41, 124, 41, 146, 136, 136, 136, 136, 188, 26, 154, 58, 34, 93, 95, 250, 224, 169, 28, 86, 158, 20, 251, 110, 140, 202, 64, 68, 68, 68, 68, 244, 95, 210, 23, 9, 235, 88, 5, 20, 90, 65, 126, 44, 41, 174, 158, 66, 68, 68, 68, 68, 5, 145, 126, 118, 61, 151, 213, 58, 246, 144, 79, 31, 73, 253, 198, 129, 136, 136, 136, 136, 50, 113, 111, 234, 72, 41, 211, 70, 122, 159, 21, 251, 110, 172, 10, 65, 68, 68, 68, 68, 36, 125, 129, 48, 165, 207, 174, 79, 121, 65, 254, 171, 168, 16, 17, 17, 17, 81, 198, 86, 40, 115, 149, 142, 143, 144, 31, 87, 78, 55, 16, 68, 68, 68, 68, 148, 137, 156, 63, 187, 62, 70, 115, 3, 145, 250, 146, 133, 68, 68, 68, 68, 148, 129, 219, 57, 218, 141, 240, 119, 7, 191, 197, 48, 247, 3, 242, 165, 254, 222, 225, 242, 66, 40, 17, 17, 17, 17, 145, 55, 71, 200, 70, 125, 115, 252, 100, 121, 13, 249, 168, 246, 62, 82, 25, 137, 136, 136, 136, 168, 64, 21, 202, 127, 97, 80, 122, 35, 241, 138, 124, 143, 145, 136, 136, 136, 136, 18, 112, 61, 117, 68, 186, 172, 223, 23, 92, 166, 98, 228, 232, 73, 184, 223, 3, 228, 241, 32, 34, 34, 34, 34, 26, 245, 12, 217, 104, 239, 54, 86, 1, 61, 208, 140, 218, 119, 145, 202, 72, 68, 68, 68, 68, 133, 145, 126, 170, 60, 247, 23, 5, 165, 55, 20, 185, 45, 97, 72, 68, 68, 68, 68, 9, 146, 190, 40, 152, 203, 103, 215, 199, 72, 151, 48, 60, 131, 159, 100, 39, 34, 34, 34, 34, 71, 247, 62, 193, 62, 230, 96, 81, 136, 192, 254, 2, 240, 61, 118, 33, 136, 136, 136, 136, 168, 108, 125, 71, 91, 218, 241, 60, 24, 149, 35, 180, 207, 130, 125, 190, 227, 242, 226, 39, 17, 17, 17, 17, 209, 44, 123, 44, 103, 201, 187, 21, 166, 231, 164, 183, 209, 74, 71, 68, 68, 68, 68, 69, 89, 225, 242, 249, 241, 161, 78, 118, 105, 243, 149, 91, 240, 131, 53, 68, 68, 68, 68, 100, 228, 31, 55, 255, 188, 2, 240, 7, 126, 126, 138, 253, 132, 203, 218, 211, 57, 175, 157, 61, 166, 2, 176, 193, 229, 179, 235, 15, 111, 255, 238, 9, 192, 127, 34, 149, 135, 136, 136, 136, 136, 10, 113, 219, 209, 78, 73, 141, 95, 59, 192, 247, 124, 121, 219, 190, 5, 41, 17, 17, 17, 17, 17, 165, 106, 133, 75, 223, 177, 153, 216, 239, 128, 64, 131, 200, 41, 117, 180, 251, 209, 229, 6, 211, 1, 186, 117, 194, 37, 104, 7, 148, 63, 26, 93, 227, 18, 159, 7, 92, 42, 211, 144, 211, 219, 246, 5, 151, 184, 148, 248, 68, 130, 136, 136, 202, 240, 136, 225, 129, 181, 239, 0, 190, 6, 44, 75, 74, 42, 252, 236, 23, 189, 195, 248, 117, 191, 95, 196, 225, 240, 182, 253, 109, 90, 178, 116, 212, 184, 124, 205, 187, 193, 120, 124, 238, 233, 227, 245, 39, 140, 226, 149, 66, 71, 251, 17, 192, 14, 254, 62, 121, 254, 29, 151, 85, 69, 254, 229, 41, 189, 20, 188, 199, 37, 62, 155, 25, 105, 28, 112, 153, 22, 115, 64, 217, 79, 0, 248, 36, 228, 62, 54, 214, 50, 201, 141, 134, 36, 230, 17, 191, 214, 163, 245, 200, 190, 75, 173, 71, 43, 252, 26, 163, 102, 98, 255, 3, 126, 141, 211, 18, 234, 212, 10, 63, 59, 70, 13, 198, 235, 209, 181, 19, 126, 198, 233, 79, 148, 27, 171, 21, 46, 215, 251, 63, 32, 143, 205, 144, 167, 183, 173, 196, 243, 239, 61, 46, 253, 189, 181, 167, 244, 78, 184, 196, 252, 47, 79, 233, 69, 87, 65, 247, 149, 70, 237, 246, 10, 224, 99, 176, 163, 177, 209, 2, 56, 194, 127, 92, 182, 40, 103, 5, 153, 10, 151, 227, 233, 160, 143, 197, 17, 151, 23, 95, 75, 93, 97, 102, 133, 203, 57, 224, 163, 14, 237, 81, 222, 11, 209, 189, 26, 192, 39, 12, 191, 12, 62, 182, 189, 188, 253, 182, 212, 216, 0, 151, 122, 180, 133, 191, 122, 148, 251, 215, 133, 135, 180, 112, 107, 135, 110, 183, 14, 229, 182, 73, 21, 46, 215, 125, 233, 151, 168, 167, 174, 101, 207, 40, 235, 11, 206, 125, 155, 237, 35, 62, 183, 219, 51, 202, 105, 167, 106, 248, 239, 27, 93, 111, 71, 20, 16, 171, 247, 176, 169, 72, 67, 141, 86, 110, 13, 251, 35, 220, 46, 250, 218, 70, 234, 125, 168, 3, 50, 240, 8, 191, 55, 106, 253, 13, 72, 9, 216, 88, 203, 188, 135, 223, 198, 250, 136, 188, 207, 169, 91, 125, 7, 219, 162, 253, 121, 70, 126, 237, 242, 144, 22, 54, 237, 245, 11, 202, 233, 112, 87, 176, 29, 88, 43, 161, 195, 93, 195, 182, 243, 216, 111, 159, 144, 239, 64, 219, 10, 211, 75, 81, 251, 220, 246, 200, 52, 86, 31, 17, 46, 72, 253, 150, 211, 242, 132, 33, 43, 209, 25, 151, 198, 60, 167, 138, 84, 129, 79, 66, 198, 212, 96, 99, 61, 197, 58, 70, 71, 228, 211, 222, 12, 105, 17, 102, 48, 228, 83, 168, 3, 50, 80, 193, 207, 8, 246, 212, 214, 33, 239, 78, 228, 22, 246, 49, 234, 183, 109, 160, 99, 242, 109, 143, 112, 49, 58, 227, 114, 110, 231, 118, 163, 91, 193, 126, 0, 242, 222, 246, 130, 204, 206, 191, 208, 149, 233, 118, 107, 237, 15, 209, 217, 10, 97, 26, 237, 123, 219, 17, 121, 156, 116, 124, 18, 50, 46, 244, 249, 149, 91, 99, 205, 209, 16, 153, 208, 245, 40, 183, 155, 125, 96, 252, 59, 12, 86, 91, 27, 228, 200, 252, 169, 192, 142, 209, 148, 152, 215, 253, 87, 228, 83, 167, 30, 17, 238, 218, 63, 20, 171, 44, 174, 117, 49, 70, 178, 239, 109, 169, 6, 43, 70, 131, 116, 91, 145, 82, 110, 156, 248, 36, 100, 24, 27, 235, 105, 21, 120, 209, 159, 194, 155, 125, 153, 79, 136, 19, 163, 51, 242, 121, 2, 192, 142, 145, 76, 236, 235, 254, 25, 233, 79, 119, 91, 33, 204, 83, 90, 73, 27, 149, 244, 128, 64, 139, 248, 65, 74, 249, 4, 220, 35, 126, 92, 206, 72, 119, 100, 41, 118, 124, 90, 251, 67, 156, 133, 141, 245, 56, 94, 244, 101, 98, 215, 163, 212, 111, 246, 129, 184, 157, 236, 126, 75, 189, 179, 205, 142, 145, 204, 30, 241, 99, 212, 159, 119, 169, 182, 79, 43, 196, 111, 151, 174, 183, 84, 251, 72, 120, 143, 248, 193, 185, 87, 177, 42, 203, 131, 86, 72, 161, 225, 190, 173, 72, 41, 225, 147, 144, 113, 123, 196, 143, 77, 127, 78, 165, 24, 35, 94, 244, 101, 82, 169, 71, 201, 94, 200, 144, 214, 128, 81, 107, 124, 172, 174, 216, 49, 146, 217, 34, 126, 108, 174, 183, 148, 250, 68, 215, 44, 223, 199, 114, 221, 246, 166, 71, 236, 160, 66, 220, 145, 164, 169, 19, 48, 182, 22, 241, 227, 144, 114, 69, 74, 41, 62, 41, 118, 36, 83, 187, 73, 123, 69, 90, 23, 53, 94, 244, 101, 82, 171, 71, 41, 180, 205, 183, 90, 196, 143, 203, 237, 150, 226, 83, 36, 118, 140, 166, 165, 56, 248, 216, 159, 119, 41, 181, 79, 91, 196, 143, 201, 208, 150, 212, 130, 9, 29, 226, 7, 100, 108, 219, 218, 29, 250, 164, 10, 233, 222, 132, 156, 17, 191, 17, 127, 68, 252, 24, 220, 110, 71, 164, 211, 16, 181, 136, 31, 143, 123, 91, 74, 157, 164, 20, 47, 250, 41, 197, 7, 72, 183, 30, 237, 45, 15, 90, 41, 197, 182, 232, 140, 244, 110, 254, 183, 136, 31, 147, 161, 45, 149, 142, 209, 10, 105, 95, 247, 83, 153, 150, 148, 234, 57, 119, 125, 238, 37, 209, 23, 104, 17, 63, 24, 146, 173, 178, 10, 192, 132, 78, 81, 198, 165, 85, 164, 148, 27, 163, 206, 240, 184, 165, 42, 164, 27, 159, 51, 210, 88, 98, 107, 139, 248, 113, 24, 218, 82, 185, 152, 165, 94, 143, 98, 223, 236, 3, 233, 76, 61, 26, 218, 58, 187, 67, 87, 97, 199, 72, 38, 181, 167, 71, 247, 182, 218, 236, 232, 229, 82, 122, 18, 57, 180, 237, 205, 142, 94, 225, 136, 248, 129, 72, 53, 88, 237, 140, 242, 150, 30, 27, 32, 205, 145, 200, 235, 45, 246, 232, 72, 135, 248, 49, 24, 219, 98, 207, 247, 139, 253, 242, 163, 100, 171, 205, 142, 94, 46, 135, 122, 20, 187, 115, 148, 67, 199, 104, 107, 118, 244, 114, 236, 24, 77, 171, 16, 63, 6, 146, 237, 104, 21, 0, 161, 22, 241, 99, 32, 221, 42, 163, 24, 136, 228, 20, 168, 24, 193, 58, 122, 44, 123, 105, 177, 73, 117, 254, 218, 245, 22, 179, 35, 217, 10, 203, 24, 123, 219, 91, 5, 64, 160, 27, 41, 87, 42, 219, 209, 236, 232, 101, 88, 143, 166, 85, 35, 229, 74, 105, 139, 125, 67, 146, 75, 93, 58, 35, 110, 199, 104, 63, 82, 174, 212, 182, 214, 40, 6, 18, 57, 220, 180, 245, 219, 222, 40, 6, 34, 199, 129, 66, 165, 186, 133, 12, 86, 109, 120, 28, 22, 219, 214, 38, 12, 131, 114, 169, 59, 33, 235, 204, 181, 92, 226, 115, 70, 156, 139, 90, 61, 163, 188, 161, 183, 214, 40, 6, 18, 172, 71, 211, 246, 138, 50, 198, 222, 182, 70, 49, 144, 96, 199, 104, 90, 165, 40, 99, 10, 91, 103, 19, 134, 73, 181, 162, 140, 169, 108, 81, 110, 114, 115, 171, 80, 103, 132, 29, 93, 74, 125, 90, 196, 237, 246, 106, 19, 134, 187, 114, 24, 205, 190, 222, 66, 159, 96, 181, 199, 178, 135, 216, 246, 54, 97, 24, 213, 205, 40, 111, 232, 237, 104, 20, 131, 41, 185, 213, 163, 173, 77, 24, 70, 85, 51, 202, 27, 99, 11, 217, 78, 95, 203, 173, 46, 157, 17, 167, 99, 148, 202, 50, 181, 154, 45, 198, 139, 182, 251, 25, 229, 141, 181, 181, 38, 145, 152, 144, 99, 133, 10, 85, 169, 86, 17, 143, 111, 206, 22, 234, 165, 164, 46, 224, 49, 249, 216, 182, 54, 97, 24, 196, 155, 180, 113, 149, 199, 178, 135, 218, 90, 147, 72, 140, 99, 61, 154, 182, 157, 81, 222, 88, 91, 140, 151, 71, 247, 51, 202, 27, 107, 107, 77, 34, 49, 46, 167, 81, 255, 126, 139, 241, 210, 118, 234, 239, 214, 220, 219, 158, 167, 14, 234, 159, 142, 193, 24, 243, 193, 32, 205, 16, 66, 148, 187, 9, 144, 135, 133, 38, 64, 30, 85, 160, 124, 124, 218, 4, 204, 107, 133, 252, 206, 173, 7, 132, 189, 248, 231, 22, 31, 32, 124, 157, 103, 61, 146, 201, 45, 70, 64, 156, 50, 51, 78, 211, 86, 0, 222, 5, 206, 211, 135, 38, 112, 126, 143, 184, 156, 235, 185, 105, 166, 118, 176, 232, 104, 231, 88, 161, 128, 48, 229, 102, 108, 134, 229, 216, 96, 175, 17, 238, 241, 90, 19, 40, 31, 223, 154, 128, 121, 229, 88, 135, 66, 151, 185, 9, 156, 159, 47, 77, 192, 188, 42, 228, 217, 86, 55, 129, 243, 43, 182, 99, 148, 121, 126, 190, 132, 62, 7, 114, 60, 231, 128, 203, 57, 48, 218, 15, 240, 221, 209, 94, 33, 207, 19, 15, 184, 116, 154, 172, 53, 1, 242, 176, 208, 20, 146, 135, 133, 38, 80, 62, 185, 54, 66, 77, 161, 121, 249, 242, 128, 176, 75, 253, 229, 90, 143, 66, 150, 59, 215, 24, 173, 17, 118, 254, 113, 174, 113, 154, 236, 24, 121, 150, 107, 156, 128, 176, 109, 211, 58, 96, 94, 190, 141, 246, 123, 125, 119, 180, 115, 174, 80, 33, 202, 190, 14, 144, 135, 149, 202, 56, 253, 92, 235, 78, 168, 114, 55, 129, 242, 241, 45, 84, 124, 82, 250, 66, 158, 86, 200, 186, 223, 4, 204, 203, 167, 38, 96, 94, 185, 182, 69, 64, 216, 178, 175, 3, 230, 229, 91, 200, 1, 193, 117, 192, 188, 124, 91, 7, 204, 171, 9, 152, 151, 111, 205, 216, 127, 180, 152, 58, 66, 195, 214, 177, 11, 48, 195, 58, 243, 244, 173, 172, 11, 203, 199, 130, 245, 77, 26, 144, 119, 124, 214, 133, 230, 229, 91, 136, 122, 4, 176, 163, 45, 213, 4, 204, 203, 183, 38, 96, 94, 235, 128, 121, 249, 182, 142, 93, 128, 18, 176, 163, 77, 41, 8, 249, 120, 202, 183, 38, 80, 62, 235, 64, 249, 88, 88, 7, 200, 131, 157, 35, 153, 117, 192, 188, 124, 91, 7, 202, 39, 215, 233, 143, 64, 222, 101, 39, 42, 18, 59, 218, 68, 68, 68, 68, 68, 6, 216, 209, 38, 34, 34, 34, 34, 50, 224, 187, 163, 125, 242, 156, 94, 72, 167, 216, 5, 32, 34, 34, 34, 90, 160, 239, 177, 11, 48, 195, 104, 217, 125, 119, 180, 191, 121, 78, 47, 164, 83, 128, 60, 190, 4, 200, 195, 74, 206, 101, 39, 34, 34, 191, 138, 237, 24, 121, 150, 243, 181, 51, 100, 217, 139, 141, 147, 197, 212, 145, 92, 131, 21, 162, 220, 57, 55, 76, 63, 12, 211, 206, 57, 46, 161, 202, 158, 235, 121, 5, 132, 41, 251, 41, 64, 30, 86, 78, 1, 243, 98, 61, 154, 118, 8, 148, 143, 133, 67, 192, 188, 88, 151, 100, 120, 125, 147, 57, 5, 204, 203, 183, 160, 35, 218, 64, 190, 39, 95, 136, 114, 31, 2, 228, 97, 225, 96, 156, 254, 87, 227, 244, 45, 133, 170, 239, 57, 55, 214, 150, 55, 105, 189, 83, 128, 60, 172, 156, 2, 230, 197, 122, 52, 45, 231, 24, 133, 116, 138, 93, 128, 25, 66, 254, 141, 15, 1, 243, 242, 237, 239, 128, 121, 229, 218, 119, 252, 142, 137, 62, 140, 69, 71, 251, 96, 144, 102, 8, 135, 0, 121, 228, 90, 145, 56, 34, 57, 236, 20, 40, 159, 67, 160, 124, 124, 11, 85, 231, 79, 129, 242, 177, 16, 178, 93, 56, 4, 204, 203, 167, 67, 192, 188, 114, 109, 167, 1, 118, 140, 36, 38, 59, 70, 158, 229, 26, 167, 208, 229, 254, 138, 60, 111, 114, 15, 83, 59, 88, 116, 180, 255, 52, 72, 211, 218, 23, 132, 153, 95, 126, 8, 144, 135, 133, 67, 128, 60, 216, 24, 165, 145, 143, 111, 135, 64, 249, 124, 67, 190, 157, 109, 206, 131, 156, 22, 178, 220, 33, 59, 171, 62, 29, 2, 231, 87, 108, 199, 200, 179, 31, 200, 243, 188, 59, 68, 200, 51, 199, 254, 227, 97, 106, 7, 139, 142, 246, 15, 228, 23, 172, 167, 64, 249, 228, 24, 155, 239, 0, 254, 10, 144, 207, 33, 64, 30, 22, 14, 133, 229, 227, 219, 161, 208, 188, 124, 57, 33, 236, 75, 228, 135, 128, 121, 249, 116, 8, 156, 95, 110, 237, 52, 192, 142, 145, 212, 33, 66, 158, 57, 198, 233, 115, 132, 60, 115, 140, 211, 83, 172, 140, 107, 0, 231, 76, 182, 87, 0, 43, 155, 48, 220, 213, 26, 29, 135, 213, 182, 183, 9, 195, 111, 170, 128, 199, 228, 107, 59, 154, 68, 98, 216, 179, 199, 178, 135, 216, 120, 110, 77, 111, 159, 76, 34, 49, 46, 199, 122, 20, 90, 142, 117, 169, 50, 137, 196, 184, 247, 51, 202, 27, 107, 11, 217, 38, 245, 170, 25, 229, 141, 177, 29, 109, 194, 32, 114, 28, 41, 87, 106, 219, 179, 81, 12, 196, 58, 196, 15, 130, 100, 219, 90, 5, 96, 68, 78, 21, 169, 50, 138, 193, 61, 47, 134, 199, 97, 177, 133, 238, 36, 181, 30, 203, 30, 98, 219, 219, 132, 97, 212, 235, 140, 242, 198, 216, 30, 109, 194, 48, 138, 245, 104, 218, 10, 121, 213, 165, 23, 155, 48, 136, 28, 71, 202, 149, 218, 22, 179, 99, 212, 141, 148, 43, 181, 173, 53, 138, 129, 68, 59, 82, 174, 212, 182, 218, 40, 6, 98, 53, 226, 7, 97, 106, 11, 61, 226, 214, 203, 165, 34, 237, 173, 2, 48, 32, 151, 184, 244, 91, 101, 19, 134, 81, 199, 25, 229, 13, 189, 213, 70, 49, 24, 179, 159, 81, 222, 208, 91, 103, 20, 3, 137, 156, 234, 81, 101, 20, 131, 41, 91, 69, 25, 99, 111, 173, 81, 12, 36, 218, 145, 114, 165, 182, 213, 70, 49, 144, 168, 70, 202, 149, 210, 118, 180, 10, 128, 194, 17, 241, 227, 48, 181, 117, 102, 71, 175, 180, 71, 252, 96, 140, 109, 173, 221, 161, 79, 74, 125, 244, 246, 21, 236, 72, 142, 109, 123, 171, 0, 76, 104, 21, 101, 140, 185, 117, 86, 1, 152, 80, 41, 202, 24, 123, 171, 141, 98, 32, 145, 75, 61, 218, 91, 5, 64, 32, 151, 81, 237, 163, 85, 0, 20, 142, 136, 31, 135, 169, 173, 51, 59, 122, 185, 61, 226, 199, 97, 106, 171, 205, 142, 94, 174, 70, 252, 56, 76, 109, 149, 217, 209, 43, 173, 144, 238, 9, 24, 123, 110, 77, 234, 21, 105, 107, 119, 232, 163, 90, 69, 25, 151, 122, 146, 165, 126, 147, 118, 70, 156, 41, 17, 189, 79, 35, 229, 74, 101, 235, 204, 142, 94, 46, 245, 122, 20, 235, 102, 255, 218, 71, 196, 143, 195, 212, 86, 155, 29, 189, 92, 141, 248, 113, 152, 218, 98, 215, 37, 32, 253, 155, 183, 24, 239, 140, 12, 217, 35, 126, 60, 114, 136, 19, 128, 203, 5, 55, 181, 138, 245, 130, 56, 83, 70, 110, 109, 17, 63, 22, 247, 182, 206, 242, 160, 5, 58, 196, 143, 193, 216, 182, 181, 59, 116, 145, 26, 241, 99, 48, 182, 237, 237, 14, 93, 36, 245, 139, 217, 25, 105, 92, 244, 83, 175, 71, 177, 207, 179, 94, 202, 55, 36, 157, 225, 113, 107, 237, 17, 63, 30, 67, 91, 74, 29, 163, 84, 207, 187, 84, 250, 69, 189, 21, 210, 60, 247, 98, 190, 15, 49, 170, 69, 252, 224, 244, 219, 43, 226, 142, 182, 221, 74, 109, 5, 128, 35, 226, 159, 108, 41, 222, 156, 93, 159, 100, 177, 227, 3, 164, 123, 147, 150, 66, 253, 1, 210, 106, 115, 110, 183, 143, 134, 199, 173, 149, 106, 61, 234, 44, 15, 90, 169, 66, 154, 237, 81, 172, 119, 140, 134, 176, 99, 36, 151, 218, 121, 151, 90, 191, 168, 151, 218, 185, 119, 68, 26, 131, 36, 131, 90, 196, 15, 216, 17, 233, 85, 166, 148, 26, 167, 148, 78, 182, 22, 241, 227, 145, 114, 124, 128, 244, 110, 210, 206, 72, 43, 62, 123, 196, 143, 199, 237, 182, 55, 61, 98, 55, 169, 213, 163, 35, 210, 234, 64, 2, 233, 141, 66, 190, 34, 141, 41, 35, 183, 42, 196, 191, 206, 223, 214, 165, 202, 244, 136, 221, 237, 17, 63, 62, 125, 93, 74, 169, 221, 190, 149, 202, 192, 91, 234, 113, 250, 175, 152, 1, 75, 101, 36, 242, 158, 21, 226, 95, 236, 94, 144, 94, 37, 74, 109, 174, 237, 123, 219, 195, 85, 75, 233, 38, 45, 213, 248, 116, 136, 31, 151, 235, 115, 44, 197, 54, 40, 165, 122, 148, 242, 197, 172, 69, 252, 248, 244, 91, 107, 124, 172, 115, 176, 99, 36, 23, 251, 29, 128, 23, 164, 123, 35, 114, 45, 118, 27, 149, 106, 219, 61, 232, 17, 225, 95, 144, 204, 37, 72, 123, 176, 18, 221, 138, 21, 147, 219, 173, 181, 62, 80, 71, 41, 220, 164, 189, 34, 189, 78, 118, 47, 149, 206, 118, 135, 116, 207, 49, 32, 141, 122, 148, 226, 205, 254, 173, 26, 113, 59, 145, 169, 142, 100, 223, 98, 199, 72, 174, 5, 99, 36, 17, 171, 78, 61, 35, 175, 56, 253, 87, 200, 70, 253, 35, 242, 10, 82, 232, 81, 220, 28, 42, 81, 172, 134, 232, 140, 60, 70, 69, 128, 120, 55, 36, 140, 207, 244, 182, 15, 112, 124, 190, 196, 138, 83, 78, 23, 253, 88, 35, 182, 185, 156, 107, 61, 118, 140, 228, 106, 132, 173, 83, 57, 198, 8, 184, 148, 121, 139, 112, 113, 74, 233, 125, 26, 103, 239, 97, 55, 186, 157, 195, 232, 200, 144, 16, 163, 254, 175, 72, 119, 148, 246, 158, 22, 225, 27, 236, 220, 234, 80, 232, 155, 180, 14, 121, 53, 214, 49, 166, 34, 237, 131, 28, 153, 95, 188, 217, 159, 86, 33, 108, 39, 50, 183, 182, 168, 199, 142, 145, 92, 136, 1, 200, 148, 159, 62, 106, 212, 176, 237, 35, 117, 200, 243, 124, 27, 181, 133, 191, 160, 189, 160, 140, 138, 212, 55, 80, 22, 119, 185, 159, 144, 199, 188, 172, 91, 53, 194, 93, 220, 246, 200, 239, 226, 15, 132, 187, 73, 251, 20, 234, 128, 60, 123, 143, 48, 35, 71, 185, 95, 208, 120, 179, 47, 243, 9, 246, 245, 105, 27, 236, 104, 236, 212, 96, 199, 72, 170, 134, 205, 117, 238, 19, 242, 188, 166, 141, 105, 225, 55, 86, 207, 200, 187, 221, 22, 121, 143, 75, 7, 71, 123, 66, 30, 113, 169, 68, 117, 248, 34, 155, 91, 225, 114, 151, 62, 183, 50, 245, 49, 170, 194, 22, 223, 187, 21, 108, 71, 220, 142, 200, 255, 68, 179, 188, 73, 123, 70, 254, 117, 168, 130, 109, 29, 202, 113, 132, 246, 30, 222, 236, 203, 84, 176, 25, 137, 124, 70, 57, 157, 199, 94, 11, 118, 140, 164, 106, 204, 175, 87, 175, 184, 156, 195, 165, 156, 107, 67, 106, 184, 245, 29, 207, 184, 212, 199, 45, 202, 59, 215, 68, 42, 200, 166, 150, 148, 122, 146, 221, 243, 136, 75, 167, 91, 123, 242, 229, 252, 56, 109, 72, 133, 203, 137, 229, 171, 19, 112, 196, 229, 34, 80, 66, 7, 169, 231, 235, 38, 173, 143, 79, 105, 141, 245, 35, 252, 206, 73, 206, 109, 14, 173, 148, 207, 122, 84, 194, 141, 218, 144, 190, 62, 205, 109, 147, 58, 148, 89, 143, 174, 205, 233, 24, 157, 223, 126, 91, 122, 140, 174, 189, 199, 229, 230, 180, 131, 60, 70, 109, 148, 146, 198, 87, 225, 210, 94, 109, 49, 29, 175, 165, 198, 232, 23, 143, 144, 157, 112, 75, 182, 194, 116, 195, 254, 18, 173, 116, 246, 42, 92, 78, 22, 77, 3, 116, 111, 59, 134, 46, 120, 96, 174, 55, 105, 215, 91, 174, 211, 69, 166, 244, 13, 179, 143, 81, 201, 109, 224, 178, 135, 54, 183, 30, 189, 162, 220, 142, 246, 181, 26, 63, 47, 244, 218, 142, 247, 82, 98, 212, 187, 238, 24, 245, 219, 212, 19, 167, 23, 148, 53, 40, 226, 98, 139, 233, 122, 180, 228, 24, 173, 48, 125, 35, 87, 250, 117, 95, 100, 15, 89, 195, 84, 199, 42, 96, 2, 62, 66, 22, 163, 54, 86, 1, 3, 123, 143, 95, 27, 236, 45, 228, 157, 130, 37, 215, 35, 233, 84, 138, 37, 140, 34, 213, 248, 253, 194, 63, 117, 81, 187, 222, 150, 124, 113, 147, 156, 107, 93, 180, 210, 197, 87, 65, 214, 241, 222, 199, 42, 96, 34, 36, 237, 81, 169, 55, 254, 82, 146, 122, 180, 141, 86, 186, 248, 90, 200, 218, 235, 37, 199, 8, 128, 124, 36, 96, 201, 119, 110, 210, 155, 145, 146, 71, 181, 167, 72, 59, 73, 75, 190, 184, 117, 96, 163, 52, 70, 242, 116, 141, 55, 108, 242, 24, 45, 225, 134, 237, 30, 233, 192, 200, 107, 172, 2, 38, 66, 114, 237, 95, 114, 140, 106, 200, 234, 209, 49, 86, 1, 19, 160, 121, 234, 102, 218, 102, 255, 211, 50, 113, 15, 30, 20, 251, 61, 25, 150, 35, 101, 107, 225, 126, 239, 176, 156, 81, 109, 87, 27, 44, 235, 145, 173, 139, 77, 236, 2, 68, 34, 109, 139, 0, 224, 131, 89, 41, 202, 241, 46, 118, 1, 34, 209, 92, 211, 150, 122, 51, 242, 8, 89, 156, 30, 176, 172, 119, 180, 92, 172, 177, 220, 235, 190, 166, 205, 126, 130, 225, 96, 109, 202, 29, 109, 109, 35, 243, 1, 203, 60, 233, 214, 138, 125, 63, 99, 153, 35, 255, 154, 139, 250, 198, 170, 16, 137, 251, 34, 220, 111, 141, 101, 143, 216, 74, 44, 181, 19, 169, 193, 24, 77, 107, 98, 23, 32, 3, 155, 216, 5, 136, 100, 173, 216, 247, 15, 171, 66, 36, 78, 211, 198, 172, 1, 236, 108, 138, 145, 54, 233, 35, 182, 219, 71, 73, 75, 27, 145, 212, 198, 104, 137, 143, 254, 165, 211, 34, 250, 58, 180, 196, 155, 17, 233, 244, 154, 165, 78, 177, 145, 62, 170, 237, 183, 37, 214, 33, 64, 190, 50, 73, 23, 171, 128, 145, 105, 206, 179, 37, 79, 247, 227, 185, 54, 78, 83, 143, 204, 167, 70, 36, 72, 51, 213, 239, 122, 51, 25, 172, 77, 121, 68, 187, 113, 248, 205, 210, 166, 144, 184, 156, 60, 59, 44, 239, 102, 68, 227, 1, 203, 29, 1, 144, 218, 96, 121, 23, 183, 147, 114, 255, 165, 78, 31, 145, 62, 25, 105, 44, 11, 145, 176, 147, 98, 223, 119, 96, 91, 45, 177, 137, 93, 128, 12, 236, 98, 23, 32, 176, 198, 241, 119, 79, 48, 184, 182, 149, 214, 209, 238, 127, 87, 226, 186, 209, 247, 172, 29, 127, 247, 217, 103, 33, 50, 160, 125, 76, 189, 177, 40, 68, 97, 54, 177, 11, 16, 216, 55, 229, 254, 75, 237, 104, 159, 20, 251, 46, 113, 14, 242, 73, 185, 255, 82, 235, 145, 198, 18, 7, 70, 214, 202, 253, 27, 44, 235, 124, 107, 28, 127, 103, 50, 88, 155, 106, 71, 91, 250, 50, 196, 144, 29, 150, 81, 169, 214, 142, 191, 251, 128, 101, 61, 74, 210, 214, 165, 53, 150, 251, 2, 137, 212, 38, 118, 1, 18, 215, 196, 46, 64, 6, 56, 79, 123, 90, 19, 187, 0, 25, 88, 99, 89, 215, 51, 192, 237, 218, 191, 164, 27, 146, 102, 198, 111, 63, 96, 33, 215, 127, 151, 249, 217, 75, 156, 223, 166, 153, 123, 188, 196, 248, 244, 92, 226, 115, 140, 82, 210, 120, 180, 115, 254, 206, 88, 198, 205, 236, 181, 36, 230, 251, 37, 174, 134, 60, 62, 75, 92, 7, 89, 19, 159, 37, 207, 65, 214, 198, 104, 31, 167, 152, 209, 184, 94, 251, 151, 48, 21, 201, 117, 126, 246, 245, 230, 245, 125, 191, 84, 71, 180, 125, 60, 46, 123, 135, 242, 95, 252, 155, 51, 34, 180, 148, 229, 254, 92, 59, 131, 107, 44, 111, 148, 68, 107, 73, 35, 36, 46, 248, 216, 127, 28, 71, 180, 101, 88, 143, 166, 109, 176, 172, 27, 146, 181, 227, 239, 118, 30, 203, 144, 42, 31, 231, 203, 34, 222, 247, 155, 123, 55, 178, 132, 81, 183, 21, 252, 220, 181, 149, 222, 56, 185, 140, 32, 245, 91, 23, 161, 188, 177, 108, 225, 86, 127, 150, 228, 8, 198, 103, 138, 118, 52, 105, 105, 42, 232, 207, 179, 231, 40, 37, 141, 203, 165, 189, 94, 194, 192, 81, 143, 215, 252, 97, 29, 252, 245, 31, 139, 125, 223, 111, 78, 199, 232, 222, 246, 130, 50, 43, 150, 175, 56, 109, 67, 23, 60, 176, 185, 113, 42, 245, 70, 237, 214, 22, 188, 184, 77, 113, 105, 192, 151, 82, 127, 174, 49, 62, 227, 92, 58, 71, 75, 227, 122, 173, 95, 10, 94, 243, 135, 249, 232, 23, 93, 159, 123, 179, 219, 168, 20, 167, 142, 52, 158, 211, 123, 135, 50, 31, 151, 248, 122, 236, 250, 7, 202, 158, 183, 53, 55, 78, 156, 30, 49, 110, 19, 187, 0, 137, 219, 196, 46, 64, 226, 56, 125, 100, 178, 196, 32, 215, 0, 0, 32, 0, 73, 68, 65, 84, 26, 191, 128, 40, 243, 14, 203, 184, 113, 155, 123, 189, 254, 3, 101, 14, 62, 2, 254, 167, 123, 122, 153, 66, 178, 132, 142, 54, 112, 169, 88, 190, 255, 0, 177, 173, 61, 165, 243, 128, 50, 111, 68, 122, 115, 86, 175, 1, 248, 89, 246, 41, 13, 24, 159, 49, 75, 156, 95, 43, 93, 75, 27, 240, 215, 142, 149, 110, 137, 245, 200, 197, 18, 6, 70, 214, 51, 127, 255, 128, 114, 7, 0, 26, 131, 52, 139, 124, 223, 207, 231, 176, 255, 245, 118, 68, 89, 119, 113, 46, 143, 177, 199, 182, 210, 110, 68, 122, 91, 204, 143, 205, 62, 120, 169, 195, 155, 19, 167, 165, 172, 30, 225, 122, 206, 45, 97, 148, 237, 154, 38, 78, 93, 164, 50, 198, 228, 250, 8, 123, 73, 92, 219, 162, 37, 204, 65, 174, 225, 167, 63, 84, 34, 223, 253, 34, 47, 237, 120, 106, 35, 218, 150, 157, 189, 53, 202, 122, 139, 212, 247, 35, 215, 157, 231, 244, 82, 225, 35, 78, 31, 80, 126, 227, 61, 199, 82, 70, 219, 78, 142, 191, 107, 60, 150, 161, 52, 75, 156, 58, 114, 114, 248, 205, 3, 150, 119, 195, 230, 226, 1, 229, 183, 71, 107, 79, 105, 180, 30, 210, 73, 77, 99, 152, 246, 159, 112, 236, 7, 164, 214, 209, 182, 62, 65, 62, 160, 140, 185, 110, 43, 204, 159, 18, 113, 171, 65, 153, 39, 158, 143, 56, 241, 179, 236, 227, 214, 40, 227, 188, 154, 114, 114, 252, 221, 198, 99, 25, 114, 112, 80, 236, 251, 128, 229, 77, 61, 58, 57, 254, 110, 227, 177, 12, 37, 219, 196, 46, 128, 177, 181, 167, 116, 118, 158, 210, 73, 133, 245, 53, 104, 13, 199, 152, 165, 214, 209, 110, 2, 228, 241, 132, 252, 71, 39, 173, 70, 129, 118, 200, 63, 54, 86, 216, 209, 30, 183, 137, 93, 128, 132, 189, 195, 242, 58, 147, 26, 75, 28, 213, 118, 81, 250, 72, 173, 47, 13, 120, 190, 73, 172, 81, 214, 148, 209, 38, 64, 30, 78, 239, 251, 165, 212, 209, 94, 33, 76, 131, 251, 128, 203, 35, 128, 156, 53, 70, 233, 174, 81, 94, 135, 114, 237, 41, 157, 7, 148, 57, 226, 239, 11, 167, 215, 140, 91, 82, 39, 233, 164, 220, 159, 29, 109, 153, 53, 56, 125, 68, 170, 180, 235, 216, 53, 159, 79, 179, 119, 30, 211, 138, 173, 9, 148, 143, 122, 10, 73, 74, 29, 237, 38, 112, 94, 57, 47, 68, 190, 54, 76, 187, 180, 229, 254, 214, 30, 211, 218, 121, 76, 171, 68, 155, 216, 5, 72, 88, 19, 187, 0, 1, 157, 148, 251, 55, 6, 101, 40, 85, 19, 187, 0, 153, 216, 196, 46, 128, 33, 159, 55, 166, 13, 202, 24, 213, 14, 53, 80, 11, 56, 44, 249, 183, 212, 142, 54, 112, 233, 52, 229, 218, 161, 92, 27, 166, 93, 250, 114, 127, 115, 172, 193, 81, 237, 49, 37, 143, 34, 1, 238, 115, 107, 1, 142, 248, 143, 89, 218, 136, 246, 105, 198, 111, 55, 158, 202, 80, 58, 62, 129, 148, 219, 196, 46, 128, 7, 77, 224, 252, 178, 125, 223, 239, 5, 118, 203, 178, 12, 109, 185, 126, 73, 42, 68, 108, 74, 184, 203, 173, 224, 63, 46, 93, 208, 35, 8, 103, 11, 214, 155, 41, 53, 230, 197, 102, 73, 23, 126, 109, 108, 114, 29, 244, 112, 49, 247, 92, 91, 66, 172, 124, 180, 69, 165, 126, 186, 222, 162, 175, 148, 123, 157, 250, 4, 255, 49, 153, 218, 94, 33, 140, 91, 42, 35, 218, 62, 135, 253, 191, 43, 246, 205, 113, 33, 242, 80, 39, 196, 46, 80, 62, 150, 214, 6, 105, 54, 40, 187, 51, 57, 215, 38, 118, 1, 18, 182, 164, 121, 218, 90, 75, 27, 213, 158, 131, 245, 72, 230, 3, 242, 239, 64, 222, 99, 113, 174, 236, 12, 210, 12, 169, 241, 148, 142, 166, 255, 40, 158, 66, 146, 74, 71, 219, 103, 195, 177, 131, 46, 88, 185, 125, 142, 116, 29, 40, 159, 6, 203, 26, 129, 211, 216, 197, 46, 64, 194, 56, 69, 98, 88, 19, 187, 0, 1, 105, 218, 96, 128, 29, 109, 141, 38, 118, 1, 50, 178, 137, 93, 128, 76, 108, 144, 111, 187, 93, 193, 95, 251, 241, 4, 221, 151, 109, 27, 8, 6, 222, 82, 233, 104, 55, 30, 211, 250, 2, 93, 71, 40, 183, 207, 145, 54, 1, 243, 218, 4, 204, 203, 194, 218, 40, 221, 6, 124, 251, 127, 200, 18, 62, 24, 225, 234, 1, 153, 206, 235, 115, 160, 185, 88, 1, 236, 60, 106, 240, 102, 86, 110, 19, 187, 0, 158, 89, 254, 221, 55, 134, 105, 91, 106, 60, 166, 245, 29, 250, 56, 76, 190, 155, 84, 98, 71, 27, 0, 254, 13, 221, 71, 19, 124, 231, 111, 41, 228, 200, 79, 19, 48, 47, 11, 107, 195, 180, 27, 195, 180, 115, 183, 142, 93, 0, 35, 39, 15, 105, 112, 228, 150, 78, 30, 210, 96, 61, 146, 89, 199, 46, 128, 103, 150, 127, 247, 198, 48, 109, 75, 141, 231, 244, 190, 66, 55, 88, 59, 153, 127, 10, 29, 237, 10, 126, 79, 134, 126, 141, 201, 13, 228, 143, 47, 115, 106, 180, 214, 30, 210, 56, 41, 246, 229, 200, 237, 125, 57, 213, 153, 208, 154, 216, 5, 48, 242, 45, 118, 1, 50, 162, 29, 209, 94, 146, 83, 236, 2, 44, 12, 223, 169, 145, 201, 245, 154, 214, 120, 76, 171, 239, 63, 254, 11, 242, 54, 108, 242, 235, 182, 41, 116, 180, 27, 207, 233, 245, 149, 229, 27, 228, 203, 141, 173, 145, 207, 163, 56, 31, 39, 195, 73, 177, 111, 227, 33, 191, 88, 214, 153, 166, 157, 187, 117, 236, 2, 80, 116, 218, 57, 218, 68, 86, 214, 177, 11, 224, 145, 207, 143, 213, 220, 90, 35, 159, 126, 80, 207, 247, 64, 237, 117, 255, 74, 51, 5, 114, 180, 95, 86, 98, 71, 251, 218, 65, 177, 111, 14, 119, 115, 62, 71, 151, 165, 119, 107, 57, 196, 101, 200, 218, 48, 237, 198, 48, 237, 220, 173, 99, 23, 32, 97, 77, 236, 2, 80, 17, 154, 216, 5, 200, 200, 58, 118, 1, 60, 178, 190, 30, 231, 118, 189, 111, 12, 211, 254, 6, 249, 160, 228, 162, 59, 218, 223, 32, 31, 89, 177, 44, 135, 47, 107, 143, 105, 29, 132, 251, 229, 118, 226, 133, 196, 105, 53, 195, 24, 155, 101, 59, 196, 46, 0, 209, 27, 94, 195, 228, 154, 216, 5, 80, 106, 140, 211, 151, 14, 72, 54, 99, 255, 49, 118, 71, 187, 133, 188, 243, 120, 112, 204, 163, 164, 145, 91, 159, 101, 212, 196, 37, 183, 199, 73, 189, 181, 113, 250, 57, 212, 153, 88, 44, 31, 113, 198, 116, 138, 93, 0, 202, 222, 41, 118, 1, 22, 166, 164, 182, 200, 250, 88, 114, 186, 166, 85, 144, 175, 16, 114, 112, 204, 195, 75, 255, 49, 118, 71, 123, 39, 220, 239, 48, 35, 15, 233, 111, 115, 168, 96, 27, 143, 105, 105, 94, 86, 202, 33, 54, 247, 172, 141, 211, 207, 53, 46, 33, 52, 177, 11, 96, 228, 20, 187, 0, 153, 56, 197, 46, 64, 194, 248, 82, 109, 88, 77, 236, 2, 120, 196, 169, 35, 63, 237, 20, 251, 30, 28, 243, 144, 254, 110, 244, 133, 200, 152, 29, 237, 16, 163, 217, 128, 188, 67, 185, 70, 218, 35, 183, 154, 120, 73, 124, 69, 89, 211, 106, 110, 133, 248, 216, 78, 78, 141, 210, 148, 117, 226, 233, 165, 98, 29, 249, 247, 185, 224, 203, 144, 195, 124, 124, 173, 112, 237, 33, 141, 84, 89, 92, 135, 75, 248, 66, 164, 207, 47, 104, 15, 89, 35, 237, 126, 80, 47, 196, 104, 54, 224, 105, 64, 50, 102, 71, 123, 167, 216, 247, 48, 35, 159, 82, 70, 110, 119, 6, 105, 150, 52, 173, 230, 214, 46, 64, 30, 57, 198, 229, 158, 21, 252, 127, 100, 102, 237, 57, 189, 20, 212, 96, 71, 91, 138, 31, 45, 26, 182, 241, 144, 198, 218, 67, 26, 169, 178, 168, 59, 107, 131, 52, 67, 219, 32, 204, 52, 152, 28, 174, 107, 59, 197, 190, 135, 25, 249, 252, 128, 135, 23, 34, 99, 117, 180, 53, 163, 179, 39, 0, 127, 207, 200, 171, 132, 23, 34, 125, 143, 102, 247, 14, 194, 253, 114, 56, 241, 174, 249, 232, 16, 73, 76, 174, 159, 153, 137, 13, 252, 55, 224, 185, 213, 25, 9, 233, 114, 161, 148, 110, 91, 154, 2, 214, 163, 113, 59, 131, 52, 75, 104, 143, 66, 213, 155, 38, 80, 62, 174, 52, 163, 217, 192, 229, 179, 234, 115, 204, 126, 33, 50, 86, 71, 123, 103, 180, 239, 144, 220, 71, 110, 119, 70, 233, 106, 166, 213, 228, 212, 161, 220, 5, 204, 43, 213, 58, 163, 97, 209, 128, 63, 32, 143, 71, 144, 82, 21, 56, 74, 171, 193, 88, 221, 215, 162, 172, 151, 243, 124, 123, 15, 155, 65, 18, 139, 52, 67, 178, 26, 108, 187, 39, 245, 107, 218, 78, 177, 239, 19, 230, 191, 19, 49, 187, 255, 24, 163, 163, 173, 29, 205, 254, 143, 135, 60, 15, 194, 253, 82, 172, 96, 150, 39, 88, 41, 211, 106, 174, 213, 8, 123, 71, 158, 75, 92, 134, 88, 93, 216, 128, 252, 99, 115, 141, 163, 144, 114, 143, 96, 103, 114, 8, 235, 209, 56, 171, 248, 228, 222, 22, 133, 172, 55, 41, 199, 74, 59, 154, 189, 243, 144, 231, 65, 184, 223, 224, 19, 238, 24, 29, 237, 157, 209, 190, 99, 114, 126, 33, 114, 167, 216, 247, 164, 76, 219, 219, 130, 236, 9, 217, 4, 206, 175, 9, 156, 159, 111, 150, 13, 248, 218, 48, 237, 144, 86, 240, 91, 175, 74, 95, 99, 156, 163, 217, 247, 213, 240, 215, 142, 230, 210, 30, 107, 84, 176, 107, 79, 215, 70, 233, 134, 224, 179, 222, 72, 172, 145, 94, 63, 168, 183, 83, 236, 251, 4, 63, 43, 252, 204, 30, 144, 12, 221, 209, 142, 49, 154, 13, 228, 59, 114, 171, 141, 215, 147, 67, 30, 94, 22, 100, 79, 132, 246, 110, 119, 204, 73, 184, 223, 218, 83, 126, 49, 60, 194, 246, 239, 186, 54, 76, 59, 164, 13, 252, 142, 208, 150, 62, 218, 203, 142, 246, 125, 62, 111, 106, 75, 172, 67, 59, 195, 180, 215, 134, 105, 91, 219, 121, 74, 231, 164, 216, 55, 165, 126, 80, 47, 198, 104, 54, 224, 225, 133, 200, 208, 29, 237, 221, 140, 125, 165, 13, 203, 189, 23, 31, 115, 125, 33, 114, 167, 220, 215, 37, 70, 37, 117, 180, 119, 30, 211, 122, 18, 238, 183, 70, 186, 119, 255, 83, 172, 31, 71, 166, 216, 88, 187, 224, 227, 126, 185, 16, 75, 144, 229, 136, 115, 252, 199, 249, 126, 106, 116, 79, 142, 79, 146, 124, 142, 242, 159, 144, 103, 63, 168, 183, 83, 236, 251, 132, 95, 71, 179, 231, 244, 31, 129, 153, 253, 164, 144, 29, 237, 185, 163, 217, 210, 198, 123, 40, 32, 185, 189, 16, 233, 18, 47, 151, 24, 29, 196, 37, 74, 187, 161, 242, 221, 80, 159, 20, 251, 166, 82, 103, 52, 66, 92, 216, 214, 198, 233, 135, 96, 57, 135, 189, 68, 236, 76, 222, 199, 155, 181, 113, 33, 226, 179, 14, 144, 135, 111, 59, 207, 233, 229, 214, 15, 234, 205, 29, 205, 142, 218, 127, 12, 217, 209, 222, 25, 237, 43, 117, 16, 238, 151]);
fileData8.push.apply(fileData8, [74, 5, 219, 25, 237, 123, 75, 179, 116, 98, 42, 177, 185, 199, 119, 67, 125, 66, 222, 119, 255, 83, 66, 92, 216, 82, 174, 47, 82, 236, 32, 233, 52, 177, 11, 144, 160, 16, 55, 181, 185, 219, 4, 200, 35, 183, 246, 200, 231, 84, 200, 222, 65, 184, 223, 218, 115, 190, 115, 237, 20, 251, 62, 193, 255, 215, 87, 15, 194, 253, 238, 190, 16, 25, 170, 163, 253, 17, 113, 230, 102, 95, 203, 233, 133, 200, 208, 115, 217, 115, 189, 203, 237, 173, 96, 211, 33, 202, 61, 46, 99, 54, 129, 242, 201, 105, 89, 200, 91, 86, 47, 103, 89, 164, 153, 10, 142, 104, 255, 238, 3, 108, 230, 84, 215, 6, 105, 198, 16, 106, 233, 186, 16, 121, 248, 180, 241, 156, 222, 9, 121, 94, 211, 30, 17, 103, 110, 246, 181, 89, 239, 249, 133, 232, 104, 175, 16, 127, 52, 27, 200, 235, 133, 200, 157, 209, 190, 67, 114, 159, 167, 109, 113, 33, 251, 130, 252, 158, 130, 72, 133, 92, 147, 53, 84, 62, 22, 118, 177, 11, 144, 25, 46, 235, 119, 223, 46, 118, 1, 18, 183, 9, 148, 207, 58, 80, 62, 62, 88, 12, 30, 157, 160, 155, 18, 153, 202, 141, 220, 103, 197, 190, 79, 240, 63, 154, 13, 204, 124, 33, 50, 68, 71, 251, 15, 200, 27, 223, 19, 238, 143, 206, 106, 230, 6, 159, 6, 254, 125, 46, 47, 68, 206, 25, 205, 150, 118, 248, 78, 55, 255, 156, 227, 93, 238, 181, 157, 112, 63, 233, 223, 31, 184, 156, 88, 154, 167, 32, 57, 217, 4, 204, 171, 9, 152, 151, 79, 22, 159, 165, 47, 29, 227, 245, 187, 80, 95, 169, 205, 85, 200, 239, 30, 132, 202, 199, 7, 109, 191, 73, 234, 171, 98, 223, 20, 174, 247, 218, 250, 177, 27, 248, 247, 174, 125, 163, 107, 206, 3, 146, 214, 29, 109, 237, 93, 217, 110, 224, 223, 107, 70, 73, 198, 238, 102, 114, 232, 80, 238, 102, 236, 235, 122, 98, 30, 20, 121, 166, 114, 151, 219, 211, 220, 152, 104, 238, 140, 1, 221, 83, 144, 212, 226, 50, 196, 122, 73, 191, 91, 185, 142, 112, 110, 144, 111, 217, 99, 97, 71, 251, 119, 156, 227, 63, 110, 19, 56, 191, 216, 211, 66, 165, 54, 194, 253, 78, 144, 95, 167, 250, 129, 166, 131, 112, 255, 20, 58, 218, 59, 197, 190, 79, 24, 238, 255, 249, 184, 105, 113, 238, 63, 90, 119, 180, 125, 140, 102, 251, 116, 16, 238, 23, 171, 130, 197, 90, 103, 60, 183, 187, 220, 107, 210, 11, 217, 119, 232, 110, 40, 0, 221, 35, 168, 212, 226, 50, 36, 244, 133, 63, 151, 184, 220, 226, 135, 124, 116, 184, 172, 223, 239, 172, 151, 244, 91, 27, 166, 29, 130, 197, 203, 126, 83, 114, 168, 163, 154, 126, 192, 19, 228, 125, 172, 47, 55, 255, 59, 37, 118, 172, 124, 141, 102, 251, 114, 16, 238, 247, 219, 11, 145, 150, 29, 109, 237, 104, 246, 102, 228, 191, 173, 133, 105, 76, 77, 13, 72, 253, 133, 200, 221, 140, 125, 53, 47, 157, 221, 139, 211, 65, 248, 219, 70, 145, 143, 53, 205, 23, 179, 254, 84, 164, 235, 178, 252, 97, 236, 70, 73, 34, 198, 234, 7, 235, 192, 249, 249, 96, 189, 164, 159, 101, 218, 177, 112, 52, 251, 119, 214, 55, 181, 107, 227, 244, 173, 109, 34, 228, 185, 142, 144, 167, 214, 78, 184, 223, 119, 232, 159, 210, 2, 249, 116, 180, 119, 202, 125, 135, 6, 198, 230, 246, 141, 122, 206, 239, 249, 89, 118, 180, 53, 163, 217, 7, 140, 47, 51, 183, 22, 166, 51, 21, 136, 148, 95, 136, 156, 59, 154, 45, 253, 45, 112, 127, 4, 59, 151, 147, 239, 218, 206, 104, 223, 235, 147, 45, 199, 184, 12, 137, 241, 24, 123, 29, 33, 207, 185, 248, 184, 95, 175, 137, 93, 128, 196, 112, 73, 191, 105, 108, 143, 126, 167, 153, 211, 255, 25, 151, 119, 137, 26, 225, 254, 253, 117, 45, 135, 41, 145, 154, 209, 236, 169, 27, 142, 181, 34, 223, 177, 167, 251, 206, 47, 68, 90, 117, 180, 125, 205, 205, 246, 45, 229, 23, 34, 119, 70, 251, 74, 29, 132, 251, 173, 145, 198, 60, 55, 205, 92, 227, 39, 92, 254, 246, 46, 157, 225, 146, 58, 218, 27, 143, 105, 29, 20, 251, 230, 50, 127, 29, 176, 91, 210, 175, 116, 28, 209, 254, 149, 213, 146, 126, 165, 104, 225, 55, 62, 79, 194, 253, 26, 143, 121, 90, 216, 41, 246, 125, 82, 166, 253, 245, 230, 127, 37, 98, 93, 215, 118, 138, 125, 251, 27, 142, 16, 156, 94, 136, 180, 234, 104, 251, 28, 205, 6, 228, 39, 135, 36, 8, 41, 118, 156, 124, 204, 205, 110, 132, 191, 31, 58, 254, 148, 71, 251, 239, 209, 220, 200, 245, 119, 187, 218, 185, 108, 183, 255, 127, 74, 202, 95, 206, 244, 189, 164, 223, 119, 200, 239, 238, 115, 234, 112, 236, 98, 23, 32, 67, 92, 214, 239, 119, 187, 216, 5, 72, 220, 206, 115, 122, 7, 225, 126, 41, 215, 83, 151, 193, 35, 215, 107, 206, 65, 184, 95, 140, 107, 189, 207, 209, 108, 40, 210, 50, 235, 63, 90, 116, 180, 99, 142, 102, 75, 70, 171, 15, 194, 180, 66, 86, 176, 157, 209, 190, 247, 12, 197, 40, 229, 209, 254, 91, 154, 151, 104, 14, 248, 121, 7, 191, 22, 254, 230, 58, 14, 57, 220, 253, 75, 248, 126, 76, 251, 5, 51, 214, 21, 77, 84, 168, 199, 253, 185, 196, 67, 138, 163, 217, 191, 178, 158, 227, 223, 203, 181, 30, 249, 94, 242, 80, 115, 211, 159, 114, 204, 92, 250, 77, 210, 27, 135, 219, 107, 123, 138, 3, 142, 189, 157, 98, 95, 159, 163, 217, 62, 251, 143, 191, 188, 16, 105, 209, 209, 246, 61, 154, 13, 200, 255, 216, 146, 64, 165, 246, 66, 164, 175, 149, 70, 124, 196, 200, 233, 177, 72, 4, 59, 199, 125, 215, 142, 249, 165, 220, 40, 73, 104, 94, 26, 213, 200, 61, 46, 183, 66, 205, 25, 77, 121, 84, 205, 5, 59, 218, 191, 98, 61, 26, 103, 113, 211, 159, 251, 147, 71, 237, 224, 81, 255, 226, 95, 35, 252, 205, 109, 124, 82, 109, 187, 125, 143, 102, 3, 113, 250, 143, 191, 228, 235, 187, 163, 109, 53, 154, 237, 242, 200, 127, 206, 62, 189, 16, 149, 108, 231, 105, 95, 31, 49, 58, 8, 211, 136, 217, 113, 210, 124, 72, 228, 11, 126, 189, 145, 211, 220, 0, 222, 166, 35, 145, 106, 135, 114, 99, 144, 166, 102, 68, 59, 151, 14, 193, 38, 118, 1, 50, 196, 101, 253, 126, 197, 57, 254, 227, 44, 150, 60, 60, 225, 50, 170, 41, 125, 34, 155, 98, 123, 228, 218, 111, 90, 11, 127, 115, 186, 249, 231, 84, 95, 136, 220, 41, 246, 149, 142, 102, 251, 236, 63, 58, 189, 16, 233, 187, 163, 109, 49, 154, 173, 185, 251, 148, 156, 104, 41, 77, 145, 240, 185, 110, 182, 143, 187, 182, 131, 48, 141, 95, 30, 139, 4, 166, 169, 99, 183, 119, 187, 174, 29, 130, 92, 70, 250, 239, 209, 140, 148, 60, 41, 210, 253, 142, 188, 227, 114, 43, 228, 103, 233, 75, 194, 209, 236, 95, 237, 98, 23, 32, 113, 59, 197, 190, 39, 229, 126, 185, 182, 71, 154, 41, 107, 183, 131, 71, 107, 225, 239, 78, 55, 255, 156, 226, 148, 72, 139, 209, 108, 192, 239, 136, 54, 224, 80, 207, 124, 118, 180, 43, 196, 29, 205, 6, 228, 149, 39, 133, 17, 202, 21, 252, 206, 205, 246, 113, 215, 166, 185, 203, 109, 20, 251, 250, 162, 121, 98, 114, 194, 175, 55, 38, 154, 105, 64, 174, 143, 217, 128, 120, 55, 32, 67, 54, 138, 125, 53, 199, 169, 153, 23, 9, 164, 177, 82, 205, 152, 77, 224, 252, 82, 143, 135, 84, 19, 187, 0, 9, 209, 60, 109, 243, 33, 197, 145, 217, 49, 154, 248, 28, 160, 127, 2, 121, 18, 238, 159, 90, 220, 66, 12, 30, 29, 132, 255, 238, 158, 80, 29, 109, 105, 199, 185, 223, 87, 58, 55, 219, 231, 136, 182, 102, 63, 147, 184, 109, 1, 156, 133, 91, 103, 144, 238, 171, 65, 154, 71, 69, 154, 90, 31, 133, 101, 144, 148, 163, 86, 164, 53, 245, 132, 224, 40, 76, 231, 147, 244, 64, 61, 210, 212, 177, 246, 230, 183, 154, 24, 221, 35, 253, 237, 251, 217, 71, 233, 207, 10, 151, 243, 66, 122, 78, 182, 194, 125, 175, 99, 36, 221, 191, 54, 59, 202, 249, 52, 117, 67, 26, 207, 156, 227, 161, 225, 43, 30, 93, 232, 130, 27, 208, 180, 79, 190, 182, 156, 104, 226, 243, 94, 177, 239, 163, 50, 253, 148, 234, 154, 166, 141, 62, 222, 249, 189, 54, 70, 215, 62, 9, 127, 251, 50, 251, 40, 167, 213, 194, 178, 156, 113, 137, 151, 116, 160, 66, 147, 174, 116, 246, 132, 38, 205, 10, 240, 59, 162, 221, 40, 246, 221, 41, 246, 245, 125, 55, 162, 217, 119, 13, 187, 145, 167, 70, 177, 239, 110, 226, 191, 251, 28, 245, 63, 8, 211, 137, 49, 47, 179, 17, 238, 247, 29, 191, 127, 9, 114, 45, 252, 237, 80, 221, 56, 9, 127, 159, 210, 124, 213, 13, 228, 117, 227, 9, 110, 171, 178, 164, 240, 116, 104, 46, 205, 147, 184, 147, 85, 33, 50, 196, 101, 253, 126, 21, 234, 37, 200, 92, 105, 158, 70, 74, 31, 227, 3, 63, 175, 105, 57, 182, 69, 239, 224, 62, 154, 93, 43, 242, 73, 253, 35, 117, 141, 98, 95, 139, 209, 108, 192, 255, 140, 8, 224, 45, 118, 62, 59, 218, 210, 19, 227, 0, 217, 220, 236, 158, 244, 143, 108, 209, 209, 6, 236, 230, 109, 74, 43, 192, 9, 227, 115, 179, 1, 191, 49, 202, 117, 158, 219, 181, 123, 39, 226, 90, 248, 219, 161, 122, 156, 99, 92, 180, 117, 204, 165, 30, 157, 60, 151, 37, 6, 205, 205, 136, 166, 3, 80, 58, 206, 207, 254, 149, 180, 30, 221, 14, 2, 44, 133, 52, 62, 59, 197, 190, 167, 129, 255, 239, 163, 28, 41, 249, 142, 223, 223, 161, 113, 137, 209, 181, 148, 94, 136, 148, 182, 171, 154, 185, 217, 128, 77, 255, 81, 243, 66, 228, 26, 240, 219, 209, 126, 18, 238, 183, 83, 166, 187, 22, 238, 167, 185, 0, 126, 131, 44, 80, 223, 161, 123, 105, 64, 227, 73, 184, 223, 78, 176, 207, 90, 152, 150, 36, 70, 7, 97, 90, 210, 253, 124, 58, 9, 246, 25, 58, 17, 231, 158, 112, 7, 225, 239, 165, 251, 165, 228, 233, 237, 127, 215, 194, 253, 93, 70, 180, 75, 240, 132, 180, 110, 164, 74, 114, 138, 93, 128, 64, 180, 239, 54, 44, 77, 255, 52, 82, 218, 94, 159, 174, 254, 191, 213, 181, 218, 210, 73, 184, 223, 189, 193, 35, 151, 24, 93, 251, 10, 121, 191, 73, 51, 56, 234, 226, 73, 184, 159, 102, 52, 27, 176, 233, 63, 2, 145, 251, 3, 29, 198, 231, 171, 184, 204, 235, 149, 206, 133, 209, 222, 113, 73, 230, 72, 111, 29, 202, 43, 181, 194, 244, 124, 104, 233, 92, 178, 169, 184, 107, 143, 231, 69, 144, 86, 43, 76, 203, 167, 74, 80, 174, 161, 99, 148, 28, 211, 216, 239, 43, 200, 230, 210, 85, 51, 142, 207, 55, 73, 188, 174, 231, 187, 73, 207, 181, 235, 24, 73, 231, 82, 166, 184, 118, 109, 175, 197, 116, 249, 59, 92, 226, 36, 141, 209, 216, 22, 98, 206, 99, 8, 154, 247, 76, 166, 182, 58, 112, 217, 45, 236, 33, 59, 119, 36, 251, 73, 182, 24, 239, 201, 204, 33, 141, 143, 116, 223, 123, 49, 144, 180, 243, 207, 22, 7, 55, 195, 212, 177, 14, 205, 73, 118, 141, 209, 53, 201, 60, 237, 253, 156, 131, 83, 216, 78, 148, 195, 165, 221, 236, 38, 210, 188, 173, 119, 82, 143, 130, 52, 59, 135, 242, 138, 172, 48, 92, 209, 93, 42, 119, 61, 144, 214, 189, 173, 114, 72, 127, 236, 143, 16, 162, 114, 61, 98, 184, 243, 118, 132, 124, 126, 184, 52, 70, 173, 162, 92, 41, 156, 120, 247, 140, 53, 12, 47, 24, 142, 153, 52, 70, 245, 72, 222, 83, 29, 11, 105, 124, 67, 154, 106, 140, 251, 6, 70, 115, 174, 221, 30, 231, 212, 197, 205, 172, 193, 241, 232, 136, 233, 122, 161, 137, 209, 208, 118, 68, 218, 55, 29, 26, 146, 193, 2, 201, 150, 91, 135, 113, 72, 133, 241, 227, 236, 59, 76, 221, 196, 126, 146, 173, 67, 126, 43, 215, 72, 227, 3, 184, 119, 144, 36, 55, 254, 181, 197, 193, 205, 80, 97, 124, 16, 231, 182, 189, 237, 185, 198, 232, 218, 212, 57, 60, 118, 77, 181, 176, 31, 41, 71, 229, 144, 158, 244, 124, 26, 138, 241, 152, 237, 72, 122, 65, 226, 86, 227, 210, 41, 217, 190, 109, 174, 23, 22, 205, 136, 137, 171, 143, 248, 253, 143, 59, 86, 49, 125, 171, 222, 242, 123, 198, 229, 196, 233, 222, 202, 36, 253, 35, 73, 238, 172, 92, 26, 152, 250, 173, 44, 183, 13, 64, 10, 23, 197, 22, 191, 151, 109, 143, 225, 152, 105, 98, 52, 85, 87, 63, 226, 247, 6, 238, 21, 105, 118, 178, 129, 241, 11, 251, 254, 106, 191, 118, 96, 31, 73, 61, 122, 196, 112, 103, 59, 116, 67, 237, 234, 17, 195, 23, 156, 254, 111, 43, 109, 143, 94, 222, 246, 189, 61, 119, 142, 200, 35, 22, 26, 154, 115, 203, 215, 5, 46, 101, 45, 238, 119, 154, 94, 241, 179, 109, 209, 196, 230, 222, 192, 66, 106, 35, 178, 26, 146, 248, 224, 206, 127, 215, 92, 211, 182, 35, 251, 167, 90, 223, 42, 92, 218, 227, 235, 118, 244, 136, 241, 85, 172, 230, 196, 232, 54, 239, 103, 252, 222, 254, 117, 136, 211, 94, 61, 226, 242, 119, 218, 190, 109, 174, 43, 121, 89, 245, 141, 174, 189, 199, 229, 28, 189, 174, 211, 207, 184, 137, 219, 63, 28, 19, 15, 101, 15, 217, 250, 182, 7, 0, 255, 99, 90, 146, 116, 181, 144, 207, 111, 114, 249, 123, 175, 240, 115, 46, 152, 229, 156, 117, 75, 22, 49, 170, 240, 115, 254, 215, 9, 63, 63, 137, 155, 170, 71, 92, 254, 142, 235, 183, 127, 62, 224, 215, 121, 119, 207, 144, 191, 220, 54, 20, 163, 247, 248, 117, 165, 147, 19, 46, 43, 13, 104, 230, 212, 197, 86, 227, 215, 149, 0, 158, 112, 249, 219, 174, 112, 137, 153, 100, 94, 228, 159, 0, 254, 247, 42, 189, 158, 245, 60, 199, 88, 106, 92, 254, 206, 154, 151, 35, 79, 184, 196, 50, 167, 186, 33, 213, 183, 153, 205, 219, 63, 247, 47, 178, 253, 192, 229, 60, 212, 172, 122, 213, 215, 189, 220, 219, 224, 107, 99, 241, 1, 220, 98, 116, 171, 194, 165, 45, 106, 174, 254, 221, 103, 0, 127, 41, 202, 153, 178, 10, 186, 23, 242, 164, 215, 167, 146, 218, 43, 235, 190, 81, 17, 106, 200, 239, 70, 82, 24, 101, 141, 65, 179, 6, 103, 41, 243, 66, 93, 116, 96, 140, 198, 104, 158, 28, 189, 70, 42, 99, 76, 99, 83, 226, 238, 109, 219, 56, 197, 140, 74, 27, 163, 46, 78, 49, 163, 170, 160, 91, 119, 124, 137, 180, 245, 104, 169, 164, 215, 180, 165, 198, 136, 125, 35, 33, 94, 216, 166, 73, 94, 100, 88, 242, 133, 13, 208, 125, 248, 32, 231, 71, 178, 174, 180, 143, 254, 151, 86, 143, 180, 23, 254, 51, 210, 125, 60, 109, 105, 15, 93, 140, 150, 214, 102, 107, 235, 209, 82, 47, 254, 207, 96, 140, 166, 108, 193, 24, 77, 97, 223, 72, 64, 83, 145, 206, 184, 140, 200, 45, 77, 13, 94, 216, 166, 104, 238, 106, 151, 24, 35, 109, 124, 150, 22, 35, 151, 78, 246, 25, 105, 173, 60, 19, 130, 230, 162, 214, 111, 109, 148, 146, 198, 211, 65, 23, 159, 37, 222, 244, 107, 158, 172, 45, 181, 131, 164, 189, 238, 51, 70, 60, 215, 238, 114, 121, 185, 102, 73, 23, 127, 192, 237, 109, 255, 58, 74, 73, 227, 210, 118, 0, 150, 214, 65, 114, 233, 68, 186, 190, 152, 146, 27, 215, 78, 246, 210, 46, 108, 45, 244, 49, 90, 218, 185, 182, 7, 175, 105, 83, 180, 157, 163, 51, 226, 174, 126, 21, 131, 203, 117, 127, 105, 237, 17, 99, 36, 228, 114, 113, 91, 90, 163, 228, 50, 130, 84, 218, 106, 7, 83, 180, 55, 108, 75, 187, 171, 117, 185, 248, 47, 165, 65, 114, 237, 100, 159, 177, 156, 27, 17, 192, 125, 185, 195, 37, 157, 107, 218, 81, 218, 37, 214, 35, 151, 39, 107, 75, 188, 238, 107, 166, 213, 44, 173, 205, 238, 185, 244, 141, 150, 22, 35, 245, 148, 145, 37, 6, 202, 229, 226, 182, 196, 121, 90, 29, 116, 49, 106, 227, 20, 51, 138, 22, 250, 58, 244, 138, 101, 140, 66, 206, 233, 100, 31, 35, 148, 55, 150, 71, 184, 117, 142, 94, 177, 156, 155, 126, 151, 243, 172, 223, 150, 112, 174, 245, 92, 207, 183, 109, 140, 194, 70, 226, 90, 151, 216, 55, 146, 109, 139, 81, 193, 173, 225, 94, 90, 101, 114, 105, 148, 246, 81, 74, 26, 143, 118, 20, 105, 73, 43, 105, 184, 118, 144, 234, 24, 133, 13, 108, 78, 39, 251, 140, 229, 188, 43, 226, 58, 2, 121, 198, 114, 70, 179, 93, 207, 179, 165, 93, 248, 93, 70, 32, 251, 109, 27, 161, 188, 49, 176, 111, 36, 51, 167, 237, 94, 140, 14, 238, 65, 90, 202, 136, 237, 22, 236, 0, 76, 113, 233, 4, 236, 163, 148, 52, 60, 151, 249, 107, 75, 106, 172, 247, 112, 111, 131, 206, 88, 198, 72, 237, 220, 155, 145, 54, 124, 145, 131, 155, 211, 49, 90, 210, 249, 214, 98, 222, 249, 86, 135, 47, 114, 20, 115, 206, 183, 165, 212, 37, 215, 190, 209, 146, 218, 110, 231, 121, 108, 215, 91, 233, 92, 94, 18, 93, 90, 131, 4, 184, 117, 150, 30, 239, 166, 84, 158, 14, 110, 245, 103, 9, 241, 113, 169, 55, 215, 219, 62, 124, 145, 163, 112, 153, 39, 122, 189, 85, 225, 139, 28, 212, 220, 27, 145, 51, 150, 241, 93, 136, 185, 35, 254, 75, 185, 174, 109, 49, 47, 70, 93, 248, 34, 7, 55, 167, 111, 180, 152, 186, 84, 97, 254, 9, 119, 14, 94, 234, 240, 248, 88, 100, 90, 13, 125, 108, 142, 81, 74, 26, 158, 235, 35, 218, 125, 140, 194, 6, 182, 199, 252, 246, 135, 55, 35, 211, 219, 18, 158, 60, 118, 152, 95, 151, 218, 224, 165, 14, 203, 199, 205, 200, 18, 58, 71, 46, 215, 179, 219, 173, 11, 94, 234, 240, 88, 151, 4, 230, 142, 144, 244, 91, 21, 186, 224, 1, 205, 25, 241, 95, 194, 197, 173, 231, 114, 194, 45, 97, 90, 141, 230, 163, 61, 75, 58, 175, 0, 63, 157, 236, 37, 156, 99, 45, 230, 199, 169, 244, 145, 90, 31, 117, 105, 9, 23, 125, 94, 243, 167, 205, 121, 15, 226, 122, 235, 66, 23, 60, 48, 31, 179, 33, 206, 40, 252, 230, 118, 78, 7, 96, 41, 141, 83, 133, 121, 39, 92, 233, 23, 183, 158, 235, 9, 87, 250, 220, 172, 57, 143, 104, 183, 17, 202, 27, 210, 30, 108, 164, 37, 90, 176, 141, 158, 226, 235, 130, 127, 14, 93, 240, 192, 24, 39, 25, 95, 55, 35, 93, 232, 130, 7, 84, 193, 207, 205, 72, 209, 215, 58, 95, 119, 108, 165, 55, 226, 29, 216, 9, 152, 226, 122, 194, 149, 190, 2, 194, 156, 71, 180, 165, 47, 195, 182, 135, 159, 118, 167, 244, 21, 107, 124, 204, 165, 237, 183, 82, 181, 240, 119, 29, 43, 249, 233, 72, 13, 127, 113, 42, 185, 62, 249, 188, 25, 233, 2, 151, 61, 164, 14, 254, 226, 180, 13, 92, 246, 96, 124, 221, 177, 245, 91, 137, 83, 0, 124, 156, 112, 75, 152, 59, 234, 90, 151, 74, 255, 40, 196, 156, 115, 172, 196, 243, 169, 183, 135, 191, 118, 167, 228, 39, 70, 21, 252, 117, 178, 75, 189, 169, 245, 121, 35, 82, 114, 156, 124, 15, 172, 157, 195, 22, 63, 24, 223, 245, 169, 11, 91, 252, 96, 124, 222, 140, 20, 27, 167, 26, 126, 131, 116, 70, 121, 119, 36, 190, 26, 166, 210, 185, 214, 165, 210, 71, 34, 183, 112, 175, 51, 199, 8, 229, 13, 101, 15, 191, 237, 78, 21, 182, 248, 193, 248, 122, 97, 173, 223, 74, 188, 113, 171, 224, 191, 243, 88, 218, 117, 172, 231, 179, 46, 157, 81, 104, 199, 8, 140, 147, 132, 197, 77, 91, 113, 113, 114, 93, 203, 119, 105, 13, 148, 143, 17, 255, 226, 42, 207, 29, 174, 117, 169, 228, 145, 200, 26, 243, 234, 77, 169, 35, 253, 123, 176, 113, 150, 234, 224, 55, 86, 85, 216, 226, 155, 243, 125, 35, 210, 111, 117, 200, 131, 8, 100, 206, 71, 105, 150, 116, 238, 49, 78, 50, 190, 103, 67, 156, 81, 224, 148, 45, 109, 101, 146, 222, 185, 148, 84, 161, 124, 189, 36, 186, 13, 93, 240, 192, 182, 112, 143, 77, 21, 161, 188, 33, 84, 224, 199, 50, 238, 217, 195, 127, 227, 204, 27, 18, 217, 118, 12, 91, 252, 32, 58, 248, 175, 79, 37, 182, 75, 45, 108, 226, 84, 90, 59, 85, 131, 113, 146, 208, 246, 141, 142, 138, 125, 139, 161, 173, 76, 47, 138, 223, 148, 82, 161, 124, 62, 22, 41, 181, 35, 0, 204, 235, 80, 22, 119, 247, 250, 198, 199, 40, 91, 29, 188, 212, 246, 246, 240, 127, 1, 59, 6, 61, 130, 112, 182, 240, 31, 171, 125, 208, 35, 176, 103, 81, 159, 206, 40, 111, 58, 155, 203, 124, 99, 233, 254, 37, 213, 41, 151, 107, 190, 116, 192, 178, 11, 120, 28, 214, 180, 113, 122, 197, 165, 159, 32, 221, 191, 8, 46, 83, 70, 30, 33, 239, 104, 151, 210, 121, 242, 249, 88, 164, 10, 92, 246, 144, 58, 184, 199, 165, 141, 80, 222, 16, 246, 152, 87, 95, 74, 186, 120, 245, 230, 198, 100, 104, 219, 134, 60, 136, 64, 90, 216, 196, 170, 164, 27, 126, 151, 151, 176, 150, 248, 84, 214, 229, 122, 223, 65, 126, 163, 87, 210, 249, 167, 189, 150, 125, 194, 242, 6, 32, 1, 125, 223, 168, 127, 47, 68, 186, 127, 21, 232, 56, 76, 73, 79, 160, 219, 19, 73, 243, 121, 205, 220, 73, 79, 30, 105, 227, 94, 170, 185, 83, 107, 74, 92, 182, 174, 197, 252, 58, 83, 68, 67, 115, 101, 15, 127, 231, 83, 233, 117, 200, 199, 103, 140, 75, 143, 149, 203, 57, 214, 65, 222, 145, 42, 233, 189, 17, 109, 167, 168, 95, 78, 116, 43, 220, 127, 27, 238, 80, 76, 105, 111, 220, 94, 112, 137, 83, 45, 220, 191, 11, 119, 40, 166, 164, 199, 123, 239, 184, 143, 194, 223, 212, 1, 142, 195, 148, 182, 17, 63, 226, 215, 198, 89, 250, 187, 156, 249, 126, 73, 180, 148, 19, 236, 214, 220, 56, 237, 195, 23, 217, 156, 143, 78, 82, 73, 23, 121, 192, 182, 147, 93, 90, 29, 242, 189, 164, 88, 137, 237, 144, 75, 140, 250, 78, 145, 180, 189, 106, 131, 29, 141, 173, 45, 244, 245, 164, 95, 134, 86, 58, 37, 98, 27, 230, 80, 76, 185, 180, 219, 125, 156, 106, 225, 254, 37, 156, 127, 174, 179, 33, 122, 157, 240, 55, 181, 253, 161, 216, 210, 206, 27, 189, 61, 96, 151, 224, 230, 198, 247, 27, 199, 37, 52, 68, 247, 184, 52, 226, 215, 91, 73, 143, 177, 1, 63, 115, 250, 75, 251, 56, 205, 30, 126, 207, 165, 226, 26, 228, 43, 46, 243, 250, 95, 33, 191, 240, 149, 176, 172, 95, 5, 183, 185, 198, 21, 46, 241, 93, 82, 189, 170, 161, 63, 159, 174, 235, 72, 39, 252, 77, 238, 237, 184, 203, 121, 119, 29, 39, 105, 156, 59, 251, 67, 49, 167, 237, 27, 109, 111, 126, 47, 173, 83, 89, 183, 85, 91, 232, 130, 116, 111, 100, 77, 90, 33, 115, 109, 168, 92, 26, 167, 82, 99, 49, 102, 238, 200, 237, 49, 124, 145, 205, 249, 88, 98, 236, 182, 97, 202, 217, 30, 254, 207, 165, 235, 173, 148, 119, 65, 0, 247, 151, 103, 91, 197, 190, 57, 15, 126, 0, 238, 55, 34, 218, 145, 199, 115, 144, 163, 177, 85, 65, 127, 67, 178, 191, 73, 163, 19, 254, 46, 247, 235, 155, 182, 243, 216, 221, 252, 94, 90, 175, 110, 127, 151, 27, 205, 249, 51, 212, 62, 23, 255, 148, 164, 130, 46, 72, 71, 220, 31, 89, 43, 253, 228, 59, 66, 127, 177, 155, 218, 74, 26, 161, 236, 73, 235, 65, 113, 39, 210, 0, 31, 79, 65, 142, 193, 75, 109, 103, 15, 183, 24, 104, 126, 215, 6, 59, 26, 123, 46, 241, 106, 33, 127, 71, 162, 132, 247, 68, 92, 218, 156, 235, 58, 178, 21, 254, 166, 132, 27, 56, 237, 13, 73, 63, 181, 230, 154, 52, 222, 181, 237, 161, 152, 210, 190, 99, 116, 239, 137, 99, 45, 252, 109, 103, 123, 40, 230, 142, 208, 197, 234, 222, 141, 189, 244, 28, 220, 26, 30, 135, 41, 109, 35, 53, 116, 242, 72, 211, 201, 49, 80, 210, 74, 160, 217, 142, 65, 143, 32, 140, 22, 243, 227, 82, 5, 47, 181, 29, 31, 241, 56, 163, 156, 142, 227, 30, 238, 199, 47, 253, 109, 73, 83, 108, 92, 110, 210, 246, 202, 223, 246, 251, 231, 202, 165, 78, 221, 62, 126, 150, 166, 177, 180, 88, 245, 83, 107, 110, 73, 71, 196, 115, 125, 82, 226, 50, 213, 175, 190, 147, 78, 45, 252, 109, 103, 119, 40, 230, 182, 208, 197, 105, 59, 51, 157, 44, 99, 165, 125, 155, 246, 121, 36, 45, 105, 160, 134, 2, 157, 42, 171, 55, 253, 199, 98, 153, 35, 31, 243, 144, 179, 60, 137, 6, 248, 122, 121, 173, 148, 152, 104, 27, 228, 126, 107, 161, 123, 234, 182, 15, 117, 64, 198, 90, 204, 107, 83, 142, 194, 223, 180, 246, 135, 98, 198, 101, 25, 191, 123, 245, 67, 58, 202, 155, 219, 181, 235, 154, 75, 125, 26, 154, 99, 45, 253, 125, 174, 58, 232, 226, 52, 244, 146, 122, 45, 252, 125, 174, 109, 252, 220, 5, 52, 174, 21, 27, 171, 10, 250, 133, 197, 199, 70, 138, 182, 194, 116, 114, 91, 57, 193, 199, 252, 218, 210, 26, 237, 123, 124, 76, 145, 104, 131, 151, 218, 134, 207, 213, 105, 234, 192, 101, 183, 208, 98, 94, 125, 144, 182, 45, 103, 148, 241, 68, 68, 122, 209, 185, 222, 174, 31, 241, 87, 138, 223, 229, 58, 250, 239, 82, 167, 186, 129, 180, 74, 63, 23, 93, 110, 250, 199, 174, 79, 210, 52, 114, 164, 105, 107, 250, 243, 110, 136, 244, 60, 30, 170, 151, 169, 155, 187, 128, 198, 53, 105, 172, 178, 155, 190, 213, 65, 23, 164, 169, 55, 136, 165, 163, 11, 57, 85, 42, 237, 73, 167, 137, 105, 174, 141, 246, 61, 62, 70, 253, 75, 122, 228, 175, 61, 183, 134, 182, 18, 158, 122, 180, 112, 59, 246, 246, 42, 141, 163, 240, 55, 57, 181, 45, 67, 92, 58, 69, 183, 231, 142, 52, 230, 217, 93, 180, 222, 204, 89, 198, 239, 94, 90, 210, 52, 114, 108, 159, 92, 110, 250, 199, 206, 35, 205, 10, 45, 185, 209, 94, 199, 174, 95, 168, 189, 167, 22, 166, 147, 99, 187, 181, 133, 46, 86, 83, 3, 172, 154, 216, 103, 67, 59, 209, 95, 114, 193, 47, 173, 82, 85, 208, 53, 230, 71, 232, 30, 101, 150, 196, 199, 168, 255, 62, 120, 169, 109, 104, 27, 160, 177, 173, 10, 92, 118, 223, 90, 184, 29, 119, 235, 152, 198, 245, 239, 114, 228, 50, 253, 234, 222, 197, 254, 89, 248, 219, 173, 233, 209, 216, 208, 182, 203, 125, 140, 134, 206, 37, 105, 253, 202, 245, 165, 81, 105, 93, 232, 183, 35, 198, 111, 40, 106, 97, 58, 185, 221, 196, 185, 220, 144, 76, 45, 53, 39, 141, 85, 231, 247, 80, 204, 105, 207, 193, 169, 58, 213, 147, 166, 151, 5, 109, 99, 62, 214, 72, 93, 147, 86, 170, 163, 191, 67, 49, 213, 65, 119, 210, 189, 135, 124, 250, 68, 110, 141, 208, 24, 151, 121, 146, 247, 182, 92, 95, 156, 185, 166, 189, 129, 29, 219, 114, 155, 98, 117, 171, 133, 219, 113, 183, 55, 233, 72, 207, 195, 92, 218, 149, 33, 174, 203, 248, 213, 119, 210, 146, 182, 239, 247, 126, 155, 178, 185, 203, 248, 221, 179, 21, 166, 211, 121, 63, 26, 123, 210, 99, 211, 180, 195, 181, 48, 157, 220, 226, 181, 135, 46, 78, 75, 28, 124, 236, 73, 219, 228, 126, 155, 154, 13, 209, 147, 166, 87, 121, 58, 14, 83, 218, 59, 220, 169, 187, 182, 94, 165, 72, 51, 117, 174, 47, 137, 74, 47, 2, 251, 64, 199, 97, 205, 199, 11, 144, 103, 228, 223, 73, 2, 252, 126, 185, 47, 247, 105, 52, 45, 220, 142, 187, 189, 73, 71, 211, 166, 108, 45, 15, 40, 0, 109, 187, 124, 47, 94, 128, 252, 226, 158, 227, 8, 109, 7, 63, 49, 114, 73, 51, 183, 250, 37, 173, 7, 154, 88, 105, 210, 237, 252, 29, 138, 57, 31, 75, 249, 221, 83, 98, 172, 124, 46, 160, 113, 235, 40, 76, 179, 246, 112, 28, 166, 180, 21, 74, 91, 1, 164, 233, 166, 172, 130, 251, 75, 162, 210, 223, 72, 111, 94, 82, 183, 135, 190, 49, 47, 49, 30, 174, 163, 145, 67, 219, 54, 108, 241, 189, 106, 225, 118, 204, 237, 157, 180, 52, 47, 216, 86, 86, 7, 20, 128, 203, 121, 52, 244, 196, 99, 43, 252, 125, 110, 243, 255, 93, 98, 36, 105, 87, 164, 109, 253, 189, 250, 153, 170, 10, 243, 63, 74, 51, 68, 218, 209, 202, 165, 126, 185, 196, 170, 22, 166, 93, 11, 211, 235, 252, 28, 138, 57, 109, 172, 180, 3, 70, 157, 48, 93, 105, 252, 163, 176, 154, 50, 114, 77, 154, 118, 202, 211, 4, 164, 127, 236, 126, 235, 31, 139, 72, 79, 170, 212, 143, 95, 74, 115, 188, 83, 155, 182, 158, 165, 198, 101, 52, 114, 104, 59, 34, 223, 209, 236, 22, 110, 199, 188, 189, 147, 150, 166, 189, 218, 91, 29, 80, 0, 46, 49, 27, 59, 94, 233, 13, 95, 235, 255, 80, 204, 184, 76, 79, 147, 212, 9, 205, 139, 125, 57, 181, 217, 218, 155, 254, 161, 23, 69, 239, 217, 10, 211, 188, 119, 78, 167, 168, 195, 252, 182, 106, 72, 45, 76, 179, 243, 112, 28, 33, 104, 99, 37, 157, 50, 162, 77, 63, 233, 186, 165, 25, 29, 114, 61, 24, 233, 9, 94, 207, 56, 14, 75, 115, 70, 252, 151, 246, 34, 228, 17, 250, 139, 223, 189, 45, 151, 145, 143, 33, 190, 230, 168, 247, 91, 27, 182, 248, 222, 180, 112, 59, 222, 189, 135, 244, 82, 109, 79, 166, 184, 196, 108, 172, 83, 164, 233, 56, 86, 22, 7, 100, 192, 37, 70, 221, 221, 148, 126, 87, 43, 210, 204, 197, 30, 186, 88, 105, 7, 212, 182, 194, 116, 183, 243, 15, 197, 156, 244, 88, 174, 207, 61, 13, 105, 253, 146, 214, 215, 152, 172, 103, 67, 0, 5, 212, 45, 77, 131, 226, 82, 161, 122, 157, 48, 253, 218, 49, 125, 75, 115, 71, 252, 165, 13, 92, 14, 39, 213, 20, 109, 3, 53, 182, 181, 129, 203, 238, 147, 246, 188, 178, 58, 239, 98, 107, 225, 118, 188, 251, 145, 52, 165, 55, 237, 71, 239, 71, 19, 134, 207, 37, 234, 122, 210, 191, 67, 46, 49, 179, 136, 209, 53, 105, 59, 150, 203, 121, 233, 114, 30, 106, 71, 29, 165, 3, 118, 219, 121, 135, 98, 78, 219, 118, 187, 60, 225, 151, 230, 209, 205, 59, 20, 115, 33, 102, 67, 0, 5, 124, 139, 69, 251, 104, 219, 245, 49, 89, 39, 76, 63, 197, 147, 80, 250, 71, 238, 183, 219, 249, 127, 210, 142, 65, 178, 149, 68, 200, 215, 11, 144, 253, 9, 153, 43, 159, 113, 232, 183, 58, 232, 17, 248, 161, 189, 96, 245, 219, 222, 83, 154, 185, 206, 239, 151, 182, 149, 215, 231, 202, 84, 187, 188, 23, 166, 149, 75, 27, 116, 132, 62, 70, 149, 34, 125, 233, 117, 113, 172, 174, 166, 162, 130, 223, 143, 210, 12, 145, 214, 91, 109, 7, 62, 164, 21, 244, 117, 171, 117, 200, 71, 218, 142, 117, 238, 135, 18, 132, 246, 169, 173, 107, 155, 44, 205, 39, 201, 120, 105, 30, 39, 186, 158, 124, 189, 109, 128, 60, 172, 104, 26, 169, 219, 63, 180, 38, 198, 46, 39, 108, 74, 164, 127, 99, 201, 150, 203, 5, 255, 30, 223, 83, 70, 146, 108, 60, 4, 92, 94, 2, 221, 79, 164, 185, 23, 166, 147, 235, 234, 44, 53, 244, 49, 147, 12, 126, 72, 219, 176, 148, 59, 65, 189, 22, 186, 248, 72, 110, 68, 110, 73, 235, 110, 14, 55, 115, 210, 115, 102, 110, 123, 211, 9, 211, 175, 29, 211, 15, 65, 27, 43, 215, 233, 141, 210, 243, 60, 245, 182, 95, 211, 198, 207, 57, 150, 172, 227, 165, 153, 91, 51, 247, 17, 217, 86, 152, 79, 106, 29, 172, 71, 232, 26, 244, 234, 230, 247, 210, 10, 114, 70, 94, 47, 213, 220, 35, 109, 104, 75, 143, 133, 207, 56, 156, 145, 207, 156, 217, 91, 218, 227, 220, 79, 164, 167, 185, 105, 157, 74, 43, 85, 218, 39, 140, 173, 32, 77, 77, 27, 150, 3, 237, 59, 69, 146, 24, 221, 146, 166, 93, 207, 56, 142, 16, 42, 232, 98, 117, 132, 251, 13, 170, 180, 221, 75, 53, 102, 33, 99, 85, 11, 243, 232, 28, 211, 15, 65, 211, 30, 187, 78, 25, 233, 73, 227, 117, 156, 145, 199, 160, 127, 206, 252, 125, 163, 216, 247, 143, 153, 121, 125, 23, 238, 215, 204, 204, 199, 183, 119, 138, 125, 63, 3, 248, 118, 243, 239, 26, 225, 111, 191, 3, 248, 170, 200, 43, 69, 141, 167, 116, 190, 32, 255, 88, 248, 242, 132, 223, 235, 84, 169, 14, 19, 255, 93, 211, 6, 125, 158, 81, 142, 152, 30, 20, 251, 126, 6, 240, 31, 193, 126, 141, 48, 189, 63, 21, 121, 199, 164, 105, 147, 255, 128, 44, 70, 215, 52, 29, 193, 47, 202, 180, 67, 107, 148, 251, 127, 0, 240, 195, 49, 47, 233, 223, 69, 218, 23, 8, 77, 219, 199, 217, 192, 61, 86, 37, 104, 20, 251, 222, 235, 27, 105, 156, 132, 251, 173, 145, 224, 192, 212, 17, 178, 187, 4, 31, 163, 204, 210, 59, 146, 51, 210, 10, 212, 22, 243, 238, 164, 230, 254, 62, 39, 154, 209, 128, 146, 99, 225, 107, 234, 72, 174, 211, 31, 122, 46, 83, 71, 218, 145, 244, 164, 237, 85, 202, 163, 64, 83, 52, 117, 231, 8, 89, 253, 232, 132, 233, 229, 48, 13, 2, 144, 63, 222, 119, 125, 10, 219, 10, 211, 207, 161, 157, 146, 94, 127, 166, 206, 61, 9, 105, 62, 169, 210, 180, 87, 219, 153, 121, 213, 194, 124, 82, 174, 99, 214, 231, 225, 45, 233, 223, 38, 169, 118, 172, 130, 188, 224, 62, 46, 246, 154, 199, 151, 115, 43, 177, 79, 210, 139, 212, 126, 224, 247, 154, 11, 103, 14, 243, 35, 135, 72, 27, 142, 80, 141, 126, 76, 154, 115, 43, 151, 243, 192, 141, 161, 210, 61, 0, 0, 20, 200, 73, 68, 65, 84, 133, 118, 217, 167, 177, 191, 189, 166, 126, 229, 94, 119, 52, 239, 132, 72, 234, 136, 52, 173, 92, 166, 107, 109, 33, 59, 158, 46, 209, 244, 67, 234, 32, 59, 22, 31, 75, 169, 230, 92, 207, 52, 211, 32, 124, 252, 221, 53, 253, 161, 20, 227, 5, 200, 7, 62, 124, 245, 107, 164, 249, 29, 61, 229, 231, 69, 11, 89, 161, 125, 46, 95, 36, 189, 128, 164, 20, 40, 105, 153, 135, 46, 120, 161, 79, 224, 88, 106, 200, 143, 179, 244, 88, 0, 250, 121, 164, 183, 91, 238, 163, 217, 189, 61, 220, 142, 191, 189, 73, 103, 43, 252, 93, 206, 171, 213, 244, 164, 199, 218, 111, 213, 72, 90, 149, 34, 157, 92, 104, 218, 26, 23, 210, 248, 231, 176, 180, 223, 17, 110, 231, 155, 139, 78, 152, 215, 214, 67, 94, 190, 73, 7, 5, 230, 206, 53, 190, 38, 237, 91, 164, 246, 222, 26, 16, 126, 160, 22, 208, 93, 75, 106, 79, 121, 206, 38, 125, 233, 198, 231, 73, 161, 233, 124, 164, 48, 186, 171, 169, 76, 99, 127, 216, 44, 43, 136, 146, 244, 226, 164, 217, 114, 141, 69, 79, 243, 119, 191, 221, 218, 8, 229, 181, 226, 26, 135, 235, 24, 116, 194, 223, 248, 108, 175, 98, 242, 245, 54, 127, 173, 72, 167, 50, 56, 14, 11, 154, 118, 217, 101, 52, 176, 85, 164, 159, 250, 205, 112, 200, 182, 86, 122, 125, 79, 241, 6, 69, 90, 118, 159, 157, 94, 105, 187, 120, 244, 152, 167, 47, 49, 150, 219, 211, 60, 5, 216, 123, 204, 119, 22, 233, 221, 148, 143, 19, 176, 151, 91, 160, 52, 143, 190, 199, 26, 92, 205, 133, 33, 133, 227, 118, 33, 109, 168, 58, 225, 126, 57, 199, 226, 154, 180, 49, 189, 221, 218, 24, 133, 53, 52, 55, 14, 210, 122, 227, 179, 189, 138, 169, 134, 159, 250, 162, 121, 162, 150, 194, 224, 134, 148, 229, 114, 133, 154, 235, 84, 202, 245, 77, 83, 135, 124, 240, 117, 189, 140, 65, 122, 99, 235, 243, 28, 209, 196, 43, 181, 233, 35, 49, 6, 106, 1, 249, 19, 154, 36, 158, 8, 75, 79, 64, 139, 199, 176, 154, 145, 154, 216, 129, 218, 66, 86, 206, 163, 32, 45, 205, 178, 93, 149, 207, 131, 8, 164, 131, 252, 196, 219, 11, 247, 205, 53, 22, 183, 164, 177, 185, 221, 218, 24, 133, 53, 164, 249, 187, 95, 111, 159, 176, 188, 142, 54, 160, 123, 2, 56, 118, 97, 145, 94, 156, 182, 70, 199, 97, 65, 211, 222, 184, 152, 59, 101, 48, 5, 45, 252, 93, 191, 164, 114, 108, 219, 52, 55, 163, 190, 251, 36, 185, 78, 31, 145, 198, 203, 247, 13, 130, 230, 157, 183, 232, 117, 108, 11, 89, 65, 125, 188, 32, 113, 75, 122, 242, 159, 17, 255, 237, 81, 105, 99, 46, 137, 83, 45, 76, 235, 140, 60, 71, 114, 53, 35, 2, 154, 88, 164, 214, 192, 184, 88, 193, 109, 5, 142, 62, 94, 37, 217, 195, 45, 14, 210, 173, 14, 119, 40, 230, 86, 208, 189, 24, 57, 212, 110, 72, 111, 242, 59, 163, 227, 176, 32, 189, 9, 113, 189, 134, 249, 108, 251, 99, 217, 34, 252, 223, 93, 90, 215, 82, 138, 155, 116, 100, 217, 98, 202, 139, 180, 61, 60, 26, 228, 237, 170, 134, 172, 204, 22, 3, 181, 154, 155, 162, 232, 83, 148, 164, 23, 253, 214, 32, 239, 156, 2, 117, 132, 172, 156, 91, 97, 122, 210, 198, 59, 137, 199, 30, 74, 210, 191, 105, 253, 182, 127, 201, 177, 184, 71, 218, 56, 221, 59, 254, 212, 30, 27, 206, 37, 189, 184, 184, 108, 53, 202, 210, 98, 254, 241, 111, 133, 191, 205, 233, 69, 82, 233, 200, 214, 209, 49, 253, 18, 98, 38, 109, 99, 165, 215, 47, 9, 233, 223, 37, 165, 184, 197, 152, 159, 221, 203, 113, 250, 136, 52, 94, 123, 163, 252, 179, 152, 29, 160, 233, 232, 90, 21, 114, 175, 40, 67, 172, 202, 165, 137, 211, 189, 139, 219, 61, 173, 34, 77, 159, 141, 159, 181, 10, 242, 227, 234, 59, 205, 154, 88, 180, 129, 142, 195, 82, 13, 249, 241, 222, 187, 40, 165, 210, 200, 250, 162, 105, 3, 52, 155, 244, 92, 204, 73, 7, 249, 241, 223, 27, 156, 208, 212, 61, 171, 54, 223, 55, 205, 49, 185, 208, 116, 128, 82, 141, 217, 17, 225, 219, 87, 205, 181, 32, 149, 115, 53, 198, 252, 236, 107, 185, 77, 31, 137, 57, 80, 11, 232, 206, 205, 104, 49, 147, 22, 242, 104, 88, 6, 77, 35, 185, 55, 44, 135, 175, 50, 106, 26, 90, 105, 227, 103, 25, 127, 223, 92, 47, 122, 37, 198, 98, 136, 38, 70, 247, 54, 118, 182, 101, 91, 29, 244, 8, 194, 168, 160, 139, 193, 246, 230, 247, 165, 190, 16, 105, 89, 39, 74, 136, 89, 172, 115, 70, 218, 17, 75, 161, 227, 168, 57, 183, 172, 158, 172, 74, 219, 193, 20, 174, 131, 41, 12, 212, 2, 129, 251, 14, 46, 159, 96, 255, 32, 220, 207, 242, 115, 188, 127, 67, 254, 73, 77, 105, 121, 125, 107, 132, 251, 125, 135, 238, 211, 162, 59, 225, 126, 107, 228, 51, 146, 187, 22, 238, 119, 184, 249, 103, 233, 103, 178, 215, 72, 247, 98, 22, 202, 3, 46, 241, 43, 169, 179, 253, 255, 112, 249, 196, 60, 141, 251, 6, 121, 187, 1, 92, 62, 37, 125, 125, 145, 251, 1, 121, 123, 171, 249, 188, 121, 108, 39, 225, 126, 107, 135, 180, 53, 49, 107, 28, 210, 183, 166, 233, 60, 255, 237, 57, 239, 131, 112, 191, 198, 115, 190, 46, 26, 225, 126, 95, 96, 247, 185, 117, 105, 95, 107, 141, 248, 237, 191, 180, 63, 246, 5, 243, 62, 185, 62, 69, 19, 179, 217, 125, 7, 151, 142, 118, 35, 220, 239, 224, 144, 182, 198, 147, 112, 191, 7, 196, 233, 112, 74, 47, 56, 95, 148, 233, 254, 137, 75, 231, 92, 98, 167, 76, 59, 150, 181, 227, 239, 158, 32, 143, 197, 31, 142, 121, 148, 132, 157, 237, 229, 250, 23, 228, 29, 191, 7, 252, 126, 19, 43, 109, 167, 26, 225, 126, 41, 56, 9, 247, 115, 189, 121, 144, 198, 44, 197, 155, 147, 181, 112, 191, 147, 65, 222, 210, 78, 208, 59, 196, 159, 118, 211, 8, 247, 59, 24, 150, 225, 47, 228, 115, 29, 108, 132, 251, 29, 12, 203, 0, 200, 7, 233, 0, 96, 99, 85, 136, 33, 41, 60, 38, 113, 41, 75, 103, 92, 150, 123, 164, 143, 38, 182, 14, 105, 111, 133, 105, 91, 60, 214, 179, 32, 125, 244, 117, 47, 86, 210, 223, 158, 145, 119, 7, 179, 134, 252, 56, 167, 182, 18, 167, 145, 104, 150, 109, 202, 253, 124, 113, 165, 173, 67, 215, 35, 57, 210, 54, 39, 165, 151, 212, 166, 72, 143, 201, 245, 250, 161, 169, 147, 169, 177, 142, 205, 20, 233, 188, 227, 214, 40, 127, 169, 35, 100, 229, 180, 110, 87, 164, 215, 193, 216, 231, 167, 52, 94, 33, 158, 64, 39, 187, 84, 116, 140, 175, 249, 140, 73, 249, 237, 81, 151, 139, 153, 84, 165, 72, 63, 212, 223, 98, 142, 14, 178, 99, 217, 222, 249, 173, 38, 22, 123, 203, 131, 48, 86, 67, 126, 156, 210, 6, 183, 180, 206, 118, 139, 249, 113, 169, 131, 151, 58, 44, 77, 155, 121, 196, 207, 11, 140, 166, 254, 133, 110, 107, 93, 73, 223, 55, 114, 237, 156, 104, 98, 150, 218, 185, 56, 167, 77, 246, 33, 135, 101, 254, 52, 215, 30, 107, 154, 23, 252, 98, 77, 163, 212, 124, 200, 41, 4, 205, 245, 34, 232, 82, 209, 177, 190, 230, 51, 68, 19, 168, 144, 47, 78, 132, 184, 40, 237, 21, 121, 164, 214, 136, 223, 146, 142, 94, 212, 3, 191, 215, 116, 30, 114, 93, 234, 79, 83, 167, 164, 27, 59, 219, 242, 58, 86, 10, 237, 218, 218, 159, 174, 126, 39, 253, 77, 46, 239, 67, 104, 46, 252, 174, 237, 134, 52, 253, 216, 223, 124, 184, 117, 132, 172, 220, 173, 81, 254, 210, 243, 56, 230, 8, 173, 180, 140, 93, 160, 242, 72, 255, 102, 251, 64, 229, 185, 149, 218, 64, 173, 166, 45, 60, 6, 42, 19, 32, 44, 208, 25, 97, 47, 222, 41, 6, 42, 196, 35, 195, 74, 145, 71, 172, 19, 75, 106, 110, 189, 170, 21, 105, 108, 173, 14, 194, 152, 230, 24, 53, 27, 59, 219, 191, 110, 117, 132, 242, 134, 166, 157, 102, 211, 215, 143, 163, 112, 255, 156, 206, 49, 235, 122, 33, 125, 60, 157, 90, 27, 29, 251, 124, 209, 92, 223, 98, 157, 179, 123, 97, 249, 66, 157, 15, 210, 245, 169, 99, 221, 156, 116, 194, 242, 133, 188, 233, 148, 254, 13, 175, 219, 65, 83, 181, 176, 48, 161, 255, 136, 210, 202, 117, 70, 184, 145, 22, 233, 31, 175, 155, 153, 143, 180, 226, 158, 145, 238, 227, 92, 95, 143, 147, 164, 23, 180, 216, 115, 212, 92, 73, 207, 63, 151, 141, 157, 237, 159, 219, 11, 202, 139, 197, 61, 154, 249, 137, 125, 59, 37, 125, 114, 52, 183, 93, 11, 73, 26, 135, 173, 99, 250, 210, 235, 83, 236, 143, 171, 93, 211, 180, 53, 150, 82, 95, 230, 239, 40, 44, 95, 29, 168, 60, 154, 107, 105, 140, 167, 78, 210, 178, 133, 108, 127, 53, 117, 125, 31, 162, 64, 177, 191, 230, 51, 164, 18, 150, 235, 140, 112, 243, 185, 66, 53, 16, 154, 74, 146, 194, 154, 163, 247, 72, 143, 97, 170, 131, 220, 10, 211, 57, 35, 254, 11, 52, 46, 164, 113, 122, 129, 219, 231, 218, 95, 145, 238, 205, 152, 43, 77, 157, 184, 141, 69, 29, 161, 188, 33, 105, 46, 202, 103, 92, 70, 153, 182, 194, 125, 115, 186, 153, 221, 195, 246, 186, 166, 169, 131, 169, 76, 107, 147, 150, 249, 104, 92, 14, 105, 159, 195, 186, 28, 247, 84, 194, 178, 157, 3, 151, 235, 40, 44, 147, 107, 125, 118, 149, 194, 247, 87, 134, 72, 99, 246, 138, 0, 231, 104, 236, 175, 249, 248, 40, 91, 168, 198, 76, 90, 22, 31, 177, 210, 140, 228, 166, 210, 144, 95, 219, 66, 86, 254, 78, 144, 86, 138, 211, 136, 124, 169, 33, 143, 211, 10, 110, 157, 237, 23, 164, 89, 71, 230, 104, 161, 143, 67, 204, 182, 44, 36, 205, 211, 192, 87, 148, 241, 181, 195, 91, 62, 219, 159, 123, 52, 55, 52, 181, 235, 65, 120, 38, 173, 23, 174, 49, 145, 146, 182, 121, 49, 234, 155, 180, 93, 177, 142, 209, 173, 84, 167, 143, 164, 58, 80, 11, 232, 166, 210, 153, 94, 19, 82, 249, 154, 207, 16, 105, 165, 63, 195, 126, 254, 143, 166, 113, 240, 241, 136, 68, 115, 236, 91, 15, 249, 249, 182, 133, 191, 19, 80, 154, 214, 25, 233, 92, 212, 164, 164, 245, 170, 111, 216, 217, 217, 254, 73, 115, 142, 220, 110, 169, 62, 9, 242, 97, 5, 249, 104, 78, 95, 183, 164, 251, 230, 242, 66, 164, 166, 189, 118, 37, 29, 0, 72, 165, 125, 150, 254, 157, 67, 148, 87, 26, 187, 208, 47, 147, 238, 133, 229, 10, 253, 55, 77, 117, 250, 72, 202, 3, 181, 149, 176, 108, 125, 27, 104, 70, 122, 161, 138, 53, 207, 44, 165, 183, 71, 165, 177, 154, 211, 112, 223, 58, 10, 243, 179, 62, 118, 23, 62, 27, 117, 205, 13, 161, 233, 9, 99, 160, 134, 254, 184, 216, 217, 254, 73, 51, 122, 155, 123, 93, 209, 208, 140, 82, 107, 54, 201, 249, 154, 130, 10, 242, 99, 114, 29, 24, 145, 182, 113, 49, 151, 170, 187, 38, 189, 150, 134, 232, 168, 237, 133, 101, 9, 29, 187, 185, 43, 101, 89, 58, 10, 203, 182, 15, 84, 30, 205, 57, 22, 235, 186, 163, 89, 185, 172, 210, 38, 46, 253, 50, 100, 35, 220, 239, 160, 45, 128, 39, 63, 144, 206, 103, 72, 165, 95, 249, 58, 120, 204, 83, 243, 41, 242, 214, 99, 190, 33, 157, 4, 251, 252, 128, 252, 43, 129, 13, 242, 121, 188, 237, 234, 7, 46, 199, 169, 253, 250, 232, 59, 92, 234, 103, 73, 157, 109, 233, 151, 211, 238, 105, 144, 79, 199, 81, 235, 47, 216, 180, 219, 141, 65, 154, 22, 190, 65, 94, 55, 214, 142, 121, 28, 132, 251, 53, 142, 233, 251, 180, 194, 229, 203, 160, 18, 39, 195, 114, 244, 14, 194, 253, 164, 159, 246, 246, 225, 17, 242, 24, 249, 254, 60, 189, 132, 180, 47, 20, 42, 102, 141, 112, 63, 203, 207, 212, 79, 121, 82, 236, 107, 246, 117, 77, 233, 29, 82, 204, 199, 133, 245, 72, 185, 66, 222, 201, 73, 71, 47, 124, 150, 33, 165, 17, 125, 45, 233, 223, 76, 58, 50, 160, 185, 123, 14, 117, 71, 239, 131, 180, 126, 119, 119, 126, 203, 145, 237, 249, 235, 107, 223, 139, 107, 41, 42, 232, 214, 214, 150, 108, 57, 189, 16, 41, 109, 179, 183, 142, 233, 231, 52, 183, 93, 218, 206, 156, 3, 149, 39, 197, 245, 219, 165, 115, 122, 99, 61, 161, 72, 109, 250, 200, 94, 88, 150, 216, 211, 244, 204, 250, 80, 146, 17, 237, 71, 200, 239, 228, 255, 210, 22, 192, 163, 191, 33, 191, 195, 254, 0, 187, 14, 68, 35, 220, 79, 59, 202, 56, 230, 7, 116, 163, 218, 181, 199, 188, 231, 208, 252, 13, 78, 194, 253, 190, 65, 55, 10, 82, 74, 71, 114, 12, 71, 182, 195, 140, 190, 229, 234, 27, 228, 237, 135, 212, 3, 226, 119, 26, 165, 164, 231, 133, 244, 105, 229, 173, 131, 98, 95, 215, 60, 124, 145, 230, 239, 243, 250, 53, 230, 135, 34, 175, 198, 176, 28, 46, 249, 28, 12, 203, 48, 230, 43, 116, 125, 33, 107, 210, 60, 164, 35, 241, 86, 158, 132, 251, 173, 161, 188, 65, 145, 116, 180, 27, 97, 90, 7, 77, 198, 70, 164, 23, 139, 7, 216, 84, 48, 205, 148, 20, 223, 13, 213, 147, 98, 223, 157, 231, 188, 93, 105, 46, 42, 223, 20, 251, 238, 132, 251, 61, 192, 240, 49, 80, 98, 250, 206, 246, 73, 249, 187, 119, 208, 213, 45, 202, 211, 191, 224, 191, 77, 138, 221, 105, 148, 58, 9, 247, 115, 61, 158, 31, 138, 60, 26, 199, 60, 124, 89, 11, 247, 59, 25, 150, 225, 86, 174, 83, 33, 14, 134, 101, 152, 146, 74, 204, 82, 159, 102, 115, 77, 51, 216, 224, 61, 110, 210, 199, 106, 161, 223, 250, 189, 167, 66, 220, 71, 193, 154, 71, 132, 22, 164, 143, 104, 206, 72, 227, 163, 28, 210, 120, 185, 188, 100, 123, 20, 166, 173, 126, 12, 20, 137, 244, 145, 238, 84, 189, 126, 132, 219, 52, 129, 92, 70, 39, 199, 104, 143, 57, 181, 246, 205, 154, 180, 142, 73, 183, 109, 216, 226, 59, 211, 28, 183, 171, 92, 62, 246, 211, 33, 189, 191, 173, 102, 42, 132, 117, 59, 37, 45, 75, 236, 169, 83, 169, 76, 31, 217, 10, 203, 144, 202, 139, 192, 209, 150, 138, 150, 102, 154, 66, 199, 13, 48, 126, 123, 116, 130, 180, 82, 89, 173, 206, 82, 9, 243, 63, 35, 141, 249, 201, 210, 120, 185, 92, 124, 90, 97, 218, 103, 228, 241, 130, 104, 13, 127, 177, 114, 233, 108, 215, 254, 14, 37, 26, 205, 241, 222, 158, 175, 37, 76, 159, 145, 216, 195, 61, 78, 62, 206, 219, 88, 172, 207, 3, 205, 90, 189, 49, 165, 180, 226, 136, 75, 185, 172, 111, 136, 83, 159, 159, 125, 237, 136, 248, 125, 129, 78, 88, 134, 84, 6, 50, 90, 200, 207, 83, 111, 101, 78, 249, 107, 62, 67, 52, 163, 202, 190, 39, 223, 75, 43, 149, 229, 73, 40, 45, 195, 25, 241, 71, 41, 165, 75, 174, 185, 252, 157, 52, 47, 136, 198, 90, 150, 82, 163, 134, 236, 88, 58, 97, 122, 218, 206, 118, 237, 233, 56, 98, 146, 94, 120, 110, 235, 198, 82, 58, 217, 128, 238, 188, 153, 218, 98, 143, 234, 105, 72, 235, 70, 235, 152, 190, 244, 252, 61, 35, 222, 160, 149, 230, 197, 195, 208, 101, 220, 11, 203, 101, 221, 193, 149, 14, 228, 165, 208, 113, 140, 253, 241, 154, 212, 191, 191, 114, 143, 166, 204, 222, 250, 13, 41, 127, 205, 103, 76, 172, 21, 56, 82, 248, 48, 129, 166, 65, 143, 253, 150, 111, 7, 219, 120, 109, 133, 233, 159, 145, 126, 71, 82, 250, 119, 237, 20, 105, 74, 59, 219, 57, 117, 152, 198, 72, 235, 219, 30, 151, 186, 211, 198, 41, 102, 116, 45, 228, 231, 77, 46, 23, 208, 41, 210, 186, 49, 167, 205, 148, 198, 44, 86, 39, 77, 115, 237, 8, 77, 83, 39, 45, 73, 175, 241, 41, 60, 225, 143, 61, 125, 36, 199, 129, 90, 32, 194, 20, 220, 148, 191, 230, 51, 70, 243, 113, 10, 95, 21, 172, 82, 228, 89, 123, 202, 115, 136, 244, 239, 246, 138, 184, 163, 117, 199, 129, 114, 249, 250, 27, 105, 254, 38, 123, 215, 131, 8, 68, 122, 17, 236, 148, 233, 74, 58, 219, 41, 140, 206, 248, 208, 65, 22, 195, 82, 142, 119, 14, 105, 172, 66, 181, 175, 214, 182, 176, 57, 191, 174, 73, 219, 229, 88, 109, 145, 116, 90, 68, 140, 39, 128, 41, 44, 243, 151, 203, 252, 236, 107, 210, 107, 172, 69, 157, 203, 117, 160, 86, 122, 173, 21, 151, 125, 108, 213, 145, 10, 242, 183, 172, 99, 47, 203, 114, 75, 243, 246, 232, 198, 83, 158, 154, 55, 210, 173, 151, 70, 210, 172, 190, 178, 49, 44, 199, 148, 181, 112, 63, 215, 143, 141, 124, 131, 124, 197, 140, 13, 242, 25, 125, 243, 233, 43, 198, 151, 254, 219, 1, 248, 119, 168, 194, 24, 147, 158, 119, 210, 183, 228, 75, 182, 241, 148, 78, 46, 43, 143, 88, 47, 241, 7, 200, 87, 161, 136, 21, 179, 181, 112, 191, 147, 97, 25, 134, 104, 150, 249, 179, 90, 73, 67, 154, 238, 193, 40, 127, 23, 49, 87, 31, 201, 101, 89, 191, 91, 218, 165, 162, 103, 105, 145, 238, 221, 173, 68, 232, 183, 71, 165, 35, 34, 71, 15, 121, 73, 72, 239, 100, 67, 149, 231, 86, 37, 44, 223, 121, 102, 62, 154, 199, 103, 177, 167, 210, 140, 145, 222, 101, 119, 142, 233, 175, 112, 57, 254, 238, 109, 123, 70, 62, 163, 145, 82, 210, 115, 52, 229, 122, 16, 146, 52, 94, 22, 245, 49, 52, 77, 59, 225, 122, 189, 144, 94, 83, 125, 93, 147, 180, 58, 97, 217, 182, 17, 202, 6, 196, 191, 198, 74, 227, 147, 210, 19, 177, 88, 211, 71, 52, 215, 247, 20, 223, 129, 209, 180, 125, 237, 156, 140, 246, 194, 76, 82, 189, 40, 105, 26, 53, 31, 39, 134, 244, 37, 137, 80, 111, 35, 107, 222, 114, 159, 85, 81, 28, 213, 138, 242, 205, 37, 109, 32, 99, 79, 165, 25, 35, 141, 87, 23, 171, 128, 25, 144, 158, 19, 140, 225, 79, 67, 231, 206, 113, 224, 223, 223, 59, 167, 114, 33, 109, 143, 106, 199, 244, 53, 157, 30, 215, 60, 230, 72, 117, 197, 145, 158, 38, 126, 22, 115, 164, 165, 121, 87, 6, 121, 207, 33, 61, 87, 247, 30, 243, 108, 133, 121, 166, 58, 80, 91, 65, 254, 247, 158, 117, 189, 144, 158, 116, 49, 26, 4, 9, 205, 219, 243, 71, 15, 249, 73, 43, 243, 214, 67, 94, 18, 169, 175, 186, 17, 178, 211, 35, 61, 233, 207, 72, 107, 52, 226, 90, 141, 112, 241, 42, 21, 99, 232, 166, 197, 165, 221, 218, 226, 103, 123, 47, 141, 229, 25, 233, 117, 60, 134, 72, 159, 130, 206, 185, 230, 165, 240, 194, 252, 61, 41, 175, 56, 114, 77, 122, 157, 245, 221, 142, 75, 235, 251, 209, 115, 190, 62, 196, 88, 125, 68, 58, 240, 24, 186, 158, 107, 152, 47, 21, 173, 185, 115, 76, 217, 30, 97, 26, 143, 20, 94, 212, 184, 71, 243, 82, 232, 156, 139, 135, 139, 173, 176, 92, 190, 158, 0, 72, 27, 232, 20, 27, 74, 128, 157, 68, 31, 164, 49, 204, 105, 20, 54, 150, 84, 219, 188, 57, 164, 215, 139, 57, 79, 189, 58, 97, 30, 161, 215, 97, 150, 158, 27, 177, 175, 249, 210, 191, 145, 239, 118, 80, 122, 189, 218, 123, 206, 215, 135, 24, 211, 71, 114, 31, 168, 5, 116, 3, 116, 91, 151, 12, 164, 149, 42, 133, 69, 217, 199, 104, 26, 143, 57, 39, 136, 38, 159, 106, 70, 62, 90, 149, 162, 92, 190, 27, 166, 41, 161, 239, 120, 53, 83, 105, 82, 236, 24, 72, 235, 88, 232, 191, 99, 78, 52, 157, 67, 154, 118, 68, 216, 115, 216, 154, 228, 28, 155, 115, 157, 0, 228, 215, 214, 208, 55, 123, 41, 175, 56, 114, 77, 186, 100, 220, 25, 126, 167, 1, 118, 194, 60, 91, 143, 121, 250, 36, 61, 87, 125, 244, 233, 164, 215, 170, 28, 6, 52, 188, 204, 138, 24, 90, 117, 164, 17, 22, 226, 32, 220, 47, 22, 237, 219, 163, 174, 39, 102, 35, 220, 239, 59, 46, 43, 97, 132, 162, 89, 117, 163, 65, 216, 155, 0, 233, 202, 14, 174, 43, 142, 220, 122, 82, 164, 245, 135, 167, 60, 41, 45, 63, 20, 251, 166, 58, 87, 63, 37, 210, 85, 32, 26, 203, 66, 120, 244, 55, 46, 171, 236, 12, 249, 130, 249, 109, 131, 102, 229, 155, 20, 219, 227, 147, 101, 33, 4, 14, 138, 125, 27, 143, 249, 74, 211, 58, 120, 204, 211, 39, 205, 234, 35, 115, 219, 190, 70, 184, 223, 97, 102, 62, 33, 60, 9, 247, 91, 67, 57, 64, 151, 227, 215, 124, 198, 132, 120, 41, 80, 58, 58, 219, 185, 30, 196, 12, 154, 199, 70, 115, 71, 107, 52, 98, 60, 90, 74, 121, 42, 205, 20, 233, 40, 65, 140, 58, 150, 147, 18, 30, 105, 166, 98, 139, 114, 70, 174, 174, 213, 248, 125, 138, 66, 7, 63, 55, 95, 169, 78, 185, 145, 94, 39, 183, 1, 203, 52, 164, 67, 216, 235, 153, 180, 237, 61, 122, 202, 207, 130, 166, 31, 208, 206, 204, 43, 215, 239, 175, 220, 99, 214, 127, 202, 245, 107, 62, 67, 42, 200, 3, 229, 250, 88, 76, 90, 177, 98, 53, 82, 210, 134, 233, 140, 112, 55, 79, 210, 242, 248, 124, 241, 70, 83, 23, 82, 155, 22, 37, 109, 236, 187, 88, 5, 204, 132, 244, 92, 168, 99, 21, 48, 35, 210, 58, 25, 178, 93, 201, 193, 17, 178, 152, 133, 92, 209, 75, 218, 54, 166, 240, 197, 67, 233, 77, 129, 175, 62, 202, 86, 152, 223, 222, 83, 126, 86, 164, 253, 148, 57, 215, 190, 210, 6, 106, 1, 15, 75, 69, 223, 155, 58, 210, 8, 51, 63, 168, 138, 26, 207, 55, 200, 31, 155, 188, 131, 219, 31, 95, 250, 129, 1, 235, 15, 213, 12, 217, 41, 246, 221, 24, 149, 225, 154, 166, 19, 243, 213, 99, 190, 154, 186, 192, 143, 150, 44, 219, 58, 118, 1, 50, 160, 105, 207, 114, 249, 112]);
fileData8.push.apply(fileData8, [77, 8, 33, 62, 142, 163, 245, 13, 211, 31, 58, 251, 19, 126, 219, 99, 87, 7, 225, 126, 107, 248, 185, 49, 200, 241, 67, 53, 247, 60, 9, 247, 11, 49, 141, 246, 132, 176, 211, 104, 231, 208, 124, 0, 81, 252, 1, 27, 233, 221, 118, 138, 47, 140, 13, 209, 188, 64, 161, 29, 69, 208, 140, 234, 228, 176, 44, 82, 136, 181, 164, 165, 49, 243, 53, 34, 225, 146, 119, 103, 144, 247, 28, 185, 150, 59, 53, 123, 200, 226, 184, 141, 85, 192, 204, 72, 219, 21, 198, 243, 39, 205, 116, 198, 208, 134, 206, 143, 79, 72, 235, 189, 5, 105, 189, 243, 177, 204, 159, 244, 111, 85, 121, 200, 203, 82, 5, 249, 177, 180, 142, 121, 72, 219, 215, 84, 191, 191, 114, 143, 102, 148, 94, 52, 43, 66, 243, 135, 72, 233, 164, 147, 144, 158, 152, 218, 249, 132, 41, 55, 154, 215, 90, 200, 203, 105, 125, 81, 220, 10, 203, 209, 25, 229, 223, 9, 242, 118, 109, 104, 172, 212, 136, 27, 179, 82, 72, 235, 158, 245, 57, 80, 138, 148, 223, 79, 73, 149, 244, 92, 62, 35, 206, 224, 76, 139, 159, 235, 166, 127, 68, 154, 215, 250, 61, 60, 118, 124, 38, 72, 242, 57, 122, 200, 39, 4, 235, 233, 35, 210, 126, 86, 78, 3, 181, 128, 231, 165, 162, 91, 97, 66, 177, 151, 248, 113, 161, 121, 17, 78, 83, 9, 164, 127, 128, 20, 46, 52, 210, 147, 192, 250, 229, 37, 233, 223, 98, 111, 148, 255, 212, 133, 46, 197, 250, 45, 189, 56, 167, 80, 207, 82, 182, 5, 227, 232, 147, 52, 158, 185, 189, 16, 105, 77, 122, 45, 74, 245, 3, 90, 177, 133, 92, 230, 79, 114, 221, 180, 186, 86, 249, 166, 25, 24, 212, 198, 173, 50, 76, 59, 182, 89, 179, 34, 110, 231, 104, 75, 231, 151, 72, 231, 185, 166, 68, 51, 207, 102, 163, 216, 55, 245, 249, 217, 215, 158, 132, 251, 89, 207, 79, 150, 198, 236, 100, 148, 255, 223, 24, 254, 27, 31, 144, 207, 114, 100, 164, 119, 136, 93, 128, 194, 28, 132, 251, 133, 94, 174, 46, 117, 41, 206, 211, 206, 201, 65, 177, 175, 120, 222, 236, 140, 223, 239, 102, 230, 17, 138, 166, 239, 166, 141, 155, 102, 46, 187, 102, 169, 213, 20, 252, 5, 121, 127, 100, 115, 251, 47, 110, 59, 218, 141, 48, 161, 131, 112, 191, 148, 124, 131, 188, 220, 31, 32, 191, 40, 228, 212, 209, 254, 12, 127, 235, 82, 207, 33, 237, 200, 91, 198, 236, 63, 184, 188, 44, 179, 187, 218, 26, 0, 255, 131, 252, 26, 1, 242, 111, 29, 187, 0, 153, 224, 11, 145, 110, 14, 194, 253, 24, 179, 251, 126, 64, 222, 105, 108, 102, 230, 245, 21, 195, 3, 51, 39, 92, 254, 70, 185, 188, 216, 247, 13, 242, 115, 86, 219, 209, 110, 132, 251, 29, 148, 233, 166, 226, 73, 184, 223, 3, 70, 166, 158, 74, 31, 77, 231, 252, 8, 176, 133, 223, 71, 118, 154, 53, 22, 83, 88, 22, 9, 144, 61, 234, 181, 126, 12, 38, 141, 89, 109, 92, 142, 156, 72, 207, 207, 46, 86, 1, 51, 161, 121, 188, 73, 50, 146, 71, 235, 103, 112, 222, 251, 53, 205, 181, 40, 183, 199, 236, 161, 72, 167, 65, 248, 234, 179, 84, 72, 127, 238, 186, 132, 213, 244, 145, 220, 250, 66, 90, 154, 107, 199, 224, 28, 119, 73, 7, 108, 52, 129, 12, 172, 224, 233, 147, 154, 111, 52, 141, 101, 42, 166, 98, 240, 10, 219, 71, 188, 154, 55, 120, 115, 109, 200, 44, 212, 96, 71, 219, 151, 220, 206, 217, 212, 241, 133, 72, 61, 205, 32, 77, 29, 169, 140, 169, 211, 116, 124, 114, 237, 220, 89, 208, 196, 173, 21, 166, 41, 189, 62, 229, 60, 80, 11, 56, 126, 147, 228, 122, 234, 72, 201, 243, 179, 123, 154, 199, 77, 107, 76, 159, 156, 57, 77, 27, 233, 253, 192, 229, 17, 207, 189, 41, 36, 167, 183, 255, 102, 249, 24, 76, 243, 40, 148, 83, 56, 40, 38, 118, 112, 100, 56, 223, 88, 239, 43, 228, 211, 248, 26, 195, 114, 228, 236, 27, 228, 243, 102, 231, 206, 211, 46, 137, 197, 244, 145, 37, 244, 31, 1, 249, 244, 17, 224, 42, 38, 215, 29, 109, 105, 35, 120, 80, 100, 148, 34, 205, 75, 145, 83, 115, 137, 215, 194, 116, 82, 234, 104, 3, 151, 70, 126, 13, 224, 15, 252, 156, 159, 188, 1, 240, 127, 145, 198, 7, 9, 128, 244, 98, 70, 229, 56, 196, 46, 64, 97, 14, 194, 253, 248, 66, 228, 175, 120, 131, 50, 95, 238, 29, 183, 88, 158, 132, 251, 73, 223, 167, 90, 74, 255, 241, 63, 144, 223, 32, 255, 55, 118, 247, 190, 12, 57, 230, 132, 124, 38, 253, 15, 249, 10, 127, 171, 89, 28, 60, 239, 23, 210, 15, 0, 255, 6, 240, 175, 183, 237, 63, 129, 242, 61, 121, 222, 143, 136, 226, 226, 77, 177, 155, 131, 112, 191, 147, 97, 25, 114, 119, 16, 238, 151, 194, 34, 0, 41, 137, 117, 131, 114, 136, 148, 175, 79, 179, 98, 119, 196, 244, 156, 147, 253, 204, 2, 166, 66, 50, 183, 90, 178, 150, 178, 100, 206, 247, 17, 156, 107, 124, 75, 50, 207, 73, 58, 55, 108, 73, 36, 239, 23, 112, 221, 221, 105, 146, 151, 129, 66, 124, 33, 181, 36, 146, 15, 97, 28, 163, 149, 46, 77, 210, 121, 218, 156, 194, 52, 110, 170, 239, 194, 107, 240, 125, 146, 235, 176, 244, 155, 34, 123, 65, 90, 165, 156, 255, 21, 100, 215, 143, 187, 79, 239, 36, 39, 125, 73, 143, 253, 166, 78, 78, 105, 227, 246, 136, 241, 14, 16, 27, 201, 223, 77, 197, 172, 139, 87, 180, 164, 77, 117, 16, 121, 65, 145, 145, 220, 32, 231, 246, 229, 178, 216, 106, 248, 187, 104, 47, 201, 212, 199, 187, 246, 241, 138, 150, 141, 22, 227, 49, 228, 139, 144, 247, 77, 125, 132, 69, 83, 247, 86, 152, 238, 83, 181, 190, 10, 158, 128, 169, 27, 139, 237, 216, 143, 135, 42, 236, 17, 229, 85, 214, 71, 12, 87, 12, 109, 133, 120, 196, 175, 35, 58, 71, 92, 2, 93, 90, 204, 124, 186, 215, 217, 238, 227, 70, 195, 182, 184, 95, 103, 95, 192, 250, 166, 113, 123, 206, 150, 122, 65, 8, 105, 168, 110, 50, 166, 195, 86, 24, 94, 181, 133, 157, 108, 185, 247, 184, 12, 208, 92, 95, 83, 158, 193, 54, 113, 74, 139, 251, 131, 14, 159, 160, 31, 180, 25, 26, 64, 123, 69, 121, 231, 255, 10, 195, 79, 4, 126, 59, 111, 255, 113, 39, 129, 10, 63, 23, 103, 255, 142, 203, 164, 249, 146, 87, 127, 168, 113, 153, 200, 223, 79, 92, 127, 66, 254, 243, 208, 115, 177, 194, 175, 47, 81, 252, 29, 171, 32, 153, 121, 143, 203, 57, 218, 215, 217, 47, 184, 188, 208, 90, 242, 121, 106, 165, 197, 229, 237, 240, 62, 150, 159, 113, 249, 10, 24, 185, 121, 196, 229, 156, 222, 92, 253, 187, 29, 120, 110, 75, 180, 248, 249, 130, 253, 23, 176, 30, 82, 56, 21, 126, 173, 123, 174, 215, 146, 21, 126, 189, 54, 61, 161, 236, 254, 84, 223, 222, 173, 223, 254, 249, 128, 59, 109, 221, 255, 7, 253, 6, 67, 253, 190, 171, 48, 168, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
Module['FS_createDataFile']('/', 'walkSheet.png', fileData8, true, true, false);

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_index.data');

    };
    Module['addRunDependency']('datafile_index.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 97804, "filename": "/assets/asphalt.png"}, {"audio": 0, "start": 97804, "crunched": 0, "end": 192929, "filename": "/assets/freewayWall.png"}, {"audio": 0, "start": 192929, "crunched": 0, "end": 195643, "filename": "/assets/nightSky.png"}, {"audio": 0, "start": 195643, "crunched": 0, "end": 201161, "filename": "/assets/spray - Copy - Copy.png"}, {"audio": 0, "start": 201161, "crunched": 0, "end": 208691, "filename": "/assets/spray.png"}, {"audio": 0, "start": 208691, "crunched": 0, "end": 208873, "filename": "/assets/transparent.png"}, {"audio": 0, "start": 208873, "crunched": 0, "end": 555031, "filename": "/assets/tunnelWall.png"}, {"audio": 0, "start": 555031, "crunched": 0, "end": 576816, "filename": "/assets/walkSheet.png"}], "remote_package_size": 598601, "package_uuid": "b2619ab4-c6a9-41b5-8666-ee0fca942547"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE, 'maximum': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'index.wast';
  var wasmBinaryFile = 'index.wasm';
  var asmjsCodeFile = 'index.temp.asm.js';

  if (typeof Module['locateFile'] === 'function') {
    if (!isDataURI(wasmTextFile)) {
      wasmTextFile = Module['locateFile'](wasmTextFile);
    }
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
    }
    if (!isDataURI(asmjsCodeFile)) {
      asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
    }
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': { // special asm2wasm imports
      "f64-rem": function(x, y) {
        return x % y;
      },
      "debugger": function() {
        debugger;
      }
    },
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module['printErr']('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function fixImports(imports) {
    return imports;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      Module['printErr']('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      Module['printErr']('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    // Async compilation can be confusing when an error on the page overwrites Module
    // (for example, if the order of elements is wrong, and the one defining Module is
    // later), so we save Module and check it later.
    var trueModule = Module;
    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
      trueModule = null;
      receiveInstance(output['instance'], output['module']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver).catch(function(reason) {
        Module['printErr']('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource)
        .catch(function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          Module['printErr']('wasm streaming compile failed: ' + reason);
          Module['printErr']('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        console.error('Module.reallocBuffer: Attempted to grow from ' + oldSize  + ' bytes to ' + size + ' bytes, but got error: ' + e);
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    if (!exports) abort('no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [function() { return screen.width; },
 function() { return screen.height; },
 function($0) { if (typeof Module['setWindowTitle'] !== 'undefined') { Module['setWindowTitle'](Module['Pointer_stringify']($0)); } return 0; },
 function($0, $1, $2) { var w = $0; var h = $1; var pixels = $2; if (!Module['SDL2']) Module['SDL2'] = {}; var SDL2 = Module['SDL2']; if (SDL2.ctxCanvas !== Module['canvas']) { SDL2.ctx = Module['createContext'](Module['canvas'], false, true); SDL2.ctxCanvas = Module['canvas']; } if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) { SDL2.image = SDL2.ctx.createImageData(w, h); SDL2.w = w; SDL2.h = h; SDL2.imageCtx = SDL2.ctx; } var data = SDL2.image.data; var src = pixels >> 2; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = 0xff; src++; dst += 4; } } else { if (SDL2.data32Data !== data) { SDL2.data32 = new Int32Array(data.buffer); SDL2.data8 = new Uint8Array(data.buffer); } var data32 = SDL2.data32; num = data32.length; data32.set(HEAP32.subarray(src, src + num)); var data8 = SDL2.data8; var i = 3; var j = i + 4*num; if (num % 8 == 0) { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; data8[i] = 0xff; i = i + 4 | 0; } } else { while (i < j) { data8[i] = 0xff; i = i + 4 | 0; } } } SDL2.ctx.putImageData(SDL2.image, 0, 0); return 0; },
 function($0, $1, $2) { var w = $0; var h = $1; var pixels = $2; var canvas = document.createElement("canvas"); canvas.width = w; canvas.height = h; var ctx = canvas.getContext("2d"); var image = ctx.createImageData(w, h); var data = image.data; var src = pixels >> 2; var dst = 0; var num; if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) { num = data.length; while (dst < num) { var val = HEAP32[src]; data[dst ] = val & 0xff; data[dst+1] = (val >> 8) & 0xff; data[dst+2] = (val >> 16) & 0xff; data[dst+3] = (val >> 24) & 0xff; src++; dst += 4; } } else { var data32 = new Int32Array(data.buffer); num = data32.length; data32.set(HEAP32.subarray(src, src + num)); } ctx.putImageData(image, 0, 0); var url = "url(" + canvas.toDataURL() + "), auto"; var urlBuf = _malloc(url.length + 1); stringToUTF8(url, urlBuf, url.length + 1); return urlBuf; },
 function($0) { if (Module['canvas']) { Module['canvas'].style['cursor'] = Module['Pointer_stringify']($0); } return 0; },
 function() { if (Module['canvas']) { Module['canvas'].style['cursor'] = 'none'; } },
 function() { if (typeof(AudioContext) !== 'undefined') { return 1; } else if (typeof(webkitAudioContext) !== 'undefined') { return 1; } return 0; },
 function() { if ((typeof(navigator.mediaDevices) !== 'undefined') && (typeof(navigator.mediaDevices.getUserMedia) !== 'undefined')) { return 1; } else if (typeof(navigator.webkitGetUserMedia) !== 'undefined') { return 1; } return 0; },
 function($0) { if(typeof(SDL2) === 'undefined') { SDL2 = {}; } if (!$0) { SDL2.audio = {}; } else { SDL2.capture = {}; } if (!SDL2.audioContext) { if (typeof(AudioContext) !== 'undefined') { SDL2.audioContext = new AudioContext(); } else if (typeof(webkitAudioContext) !== 'undefined') { SDL2.audioContext = new webkitAudioContext(); } } return SDL2.audioContext === undefined ? -1 : 0; },
 function() { return SDL2.audioContext.sampleRate; },
 function($0, $1, $2, $3) { var have_microphone = function(stream) { if (SDL2.capture.silenceTimer !== undefined) { clearTimeout(SDL2.capture.silenceTimer); SDL2.capture.silenceTimer = undefined; } SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream); SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1); SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) { if ((SDL2 === undefined) || (SDL2.capture === undefined)) { return; } audioProcessingEvent.outputBuffer.getChannelData(0).fill(0.0); SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer; Runtime.dynCall('vi', $2, [$3]); }; SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode); SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination); SDL2.capture.stream = stream; }; var no_microphone = function(error) { }; SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate); SDL2.capture.silenceBuffer.getChannelData(0).fill(0.0); var silence_callback = function() { SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer; Runtime.dynCall('vi', $2, [$3]); }; SDL2.capture.silenceTimer = setTimeout(silence_callback, ($1 / SDL2.audioContext.sampleRate) * 1000); if ((navigator.mediaDevices !== undefined) && (navigator.mediaDevices.getUserMedia !== undefined)) { navigator.mediaDevices.getUserMedia({ audio: true, video: false }).then(have_microphone).catch(no_microphone); } else if (navigator.webkitGetUserMedia !== undefined) { navigator.webkitGetUserMedia({ audio: true, video: false }, have_microphone, no_microphone); } },
 function($0, $1, $2, $3) { SDL2.audio.scriptProcessorNode = SDL2.audioContext['createScriptProcessor']($1, 0, $0); SDL2.audio.scriptProcessorNode['onaudioprocess'] = function (e) { if ((SDL2 === undefined) || (SDL2.audio === undefined)) { return; } SDL2.audio.currentOutputBuffer = e['outputBuffer']; Runtime.dynCall('vi', $2, [$3]); }; SDL2.audio.scriptProcessorNode['connect'](SDL2.audioContext['destination']); },
 function($0) { if ($0) { if (SDL2.capture.silenceTimer !== undefined) { clearTimeout(SDL2.capture.silenceTimer); } if (SDL2.capture.stream !== undefined) { var tracks = SDL2.capture.stream.getAudioTracks(); for (var i = 0; i < tracks.length; i++) { SDL2.capture.stream.removeTrack(tracks[i]); } SDL2.capture.stream = undefined; } if (SDL2.capture.scriptProcessorNode !== undefined) { SDL2.capture.scriptProcessorNode.onaudioprocess = function(audioProcessingEvent) {}; SDL2.capture.scriptProcessorNode.disconnect(); SDL2.capture.scriptProcessorNode = undefined; } if (SDL2.capture.mediaStreamNode !== undefined) { SDL2.capture.mediaStreamNode.disconnect(); SDL2.capture.mediaStreamNode = undefined; } if (SDL2.capture.silenceBuffer !== undefined) { SDL2.capture.silenceBuffer = undefined } SDL2.capture = undefined; } else { if (SDL2.audio.scriptProcessorNode != undefined) { SDL2.audio.scriptProcessorNode.disconnect(); SDL2.audio.scriptProcessorNode = undefined; } SDL2.audio = undefined; } if ((SDL2.audioContext !== undefined) && (SDL2.audio === undefined) && (SDL2.capture === undefined)) { SDL2.audioContext.close(); SDL2.audioContext = undefined; } },
 function($0, $1) { var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels; if (numChannels == 1) { var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(0); if (channelData.length != $1) { throw 'Web Audio capture buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { setValue($0 + (j * 4), channelData[j], 'float'); } } else { for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c); if (channelData.length != $1) { throw 'Web Audio capture buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { setValue($0 + (((j * numChannels) + c) * 4), channelData[j], 'float'); } } } },
 function($0, $1) { var numChannels = SDL2.audio.currentOutputBuffer['numberOfChannels']; for (var c = 0; c < numChannels; ++c) { var channelData = SDL2.audio.currentOutputBuffer['getChannelData'](c); if (channelData.length != $1) { throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + $1 + ' samples!'; } for (var j = 0; j < $1; ++j) { channelData[j] = HEAPF32[$0 + ((j*numChannels + c) << 2) >> 2]; } } }];

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
  return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 89712;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_Game_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });







var STATIC_BUMP = 89712;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);function _llvm_cttz_i32(x) {
      x = x|0;
      var ret = 0;
      ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
      if ((ret|0) < 8) return ret|0;
      ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
      if ((ret|0) < 8) return (ret + 8)|0;
      ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
      if ((ret|0) < 8) return (ret + 16)|0;
      return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
    }  

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  function _dlerror() {
      // char *dlerror(void);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlerror.html
      if (DLFCN.errorMsg === null) {
        return 0;
      } else {
        if (DLFCN.error) _free(DLFCN.error);
        var msgArr = intArrayFromString(DLFCN.errorMsg);
        DLFCN.error = allocate(msgArr, 'i8', ALLOC_NORMAL);
        DLFCN.errorMsg = null;
        return DLFCN.error;
      }
    }

  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = '_' + symbol;
        if (!lib.module.hasOwnProperty(symbol)) {
          DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                 '" in dynamic lib: ' + lib.name);
          return 0;
        } else {
          var result = lib.module[symbol];
          if (typeof result === 'function') {
            // convert the exported function into a function pointer using our generic
            // JS mechanism.
            return addFunction(result);
          }
          return result;
        }
      }
    }

  
  var EGL={errorCode:12288,defaultDisplayInitialized:false,currentContext:0,currentReadSurface:0,currentDrawSurface:0,stringCache:{},setErrorCode:function (code) {
        EGL.errorCode = code;
      },chooseConfig:function (display, attribList, config, config_size, numConfigs) { 
        if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
          EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
          return 0;
        }
        // TODO: read attribList.
        if ((!config || !config_size) && !numConfigs) {
          EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
          return 0;
        }
        if (numConfigs) {
          HEAP32[((numConfigs)>>2)]=1; // Total number of supported configs: 1.
        }
        if (config && config_size > 0) {
          HEAP32[((config)>>2)]=62002; 
        }
        
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      }};
  
  function _eglWaitClient() {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }function _eglBindAPI(api) {
      if (api == 0x30A0 /* EGL_OPENGL_ES_API */) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } else { // if (api == 0x30A1 /* EGL_OPENVG_API */ || api == 0x30A2 /* EGL_OPENGL_API */) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
    }

  function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) { 
      return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs);
    }

  
  
  var GLUT={initTime:null,idleFunc:null,displayFunc:null,keyboardFunc:null,keyboardUpFunc:null,specialFunc:null,specialUpFunc:null,reshapeFunc:null,motionFunc:null,passiveMotionFunc:null,mouseFunc:null,buttons:0,modifiers:0,initWindowWidth:256,initWindowHeight:256,initDisplayMode:18,windowX:0,windowY:0,windowWidth:0,windowHeight:0,requestedAnimationFrame:false,saveModifiers:function (event) {
        GLUT.modifiers = 0;
        if (event['shiftKey'])
          GLUT.modifiers += 1; /* GLUT_ACTIVE_SHIFT */
        if (event['ctrlKey'])
          GLUT.modifiers += 2; /* GLUT_ACTIVE_CTRL */
        if (event['altKey'])
          GLUT.modifiers += 4; /* GLUT_ACTIVE_ALT */
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
  
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.passiveMotionFunc, lastX, lastY);
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_vii'](GLUT.motionFunc, lastX, lastY);
        }
      },getSpecialKey:function (keycode) {
          var key = null;
          switch (keycode) {
            case 8:  key = 120 /* backspace */; break;
            case 46: key = 111 /* delete */; break;
  
            case 0x70 /*DOM_VK_F1*/: key = 1 /* GLUT_KEY_F1 */; break;
            case 0x71 /*DOM_VK_F2*/: key = 2 /* GLUT_KEY_F2 */; break;
            case 0x72 /*DOM_VK_F3*/: key = 3 /* GLUT_KEY_F3 */; break;
            case 0x73 /*DOM_VK_F4*/: key = 4 /* GLUT_KEY_F4 */; break;
            case 0x74 /*DOM_VK_F5*/: key = 5 /* GLUT_KEY_F5 */; break;
            case 0x75 /*DOM_VK_F6*/: key = 6 /* GLUT_KEY_F6 */; break;
            case 0x76 /*DOM_VK_F7*/: key = 7 /* GLUT_KEY_F7 */; break;
            case 0x77 /*DOM_VK_F8*/: key = 8 /* GLUT_KEY_F8 */; break;
            case 0x78 /*DOM_VK_F9*/: key = 9 /* GLUT_KEY_F9 */; break;
            case 0x79 /*DOM_VK_F10*/: key = 10 /* GLUT_KEY_F10 */; break;
            case 0x7a /*DOM_VK_F11*/: key = 11 /* GLUT_KEY_F11 */; break;
            case 0x7b /*DOM_VK_F12*/: key = 12 /* GLUT_KEY_F12 */; break;
            case 0x25 /*DOM_VK_LEFT*/: key = 100 /* GLUT_KEY_LEFT */; break;
            case 0x26 /*DOM_VK_UP*/: key = 101 /* GLUT_KEY_UP */; break;
            case 0x27 /*DOM_VK_RIGHT*/: key = 102 /* GLUT_KEY_RIGHT */; break;
            case 0x28 /*DOM_VK_DOWN*/: key = 103 /* GLUT_KEY_DOWN */; break;
            case 0x21 /*DOM_VK_PAGE_UP*/: key = 104 /* GLUT_KEY_PAGE_UP */; break;
            case 0x22 /*DOM_VK_PAGE_DOWN*/: key = 105 /* GLUT_KEY_PAGE_DOWN */; break;
            case 0x24 /*DOM_VK_HOME*/: key = 106 /* GLUT_KEY_HOME */; break;
            case 0x23 /*DOM_VK_END*/: key = 107 /* GLUT_KEY_END */; break;
            case 0x2d /*DOM_VK_INSERT*/: key = 108 /* GLUT_KEY_INSERT */; break;
  
            case 16   /*DOM_VK_SHIFT*/:
            case 0x05 /*DOM_VK_LEFT_SHIFT*/:
              key = 112 /* GLUT_KEY_SHIFT_L */;
              break;
            case 0x06 /*DOM_VK_RIGHT_SHIFT*/:
              key = 113 /* GLUT_KEY_SHIFT_R */;
              break;
  
            case 17   /*DOM_VK_CONTROL*/:
            case 0x03 /*DOM_VK_LEFT_CONTROL*/:
              key = 114 /* GLUT_KEY_CONTROL_L */;
              break;
            case 0x04 /*DOM_VK_RIGHT_CONTROL*/:
              key = 115 /* GLUT_KEY_CONTROL_R */;
              break;
  
            case 18   /*DOM_VK_ALT*/:
            case 0x02 /*DOM_VK_LEFT_ALT*/:
              key = 116 /* GLUT_KEY_ALT_L */;
              break;
            case 0x01 /*DOM_VK_RIGHT_ALT*/:
              key = 117 /* GLUT_KEY_ALT_R */;
              break;
          };
          return key;
      },getASCIIKey:function (event) {
        if (event['ctrlKey'] || event['altKey'] || event['metaKey']) return null;
  
        var keycode = event['keyCode'];
  
        /* The exact list is soooo hard to find in a canonical place! */
  
        if (48 <= keycode && keycode <= 57)
          return keycode; // numeric  TODO handle shift?
        if (65 <= keycode && keycode <= 90)
          return event['shiftKey'] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105)
          return keycode - 48; // numpad numbers    
        if (106 <= keycode && keycode <= 111)
          return keycode - 106 + 42; // *,+-./  TODO handle shift?
  
        switch (keycode) {
          case 9:  // tab key
          case 13: // return key
          case 27: // escape
          case 32: // space
          case 61: // equal
            return keycode;
        }
  
        var s = event['shiftKey'];
        switch (keycode) {
          case 186: return s ? 58 : 59; // colon / semi-colon
          case 187: return s ? 43 : 61; // add / equal (these two may be wrong)
          case 188: return s ? 60 : 44; // less-than / comma
          case 189: return s ? 95 : 45; // dash
          case 190: return s ? 62 : 46; // greater-than / period
          case 191: return s ? 63 : 47; // forward slash
          case 219: return s ? 123 : 91; // open bracket
          case 220: return s ? 124 : 47; // back slash
          case 221: return s ? 125 : 93; // close braket
          case 222: return s ? 34 : 39; // single quote
        }
  
        return null;
      },onKeydown:function (event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if( GLUT.specialFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardFunc ) {
              event.preventDefault();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },onKeyup:function (event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
          var key = GLUT.getSpecialKey(event['keyCode']);
          if (key !== null) {
            if(GLUT.specialUpFunc) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.specialUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
          else
          {
            key = GLUT.getASCIIKey(event);
            if( key !== null && GLUT.keyboardUpFunc ) {
              event.preventDefault ();
              GLUT.saveModifiers(event);
              Module['dynCall_viii'](GLUT.keyboardUpFunc, key, Browser.mouseX, Browser.mouseY);
            }
          }
        }
      },touchHandler:function (event) {
        if (event.target != Module['canvas']) {
          return;
        }
  
        var touches = event.changedTouches,
            main = touches[0],
            type = "";
  
        switch(event.type) {
          case "touchstart": type = "mousedown"; break;
          case "touchmove": type = "mousemove"; break;
          case "touchend": type = "mouseup"; break;
          default: return;
        }
  
        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1, 
                                      main.screenX, main.screenY, 
                                      main.clientX, main.clientY, false, 
                                      false, false, false, 0/*main*/, null);
  
        main.target.dispatchEvent(simulatedEvent);
        event.preventDefault();
      },onMouseButtonDown:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons |= (1 << event['button']);
  
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
          try {
            event.target.setCapture();
          } catch (e) {}
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseButtonUp:function (event) {
        Browser.calculateMouseEvent(event);
  
        GLUT.buttons &= ~(1 << event['button']);
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, event['button'], 1/*GLUT_UP*/, Browser.mouseX, Browser.mouseY);
        }
      },onMouseWheel:function (event) {
        Browser.calculateMouseEvent(event);
  
        // cross-browser wheel delta
        var e = window.event || event; // old IE support
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
        var button = 3; // wheel up
        if (delta < 0) {
          button = 4; // wheel down
        }
  
        if (GLUT.mouseFunc) {
          event.preventDefault();
          GLUT.saveModifiers(event);
          Module['dynCall_viiii'](GLUT.mouseFunc, button, 0/*GLUT_DOWN*/, Browser.mouseX, Browser.mouseY);
        }
      },onFullscreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        } else {
          width = GLUT.windowWidth;
          height = GLUT.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLUT.onFullscreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLUT.onFullscreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
        /* Can't call _glutReshapeWindow as that requests cancelling fullscreen. */
        if (GLUT.reshapeFunc) {
          // console.log("GLUT.reshapeFunc (from FS): " + width + ", " + height);
          Module['dynCall_vii'](GLUT.reshapeFunc, width, height);
        }
        _glutPostRedisplay();
      },requestFullscreen:function () {
        Browser.requestFullscreen(/*lockPointer=*/false, /*resieCanvas=*/false);
      },requestFullScreen:function () {
        Module.printErr('GLUT.requestFullScreen() is deprecated. Please call GLUT.requestFullscreen instead.');
        GLUT.requestFullScreen = function() {
          return GLUT.requestFullscreen();
        }
        return GLUT.requestFullscreen();
      },exitFullscreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },cancelFullScreen:function () {
        Module.printErr('GLUT.cancelFullScreen() is deprecated. Please call GLUT.exitFullscreen instead.');
        GLUT.cancelFullScreen = function() {
          return GLUT.exitFullscreen();
        }
        return GLUT.exitFullscreen();
      }};function _glutInitDisplayMode(mode) {
      GLUT.initDisplayMode = mode;
    }
  
  function _glutCreateWindow(name) {
      var contextAttributes = {
        antialias: ((GLUT.initDisplayMode & 0x0080 /*GLUT_MULTISAMPLE*/) != 0),
        depth: ((GLUT.initDisplayMode & 0x0010 /*GLUT_DEPTH*/) != 0),
        stencil: ((GLUT.initDisplayMode & 0x0020 /*GLUT_STENCIL*/) != 0),
        alpha: ((GLUT.initDisplayMode & 0x0008 /*GLUT_ALPHA*/) != 0)
      };
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return Module.ctx ? 1 /* a new GLUT window ID for the created context */ : 0 /* failure */;
    }
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},tempFixedLengthArray:[],packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        // For functions such as glDrawBuffers, glInvalidateFramebuffer and glInvalidateSubFramebuffer that need to pass a short array to the WebGL API,
        // create a set of short fixed-length arrays to avoid having to generate any garbage when calling those functions.
        for (var i = 0; i < 32; i++) {
          GL.tempFixedLengthArray.push(new Array(i));
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes['majorVersion'] === 'undefined' && typeof webGLContextAttributes['minorVersion'] === 'undefined') {
          webGLContextAttributes['majorVersion'] = 1;
          webGLContextAttributes['minorVersion'] = 0;
        }
  
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes['majorVersion'] == 1 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes['majorVersion'] == 2 && webGLContextAttributes['minorVersion'] == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
  
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context;
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes['majorVersion'],
          GLctx: ctx
        };
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes['enableExtensionsByDefault']) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBKIT_WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_pvrtc",
                                               "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB",
                                               "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod", "EXT_color_buffer_float"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc != null)
          {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};function _eglCreateContext(display, config, hmm, contextAttribs) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      // EGL 1.4 spec says default EGL_CONTEXT_CLIENT_VERSION is GLES1, but this is not supported by Emscripten.
      // So user must pass EGL_CONTEXT_CLIENT_VERSION == 2 to initialize EGL.
      var glesContextVersion = 1;
      for(;;) {
        var param = HEAP32[((contextAttribs)>>2)];
        if (param == 0x3098 /*EGL_CONTEXT_CLIENT_VERSION*/) {
          glesContextVersion = HEAP32[(((contextAttribs)+(4))>>2)];
        } else if (param == 0x3038 /*EGL_NONE*/) {
          break;
        } else {
          /* EGL1.4 specifies only EGL_CONTEXT_CLIENT_VERSION as supported attribute */
          EGL.setErrorCode(0x3004 /*EGL_BAD_ATTRIBUTE*/);
          return 0;
        }
        contextAttribs += 8;
      }
      if (glesContextVersion != 2) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0; /* EGL_NO_CONTEXT */
      }
  
      _glutInitDisplayMode(0xB2 /* GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH | GLUT_MULTISAMPLE | GLUT_STENCIL */);
      EGL.windowID = _glutCreateWindow();
      if (EGL.windowID != 0) {
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        // Note: This function only creates a context, but it shall not make it active.
        return 62004; // Magic ID for Emscripten EGLContext
      } else {
        EGL.setErrorCode(0x3009 /* EGL_BAD_MATCH */); // By the EGL 1.4 spec, an implementation that does not support GLES2 (WebGL in this case), this error code is set.
        return 0; /* EGL_NO_CONTEXT */
      }
    }

  function _eglCreateWindowSurface(display, config, win, attrib_list) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      // TODO: Examine attrib_list! Parameters that can be present there are:
      // - EGL_RENDER_BUFFER (must be EGL_BACK_BUFFER)
      // - EGL_VG_COLORSPACE (can't be set)
      // - EGL_VG_ALPHA_FORMAT (can't be set)
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 62006; /* Magic ID for Emscripten 'default surface' */
    }

  
  function _glutDestroyWindow(name) {
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      return 1;
    }function _eglDestroyContext(display, context) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
  
      if (context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  function _eglDestroySurface(display, surface) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0; 
      }
      if (surface != 62006 /* Magic ID for the only EGLSurface supported by Emscripten */) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 1;
      }
      if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0;
      }
      if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1; /* Magic ID for Emscripten 'default surface' */
    }

  function _eglGetConfigAttrib(display, config, attribute, value) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (config != 62002 /* Magic ID for the only EGLConfig supported by Emscripten */) {
        EGL.setErrorCode(0x3005 /* EGL_BAD_CONFIG */);
        return 0;
      }
      if (!value) {
        EGL.setErrorCode(0x300C /* EGL_BAD_PARAMETER */);
        return 0;
      }
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      switch(attribute) {
      case 0x3020: // EGL_BUFFER_SIZE
        HEAP32[((value)>>2)]=32;
        return 1;
      case 0x3021: // EGL_ALPHA_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3022: // EGL_BLUE_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3023: // EGL_GREEN_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3024: // EGL_RED_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3025: // EGL_DEPTH_SIZE
        HEAP32[((value)>>2)]=24;
        return 1;
      case 0x3026: // EGL_STENCIL_SIZE
        HEAP32[((value)>>2)]=8;
        return 1;
      case 0x3027: // EGL_CONFIG_CAVEAT
        // We can return here one of EGL_NONE (0x3038), EGL_SLOW_CONFIG (0x3050) or EGL_NON_CONFORMANT_CONFIG (0x3051).
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3028: // EGL_CONFIG_ID
        HEAP32[((value)>>2)]=62002;
        return 1;
      case 0x3029: // EGL_LEVEL
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302A: // EGL_MAX_PBUFFER_HEIGHT
        HEAP32[((value)>>2)]=4096;
        return 1;
      case 0x302B: // EGL_MAX_PBUFFER_PIXELS
        HEAP32[((value)>>2)]=16777216;
        return 1;
      case 0x302C: // EGL_MAX_PBUFFER_WIDTH
        HEAP32[((value)>>2)]=4096;
        return 1;
      case 0x302D: // EGL_NATIVE_RENDERABLE
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302E: // EGL_NATIVE_VISUAL_ID
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x302F: // EGL_NATIVE_VISUAL_TYPE
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3031: // EGL_SAMPLES
        HEAP32[((value)>>2)]=4;
        return 1;
      case 0x3032: // EGL_SAMPLE_BUFFERS
        HEAP32[((value)>>2)]=1;
        return 1;
      case 0x3033: // EGL_SURFACE_TYPE
        HEAP32[((value)>>2)]=0x0004;
        return 1;
      case 0x3034: // EGL_TRANSPARENT_TYPE
        // If this returns EGL_TRANSPARENT_RGB (0x3052), transparency is used through color-keying. No such thing applies to Emscripten canvas.
        HEAP32[((value)>>2)]=0x3038;
        return 1;
      case 0x3035: // EGL_TRANSPARENT_BLUE_VALUE
      case 0x3036: // EGL_TRANSPARENT_GREEN_VALUE
      case 0x3037: // EGL_TRANSPARENT_RED_VALUE
        // "If EGL_TRANSPARENT_TYPE is EGL_NONE, then the values for EGL_TRANSPARENT_RED_VALUE, EGL_TRANSPARENT_GREEN_VALUE, and EGL_TRANSPARENT_BLUE_VALUE are undefined."
        HEAP32[((value)>>2)]=-1;
        return 1;
      case 0x3039: // EGL_BIND_TO_TEXTURE_RGB
      case 0x303A: // EGL_BIND_TO_TEXTURE_RGBA
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x303B: // EGL_MIN_SWAP_INTERVAL
      case 0x303C: // EGL_MAX_SWAP_INTERVAL
        HEAP32[((value)>>2)]=1;
        return 1;
      case 0x303D: // EGL_LUMINANCE_SIZE
      case 0x303E: // EGL_ALPHA_MASK_SIZE
        HEAP32[((value)>>2)]=0;
        return 1;
      case 0x303F: // EGL_COLOR_BUFFER_TYPE
        // EGL has two types of buffers: EGL_RGB_BUFFER and EGL_LUMINANCE_BUFFER.
        HEAP32[((value)>>2)]=0x308E;
        return 1;
      case 0x3040: // EGL_RENDERABLE_TYPE
        // A bit combination of EGL_OPENGL_ES_BIT,EGL_OPENVG_BIT,EGL_OPENGL_ES2_BIT and EGL_OPENGL_BIT.
        HEAP32[((value)>>2)]=0x0004;
        return 1;
      case 0x3042: // EGL_CONFORMANT
        // "EGL_CONFORMANT is a mask indicating if a client API context created with respect to the corresponding EGLConfig will pass the required conformance tests for that API."
        HEAP32[((value)>>2)]=0;
        return 1;
      default:
        EGL.setErrorCode(0x3004 /* EGL_BAD_ATTRIBUTE */);
        return 0;
      }
    }

  function _eglGetDisplay(nativeDisplayType) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      // Note: As a 'conformant' implementation of EGL, we would prefer to init here only if the user
      //       calls this function with EGL_DEFAULT_DISPLAY. Other display IDs would be preferred to be unsupported
      //       and EGL_NO_DISPLAY returned. Uncomment the following code lines to do this.
      // Instead, an alternative route has been preferred, namely that the Emscripten EGL implementation
      // "emulates" X11, and eglGetDisplay is expected to accept/receive a pointer to an X11 Display object.
      // Therefore, be lax and allow anything to be passed in, and return the magic handle to our default EGLDisplay object.
  
  //    if (nativeDisplayType == 0 /* EGL_DEFAULT_DISPLAY */) {
          return 62000; // Magic ID for Emscripten 'default display'
  //    }
  //    else
  //      return 0; // EGL_NO_DISPLAY
    }

  function _eglGetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _eglInitialize(display, majorVersion, minorVersion) {
      if (display == 62000 /* Magic ID for Emscripten 'default display' */) {
        if (majorVersion) {
          HEAP32[((majorVersion)>>2)]=1; // Advertise EGL Major version: '1'
        }
        if (minorVersion) {
          HEAP32[((minorVersion)>>2)]=4; // Advertise EGL Minor version: '4'
        }
        EGL.defaultDisplayInitialized = true;
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1;
      } 
      else {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
    }

  function _eglMakeCurrent(display, draw, read, context) { 
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0 /* EGL_FALSE */;
      }
      //\todo An EGL_NOT_INITIALIZED error is generated if EGL is not initialized for dpy. 
      if (context != 0 && context != 62004 /* Magic ID for Emscripten EGLContext */) {
        EGL.setErrorCode(0x3006 /* EGL_BAD_CONTEXT */);
        return 0;
      }
      if ((read != 0 && read != 62006) || (draw != 0 && draw != 62006 /* Magic ID for Emscripten 'default surface' */)) {
        EGL.setErrorCode(0x300D /* EGL_BAD_SURFACE */);
        return 0;
      }
      EGL.currentContext = context;
      EGL.currentDrawSurface = draw;
      EGL.currentReadSurface = read;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1 /* EGL_TRUE */;
    }

  function _eglSwapBuffers() {
  
      if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(0x3001 /* EGL_NOT_INITIALIZED */);
      } else if (!Module.ctx) {
        EGL.setErrorCode(0x3002 /* EGL_BAD_ACCESS */);
      } else if (Module.ctx.isContextLost()) {
        EGL.setErrorCode(0x300E /* EGL_CONTEXT_LOST */);
      } else {
        // According to documentation this does an implicit flush.
        // Due to discussion at https://github.com/kripken/emscripten/pull/1871
        // the flush was removed since this _may_ result in slowing code down.
        //_glFlush();
        EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
        return 1 /* EGL_TRUE */;
      }
      return 0 /* EGL_FALSE */;
    }

  function _eglSwapInterval(display, interval) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
  
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  function _eglTerminate(display) {
      if (display != 62000 /* Magic ID for Emscripten 'default display' */) {
        EGL.setErrorCode(0x3008 /* EGL_BAD_DISPLAY */);
        return 0;
      }
      EGL.currentContext = 0;
      EGL.currentReadSurface = 0;
      EGL.currentDrawSurface = 0;
      EGL.defaultDisplayInitialized = false;
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  function _eglWaitGL() {
  return _eglWaitClient.apply(null, arguments)
  }

  function _eglWaitNative(nativeEngineId) {
      EGL.setErrorCode(0x3000 /* EGL_SUCCESS */);
      return 1;
    }

  var _emscripten_asm_const_int=true;

  function _emscripten_async_wget(url, file, onload, onerror) {
      Module['noExitRuntime'] = true;
  
      var _url = Pointer_stringify(url);
      var _file = Pointer_stringify(file);
      _file = PATH.resolve(FS.cwd(), _file);
      function doCallback(callback) {
        if (callback) {
          var stack = stackSave();
          Module['dynCall_vi'](callback, allocate(intArrayFromString(_file), 'i8', ALLOC_STACK));
          stackRestore(stack);
        }
      }
      var destinationDirectory = PATH.dirname(_file);
      FS.createPreloadedFile(
        destinationDirectory,
        PATH.basename(_file),
        _url, true, true,
        function() {
          doCallback(onload);
        },
        function() {
          doCallback(onerror);
        },
        false, // dontCreateFile
        false, // canOwn
        function() { // preFinish
          // if a file exists there, we overwrite it
          try {
            FS.unlink(_file);
          } catch (e) {}
          // if the destination directory does not yet exist, create it
          FS.mkdirTree(destinationDirectory);
        }
      );
    }

  
  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,lastGamepadState:null,lastGamepadStateFrame:null,numGamepadsConnected:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,staticInit:function () {
        if (typeof window !== 'undefined') {
          window.addEventListener("gamepadconnected", function() { ++JSEvents.numGamepadsConnected; });
          window.addEventListener("gamepaddisconnected", function() { --JSEvents.numGamepadsConnected; });
          
          // Chromium does not fire the gamepadconnected event on reload, so we need to get the number of gamepads here as a workaround.
          // See https://bugs.chromium.org/p/chromium/issues/detail?id=502824
          var firstState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null);
          if (firstState) {
            JSEvents.numGamepadsConnected = firstState.length;
          }
        }
      },registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
          stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
          stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/kripken/emscripten/pull/4997
        // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
        if (e.type !== 'wheel' && e.type !== 'mousewheel') {
          JSEvents.previousScreenX = e.screenX;
          JSEvents.previousScreenY = e.screenY;
        }
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
          stringToUTF8(id, JSEvents.focusEvent + 128, 128);
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceMotionEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Module['dynCall_iiii'](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerPointerlockErrorEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = document; // Pointer lock events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64);
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Module['dynCall_iiii'](callbackfunc, eventTypeId, 0, userData);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};var __currentFullscreenStrategy={};function _emscripten_exit_fullscreen() {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestFullscreen);
  
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.msExitFullscreen) {
        document.msExitFullscreen();
      } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen();
      } else {
        return -1;
      }
  
      if (__currentFullscreenStrategy.canvasResizedCallback) {
        Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
      }
  
      return 0;
    }

  function _emscripten_exit_pointerlock() {
      // Make sure no queued up calls will fire after this.
      JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
  
      if (document.exitPointerLock) {
        document.exitPointerLock();
      } else if (document.msExitPointerLock) {
        document.msExitPointerLock();
      } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock();
      } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock();
      } else {
        return -1;
      }
      return 0;
    }

  function _emscripten_get_device_pixel_ratio() {
      return window.devicePixelRatio || 1.0;
    }

  function _emscripten_get_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  
  function __emscripten_sample_gamepad_data() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return;
  
      // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
      if (Browser.mainLoop.currentFrameNumber !== JSEvents.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
        JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null);
        JSEvents.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
      }
    }function _emscripten_get_gamepad_status(index, gamepadState) {
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      JSEvents.fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  function _emscripten_get_num_gamepads() {
      // Polling gamepads generates garbage, so don't do it when we know there are no gamepads connected.
      if (!JSEvents.numGamepadsConnected) return 0;
  
      __emscripten_sample_gamepad_data();
      if (!JSEvents.lastGamepadState) return -1;
      return JSEvents.lastGamepadState.length;
    }

  function _emscripten_get_pointerlock_status(pointerlockStatus) {
      if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
      if (!document.body || (!document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock)) {
        return -1;
      }
      return 0;
    }

  function _emscripten_get_preloaded_image_data(path, w, h) {
      if (typeof path === "number") {
        path = Pointer_stringify(path);
      }
  
      path = PATH.resolve(path);
  
      var canvas = Module["preloadedImages"][path];
      if (canvas) {
        var ctx = canvas.getContext("2d");
        var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var buf = _malloc(canvas.width * canvas.height * 4);
  
        HEAPU8.set(image.data, buf);
  
        HEAP32[((w)>>2)]=canvas.width;
        HEAP32[((h)>>2)]=canvas.height;
        return buf;
      }
  
      return 0;
    }

  function _emscripten_get_preloaded_image_data_from_FILE(file, w, h) {
      var fd = Module['_fileno'](file);
      var stream = FS.getStream(fd);
      if (stream) {
        return _emscripten_get_preloaded_image_data(stream.path, w, h);
      }
  
      return 0;
    }

  function _emscripten_glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _emscripten_glBlendEquation(x0) { GLctx['blendEquation'](x0) }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _emscripten_glBlendFunc(x0, x1) { GLctx['blendFunc'](x0, x1) }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glBufferData(target, size, data, usage) {
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx['checkFramebufferStatus'](x0) }

  function _emscripten_glClear(x0) { GLctx['clear'](x0) }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _emscripten_glClearDepth(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _emscripten_glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _emscripten_glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx['copyTexSubImage2D'](x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _emscripten_glCullFace(x0) { GLctx['cullFace'](x0) }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _emscripten_glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _emscripten_glDepthRange(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDepthRangef(x0, x1) { GLctx['depthRange'](x0, x1) }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glDisable(x0) { GLctx['disable'](x0) }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glDrawBuffers(n, bufs) {
  
      var bufArray = GL.tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _emscripten_glDrawRangeElements() {
  Module['printErr']('missing function: emscripten_glDrawRangeElements'); abort(-1);
  }

  function _emscripten_glEnable(x0) { GLctx['enable'](x0) }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _emscripten_glFinish() { GLctx['finish']() }

  function _emscripten_glFlush() { GLctx['flush']() }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrontFace(x0) { GLctx['frontFace'](x0) }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for (var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenerateMipmap(x0) { GLctx['generateMipmap'](x0) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, 'shader not bound to local id');
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)]=result;
    }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = allocate(intArrayFromString(glVersion), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i = 0; i < exts.length; ++i) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = allocate(intArrayFromString(glslVersion), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)]=data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i*4))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i*4))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glHint(x0, x1) { GLctx['hint'](x0, x1) }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx['isEnabled'](x0) }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx['isVertexArray'](vao);
    }

  function _emscripten_glLineWidth(x0) { GLctx['lineWidth'](x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray((pixels),(pixels+bytes));
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return null;
      }
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _emscripten_glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _emscripten_glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx['stencilMaskSeparate'](x0, x1) }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
  
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx['texParameterf'](x0, x1, x2) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glUniform1f(location, v0) {
      GLctx.uniform1f(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1fv(location, count, value) {
  
  
      var view;
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _emscripten_glUniform1iv(location, count, value) {
  
  
      GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*4)>>2));
    }

  function _emscripten_glUniform2f(location, v0, v1) {
      GLctx.uniform2f(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2fv(location, count, value) {
  
  
      var view;
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform2i(location, v0, v1) {
      GLctx.uniform2i(GL.uniforms[location], v0, v1);
    }

  function _emscripten_glUniform2iv(location, count, value) {
  
  
      GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*8)>>2));
    }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3fv(location, count, value) {
  
  
      var view;
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(GL.uniforms[location], v0, v1, v2);
    }

  function _emscripten_glUniform3iv(location, count, value) {
  
  
      GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*12)>>2));
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4fv(location, count, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3);
    }

  function _emscripten_glUniform4iv(location, count, value) {
  
  
      GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray((value)>>2,(value+count*16)>>2));
    }

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
  
  
      var view;
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
  
  
      var view;
      if (9*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
  
  
      var view;
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx['vertexAttrib1f'](x0, x1) }

  function _emscripten_glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx['vertexAttrib2f'](x0, x1, x2) }

  function _emscripten_glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx['vertexAttrib3f'](x0, x1, x2, x3) }

  function _emscripten_glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx['vertexAttrib4f'](x0, x1, x2, x3, x4) }

  function _emscripten_glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }

  
  
   
  
   function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  
  function __setLetterbox(element, topBottom, leftRight) {
      if (JSEvents.isInternetExplorer()) {
        // Cannot use padding on IE11, because IE11 computes padding in addition to the size, unlike
        // other browsers, which treat padding to be part of the size.
        // e.g.
        // FF, Chrome: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = (1920 - 2*460) x (1080-2*40) = 1000x1000px, and total element size = 1920x1080px.
        //       IE11: If CSS size = 1920x1080, padding-leftright = 460, padding-topbottomx40, then content size = 1920x1080px and total element size = (1920+2*460) x (1080+2*40)px.
        // IE11  treats margin like Chrome and FF treat padding.
        element.style.marginLeft = element.style.marginRight = leftRight + 'px';
        element.style.marginTop = element.style.marginBottom = topBottom + 'px';
      } else {
        // Cannot use margin to specify letterboxes in FF or Chrome, since those ignore margins in fullscreen mode.
        element.style.paddingLeft = element.style.paddingRight = leftRight + 'px';
        element.style.paddingTop = element.style.paddingBottom = topBottom + 'px';
      }
    }function _emscripten_do_request_fullscreen(target, strategy) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!JSEvents.fullscreenEnabled()) return -3;
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
  
      if (!target.requestFullscreen && !target.msRequestFullscreen && !target.mozRequestFullScreen && !target.mozRequestFullscreen && !target.webkitRequestFullscreen) {
        return -3;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (strategy.deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestFullscreen, 1 /* priority over pointer lock */, [target, strategy]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestFullscreen(target, strategy);
    }
  
  function __registerRestoreOldStyle(canvas) {
      var oldWidth = canvas.width;
      var oldHeight = canvas.height;
      var oldCssWidth = canvas.style.width;
      var oldCssHeight = canvas.style.height;
      var oldBackgroundColor = canvas.style.backgroundColor; // Chrome reads color from here.
      var oldDocumentBackgroundColor = document.body.style.backgroundColor; // IE11 reads color from here.
      // Firefox always has black background color.
      var oldPaddingLeft = canvas.style.paddingLeft; // Chrome, FF, Safari
      var oldPaddingRight = canvas.style.paddingRight;
      var oldPaddingTop = canvas.style.paddingTop;
      var oldPaddingBottom = canvas.style.paddingBottom;
      var oldMarginLeft = canvas.style.marginLeft; // IE11
      var oldMarginRight = canvas.style.marginRight;
      var oldMarginTop = canvas.style.marginTop;
      var oldMarginBottom = canvas.style.marginBottom;
      var oldDocumentBodyMargin = document.body.style.margin;
      var oldDocumentOverflow = document.documentElement.style.overflow; // Chrome, Firefox
      var oldDocumentScroll = document.body.scroll; // IE
      var oldImageRendering = canvas.style.imageRendering;
  
      function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        if (!fullscreenElement) {
          document.removeEventListener('fullscreenchange', restoreOldStyle);
          document.removeEventListener('mozfullscreenchange', restoreOldStyle);
          document.removeEventListener('webkitfullscreenchange', restoreOldStyle);
          document.removeEventListener('MSFullscreenChange', restoreOldStyle);
  
          canvas.width = oldWidth;
          canvas.height = oldHeight;
          canvas.style.width = oldCssWidth;
          canvas.style.height = oldCssHeight;
          canvas.style.backgroundColor = oldBackgroundColor; // Chrome
          // IE11 hack: assigning 'undefined' or an empty string to document.body.style.backgroundColor has no effect, so first assign back the default color
          // before setting the undefined value. Setting undefined value is also important, or otherwise we would later treat that as something that the user
          // had explicitly set so subsequent fullscreen transitions would not set background color properly.
          if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = 'white';
          document.body.style.backgroundColor = oldDocumentBackgroundColor; // IE11
          canvas.style.paddingLeft = oldPaddingLeft; // Chrome, FF, Safari
          canvas.style.paddingRight = oldPaddingRight;
          canvas.style.paddingTop = oldPaddingTop;
          canvas.style.paddingBottom = oldPaddingBottom;
          canvas.style.marginLeft = oldMarginLeft; // IE11
          canvas.style.marginRight = oldMarginRight;
          canvas.style.marginTop = oldMarginTop;
          canvas.style.marginBottom = oldMarginBottom;
          document.body.style.margin = oldDocumentBodyMargin;
          document.documentElement.style.overflow = oldDocumentOverflow; // Chrome, Firefox
          document.body.scroll = oldDocumentScroll; // IE
          canvas.style.imageRendering = oldImageRendering;
          if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
  
          if (__currentFullscreenStrategy.canvasResizedCallback) {
            Module['dynCall_iiii'](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData);
          }
        }
      }
      document.addEventListener('fullscreenchange', restoreOldStyle);
      document.addEventListener('mozfullscreenchange', restoreOldStyle);
      document.addEventListener('webkitfullscreenchange', restoreOldStyle);
      document.addEventListener('MSFullscreenChange', restoreOldStyle);
      return restoreOldStyle;
    }function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
      var strategy = {};
      strategy.scaleMode = HEAP32[((fullscreenStrategy)>>2)];
      strategy.canvasResolutionScaleMode = HEAP32[(((fullscreenStrategy)+(4))>>2)];
      strategy.filteringMode = HEAP32[(((fullscreenStrategy)+(8))>>2)];
      strategy.deferUntilInEventHandler = deferUntilInEventHandler;
      strategy.canvasResizedCallback = HEAP32[(((fullscreenStrategy)+(12))>>2)];
      strategy.canvasResizedCallbackUserData = HEAP32[(((fullscreenStrategy)+(16))>>2)];
      __currentFullscreenStrategy = strategy;
  
      return _emscripten_do_request_fullscreen(target, strategy);
    }

  function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
      if (!target) target = '#canvas';
      target = JSEvents.findEventTarget(target);
      if (!target) return -4;
      if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1;
      }
  
      var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
  
      // Queue this function call if we're not currently in an event handler and the user saw it appropriate to do so.
      if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
          JSEvents.deferCall(JSEvents.requestPointerLock, 2 /* priority below fullscreen */, [target]);
          return 1;
        } else {
          return -2;
        }
      }
  
      return JSEvents.requestPointerLock(target);
    }

  function _emscripten_set_blur_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur");
      return 0;
    }

  function _emscripten_set_canvas_size(width, height) {
      Browser.setCanvasSize(width, height);
    }

  function _emscripten_set_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      target.style.setProperty("width", width + "px");
      target.style.setProperty("height", height + "px");
  
      return 0;
    }

  function _emscripten_set_focus_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus");
      return 0;
    }

  function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
      if (typeof JSEvents.fullscreenEnabled() === 'undefined') return -1;
      if (!target) target = document;
      else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4;
      }
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
      JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
      return 0;
    }

  function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
      return 0;
   }

  function _emscripten_set_keydown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown");
      return 0;
    }

  function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
      return 0;
    }

  function _emscripten_set_keyup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup");
      return 0;
    }


  function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
      return 0;
    }

  function _emscripten_set_mouseenter_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter");
      return 0;
    }

  function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
      return 0;
    }

  function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
      return 0;
    }

  function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
      return 0;
    }

  function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
      return 0;
    }

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _emscripten_set_visibilitychange_callback(userData, useCapture, callbackfunc) {
      JSEvents.registerVisibilityChangeEventCallback(document, userData, useCapture, callbackfunc, 21, "visibilitychange");
      return 0;
    }

  function _emscripten_set_wheel_callback(target, userData, useCapture, callbackfunc) {
      target = JSEvents.findEventTarget(target);
      if (typeof target.onwheel !== 'undefined') {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel");
        return 0;
      } else if (typeof target.onmousewheel !== 'undefined') {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel");
        return 0;
      } else {
        return -1;
      }
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _glClear(x0) { GLctx['clear'](x0) }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_ctlz_i32=true;

  var _llvm_fabs_f64=Math_abs;

  var _llvm_floor_f64=Math_floor;

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  var _llvm_pow_f64=Math_pow;


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }


   

  function _sigaction(signum, act, oldact) {
      //int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
      Module.printErr('Calling stub instead of sigaction()');
      return 0;
    }

  
  var __sigalrm_handler=0;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }


Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var GLctx; GL.init();
JSEvents.staticInit();;
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiidii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vd(x) { Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vdddddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vf(x) { Module["printErr"]("Invalid function pointer called with signature 'vf'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vff(x) { Module["printErr"]("Invalid function pointer called with signature 'vff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vffff(x) { Module["printErr"]("Invalid function pointer called with signature 'vffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vfi(x) { Module["printErr"]("Invalid function pointer called with signature 'vfi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vif(x) { Module["printErr"]("Invalid function pointer called with signature 'vif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viff(x) { Module["printErr"]("Invalid function pointer called with signature 'viff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vifff(x) { Module["printErr"]("Invalid function pointer called with signature 'vifff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viffff(x) { Module["printErr"]("Invalid function pointer called with signature 'viffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viif(x) { Module["printErr"]("Invalid function pointer called with signature 'viif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

Module['wasmTableSize'] = 1502;

Module['wasmMaxTableSize'] = 1502;

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiidii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiidii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vf(index,a1) {
  try {
    Module["dynCall_vf"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vff(index,a1,a2) {
  try {
    Module["dynCall_vff"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vffff(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vffff"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vfi(index,a1,a2) {
  try {
    Module["dynCall_vfi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vif(index,a1,a2) {
  try {
    Module["dynCall_vif"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viff(index,a1,a2,a3) {
  try {
    Module["dynCall_viff"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vifff(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vifff"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viffff(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viffff"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viif(index,a1,a2,a3) {
  try {
    Module["dynCall_viif"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    Module["dynCall_viiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiidii": nullFunc_iiiiidii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiiiiiii": nullFunc_iiiiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vd": nullFunc_vd, "nullFunc_vdd": nullFunc_vdd, "nullFunc_vdddddd": nullFunc_vdddddd, "nullFunc_vf": nullFunc_vf, "nullFunc_vff": nullFunc_vff, "nullFunc_vffff": nullFunc_vffff, "nullFunc_vfi": nullFunc_vfi, "nullFunc_vi": nullFunc_vi, "nullFunc_vif": nullFunc_vif, "nullFunc_viff": nullFunc_viff, "nullFunc_vifff": nullFunc_vifff, "nullFunc_viffff": nullFunc_viffff, "nullFunc_vii": nullFunc_vii, "nullFunc_viif": nullFunc_viif, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiiii": nullFunc_viiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiidii": invoke_iiiiidii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_v": invoke_v, "invoke_vd": invoke_vd, "invoke_vdd": invoke_vdd, "invoke_vdddddd": invoke_vdddddd, "invoke_vf": invoke_vf, "invoke_vff": invoke_vff, "invoke_vffff": invoke_vffff, "invoke_vfi": invoke_vfi, "invoke_vi": invoke_vi, "invoke_vif": invoke_vif, "invoke_viff": invoke_viff, "invoke_vifff": invoke_vifff, "invoke_viffff": invoke_viffff, "invoke_vii": invoke_vii, "invoke_viif": invoke_viif, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiiii": invoke_viiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__emscripten_sample_gamepad_data": __emscripten_sample_gamepad_data, "__isLeapYear": __isLeapYear, "__registerRestoreOldStyle": __registerRestoreOldStyle, "__setLetterbox": __setLetterbox, "_abort": _abort, "_clock_gettime": _clock_gettime, "_dlclose": _dlclose, "_dlerror": _dlerror, "_dlsym": _dlsym, "_eglBindAPI": _eglBindAPI, "_eglChooseConfig": _eglChooseConfig, "_eglCreateContext": _eglCreateContext, "_eglCreateWindowSurface": _eglCreateWindowSurface, "_eglDestroyContext": _eglDestroyContext, "_eglDestroySurface": _eglDestroySurface, "_eglGetConfigAttrib": _eglGetConfigAttrib, "_eglGetDisplay": _eglGetDisplay, "_eglGetProcAddress": _eglGetProcAddress, "_eglInitialize": _eglInitialize, "_eglMakeCurrent": _eglMakeCurrent, "_eglSwapBuffers": _eglSwapBuffers, "_eglSwapInterval": _eglSwapInterval, "_eglTerminate": _eglTerminate, "_eglWaitClient": _eglWaitClient, "_eglWaitGL": _eglWaitGL, "_eglWaitNative": _eglWaitNative, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii, "_emscripten_async_wget": _emscripten_async_wget, "_emscripten_do_request_fullscreen": _emscripten_do_request_fullscreen, "_emscripten_exit_fullscreen": _emscripten_exit_fullscreen, "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock, "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads, "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status, "_emscripten_get_preloaded_image_data": _emscripten_get_preloaded_image_data, "_emscripten_get_preloaded_image_data_from_FILE": _emscripten_get_preloaded_image_data_from_FILE, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glClear": _emscripten_glClear, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glCullFace": _emscripten_glCullFace, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glFrustum": _emscripten_glFrustum, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_emscripten_glHint": _emscripten_glHint, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_emscripten_glIsVertexArray": _emscripten_glIsVertexArray, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy, "_emscripten_request_pointerlock": _emscripten_request_pointerlock, "_emscripten_set_blur_callback": _emscripten_set_blur_callback, "_emscripten_set_canvas_size": _emscripten_set_canvas_size, "_emscripten_set_element_css_size": _emscripten_set_element_css_size, "_emscripten_set_focus_callback": _emscripten_set_focus_callback, "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback, "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback, "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback, "_emscripten_set_keydown_callback": _emscripten_set_keydown_callback, "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback, "_emscripten_set_keyup_callback": _emscripten_set_keyup_callback, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback, "_emscripten_set_mouseenter_callback": _emscripten_set_mouseenter_callback, "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback, "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback, "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback, "_emscripten_set_resize_callback": _emscripten_set_resize_callback, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_emscripten_set_visibilitychange_callback": _emscripten_set_visibilitychange_callback, "_emscripten_set_wheel_callback": _emscripten_set_wheel_callback, "_getenv": _getenv, "_gettimeofday": _gettimeofday, "_glClear": _glClear, "_glutCreateWindow": _glutCreateWindow, "_glutDestroyWindow": _glutDestroyWindow, "_glutInitDisplayMode": _glutInitDisplayMode, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_cttz_i32": _llvm_cttz_i32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_pow_f64": _llvm_pow_f64, "_longjmp": _longjmp, "_nanosleep": _nanosleep, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_sigaction": _sigaction, "_signal": _signal, "_strftime": _strftime, "_strftime_l": _strftime_l, "_usleep": _usleep, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiid=env.nullFunc_iiiiid;
  var nullFunc_iiiiidii=env.nullFunc_iiiiidii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiid=env.nullFunc_iiiiiid;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiiiiiiii=env.nullFunc_iiiiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vd=env.nullFunc_vd;
  var nullFunc_vdd=env.nullFunc_vdd;
  var nullFunc_vdddddd=env.nullFunc_vdddddd;
  var nullFunc_vf=env.nullFunc_vf;
  var nullFunc_vff=env.nullFunc_vff;
  var nullFunc_vffff=env.nullFunc_vffff;
  var nullFunc_vfi=env.nullFunc_vfi;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vif=env.nullFunc_vif;
  var nullFunc_viff=env.nullFunc_viff;
  var nullFunc_vifff=env.nullFunc_vifff;
  var nullFunc_viffff=env.nullFunc_viffff;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viif=env.nullFunc_viif;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiiii=env.nullFunc_viiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_iiiiidii=env.invoke_iiiiidii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vd=env.invoke_vd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vf=env.invoke_vf;
  var invoke_vff=env.invoke_vff;
  var invoke_vffff=env.invoke_vffff;
  var invoke_vfi=env.invoke_vfi;
  var invoke_vi=env.invoke_vi;
  var invoke_vif=env.invoke_vif;
  var invoke_viff=env.invoke_viff;
  var invoke_vifff=env.invoke_vifff;
  var invoke_viffff=env.invoke_viffff;
  var invoke_vii=env.invoke_vii;
  var invoke_viif=env.invoke_viif;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiiii=env.invoke_viiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___assert_fail=env.___assert_fail;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __emscripten_sample_gamepad_data=env.__emscripten_sample_gamepad_data;
  var __isLeapYear=env.__isLeapYear;
  var __registerRestoreOldStyle=env.__registerRestoreOldStyle;
  var __setLetterbox=env.__setLetterbox;
  var _abort=env._abort;
  var _clock_gettime=env._clock_gettime;
  var _dlclose=env._dlclose;
  var _dlerror=env._dlerror;
  var _dlsym=env._dlsym;
  var _eglBindAPI=env._eglBindAPI;
  var _eglChooseConfig=env._eglChooseConfig;
  var _eglCreateContext=env._eglCreateContext;
  var _eglCreateWindowSurface=env._eglCreateWindowSurface;
  var _eglDestroyContext=env._eglDestroyContext;
  var _eglDestroySurface=env._eglDestroySurface;
  var _eglGetConfigAttrib=env._eglGetConfigAttrib;
  var _eglGetDisplay=env._eglGetDisplay;
  var _eglGetProcAddress=env._eglGetProcAddress;
  var _eglInitialize=env._eglInitialize;
  var _eglMakeCurrent=env._eglMakeCurrent;
  var _eglSwapBuffers=env._eglSwapBuffers;
  var _eglSwapInterval=env._eglSwapInterval;
  var _eglTerminate=env._eglTerminate;
  var _eglWaitClient=env._eglWaitClient;
  var _eglWaitGL=env._eglWaitGL;
  var _eglWaitNative=env._eglWaitNative;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiii=env._emscripten_asm_const_iiiii;
  var _emscripten_async_wget=env._emscripten_async_wget;
  var _emscripten_do_request_fullscreen=env._emscripten_do_request_fullscreen;
  var _emscripten_exit_fullscreen=env._emscripten_exit_fullscreen;
  var _emscripten_exit_pointerlock=env._emscripten_exit_pointerlock;
  var _emscripten_get_device_pixel_ratio=env._emscripten_get_device_pixel_ratio;
  var _emscripten_get_element_css_size=env._emscripten_get_element_css_size;
  var _emscripten_get_gamepad_status=env._emscripten_get_gamepad_status;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_get_num_gamepads=env._emscripten_get_num_gamepads;
  var _emscripten_get_pointerlock_status=env._emscripten_get_pointerlock_status;
  var _emscripten_get_preloaded_image_data=env._emscripten_get_preloaded_image_data;
  var _emscripten_get_preloaded_image_data_from_FILE=env._emscripten_get_preloaded_image_data_from_FILE;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glClear=env._emscripten_glClear;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _emscripten_glHint=env._emscripten_glHint;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _emscripten_glIsVertexArray=env._emscripten_glIsVertexArray;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_request_fullscreen_strategy=env._emscripten_request_fullscreen_strategy;
  var _emscripten_request_pointerlock=env._emscripten_request_pointerlock;
  var _emscripten_set_blur_callback=env._emscripten_set_blur_callback;
  var _emscripten_set_canvas_size=env._emscripten_set_canvas_size;
  var _emscripten_set_element_css_size=env._emscripten_set_element_css_size;
  var _emscripten_set_focus_callback=env._emscripten_set_focus_callback;
  var _emscripten_set_fullscreenchange_callback=env._emscripten_set_fullscreenchange_callback;
  var _emscripten_set_gamepadconnected_callback=env._emscripten_set_gamepadconnected_callback;
  var _emscripten_set_gamepaddisconnected_callback=env._emscripten_set_gamepaddisconnected_callback;
  var _emscripten_set_keydown_callback=env._emscripten_set_keydown_callback;
  var _emscripten_set_keypress_callback=env._emscripten_set_keypress_callback;
  var _emscripten_set_keyup_callback=env._emscripten_set_keyup_callback;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_set_mousedown_callback=env._emscripten_set_mousedown_callback;
  var _emscripten_set_mouseenter_callback=env._emscripten_set_mouseenter_callback;
  var _emscripten_set_mouseleave_callback=env._emscripten_set_mouseleave_callback;
  var _emscripten_set_mousemove_callback=env._emscripten_set_mousemove_callback;
  var _emscripten_set_mouseup_callback=env._emscripten_set_mouseup_callback;
  var _emscripten_set_resize_callback=env._emscripten_set_resize_callback;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var _emscripten_set_visibilitychange_callback=env._emscripten_set_visibilitychange_callback;
  var _emscripten_set_wheel_callback=env._emscripten_set_wheel_callback;
  var _getenv=env._getenv;
  var _gettimeofday=env._gettimeofday;
  var _glClear=env._glClear;
  var _glutCreateWindow=env._glutCreateWindow;
  var _glutDestroyWindow=env._glutDestroyWindow;
  var _glutInitDisplayMode=env._glutInitDisplayMode;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_cttz_i32=env._llvm_cttz_i32;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _longjmp=env._longjmp;
  var _nanosleep=env._nanosleep;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _sigaction=env._sigaction;
  var _signal=env._signal;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var _usleep=env._usleep;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var tempFloat = Math_fround(0);
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS
function _png_do_read_transformations(i32, i33) {
 i32 = i32 | 0;
 i33 = i33 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i34 = 0;
 i27 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i28 = i34;
 i31 = i32 + 384 | 0;
 i3 = HEAP32[i31 >> 2] | 0;
 if (!i3) _png_error(i32, 62671);
 i29 = i32 + 212 | 0;
 if ((HEAP32[i29 >> 2] & 16448 | 0) == 16384) _png_error(i32, 62687);
 i30 = i32 + 216 | 0;
 i4 = HEAP32[i30 >> 2] | 0;
 do if (i4 & 4096 | 0) {
  i15 = i33 + 8 | 0;
  if ((HEAP8[i15 >> 0] | 0) != 3) {
   i3 = i3 + 1 | 0;
   if ((i4 & 33554432 | 0) == 0 | (HEAP16[i32 + 428 >> 1] | 0) == 0) {
    _png_do_expand(i33, i3, 0);
    break;
   } else {
    _png_do_expand(i33, i3, i32 + 532 | 0);
    break;
   }
  }
  i9 = i3 + 1 | 0;
  i12 = HEAP32[i32 + 416 >> 2] | 0;
  i10 = HEAP32[i32 + 528 >> 2] | 0;
  i8 = HEAP16[i32 + 428 >> 1] | 0;
  i11 = i8 & 65535;
  i13 = HEAP32[i33 >> 2] | 0;
  i14 = i33 + 9 | 0;
  i3 = HEAP8[i14 >> 0] | 0;
  if ((i3 & 255) < 8) {
   switch (i3 << 24 >> 24) {
   case 1:
    {
     if (i13 | 0) {
      i3 = 0;
      i4 = i9 + i13 | 0;
      i5 = i9 + ((i13 + -1 | 0) >>> 3) | 0;
      i6 = i13 + 7 & 7 ^ 7;
      while (1) {
       i4 = i4 + -1 | 0;
       HEAP8[i4 >> 0] = (1 << i6 & HEAPU8[i5 >> 0] | 0) != 0 & 1;
       i7 = (i6 | 0) == 7;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i13 | 0)) break; else {
        i5 = i7 ? i5 + -1 | 0 : i5;
        i6 = i7 ? 0 : i6 + 1 | 0;
       }
      }
     }
     break;
    }
   case 2:
    {
     if (i13 | 0) {
      i3 = 0;
      i4 = i9 + i13 | 0;
      i5 = i9 + ((i13 + -1 | 0) >>> 2) | 0;
      i6 = (i13 << 1) + 6 & 6 ^ 6;
      while (1) {
       i4 = i4 + -1 | 0;
       HEAP8[i4 >> 0] = (HEAPU8[i5 >> 0] | 0) >>> i6 & 3;
       i7 = (i6 | 0) == 6;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i13 | 0)) break; else {
        i5 = i7 ? i5 + -1 | 0 : i5;
        i6 = i7 ? 0 : i6 + 2 | 0;
       }
      }
     }
     break;
    }
   case 4:
    {
     if (i13 | 0) {
      i3 = 0;
      i4 = i9 + i13 | 0;
      i5 = i9 + ((i13 + -1 | 0) >>> 1) | 0;
      i6 = i13 << 2 & 4;
      while (1) {
       i4 = i4 + -1 | 0;
       HEAP8[i4 >> 0] = (HEAPU8[i5 >> 0] | 0) >>> i6 & 15;
       i7 = (i6 | 0) == 4;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i13 | 0)) break; else {
        i5 = i7 ? i5 + -1 | 0 : i5;
        i6 = i7 ? 0 : i6 + 4 | 0;
       }
      }
     }
     break;
    }
   default:
    {}
   }
   HEAP8[i14 >> 0] = 8;
   HEAP8[i33 + 11 >> 0] = 8;
   HEAP32[i33 + 4 >> 2] = i13;
  } else if (i3 << 24 >> 24 != 8) break;
  i5 = i9 + i13 + -1 | 0;
  if (!(i8 << 16 >> 16)) {
   i3 = i13 * 3 | 0;
   if (!i13) {
    i6 = 3;
    i4 = 24;
    i5 = 2;
   } else {
    i6 = 0;
    i4 = i9 + i3 | 0;
    while (1) {
     HEAP8[i4 + -1 >> 0] = HEAP8[i12 + ((HEAPU8[i5 >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
     HEAP8[i4 + -2 >> 0] = HEAP8[i12 + ((HEAPU8[i5 >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
     i4 = i4 + -3 | 0;
     HEAP8[i4 >> 0] = HEAP8[i12 + ((HEAPU8[i5 >> 0] | 0) * 3 | 0) >> 0] | 0;
     i6 = i6 + 1 | 0;
     if ((i6 | 0) == (i13 | 0)) {
      i6 = 3;
      i4 = 24;
      i5 = 2;
      break;
     } else i5 = i5 + -1 | 0;
    }
   }
  } else {
   i3 = i13 << 2;
   if (!i13) {
    i6 = 4;
    i4 = 32;
    i5 = 6;
   } else {
    i7 = 0;
    i6 = i9 + i3 | 0;
    while (1) {
     i4 = HEAPU8[i5 >> 0] | 0;
     if (i4 >>> 0 < i11 >>> 0) i4 = HEAP8[i10 + i4 >> 0] | 0; else i4 = -1;
     HEAP8[i6 + -1 >> 0] = i4;
     HEAP8[i6 + -2 >> 0] = HEAP8[i12 + ((HEAPU8[i5 >> 0] | 0) * 3 | 0) + 2 >> 0] | 0;
     HEAP8[i6 + -3 >> 0] = HEAP8[i12 + ((HEAPU8[i5 >> 0] | 0) * 3 | 0) + 1 >> 0] | 0;
     i6 = i6 + -4 | 0;
     HEAP8[i6 >> 0] = HEAP8[i12 + ((HEAPU8[i5 >> 0] | 0) * 3 | 0) >> 0] | 0;
     i7 = i7 + 1 | 0;
     if ((i7 | 0) == (i13 | 0)) {
      i6 = 4;
      i4 = 32;
      i5 = 6;
      break;
     } else i5 = i5 + -1 | 0;
    }
   }
  }
  HEAP8[i14 >> 0] = 8;
  HEAP8[i33 + 11 >> 0] = i4;
  HEAP32[i33 + 4 >> 2] = i3;
  HEAP8[i15 >> 0] = i5;
  HEAP8[i33 + 10 >> 0] = i6;
 } while (0);
 i3 = HEAP32[i30 >> 2] | 0;
 L47 : do if ((i3 & 262272 | 0) == 262144) {
  switch (HEAP8[i33 + 8 >> 0] | 0) {
  case 4:
  case 6:
   break;
  default:
   break L47;
  }
  _png_do_strip_channel(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0, 0);
  i3 = HEAP32[i30 >> 2] | 0;
 } while (0);
 do if (!(i3 & 6291456)) i2 = i3; else {
  i7 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i25 = i33 + 8 | 0;
  i4 = HEAPU8[i25 >> 0] | 0;
  if ((i4 & 3 | 0) == 2) {
   i21 = HEAPU16[i32 + 702 >> 1] | 0;
   i22 = HEAPU16[i32 + 704 >> 1] | 0;
   i23 = 32768 - i21 - i22 | 0;
   i26 = HEAP32[i33 >> 2] | 0;
   i3 = (i4 & 4 | 0) != 0;
   i24 = i33 + 9 | 0;
   L54 : do if ((HEAP8[i24 >> 0] | 0) == 8) {
    i12 = HEAP32[i32 + 500 >> 2] | 0;
    if (i12 | 0) {
     i13 = HEAP32[i32 + 504 >> 2] | 0;
     if (i13 | 0) {
      if (!i26) {
       i4 = 0;
       break;
      }
      i14 = i32 + 492 | 0;
      if (i3) {
       i11 = i7;
       i8 = i7;
       i9 = 0;
       i4 = 0;
       while (1) {
        i3 = HEAP8[i11 >> 0] | 0;
        i5 = HEAP8[i11 + 1 >> 0] | 0;
        i10 = i11 + 3 | 0;
        i6 = HEAP8[i11 + 2 >> 0] | 0;
        i7 = i3 & 255;
        if (i3 << 24 >> 24 == i5 << 24 >> 24 ? i3 << 24 >> 24 == i6 << 24 >> 24 : 0) {
         i5 = HEAP32[i14 >> 2] | 0;
         if (i5) {
          i3 = i5 + i7 | 0;
          i27 = 52;
         }
        } else {
         i4 = i4 | 1;
         i3 = i12 + (((Math_imul(HEAPU8[i13 + i7 >> 0] | 0, i21) | 0) + 16384 + (Math_imul(HEAPU8[i13 + (i5 & 255) >> 0] | 0, i22) | 0) + (Math_imul(i23, HEAPU8[i13 + (i6 & 255) >> 0] | 0) | 0) | 0) >>> 15) | 0;
         i27 = 52;
        }
        if ((i27 | 0) == 52) {
         i27 = 0;
         i3 = HEAP8[i3 >> 0] | 0;
        }
        HEAP8[i8 >> 0] = i3;
        HEAP8[i8 + 1 >> 0] = HEAP8[i10 >> 0] | 0;
        i9 = i9 + 1 | 0;
        if ((i9 | 0) == (i26 | 0)) break L54; else {
         i11 = i11 + 4 | 0;
         i8 = i8 + 2 | 0;
        }
       }
      } else {
       i10 = i7;
       i8 = i7;
       i9 = 0;
       i4 = 0;
       while (1) {
        i3 = HEAP8[i10 >> 0] | 0;
        i5 = HEAP8[i10 + 1 >> 0] | 0;
        i6 = HEAP8[i10 + 2 >> 0] | 0;
        i10 = i10 + 3 | 0;
        i7 = i3 & 255;
        if (i3 << 24 >> 24 == i5 << 24 >> 24 ? i3 << 24 >> 24 == i6 << 24 >> 24 : 0) {
         i5 = HEAP32[i14 >> 2] | 0;
         if (i5) {
          i3 = i5 + i7 | 0;
          i27 = 58;
         }
        } else {
         i4 = i4 | 1;
         i3 = i12 + (((Math_imul(HEAPU8[i13 + i7 >> 0] | 0, i21) | 0) + 16384 + (Math_imul(HEAPU8[i13 + (i5 & 255) >> 0] | 0, i22) | 0) + (Math_imul(i23, HEAPU8[i13 + (i6 & 255) >> 0] | 0) | 0) | 0) >>> 15) | 0;
         i27 = 58;
        }
        if ((i27 | 0) == 58) {
         i27 = 0;
         i3 = HEAP8[i3 >> 0] | 0;
        }
        HEAP8[i8 >> 0] = i3;
        i9 = i9 + 1 | 0;
        if ((i9 | 0) == (i26 | 0)) break L54; else i8 = i8 + 1 | 0;
       }
      }
     }
    }
    if (!i26) i4 = 0; else if (i3) {
     i9 = i7;
     i8 = 0;
     i4 = 0;
     while (1) {
      i3 = HEAP8[i9 >> 0] | 0;
      i5 = HEAP8[i9 + 1 >> 0] | 0;
      i6 = HEAP8[i9 + 2 >> 0] | 0;
      if (!(i3 << 24 >> 24 == i5 << 24 >> 24 ? i3 << 24 >> 24 == i6 << 24 >> 24 : 0)) {
       i4 = i4 | 1;
       i3 = ((Math_imul(i5 & 255, i22) | 0) + (Math_imul(i3 & 255, i21) | 0) + (Math_imul(i23, i6 & 255) | 0) | 0) >>> 15 & 255;
      }
      HEAP8[i7 >> 0] = i3;
      HEAP8[i7 + 1 >> 0] = HEAP8[i9 + 3 >> 0] | 0;
      i8 = i8 + 1 | 0;
      if ((i8 | 0) == (i26 | 0)) break; else {
       i9 = i9 + 4 | 0;
       i7 = i7 + 2 | 0;
      }
     }
    } else {
     i9 = i7;
     i8 = 0;
     i4 = 0;
     while (1) {
      i3 = HEAP8[i9 >> 0] | 0;
      i5 = HEAP8[i9 + 1 >> 0] | 0;
      i6 = HEAP8[i9 + 2 >> 0] | 0;
      if (!(i3 << 24 >> 24 == i5 << 24 >> 24 ? i3 << 24 >> 24 == i6 << 24 >> 24 : 0)) {
       i4 = i4 | 1;
       i3 = ((Math_imul(i5 & 255, i22) | 0) + (Math_imul(i3 & 255, i21) | 0) + (Math_imul(i23, i6 & 255) | 0) | 0) >>> 15 & 255;
      }
      HEAP8[i7 >> 0] = i3;
      i8 = i8 + 1 | 0;
      if ((i8 | 0) == (i26 | 0)) break; else {
       i9 = i9 + 3 | 0;
       i7 = i7 + 1 | 0;
      }
     }
    }
   } else {
    i17 = HEAP32[i32 + 512 >> 2] | 0;
    if (i17 | 0) {
     i18 = HEAP32[i32 + 508 >> 2] | 0;
     if (i18 | 0) {
      if (!i26) {
       i4 = 0;
       break;
      }
      i19 = i32 + 496 | 0;
      i20 = i32 + 484 | 0;
      if (i3) {
       i16 = i7;
       i13 = i7;
       i14 = 0;
       i4 = 0;
       while (1) {
        i3 = HEAP8[i16 >> 0] | 0;
        i5 = HEAP8[i16 + 1 >> 0] | 0;
        i11 = i3 & 255;
        i12 = i5 & 255;
        i6 = i11 << 8 | i12;
        i7 = HEAPU8[i16 + 2 >> 0] | 0;
        i8 = HEAPU8[i16 + 3 >> 0] | 0;
        i15 = i16 + 6 | 0;
        i9 = HEAPU8[i16 + 4 >> 0] | 0;
        i10 = HEAPU8[i16 + 5 >> 0] | 0;
        if ((i6 | 0) == (i7 << 8 | i8 | 0)) if ((i6 | 0) == (i9 << 8 | i10 | 0)) {
         i6 = HEAP32[i19 >> 2] | 0;
         if (i6) {
          i3 = HEAP16[(HEAP32[i6 + (i12 >>> (HEAP32[i20 >> 2] | 0) << 2) >> 2] | 0) + (i11 << 1) >> 1] | 0;
          i5 = i3 & 255;
          i3 = (i3 & 65535) >>> 8 & 255;
         }
        } else i27 = 72; else i27 = 72;
        if ((i27 | 0) == 72) {
         i27 = 0;
         i5 = HEAP32[i20 >> 2] | 0;
         i3 = (Math_imul(HEAPU16[(HEAP32[i17 + (i12 >>> i5 << 2) >> 2] | 0) + (i11 << 1) >> 1] | 0, i21) | 0) + 16384 + (Math_imul(HEAPU16[(HEAP32[i17 + (i8 >>> i5 << 2) >> 2] | 0) + (i7 << 1) >> 1] | 0, i22) | 0) + (Math_imul(i23, HEAPU16[(HEAP32[i17 + (i10 >>> i5 << 2) >> 2] | 0) + (i9 << 1) >> 1] | 0) | 0) | 0;
         i3 = HEAP16[(HEAP32[i18 + ((i3 >>> 15 & 255) >>> i5 << 2) >> 2] | 0) + ((i3 >>> 23 & 255) << 1) >> 1] | 0;
         i5 = i3 & 255;
         i3 = (i3 & 65535) >>> 8 & 255;
         i4 = i4 | 1;
        }
        HEAP8[i13 >> 0] = i3;
        HEAP8[i13 + 1 >> 0] = i5;
        HEAP8[i13 + 2 >> 0] = HEAP8[i15 >> 0] | 0;
        HEAP8[i13 + 3 >> 0] = HEAP8[i16 + 7 >> 0] | 0;
        i14 = i14 + 1 | 0;
        if ((i14 | 0) == (i26 | 0)) break L54; else {
         i16 = i16 + 8 | 0;
         i13 = i13 + 4 | 0;
        }
       }
      } else {
       i15 = i7;
       i13 = i7;
       i14 = 0;
       i4 = 0;
       while (1) {
        i3 = HEAP8[i15 >> 0] | 0;
        i5 = HEAP8[i15 + 1 >> 0] | 0;
        i11 = i3 & 255;
        i12 = i5 & 255;
        i6 = i11 << 8 | i12;
        i7 = HEAPU8[i15 + 2 >> 0] | 0;
        i8 = HEAPU8[i15 + 3 >> 0] | 0;
        i9 = HEAPU8[i15 + 4 >> 0] | 0;
        i10 = HEAPU8[i15 + 5 >> 0] | 0;
        i15 = i15 + 6 | 0;
        if ((i6 | 0) == (i7 << 8 | i8 | 0)) if ((i6 | 0) == (i9 << 8 | i10 | 0)) {
         i6 = HEAP32[i19 >> 2] | 0;
         if (i6) {
          i3 = HEAP16[(HEAP32[i6 + (i12 >>> (HEAP32[i20 >> 2] | 0) << 2) >> 2] | 0) + (i11 << 1) >> 1] | 0;
          i5 = i3 & 255;
          i3 = (i3 & 65535) >>> 8 & 255;
         }
        } else i27 = 80; else i27 = 80;
        if ((i27 | 0) == 80) {
         i27 = 0;
         i5 = HEAP32[i20 >> 2] | 0;
         i3 = (Math_imul(HEAPU16[(HEAP32[i17 + (i12 >>> i5 << 2) >> 2] | 0) + (i11 << 1) >> 1] | 0, i21) | 0) + 16384 + (Math_imul(HEAPU16[(HEAP32[i17 + (i8 >>> i5 << 2) >> 2] | 0) + (i7 << 1) >> 1] | 0, i22) | 0) + (Math_imul(i23, HEAPU16[(HEAP32[i17 + (i10 >>> i5 << 2) >> 2] | 0) + (i9 << 1) >> 1] | 0) | 0) | 0;
         i3 = HEAP16[(HEAP32[i18 + ((i3 >>> 15 & 255) >>> i5 << 2) >> 2] | 0) + ((i3 >>> 23 & 255) << 1) >> 1] | 0;
         i5 = i3 & 255;
         i3 = (i3 & 65535) >>> 8 & 255;
         i4 = i4 | 1;
        }
        HEAP8[i13 >> 0] = i3;
        HEAP8[i13 + 1 >> 0] = i5;
        i14 = i14 + 1 | 0;
        if ((i14 | 0) == (i26 | 0)) break L54; else i13 = i13 + 2 | 0;
       }
      }
     }
    }
    if (!i26) i4 = 0; else if (i3) {
     i5 = 0;
     i6 = i7;
     i3 = i7;
     i4 = 0;
     while (1) {
      i18 = HEAPU8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0];
      i19 = HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0];
      i20 = HEAPU8[i3 + 4 >> 0] << 8 | HEAPU8[i3 + 5 >> 0];
      i4 = i4 | ((i18 | 0) != (i19 | 0) | (i18 | 0) != (i20 | 0)) & 1;
      i20 = (Math_imul(i18, i21) | 0) + 16384 + (Math_imul(i19, i22) | 0) + (Math_imul(i20, i23) | 0) | 0;
      HEAP8[i6 >> 0] = i20 >>> 23;
      HEAP8[i6 + 1 >> 0] = i20 >>> 15;
      HEAP8[i6 + 2 >> 0] = HEAP8[i3 + 6 >> 0] | 0;
      HEAP8[i6 + 3 >> 0] = HEAP8[i3 + 7 >> 0] | 0;
      i5 = i5 + 1 | 0;
      if ((i5 | 0) == (i26 | 0)) break; else {
       i6 = i6 + 4 | 0;
       i3 = i3 + 8 | 0;
      }
     }
    } else {
     i5 = 0;
     i6 = i7;
     i3 = i7;
     i4 = 0;
     while (1) {
      i18 = HEAPU8[i3 >> 0] << 8 | HEAPU8[i3 + 1 >> 0];
      i19 = HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0];
      i20 = HEAPU8[i3 + 4 >> 0] << 8 | HEAPU8[i3 + 5 >> 0];
      i4 = i4 | ((i18 | 0) != (i19 | 0) | (i18 | 0) != (i20 | 0)) & 1;
      i20 = (Math_imul(i18, i21) | 0) + 16384 + (Math_imul(i19, i22) | 0) + (Math_imul(i20, i23) | 0) | 0;
      HEAP8[i6 >> 0] = i20 >>> 23;
      HEAP8[i6 + 1 >> 0] = i20 >>> 15;
      i5 = i5 + 1 | 0;
      if ((i5 | 0) == (i26 | 0)) break; else {
       i6 = i6 + 2 | 0;
       i3 = i3 + 6 | 0;
      }
     }
    }
   } while (0);
   i23 = i33 + 10 | 0;
   i3 = HEAP8[i23 >> 0] | 0;
   HEAP8[i23 >> 0] = (i3 & 255) + 254;
   HEAP8[i25 >> 0] = HEAP8[i25 >> 0] & -3;
   i3 = Math_imul(HEAPU8[i24 >> 0] | 0, i3 + -2 & 255) | 0;
   HEAP8[i33 + 11 >> 0] = i3;
   i3 = i3 & 255;
   if (i3 >>> 0 > 7) i3 = Math_imul(i3 >>> 3, i26) | 0; else i3 = ((Math_imul(i3, i26) | 0) + 7 | 0) >>> 3;
   HEAP32[i33 + 4 >> 2] = i3;
   if (!i4) {
    i2 = HEAP32[i30 >> 2] | 0;
    break;
   }
   HEAP8[i32 + 700 >> 0] = 1;
   i3 = HEAP32[i30 >> 2] | 0;
   if ((i3 & 6291456 | 0) == 4194304) {
    _png_warning(i32, 62705);
    i3 = HEAP32[i30 >> 2] | 0;
   }
   if ((i3 & 6291456 | 0) == 2097152) _png_error(i32, 62705); else i2 = i3;
  } else i2 = i3;
 } while (0);
 if (i2 & 16384) if (!(HEAP32[i32 + 208 >> 2] & 2048)) {
  _png_do_gray_to_rgb(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
  i2 = HEAP32[i30 >> 2] | 0;
 }
 L140 : do if (i2 & 128 | 0) {
  i3 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i14 = HEAP32[i32 + 492 >> 2] | 0;
  i12 = HEAP32[i32 + 500 >> 2] | 0;
  i13 = HEAP32[i32 + 504 >> 2] | 0;
  i22 = HEAP32[i32 + 496 >> 2] | 0;
  i18 = HEAP32[i32 + 508 >> 2] | 0;
  i19 = HEAP32[i32 + 512 >> 2] | 0;
  i23 = HEAP32[i32 + 484 >> 2] | 0;
  i11 = HEAP32[i29 >> 2] & 8192;
  i4 = (i11 | 0) == 0;
  i11 = i11 >>> 13;
  i24 = HEAP32[i33 >> 2] | 0;
  switch (HEAP8[i33 + 8 >> 0] | 0) {
  case 0:
   {
    switch (HEAP8[i33 + 9 >> 0] | 0) {
    case 1:
     {
      if (!i24) break L140;
      i6 = i32 + 460 | 0;
      i7 = HEAPU16[i32 + 540 >> 1] | 0;
      i4 = 0;
      i5 = 7;
      while (1) {
       i2 = HEAPU8[i3 >> 0] | 0;
       if ((i2 >>> i5 & 1 | 0) == (i7 | 0)) HEAP8[i3 >> 0] = HEAPU16[i6 >> 1] << i5 | 32639 >>> (7 - i5 | 0) & i2;
       i2 = (i5 | 0) == 0;
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break; else {
        i5 = i2 ? 7 : i5 + -1 | 0;
        i3 = i2 ? i3 + 1 | 0 : i3;
       }
      }
      break;
     }
    case 2:
     {
      i2 = (i24 | 0) != 0;
      if (!i14) {
       if (!i2) break L140;
       i6 = i32 + 460 | 0;
       i7 = HEAPU16[i32 + 540 >> 1] | 0;
       i4 = 0;
       i5 = 6;
       while (1) {
        i2 = HEAPU8[i3 >> 0] | 0;
        if ((i2 >>> i5 & 3 | 0) == (i7 | 0)) HEAP8[i3 >> 0] = HEAPU16[i6 >> 1] << i5 | 16191 >>> (6 - i5 | 0) & i2;
        i2 = (i5 | 0) == 0;
        i4 = i4 + 1 | 0;
        if ((i4 | 0) == (i24 | 0)) break L140; else {
         i5 = i2 ? 6 : i5 + -2 | 0;
         i3 = i2 ? i3 + 1 | 0 : i3;
        }
       }
      }
      if (!i2) break L140;
      i7 = i32 + 460 | 0;
      i8 = HEAPU16[i32 + 540 >> 1] | 0;
      i5 = 0;
      i6 = 6;
      while (1) {
       i2 = HEAPU8[i3 >> 0] | 0;
       i4 = i2 >>> i6 & 3;
       if ((i4 | 0) == (i8 | 0)) i2 = HEAPU16[i7 >> 1] << i6 & 255 | 16191 >>> (6 - i6 | 0) & i2; else i2 = (HEAPU8[i14 + (i4 << 2 | i4 | i4 << 4 | i4 << 6) >> 0] | 0) >>> 6 << i6 | 16191 >>> (6 - i6 | 0) & i2;
       HEAP8[i3 >> 0] = i2;
       i2 = (i6 | 0) == 0;
       i5 = i5 + 1 | 0;
       if ((i5 | 0) == (i24 | 0)) break; else {
        i6 = i2 ? 6 : i6 + -2 | 0;
        i3 = i2 ? i3 + 1 | 0 : i3;
       }
      }
      break;
     }
    case 4:
     {
      i2 = (i24 | 0) != 0;
      if (!i14) {
       if (!i2) break L140;
       i6 = i32 + 460 | 0;
       i7 = HEAPU16[i32 + 540 >> 1] | 0;
       i4 = 0;
       i5 = 4;
       while (1) {
        i2 = HEAPU8[i3 >> 0] | 0;
        if ((i2 >>> i5 & 15 | 0) == (i7 | 0)) HEAP8[i3 >> 0] = HEAPU16[i6 >> 1] << i5 | 3855 >>> (4 - i5 | 0) & i2;
        i2 = (i5 | 0) == 0;
        i4 = i4 + 1 | 0;
        if ((i4 | 0) == (i24 | 0)) break L140; else {
         i5 = i2 ? 4 : i5 + -4 | 0;
         i3 = i2 ? i3 + 1 | 0 : i3;
        }
       }
      }
      if (!i2) break L140;
      i7 = i32 + 460 | 0;
      i8 = HEAPU16[i32 + 540 >> 1] | 0;
      i5 = 0;
      i6 = 4;
      while (1) {
       i2 = HEAPU8[i3 >> 0] | 0;
       i4 = i2 >>> i6 & 15;
       if ((i4 | 0) == (i8 | 0)) i2 = HEAPU16[i7 >> 1] << i6 & 255 | 3855 >>> (4 - i6 | 0) & i2; else i2 = (HEAPU8[i14 + (i4 << 4 | i4) >> 0] | 0) >>> 4 << i6 | 3855 >>> (4 - i6 | 0) & i2;
       HEAP8[i3 >> 0] = i2;
       i2 = (i6 | 0) == 0;
       i5 = i5 + 1 | 0;
       if ((i5 | 0) == (i24 | 0)) break; else {
        i6 = i2 ? 4 : i6 + -4 | 0;
        i3 = i2 ? i3 + 1 | 0 : i3;
       }
      }
      break;
     }
    case 8:
     {
      i2 = (i24 | 0) != 0;
      if (!i14) {
       if (!i2) break L140;
       i4 = i32 + 460 | 0;
       i5 = HEAPU16[i32 + 540 >> 1] | 0;
       i2 = i3;
       i3 = 0;
       while (1) {
        if ((HEAPU8[i2 >> 0] | 0) == (i5 | 0)) HEAP8[i2 >> 0] = HEAP16[i4 >> 1];
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i24 | 0)) break L140; else i2 = i2 + 1 | 0;
       }
      }
      if (!i2) break L140;
      i5 = i32 + 460 | 0;
      i6 = HEAPU16[i32 + 540 >> 1] | 0;
      i4 = 0;
      while (1) {
       i2 = HEAPU8[i3 >> 0] | 0;
       if ((i2 | 0) == (i6 | 0)) i2 = HEAP16[i5 >> 1] & 255; else i2 = HEAP8[i14 + i2 >> 0] | 0;
       HEAP8[i3 >> 0] = i2;
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break; else i3 = i3 + 1 | 0;
      }
      break;
     }
    case 16:
     {
      i2 = (i24 | 0) != 0;
      if (!i22) {
       if (!i2) break L140;
       i5 = i32 + 460 | 0;
       i6 = HEAPU16[i32 + 540 >> 1] | 0;
       i2 = i3;
       i3 = 0;
       while (1) {
        i4 = i2 + 1 | 0;
        if ((HEAPU8[i2 >> 0] << 8 | HEAPU8[i4 >> 0] | 0) == (i6 | 0)) {
         i27 = HEAP16[i5 >> 1] | 0;
         HEAP8[i2 >> 0] = (i27 & 65535) >>> 8;
         HEAP8[i4 >> 0] = i27;
        }
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i24 | 0)) break; else i2 = i2 + 2 | 0;
       }
      } else {
       if (!i2) break L140;
       i7 = i32 + 460 | 0;
       i8 = HEAPU16[i32 + 540 >> 1] | 0;
       i5 = 0;
       while (1) {
        i2 = HEAPU8[i3 >> 0] | 0;
        i6 = i3 + 1 | 0;
        i4 = HEAPU8[i6 >> 0] | 0;
        if ((i2 << 8 | i4 | 0) == (i8 | 0)) i2 = i7; else i2 = (HEAP32[i22 + (i4 >>> i23 << 2) >> 2] | 0) + (i2 << 1) | 0;
        i27 = HEAP16[i2 >> 1] | 0;
        HEAP8[i3 >> 0] = (i27 & 65535) >>> 8;
        HEAP8[i6 >> 0] = i27;
        i5 = i5 + 1 | 0;
        if ((i5 | 0) == (i24 | 0)) break; else i3 = i3 + 2 | 0;
       }
      }
      break;
     }
    default:
     break L140;
    }
    break;
   }
  case 2:
   {
    if ((HEAP8[i33 + 9 >> 0] | 0) == 8) {
     i2 = (i24 | 0) != 0;
     if (!i14) {
      if (!i2) break L140;
      i6 = i32 + 536 | 0;
      i7 = i32 + 538 | 0;
      i8 = i32 + 454 | 0;
      i9 = i32 + 456 | 0;
      i10 = i32 + 458 | 0;
      i11 = HEAPU16[i32 + 534 >> 1] | 0;
      i5 = 0;
      while (1) {
       if ((HEAPU8[i3 >> 0] | 0) == (i11 | 0)) {
        i2 = i3 + 1 | 0;
        if ((HEAPU8[i2 >> 0] | 0) == (HEAPU16[i6 >> 1] | 0)) {
         i4 = i3 + 2 | 0;
         if ((HEAPU8[i4 >> 0] | 0) == (HEAPU16[i7 >> 1] | 0)) {
          HEAP8[i3 >> 0] = HEAP16[i8 >> 1];
          HEAP8[i2 >> 0] = HEAP16[i9 >> 1];
          HEAP8[i4 >> 0] = HEAP16[i10 >> 1];
         }
        }
       }
       i5 = i5 + 1 | 0;
       if ((i5 | 0) == (i24 | 0)) break L140; else i3 = i3 + 3 | 0;
      }
     }
     if (!i2) break L140;
     i8 = i32 + 536 | 0;
     i9 = i32 + 538 | 0;
     i10 = i32 + 454 | 0;
     i11 = i32 + 456 | 0;
     i12 = i32 + 458 | 0;
     i13 = HEAPU16[i32 + 534 >> 1] | 0;
     i7 = 0;
     while (1) {
      i4 = HEAPU8[i3 >> 0] | 0;
      i5 = i3 + 1 | 0;
      i6 = HEAPU8[i5 >> 0] | 0;
      if ((i4 | 0) == (i13 | 0)) if ((i6 | 0) == (HEAPU16[i8 >> 1] | 0)) {
       i2 = i3 + 2 | 0;
       if ((HEAPU8[i2 >> 0] | 0) == (HEAPU16[i9 >> 1] | 0)) {
        HEAP8[i3 >> 0] = HEAP16[i10 >> 1];
        HEAP8[i5 >> 0] = HEAP16[i11 >> 1];
        i4 = HEAP16[i12 >> 1] & 255;
       } else i27 = 160;
      } else i27 = 160; else i27 = 160;
      if ((i27 | 0) == 160) {
       i27 = 0;
       HEAP8[i3 >> 0] = HEAP8[i14 + i4 >> 0] | 0;
       HEAP8[i5 >> 0] = HEAP8[i14 + i6 >> 0] | 0;
       i4 = i3 + 2 | 0;
       i2 = i4;
       i4 = HEAP8[i14 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
      }
      HEAP8[i2 >> 0] = i4;
      i7 = i7 + 1 | 0;
      if ((i7 | 0) == (i24 | 0)) break L140; else i3 = i3 + 3 | 0;
     }
    }
    i2 = (i24 | 0) != 0;
    if (!i22) {
     if (!i2) break L140;
     i10 = i32 + 536 | 0;
     i11 = i32 + 538 | 0;
     i12 = i32 + 454 | 0;
     i13 = i32 + 456 | 0;
     i14 = i32 + 458 | 0;
     i15 = HEAPU16[i32 + 534 >> 1] | 0;
     i9 = 0;
     while (1) {
      i2 = i3 + 1 | 0;
      i4 = i3 + 2 | 0;
      i5 = i3 + 3 | 0;
      i6 = i3 + 4 | 0;
      i7 = i3 + 5 | 0;
      i8 = HEAPU8[i6 >> 0] << 8 | HEAPU8[i7 >> 0];
      if ((HEAPU8[i3 >> 0] << 8 | HEAPU8[i2 >> 0] | 0) == (i15 | 0)) if ((HEAPU8[i4 >> 0] << 8 | HEAPU8[i5 >> 0] | 0) == (HEAPU16[i10 >> 1] | 0)) if ((i8 | 0) == (HEAPU16[i11 >> 1] | 0)) {
       i27 = HEAP16[i12 >> 1] | 0;
       HEAP8[i3 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i2 >> 0] = i27;
       i27 = HEAP16[i13 >> 1] | 0;
       HEAP8[i4 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i5 >> 0] = i27;
       i27 = HEAP16[i14 >> 1] | 0;
       HEAP8[i6 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i7 >> 0] = i27;
      }
      i9 = i9 + 1 | 0;
      if ((i9 | 0) == (i24 | 0)) break L140; else i3 = i3 + 6 | 0;
     }
    }
    if (!i2) break L140;
    i16 = i32 + 536 | 0;
    i17 = i32 + 538 | 0;
    i18 = i32 + 454 | 0;
    i19 = i32 + 456 | 0;
    i20 = i32 + 458 | 0;
    i21 = HEAPU16[i32 + 534 >> 1] | 0;
    i15 = 0;
    while (1) {
     i6 = HEAPU8[i3 >> 0] | 0;
     i7 = i3 + 1 | 0;
     i8 = HEAPU8[i7 >> 0] | 0;
     i9 = i3 + 2 | 0;
     i10 = i3 + 3 | 0;
     i13 = i3 + 4 | 0;
     i11 = HEAPU8[i13 >> 0] | 0;
     i14 = i3 + 5 | 0;
     i12 = HEAPU8[i14 >> 0] | 0;
     i4 = i11 << 8 | i12;
     if ((i6 << 8 | i8 | 0) == (i21 | 0)) {
      i2 = HEAP8[i9 >> 0] | 0;
      i5 = HEAP8[i10 >> 0] | 0;
      if (((i2 & 255) << 8 | i5 & 255 | 0) == (HEAPU16[i16 >> 1] | 0)) if ((i4 | 0) == (HEAPU16[i17 >> 1] | 0)) {
       i2 = HEAP16[i18 >> 1] | 0;
       HEAP8[i3 >> 0] = (i2 & 65535) >>> 8;
       HEAP8[i7 >> 0] = i2;
       i2 = HEAP16[i19 >> 1] | 0;
       HEAP8[i9 >> 0] = (i2 & 65535) >>> 8;
       HEAP8[i10 >> 0] = i2;
       i2 = i20;
      } else i27 = 177; else i27 = 177;
     } else {
      i5 = HEAP8[i10 >> 0] | 0;
      i2 = HEAP8[i9 >> 0] | 0;
      i27 = 177;
     }
     if ((i27 | 0) == 177) {
      i27 = 0;
      i26 = HEAP16[(HEAP32[i22 + (i8 >>> i23 << 2) >> 2] | 0) + (i6 << 1) >> 1] | 0;
      HEAP8[i3 >> 0] = (i26 & 65535) >>> 8;
      HEAP8[i7 >> 0] = i26;
      i2 = HEAP16[(HEAP32[i22 + ((i5 & 255) >>> i23 << 2) >> 2] | 0) + ((i2 & 255) << 1) >> 1] | 0;
      HEAP8[i9 >> 0] = (i2 & 65535) >>> 8;
      HEAP8[i10 >> 0] = i2;
      i2 = (HEAP32[i22 + (i12 >>> i23 << 2) >> 2] | 0) + (i11 << 1) | 0;
     }
     i26 = HEAP16[i2 >> 1] | 0;
     HEAP8[i13 >> 0] = (i26 & 65535) >>> 8;
     HEAP8[i14 >> 0] = i26;
     i15 = i15 + 1 | 0;
     if ((i15 | 0) == (i24 | 0)) break; else i3 = i3 + 6 | 0;
    }
    break;
   }
  case 4:
   {
    if ((HEAP8[i33 + 9 >> 0] | 0) != 8) {
     i2 = (i24 | 0) != 0;
     if (!((i22 | 0) != 0 & (i18 | 0) != 0 & (i19 | 0) != 0)) {
      if (!i2) break L140;
      i5 = i32 + 460 | 0;
      i4 = 0;
      i2 = i3;
      while (1) {
       i3 = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
       switch ((i3 & 65535) << 16 >> 16) {
       case 0:
        {
         i27 = HEAP16[i5 >> 1] | 0;
         HEAP8[i2 >> 0] = (i27 & 65535) >>> 8;
         HEAP8[i2 + 1 >> 0] = i27;
         break;
        }
       case -1:
        break;
       default:
        {
         i27 = i2 + 1 | 0;
         i26 = (Math_imul(HEAPU8[i2 >> 0] << 8 | HEAPU8[i27 >> 0], i3) | 0) + ((Math_imul(i3 ^ 65535, HEAPU16[i5 >> 1] | 0) | 0) + 32768) | 0;
         i26 = (i26 >>> 16) + i26 | 0;
         HEAP8[i2 >> 0] = i26 >>> 24;
         HEAP8[i27 >> 0] = i26 >>> 16;
        }
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break L140; else i2 = i2 + 4 | 0;
      }
     }
     if (!i2) break L140;
     i5 = i32 + 470 | 0;
     i6 = i32 + 460 | 0;
     if (i4) {
      i4 = 0;
      while (1) {
       i2 = HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0];
       switch ((i2 & 65535) << 16 >> 16) {
       case -1:
        {
         i27 = i3 + 1 | 0;
         i26 = HEAP16[(HEAP32[i22 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0;
         HEAP8[i3 >> 0] = (i26 & 65535) >>> 8;
         HEAP8[i27 >> 0] = i26;
         break;
        }
       case 0:
        {
         i27 = HEAP16[i6 >> 1] | 0;
         HEAP8[i3 >> 0] = (i27 & 65535) >>> 8;
         HEAP8[i3 + 1 >> 0] = i27;
         break;
        }
       default:
        {
         i27 = i3 + 1 | 0;
         i26 = (Math_imul(i2, HEAPU16[(HEAP32[i19 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i2 ^ 65535, HEAPU16[i5 >> 1] | 0) | 0) | 0;
         i26 = (i26 >>> 16) + i26 | 0;
         i26 = HEAP16[(HEAP32[i18 + ((i26 >>> 16 & 255) >>> i23 << 2) >> 2] | 0) + (i26 >>> 24 << 1) >> 1] | 0;
         HEAP8[i3 >> 0] = (i26 & 65535) >>> 8;
         HEAP8[i27 >> 0] = i26;
        }
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 4 | 0;
      }
     } else {
      i4 = 0;
      while (1) {
       i2 = HEAPU8[i3 + 2 >> 0] << 8 | HEAPU8[i3 + 3 >> 0];
       switch ((i2 & 65535) << 16 >> 16) {
       case -1:
        {
         i27 = i3 + 1 | 0;
         i26 = HEAP16[(HEAP32[i22 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0;
         HEAP8[i3 >> 0] = (i26 & 65535) >>> 8;
         HEAP8[i27 >> 0] = i26;
         break;
        }
       case 0:
        {
         i27 = HEAP16[i6 >> 1] | 0;
         HEAP8[i3 >> 0] = (i27 & 65535) >>> 8;
         HEAP8[i3 + 1 >> 0] = i27;
         break;
        }
       default:
        {
         i27 = i3 + 1 | 0;
         i26 = (Math_imul(i2, HEAPU16[(HEAP32[i19 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i2 ^ 65535, HEAPU16[i5 >> 1] | 0) | 0) | 0;
         i26 = (i26 >>> 16) + i26 | 0;
         HEAP8[i3 >> 0] = i26 >>> 24;
         HEAP8[i27 >> 0] = i26 >>> 16;
        }
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 4 | 0;
      }
     }
    }
    i2 = (i24 | 0) != 0;
    if (!((i14 | 0) != 0 & ((i12 | 0) != 0 & (i13 | 0) != 0))) {
     if (!i2) break L140;
     i5 = i32 + 460 | 0;
     i4 = 0;
     while (1) {
      i2 = HEAP8[i3 + 1 >> 0] | 0;
      switch (i2 << 24 >> 24) {
      case 0:
       {
        i2 = HEAP16[i5 >> 1] & 255;
        i27 = 203;
        break;
       }
      case -1:
       break;
      default:
       {
        i2 = i2 & 255;
        i2 = (Math_imul(HEAPU8[i3 >> 0] | 0, i2) | 0) + 128 + (Math_imul(i2 ^ 255, HEAPU16[i5 >> 1] | 0) | 0) | 0;
        i2 = ((i2 >>> 8 & 255) + i2 | 0) >>> 8 & 255;
        i27 = 203;
       }
      }
      if ((i27 | 0) == 203) {
       i27 = 0;
       HEAP8[i3 >> 0] = i2;
      }
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 2 | 0;
     }
    }
    if (!i2) break L140;
    i5 = i32 + 470 | 0;
    i6 = i32 + 460 | 0;
    if (!i11) {
     i4 = 0;
     while (1) {
      i27 = HEAP8[i3 + 1 >> 0] | 0;
      i2 = i27 & 255;
      switch (i27 << 24 >> 24) {
      case -1:
       {
        i2 = HEAP8[i14 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
        break;
       }
      case 0:
       {
        i2 = HEAP16[i6 >> 1] & 255;
        break;
       }
      default:
       {
        i2 = (Math_imul(HEAPU8[i13 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0, i2) | 0) + 128 + (Math_imul(i2 ^ 255, HEAPU16[i5 >> 1] | 0) | 0) | 0;
        i2 = HEAP8[i12 + (((i2 >>> 8 & 255) + i2 | 0) >>> 8 & 255) >> 0] | 0;
       }
      }
      HEAP8[i3 >> 0] = i2;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 2 | 0;
     }
    } else {
     i4 = 0;
     while (1) {
      i27 = HEAP8[i3 + 1 >> 0] | 0;
      i2 = i27 & 255;
      switch (i27 << 24 >> 24) {
      case -1:
       {
        i2 = HEAP8[i14 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
        break;
       }
      case 0:
       {
        i2 = HEAP16[i6 >> 1] & 255;
        break;
       }
      default:
       {
        i2 = (Math_imul(HEAPU8[i13 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0, i2) | 0) + 128 + (Math_imul(i2 ^ 255, HEAPU16[i5 >> 1] | 0) | 0) | 0;
        i2 = ((i2 >>> 8 & 255) + i2 | 0) >>> 8 & 255;
       }
      }
      HEAP8[i3 >> 0] = i2;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 2 | 0;
     }
    }
   }
  case 6:
   {
    if ((HEAP8[i33 + 9 >> 0] | 0) == 8) {
     i2 = (i24 | 0) != 0;
     if (!((i14 | 0) != 0 & ((i12 | 0) != 0 & (i13 | 0) != 0))) {
      if (!i2) break L140;
      i5 = i32 + 454 | 0;
      i6 = i32 + 456 | 0;
      i7 = i32 + 458 | 0;
      i4 = 0;
      while (1) {
       i2 = HEAP8[i3 + 3 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case 0:
        {
         HEAP8[i3 >> 0] = HEAP16[i5 >> 1];
         HEAP8[i3 + 1 >> 0] = HEAP16[i6 >> 1];
         HEAP8[i3 + 2 >> 0] = HEAP16[i7 >> 1];
         break;
        }
       case -1:
        break;
       default:
        {
         i25 = i2 & 255;
         i26 = i25 ^ 255;
         i27 = (Math_imul(HEAPU8[i3 >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i5 >> 1] | 0) | 0) | 0;
         HEAP8[i3 >> 0] = ((i27 >>> 8 & 255) + i27 | 0) >>> 8;
         i27 = i3 + 1 | 0;
         i23 = (Math_imul(HEAPU8[i27 >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i6 >> 1] | 0) | 0) | 0;
         HEAP8[i27 >> 0] = ((i23 >>> 8 & 255) + i23 | 0) >>> 8;
         i27 = i3 + 2 | 0;
         i26 = (Math_imul(HEAPU8[i27 >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i7 >> 1] | 0) | 0) | 0;
         HEAP8[i27 >> 0] = ((i26 >>> 8 & 255) + i26 | 0) >>> 8;
        }
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 4 | 0;
      }
     }
     if (!i2) break L140;
     i5 = i32 + 464 | 0;
     i6 = i32 + 466 | 0;
     i7 = i32 + 468 | 0;
     i8 = i32 + 454 | 0;
     i9 = i32 + 456 | 0;
     i10 = i32 + 458 | 0;
     if (!i11) {
      i4 = 0;
      while (1) {
       i2 = HEAP8[i3 + 3 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case -1:
        {
         HEAP8[i3 >> 0] = HEAP8[i14 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
         i27 = i3 + 1 | 0;
         HEAP8[i27 >> 0] = HEAP8[i14 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
         i27 = i3 + 2 | 0;
         HEAP8[i27 >> 0] = HEAP8[i14 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
         break;
        }
       case 0:
        {
         HEAP8[i3 >> 0] = HEAP16[i8 >> 1];
         HEAP8[i3 + 1 >> 0] = HEAP16[i9 >> 1];
         HEAP8[i3 + 2 >> 0] = HEAP16[i10 >> 1];
         break;
        }
       default:
        {
         i25 = i2 & 255;
         i26 = i25 ^ 255;
         i27 = (Math_imul(HEAPU8[i13 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i5 >> 1] | 0) | 0) | 0;
         HEAP8[i3 >> 0] = HEAP8[i12 + (((i27 >>> 8 & 255) + i27 | 0) >>> 8 & 255) >> 0] | 0;
         i27 = i3 + 1 | 0;
         i23 = (Math_imul(HEAPU8[i13 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i6 >> 1] | 0) | 0) | 0;
         HEAP8[i27 >> 0] = HEAP8[i12 + (((i23 >>> 8 & 255) + i23 | 0) >>> 8 & 255) >> 0] | 0;
         i27 = i3 + 2 | 0;
         i26 = (Math_imul(HEAPU8[i13 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i7 >> 1] | 0) | 0) | 0;
         HEAP8[i27 >> 0] = HEAP8[i12 + (((i26 >>> 8 & 255) + i26 | 0) >>> 8 & 255) >> 0] | 0;
        }
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 4 | 0;
      }
     } else {
      i4 = 0;
      while (1) {
       i2 = HEAP8[i3 + 3 >> 0] | 0;
       switch (i2 << 24 >> 24) {
       case -1:
        {
         HEAP8[i3 >> 0] = HEAP8[i14 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0;
         i27 = i3 + 1 | 0;
         HEAP8[i27 >> 0] = HEAP8[i14 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
         i27 = i3 + 2 | 0;
         HEAP8[i27 >> 0] = HEAP8[i14 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
         break;
        }
       case 0:
        {
         HEAP8[i3 >> 0] = HEAP16[i8 >> 1];
         HEAP8[i3 + 1 >> 0] = HEAP16[i9 >> 1];
         HEAP8[i3 + 2 >> 0] = HEAP16[i10 >> 1];
         break;
        }
       default:
        {
         i25 = i2 & 255;
         i26 = i25 ^ 255;
         i27 = (Math_imul(HEAPU8[i13 + (HEAPU8[i3 >> 0] | 0) >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i5 >> 1] | 0) | 0) | 0;
         HEAP8[i3 >> 0] = ((i27 >>> 8 & 255) + i27 | 0) >>> 8;
         i27 = i3 + 1 | 0;
         i23 = (Math_imul(HEAPU8[i13 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i6 >> 1] | 0) | 0) | 0;
         HEAP8[i27 >> 0] = ((i23 >>> 8 & 255) + i23 | 0) >>> 8;
         i27 = i3 + 2 | 0;
         i26 = (Math_imul(HEAPU8[i13 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0, i25) | 0) + 128 + (Math_imul(i26, HEAPU16[i7 >> 1] | 0) | 0) | 0;
         HEAP8[i27 >> 0] = ((i26 >>> 8 & 255) + i26 | 0) >>> 8;
        }
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 4 | 0;
      }
     }
    }
    i2 = (i24 | 0) != 0;
    if (!((i22 | 0) != 0 & (i18 | 0) != 0 & (i19 | 0) != 0)) {
     if (!i2) break L140;
     i5 = i32 + 454 | 0;
     i6 = i32 + 456 | 0;
     i7 = i32 + 458 | 0;
     i4 = 0;
     while (1) {
      i2 = HEAPU8[i3 + 6 >> 0] << 8 | HEAPU8[i3 + 7 >> 0];
      switch ((i2 & 65535) << 16 >> 16) {
      case 0:
       {
        i27 = HEAP16[i5 >> 1] | 0;
        HEAP8[i3 >> 0] = (i27 & 65535) >>> 8;
        HEAP8[i3 + 1 >> 0] = i27;
        i27 = HEAP16[i6 >> 1] | 0;
        HEAP8[i3 + 2 >> 0] = (i27 & 65535) >>> 8;
        HEAP8[i3 + 3 >> 0] = i27;
        i27 = HEAP16[i7 >> 1] | 0;
        HEAP8[i3 + 4 >> 0] = (i27 & 65535) >>> 8;
        HEAP8[i3 + 5 >> 0] = i27;
        break;
       }
      case -1:
       break;
      default:
       {
        i19 = i3 + 1 | 0;
        i20 = i3 + 2 | 0;
        i22 = i3 + 3 | 0;
        i21 = HEAPU8[i20 >> 0] << 8 | HEAPU8[i22 >> 0];
        i25 = i3 + 4 | 0;
        i27 = i3 + 5 | 0;
        i23 = HEAPU8[i25 >> 0] << 8 | HEAPU8[i27 >> 0];
        i26 = i2 ^ 65535;
        i18 = (Math_imul(HEAPU8[i3 >> 0] << 8 | HEAPU8[i19 >> 0], i2) | 0) + 32768 + (Math_imul(i26, HEAPU16[i5 >> 1] | 0) | 0) | 0;
        i18 = (i18 >>> 16) + i18 | 0;
        HEAP8[i3 >> 0] = i18 >>> 24;
        HEAP8[i19 >> 0] = i18 >>> 16;
        i21 = (Math_imul(i21, i2) | 0) + 32768 + (Math_imul(i26, HEAPU16[i6 >> 1] | 0) | 0) | 0;
        i21 = (i21 >>> 16) + i21 | 0;
        HEAP8[i20 >> 0] = i21 >>> 24;
        HEAP8[i22 >> 0] = i21 >>> 16;
        i26 = (Math_imul(i23, i2) | 0) + 32768 + (Math_imul(i26, HEAPU16[i7 >> 1] | 0) | 0) | 0;
        i26 = (i26 >>> 16) + i26 | 0;
        HEAP8[i25 >> 0] = i26 >>> 24;
        HEAP8[i27 >> 0] = i26 >>> 16;
       }
      }
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i24 | 0)) break L140; else i3 = i3 + 8 | 0;
     }
    }
    if (!i2) break L140;
    i17 = i32 + 464 | 0;
    i11 = (i11 | 0) == 0;
    i12 = i32 + 466 | 0;
    i13 = i32 + 468 | 0;
    i14 = i32 + 454 | 0;
    i15 = i32 + 456 | 0;
    i16 = i32 + 458 | 0;
    i10 = 0;
    while (1) {
     i8 = HEAPU8[i3 + 6 >> 0] << 8 | HEAPU8[i3 + 7 >> 0];
     switch ((i8 & 65535) << 16 >> 16) {
     case -1:
      {
       i27 = i3 + 1 | 0;
       i26 = HEAP16[(HEAP32[i22 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0;
       HEAP8[i3 >> 0] = (i26 & 65535) >>> 8;
       HEAP8[i27 >> 0] = i26;
       i27 = i3 + 3 | 0;
       i26 = i3 + 2 | 0;
       i25 = HEAP16[(HEAP32[i22 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i26 >> 0] << 1) >> 1] | 0;
       HEAP8[i26 >> 0] = (i25 & 65535) >>> 8;
       HEAP8[i27 >> 0] = i25;
       i27 = i3 + 5 | 0;
       i25 = i3 + 4 | 0;
       i26 = HEAP16[(HEAP32[i22 + ((HEAPU8[i27 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i25 >> 0] << 1) >> 1] | 0;
       HEAP8[i25 >> 0] = (i26 & 65535) >>> 8;
       HEAP8[i27 >> 0] = i26;
       break;
      }
     case 0:
      {
       i27 = HEAP16[i14 >> 1] | 0;
       HEAP8[i3 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i3 + 1 >> 0] = i27;
       i27 = HEAP16[i15 >> 1] | 0;
       HEAP8[i3 + 2 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i3 + 3 >> 0] = i27;
       i27 = HEAP16[i16 >> 1] | 0;
       HEAP8[i3 + 4 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i3 + 5 >> 0] = i27;
       break;
      }
     default:
      {
       i6 = i3 + 1 | 0;
       i9 = i8 ^ 65535;
       i5 = (Math_imul(i8, HEAPU16[(HEAP32[i19 + ((HEAPU8[i6 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i3 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i9, HEAPU16[i17 >> 1] | 0) | 0) | 0;
       i5 = (i5 >>> 16) + i5 | 0;
       i2 = i5 >>> 16;
       i5 = i5 >>> 24;
       if (i11) {
        i2 = HEAP16[(HEAP32[i18 + ((i2 & 255) >>> i23 << 2) >> 2] | 0) + (i5 << 1) >> 1] | 0;
        i4 = i2 & 255;
        i2 = (i2 & 65535) >>> 8 & 255;
       } else {
        i4 = i2 & 255;
        i2 = i5 & 255;
       }
       HEAP8[i3 >> 0] = i2;
       HEAP8[i6 >> 0] = i4;
       i6 = i3 + 3 | 0;
       i7 = i3 + 2 | 0;
       i5 = (Math_imul(i8, HEAPU16[(HEAP32[i19 + ((HEAPU8[i6 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i7 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i9, HEAPU16[i12 >> 1] | 0) | 0) | 0;
       i5 = (i5 >>> 16) + i5 | 0;
       i2 = i5 >>> 16;
       i5 = i5 >>> 24;
       if (i11) {
        i2 = HEAP16[(HEAP32[i18 + ((i2 & 255) >>> i23 << 2) >> 2] | 0) + (i5 << 1) >> 1] | 0;
        i4 = i2 & 255;
        i2 = (i2 & 65535) >>> 8 & 255;
       } else {
        i4 = i2 & 255;
        i2 = i5 & 255;
       }
       HEAP8[i7 >> 0] = i2;
       HEAP8[i6 >> 0] = i4;
       i6 = i3 + 5 | 0;
       i7 = i3 + 4 | 0;
       i5 = (Math_imul(i8, HEAPU16[(HEAP32[i19 + ((HEAPU8[i6 >> 0] | 0) >>> i23 << 2) >> 2] | 0) + (HEAPU8[i7 >> 0] << 1) >> 1] | 0) | 0) + 32768 + (Math_imul(i9, HEAPU16[i13 >> 1] | 0) | 0) | 0;
       i5 = (i5 >>> 16) + i5 | 0;
       i2 = i5 >>> 16;
       i5 = i5 >>> 24;
       if (i11) {
        i2 = HEAP16[(HEAP32[i18 + ((i2 & 255) >>> i23 << 2) >> 2] | 0) + (i5 << 1) >> 1] | 0;
        i4 = i2 & 255;
        i2 = (i2 & 65535) >>> 8 & 255;
       } else {
        i4 = i2 & 255;
        i2 = i5 & 255;
       }
       HEAP8[i7 >> 0] = i2;
       HEAP8[i6 >> 0] = i4;
      }
     }
     i10 = i10 + 1 | 0;
     if ((i10 | 0) == (i24 | 0)) break L140; else i3 = i3 + 8 | 0;
    }
   }
  default:
   break L140;
  }
 } while (0);
 i2 = HEAP32[i30 >> 2] | 0;
 L382 : do if ((i2 & 6299648 | 0) == 8192) {
  if (!(i2 & 128)) i2 = HEAP8[i32 + 435 >> 0] | 0; else {
   if (HEAP16[i32 + 428 >> 1] | 0) break;
   i2 = HEAP8[i32 + 435 >> 0] | 0;
   if (i2 & 4) break;
  }
  if (i2 << 24 >> 24 != 3) {
   i2 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
   i6 = HEAP32[i32 + 484 >> 2] | 0;
   i8 = HEAP32[i32 + 492 >> 2] | 0;
   i7 = HEAP32[i32 + 496 >> 2] | 0;
   i9 = HEAP32[i33 >> 2] | 0;
   i5 = i33 + 9 | 0;
   i3 = HEAP8[i5 >> 0] | 0;
   if (!((i8 | 0) != 0 & (i3 & 255) < 9)) if (!((i7 | 0) != 0 & i3 << 24 >> 24 == 16)) break;
   switch (HEAP8[i33 + 8 >> 0] | 0) {
   case 2:
    {
     i4 = (i9 | 0) != 0;
     if (i3 << 24 >> 24 == 8) {
      if (i4) i3 = 0; else break L382;
      while (1) {
       HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
       i27 = i2 + 1 | 0;
       HEAP8[i27 >> 0] = HEAP8[i8 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
       i27 = i2 + 2 | 0;
       HEAP8[i27 >> 0] = HEAP8[i8 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 3 | 0;
      }
     } else {
      if (i4) i3 = 0; else break L382;
      while (1) {
       i26 = i2 + 1 | 0;
       i25 = HEAP16[(HEAP32[i7 + ((HEAPU8[i26 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i2 >> 0] << 1) >> 1] | 0;
       HEAP8[i2 >> 0] = (i25 & 65535) >>> 8;
       HEAP8[i26 >> 0] = i25;
       i26 = i2 + 2 | 0;
       i25 = i2 + 3 | 0;
       i27 = HEAP16[(HEAP32[i7 + ((HEAPU8[i25 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i26 >> 0] << 1) >> 1] | 0;
       HEAP8[i26 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i25 >> 0] = i27;
       i25 = i2 + 4 | 0;
       i27 = i2 + 5 | 0;
       i26 = HEAP16[(HEAP32[i7 + ((HEAPU8[i27 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i25 >> 0] << 1) >> 1] | 0;
       HEAP8[i25 >> 0] = (i26 & 65535) >>> 8;
       HEAP8[i27 >> 0] = i26;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 6 | 0;
      }
     }
     break;
    }
   case 6:
    {
     i4 = (i9 | 0) != 0;
     if (i3 << 24 >> 24 == 8) {
      if (i4) i3 = 0; else break L382;
      while (1) {
       HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
       i27 = i2 + 1 | 0;
       HEAP8[i27 >> 0] = HEAP8[i8 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
       i27 = i2 + 2 | 0;
       HEAP8[i27 >> 0] = HEAP8[i8 + (HEAPU8[i27 >> 0] | 0) >> 0] | 0;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 4 | 0;
      }
     } else {
      if (i4) i3 = 0; else break L382;
      while (1) {
       i26 = i2 + 1 | 0;
       i25 = HEAP16[(HEAP32[i7 + ((HEAPU8[i26 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i2 >> 0] << 1) >> 1] | 0;
       HEAP8[i2 >> 0] = (i25 & 65535) >>> 8;
       HEAP8[i26 >> 0] = i25;
       i26 = i2 + 2 | 0;
       i25 = i2 + 3 | 0;
       i27 = HEAP16[(HEAP32[i7 + ((HEAPU8[i25 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i26 >> 0] << 1) >> 1] | 0;
       HEAP8[i26 >> 0] = (i27 & 65535) >>> 8;
       HEAP8[i25 >> 0] = i27;
       i25 = i2 + 4 | 0;
       i27 = i2 + 5 | 0;
       i26 = HEAP16[(HEAP32[i7 + ((HEAPU8[i27 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i25 >> 0] << 1) >> 1] | 0;
       HEAP8[i25 >> 0] = (i26 & 65535) >>> 8;
       HEAP8[i27 >> 0] = i26;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 8 | 0;
      }
     }
     break;
    }
   case 4:
    {
     i4 = (i9 | 0) != 0;
     if (i3 << 24 >> 24 == 8) {
      if (i4) i3 = 0; else break L382;
      while (1) {
       HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 2 | 0;
      }
     } else {
      if (i4) i3 = 0; else break L382;
      while (1) {
       i27 = i2 + 1 | 0;
       i26 = HEAP16[(HEAP32[i7 + ((HEAPU8[i27 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i2 >> 0] << 1) >> 1] | 0;
       HEAP8[i2 >> 0] = (i26 & 65535) >>> 8;
       HEAP8[i27 >> 0] = i26;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 4 | 0;
      }
     }
     break;
    }
   case 0:
    {
     if (i3 << 24 >> 24 == 2) {
      if (!i9) break L382; else {
       i3 = 0;
       i4 = i2;
      }
      while (1) {
       i24 = HEAPU8[i4 >> 0] | 0;
       i25 = i24 & 192;
       i23 = i24 & 48;
       i26 = i24 & 12;
       i27 = i24 & 3;
       HEAP8[i4 >> 0] = (HEAPU8[i8 + (i23 << 2 | i23 | i23 >>> 2 | i23 >>> 4) >> 0] | 0) >>> 2 & 48 | HEAP8[i8 + (i24 >>> 6 | i25 | i25 >>> 2 | i25 >>> 4) >> 0] & -64 & 255 | (HEAPU8[i8 + (i26 << 2 | i26 | i26 << 4 | i26 >>> 2) >> 0] | 0) >>> 4 & 12 | (HEAPU8[i8 + (i27 << 4 | i27 | i27 << 6 | i27 << 2) >> 0] | 0) >>> 6;
       i3 = i3 + 4 | 0;
       if (i3 >>> 0 >= i9 >>> 0) break; else i4 = i4 + 1 | 0;
      }
      i3 = HEAP8[i5 >> 0] | 0;
     }
     switch (i3 << 24 >> 24) {
     case 4:
      {
       if (!i9) break L382; else i3 = 0;
       while (1) {
        i27 = HEAPU8[i2 >> 0] | 0;
        i26 = i27 & 15;
        HEAP8[i2 >> 0] = (HEAPU8[i8 + (i26 << 4 | i26) >> 0] | 0) >>> 4 | HEAP8[i8 + (i27 & 240 | i27 >>> 4) >> 0] & -16 & 255;
        i3 = i3 + 2 | 0;
        if (i3 >>> 0 >= i9 >>> 0) break; else i2 = i2 + 1 | 0;
       }
       break;
      }
     case 8:
      {
       if (!i9) break L382; else i3 = 0;
       while (1) {
        HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 1 | 0;
       }
       break;
      }
     case 16:
      {
       if (!i9) break L382; else i3 = 0;
       while (1) {
        i27 = i2 + 1 | 0;
        i26 = HEAP16[(HEAP32[i7 + ((HEAPU8[i27 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i2 >> 0] << 1) >> 1] | 0;
        HEAP8[i2 >> 0] = (i26 & 65535) >>> 8;
        HEAP8[i27 >> 0] = i26;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i9 | 0)) break; else i2 = i2 + 2 | 0;
       }
       break;
      }
     default:
      break L382;
     }
     break;
    }
   default:
    break L382;
   }
  }
 } while (0);
 i2 = HEAP32[i30 >> 2] | 0;
 L436 : do if ((i2 & 262272 | 0) == 262272) {
  switch (HEAP8[i33 + 8 >> 0] | 0) {
  case 4:
  case 6:
   break;
  default:
   break L436;
  }
  _png_do_strip_channel(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0, 0);
  i2 = HEAP32[i30 >> 2] | 0;
 } while (0);
 L440 : do if (i2 & 8388608 | 0) {
  i2 = HEAP8[i33 + 8 >> 0] | 0;
  if (i2 & 4) {
   i7 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
   i3 = HEAP32[i33 >> 2] | 0;
   i2 = i2 & 255;
   L443 : do if (i2 & 4 | 0) switch (HEAP8[i33 + 9 >> 0] | 0) {
   case 8:
    {
     i5 = HEAP32[i32 + 500 >> 2] | 0;
     if (!i5) break L443;
     i2 = i2 & 2;
     i4 = i2 + 2 | 0;
     if (!i3) break L440;
     i2 = i7 + (i2 | 1) | 0;
     while (1) {
      HEAP8[i2 >> 0] = HEAP8[i5 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
      i3 = i3 + -1 | 0;
      if (!i3) break L440; else i2 = i2 + i4 | 0;
     }
    }
   case 16:
    {
     i5 = HEAP32[i32 + 508 >> 2] | 0;
     i6 = HEAP32[i32 + 484 >> 2] | 0;
     if (!i5) break L443;
     i2 = i2 << 1 & 4;
     i4 = i2 + 4 | 0;
     if (!i3) break L440;
     i2 = i7 + (i2 | 2) | 0;
     while (1) {
      i27 = i2 + 1 | 0;
      i26 = HEAP16[(HEAP32[i5 + ((HEAPU8[i27 >> 0] | 0) >>> i6 << 2) >> 2] | 0) + (HEAPU8[i2 >> 0] << 1) >> 1] | 0;
      HEAP8[i2 >> 0] = (i26 & 65535) >>> 8;
      HEAP8[i27 >> 0] = i26;
      i3 = i3 + -1 | 0;
      if (!i3) break L440; else i2 = i2 + i4 | 0;
     }
    }
   default:
    break L443;
   } while (0);
   _png_warning(i32, 62744);
  }
 } while (0);
 i2 = HEAP32[i30 >> 2] | 0;
 if (i2 & 67108864) {
  i4 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i6 = i33 + 9 | 0;
  if ((HEAP8[i6 >> 0] | 0) == 16) {
   i7 = i33 + 4 | 0;
   i27 = HEAP32[i7 >> 2] | 0;
   i5 = i4 + i27 | 0;
   if ((i27 | 0) > 0) {
    i3 = i4;
    i2 = i4;
    while (1) {
     i27 = HEAPU8[i2 >> 0] | 0;
     HEAP8[i3 >> 0] = (((((HEAPU8[i2 + 1 >> 0] | 0) - i27 | 0) * 65535 | 0) + 8388480 | 0) >>> 24) + i27;
     i2 = i2 + 2 | 0;
     if (i2 >>> 0 >= i5 >>> 0) break; else i3 = i3 + 1 | 0;
    }
    i2 = HEAP32[i30 >> 2] | 0;
   }
   HEAP8[i6 >> 0] = 8;
   i27 = HEAPU8[i33 + 10 >> 0] | 0;
   HEAP8[i33 + 11 >> 0] = i27 << 3;
   HEAP32[i7 >> 2] = Math_imul(HEAP32[i33 >> 2] | 0, i27) | 0;
  }
 }
 if (i2 & 1024) {
  i4 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i6 = i33 + 9 | 0;
  if ((HEAP8[i6 >> 0] | 0) == 16) {
   i7 = i33 + 4 | 0;
   i27 = HEAP32[i7 >> 2] | 0;
   i5 = i4 + i27 | 0;
   if ((i27 | 0) > 0) {
    i3 = i4;
    i2 = i4;
    while (1) {
     HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 2 | 0;
     if (i2 >>> 0 >= i5 >>> 0) break; else i3 = i3 + 1 | 0;
    }
    i2 = HEAP32[i30 >> 2] | 0;
   }
   HEAP8[i6 >> 0] = 8;
   i27 = HEAPU8[i33 + 10 >> 0] | 0;
   HEAP8[i33 + 11 >> 0] = i27 << 3;
   HEAP32[i7 >> 2] = Math_imul(HEAP32[i33 >> 2] | 0, i27) | 0;
  }
 }
 do if (!(i2 & 64)) i1 = i2; else {
  i2 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i6 = HEAP32[i32 + 612 >> 2] | 0;
  i5 = HEAP32[i32 + 616 >> 2] | 0;
  i9 = HEAP32[i33 >> 2] | 0;
  i7 = i33 + 9 | 0;
  L478 : do if ((HEAP8[i7 >> 0] | 0) == 8) {
   i8 = i33 + 8 | 0;
   i3 = HEAP8[i8 >> 0] | 0;
   i4 = (i6 | 0) != 0;
   if (i4 & i3 << 24 >> 24 == 2) {
    if (!i9) i3 = 8; else {
     i3 = i2;
     i4 = 0;
     while (1) {
      HEAP8[i3 >> 0] = HEAP8[i6 + ((HEAPU8[i2 + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[i2 >> 0] | 0) >>> 3 << 10 | (HEAPU8[i2 + 2 >> 0] | 0) >>> 3) >> 0] | 0;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i9 | 0)) break; else {
       i3 = i3 + 1 | 0;
       i2 = i2 + 3 | 0;
      }
     }
     i3 = HEAP8[i7 >> 0] | 0;
    }
    HEAP8[i8 >> 0] = 3;
    HEAP8[i33 + 10 >> 0] = 1;
    HEAP8[i33 + 11 >> 0] = i3;
    i2 = i3 & 255;
    if ((i3 & 255) > 7) i2 = Math_imul(i2 >>> 3, i9) | 0; else i2 = ((Math_imul(i9, i2) | 0) + 7 | 0) >>> 3;
    HEAP32[i33 + 4 >> 2] = i2;
    break;
   }
   if (!(i4 & i3 << 24 >> 24 == 6)) {
    if ((i9 | 0) != 0 & ((i5 | 0) != 0 & i3 << 24 >> 24 == 3)) i3 = 0; else break;
    while (1) {
     HEAP8[i2 >> 0] = HEAP8[i5 + (HEAPU8[i2 >> 0] | 0) >> 0] | 0;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i9 | 0)) break L478; else i2 = i2 + 1 | 0;
    }
   }
   if (!i9) i3 = 8; else {
    i4 = i2;
    i3 = 0;
    while (1) {
     HEAP8[i2 >> 0] = HEAP8[i6 + ((HEAPU8[i4 + 1 >> 0] | 0) >>> 3 << 5 | (HEAPU8[i4 >> 0] | 0) >>> 3 << 10 | (HEAPU8[i4 + 2 >> 0] | 0) >>> 3) >> 0] | 0;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == (i9 | 0)) break; else {
      i4 = i4 + 4 | 0;
      i2 = i2 + 1 | 0;
     }
    }
    i3 = HEAP8[i7 >> 0] | 0;
   }
   HEAP8[i8 >> 0] = 3;
   HEAP8[i33 + 10 >> 0] = 1;
   HEAP8[i33 + 11 >> 0] = i3;
   i2 = i3 & 255;
   if ((i3 & 255) > 7) i2 = Math_imul(i2 >>> 3, i9) | 0; else i2 = ((Math_imul(i9, i2) | 0) + 7 | 0) >>> 3;
   HEAP32[i33 + 4 >> 2] = i2;
  } while (0);
  if (!(HEAP32[i33 + 4 >> 2] | 0)) _png_error(i32, 62781); else {
   i1 = HEAP32[i30 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1 & 512) {
  i3 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i5 = i33 + 9 | 0;
  if ((HEAP8[i5 >> 0] | 0) == 8) if ((HEAP8[i33 + 8 >> 0] | 0) != 3) {
   i6 = i33 + 4 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   i4 = i3 + i2 | 0;
   if ((i2 | 0) > 0) {
    i3 = i4;
    i1 = i4 + i2 | 0;
    do {
     i3 = i3 + -1 | 0;
     i27 = HEAP8[i3 >> 0] | 0;
     HEAP8[i1 + -1 >> 0] = i27;
     i1 = i1 + -2 | 0;
     HEAP8[i1 >> 0] = i27;
    } while (i1 >>> 0 > i3 >>> 0);
    i1 = HEAP32[i30 >> 2] | 0;
    i2 = HEAP32[i6 >> 2] | 0;
   }
   HEAP32[i6 >> 2] = i2 << 1;
   HEAP8[i5 >> 0] = 16;
   HEAP8[i33 + 11 >> 0] = HEAPU8[i33 + 10 >> 0] << 4;
  }
 }
 if (i1 & 16384) if (HEAP32[i32 + 208 >> 2] & 2048) {
  _png_do_gray_to_rgb(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
  i1 = HEAP32[i30 >> 2] | 0;
 }
 if (i1 & 32) {
  _png_do_invert(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
  i1 = HEAP32[i30 >> 2] | 0;
 }
 L529 : do if (i1 & 524288 | 0) {
  i1 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i3 = HEAP32[i33 >> 2] | 0;
  switch (HEAP8[i33 + 8 >> 0] | 0) {
  case 6:
   {
    i1 = i1 + (HEAP32[i33 + 4 >> 2] | 0) | 0;
    i2 = (i3 | 0) != 0;
    if ((HEAP8[i33 + 9 >> 0] | 0) == 8) {
     if (i2) i2 = 0; else break L529;
     while (1) {
      i27 = i1 + -1 | 0;
      HEAP8[i27 >> 0] = ~HEAP8[i27 >> 0];
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + -4 | 0;
     }
    } else {
     if (i2) i2 = 0; else break L529;
     while (1) {
      i27 = i1 + -1 | 0;
      HEAP8[i27 >> 0] = ~HEAP8[i27 >> 0];
      i27 = i1 + -2 | 0;
      HEAP8[i27 >> 0] = ~HEAP8[i27 >> 0];
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + -8 | 0;
     }
    }
    break;
   }
  case 4:
   {
    i1 = i1 + (HEAP32[i33 + 4 >> 2] | 0) | 0;
    i2 = (i3 | 0) != 0;
    if ((HEAP8[i33 + 9 >> 0] | 0) == 8) {
     if (i2) i2 = 0; else break L529;
     while (1) {
      i27 = i1 + -1 | 0;
      HEAP8[i27 >> 0] = ~HEAP8[i27 >> 0];
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + -2 | 0;
     }
    } else {
     if (i2) i2 = 0; else break L529;
     while (1) {
      i27 = i1 + -1 | 0;
      HEAP8[i27 >> 0] = ~HEAP8[i27 >> 0];
      i27 = i1 + -2 | 0;
      HEAP8[i27 >> 0] = ~HEAP8[i27 >> 0];
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + -4 | 0;
     }
    }
    break;
   }
  default:
   break L529;
  }
 } while (0);
 i1 = HEAP32[i30 >> 2] | 0;
 if (i1 & 8) {
  i7 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i27 = HEAP8[i33 + 8 >> 0] | 0;
  i4 = i27 & 255;
  if (i27 << 24 >> 24 != 3) {
   i5 = HEAPU8[i33 + 9 >> 0] | 0;
   if (!(i4 & 2)) {
    i1 = 1;
    i2 = i32 + 524 | 0;
    i3 = 0;
   } else {
    HEAP32[i28 >> 2] = i5 - (HEAPU8[i32 + 521 >> 0] | 0);
    HEAP32[i28 + 4 >> 2] = i5 - (HEAPU8[i32 + 522 >> 0] | 0);
    i1 = 3;
    i2 = i32 + 523 | 0;
    i3 = 2;
   }
   HEAP32[i28 + (i3 << 2) >> 2] = i5 - (HEAPU8[i2 >> 0] | 0);
   if (!(i4 & 4)) i6 = i1; else {
    HEAP32[i28 + (i1 << 2) >> 2] = i5 - (HEAPU8[i32 + 525 >> 0] | 0);
    i6 = i1 + 1 | 0;
   }
   i3 = 0;
   i1 = 0;
   do {
    i2 = i28 + (i3 << 2) | 0;
    i27 = HEAP32[i2 >> 2] | 0;
    if ((i27 | 0) > 0 & (i27 | 0) < (i5 | 0)) i1 = 1; else HEAP32[i2 >> 2] = 0;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i6 | 0));
   L565 : do if (i1 | 0) {
    i27 = i5 + -2 | 0;
    switch (i27 >>> 1 | i27 << 31 | 0) {
    case 0:
     {
      i28 = HEAP32[i33 + 4 >> 2] | 0;
      i2 = i7 + i28 | 0;
      if ((i28 | 0) > 0) i1 = i7; else break L565;
      do {
       HEAP8[i1 >> 0] = (HEAPU8[i1 >> 0] | 0) >>> 1 & 85;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 < i2 >>> 0);
      break;
     }
    case 1:
     {
      i27 = HEAP32[i33 + 4 >> 2] | 0;
      i4 = i7 + i27 | 0;
      i2 = HEAP32[i28 >> 2] | 0;
      i3 = 15 >>> i2;
      i3 = i3 << 4 | i3;
      if ((i27 | 0) > 0) i1 = i7; else break L565;
      do {
       HEAP8[i1 >> 0] = (HEAPU8[i1 >> 0] | 0) >>> i2 & i3;
       i1 = i1 + 1 | 0;
      } while (i1 >>> 0 < i4 >>> 0);
      break;
     }
    case 3:
     {
      i27 = HEAP32[i33 + 4 >> 2] | 0;
      i4 = i7 + i27 | 0;
      if ((i27 | 0) > 0) {
       i3 = 0;
       i1 = i7;
      } else break L565;
      while (1) {
       i2 = i3 + 1 | 0;
       HEAP8[i1 >> 0] = (HEAPU8[i1 >> 0] | 0) >>> (HEAP32[i28 + (i3 << 2) >> 2] | 0);
       i1 = i1 + 1 | 0;
       if (i1 >>> 0 >= i4 >>> 0) break; else i3 = (i2 | 0) >= (i6 | 0) ? 0 : i2;
      }
      break;
     }
    case 7:
     {
      i27 = HEAP32[i33 + 4 >> 2] | 0;
      i3 = i7 + i27 | 0;
      if ((i27 | 0) > 0) {
       i1 = 0;
       i2 = i7;
      } else break L565;
      while (1) {
       i27 = i2 + 1 | 0;
       i26 = (HEAPU8[i2 >> 0] << 8 | HEAPU8[i27 >> 0]) >>> (HEAP32[i28 + (i1 << 2) >> 2] | 0);
       i1 = i1 + 1 | 0;
       HEAP8[i2 >> 0] = i26 >>> 8;
       i2 = i2 + 2 | 0;
       HEAP8[i27 >> 0] = i26;
       if (i2 >>> 0 >= i3 >>> 0) break; else i1 = (i1 | 0) >= (i6 | 0) ? 0 : i1;
      }
      break;
     }
    default:
     break L565;
    }
   } while (0);
   i1 = HEAP32[i30 >> 2] | 0;
  }
 }
 do if (i1 & 4 | 0) {
  i2 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i6 = i33 + 9 | 0;
  i1 = HEAP8[i6 >> 0] | 0;
  if ((i1 & 255) >= 8) break;
  i7 = HEAP32[i33 >> 2] | 0;
  L585 : do switch (i1 << 24 >> 24) {
  case 1:
   {
    if (!i7) break L585;
    i4 = i7 + 7 & 7 ^ 7;
    i5 = i2 + i7 | 0;
    i1 = i2 + ((i7 + -1 | 0) >>> 3) | 0;
    i2 = 0;
    while (1) {
     i5 = i5 + -1 | 0;
     HEAP8[i5 >> 0] = (HEAPU8[i1 >> 0] | 0) >>> i4 & 1;
     i3 = (i4 | 0) == 7;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i7 | 0)) break; else {
      i4 = i3 ? 0 : i4 + 1 | 0;
      i1 = i3 ? i1 + -1 | 0 : i1;
     }
    }
    break;
   }
  case 2:
   {
    if (!i7) break L585;
    i4 = (i7 << 1) + 6 & 6 ^ 6;
    i5 = i2 + i7 | 0;
    i1 = i2 + ((i7 + -1 | 0) >>> 2) | 0;
    i2 = 0;
    while (1) {
     i5 = i5 + -1 | 0;
     HEAP8[i5 >> 0] = (HEAPU8[i1 >> 0] | 0) >>> i4 & 3;
     i3 = (i4 | 0) == 6;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i7 | 0)) break; else {
      i4 = i3 ? 0 : i4 + 2 | 0;
      i1 = i3 ? i1 + -1 | 0 : i1;
     }
    }
    break;
   }
  case 4:
   {
    if (!i7) break L585;
    i4 = i7 << 2 & 4;
    i5 = i2 + i7 | 0;
    i1 = i2 + ((i7 + -1 | 0) >>> 1) | 0;
    i2 = 0;
    while (1) {
     i5 = i5 + -1 | 0;
     HEAP8[i5 >> 0] = (HEAPU8[i1 >> 0] | 0) >>> i4 & 15;
     i3 = (i4 | 0) == 4;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i7 | 0)) break; else {
      i4 = i3 ? 0 : 4;
      i1 = i3 ? i1 + -1 | 0 : i1;
     }
    }
    break;
   }
  default:
   {}
  } while (0);
  HEAP8[i6 >> 0] = 8;
  i28 = HEAPU8[i33 + 10 >> 0] | 0;
  HEAP8[i33 + 11 >> 0] = i28 << 3;
  HEAP32[i33 + 4 >> 2] = Math_imul(i7, i28) | 0;
 } while (0);
 i7 = i33 + 8 | 0;
 do if ((HEAP8[i7 >> 0] | 0) == 3) {
  if ((HEAP32[i32 + 424 >> 2] | 0) <= -1) break;
  _png_do_check_palette_indexes(i32, i33);
 } while (0);
 i1 = HEAP32[i30 >> 2] | 0;
 if (i1 & 1) {
  _png_do_bgr(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
  i1 = HEAP32[i30 >> 2] | 0;
 }
 if (i1 & 65536) {
  _png_do_packswap(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
  i1 = HEAP32[i30 >> 2] | 0;
 }
 L610 : do if (i1 & 32768 | 0) {
  i1 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i6 = HEAP16[i32 + 444 >> 1] | 0;
  i3 = HEAP32[i29 >> 2] | 0;
  i5 = HEAP32[i33 >> 2] | 0;
  i4 = (i6 & 65535) >>> 8 & 255;
  i6 = i6 & 255;
  switch (HEAP8[i7 >> 0] | 0) {
  case 0:
   switch (HEAP8[i33 + 9 >> 0] | 0) {
   case 8:
    {
     i1 = i1 + i5 | 0;
     i2 = i1 + i5 | 0;
     if (!(i3 & 128)) {
      if (i5 | 0) {
       i3 = i2;
       i2 = 0;
       do {
        i1 = i1 + -1 | 0;
        HEAP8[i3 + -1 >> 0] = HEAP8[i1 >> 0] | 0;
        i3 = i3 + -2 | 0;
        HEAP8[i3 >> 0] = i6;
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 2;
      HEAP8[i33 + 11 >> 0] = 16;
      HEAP32[i33 + 4 >> 2] = i5 << 1;
      break L610;
     } else {
      HEAP8[i2 + -1 >> 0] = i6;
      if (i5 >>> 0 > 1) {
       i3 = i2;
       i2 = 1;
       do {
        i1 = i1 + -1 | 0;
        i29 = i3;
        i3 = i3 + -2 | 0;
        HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
        i2 = i2 + 1 | 0;
        HEAP8[i29 + -3 >> 0] = i6;
       } while ((i2 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 2;
      HEAP8[i33 + 11 >> 0] = 16;
      HEAP32[i33 + 4 >> 2] = i5 << 1;
      break L610;
     }
    }
   case 16:
    {
     i2 = i5 << 1;
     i1 = i1 + i2 | 0;
     i2 = i1 + i2 | 0;
     if (!(i3 & 128)) {
      if (i5 | 0) {
       i3 = i2;
       i2 = 0;
       do {
        HEAP8[i3 + -1 >> 0] = HEAP8[i1 + -1 >> 0] | 0;
        i1 = i1 + -2 | 0;
        HEAP8[i3 + -2 >> 0] = HEAP8[i1 >> 0] | 0;
        HEAP8[i3 + -3 >> 0] = i6;
        i3 = i3 + -4 | 0;
        HEAP8[i3 >> 0] = i4;
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 2;
      HEAP8[i33 + 11 >> 0] = 32;
      HEAP32[i33 + 4 >> 2] = i5 << 2;
      break L610;
     } else {
      HEAP8[i2 + -1 >> 0] = i6;
      HEAP8[i2 + -2 >> 0] = i4;
      if (i5 >>> 0 > 1) {
       i3 = i2;
       i2 = 1;
       do {
        HEAP8[i3 + -3 >> 0] = HEAP8[i1 + -1 >> 0] | 0;
        i1 = i1 + -2 | 0;
        i29 = i3;
        i3 = i3 + -4 | 0;
        HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
        i2 = i2 + 1 | 0;
        HEAP8[i29 + -5 >> 0] = i6;
        HEAP8[i29 + -6 >> 0] = i4;
       } while ((i2 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 2;
      HEAP8[i33 + 11 >> 0] = 32;
      HEAP32[i33 + 4 >> 2] = i5 << 2;
      break L610;
     }
    }
   default:
    break L610;
   }
  case 2:
   switch (HEAP8[i33 + 9 >> 0] | 0) {
   case 8:
    {
     i1 = i1 + (i5 * 3 | 0) | 0;
     i2 = i1 + i5 | 0;
     if (!(i3 & 128)) {
      if (i5 | 0) {
       i3 = i2;
       i2 = 0;
       do {
        HEAP8[i3 + -1 >> 0] = HEAP8[i1 + -1 >> 0] | 0;
        HEAP8[i3 + -2 >> 0] = HEAP8[i1 + -2 >> 0] | 0;
        i1 = i1 + -3 | 0;
        HEAP8[i3 + -3 >> 0] = HEAP8[i1 >> 0] | 0;
        i3 = i3 + -4 | 0;
        HEAP8[i3 >> 0] = i6;
        i2 = i2 + 1 | 0;
       } while ((i2 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 4;
      HEAP8[i33 + 11 >> 0] = 32;
      HEAP32[i33 + 4 >> 2] = i5 << 2;
      break L610;
     } else {
      HEAP8[i2 + -1 >> 0] = i6;
      if (i5 >>> 0 > 1) {
       i3 = i2;
       i2 = 1;
       do {
        HEAP8[i3 + -2 >> 0] = HEAP8[i1 + -1 >> 0] | 0;
        HEAP8[i3 + -3 >> 0] = HEAP8[i1 + -2 >> 0] | 0;
        i1 = i1 + -3 | 0;
        i29 = i3;
        i3 = i3 + -4 | 0;
        HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
        i2 = i2 + 1 | 0;
        HEAP8[i29 + -5 >> 0] = i6;
       } while ((i2 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 4;
      HEAP8[i33 + 11 >> 0] = 32;
      HEAP32[i33 + 4 >> 2] = i5 << 2;
      break L610;
     }
    }
   case 16:
    {
     i1 = i1 + (i5 * 6 | 0) | 0;
     i2 = i1 + (i5 << 1) | 0;
     if (!(i3 & 128)) {
      if (i5 | 0) {
       i3 = 0;
       do {
        HEAP8[i2 + -1 >> 0] = HEAP8[i1 + -1 >> 0] | 0;
        HEAP8[i2 + -2 >> 0] = HEAP8[i1 + -2 >> 0] | 0;
        HEAP8[i2 + -3 >> 0] = HEAP8[i1 + -3 >> 0] | 0;
        HEAP8[i2 + -4 >> 0] = HEAP8[i1 + -4 >> 0] | 0;
        HEAP8[i2 + -5 >> 0] = HEAP8[i1 + -5 >> 0] | 0;
        i1 = i1 + -6 | 0;
        HEAP8[i2 + -6 >> 0] = HEAP8[i1 >> 0] | 0;
        HEAP8[i2 + -7 >> 0] = i6;
        i2 = i2 + -8 | 0;
        HEAP8[i2 >> 0] = i4;
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 4;
      HEAP8[i33 + 11 >> 0] = 64;
      HEAP32[i33 + 4 >> 2] = i5 << 3;
      break L610;
     } else {
      HEAP8[i2 + -1 >> 0] = i6;
      HEAP8[i2 + -2 >> 0] = i4;
      if (i5 >>> 0 > 1) {
       i3 = 1;
       do {
        HEAP8[i2 + -3 >> 0] = HEAP8[i1 + -1 >> 0] | 0;
        HEAP8[i2 + -4 >> 0] = HEAP8[i1 + -2 >> 0] | 0;
        HEAP8[i2 + -5 >> 0] = HEAP8[i1 + -3 >> 0] | 0;
        HEAP8[i2 + -6 >> 0] = HEAP8[i1 + -4 >> 0] | 0;
        HEAP8[i2 + -7 >> 0] = HEAP8[i1 + -5 >> 0] | 0;
        i1 = i1 + -6 | 0;
        i29 = i2;
        i2 = i2 + -8 | 0;
        HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
        i3 = i3 + 1 | 0;
        HEAP8[i29 + -9 >> 0] = i6;
        HEAP8[i29 + -10 >> 0] = i4;
       } while ((i3 | 0) != (i5 | 0));
      }
      HEAP8[i33 + 10 >> 0] = 4;
      HEAP8[i33 + 11 >> 0] = 64;
      HEAP32[i33 + 4 >> 2] = i5 << 3;
      break L610;
     }
    }
   default:
    break L610;
   }
  default:
   break L610;
  }
 } while (0);
 L666 : do if (HEAP32[i30 >> 2] & 131072 | 0) {
  i1 = (HEAP32[i31 >> 2] | 0) + 1 | 0;
  i3 = HEAP32[i33 >> 2] | 0;
  switch (HEAP8[i7 >> 0] | 0) {
  case 6:
   {
    i1 = i1 + (HEAP32[i33 + 4 >> 2] | 0) | 0;
    i2 = (i3 | 0) != 0;
    if ((HEAP8[i33 + 9 >> 0] | 0) == 8) {
     if (i2) i2 = 0; else break L666;
     do {
      i28 = i1 + -1 | 0;
      i29 = HEAP8[i28 >> 0] | 0;
      i27 = i1 + -2 | 0;
      HEAP8[i28 >> 0] = HEAP8[i27 >> 0] | 0;
      i28 = i1 + -3 | 0;
      HEAP8[i27 >> 0] = HEAP8[i28 >> 0] | 0;
      i1 = i1 + -4 | 0;
      HEAP8[i28 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i1 >> 0] = i29;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i3 | 0));
    } else {
     if (i2) i2 = 0; else break L666;
     do {
      i28 = i1 + -1 | 0;
      i27 = HEAP8[i28 >> 0] | 0;
      i25 = i1 + -2 | 0;
      i29 = HEAP8[i25 >> 0] | 0;
      i26 = i1 + -3 | 0;
      HEAP8[i28 >> 0] = HEAP8[i26 >> 0] | 0;
      i28 = i1 + -4 | 0;
      HEAP8[i25 >> 0] = HEAP8[i28 >> 0] | 0;
      i25 = i1 + -5 | 0;
      HEAP8[i26 >> 0] = HEAP8[i25 >> 0] | 0;
      i26 = i1 + -6 | 0;
      HEAP8[i28 >> 0] = HEAP8[i26 >> 0] | 0;
      i28 = i1 + -7 | 0;
      HEAP8[i25 >> 0] = HEAP8[i28 >> 0] | 0;
      i1 = i1 + -8 | 0;
      HEAP8[i26 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i28 >> 0] = i27;
      HEAP8[i1 >> 0] = i29;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i3 | 0));
    }
    break;
   }
  case 4:
   {
    i1 = i1 + (HEAP32[i33 + 4 >> 2] | 0) | 0;
    i2 = (i3 | 0) != 0;
    if ((HEAP8[i33 + 9 >> 0] | 0) == 8) {
     if (i2) i2 = 0; else break L666;
     do {
      i28 = i1 + -1 | 0;
      i29 = HEAP8[i28 >> 0] | 0;
      i1 = i1 + -2 | 0;
      HEAP8[i28 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i1 >> 0] = i29;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i3 | 0));
    } else {
     if (i2) i2 = 0; else break L666;
     do {
      i25 = i1 + -1 | 0;
      i27 = HEAP8[i25 >> 0] | 0;
      i26 = i1 + -2 | 0;
      i29 = HEAP8[i26 >> 0] | 0;
      i28 = i1 + -3 | 0;
      HEAP8[i25 >> 0] = HEAP8[i28 >> 0] | 0;
      i1 = i1 + -4 | 0;
      HEAP8[i26 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i28 >> 0] = i27;
      HEAP8[i1 >> 0] = i29;
      i2 = i2 + 1 | 0;
     } while ((i2 | 0) != (i3 | 0));
    }
    break;
   }
  default:
   break L666;
  }
 } while (0);
 i1 = HEAP32[i30 >> 2] | 0;
 if (i1 & 16) {
  _png_do_swap(i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
  i1 = HEAP32[i30 >> 2] | 0;
 }
 if (!(i1 & 1048576)) {
  STACKTOP = i34;
  return;
 }
 i1 = HEAP32[i32 + 192 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_viii[i1 & 63](i32, i33, (HEAP32[i31 >> 2] | 0) + 1 | 0);
 i1 = HEAP8[i32 + 204 >> 0] | 0;
 if (i1 << 24 >> 24) HEAP8[i33 + 9 >> 0] = i1;
 i1 = HEAP8[i32 + 205 >> 0] | 0;
 i2 = i33 + 10 | 0;
 if (!(i1 << 24 >> 24)) i1 = HEAP8[i2 >> 0] | 0; else HEAP8[i2 >> 0] = i1;
 i1 = Math_imul(i1 & 255, HEAPU8[i33 + 9 >> 0] | 0) | 0;
 HEAP8[i33 + 11 >> 0] = i1;
 i1 = i1 & 255;
 i2 = HEAP32[i33 >> 2] | 0;
 if (i1 >>> 0 > 7) i1 = Math_imul(i1 >>> 3, i2) | 0; else i1 = ((Math_imul(i1, i2) | 0) + 7 | 0) >>> 3;
 HEAP32[i33 + 4 >> 2] = i1;
 STACKTOP = i34;
 return;
}

function _SDL_BlendFillRect_RGB(i398, i402, i2, i5, i399, i400, i1) {
 i398 = i398 | 0;
 i402 = i402 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i399 = i399 | 0;
 i400 = i400 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i227 = 0, i228 = 0, i229 = 0, i230 = 0, i231 = 0, i232 = 0, i233 = 0, i234 = 0, i235 = 0, i236 = 0, i237 = 0, i238 = 0, i239 = 0, i240 = 0, i241 = 0, i242 = 0, i243 = 0, i244 = 0, i245 = 0, i246 = 0, i247 = 0, i248 = 0, i249 = 0, i250 = 0, i251 = 0, i252 = 0, i253 = 0, i254 = 0, i255 = 0, i256 = 0, i257 = 0, i258 = 0, i259 = 0, i260 = 0, i261 = 0, i262 = 0, i263 = 0, i264 = 0, i265 = 0, i266 = 0, i267 = 0, i268 = 0, i269 = 0, i270 = 0, i271 = 0, i272 = 0, i273 = 0, i274 = 0, i275 = 0, i276 = 0, i277 = 0, i278 = 0, i279 = 0, i280 = 0, i281 = 0, i282 = 0, i283 = 0, i284 = 0, i285 = 0, i286 = 0, i287 = 0, i288 = 0, i289 = 0, i290 = 0, i291 = 0, i292 = 0, i293 = 0, i294 = 0, i295 = 0, i296 = 0, i297 = 0, i298 = 0, i299 = 0, i300 = 0, i301 = 0, i302 = 0, i303 = 0, i304 = 0, i305 = 0, i306 = 0, i307 = 0, i308 = 0, i309 = 0, i310 = 0, i311 = 0, i312 = 0, i313 = 0, i314 = 0, i315 = 0, i316 = 0, i317 = 0, i318 = 0, i319 = 0, i320 = 0, i321 = 0, i322 = 0, i323 = 0, i324 = 0, i325 = 0, i326 = 0, i327 = 0, i328 = 0, i329 = 0, i330 = 0, i331 = 0, i332 = 0, i333 = 0, i334 = 0, i335 = 0, i336 = 0, i337 = 0, i338 = 0, i339 = 0, i340 = 0, i341 = 0, i342 = 0, i343 = 0, i344 = 0, i345 = 0, i346 = 0, i347 = 0, i348 = 0, i349 = 0, i350 = 0, i351 = 0, i352 = 0, i353 = 0, i354 = 0, i355 = 0, i356 = 0, i357 = 0, i358 = 0, i359 = 0, i360 = 0, i361 = 0, i362 = 0, i363 = 0, i364 = 0, i365 = 0, i366 = 0, i367 = 0, i368 = 0, i369 = 0, i370 = 0, i371 = 0, i372 = 0, i373 = 0, i374 = 0, i375 = 0, i376 = 0, i377 = 0, i378 = 0, i379 = 0, i380 = 0, i381 = 0, i382 = 0, i383 = 0, i384 = 0, i385 = 0, i386 = 0, i387 = 0, i388 = 0, i389 = 0, i390 = 0, i391 = 0, i392 = 0, i393 = 0, i394 = 0, i395 = 0, i396 = 0, i397 = 0, i401 = 0, i403 = 0;
 i401 = HEAP32[i398 + 4 >> 2] | 0;
 i397 = ~i1 & 255;
 i16 = HEAP8[i401 + 9 >> 0] | 0;
 i3 = i16 & 255;
 switch (i16 << 24 >> 24) {
 case 2:
  {
   switch (i2 | 0) {
   case 1:
    {
     i1 = HEAP32[i402 + 8 >> 2] | 0;
     i2 = HEAP32[i402 + 12 >> 2] | 0;
     i4 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i18 = i4 - i1 | 0;
     if (!i2) {
      i403 = 0;
      return i403 | 0;
     }
     i19 = (i1 + 3 | 0) / 4 | 0;
     i17 = i1 & 255;
     i8 = i401 + 28 | 0;
     i9 = i401 + 12 | 0;
     i10 = i401 + 32 | 0;
     i11 = i401 + 29 | 0;
     i12 = i401 + 16 | 0;
     i13 = i401 + 33 | 0;
     i14 = i401 + 30 | 0;
     i15 = i401 + 20 | 0;
     i16 = i401 + 34 | 0;
     i7 = i5 & 255;
     i6 = i399 & 255;
     i5 = i400 & 255;
     i3 = i401 + 24 | 0;
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i4) | 0) << 1) + (HEAP32[i402 >> 2] << 1) | 0;
     L31 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i17 & 3) {
      case 0:
       {
        i327 = HEAP8[i8 >> 0] | 0;
        i359 = HEAP8[i11 >> 0] | 0;
        i383 = HEAP8[i14 >> 0] | 0;
        i85 = i19;
        i91 = i1;
        i311 = i327;
        i321 = HEAP32[i9 >> 2] | 0;
        i322 = HEAP8[i10 >> 0] | 0;
        i327 = HEAP32[5724 + ((i327 & 255) << 2) >> 2] | 0;
        i337 = i359;
        i345 = HEAP32[i12 >> 2] | 0;
        i351 = HEAP8[i13 >> 0] | 0;
        i359 = HEAP32[5724 + ((i359 & 255) << 2) >> 2] | 0;
        i368 = i383;
        i376 = HEAP32[i15 >> 2] | 0;
        i381 = HEAP8[i16 >> 0] | 0;
        i383 = HEAP32[5724 + ((i383 & 255) << 2) >> 2] | 0;
        i393 = HEAP32[i3 >> 2] | 0;
        i1 = 10;
        break;
       }
      case 3:
       {
        i160 = HEAP8[i8 >> 0] | 0;
        i173 = HEAP8[i11 >> 0] | 0;
        i197 = HEAP8[i14 >> 0] | 0;
        i92 = i19;
        i103 = i1;
        i139 = i160;
        i149 = HEAP32[i9 >> 2] | 0;
        i151 = HEAP8[i10 >> 0] | 0;
        i160 = HEAP32[5724 + ((i160 & 255) << 2) >> 2] | 0;
        i161 = i173;
        i162 = HEAP32[i12 >> 2] | 0;
        i169 = HEAP8[i13 >> 0] | 0;
        i173 = HEAP32[5724 + ((i173 & 255) << 2) >> 2] | 0;
        i183 = i197;
        i186 = HEAP32[i15 >> 2] | 0;
        i193 = HEAP8[i16 >> 0] | 0;
        i197 = HEAP32[5724 + ((i197 & 255) << 2) >> 2] | 0;
        i228 = HEAP32[i3 >> 2] | 0;
        i1 = 11;
        break;
       }
      case 2:
       {
        i245 = HEAP8[i8 >> 0] | 0;
        i249 = HEAP8[i11 >> 0] | 0;
        i253 = HEAP8[i14 >> 0] | 0;
        i104 = i19;
        i115 = i1;
        i237 = i245;
        i243 = HEAP32[i9 >> 2] | 0;
        i244 = HEAP8[i10 >> 0] | 0;
        i245 = HEAP32[5724 + ((i245 & 255) << 2) >> 2] | 0;
        i246 = i249;
        i247 = HEAP32[i12 >> 2] | 0;
        i248 = HEAP8[i13 >> 0] | 0;
        i249 = HEAP32[5724 + ((i249 & 255) << 2) >> 2] | 0;
        i250 = i253;
        i251 = HEAP32[i15 >> 2] | 0;
        i252 = HEAP8[i16 >> 0] | 0;
        i253 = HEAP32[5724 + ((i253 & 255) << 2) >> 2] | 0;
        i254 = HEAP32[i3 >> 2] | 0;
        i1 = 12;
        break;
       }
      case 1:
       {
        i258 = HEAP8[i8 >> 0] | 0;
        i262 = HEAP8[i11 >> 0] | 0;
        i266 = HEAP8[i14 >> 0] | 0;
        i116 = i19;
        i127 = i1;
        i255 = i258;
        i256 = HEAP32[i9 >> 2] | 0;
        i257 = HEAP8[i10 >> 0] | 0;
        i258 = HEAP32[5724 + ((i258 & 255) << 2) >> 2] | 0;
        i259 = i262;
        i260 = HEAP32[i12 >> 2] | 0;
        i261 = HEAP8[i13 >> 0] | 0;
        i262 = HEAP32[5724 + ((i262 & 255) << 2) >> 2] | 0;
        i263 = i266;
        i264 = HEAP32[i15 >> 2] | 0;
        i265 = HEAP8[i16 >> 0] | 0;
        i266 = HEAP32[5724 + ((i266 & 255) << 2) >> 2] | 0;
        i267 = HEAP32[i3 >> 2] | 0;
        i1 = 13;
        break;
       }
      default:
       {
        i1 = 14;
        break L31;
       }
      }
      while (1) if ((i1 | 0) == 10) {
       i103 = HEAPU16[i91 >> 1] | 0;
       i139 = i322 & 255;
       i149 = i351 & 255;
       i92 = i381 & 255;
       HEAP16[i91 >> 1] = ((((Math_imul(HEAPU8[i359 + ((i345 & i103) >>> i149) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i337 & 255) << i149 | ((((Math_imul(HEAPU8[i327 + ((i321 & i103) >>> i139) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i311 & 255) << i139 | i393 | ((((Math_imul(HEAPU8[i383 + ((i376 & i103) >>> i92) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i368 & 255) << i92;
       i92 = i85;
       i103 = i91 + 2 | 0;
       i139 = i311;
       i149 = i321;
       i151 = i322;
       i160 = i327;
       i161 = i337;
       i162 = i345;
       i169 = i351;
       i173 = i359;
       i183 = i368;
       i186 = i376;
       i193 = i381;
       i197 = i383;
       i228 = i393;
       i1 = 11;
       continue;
      } else if ((i1 | 0) == 11) {
       i115 = HEAPU16[i103 >> 1] | 0;
       i237 = i151 & 255;
       i243 = i169 & 255;
       i104 = i193 & 255;
       HEAP16[i103 >> 1] = ((((Math_imul(HEAPU8[i173 + ((i162 & i115) >>> i243) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i161 & 255) << i243 | ((((Math_imul(HEAPU8[i160 + ((i149 & i115) >>> i237) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i139 & 255) << i237 | i228 | ((((Math_imul(HEAPU8[i197 + ((i186 & i115) >>> i104) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i183 & 255) << i104;
       i104 = i92;
       i115 = i103 + 2 | 0;
       i237 = i139;
       i243 = i149;
       i244 = i151;
       i245 = i160;
       i246 = i161;
       i247 = i162;
       i248 = i169;
       i249 = i173;
       i250 = i183;
       i251 = i186;
       i252 = i193;
       i253 = i197;
       i254 = i228;
       i1 = 12;
       continue;
      } else if ((i1 | 0) == 12) {
       i127 = HEAPU16[i115 >> 1] | 0;
       i255 = i244 & 255;
       i256 = i248 & 255;
       i116 = i252 & 255;
       HEAP16[i115 >> 1] = ((((Math_imul(HEAPU8[i249 + ((i247 & i127) >>> i256) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i246 & 255) << i256 | ((((Math_imul(HEAPU8[i245 + ((i243 & i127) >>> i255) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i237 & 255) << i255 | i254 | ((((Math_imul(HEAPU8[i253 + ((i251 & i127) >>> i116) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i250 & 255) << i116;
       i116 = i104;
       i127 = i115 + 2 | 0;
       i255 = i237;
       i256 = i243;
       i257 = i244;
       i258 = i245;
       i259 = i246;
       i260 = i247;
       i261 = i248;
       i262 = i249;
       i263 = i250;
       i264 = i251;
       i265 = i252;
       i266 = i253;
       i267 = i254;
       i1 = 13;
       continue;
      } else if ((i1 | 0) == 13) {
       i402 = HEAPU16[i127 >> 1] | 0;
       i401 = i257 & 255;
       i400 = i261 & 255;
       i1 = i265 & 255;
       HEAP16[i127 >> 1] = ((((Math_imul(HEAPU8[i262 + ((i260 & i402) >>> i400) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i259 & 255) << i400 | ((((Math_imul(HEAPU8[i258 + ((i256 & i402) >>> i401) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i255 & 255) << i401 | i267 | ((((Math_imul(HEAPU8[i266 + ((i264 & i402) >>> i1) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i263 & 255) << i1;
       i1 = i127 + 2 | 0;
       if ((i116 | 0) > 1) {
        i85 = i116 + -1 | 0;
        i91 = i1;
        i311 = i255;
        i321 = i256;
        i322 = i257;
        i327 = i258;
        i337 = i259;
        i345 = i260;
        i351 = i261;
        i359 = i262;
        i368 = i263;
        i376 = i264;
        i381 = i265;
        i383 = i266;
        i393 = i267;
        i1 = 10;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i18 << 1) | 0;
     }
     if ((i1 | 0) != 14) if ((i1 | 0) == 109) return i403 | 0;
     break;
    }
   case 2:
    {
     i2 = HEAP32[i402 + 8 >> 2] | 0;
     i17 = HEAP32[i402 + 12 >> 2] | 0;
     i1 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i19 = i1 - i2 | 0;
     if (!i17) {
      i403 = 0;
      return i403 | 0;
     }
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
     i18 = (i2 + 3 | 0) / 4 | 0;
     i16 = i2 & 255;
     i7 = i401 + 28 | 0;
     i8 = i401 + 12 | 0;
     i9 = i401 + 32 | 0;
     i10 = i401 + 29 | 0;
     i11 = i401 + 16 | 0;
     i12 = i401 + 33 | 0;
     i13 = i401 + 30 | 0;
     i14 = i401 + 20 | 0;
     i15 = i401 + 34 | 0;
     i6 = i5 & 255;
     i5 = i399 & 255;
     i4 = i400 & 255;
     i3 = i401 + 24 | 0;
     i1 = i1 + (HEAP32[i402 >> 2] << 1) | 0;
     i2 = i17;
     L52 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i16 & 3) {
      case 0:
       {
        i271 = HEAP8[i7 >> 0] | 0;
        i275 = HEAP8[i10 >> 0] | 0;
        i279 = HEAP8[i13 >> 0] | 0;
        i86 = i18;
        i93 = i1;
        i268 = i271;
        i269 = HEAP32[i8 >> 2] | 0;
        i270 = HEAP8[i9 >> 0] | 0;
        i271 = HEAP32[5724 + ((i271 & 255) << 2) >> 2] | 0;
        i272 = i275;
        i273 = HEAP32[i11 >> 2] | 0;
        i274 = HEAP8[i12 >> 0] | 0;
        i275 = HEAP32[5724 + ((i275 & 255) << 2) >> 2] | 0;
        i276 = i279;
        i277 = HEAP32[i14 >> 2] | 0;
        i278 = HEAP8[i15 >> 0] | 0;
        i279 = HEAP32[5724 + ((i279 & 255) << 2) >> 2] | 0;
        i280 = HEAP32[i3 >> 2] | 0;
        i1 = 23;
        break;
       }
      case 3:
       {
        i284 = HEAP8[i7 >> 0] | 0;
        i288 = HEAP8[i10 >> 0] | 0;
        i292 = HEAP8[i13 >> 0] | 0;
        i94 = i18;
        i105 = i1;
        i281 = i284;
        i282 = HEAP32[i8 >> 2] | 0;
        i283 = HEAP8[i9 >> 0] | 0;
        i284 = HEAP32[5724 + ((i284 & 255) << 2) >> 2] | 0;
        i285 = i288;
        i286 = HEAP32[i11 >> 2] | 0;
        i287 = HEAP8[i12 >> 0] | 0;
        i288 = HEAP32[5724 + ((i288 & 255) << 2) >> 2] | 0;
        i289 = i292;
        i290 = HEAP32[i14 >> 2] | 0;
        i291 = HEAP8[i15 >> 0] | 0;
        i292 = HEAP32[5724 + ((i292 & 255) << 2) >> 2] | 0;
        i293 = HEAP32[i3 >> 2] | 0;
        i1 = 24;
        break;
       }
      case 2:
       {
        i297 = HEAP8[i7 >> 0] | 0;
        i301 = HEAP8[i10 >> 0] | 0;
        i305 = HEAP8[i13 >> 0] | 0;
        i106 = i18;
        i117 = i1;
        i294 = i297;
        i295 = HEAP32[i8 >> 2] | 0;
        i296 = HEAP8[i9 >> 0] | 0;
        i297 = HEAP32[5724 + ((i297 & 255) << 2) >> 2] | 0;
        i298 = i301;
        i299 = HEAP32[i11 >> 2] | 0;
        i300 = HEAP8[i12 >> 0] | 0;
        i301 = HEAP32[5724 + ((i301 & 255) << 2) >> 2] | 0;
        i302 = i305;
        i303 = HEAP32[i14 >> 2] | 0;
        i304 = HEAP8[i15 >> 0] | 0;
        i305 = HEAP32[5724 + ((i305 & 255) << 2) >> 2] | 0;
        i306 = HEAP32[i3 >> 2] | 0;
        i1 = 25;
        break;
       }
      case 1:
       {
        i310 = HEAP8[i7 >> 0] | 0;
        i315 = HEAP8[i10 >> 0] | 0;
        i319 = HEAP8[i13 >> 0] | 0;
        i118 = i18;
        i128 = i1;
        i307 = i310;
        i308 = HEAP32[i8 >> 2] | 0;
        i309 = HEAP8[i9 >> 0] | 0;
        i310 = HEAP32[5724 + ((i310 & 255) << 2) >> 2] | 0;
        i312 = i315;
        i313 = HEAP32[i11 >> 2] | 0;
        i314 = HEAP8[i12 >> 0] | 0;
        i315 = HEAP32[5724 + ((i315 & 255) << 2) >> 2] | 0;
        i316 = i319;
        i317 = HEAP32[i14 >> 2] | 0;
        i318 = HEAP8[i15 >> 0] | 0;
        i319 = HEAP32[5724 + ((i319 & 255) << 2) >> 2] | 0;
        i320 = HEAP32[i3 >> 2] | 0;
        i1 = 26;
        break;
       }
      default:
       {
        i1 = 27;
        break L52;
       }
      }
      while (1) if ((i1 | 0) == 23) {
       i105 = HEAPU16[i93 >> 1] | 0;
       i281 = i270 & 255;
       i283 = i274 & 255;
       i94 = i278 & 255;
       i282 = (HEAPU8[i271 + ((i269 & i105) >>> i281) >> 0] | 0) + i6 | 0;
       i284 = (HEAPU8[i275 + ((i273 & i105) >>> i283) >> 0] | 0) + i5 | 0;
       i105 = (HEAPU8[i279 + ((i277 & i105) >>> i94) >> 0] | 0) + i4 | 0;
       HEAP16[i93 >> 1] = (i284 >>> 0 < 255 ? i284 : 255) >>> (i272 & 255) << i283 | (i282 >>> 0 < 255 ? i282 : 255) >>> (i268 & 255) << i281 | i280 | (i105 >>> 0 < 255 ? i105 : 255) >>> (i276 & 255) << i94;
       i94 = i86;
       i105 = i93 + 2 | 0;
       i281 = i268;
       i282 = i269;
       i283 = i270;
       i284 = i271;
       i285 = i272;
       i286 = i273;
       i287 = i274;
       i288 = i275;
       i289 = i276;
       i290 = i277;
       i291 = i278;
       i292 = i279;
       i293 = i280;
       i1 = 24;
       continue;
      } else if ((i1 | 0) == 24) {
       i117 = HEAPU16[i105 >> 1] | 0;
       i294 = i283 & 255;
       i296 = i287 & 255;
       i106 = i291 & 255;
       i295 = (HEAPU8[i284 + ((i282 & i117) >>> i294) >> 0] | 0) + i6 | 0;
       i297 = (HEAPU8[i288 + ((i286 & i117) >>> i296) >> 0] | 0) + i5 | 0;
       i117 = (HEAPU8[i292 + ((i290 & i117) >>> i106) >> 0] | 0) + i4 | 0;
       HEAP16[i105 >> 1] = (i297 >>> 0 < 255 ? i297 : 255) >>> (i285 & 255) << i296 | (i295 >>> 0 < 255 ? i295 : 255) >>> (i281 & 255) << i294 | i293 | (i117 >>> 0 < 255 ? i117 : 255) >>> (i289 & 255) << i106;
       i106 = i94;
       i117 = i105 + 2 | 0;
       i294 = i281;
       i295 = i282;
       i296 = i283;
       i297 = i284;
       i298 = i285;
       i299 = i286;
       i300 = i287;
       i301 = i288;
       i302 = i289;
       i303 = i290;
       i304 = i291;
       i305 = i292;
       i306 = i293;
       i1 = 25;
       continue;
      } else if ((i1 | 0) == 25) {
       i128 = HEAPU16[i117 >> 1] | 0;
       i307 = i296 & 255;
       i309 = i300 & 255;
       i118 = i304 & 255;
       i308 = (HEAPU8[i297 + ((i295 & i128) >>> i307) >> 0] | 0) + i6 | 0;
       i310 = (HEAPU8[i301 + ((i299 & i128) >>> i309) >> 0] | 0) + i5 | 0;
       i128 = (HEAPU8[i305 + ((i303 & i128) >>> i118) >> 0] | 0) + i4 | 0;
       HEAP16[i117 >> 1] = (i310 >>> 0 < 255 ? i310 : 255) >>> (i298 & 255) << i309 | (i308 >>> 0 < 255 ? i308 : 255) >>> (i294 & 255) << i307 | i306 | (i128 >>> 0 < 255 ? i128 : 255) >>> (i302 & 255) << i118;
       i118 = i106;
       i128 = i117 + 2 | 0;
       i307 = i294;
       i308 = i295;
       i309 = i296;
       i310 = i297;
       i312 = i298;
       i313 = i299;
       i314 = i300;
       i315 = i301;
       i316 = i302;
       i317 = i303;
       i318 = i304;
       i319 = i305;
       i320 = i306;
       i1 = 26;
       continue;
      } else if ((i1 | 0) == 26) {
       i402 = HEAPU16[i128 >> 1] | 0;
       i401 = i309 & 255;
       i399 = i314 & 255;
       i1 = i318 & 255;
       i400 = (HEAPU8[i310 + ((i308 & i402) >>> i401) >> 0] | 0) + i6 | 0;
       i398 = (HEAPU8[i315 + ((i313 & i402) >>> i399) >> 0] | 0) + i5 | 0;
       i402 = (HEAPU8[i319 + ((i317 & i402) >>> i1) >> 0] | 0) + i4 | 0;
       HEAP16[i128 >> 1] = (i398 >>> 0 < 255 ? i398 : 255) >>> (i312 & 255) << i399 | (i400 >>> 0 < 255 ? i400 : 255) >>> (i307 & 255) << i401 | i320 | (i402 >>> 0 < 255 ? i402 : 255) >>> (i316 & 255) << i1;
       i1 = i128 + 2 | 0;
       if ((i118 | 0) > 1) {
        i86 = i118 + -1 | 0;
        i93 = i1;
        i268 = i307;
        i269 = i308;
        i270 = i309;
        i271 = i310;
        i272 = i312;
        i273 = i313;
        i274 = i314;
        i275 = i315;
        i276 = i316;
        i277 = i317;
        i278 = i318;
        i279 = i319;
        i280 = i320;
        i1 = 23;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i19 << 1) | 0;
     }
     if ((i1 | 0) != 27) if ((i1 | 0) == 109) return i403 | 0;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i402 + 8 >> 2] | 0;
     i17 = HEAP32[i402 + 12 >> 2] | 0;
     i1 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i19 = i1 - i2 | 0;
     if (!i17) {
      i403 = 0;
      return i403 | 0;
     }
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
     i18 = (i2 + 3 | 0) / 4 | 0;
     i16 = i2 & 255;
     i7 = i401 + 28 | 0;
     i8 = i401 + 12 | 0;
     i9 = i401 + 32 | 0;
     i10 = i401 + 29 | 0;
     i11 = i401 + 16 | 0;
     i12 = i401 + 33 | 0;
     i13 = i401 + 30 | 0;
     i14 = i401 + 20 | 0;
     i15 = i401 + 34 | 0;
     i6 = i5 & 255;
     i5 = i399 & 255;
     i4 = i400 & 255;
     i3 = i401 + 24 | 0;
     i1 = i1 + (HEAP32[i402 >> 2] << 1) | 0;
     i2 = i17;
     L73 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i16 & 3) {
      case 0:
       {
        i326 = HEAP8[i7 >> 0] | 0;
        i331 = HEAP8[i10 >> 0] | 0;
        i335 = HEAP8[i13 >> 0] | 0;
        i87 = i18;
        i95 = i1;
        i323 = i326;
        i324 = HEAP32[i8 >> 2] | 0;
        i325 = HEAP8[i9 >> 0] | 0;
        i326 = HEAP32[5724 + ((i326 & 255) << 2) >> 2] | 0;
        i328 = i331;
        i329 = HEAP32[i11 >> 2] | 0;
        i330 = HEAP8[i12 >> 0] | 0;
        i331 = HEAP32[5724 + ((i331 & 255) << 2) >> 2] | 0;
        i332 = i335;
        i333 = HEAP32[i14 >> 2] | 0;
        i334 = HEAP8[i15 >> 0] | 0;
        i335 = HEAP32[5724 + ((i335 & 255) << 2) >> 2] | 0;
        i336 = HEAP32[i3 >> 2] | 0;
        i1 = 36;
        break;
       }
      case 3:
       {
        i341 = HEAP8[i7 >> 0] | 0;
        i346 = HEAP8[i10 >> 0] | 0;
        i350 = HEAP8[i13 >> 0] | 0;
        i96 = i18;
        i107 = i1;
        i338 = i341;
        i339 = HEAP32[i8 >> 2] | 0;
        i340 = HEAP8[i9 >> 0] | 0;
        i341 = HEAP32[5724 + ((i341 & 255) << 2) >> 2] | 0;
        i342 = i346;
        i343 = HEAP32[i11 >> 2] | 0;
        i344 = HEAP8[i12 >> 0] | 0;
        i346 = HEAP32[5724 + ((i346 & 255) << 2) >> 2] | 0;
        i347 = i350;
        i348 = HEAP32[i14 >> 2] | 0;
        i349 = HEAP8[i15 >> 0] | 0;
        i350 = HEAP32[5724 + ((i350 & 255) << 2) >> 2] | 0;
        i352 = HEAP32[i3 >> 2] | 0;
        i1 = 37;
        break;
       }
      case 2:
       {
        i356 = HEAP8[i7 >> 0] | 0;
        i361 = HEAP8[i10 >> 0] | 0;
        i365 = HEAP8[i13 >> 0] | 0;
        i108 = i18;
        i119 = i1;
        i353 = i356;
        i354 = HEAP32[i8 >> 2] | 0;
        i355 = HEAP8[i9 >> 0] | 0;
        i356 = HEAP32[5724 + ((i356 & 255) << 2) >> 2] | 0;
        i357 = i361;
        i358 = HEAP32[i11 >> 2] | 0;
        i360 = HEAP8[i12 >> 0] | 0;
        i361 = HEAP32[5724 + ((i361 & 255) << 2) >> 2] | 0;
        i362 = i365;
        i363 = HEAP32[i14 >> 2] | 0;
        i364 = HEAP8[i15 >> 0] | 0;
        i365 = HEAP32[5724 + ((i365 & 255) << 2) >> 2] | 0;
        i366 = HEAP32[i3 >> 2] | 0;
        i1 = 38;
        break;
       }
      case 1:
       {
        i371 = HEAP8[i7 >> 0] | 0;
        i375 = HEAP8[i10 >> 0] | 0;
        i380 = HEAP8[i13 >> 0] | 0;
        i120 = i18;
        i129 = i1;
        i367 = i371;
        i369 = HEAP32[i8 >> 2] | 0;
        i370 = HEAP8[i9 >> 0] | 0;
        i371 = HEAP32[5724 + ((i371 & 255) << 2) >> 2] | 0;
        i372 = i375;
        i373 = HEAP32[i11 >> 2] | 0;
        i374 = HEAP8[i12 >> 0] | 0;
        i375 = HEAP32[5724 + ((i375 & 255) << 2) >> 2] | 0;
        i377 = i380;
        i378 = HEAP32[i14 >> 2] | 0;
        i379 = HEAP8[i15 >> 0] | 0;
        i380 = HEAP32[5724 + ((i380 & 255) << 2) >> 2] | 0;
        i382 = HEAP32[i3 >> 2] | 0;
        i1 = 39;
        break;
       }
      default:
       {
        i1 = 40;
        break L73;
       }
      }
      while (1) if ((i1 | 0) == 36) {
       i107 = HEAPU16[i95 >> 1] | 0;
       i338 = i325 & 255;
       i339 = i330 & 255;
       i96 = i334 & 255;
       HEAP16[i95 >> 1] = (((Math_imul(HEAPU8[i331 + ((i329 & i107) >>> i339) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i328 & 255) << i339 | (((Math_imul(HEAPU8[i326 + ((i324 & i107) >>> i338) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i323 & 255) << i338 | i336 | (((Math_imul(HEAPU8[i335 + ((i333 & i107) >>> i96) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i332 & 255) << i96;
       i96 = i87;
       i107 = i95 + 2 | 0;
       i338 = i323;
       i339 = i324;
       i340 = i325;
       i341 = i326;
       i342 = i328;
       i343 = i329;
       i344 = i330;
       i346 = i331;
       i347 = i332;
       i348 = i333;
       i349 = i334;
       i350 = i335;
       i352 = i336;
       i1 = 37;
       continue;
      } else if ((i1 | 0) == 37) {
       i119 = HEAPU16[i107 >> 1] | 0;
       i353 = i340 & 255;
       i354 = i344 & 255;
       i108 = i349 & 255;
       HEAP16[i107 >> 1] = (((Math_imul(HEAPU8[i346 + ((i343 & i119) >>> i354) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i342 & 255) << i354 | (((Math_imul(HEAPU8[i341 + ((i339 & i119) >>> i353) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i338 & 255) << i353 | i352 | (((Math_imul(HEAPU8[i350 + ((i348 & i119) >>> i108) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i347 & 255) << i108;
       i108 = i96;
       i119 = i107 + 2 | 0;
       i353 = i338;
       i354 = i339;
       i355 = i340;
       i356 = i341;
       i357 = i342;
       i358 = i343;
       i360 = i344;
       i361 = i346;
       i362 = i347;
       i363 = i348;
       i364 = i349;
       i365 = i350;
       i366 = i352;
       i1 = 38;
       continue;
      } else if ((i1 | 0) == 38) {
       i129 = HEAPU16[i119 >> 1] | 0;
       i367 = i355 & 255;
       i369 = i360 & 255;
       i120 = i364 & 255;
       HEAP16[i119 >> 1] = (((Math_imul(HEAPU8[i361 + ((i358 & i129) >>> i369) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i357 & 255) << i369 | (((Math_imul(HEAPU8[i356 + ((i354 & i129) >>> i367) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i353 & 255) << i367 | i366 | (((Math_imul(HEAPU8[i365 + ((i363 & i129) >>> i120) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i362 & 255) << i120;
       i120 = i108;
       i129 = i119 + 2 | 0;
       i367 = i353;
       i369 = i354;
       i370 = i355;
       i371 = i356;
       i372 = i357;
       i373 = i358;
       i374 = i360;
       i375 = i361;
       i377 = i362;
       i378 = i363;
       i379 = i364;
       i380 = i365;
       i382 = i366;
       i1 = 39;
       continue;
      } else if ((i1 | 0) == 39) {
       i402 = HEAPU16[i129 >> 1] | 0;
       i401 = i370 & 255;
       i400 = i374 & 255;
       i1 = i379 & 255;
       HEAP16[i129 >> 1] = (((Math_imul(HEAPU8[i375 + ((i373 & i402) >>> i400) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i372 & 255) << i400 | (((Math_imul(HEAPU8[i371 + ((i369 & i402) >>> i401) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i367 & 255) << i401 | i382 | (((Math_imul(HEAPU8[i380 + ((i378 & i402) >>> i1) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i377 & 255) << i1;
       i1 = i129 + 2 | 0;
       if ((i120 | 0) > 1) {
        i87 = i120 + -1 | 0;
        i95 = i1;
        i323 = i367;
        i324 = i369;
        i325 = i370;
        i326 = i371;
        i328 = i372;
        i329 = i373;
        i330 = i374;
        i331 = i375;
        i332 = i377;
        i333 = i378;
        i334 = i379;
        i335 = i380;
        i336 = i382;
        i1 = 36;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i19 << 1) | 0;
     }
     if ((i1 | 0) != 40) if ((i1 | 0) == 109) return i403 | 0;
     break;
    }
   default:
    {
     i2 = HEAP32[i402 + 8 >> 2] | 0;
     i14 = HEAP32[i402 + 12 >> 2] | 0;
     i1 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i16 = i1 - i2 | 0;
     if (!i14) {
      i403 = 0;
      return i403 | 0;
     }
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
     i15 = (i2 + 3 | 0) / 4 | 0;
     i13 = i2 & 255;
     i12 = i5 & 255;
     i11 = i399 & 255;
     i4 = i400 & 255;
     i5 = i401 + 28 | 0;
     i6 = i401 + 32 | 0;
     i7 = i401 + 29 | 0;
     i8 = i401 + 33 | 0;
     i9 = i401 + 30 | 0;
     i10 = i401 + 34 | 0;
     i3 = i401 + 24 | 0;
     i1 = i1 + (HEAP32[i402 >> 2] << 1) | 0;
     i2 = i14;
     L10 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i13 & 3) {
      case 0:
       {
        i17 = i15;
        i19 = i1;
        i57 = HEAP8[i5 >> 0] | 0;
        i58 = HEAP8[i6 >> 0] | 0;
        i59 = HEAP8[i7 >> 0] | 0;
        i60 = HEAP8[i8 >> 0] | 0;
        i61 = HEAP8[i9 >> 0] | 0;
        i62 = HEAP8[i10 >> 0] | 0;
        i63 = HEAP32[i3 >> 2] | 0;
        i1 = 49;
        break;
       }
      case 3:
       {
        i20 = i15;
        i23 = i1;
        i64 = HEAP8[i5 >> 0] | 0;
        i65 = HEAP8[i6 >> 0] | 0;
        i66 = HEAP8[i7 >> 0] | 0;
        i67 = HEAP8[i8 >> 0] | 0;
        i68 = HEAP8[i9 >> 0] | 0;
        i69 = HEAP8[i10 >> 0] | 0;
        i70 = HEAP32[i3 >> 2] | 0;
        i1 = 50;
        break;
       }
      case 2:
       {
        i24 = i15;
        i27 = i1;
        i71 = HEAP8[i5 >> 0] | 0;
        i72 = HEAP8[i6 >> 0] | 0;
        i73 = HEAP8[i7 >> 0] | 0;
        i74 = HEAP8[i8 >> 0] | 0;
        i75 = HEAP8[i9 >> 0] | 0;
        i76 = HEAP8[i10 >> 0] | 0;
        i77 = HEAP32[i3 >> 2] | 0;
        i1 = 51;
        break;
       }
      case 1:
       {
        i28 = i15;
        i31 = i1;
        i78 = HEAP8[i5 >> 0] | 0;
        i79 = HEAP8[i6 >> 0] | 0;
        i80 = HEAP8[i7 >> 0] | 0;
        i81 = HEAP8[i8 >> 0] | 0;
        i82 = HEAP8[i9 >> 0] | 0;
        i83 = HEAP8[i10 >> 0] | 0;
        i84 = HEAP32[i3 >> 2] | 0;
        i1 = 52;
        break;
       }
      default:
       {
        i1 = 53;
        break L10;
       }
      }
      while (1) if ((i1 | 0) == 49) {
       HEAP16[i19 >> 1] = i11 >>> (i59 & 255) << (i60 & 255) | i12 >>> (i57 & 255) << (i58 & 255) | i63 | i4 >>> (i61 & 255) << (i62 & 255);
       i20 = i17;
       i23 = i19 + 2 | 0;
       i64 = i57;
       i65 = i58;
       i66 = i59;
       i67 = i60;
       i68 = i61;
       i69 = i62;
       i70 = i63;
       i1 = 50;
       continue;
      } else if ((i1 | 0) == 50) {
       HEAP16[i23 >> 1] = i11 >>> (i66 & 255) << (i67 & 255) | i12 >>> (i64 & 255) << (i65 & 255) | i70 | i4 >>> (i68 & 255) << (i69 & 255);
       i24 = i20;
       i27 = i23 + 2 | 0;
       i71 = i64;
       i72 = i65;
       i73 = i66;
       i74 = i67;
       i75 = i68;
       i76 = i69;
       i77 = i70;
       i1 = 51;
       continue;
      } else if ((i1 | 0) == 51) {
       HEAP16[i27 >> 1] = i11 >>> (i73 & 255) << (i74 & 255) | i12 >>> (i71 & 255) << (i72 & 255) | i77 | i4 >>> (i75 & 255) << (i76 & 255);
       i28 = i24;
       i31 = i27 + 2 | 0;
       i78 = i71;
       i79 = i72;
       i80 = i73;
       i81 = i74;
       i82 = i75;
       i83 = i76;
       i84 = i77;
       i1 = 52;
       continue;
      } else if ((i1 | 0) == 52) {
       HEAP16[i31 >> 1] = i11 >>> (i80 & 255) << (i81 & 255) | i12 >>> (i78 & 255) << (i79 & 255) | i84 | i4 >>> (i82 & 255) << (i83 & 255);
       i1 = i31 + 2 | 0;
       if ((i28 | 0) > 1) {
        i17 = i28 + -1 | 0;
        i19 = i1;
        i57 = i78;
        i58 = i79;
        i59 = i80;
        i60 = i81;
        i61 = i82;
        i62 = i83;
        i63 = i84;
        i1 = 49;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i16 << 1) | 0;
     }
     if ((i1 | 0) != 53) if ((i1 | 0) == 109) return i403 | 0;
    }
   }
   break;
  }
 case 4:
  {
   switch (i2 | 0) {
   case 1:
    {
     i1 = HEAP32[i402 + 8 >> 2] | 0;
     i2 = HEAP32[i402 + 12 >> 2] | 0;
     i4 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i18 = i4 - i1 | 0;
     if (!i2) {
      i403 = 0;
      return i403 | 0;
     }
     i19 = (i1 + 3 | 0) / 4 | 0;
     i17 = i1 & 255;
     i8 = i401 + 28 | 0;
     i9 = i401 + 12 | 0;
     i10 = i401 + 32 | 0;
     i11 = i401 + 29 | 0;
     i12 = i401 + 16 | 0;
     i13 = i401 + 33 | 0;
     i14 = i401 + 30 | 0;
     i15 = i401 + 20 | 0;
     i16 = i401 + 34 | 0;
     i7 = i5 & 255;
     i6 = i399 & 255;
     i5 = i400 & 255;
     i3 = i401 + 24 | 0;
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i4) | 0) << 2) + (HEAP32[i402 >> 2] << 2) | 0;
     L117 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i17 & 3) {
      case 0:
       {
        i386 = HEAP8[i8 >> 0] | 0;
        i389 = HEAP8[i11 >> 0] | 0;
        i392 = HEAP8[i14 >> 0] | 0;
        i88 = i19;
        i97 = i1;
        i384 = i386;
        i385 = HEAP8[i10 >> 0] | 0;
        i386 = HEAP32[5724 + ((i386 & 255) << 2) >> 2] | 0;
        i387 = i389;
        i388 = HEAP8[i13 >> 0] | 0;
        i389 = HEAP32[5724 + ((i389 & 255) << 2) >> 2] | 0;
        i390 = i392;
        i391 = HEAP8[i16 >> 0] | 0;
        i392 = HEAP32[5724 + ((i392 & 255) << 2) >> 2] | 0;
        i1 = 63;
        break;
       }
      case 3:
       {
        i396 = HEAP8[i8 >> 0] | 0;
        i135 = HEAP8[i11 >> 0] | 0;
        i138 = HEAP8[i14 >> 0] | 0;
        i98 = i19;
        i109 = i1;
        i133 = i135;
        i134 = HEAP8[i13 >> 0] | 0;
        i135 = HEAP32[5724 + ((i135 & 255) << 2) >> 2] | 0;
        i136 = i138;
        i137 = HEAP8[i16 >> 0] | 0;
        i138 = HEAP32[5724 + ((i138 & 255) << 2) >> 2] | 0;
        i394 = i396;
        i395 = HEAP8[i10 >> 0] | 0;
        i396 = HEAP32[5724 + ((i396 & 255) << 2) >> 2] | 0;
        i1 = 64;
        break;
       }
      case 2:
       {
        i142 = HEAP8[i8 >> 0] | 0;
        i145 = HEAP8[i11 >> 0] | 0;
        i148 = HEAP8[i14 >> 0] | 0;
        i110 = i19;
        i121 = i1;
        i140 = i142;
        i141 = HEAP8[i10 >> 0] | 0;
        i142 = HEAP32[5724 + ((i142 & 255) << 2) >> 2] | 0;
        i143 = i145;
        i144 = HEAP8[i13 >> 0] | 0;
        i145 = HEAP32[5724 + ((i145 & 255) << 2) >> 2] | 0;
        i146 = i148;
        i147 = HEAP8[i16 >> 0] | 0;
        i148 = HEAP32[5724 + ((i148 & 255) << 2) >> 2] | 0;
        i1 = 65;
        break;
       }
      case 1:
       {
        i153 = HEAP8[i8 >> 0] | 0;
        i156 = HEAP8[i11 >> 0] | 0;
        i159 = HEAP8[i14 >> 0] | 0;
        i122 = i19;
        i130 = i1;
        i150 = i153;
        i152 = HEAP8[i10 >> 0] | 0;
        i153 = HEAP32[5724 + ((i153 & 255) << 2) >> 2] | 0;
        i154 = i156;
        i155 = HEAP8[i13 >> 0] | 0;
        i156 = HEAP32[5724 + ((i156 & 255) << 2) >> 2] | 0;
        i157 = i159;
        i158 = HEAP8[i16 >> 0] | 0;
        i159 = HEAP32[5724 + ((i159 & 255) << 2) >> 2] | 0;
        i1 = 66;
        break;
       }
      default:
       {
        i1 = 67;
        break L117;
       }
      }
      while (1) if ((i1 | 0) == 63) {
       i133 = HEAP32[i97 >> 2] | 0;
       i109 = i385 & 255;
       i134 = i388 & 255;
       i98 = i391 & 255;
       i109 = ((((Math_imul(HEAPU8[i389 + ((HEAP32[i12 >> 2] & i133) >>> i134) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i387 & 255) << i134 | ((((Math_imul(HEAPU8[i386 + ((HEAP32[i9 >> 2] & i133) >>> i109) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i384 & 255) << i109;
       i98 = ((((Math_imul(HEAPU8[i392 + ((HEAP32[i15 >> 2] & i133) >>> i98) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i390 & 255) << i98;
       HEAP32[i97 >> 2] = i109 | HEAP32[i3 >> 2] | i98;
       i98 = i88;
       i109 = i97 + 4 | 0;
       i133 = i387;
       i134 = i388;
       i135 = i389;
       i136 = i390;
       i137 = i391;
       i138 = i392;
       i394 = i384;
       i395 = i385;
       i396 = i386;
       i1 = 64;
       continue;
      } else if ((i1 | 0) == 64) {
       i140 = HEAP32[i109 >> 2] | 0;
       i121 = i395 & 255;
       i141 = i134 & 255;
       i110 = i137 & 255;
       i121 = ((((Math_imul(HEAPU8[i135 + ((HEAP32[i12 >> 2] & i140) >>> i141) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i133 & 255) << i141 | ((((Math_imul(HEAPU8[i396 + ((HEAP32[i9 >> 2] & i140) >>> i121) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i394 & 255) << i121;
       i110 = ((((Math_imul(HEAPU8[i138 + ((HEAP32[i15 >> 2] & i140) >>> i110) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i136 & 255) << i110;
       HEAP32[i109 >> 2] = i121 | HEAP32[i3 >> 2] | i110;
       i110 = i98;
       i121 = i109 + 4 | 0;
       i140 = i394;
       i141 = i395;
       i142 = i396;
       i143 = i133;
       i144 = i134;
       i145 = i135;
       i146 = i136;
       i147 = i137;
       i148 = i138;
       i1 = 65;
       continue;
      } else if ((i1 | 0) == 65) {
       i150 = HEAP32[i121 >> 2] | 0;
       i130 = i141 & 255;
       i152 = i144 & 255;
       i122 = i147 & 255;
       i130 = ((((Math_imul(HEAPU8[i145 + ((HEAP32[i12 >> 2] & i150) >>> i152) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i143 & 255) << i152 | ((((Math_imul(HEAPU8[i142 + ((HEAP32[i9 >> 2] & i150) >>> i130) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i140 & 255) << i130;
       i122 = ((((Math_imul(HEAPU8[i148 + ((HEAP32[i15 >> 2] & i150) >>> i122) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i146 & 255) << i122;
       HEAP32[i121 >> 2] = i130 | HEAP32[i3 >> 2] | i122;
       i122 = i110;
       i130 = i121 + 4 | 0;
       i150 = i140;
       i152 = i141;
       i153 = i142;
       i154 = i143;
       i155 = i144;
       i156 = i145;
       i157 = i146;
       i158 = i147;
       i159 = i148;
       i1 = 66;
       continue;
      } else if ((i1 | 0) == 66) {
       i401 = HEAP32[i130 >> 2] | 0;
       i402 = i152 & 255;
       i400 = i155 & 255;
       i1 = i158 & 255;
       i402 = ((((Math_imul(HEAPU8[i156 + ((HEAP32[i12 >> 2] & i401) >>> i400) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i154 & 255) << i400 | ((((Math_imul(HEAPU8[i153 + ((HEAP32[i9 >> 2] & i401) >>> i402) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i7 | 0) >>> (i150 & 255) << i402;
       i1 = ((((Math_imul(HEAPU8[i159 + ((HEAP32[i15 >> 2] & i401) >>> i1) >> 0] | 0, i397) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i157 & 255) << i1;
       HEAP32[i130 >> 2] = i402 | HEAP32[i3 >> 2] | i1;
       i1 = i130 + 4 | 0;
       if ((i122 | 0) > 1) {
        i88 = i122 + -1 | 0;
        i97 = i1;
        i384 = i150;
        i385 = i152;
        i386 = i153;
        i387 = i154;
        i388 = i155;
        i389 = i156;
        i390 = i157;
        i391 = i158;
        i392 = i159;
        i1 = 63;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i18 << 2) | 0;
     }
     if ((i1 | 0) != 67) if ((i1 | 0) == 109) return i403 | 0;
     break;
    }
   case 2:
    {
     i2 = HEAP32[i402 + 8 >> 2] | 0;
     i17 = HEAP32[i402 + 12 >> 2] | 0;
     i1 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i19 = i1 - i2 | 0;
     if (!i17) {
      i403 = 0;
      return i403 | 0;
     }
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
     i18 = (i2 + 3 | 0) / 4 | 0;
     i16 = i2 & 255;
     i7 = i401 + 28 | 0;
     i8 = i401 + 12 | 0;
     i9 = i401 + 32 | 0;
     i10 = i401 + 29 | 0;
     i11 = i401 + 16 | 0;
     i12 = i401 + 33 | 0;
     i13 = i401 + 30 | 0;
     i14 = i401 + 20 | 0;
     i15 = i401 + 34 | 0;
     i6 = i5 & 255;
     i5 = i399 & 255;
     i4 = i400 & 255;
     i3 = i401 + 24 | 0;
     i1 = i1 + (HEAP32[i402 >> 2] << 2) | 0;
     i2 = i17;
     L138 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i16 & 3) {
      case 0:
       {
        i165 = HEAP8[i7 >> 0] | 0;
        i168 = HEAP8[i10 >> 0] | 0;
        i172 = HEAP8[i13 >> 0] | 0;
        i89 = i18;
        i99 = i1;
        i163 = i165;
        i164 = HEAP8[i9 >> 0] | 0;
        i165 = HEAP32[5724 + ((i165 & 255) << 2) >> 2] | 0;
        i166 = i168;
        i167 = HEAP8[i12 >> 0] | 0;
        i168 = HEAP32[5724 + ((i168 & 255) << 2) >> 2] | 0;
        i170 = i172;
        i171 = HEAP8[i15 >> 0] | 0;
        i172 = HEAP32[5724 + ((i172 & 255) << 2) >> 2] | 0;
        i1 = 76;
        break;
       }
      case 3:
       {
        i176 = HEAP8[i7 >> 0] | 0;
        i179 = HEAP8[i10 >> 0] | 0;
        i182 = HEAP8[i13 >> 0] | 0;
        i100 = i18;
        i111 = i1;
        i174 = i176;
        i175 = HEAP8[i9 >> 0] | 0;
        i176 = HEAP32[5724 + ((i176 & 255) << 2) >> 2] | 0;
        i177 = i179;
        i178 = HEAP8[i12 >> 0] | 0;
        i179 = HEAP32[5724 + ((i179 & 255) << 2) >> 2] | 0;
        i180 = i182;
        i181 = HEAP8[i15 >> 0] | 0;
        i182 = HEAP32[5724 + ((i182 & 255) << 2) >> 2] | 0;
        i1 = 77;
        break;
       }
      case 2:
       {
        i187 = HEAP8[i7 >> 0] | 0;
        i190 = HEAP8[i10 >> 0] | 0;
        i194 = HEAP8[i13 >> 0] | 0;
        i112 = i18;
        i123 = i1;
        i184 = i187;
        i185 = HEAP8[i9 >> 0] | 0;
        i187 = HEAP32[5724 + ((i187 & 255) << 2) >> 2] | 0;
        i188 = i190;
        i189 = HEAP8[i12 >> 0] | 0;
        i190 = HEAP32[5724 + ((i190 & 255) << 2) >> 2] | 0;
        i191 = i194;
        i192 = HEAP8[i15 >> 0] | 0;
        i194 = HEAP32[5724 + ((i194 & 255) << 2) >> 2] | 0;
        i1 = 78;
        break;
       }
      case 1:
       {
        i198 = HEAP8[i7 >> 0] | 0;
        i201 = HEAP8[i10 >> 0] | 0;
        i204 = HEAP8[i13 >> 0] | 0;
        i124 = i18;
        i131 = i1;
        i195 = i198;
        i196 = HEAP8[i9 >> 0] | 0;
        i198 = HEAP32[5724 + ((i198 & 255) << 2) >> 2] | 0;
        i199 = i201;
        i200 = HEAP8[i12 >> 0] | 0;
        i201 = HEAP32[5724 + ((i201 & 255) << 2) >> 2] | 0;
        i202 = i204;
        i203 = HEAP8[i15 >> 0] | 0;
        i204 = HEAP32[5724 + ((i204 & 255) << 2) >> 2] | 0;
        i1 = 79;
        break;
       }
      default:
       {
        i1 = 80;
        break L138;
       }
      }
      while (1) if ((i1 | 0) == 76) {
       i111 = HEAP32[i99 >> 2] | 0;
       i174 = i164 & 255;
       i176 = i167 & 255;
       i100 = i171 & 255;
       i175 = (HEAPU8[i165 + ((HEAP32[i8 >> 2] & i111) >>> i174) >> 0] | 0) + i6 | 0;
       i177 = (HEAPU8[i168 + ((HEAP32[i11 >> 2] & i111) >>> i176) >> 0] | 0) + i5 | 0;
       i111 = (HEAPU8[i172 + ((HEAP32[i14 >> 2] & i111) >>> i100) >> 0] | 0) + i4 | 0;
       HEAP32[i99 >> 2] = (i177 >>> 0 < 255 ? i177 : 255) >>> (i166 & 255) << i176 | (i175 >>> 0 < 255 ? i175 : 255) >>> (i163 & 255) << i174 | HEAP32[i3 >> 2] | (i111 >>> 0 < 255 ? i111 : 255) >>> (i170 & 255) << i100;
       i100 = i89;
       i111 = i99 + 4 | 0;
       i174 = i163;
       i175 = i164;
       i176 = i165;
       i177 = i166;
       i178 = i167;
       i179 = i168;
       i180 = i170;
       i181 = i171;
       i182 = i172;
       i1 = 77;
       continue;
      } else if ((i1 | 0) == 77) {
       i123 = HEAP32[i111 >> 2] | 0;
       i184 = i175 & 255;
       i187 = i178 & 255;
       i112 = i181 & 255;
       i185 = (HEAPU8[i176 + ((HEAP32[i8 >> 2] & i123) >>> i184) >> 0] | 0) + i6 | 0;
       i188 = (HEAPU8[i179 + ((HEAP32[i11 >> 2] & i123) >>> i187) >> 0] | 0) + i5 | 0;
       i123 = (HEAPU8[i182 + ((HEAP32[i14 >> 2] & i123) >>> i112) >> 0] | 0) + i4 | 0;
       HEAP32[i111 >> 2] = (i188 >>> 0 < 255 ? i188 : 255) >>> (i177 & 255) << i187 | (i185 >>> 0 < 255 ? i185 : 255) >>> (i174 & 255) << i184 | HEAP32[i3 >> 2] | (i123 >>> 0 < 255 ? i123 : 255) >>> (i180 & 255) << i112;
       i112 = i100;
       i123 = i111 + 4 | 0;
       i184 = i174;
       i185 = i175;
       i187 = i176;
       i188 = i177;
       i189 = i178;
       i190 = i179;
       i191 = i180;
       i192 = i181;
       i194 = i182;
       i1 = 78;
       continue;
      } else if ((i1 | 0) == 78) {
       i131 = HEAP32[i123 >> 2] | 0;
       i195 = i185 & 255;
       i198 = i189 & 255;
       i124 = i192 & 255;
       i196 = (HEAPU8[i187 + ((HEAP32[i8 >> 2] & i131) >>> i195) >> 0] | 0) + i6 | 0;
       i199 = (HEAPU8[i190 + ((HEAP32[i11 >> 2] & i131) >>> i198) >> 0] | 0) + i5 | 0;
       i131 = (HEAPU8[i194 + ((HEAP32[i14 >> 2] & i131) >>> i124) >> 0] | 0) + i4 | 0;
       HEAP32[i123 >> 2] = (i199 >>> 0 < 255 ? i199 : 255) >>> (i188 & 255) << i198 | (i196 >>> 0 < 255 ? i196 : 255) >>> (i184 & 255) << i195 | HEAP32[i3 >> 2] | (i131 >>> 0 < 255 ? i131 : 255) >>> (i191 & 255) << i124;
       i124 = i112;
       i131 = i123 + 4 | 0;
       i195 = i184;
       i196 = i185;
       i198 = i187;
       i199 = i188;
       i200 = i189;
       i201 = i190;
       i202 = i191;
       i203 = i192;
       i204 = i194;
       i1 = 79;
       continue;
      } else if ((i1 | 0) == 79) {
       i402 = HEAP32[i131 >> 2] | 0;
       i401 = i196 & 255;
       i399 = i200 & 255;
       i1 = i203 & 255;
       i400 = (HEAPU8[i198 + ((HEAP32[i8 >> 2] & i402) >>> i401) >> 0] | 0) + i6 | 0;
       i398 = (HEAPU8[i201 + ((HEAP32[i11 >> 2] & i402) >>> i399) >> 0] | 0) + i5 | 0;
       i402 = (HEAPU8[i204 + ((HEAP32[i14 >> 2] & i402) >>> i1) >> 0] | 0) + i4 | 0;
       HEAP32[i131 >> 2] = (i398 >>> 0 < 255 ? i398 : 255) >>> (i199 & 255) << i399 | (i400 >>> 0 < 255 ? i400 : 255) >>> (i195 & 255) << i401 | HEAP32[i3 >> 2] | (i402 >>> 0 < 255 ? i402 : 255) >>> (i202 & 255) << i1;
       i1 = i131 + 4 | 0;
       if ((i124 | 0) > 1) {
        i89 = i124 + -1 | 0;
        i99 = i1;
        i163 = i195;
        i164 = i196;
        i165 = i198;
        i166 = i199;
        i167 = i200;
        i168 = i201;
        i170 = i202;
        i171 = i203;
        i172 = i204;
        i1 = 76;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i19 << 2) | 0;
     }
     if ((i1 | 0) != 80) if ((i1 | 0) == 109) return i403 | 0;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i402 + 8 >> 2] | 0;
     i17 = HEAP32[i402 + 12 >> 2] | 0;
     i1 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i19 = i1 - i2 | 0;
     if (!i17) {
      i403 = 0;
      return i403 | 0;
     }
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
     i18 = (i2 + 3 | 0) / 4 | 0;
     i16 = i2 & 255;
     i7 = i401 + 28 | 0;
     i8 = i401 + 12 | 0;
     i9 = i401 + 32 | 0;
     i10 = i401 + 29 | 0;
     i11 = i401 + 16 | 0;
     i12 = i401 + 33 | 0;
     i13 = i401 + 30 | 0;
     i14 = i401 + 20 | 0;
     i15 = i401 + 34 | 0;
     i6 = i5 & 255;
     i5 = i399 & 255;
     i4 = i400 & 255;
     i3 = i401 + 24 | 0;
     i1 = i1 + (HEAP32[i402 >> 2] << 2) | 0;
     i2 = i17;
     L159 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i16 & 3) {
      case 0:
       {
        i207 = HEAP8[i7 >> 0] | 0;
        i210 = HEAP8[i10 >> 0] | 0;
        i213 = HEAP8[i13 >> 0] | 0;
        i90 = i18;
        i101 = i1;
        i205 = i207;
        i206 = HEAP8[i9 >> 0] | 0;
        i207 = HEAP32[5724 + ((i207 & 255) << 2) >> 2] | 0;
        i208 = i210;
        i209 = HEAP8[i12 >> 0] | 0;
        i210 = HEAP32[5724 + ((i210 & 255) << 2) >> 2] | 0;
        i211 = i213;
        i212 = HEAP8[i15 >> 0] | 0;
        i213 = HEAP32[5724 + ((i213 & 255) << 2) >> 2] | 0;
        i1 = 89;
        break;
       }
      case 3:
       {
        i216 = HEAP8[i7 >> 0] | 0;
        i219 = HEAP8[i10 >> 0] | 0;
        i222 = HEAP8[i13 >> 0] | 0;
        i102 = i18;
        i113 = i1;
        i214 = i216;
        i215 = HEAP8[i9 >> 0] | 0;
        i216 = HEAP32[5724 + ((i216 & 255) << 2) >> 2] | 0;
        i217 = i219;
        i218 = HEAP8[i12 >> 0] | 0;
        i219 = HEAP32[5724 + ((i219 & 255) << 2) >> 2] | 0;
        i220 = i222;
        i221 = HEAP8[i15 >> 0] | 0;
        i222 = HEAP32[5724 + ((i222 & 255) << 2) >> 2] | 0;
        i1 = 90;
        break;
       }
      case 2:
       {
        i225 = HEAP8[i7 >> 0] | 0;
        i229 = HEAP8[i10 >> 0] | 0;
        i232 = HEAP8[i13 >> 0] | 0;
        i114 = i18;
        i125 = i1;
        i223 = i225;
        i224 = HEAP8[i9 >> 0] | 0;
        i225 = HEAP32[5724 + ((i225 & 255) << 2) >> 2] | 0;
        i226 = i229;
        i227 = HEAP8[i12 >> 0] | 0;
        i229 = HEAP32[5724 + ((i229 & 255) << 2) >> 2] | 0;
        i230 = i232;
        i231 = HEAP8[i15 >> 0] | 0;
        i232 = HEAP32[5724 + ((i232 & 255) << 2) >> 2] | 0;
        i1 = 91;
        break;
       }
      case 1:
       {
        i235 = HEAP8[i7 >> 0] | 0;
        i239 = HEAP8[i10 >> 0] | 0;
        i242 = HEAP8[i13 >> 0] | 0;
        i126 = i18;
        i132 = i1;
        i233 = i235;
        i234 = HEAP8[i9 >> 0] | 0;
        i235 = HEAP32[5724 + ((i235 & 255) << 2) >> 2] | 0;
        i236 = i239;
        i238 = HEAP8[i12 >> 0] | 0;
        i239 = HEAP32[5724 + ((i239 & 255) << 2) >> 2] | 0;
        i240 = i242;
        i241 = HEAP8[i15 >> 0] | 0;
        i242 = HEAP32[5724 + ((i242 & 255) << 2) >> 2] | 0;
        i1 = 92;
        break;
       }
      default:
       {
        i1 = 93;
        break L159;
       }
      }
      while (1) if ((i1 | 0) == 89) {
       i214 = HEAP32[i101 >> 2] | 0;
       i113 = i206 & 255;
       i215 = i209 & 255;
       i102 = i212 & 255;
       i113 = (((Math_imul(HEAPU8[i210 + ((HEAP32[i11 >> 2] & i214) >>> i215) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i208 & 255) << i215 | (((Math_imul(HEAPU8[i207 + ((HEAP32[i8 >> 2] & i214) >>> i113) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i205 & 255) << i113;
       i102 = (((Math_imul(HEAPU8[i213 + ((HEAP32[i14 >> 2] & i214) >>> i102) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i211 & 255) << i102;
       HEAP32[i101 >> 2] = i113 | HEAP32[i3 >> 2] | i102;
       i102 = i90;
       i113 = i101 + 4 | 0;
       i214 = i205;
       i215 = i206;
       i216 = i207;
       i217 = i208;
       i218 = i209;
       i219 = i210;
       i220 = i211;
       i221 = i212;
       i222 = i213;
       i1 = 90;
       continue;
      } else if ((i1 | 0) == 90) {
       i223 = HEAP32[i113 >> 2] | 0;
       i125 = i215 & 255;
       i224 = i218 & 255;
       i114 = i221 & 255;
       i125 = (((Math_imul(HEAPU8[i219 + ((HEAP32[i11 >> 2] & i223) >>> i224) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i217 & 255) << i224 | (((Math_imul(HEAPU8[i216 + ((HEAP32[i8 >> 2] & i223) >>> i125) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i214 & 255) << i125;
       i114 = (((Math_imul(HEAPU8[i222 + ((HEAP32[i14 >> 2] & i223) >>> i114) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i220 & 255) << i114;
       HEAP32[i113 >> 2] = i125 | HEAP32[i3 >> 2] | i114;
       i114 = i102;
       i125 = i113 + 4 | 0;
       i223 = i214;
       i224 = i215;
       i225 = i216;
       i226 = i217;
       i227 = i218;
       i229 = i219;
       i230 = i220;
       i231 = i221;
       i232 = i222;
       i1 = 91;
       continue;
      } else if ((i1 | 0) == 91) {
       i233 = HEAP32[i125 >> 2] | 0;
       i132 = i224 & 255;
       i234 = i227 & 255;
       i126 = i231 & 255;
       i132 = (((Math_imul(HEAPU8[i229 + ((HEAP32[i11 >> 2] & i233) >>> i234) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i226 & 255) << i234 | (((Math_imul(HEAPU8[i225 + ((HEAP32[i8 >> 2] & i233) >>> i132) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i223 & 255) << i132;
       i126 = (((Math_imul(HEAPU8[i232 + ((HEAP32[i14 >> 2] & i233) >>> i126) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i230 & 255) << i126;
       HEAP32[i125 >> 2] = i132 | HEAP32[i3 >> 2] | i126;
       i126 = i114;
       i132 = i125 + 4 | 0;
       i233 = i223;
       i234 = i224;
       i235 = i225;
       i236 = i226;
       i238 = i227;
       i239 = i229;
       i240 = i230;
       i241 = i231;
       i242 = i232;
       i1 = 92;
       continue;
      } else if ((i1 | 0) == 92) {
       i401 = HEAP32[i132 >> 2] | 0;
       i402 = i234 & 255;
       i400 = i238 & 255;
       i1 = i241 & 255;
       i402 = (((Math_imul(HEAPU8[i239 + ((HEAP32[i11 >> 2] & i401) >>> i400) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i236 & 255) << i400 | (((Math_imul(HEAPU8[i235 + ((HEAP32[i8 >> 2] & i401) >>> i402) >> 0] | 0, i6) | 0) >>> 0) / 255 | 0) >>> (i233 & 255) << i402;
       i1 = (((Math_imul(HEAPU8[i242 + ((HEAP32[i14 >> 2] & i401) >>> i1) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i240 & 255) << i1;
       HEAP32[i132 >> 2] = i402 | HEAP32[i3 >> 2] | i1;
       i1 = i132 + 4 | 0;
       if ((i126 | 0) > 1) {
        i90 = i126 + -1 | 0;
        i101 = i1;
        i205 = i233;
        i206 = i234;
        i207 = i235;
        i208 = i236;
        i209 = i238;
        i210 = i239;
        i211 = i240;
        i212 = i241;
        i213 = i242;
        i1 = 89;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i19 << 2) | 0;
     }
     if ((i1 | 0) != 93) if ((i1 | 0) == 109) return i403 | 0;
     break;
    }
   default:
    {
     i2 = HEAP32[i402 + 8 >> 2] | 0;
     i14 = HEAP32[i402 + 12 >> 2] | 0;
     i1 = (HEAP32[i398 + 16 >> 2] | 0) / (i3 | 0) | 0;
     i16 = i1 - i2 | 0;
     if (!i14) {
      i403 = 0;
      return i403 | 0;
     }
     i1 = (HEAP32[i398 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i402 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
     i15 = (i2 + 3 | 0) / 4 | 0;
     i13 = i2 & 255;
     i12 = i5 & 255;
     i11 = i399 & 255;
     i4 = i400 & 255;
     i5 = i401 + 28 | 0;
     i6 = i401 + 32 | 0;
     i7 = i401 + 29 | 0;
     i8 = i401 + 33 | 0;
     i9 = i401 + 30 | 0;
     i10 = i401 + 34 | 0;
     i3 = i401 + 24 | 0;
     i1 = i1 + (HEAP32[i402 >> 2] << 2) | 0;
     i2 = i14;
     L96 : while (1) {
      i2 = i2 + -1 | 0;
      switch (i13 & 3) {
      case 0:
       {
        i18 = i15;
        i22 = i1;
        i33 = HEAP8[i5 >> 0] | 0;
        i34 = HEAP8[i6 >> 0] | 0;
        i35 = HEAP8[i7 >> 0] | 0;
        i36 = HEAP8[i8 >> 0] | 0;
        i37 = HEAP8[i9 >> 0] | 0;
        i38 = HEAP8[i10 >> 0] | 0;
        i1 = 102;
        break;
       }
      case 3:
       {
        i21 = i15;
        i26 = i1;
        i39 = HEAP8[i5 >> 0] | 0;
        i40 = HEAP8[i6 >> 0] | 0;
        i41 = HEAP8[i7 >> 0] | 0;
        i42 = HEAP8[i8 >> 0] | 0;
        i43 = HEAP8[i9 >> 0] | 0;
        i44 = HEAP8[i10 >> 0] | 0;
        i1 = 103;
        break;
       }
      case 2:
       {
        i25 = i15;
        i30 = i1;
        i45 = HEAP8[i5 >> 0] | 0;
        i46 = HEAP8[i6 >> 0] | 0;
        i47 = HEAP8[i7 >> 0] | 0;
        i48 = HEAP8[i8 >> 0] | 0;
        i49 = HEAP8[i9 >> 0] | 0;
        i50 = HEAP8[i10 >> 0] | 0;
        i1 = 104;
        break;
       }
      case 1:
       {
        i29 = i15;
        i32 = i1;
        i51 = HEAP8[i5 >> 0] | 0;
        i52 = HEAP8[i6 >> 0] | 0;
        i53 = HEAP8[i7 >> 0] | 0;
        i54 = HEAP8[i8 >> 0] | 0;
        i55 = HEAP8[i9 >> 0] | 0;
        i56 = HEAP8[i10 >> 0] | 0;
        i1 = 105;
        break;
       }
      default:
       {
        i1 = 106;
        break L96;
       }
      }
      while (1) if ((i1 | 0) == 102) {
       HEAP32[i22 >> 2] = i11 >>> (i35 & 255) << (i36 & 255) | i12 >>> (i33 & 255) << (i34 & 255) | HEAP32[i3 >> 2] | i4 >>> (i37 & 255) << (i38 & 255);
       i21 = i18;
       i26 = i22 + 4 | 0;
       i39 = i33;
       i40 = i34;
       i41 = i35;
       i42 = i36;
       i43 = i37;
       i44 = i38;
       i1 = 103;
       continue;
      } else if ((i1 | 0) == 103) {
       HEAP32[i26 >> 2] = i11 >>> (i41 & 255) << (i42 & 255) | i12 >>> (i39 & 255) << (i40 & 255) | HEAP32[i3 >> 2] | i4 >>> (i43 & 255) << (i44 & 255);
       i25 = i21;
       i30 = i26 + 4 | 0;
       i45 = i39;
       i46 = i40;
       i47 = i41;
       i48 = i42;
       i49 = i43;
       i50 = i44;
       i1 = 104;
       continue;
      } else if ((i1 | 0) == 104) {
       HEAP32[i30 >> 2] = i11 >>> (i47 & 255) << (i48 & 255) | i12 >>> (i45 & 255) << (i46 & 255) | HEAP32[i3 >> 2] | i4 >>> (i49 & 255) << (i50 & 255);
       i29 = i25;
       i32 = i30 + 4 | 0;
       i51 = i45;
       i52 = i46;
       i53 = i47;
       i54 = i48;
       i55 = i49;
       i56 = i50;
       i1 = 105;
       continue;
      } else if ((i1 | 0) == 105) {
       HEAP32[i32 >> 2] = i11 >>> (i53 & 255) << (i54 & 255) | i12 >>> (i51 & 255) << (i52 & 255) | HEAP32[i3 >> 2] | i4 >>> (i55 & 255) << (i56 & 255);
       i1 = i32 + 4 | 0;
       if ((i29 | 0) > 1) {
        i18 = i29 + -1 | 0;
        i22 = i1;
        i33 = i51;
        i34 = i52;
        i35 = i53;
        i36 = i54;
        i37 = i55;
        i38 = i56;
        i1 = 102;
        continue;
       } else break;
      }
      if (!i2) {
       i403 = 0;
       i1 = 109;
       break;
      } else i1 = i1 + (i16 << 2) | 0;
     }
     if ((i1 | 0) != 106) if ((i1 | 0) == 109) return i403 | 0;
    }
   }
   break;
  }
 default:
  {
   i403 = _SDL_Error(4) | 0;
   return i403 | 0;
  }
 }
 return 0;
}

function _SDL_RLEBlit(i2, i31, i37, i1) {
 i2 = i2 | 0;
 i31 = i31 | 0;
 i37 = i37 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0;
 i35 = 0;
 i9 = i2 + 8 | 0;
 i38 = HEAP32[i9 >> 2] | 0;
 if (HEAP32[i37 >> 2] & 2 | 0) if ((_SDL_LockSurface(i37) | 0) < 0) {
  i38 = -1;
  return i38 | 0;
 }
 i36 = i37 + 16 | 0;
 i32 = HEAP32[i36 >> 2] | 0;
 i4 = (HEAP32[i37 + 20 >> 2] | 0) + (Math_imul(i32, HEAP32[i1 + 4 >> 2] | 0) | 0) | 0;
 i19 = HEAP32[i2 + 4 >> 2] | 0;
 i8 = HEAP8[i19 + 9 >> 0] | 0;
 i4 = i4 + (Math_imul(HEAP32[i1 >> 2] | 0, i8 & 255) | 0) | 0;
 i6 = HEAP32[i2 + 52 >> 2] | 0;
 i1 = HEAP32[i6 + 12 >> 2] | 0;
 i2 = HEAP32[i31 + 4 >> 2] | 0;
 L5 : do if (!i2) i35 = 34; else {
  L7 : do switch (i8 << 24 >> 24) {
  case 1:
   {
    i3 = i2;
    i2 = 0;
    while (1) {
     i5 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
     i34 = HEAP8[i1 + 1 >> 0] | 0;
     i2 = i34 & 255;
     i1 = i1 + 2 | 0;
     if (!(i34 << 24 >> 24)) if (!i5) {
      i2 = 5;
      i5 = 0;
     } else i35 = 8; else {
      i5 = i5 + i2 | 0;
      i1 = i1 + i2 | 0;
      i35 = 8;
     }
     do if ((i35 | 0) == 8) {
      i35 = 0;
      if ((i5 | 0) == (i38 | 0)) {
       i2 = i3 + -1 | 0;
       if (!i2) {
        i2 = 3;
        i3 = 0;
        i5 = 0;
        break;
       } else {
        i3 = i2;
        i5 = 0;
       }
      }
      i2 = 0;
     } while (0);
     switch (i2 & 7) {
     case 3:
      {
       i35 = 34;
       break L5;
      }
     case 0:
      {
       i2 = i5;
       break;
      }
     default:
      break L7;
     }
    }
   }
  case 2:
   {
    i3 = i2;
    i2 = 0;
    while (1) {
     i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
     i34 = HEAP8[i1 + 1 >> 0] | 0;
     i5 = i34 & 255;
     i1 = i1 + 2 | 0;
     if (!(i34 << 24 >> 24)) if (!i2) {
      i2 = 5;
      i5 = 0;
     } else i35 = 15; else {
      i1 = i1 + (i5 << 1) | 0;
      i2 = i2 + i5 | 0;
      i35 = 15;
     }
     do if ((i35 | 0) == 15) {
      i35 = 0;
      if ((i2 | 0) == (i38 | 0)) {
       i2 = i3 + -1 | 0;
       if (!i2) {
        i2 = 6;
        i3 = 0;
        i5 = 0;
        break;
       } else {
        i3 = i2;
        i5 = 0;
       }
      } else i5 = i2;
      i2 = 0;
     } while (0);
     switch (i2 & 7) {
     case 6:
      {
       i35 = 34;
       break L5;
      }
     case 0:
      {
       i2 = i5;
       break;
      }
     default:
      break L7;
     }
    }
   }
  case 3:
   {
    i3 = i2;
    i2 = 0;
    while (1) {
     i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
     i34 = HEAP8[i1 + 1 >> 0] | 0;
     i5 = i34 & 255;
     i1 = i1 + 2 | 0;
     if (!(i34 << 24 >> 24)) if (!i2) {
      i5 = 0;
      i2 = 5;
     } else i35 = 22; else {
      i1 = i1 + (i5 * 3 | 0) | 0;
      i2 = i2 + i5 | 0;
      i35 = 22;
     }
     do if ((i35 | 0) == 22) {
      i35 = 0;
      if ((i2 | 0) == (i38 | 0)) {
       i3 = i3 + -1 | 0;
       if (!i3) {
        i5 = 0;
        i2 = 8;
        i3 = 0;
        break;
       } else i2 = 0;
      }
      i5 = i2;
      i2 = 0;
     } while (0);
     switch (i2 & 15) {
     case 8:
      {
       i35 = 34;
       break L5;
      }
     case 0:
      {
       i2 = i5;
       break;
      }
     default:
      break L7;
     }
    }
   }
  case 4:
   {
    i3 = 0;
    while (1) {
     i3 = i3 + (HEAPU16[i1 >> 1] | 0) | 0;
     i34 = HEAP16[i1 + 2 >> 1] | 0;
     i5 = i34 & 65535;
     i1 = i1 + 4 | 0;
     if (!(i34 << 16 >> 16)) if (!i3) {
      i5 = i2;
      i3 = 0;
      i2 = 5;
     } else i35 = 29; else {
      i1 = i1 + (i5 << 2) | 0;
      i3 = i3 + i5 | 0;
      i35 = 29;
     }
     do if ((i35 | 0) == 29) {
      i35 = 0;
      if ((i3 | 0) == (i38 | 0)) {
       i2 = i2 + -1 | 0;
       if (!i2) {
        i5 = 0;
        i3 = 0;
        i2 = 10;
        break;
       } else i3 = 0;
      }
      i5 = i2;
      i2 = 0;
     } while (0);
     switch (i2 & 15) {
     case 10:
      {
       i35 = 34;
       break L5;
      }
     case 0:
      {
       i2 = i5;
       break;
      }
     default:
      break L7;
     }
    }
   }
  default:
   {
    i35 = 34;
    break L5;
   }
  } while (0);
  switch (i2 | 0) {
  case 0:
   {
    i35 = 34;
    break L5;
   }
  case 5:
   break L5;
  default:
   i1 = 0;
  }
  return i1 | 0;
 } while (0);
 L54 : do if ((i35 | 0) == 34) {
  i7 = HEAP8[i6 + 79 >> 0] | 0;
  i33 = i7 & 255;
  i34 = HEAP32[i31 >> 2] | 0;
  if (!i34) if ((HEAP32[i31 + 8 >> 2] | 0) == (HEAP32[i9 >> 2] | 0)) {
   if (i7 << 24 >> 24 == -1) switch (i8 << 24 >> 24) {
   case 1:
    {
     i5 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
       i35 = HEAP8[i1 + 1 >> 0] | 0;
       i3 = i35 & 255;
       i1 = i1 + 2 | 0;
       if (!(i35 << 24 >> 24)) {
        if (!i2) break L54;
       } else {
        _SDL_memcpy(i4 + i2 | 0, i1, i3) | 0;
        i2 = i2 + i3 | 0;
        i1 = i1 + i3 | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i5 = i5 + -1 | 0;
      if (!i5) break L54; else i4 = i4 + (HEAP32[i36 >> 2] | 0) | 0;
     }
    }
   case 2:
    {
     i5 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
       i35 = HEAP8[i1 + 1 >> 0] | 0;
       i3 = i35 & 255;
       i1 = i1 + 2 | 0;
       if (!(i35 << 24 >> 24)) {
        if (!i2) break L54;
       } else {
        i35 = i3 << 1;
        _SDL_memcpy(i4 + (i2 << 1) | 0, i1, i35) | 0;
        i2 = i2 + i3 | 0;
        i1 = i1 + i35 | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i5 = i5 + -1 | 0;
      if (!i5) break L54; else i4 = i4 + (HEAP32[i36 >> 2] | 0) | 0;
     }
    }
   case 3:
    {
     i5 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
       i35 = HEAP8[i1 + 1 >> 0] | 0;
       i3 = i35 & 255;
       i1 = i1 + 2 | 0;
       if (!(i35 << 24 >> 24)) {
        if (!i2) break L54;
       } else {
        i35 = i3 * 3 | 0;
        _SDL_memcpy(i4 + (i2 * 3 | 0) | 0, i1, i35) | 0;
        i2 = i2 + i3 | 0;
        i1 = i1 + i35 | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i5 = i5 + -1 | 0;
      if (!i5) break L54; else i4 = i4 + (HEAP32[i36 >> 2] | 0) | 0;
     }
    }
   case 4:
    {
     i5 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
       i35 = HEAP16[i1 + 2 >> 1] | 0;
       i3 = i35 & 65535;
       i1 = i1 + 4 | 0;
       if (!(i35 << 16 >> 16)) {
        if (!i2) break L54;
       } else {
        i35 = i3 << 2;
        _SDL_memcpy(i4 + (i2 << 2) | 0, i1, i35) | 0;
        i2 = i2 + i3 | 0;
        i1 = i1 + i35 | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i5 = i5 + -1 | 0;
      if (!i5) break L54; else i4 = i4 + (HEAP32[i36 >> 2] | 0) | 0;
     }
    }
   default:
    break L54;
   }
   switch (i8 << 24 >> 24) {
   case 4:
    {
     i16 = i19 + 12 | 0;
     i2 = HEAP32[i16 >> 2] | 0;
     i17 = i19 + 16 | 0;
     i3 = HEAP32[i17 >> 2] | 0;
     i18 = i19 + 20 | 0;
     i5 = HEAP32[i18 >> 2] | 0;
     if ((i3 | i2 | i5 | 0) == 16777215) if ((i2 | 0) == 65280 | (i3 | 0) == 65280 | (i5 | 0) == 65280) {
      i2 = HEAP32[i31 + 12 >> 2] | 0;
      if (i7 << 24 >> 24 == -128) {
       i8 = i4;
       while (1) {
        i3 = 0;
        do {
         i3 = i3 + (HEAPU16[i1 >> 1] | 0) | 0;
         i35 = HEAP16[i1 + 2 >> 1] | 0;
         i7 = i35 & 65535;
         i1 = i1 + 4 | 0;
         if (!(i35 << 16 >> 16)) {
          if (!i3) break L54;
         } else {
          i4 = i8 + (i3 << 2) | 0;
          i5 = i1;
          i6 = 0;
          while (1) {
           i34 = HEAP32[i5 >> 2] | 0;
           i35 = HEAP32[i4 >> 2] | 0;
           HEAP32[i4 >> 2] = (((i35 & 16711422) + (i34 & 16711422) | 0) >>> 1) + (i34 & 65793 & i35);
           i6 = i6 + 1 | 0;
           if ((i6 | 0) == (i7 | 0)) break; else {
            i4 = i4 + 4 | 0;
            i5 = i5 + 4 | 0;
           }
          }
          i3 = i3 + i7 | 0;
          i1 = i1 + (i7 << 2) | 0;
         }
        } while ((i3 | 0) != (i38 | 0));
        i2 = i2 + -1 | 0;
        if (!i2) break L54; else i8 = i8 + (HEAP32[i36 >> 2] | 0) | 0;
       }
      } else {
       i8 = i4;
       while (1) {
        i3 = 0;
        do {
         i3 = i3 + (HEAPU16[i1 >> 1] | 0) | 0;
         i35 = HEAP16[i1 + 2 >> 1] | 0;
         i7 = i35 & 65535;
         i1 = i1 + 4 | 0;
         if (!(i35 << 16 >> 16)) {
          if (!i3) break L54;
         } else {
          i4 = i8 + (i3 << 2) | 0;
          i5 = i1;
          i6 = 0;
          while (1) {
           i34 = HEAP32[i5 >> 2] | 0;
           i35 = HEAP32[i4 >> 2] | 0;
           i32 = i35 & 16711935;
           i35 = i35 & 65280;
           HEAP32[i4 >> 2] = ((Math_imul((i34 & 16711935) - i32 | 0, i33) | 0) >>> 8) + i32 & 16711935 | ((Math_imul((i34 & 65280) - i35 | 0, i33) | 0) >>> 8) + i35 & 65280;
           i6 = i6 + 1 | 0;
           if ((i6 | 0) == (i7 | 0)) break; else {
            i4 = i4 + 4 | 0;
            i5 = i5 + 4 | 0;
           }
          }
          i3 = i3 + i7 | 0;
          i1 = i1 + (i7 << 2) | 0;
         }
        } while ((i3 | 0) != (i38 | 0));
        i2 = i2 + -1 | 0;
        if (!i2) break L54; else i8 = i8 + (HEAP32[i36 >> 2] | 0) | 0;
       }
      }
     }
     i10 = i19 + 28 | 0;
     i11 = i19 + 32 | 0;
     i12 = i19 + 29 | 0;
     i13 = i19 + 33 | 0;
     i14 = i19 + 30 | 0;
     i15 = i19 + 34 | 0;
     i9 = i19 + 24 | 0;
     i8 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
       i35 = HEAP16[i1 + 2 >> 1] | 0;
       i7 = i35 & 65535;
       i1 = i1 + 4 | 0;
       if (!(i35 << 16 >> 16)) {
        if (!i2) break L54;
       } else {
        i3 = i4 + (i2 << 2) | 0;
        i5 = i1;
        i6 = 0;
        while (1) {
         i29 = HEAP32[i5 >> 2] | 0;
         i30 = HEAP32[i3 >> 2] | 0;
         i22 = HEAPU8[i10 >> 0] | 0;
         i19 = HEAP32[5724 + (i22 << 2) >> 2] | 0;
         i20 = HEAP32[i16 >> 2] | 0;
         i32 = HEAPU8[i11 >> 0] | 0;
         i26 = HEAPU8[i12 >> 0] | 0;
         i23 = HEAP32[5724 + (i26 << 2) >> 2] | 0;
         i24 = HEAP32[i17 >> 2] | 0;
         i34 = HEAPU8[i13 >> 0] | 0;
         i31 = HEAPU8[i14 >> 0] | 0;
         i27 = HEAP32[5724 + (i31 << 2) >> 2] | 0;
         i28 = HEAP32[i18 >> 2] | 0;
         i35 = HEAPU8[i15 >> 0] | 0;
         i21 = HEAPU8[i19 + ((i20 & i30) >>> i32) >> 0] | 0;
         i25 = HEAPU8[i23 + ((i24 & i30) >>> i34) >> 0] | 0;
         i30 = HEAPU8[i27 + ((i28 & i30) >>> i35) >> 0] | 0;
         i32 = (((Math_imul((HEAPU8[i19 + ((i20 & i29) >>> i32) >> 0] | 0) - i21 | 0, i33) | 0) >>> 8) + i21 | 0) >>> i22 << i32;
         i34 = (((Math_imul((HEAPU8[i23 + ((i24 & i29) >>> i34) >> 0] | 0) - i25 | 0, i33) | 0) >>> 8) + i25 | 0) >>> i26 << i34;
         i35 = (((Math_imul((HEAPU8[i27 + ((i28 & i29) >>> i35) >> 0] | 0) - i30 | 0, i33) | 0) >>> 8) + i30 | 0) >>> i31 << i35;
         HEAP32[i3 >> 2] = i32 | HEAP32[i9 >> 2] | i34 | i35;
         i6 = i6 + 1 | 0;
         if ((i6 | 0) == (i7 | 0)) break; else {
          i3 = i3 + 4 | 0;
          i5 = i5 + 4 | 0;
         }
        }
        i2 = i2 + i7 | 0;
        i1 = i1 + (i7 << 2) | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i8 = i8 + -1 | 0;
      if (!i8) break L54; else i4 = i4 + (HEAP32[i36 >> 2] | 0) | 0;
     }
    }
   case 2:
    {
     i16 = HEAP32[i19 + 12 >> 2] | 0;
     i17 = HEAP32[i19 + 16 >> 2] | 0;
     i18 = HEAP32[i19 + 20 >> 2] | 0;
     i2 = i17 | i16 | i18;
     L147 : do if ((i2 | 0) < 65535) {
      switch (i2 | 0) {
      case 32767:
       break;
      default:
       break L147;
      }
      if ((i16 | 0) == 992 | (i17 | 0) == 992 | (i18 | 0) == 992) {
       i2 = HEAP32[i31 + 12 >> 2] | 0;
       if (i7 << 24 >> 24 == -128) {
        i12 = i2;
        i11 = i4;
       } else {
        i9 = i33 >>> 3;
        i8 = i2;
        i7 = i4;
        while (1) {
         i2 = 0;
         do {
          i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
          i36 = HEAP8[i1 + 1 >> 0] | 0;
          i6 = i36 & 255;
          i1 = i1 + 2 | 0;
          if (!(i36 << 24 >> 24)) {
           if (!i2) break L54;
          } else {
           i3 = 0;
           i4 = i1;
           i5 = i7 + (i2 << 1) | 0;
           while (1) {
            i35 = HEAPU16[i4 >> 1] | 0;
            i36 = HEAPU16[i5 >> 1] | 0;
            i36 = (i36 << 16 | i36) & 65043487;
            i36 = ((Math_imul(((i35 << 16 | i35) & 65043487) - i36 | 0, i9) | 0) >>> 5) + i36 & 65043487;
            HEAP16[i5 >> 1] = i36 >>> 16 | i36;
            i3 = i3 + 1 | 0;
            if ((i3 | 0) == (i6 | 0)) break; else {
             i4 = i4 + 2 | 0;
             i5 = i5 + 2 | 0;
            }
           }
           i2 = i2 + i6 | 0;
           i1 = i1 + (i6 << 1) | 0;
          }
         } while ((i2 | 0) != (i38 | 0));
         i8 = i8 + -1 | 0;
         if (!i8) break L54; else i7 = i7 + i32 | 0;
        }
       }
       while (1) {
        i2 = 0;
        do {
         i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
         i35 = HEAP8[i1 + 1 >> 0] | 0;
         i9 = i35 & 255;
         i10 = i1 + 2 | 0;
         if (!(i35 << 24 >> 24)) if (!i2) break L54; else i1 = i10; else {
          i5 = i11 + (i2 << 1) | 0;
          i3 = i10;
          do if (!((i5 ^ i3) & 3)) {
           if (!(i3 & 3)) {
            i4 = i9;
            i3 = i10;
            i1 = i5;
           } else {
            i3 = HEAP16[i10 >> 1] | 0;
            i4 = HEAP16[i5 >> 1] | 0;
            HEAP16[i5 >> 1] = (((i4 & -1058 & 65535) + (i3 & -1058 & 65535) | 0) >>> 1) + (i3 & 1057 & i4 & 65535);
            i4 = i9 + -1 | 0;
            i3 = i1 + 4 | 0;
            i1 = i5 + 2 | 0;
           }
           if (i4 >>> 0 > 1) {
            i6 = i4 + -2 | 0;
            i7 = i6 & -2;
            i8 = i1 + 4 + (i7 << 1) | 0;
            i5 = i3;
            while (1) {
             i34 = HEAP32[i5 >> 2] | 0;
             i35 = HEAP32[i1 >> 2] | 0;
             HEAP32[i1 >> 2] = (i35 >>> 1 & 2112847343) + (i34 >>> 1 & 2112847343) + (i34 & 69272609 & i35);
             i4 = i4 + -2 | 0;
             if (i4 >>> 0 <= 1) break; else {
              i5 = i5 + 4 | 0;
              i1 = i1 + 4 | 0;
             }
            }
            i4 = i6 - i7 | 0;
            i3 = i3 + 4 + (i7 << 1) | 0;
            i1 = i8;
           }
           if (!i4) break;
           i34 = HEAP16[i3 >> 1] | 0;
           i35 = HEAP16[i1 >> 1] | 0;
           HEAP16[i1 >> 1] = (((i35 & -1058 & 65535) + (i34 & -1058 & 65535) | 0) >>> 1) + (i34 & 1057 & i35 & 65535);
          } else {
           i3 = i9;
           i4 = i10;
           i1 = i5;
           while (1) {
            i3 = i3 + -1 | 0;
            i34 = HEAP16[i4 >> 1] | 0;
            i35 = HEAP16[i1 >> 1] | 0;
            HEAP16[i1 >> 1] = (((i35 & -1058 & 65535) + (i34 & -1058 & 65535) | 0) >>> 1) + (i34 & 1057 & i35 & 65535);
            if (!i3) break; else {
             i4 = i4 + 2 | 0;
             i1 = i1 + 2 | 0;
            }
           }
          } while (0);
          i2 = i2 + i9 | 0;
          i1 = i10 + (i9 << 1) | 0;
         }
        } while ((i2 | 0) != (i38 | 0));
        i12 = i12 + -1 | 0;
        if (!i12) break L54; else i11 = i11 + (HEAP32[i36 >> 2] | 0) | 0;
       }
      }
     } else {
      switch (i2 | 0) {
      case 65535:
       break;
      default:
       break L147;
      }
      if ((i16 | 0) == 2016 | (i17 | 0) == 2016 | (i18 | 0) == 2016) {
       i2 = HEAP32[i31 + 12 >> 2] | 0;
       if (i7 << 24 >> 24 == -128) {
        i12 = i2;
        i11 = i4;
       } else {
        i9 = i33 >>> 3;
        i8 = i2;
        i7 = i4;
        while (1) {
         i2 = 0;
         do {
          i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
          i36 = HEAP8[i1 + 1 >> 0] | 0;
          i6 = i36 & 255;
          i1 = i1 + 2 | 0;
          if (!(i36 << 24 >> 24)) {
           if (!i2) break L54;
          } else {
           i3 = 0;
           i4 = i1;
           i5 = i7 + (i2 << 1) | 0;
           while (1) {
            i35 = HEAPU16[i4 >> 1] | 0;
            i36 = HEAPU16[i5 >> 1] | 0;
            i36 = (i36 << 16 | i36) & 132184095;
            i36 = ((Math_imul(((i35 << 16 | i35) & 132184095) - i36 | 0, i9) | 0) >>> 5) + i36 & 132184095;
            HEAP16[i5 >> 1] = i36 >>> 16 | i36;
            i3 = i3 + 1 | 0;
            if ((i3 | 0) == (i6 | 0)) break; else {
             i4 = i4 + 2 | 0;
             i5 = i5 + 2 | 0;
            }
           }
           i2 = i2 + i6 | 0;
           i1 = i1 + (i6 << 1) | 0;
          }
         } while ((i2 | 0) != (i38 | 0));
         i8 = i8 + -1 | 0;
         if (!i8) break L54; else i7 = i7 + i32 | 0;
        }
       }
       while (1) {
        i2 = 0;
        do {
         i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
         i35 = HEAP8[i1 + 1 >> 0] | 0;
         i9 = i35 & 255;
         i10 = i1 + 2 | 0;
         if (!(i35 << 24 >> 24)) if (!i2) break L54; else i1 = i10; else {
          i5 = i11 + (i2 << 1) | 0;
          i3 = i10;
          do if (!((i5 ^ i3) & 3)) {
           if (!(i3 & 3)) {
            i4 = i9;
            i3 = i10;
            i1 = i5;
           } else {
            i3 = HEAP16[i10 >> 1] | 0;
            i4 = HEAP16[i5 >> 1] | 0;
            HEAP16[i5 >> 1] = (((i4 & -2082 & 65535) + (i3 & -2082 & 65535) | 0) >>> 1) + (i3 & 2081 & i4 & 65535);
            i4 = i9 + -1 | 0;
            i3 = i1 + 4 | 0;
            i1 = i5 + 2 | 0;
           }
           if (i4 >>> 0 > 1) {
            i6 = i4 + -2 | 0;
            i7 = i6 & -2;
            i8 = i1 + 4 + (i7 << 1) | 0;
            i5 = i3;
            while (1) {
             i34 = HEAP32[i5 >> 2] | 0;
             i35 = HEAP32[i1 >> 2] | 0;
             HEAP32[i1 >> 2] = (i35 >>> 1 & 2079292399) + (i34 >>> 1 & 2079292399) + (i34 & 136382497 & i35);
             i4 = i4 + -2 | 0;
             if (i4 >>> 0 <= 1) break; else {
              i5 = i5 + 4 | 0;
              i1 = i1 + 4 | 0;
             }
            }
            i4 = i6 - i7 | 0;
            i3 = i3 + 4 + (i7 << 1) | 0;
            i1 = i8;
           }
           if (!i4) break;
           i34 = HEAP16[i3 >> 1] | 0;
           i35 = HEAP16[i1 >> 1] | 0;
           HEAP16[i1 >> 1] = (((i35 & -2082 & 65535) + (i34 & -2082 & 65535) | 0) >>> 1) + (i34 & 2081 & i35 & 65535);
          } else {
           i3 = i9;
           i4 = i10;
           i1 = i5;
           while (1) {
            i3 = i3 + -1 | 0;
            i34 = HEAP16[i4 >> 1] | 0;
            i35 = HEAP16[i1 >> 1] | 0;
            HEAP16[i1 >> 1] = (((i35 & -2082 & 65535) + (i34 & -2082 & 65535) | 0) >>> 1) + (i34 & 2081 & i35 & 65535);
            if (!i3) break; else {
             i4 = i4 + 2 | 0;
             i1 = i1 + 2 | 0;
            }
           }
          } while (0);
          i2 = i2 + i9 | 0;
          i1 = i10 + (i9 << 1) | 0;
         }
        } while ((i2 | 0) != (i38 | 0));
        i12 = i12 + -1 | 0;
        if (!i12) break L54; else i11 = i11 + (HEAP32[i36 >> 2] | 0) | 0;
       }
      }
     } while (0);
     i10 = i19 + 28 | 0;
     i11 = i19 + 32 | 0;
     i12 = i19 + 29 | 0;
     i13 = i19 + 33 | 0;
     i14 = i19 + 30 | 0;
     i15 = i19 + 34 | 0;
     i9 = i19 + 24 | 0;
     i8 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
       i36 = HEAP8[i1 + 1 >> 0] | 0;
       i7 = i36 & 255;
       i1 = i1 + 2 | 0;
       if (!(i36 << 24 >> 24)) {
        if (!i2) break L54;
       } else {
        i3 = i4 + (i2 << 1) | 0;
        i5 = i1;
        i6 = 0;
        while (1) {
         i29 = HEAPU16[i5 >> 1] | 0;
         i30 = HEAPU16[i3 >> 1] | 0;
         i24 = HEAPU8[i10 >> 0] | 0;
         i22 = HEAP32[5724 + (i24 << 2) >> 2] | 0;
         i34 = HEAPU8[i11 >> 0] | 0;
         i27 = HEAPU8[i12 >> 0] | 0;
         i25 = HEAP32[5724 + (i27 << 2) >> 2] | 0;
         i35 = HEAPU8[i13 >> 0] | 0;
         i31 = HEAPU8[i14 >> 0] | 0;
         i28 = HEAP32[5724 + (i31 << 2) >> 2] | 0;
         i36 = HEAPU8[i15 >> 0] | 0;
         i23 = HEAPU8[i22 + ((i16 & i30) >>> i34) >> 0] | 0;
         i26 = HEAPU8[i25 + ((i17 & i30) >>> i35) >> 0] | 0;
         i30 = HEAPU8[i28 + ((i18 & i30) >>> i36) >> 0] | 0;
         i34 = (((Math_imul((HEAPU8[i22 + ((i16 & i29) >>> i34) >> 0] | 0) - i23 | 0, i33) | 0) >>> 8) + i23 | 0) >>> i24 << i34;
         i35 = (((Math_imul((HEAPU8[i25 + ((i17 & i29) >>> i35) >> 0] | 0) - i26 | 0, i33) | 0) >>> 8) + i26 | 0) >>> i27 << i35;
         i36 = (((Math_imul((HEAPU8[i28 + ((i18 & i29) >>> i36) >> 0] | 0) - i30 | 0, i33) | 0) >>> 8) + i30 | 0) >>> i31 << i36;
         HEAP16[i3 >> 1] = i34 | HEAP32[i9 >> 2] | i35 | i36;
         i6 = i6 + 1 | 0;
         if ((i6 | 0) == (i7 | 0)) break; else {
          i3 = i3 + 2 | 0;
          i5 = i5 + 2 | 0;
         }
        }
        i2 = i2 + i7 | 0;
        i1 = i1 + (i7 << 1) | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i8 = i8 + -1 | 0;
      if (!i8) break L54; else i4 = i4 + i32 | 0;
     }
    }
   case 3:
    {
     i10 = i19 + 28 | 0;
     i11 = i19 + 12 | 0;
     i12 = i19 + 32 | 0;
     i13 = i19 + 29 | 0;
     i14 = i19 + 16 | 0;
     i15 = i19 + 33 | 0;
     i16 = i19 + 30 | 0;
     i17 = i19 + 20 | 0;
     i18 = i19 + 34 | 0;
     i9 = i19 + 24 | 0;
     i8 = HEAP32[i31 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
       i35 = HEAP8[i1 + 1 >> 0] | 0;
       i7 = i35 & 255;
       i1 = i1 + 2 | 0;
       if (!(i35 << 24 >> 24)) {
        if (!i2) break L54;
       } else {
        i3 = i4 + (i2 * 3 | 0) | 0;
        i5 = i1;
        i6 = 0;
        while (1) {
         i27 = (HEAPU8[i5 + 1 >> 0] | 0) << 8 | (HEAPU8[i5 + 2 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0);
         i35 = i3 + 2 | 0;
         i32 = i3 + 1 | 0;
         i28 = (HEAPU8[i32 >> 0] | 0) << 8 | (HEAPU8[i35 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0);
         i20 = HEAPU8[i10 >> 0] | 0;
         i40 = HEAP32[5724 + (i20 << 2) >> 2] | 0;
         i39 = HEAP32[i11 >> 2] | 0;
         i30 = HEAPU8[i12 >> 0] | 0;
         i24 = HEAPU8[i13 >> 0] | 0;
         i21 = HEAP32[5724 + (i24 << 2) >> 2] | 0;
         i22 = HEAP32[i14 >> 2] | 0;
         i31 = HEAPU8[i15 >> 0] | 0;
         i29 = HEAPU8[i16 >> 0] | 0;
         i25 = HEAP32[5724 + (i29 << 2) >> 2] | 0;
         i26 = HEAP32[i17 >> 2] | 0;
         i34 = HEAPU8[i18 >> 0] | 0;
         i19 = HEAPU8[i40 + ((i28 & i39) >>> i30) >> 0] | 0;
         i23 = HEAPU8[i21 + ((i22 & i28) >>> i31) >> 0] | 0;
         i28 = HEAPU8[i25 + ((i26 & i28) >>> i34) >> 0] | 0;
         i30 = (((Math_imul((HEAPU8[i40 + ((i39 & i27) >>> i30) >> 0] | 0) - i19 | 0, i33) | 0) >>> 8) + i19 | 0) >>> i20 << i30;
         i31 = (((Math_imul((HEAPU8[i21 + ((i22 & i27) >>> i31) >> 0] | 0) - i23 | 0, i33) | 0) >>> 8) + i23 | 0) >>> i24 << i31;
         i34 = (((Math_imul((HEAPU8[i25 + ((i26 & i27) >>> i34) >> 0] | 0) - i28 | 0, i33) | 0) >>> 8) + i28 | 0) >>> i29 << i34;
         i34 = i30 | HEAP32[i9 >> 2] | i31 | i34;
         HEAP8[i3 >> 0] = i34;
         HEAP8[i32 >> 0] = i34 >>> 8;
         HEAP8[i35 >> 0] = i34 >>> 16;
         i6 = i6 + 1 | 0;
         if ((i6 | 0) == (i7 | 0)) break; else {
          i3 = i3 + 3 | 0;
          i5 = i5 + 3 | 0;
         }
        }
        i2 = i2 + i7 | 0;
        i1 = i1 + (i7 * 3 | 0) | 0;
       }
      } while ((i2 | 0) != (i38 | 0));
      i8 = i8 + -1 | 0;
      if (!i8) break L54; else i4 = i4 + (HEAP32[i36 >> 2] | 0) | 0;
     }
    }
   default:
    break L54;
   }
  }
  i6 = HEAP32[i37 + 4 >> 2] | 0;
  i2 = HEAP8[i6 + 9 >> 0] | 0;
  if (i7 << 24 >> 24 == -1) switch (i2 << 24 >> 24) {
  case 1:
   {
    i8 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i7 = i4 + (0 - i34) | 0;
    i6 = HEAP32[i31 + 12 >> 2] | 0;
    while (1) {
     i2 = 0;
     L263 : while (1) {
      i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
      i40 = HEAP8[i1 + 1 >> 0] | 0;
      i5 = i40 & 255;
      i1 = i1 + 2 | 0;
      if (!(i40 << 24 >> 24)) {
       if (!i2) break L54;
      } else {
       L268 : do if ((i2 | 0) < (i8 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i5 - i4 | 0;
         if ((i3 | 0) < 1) i3 = 9; else i35 = 44;
        } else {
         i4 = 0;
         i3 = i5;
         i35 = 44;
        }
        if ((i35 | 0) == 44) {
         i35 = 0;
         i39 = i4 + i2 | 0;
         i40 = i8 - i39 | 0;
         _SDL_memcpy(i7 + i39 | 0, i1 + i4 | 0, (i3 | 0) > (i40 | 0) ? i40 : i3) | 0;
         i3 = 0;
        }
        switch (i3 & 15) {
        case 9:
        case 0:
         break L268;
        default:
         {}
        }
        if (!i3) continue L263; else break L54;
       } while (0);
       i1 = i1 + i5 | 0;
       i2 = i2 + i5 | 0;
      }
      if ((i2 | 0) == (i38 | 0)) break;
     }
     i6 = i6 + -1 | 0;
     if (!i6) break L54; else i7 = i7 + (HEAP32[i36 >> 2] | 0) | 0;
    }
   }
  case 2:
   {
    i8 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i7 = HEAP32[i31 + 12 >> 2] | 0;
    i6 = i4 + (0 - (i34 << 1)) | 0;
    while (1) {
     i2 = 0;
     L282 : while (1) {
      i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
      i40 = HEAP8[i1 + 1 >> 0] | 0;
      i5 = i40 & 255;
      i1 = i1 + 2 | 0;
      if (!(i40 << 24 >> 24)) {
       if (!i2) break L54;
      } else {
       L287 : do if ((i2 | 0) < (i8 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i5 - i4 | 0;
         if ((i3 | 0) < 1) i3 = 14; else i35 = 57;
        } else {
         i4 = 0;
         i3 = i5;
         i35 = 57;
        }
        if ((i35 | 0) == 57) {
         i35 = 0;
         i39 = i4 + i2 | 0;
         i40 = i8 - i39 | 0;
         _SDL_memcpy(i6 + (i39 << 1) | 0, i1 + (i4 << 1) | 0, ((i3 | 0) > (i40 | 0) ? i40 : i3) << 1) | 0;
         i3 = 0;
        }
        switch (i3 & 15) {
        case 14:
        case 0:
         break L287;
        default:
         {}
        }
        if (!i3) continue L282; else break L54;
       } while (0);
       i2 = i2 + i5 | 0;
       i1 = i1 + (i5 << 1) | 0;
      }
      if ((i2 | 0) == (i38 | 0)) break;
     }
     i7 = i7 + -1 | 0;
     if (!i7) break L54; else i6 = i6 + (HEAP32[i36 >> 2] | 0) | 0;
    }
   }
  case 3:
   {
    i8 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i7 = HEAP32[i31 + 12 >> 2] | 0;
    i6 = i4 + (Math_imul(i34, -3) | 0) | 0;
    while (1) {
     i2 = 0;
     L301 : while (1) {
      i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
      i40 = HEAP8[i1 + 1 >> 0] | 0;
      i5 = i40 & 255;
      i1 = i1 + 2 | 0;
      if (!(i40 << 24 >> 24)) {
       if (!i2) break L54;
      } else {
       L306 : do if ((i2 | 0) < (i8 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i5 - i4 | 0;
         if ((i3 | 0) < 1) i3 = 19; else i35 = 70;
        } else {
         i4 = 0;
         i3 = i5;
         i35 = 70;
        }
        if ((i35 | 0) == 70) {
         i35 = 0;
         i39 = i4 + i2 | 0;
         i40 = i8 - i39 | 0;
         _SDL_memcpy(i6 + (i39 * 3 | 0) | 0, i1 + (i4 * 3 | 0) | 0, ((i3 | 0) > (i40 | 0) ? i40 : i3) * 3 | 0) | 0;
         i3 = 0;
        }
        switch (i3 & 31) {
        case 19:
        case 0:
         break L306;
        default:
         {}
        }
        if (!i3) continue L301; else break L54;
       } while (0);
       i2 = i2 + i5 | 0;
       i1 = i1 + (i5 * 3 | 0) | 0;
      }
      if ((i2 | 0) == (i38 | 0)) break;
     }
     i7 = i7 + -1 | 0;
     if (!i7) break L54; else i6 = i6 + (HEAP32[i36 >> 2] | 0) | 0;
    }
   }
  case 4:
   {
    i8 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i7 = HEAP32[i31 + 12 >> 2] | 0;
    i6 = i4 + (0 - (i34 << 2)) | 0;
    while (1) {
     i2 = 0;
     L320 : while (1) {
      i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
      i40 = HEAP16[i1 + 2 >> 1] | 0;
      i5 = i40 & 65535;
      i1 = i1 + 4 | 0;
      if (!(i40 << 16 >> 16)) {
       if (!i2) break L54;
      } else {
       L325 : do if ((i2 | 0) < (i8 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i5 - i4 | 0;
         if ((i3 | 0) < 1) i3 = 24; else i35 = 83;
        } else {
         i4 = 0;
         i3 = i5;
         i35 = 83;
        }
        if ((i35 | 0) == 83) {
         i35 = 0;
         i39 = i4 + i2 | 0;
         i40 = i8 - i39 | 0;
         _SDL_memcpy(i6 + (i39 << 2) | 0, i1 + (i4 << 2) | 0, ((i3 | 0) > (i40 | 0) ? i40 : i3) << 2) | 0;
         i3 = 0;
        }
        switch (i3 & 31) {
        case 24:
        case 0:
         break L325;
        default:
         {}
        }
        if (!i3) continue L320; else break L54;
       } while (0);
       i1 = i1 + (i5 << 2) | 0;
       i2 = i2 + i5 | 0;
      }
      if ((i2 | 0) == (i38 | 0)) break;
     }
     i7 = i7 + -1 | 0;
     if (!i7) break L54; else i6 = i6 + (HEAP32[i36 >> 2] | 0) | 0;
    }
   }
  default:
   break L54;
  }
  switch (i2 << 24 >> 24) {
  case 4:
   {
    i27 = i6 + 12 | 0;
    i2 = HEAP32[i27 >> 2] | 0;
    i28 = i6 + 16 | 0;
    i3 = HEAP32[i28 >> 2] | 0;
    i29 = i6 + 20 | 0;
    i5 = HEAP32[i29 >> 2] | 0;
    if ((i3 | i2 | i5 | 0) == 16777215) if ((i2 | 0) == 65280 | (i3 | 0) == 65280 | (i5 | 0) == 65280) {
     i2 = HEAP32[i31 + 12 >> 2] | 0;
     i10 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
     i3 = i4 + (0 - (i34 << 2)) | 0;
     if (i7 << 24 >> 24 == -128) {
      i9 = i2;
      i8 = i3;
      while (1) {
       i2 = 0;
       L345 : while (1) {
        i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
        i40 = HEAP16[i1 + 2 >> 1] | 0;
        i7 = i40 & 65535;
        i1 = i1 + 4 | 0;
        if (!(i40 << 16 >> 16)) {
         if (!i2) break L54;
        } else {
         L350 : do if ((i2 | 0) < (i10 | 0)) {
          i4 = i34 - i2 | 0;
          if ((i4 | 0) > 0) {
           i3 = i7 - i4 | 0;
           if ((i3 | 0) < 1) i3 = 108; else i35 = 208;
          } else {
           i3 = i7;
           i4 = 0;
           i35 = 208;
          }
          if ((i35 | 0) == 208) {
           i35 = 0;
           i5 = i4 + i2 | 0;
           i6 = i10 - i5 | 0;
           i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
           if ((i6 | 0) > 0) {
            i5 = i8 + (i5 << 2) | 0;
            i3 = i1 + (i4 << 2) | 0;
            i4 = 0;
            while (1) {
             i39 = HEAP32[i3 >> 2] | 0;
             i40 = HEAP32[i5 >> 2] | 0;
             HEAP32[i5 >> 2] = (((i40 & 16711422) + (i39 & 16711422) | 0) >>> 1) + (i39 & 65793 & i40);
             i4 = i4 + 1 | 0;
             if ((i4 | 0) >= (i6 | 0)) {
              i3 = 0;
              break;
             } else {
              i5 = i5 + 4 | 0;
              i3 = i3 + 4 | 0;
             }
            }
           } else i3 = 0;
          }
          switch (i3 & 127) {
          case 108:
          case 0:
           break L350;
          default:
           {}
          }
          if (!i3) continue L345; else break L54;
         } while (0);
         i2 = i2 + i7 | 0;
         i1 = i1 + (i7 << 2) | 0;
        }
        if ((i2 | 0) == (i38 | 0)) break;
       }
       i9 = i9 + -1 | 0;
       if (!i9) break L54; else i8 = i8 + (HEAP32[i36 >> 2] | 0) | 0;
      }
     } else {
      i9 = i2;
      i8 = i3;
      while (1) {
       i2 = 0;
       L366 : while (1) {
        i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
        i40 = HEAP16[i1 + 2 >> 1] | 0;
        i7 = i40 & 65535;
        i1 = i1 + 4 | 0;
        if (!(i40 << 16 >> 16)) {
         if (!i2) break L54;
        } else {
         L371 : do if ((i2 | 0) < (i10 | 0)) {
          i4 = i34 - i2 | 0;
          if ((i4 | 0) > 0) {
           i3 = i7 - i4 | 0;
           if ((i3 | 0) < 1) i3 = 118; else i35 = 221;
          } else {
           i3 = i7;
           i4 = 0;
           i35 = 221;
          }
          if ((i35 | 0) == 221) {
           i35 = 0;
           i5 = i4 + i2 | 0;
           i6 = i10 - i5 | 0;
           i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
           if ((i6 | 0) > 0) {
            i5 = i8 + (i5 << 2) | 0;
            i3 = i1 + (i4 << 2) | 0;
            i4 = 0;
            while (1) {
             i39 = HEAP32[i3 >> 2] | 0;
             i40 = HEAP32[i5 >> 2] | 0;
             i32 = i40 & 16711935;
             i40 = i40 & 65280;
             HEAP32[i5 >> 2] = ((Math_imul((i39 & 16711935) - i32 | 0, i33) | 0) >>> 8) + i32 & 16711935 | ((Math_imul((i39 & 65280) - i40 | 0, i33) | 0) >>> 8) + i40 & 65280;
             i4 = i4 + 1 | 0;
             if ((i4 | 0) >= (i6 | 0)) {
              i3 = 0;
              break;
             } else {
              i5 = i5 + 4 | 0;
              i3 = i3 + 4 | 0;
             }
            }
           } else i3 = 0;
          }
          switch (i3 & 127) {
          case 118:
          case 0:
           break L371;
          default:
           {}
          }
          if (!i3) continue L366; else break L54;
         } while (0);
         i2 = i2 + i7 | 0;
         i1 = i1 + (i7 << 2) | 0;
        }
        if ((i2 | 0) == (i38 | 0)) break;
       }
       i9 = i9 + -1 | 0;
       if (!i9) break L54; else i8 = i8 + (HEAP32[i36 >> 2] | 0) | 0;
      }
     }
    }
    i20 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i21 = i6 + 28 | 0;
    i22 = i6 + 32 | 0;
    i23 = i6 + 29 | 0;
    i24 = i6 + 33 | 0;
    i25 = i6 + 30 | 0;
    i26 = i6 + 34 | 0;
    i19 = i6 + 24 | 0;
    i18 = HEAP32[i31 + 12 >> 2] | 0;
    i17 = i4 + (0 - (i34 << 2)) | 0;
    while (1) {
     i2 = 0;
     do {
      i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
      i40 = HEAP16[i1 + 2 >> 1] | 0;
      i16 = i40 & 65535;
      i1 = i1 + 4 | 0;
      if (!(i40 << 16 >> 16)) {
       if (!i2) break L54;
      } else {
       do if ((i2 | 0) < (i20 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i16 - i4 | 0;
         if ((i3 | 0) < 1) break;
        } else {
         i3 = i16;
         i4 = 0;
        }
        i5 = i4 + i2 | 0;
        i6 = i20 - i5 | 0;
        i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
        if ((i6 | 0) > 0) {
         i7 = HEAPU8[i21 >> 0] | 0;
         i10 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
         i8 = HEAPU8[i23 >> 0] | 0;
         i11 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
         i9 = HEAPU8[i25 >> 0] | 0;
         i12 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
         i13 = HEAPU8[i22 >> 0] | 0;
         i14 = HEAPU8[i24 >> 0] | 0;
         i15 = HEAPU8[i26 >> 0] | 0;
         i5 = i17 + (i5 << 2) | 0;
         i3 = i1 + (i4 << 2) | 0;
         i4 = 0;
         while (1) {
          i32 = HEAP32[i3 >> 2] | 0;
          i40 = HEAP32[i5 >> 2] | 0;
          i41 = HEAP32[i27 >> 2] | 0;
          i30 = HEAP32[i28 >> 2] | 0;
          i31 = HEAP32[i29 >> 2] | 0;
          i35 = HEAPU8[i10 + ((i41 & i40) >>> i13) >> 0] | 0;
          i39 = HEAPU8[i11 + ((i30 & i40) >>> i14) >> 0] | 0;
          i40 = HEAPU8[i12 + ((i31 & i40) >>> i15) >> 0] | 0;
          i35 = (((Math_imul((HEAPU8[i10 + ((i41 & i32) >>> i13) >> 0] | 0) - i35 | 0, i33) | 0) >>> 8) + i35 | 0) >>> i7 << i13;
          i39 = (((Math_imul((HEAPU8[i11 + ((i30 & i32) >>> i14) >> 0] | 0) - i39 | 0, i33) | 0) >>> 8) + i39 | 0) >>> i8 << i14;
          i40 = (((Math_imul((HEAPU8[i12 + ((i31 & i32) >>> i15) >> 0] | 0) - i40 | 0, i33) | 0) >>> 8) + i40 | 0) >>> i9 << i15;
          HEAP32[i5 >> 2] = i35 | HEAP32[i19 >> 2] | i39 | i40;
          i4 = i4 + 1 | 0;
          if ((i4 | 0) >= (i6 | 0)) break; else {
           i5 = i5 + 4 | 0;
           i3 = i3 + 4 | 0;
          }
         }
        }
       } while (0);
       i2 = i2 + i16 | 0;
       i1 = i1 + (i16 << 2) | 0;
      }
     } while ((i2 | 0) != (i38 | 0));
     i18 = i18 + -1 | 0;
     if (!i18) break; else i17 = i17 + (HEAP32[i36 >> 2] | 0) | 0;
    }
    break;
   }
  case 2:
   {
    i28 = HEAP32[i6 + 12 >> 2] | 0;
    i29 = HEAP32[i6 + 16 >> 2] | 0;
    i30 = HEAP32[i6 + 20 >> 2] | 0;
    i2 = i29 | i28 | i30;
    L405 : do if ((i2 | 0) < 65535) {
     switch (i2 | 0) {
     case 32767:
      break;
     default:
      break L405;
     }
     if ((i28 | 0) == 992 | (i29 | 0) == 992 | (i30 | 0) == 992) {
      i2 = HEAP32[i31 + 12 >> 2] | 0;
      i12 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
      i3 = i4 + (0 - (i34 << 1)) | 0;
      if (i7 << 24 >> 24 == -128) {
       i11 = i2;
       i10 = i3;
      } else {
       i11 = i33 >>> 3;
       i10 = i2;
       i9 = i3;
       while (1) {
        i2 = 0;
        L413 : while (1) {
         i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
         i41 = HEAP8[i1 + 1 >> 0] | 0;
         i8 = i41 & 255;
         i1 = i1 + 2 | 0;
         if (!(i41 << 24 >> 24)) {
          if (!i2) break L54;
         } else {
          L418 : do if ((i2 | 0) < (i12 | 0)) {
           i3 = i34 - i2 | 0;
           if ((i3 | 0) > 0) {
            i4 = i8 - i3 | 0;
            if ((i4 | 0) < 1) i3 = 78; else i35 = 160;
           } else {
            i3 = 0;
            i4 = i8;
            i35 = 160;
           }
           if ((i35 | 0) == 160) {
            i35 = 0;
            i7 = i3 + i2 | 0;
            i5 = i12 - i7 | 0;
            i5 = (i4 | 0) > (i5 | 0) ? i5 : i4;
            if ((i5 | 0) > 0) {
             i6 = 0;
             i4 = i1 + (i3 << 1) | 0;
             i3 = i9 + (i7 << 1) | 0;
             while (1) {
              i40 = HEAPU16[i4 >> 1] | 0;
              i41 = HEAPU16[i3 >> 1] | 0;
              i41 = (i41 << 16 | i41) & 65043487;
              i41 = ((Math_imul(((i40 << 16 | i40) & 65043487) - i41 | 0, i11) | 0) >>> 5) + i41 & 65043487;
              HEAP16[i3 >> 1] = i41 >>> 16 | i41;
              i6 = i6 + 1 | 0;
              if ((i6 | 0) >= (i5 | 0)) {
               i3 = 0;
               break;
              } else {
               i4 = i4 + 2 | 0;
               i3 = i3 + 2 | 0;
              }
             }
            } else i3 = 0;
           }
           switch (i3 & 127) {
           case 78:
           case 0:
            break L418;
           default:
            {}
           }
           if (!i3) continue L413; else break L54;
          } while (0);
          i2 = i2 + i8 | 0;
          i1 = i1 + (i8 << 1) | 0;
         }
         if ((i2 | 0) == (i38 | 0)) break;
        }
        i10 = i10 + -1 | 0;
        if (!i10) break L54; else i9 = i9 + i32 | 0;
       }
      }
      while (1) {
       i2 = 0;
       L434 : while (1) {
        i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
        i41 = HEAP8[i1 + 1 >> 0] | 0;
        i9 = i41 & 255;
        i1 = i1 + 2 | 0;
        if (!(i41 << 24 >> 24)) {
         if (!i2) break L54;
        } else {
         L439 : do if ((i2 | 0) < (i12 | 0)) {
          i4 = i34 - i2 | 0;
          if ((i4 | 0) > 0) {
           i3 = i9 - i4 | 0;
           if ((i3 | 0) < 1) i3 = 60; else i35 = 139;
          } else {
           i4 = 0;
           i3 = i9;
           i35 = 139;
          }
          L443 : do if ((i35 | 0) == 139) {
           i35 = 0;
           i5 = i4 + i2 | 0;
           i6 = i12 - i5 | 0;
           i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
           i4 = i1 + (i4 << 1) | 0;
           i3 = i10 + (i5 << 1) | 0;
           i5 = i4;
           if ((i3 ^ i5) & 3 | 0) {
            if (!i6) {
             i3 = 0;
             break;
            }
            while (1) {
             i6 = i6 + -1 | 0;
             i40 = HEAP16[i4 >> 1] | 0;
             i41 = HEAP16[i3 >> 1] | 0;
             HEAP16[i3 >> 1] = (((i41 & -1058 & 65535) + (i40 & -1058 & 65535) | 0) >>> 1) + (i40 & 1057 & i41 & 65535);
             if (!i6) {
              i3 = 0;
              break L443;
             } else {
              i4 = i4 + 2 | 0;
              i3 = i3 + 2 | 0;
             }
            }
           }
           if (i5 & 3) {
            i40 = HEAP16[i4 >> 1] | 0;
            i41 = HEAP16[i3 >> 1] | 0;
            HEAP16[i3 >> 1] = (((i41 & -1058 & 65535) + (i40 & -1058 & 65535) | 0) >>> 1) + (i40 & 1057 & i41 & 65535);
            i6 = i6 + -1 | 0;
            i4 = i4 + 2 | 0;
            i3 = i3 + 2 | 0;
           }
           if (i6 >>> 0 > 1) {
            i7 = i6 + -2 | 0;
            i8 = i3 + 4 | 0;
            i5 = i4;
            while (1) {
             i40 = HEAP32[i5 >> 2] | 0;
             i41 = HEAP32[i3 >> 2] | 0;
             HEAP32[i3 >> 2] = (i40 & 69272609 & i41) + (i40 >>> 1 & 2112847343) + (i41 >>> 1 & 2112847343);
             i6 = i6 + -2 | 0;
             if (i6 >>> 0 <= 1) break; else {
              i5 = i5 + 4 | 0;
              i3 = i3 + 4 | 0;
             }
            }
            i3 = i7 & -2;
            i6 = i7 - i3 | 0;
            i4 = i4 + 4 + (i3 << 1) | 0;
            i3 = i8 + (i3 << 1) | 0;
           }
           if (!i6) {
            i3 = 0;
            break;
           }
           i40 = HEAP16[i4 >> 1] | 0;
           i41 = HEAP16[i3 >> 1] | 0;
           HEAP16[i3 >> 1] = (((i41 & -1058 & 65535) + (i40 & -1058 & 65535) | 0) >>> 1) + (i40 & 1057 & i41 & 65535);
           i3 = 0;
          } while (0);
          switch (i3 & 63) {
          case 60:
          case 0:
           break L439;
          default:
           {}
          }
          if (!i3) continue L434; else break L54;
         } while (0);
         i2 = i2 + i9 | 0;
         i1 = i1 + (i9 << 1) | 0;
        }
        if ((i2 | 0) == (i38 | 0)) break;
       }
       i11 = i11 + -1 | 0;
       if (!i11) break L54; else i10 = i10 + (HEAP32[i36 >> 2] | 0) | 0;
      }
     }
    } else {
     switch (i2 | 0) {
     case 65535:
      break;
     default:
      break L405;
     }
     if ((i28 | 0) == 2016 | (i29 | 0) == 2016 | (i30 | 0) == 2016) {
      i2 = HEAP32[i31 + 12 >> 2] | 0;
      i12 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
      i3 = i4 + (0 - (i34 << 1)) | 0;
      if (i7 << 24 >> 24 == -128) {
       i11 = i2;
       i10 = i3;
      } else {
       i11 = i33 >>> 3;
       i10 = i2;
       i9 = i3;
       while (1) {
        i2 = 0;
        L472 : while (1) {
         i7 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
         i41 = HEAP8[i1 + 1 >> 0] | 0;
         i8 = i41 & 255;
         i1 = i1 + 2 | 0;
         if (!(i41 << 24 >> 24)) if (!i7) break L54; else i2 = i7; else {
          L477 : do if ((i7 | 0) < (i12 | 0)) {
           i2 = i34 - i7 | 0;
           if ((i2 | 0) > 0) {
            i3 = i8 - i2 | 0;
            if ((i3 | 0) < 1) i2 = 49; else i35 = 121;
           } else {
            i2 = 0;
            i3 = i8;
            i35 = 121;
           }
           if ((i35 | 0) == 121) {
            i35 = 0;
            i6 = i2 + i7 | 0;
            i4 = i12 - i6 | 0;
            i4 = (i3 | 0) > (i4 | 0) ? i4 : i3;
            if ((i4 | 0) > 0) {
             i5 = 0;
             i3 = i1 + (i2 << 1) | 0;
             i2 = i9 + (i6 << 1) | 0;
             while (1) {
              i40 = HEAPU16[i3 >> 1] | 0;
              i41 = HEAPU16[i2 >> 1] | 0;
              i41 = (i41 << 16 | i41) & 132184095;
              i41 = ((Math_imul(((i40 << 16 | i40) & 132184095) - i41 | 0, i11) | 0) >>> 5) + i41 & 132184095;
              HEAP16[i2 >> 1] = i41 >>> 16 | i41;
              i5 = i5 + 1 | 0;
              if ((i5 | 0) >= (i4 | 0)) {
               i2 = 0;
               break;
              } else {
               i3 = i3 + 2 | 0;
               i2 = i2 + 2 | 0;
              }
             }
            } else i2 = 0;
           }
           switch (i2 & 63) {
           case 49:
           case 0:
            break L477;
           default:
            {}
           }
           if (!i2) {
            i2 = i7;
            continue L472;
           } else break L54;
          } while (0);
          i2 = i7 + i8 | 0;
          i1 = i1 + (i8 << 1) | 0;
         }
         if ((i2 | 0) == (i38 | 0)) break;
        }
        i10 = i10 + -1 | 0;
        if (!i10) break L54; else i9 = i9 + i32 | 0;
       }
      }
      while (1) {
       i2 = 0;
       L493 : while (1) {
        i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
        i41 = HEAP8[i1 + 1 >> 0] | 0;
        i9 = i41 & 255;
        i1 = i1 + 2 | 0;
        if (!(i41 << 24 >> 24)) {
         if (!i2) break L54;
        } else {
         L498 : do if ((i2 | 0) < (i12 | 0)) {
          i4 = i34 - i2 | 0;
          if ((i4 | 0) > 0) {
           i3 = i9 - i4 | 0;
           if ((i3 | 0) < 1) i3 = 31; else i35 = 100;
          } else {
           i4 = 0;
           i3 = i9;
           i35 = 100;
          }
          L502 : do if ((i35 | 0) == 100) {
           i35 = 0;
           i5 = i4 + i2 | 0;
           i6 = i12 - i5 | 0;
           i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
           i4 = i1 + (i4 << 1) | 0;
           i3 = i10 + (i5 << 1) | 0;
           i5 = i4;
           if ((i3 ^ i5) & 3 | 0) {
            if (!i6) {
             i3 = 0;
             break;
            }
            while (1) {
             i6 = i6 + -1 | 0;
             i40 = HEAP16[i4 >> 1] | 0;
             i41 = HEAP16[i3 >> 1] | 0;
             HEAP16[i3 >> 1] = (((i41 & -2082 & 65535) + (i40 & -2082 & 65535) | 0) >>> 1) + (i40 & 2081 & i41 & 65535);
             if (!i6) {
              i3 = 0;
              break L502;
             } else {
              i4 = i4 + 2 | 0;
              i3 = i3 + 2 | 0;
             }
            }
           }
           if (i5 & 3) {
            i40 = HEAP16[i4 >> 1] | 0;
            i41 = HEAP16[i3 >> 1] | 0;
            HEAP16[i3 >> 1] = (((i41 & -2082 & 65535) + (i40 & -2082 & 65535) | 0) >>> 1) + (i40 & 2081 & i41 & 65535);
            i6 = i6 + -1 | 0;
            i4 = i4 + 2 | 0;
            i3 = i3 + 2 | 0;
           }
           if (i6 >>> 0 > 1) {
            i7 = i6 + -2 | 0;
            i8 = i3 + 4 | 0;
            i5 = i4;
            while (1) {
             i40 = HEAP32[i5 >> 2] | 0;
             i41 = HEAP32[i3 >> 2] | 0;
             HEAP32[i3 >> 2] = (i40 & 136382497 & i41) + (i40 >>> 1 & 2079292399) + (i41 >>> 1 & 2079292399);
             i6 = i6 + -2 | 0;
             if (i6 >>> 0 <= 1) break; else {
              i5 = i5 + 4 | 0;
              i3 = i3 + 4 | 0;
             }
            }
            i3 = i7 & -2;
            i6 = i7 - i3 | 0;
            i4 = i4 + 4 + (i3 << 1) | 0;
            i3 = i8 + (i3 << 1) | 0;
           }
           if (!i6) {
            i3 = 0;
            break;
           }
           i40 = HEAP16[i4 >> 1] | 0;
           i41 = HEAP16[i3 >> 1] | 0;
           HEAP16[i3 >> 1] = (((i41 & -2082 & 65535) + (i40 & -2082 & 65535) | 0) >>> 1) + (i40 & 2081 & i41 & 65535);
           i3 = 0;
          } while (0);
          switch (i3 & 31) {
          case 31:
          case 0:
           break L498;
          default:
           {}
          }
          if (!i3) continue L493; else break L54;
         } while (0);
         i2 = i2 + i9 | 0;
         i1 = i1 + (i9 << 1) | 0;
        }
        if ((i2 | 0) == (i38 | 0)) break;
       }
       i11 = i11 + -1 | 0;
       if (!i11) break L54; else i10 = i10 + (HEAP32[i36 >> 2] | 0) | 0;
      }
     }
    } while (0);
    i21 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i22 = i6 + 28 | 0;
    i23 = i6 + 32 | 0;
    i24 = i6 + 29 | 0;
    i25 = i6 + 33 | 0;
    i26 = i6 + 30 | 0;
    i27 = i6 + 34 | 0;
    i20 = i6 + 24 | 0;
    i19 = HEAP32[i31 + 12 >> 2] | 0;
    i18 = i4 + (0 - (i34 << 1)) | 0;
    while (1) {
     i2 = 0;
     L527 : while (1) {
      i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
      i41 = HEAP8[i1 + 1 >> 0] | 0;
      i17 = i41 & 255;
      i1 = i1 + 2 | 0;
      if (!(i41 << 24 >> 24)) {
       if (!i2) break L54;
      } else {
       L532 : do if ((i2 | 0) < (i21 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i17 - i4 | 0;
         if ((i3 | 0) < 1) i3 = 88; else i35 = 176;
        } else {
         i3 = i17;
         i4 = 0;
         i35 = 176;
        }
        if ((i35 | 0) == 176) {
         i35 = 0;
         i5 = i4 + i2 | 0;
         i6 = i21 - i5 | 0;
         i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
         if ((i6 | 0) > 0) {
          i7 = HEAPU8[i22 >> 0] | 0;
          i10 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
          i8 = HEAPU8[i24 >> 0] | 0;
          i11 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
          i9 = HEAPU8[i26 >> 0] | 0;
          i12 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
          i13 = HEAP32[i20 >> 2] | 0;
          i14 = HEAPU8[i23 >> 0] | 0;
          i15 = HEAPU8[i25 >> 0] | 0;
          i16 = HEAPU8[i27 >> 0] | 0;
          i5 = i18 + (i5 << 1) | 0;
          i3 = i1 + (i4 << 1) | 0;
          i4 = 0;
          while (1) {
           i40 = HEAPU16[i3 >> 1] | 0;
           i41 = HEAPU16[i5 >> 1] | 0;
           i36 = HEAPU8[i10 + ((i28 & i41) >>> i14) >> 0] | 0;
           i39 = HEAPU8[i11 + ((i29 & i41) >>> i15) >> 0] | 0;
           i41 = HEAPU8[i12 + ((i30 & i41) >>> i16) >> 0] | 0;
           HEAP16[i5 >> 1] = (((Math_imul((HEAPU8[i10 + ((i28 & i40) >>> i14) >> 0] | 0) - i36 | 0, i33) | 0) >>> 8) + i36 | 0) >>> i7 << i14 | i13 | (((Math_imul((HEAPU8[i11 + ((i29 & i40) >>> i15) >> 0] | 0) - i39 | 0, i33) | 0) >>> 8) + i39 | 0) >>> i8 << i15 | (((Math_imul((HEAPU8[i12 + ((i30 & i40) >>> i16) >> 0] | 0) - i41 | 0, i33) | 0) >>> 8) + i41 | 0) >>> i9 << i16;
           i4 = i4 + 1 | 0;
           if ((i4 | 0) >= (i6 | 0)) {
            i3 = 0;
            break;
           } else {
            i5 = i5 + 2 | 0;
            i3 = i3 + 2 | 0;
           }
          }
         } else i3 = 0;
        }
        switch (i3 & 127) {
        case 88:
        case 0:
         break L532;
        default:
         {}
        }
        if (!i3) continue L527; else break L54;
       } while (0);
       i2 = i2 + i17 | 0;
       i1 = i1 + (i17 << 1) | 0;
      }
      if ((i2 | 0) == (i38 | 0)) break;
     }
     i19 = i19 + -1 | 0;
     if (!i19) break; else i18 = i18 + i32 | 0;
    }
    break;
   }
  case 3:
   {
    i11 = (HEAP32[i31 + 8 >> 2] | 0) + i34 | 0;
    i12 = i6 + 28 | 0;
    i13 = i6 + 12 | 0;
    i14 = i6 + 32 | 0;
    i15 = i6 + 29 | 0;
    i16 = i6 + 16 | 0;
    i17 = i6 + 33 | 0;
    i18 = i6 + 30 | 0;
    i19 = i6 + 20 | 0;
    i20 = i6 + 34 | 0;
    i10 = i6 + 24 | 0;
    i9 = HEAP32[i31 + 12 >> 2] | 0;
    i8 = i4 + (Math_imul(i34, -3) | 0) | 0;
    while (1) {
     i2 = 0;
     L549 : while (1) {
      i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
      i41 = HEAP8[i1 + 1 >> 0] | 0;
      i7 = i41 & 255;
      i1 = i1 + 2 | 0;
      if (!(i41 << 24 >> 24)) {
       if (!i2) break L54;
      } else {
       L554 : do if ((i2 | 0) < (i11 | 0)) {
        i4 = i34 - i2 | 0;
        if ((i4 | 0) > 0) {
         i3 = i7 - i4 | 0;
         if ((i3 | 0) < 1) i3 = 98; else i35 = 191;
        } else {
         i3 = i7;
         i4 = 0;
         i35 = 191;
        }
        if ((i35 | 0) == 191) {
         i35 = 0;
         i5 = i4 + i2 | 0;
         i6 = i11 - i5 | 0;
         i6 = (i3 | 0) > (i6 | 0) ? i6 : i3;
         if ((i6 | 0) > 0) {
          i5 = i8 + (i5 * 3 | 0) | 0;
          i3 = i1 + (i4 * 3 | 0) | 0;
          i4 = 0;
          while (1) {
           i28 = (HEAPU8[i3 + 1 >> 0] | 0) << 8 | (HEAPU8[i3 + 2 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0);
           i41 = i5 + 2 | 0;
           i39 = i5 + 1 | 0;
           i29 = (HEAPU8[i39 >> 0] | 0) << 8 | (HEAPU8[i41 >> 0] | 0) << 16 | (HEAPU8[i5 >> 0] | 0);
           i21 = HEAPU8[i12 >> 0] | 0;
           i44 = HEAP32[5724 + (i21 << 2) >> 2] | 0;
           i43 = HEAP32[i13 >> 2] | 0;
           i31 = HEAPU8[i14 >> 0] | 0;
           i25 = HEAPU8[i15 >> 0] | 0;
           i22 = HEAP32[5724 + (i25 << 2) >> 2] | 0;
           i23 = HEAP32[i16 >> 2] | 0;
           i32 = HEAPU8[i17 >> 0] | 0;
           i30 = HEAPU8[i18 >> 0] | 0;
           i26 = HEAP32[5724 + (i30 << 2) >> 2] | 0;
           i27 = HEAP32[i19 >> 2] | 0;
           i40 = HEAPU8[i20 >> 0] | 0;
           i42 = HEAPU8[i44 + ((i29 & i43) >>> i31) >> 0] | 0;
           i24 = HEAPU8[i22 + ((i23 & i29) >>> i32) >> 0] | 0;
           i29 = HEAPU8[i26 + ((i27 & i29) >>> i40) >> 0] | 0;
           i31 = (((Math_imul((HEAPU8[i44 + ((i43 & i28) >>> i31) >> 0] | 0) - i42 | 0, i33) | 0) >>> 8) + i42 | 0) >>> i21 << i31;
           i32 = (((Math_imul((HEAPU8[i22 + ((i23 & i28) >>> i32) >> 0] | 0) - i24 | 0, i33) | 0) >>> 8) + i24 | 0) >>> i25 << i32;
           i40 = (((Math_imul((HEAPU8[i26 + ((i27 & i28) >>> i40) >> 0] | 0) - i29 | 0, i33) | 0) >>> 8) + i29 | 0) >>> i30 << i40;
           i40 = i31 | HEAP32[i10 >> 2] | i32 | i40;
           HEAP8[i5 >> 0] = i40;
           HEAP8[i39 >> 0] = i40 >>> 8;
           HEAP8[i41 >> 0] = i40 >>> 16;
           i4 = i4 + 1 | 0;
           if ((i4 | 0) >= (i6 | 0)) {
            i3 = 0;
            break;
           } else {
            i5 = i5 + 3 | 0;
            i3 = i3 + 3 | 0;
           }
          }
         } else i3 = 0;
        }
        switch (i3 & 127) {
        case 98:
        case 0:
         break L554;
        default:
         {}
        }
        if (!i3) continue L549; else break L54;
       } while (0);
       i2 = i2 + i7 | 0;
       i1 = i1 + (i7 * 3 | 0) | 0;
      }
      if ((i2 | 0) == (i38 | 0)) break;
     }
     i9 = i9 + -1 | 0;
     if (!i9) break; else i8 = i8 + (HEAP32[i36 >> 2] | 0) | 0;
    }
    break;
   }
  default:
   break L54;
  }
 } while (0);
 if (!(HEAP32[i37 >> 2] & 2)) {
  i44 = 0;
  return i44 | 0;
 }
 _SDL_UnlockSurface(i37);
 i44 = 0;
 return i44 | 0;
}

function _BlitNto1Key(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0;
 i5 = HEAP32[i2 + 24 >> 2] | 0;
 i15 = HEAP32[i2 + 28 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i199 = HEAP32[i2 + 16 >> 2] | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 i195 = HEAP32[i2 + 36 >> 2] | 0;
 i193 = HEAP32[i2 + 40 >> 2] | 0;
 i192 = HEAP32[i2 + 48 >> 2] | 0;
 i196 = ~HEAP32[i193 + 24 >> 2];
 i197 = HEAP8[i193 + 9 >> 0] | 0;
 i198 = i197 & 255;
 i194 = HEAP32[i2 + 56 >> 2] & i196;
 i4 = i15 + -1 | 0;
 i2 = (i15 | 0) == 0;
 if (!i192) {
  if (i2) return;
  i15 = (i5 + 7 | 0) / 8 | 0;
  i14 = i5 & 255;
  i6 = i193 + 28 | 0;
  i7 = i193 + 12 | 0;
  i8 = i193 + 32 | 0;
  i9 = i193 + 29 | 0;
  i10 = i193 + 16 | 0;
  i11 = i193 + 33 | 0;
  i12 = i193 + 30 | 0;
  i13 = i193 + 20 | 0;
  i5 = i193 + 34 | 0;
  L6 : while (1) {
   switch (i14 & 7) {
   case 0:
    {
     i19 = i15;
     i38 = i3;
     i39 = i1;
     i1 = 7;
     break;
    }
   case 7:
    {
     i88 = i15;
     i99 = i3;
     i100 = i1;
     i1 = 16;
     break;
    }
   case 6:
    {
     i101 = i15;
     i110 = i3;
     i111 = i1;
     i1 = 25;
     break;
    }
   case 5:
    {
     i112 = i15;
     i121 = i3;
     i122 = i1;
     i1 = 34;
     break;
    }
   case 4:
    {
     i123 = i15;
     i132 = i3;
     i133 = i1;
     i1 = 43;
     break;
    }
   case 3:
    {
     i134 = i15;
     i143 = i3;
     i144 = i1;
     i1 = 52;
     break;
    }
   case 2:
    {
     i145 = i15;
     i154 = i3;
     i155 = i1;
     i1 = 61;
     break;
    }
   case 1:
    {
     i156 = i15;
     i165 = i3;
     i166 = i1;
     i1 = 70;
     break;
    }
   default:
    {
     i1 = 79;
     break L6;
    }
   }
   while (1) if ((i1 | 0) == 7) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i176 = HEAPU8[i38 >> 0] | 0;
      i18 = i176;
      i22 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i176) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i24 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i176) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i176 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i176) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 12;
      break;
     }
    case 2:
     {
      i176 = HEAPU16[i38 >> 1] | 0;
      i18 = i176;
      i22 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i176) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i24 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i176) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i176 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i176) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 12;
      break;
     }
    case 3:
     {
      i18 = 0;
      i22 = i38 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i24 = i38 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i176 = i38 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 12;
      break;
     }
    case 4:
     {
      i176 = HEAP32[i38 >> 2] | 0;
      i18 = i176;
      i22 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i176) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i24 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i176) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i176 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i176) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 12;
      break;
     }
    default:
     {
      i17 = 0;
      i20 = 0;
      i21 = 0;
      i23 = 0;
     }
    }
    if ((i1 | 0) == 12) {
     i17 = i18;
     i20 = HEAP8[i176 >> 0] | 0;
     i21 = HEAP8[i22 >> 0] | 0;
     i23 = HEAP8[i24 >> 0] | 0;
    }
    if ((i17 & i196 | 0) != (i194 | 0)) HEAP8[i39 >> 0] = (i21 & 255) >>> 5 << 2 | i23 & -32 & 255 | (i20 & 255) >>> 6;
    i88 = i19;
    i99 = i38 + i198 | 0;
    i100 = i39 + 1 | 0;
    i1 = 16;
    continue;
   } else if ((i1 | 0) == 16) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i177 = HEAPU8[i99 >> 0] | 0;
      i37 = i177;
      i91 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i177) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i93 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i177) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i177 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i177) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 21;
      break;
     }
    case 2:
     {
      i177 = HEAPU16[i99 >> 1] | 0;
      i37 = i177;
      i91 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i177) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i93 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i177) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i177 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i177) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 21;
      break;
     }
    case 3:
     {
      i37 = 0;
      i91 = i99 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i93 = i99 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i177 = i99 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 21;
      break;
     }
    case 4:
     {
      i177 = HEAP32[i99 >> 2] | 0;
      i37 = i177;
      i91 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i177) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i93 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i177) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i177 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i177) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 21;
      break;
     }
    default:
     {
      i36 = 0;
      i89 = 0;
      i90 = 0;
      i92 = 0;
     }
    }
    if ((i1 | 0) == 21) {
     i36 = i37;
     i89 = HEAP8[i177 >> 0] | 0;
     i90 = HEAP8[i91 >> 0] | 0;
     i92 = HEAP8[i93 >> 0] | 0;
    }
    if ((i36 & i196 | 0) != (i194 | 0)) HEAP8[i100 >> 0] = (i90 & 255) >>> 5 << 2 | i92 & -32 & 255 | (i89 & 255) >>> 6;
    i101 = i88;
    i110 = i99 + i198 | 0;
    i111 = i100 + 1 | 0;
    i1 = 25;
    continue;
   } else if ((i1 | 0) == 25) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i178 = HEAPU8[i110 >> 0] | 0;
      i96 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i178) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i98 = i178;
      i104 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i178) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i178 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i178) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 30;
      break;
     }
    case 2:
     {
      i178 = HEAPU16[i110 >> 1] | 0;
      i96 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i178) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i98 = i178;
      i104 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i178) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i178 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i178) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 30;
      break;
     }
    case 3:
     {
      i96 = i110 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i98 = 0;
      i104 = i110 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i178 = i110 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 30;
      break;
     }
    case 4:
     {
      i178 = HEAP32[i110 >> 2] | 0;
      i96 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i178) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i98 = i178;
      i104 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i178) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i178 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i178) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 30;
      break;
     }
    default:
     {
      i95 = 0;
      i97 = 0;
      i102 = 0;
      i103 = 0;
     }
    }
    if ((i1 | 0) == 30) {
     i95 = HEAP8[i96 >> 0] | 0;
     i97 = i98;
     i102 = HEAP8[i178 >> 0] | 0;
     i103 = HEAP8[i104 >> 0] | 0;
    }
    if ((i97 & i196 | 0) != (i194 | 0)) HEAP8[i111 >> 0] = (i103 & 255) >>> 5 << 2 | i95 & -32 & 255 | (i102 & 255) >>> 6;
    i112 = i101;
    i121 = i110 + i198 | 0;
    i122 = i111 + 1 | 0;
    i1 = 34;
    continue;
   } else if ((i1 | 0) == 34) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i179 = HEAPU8[i121 >> 0] | 0;
      i107 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i179) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i109 = i179;
      i115 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i179) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i179 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i179) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 39;
      break;
     }
    case 2:
     {
      i179 = HEAPU16[i121 >> 1] | 0;
      i107 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i179) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i109 = i179;
      i115 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i179) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i179 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i179) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 39;
      break;
     }
    case 3:
     {
      i107 = i121 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i109 = 0;
      i115 = i121 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i179 = i121 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 39;
      break;
     }
    case 4:
     {
      i179 = HEAP32[i121 >> 2] | 0;
      i107 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i179) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i109 = i179;
      i115 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i179) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i179 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i179) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 39;
      break;
     }
    default:
     {
      i106 = 0;
      i108 = 0;
      i113 = 0;
      i114 = 0;
     }
    }
    if ((i1 | 0) == 39) {
     i106 = HEAP8[i107 >> 0] | 0;
     i108 = i109;
     i113 = HEAP8[i179 >> 0] | 0;
     i114 = HEAP8[i115 >> 0] | 0;
    }
    if ((i108 & i196 | 0) != (i194 | 0)) HEAP8[i122 >> 0] = (i114 & 255) >>> 5 << 2 | i106 & -32 & 255 | (i113 & 255) >>> 6;
    i123 = i112;
    i132 = i121 + i198 | 0;
    i133 = i122 + 1 | 0;
    i1 = 43;
    continue;
   } else if ((i1 | 0) == 43) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i180 = HEAPU8[i132 >> 0] | 0;
      i118 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i180) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i120 = i180;
      i126 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i180) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i180 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i180) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 48;
      break;
     }
    case 2:
     {
      i180 = HEAPU16[i132 >> 1] | 0;
      i118 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i180) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i120 = i180;
      i126 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i180) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i180 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i180) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 48;
      break;
     }
    case 3:
     {
      i118 = i132 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i120 = 0;
      i126 = i132 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i180 = i132 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 48;
      break;
     }
    case 4:
     {
      i180 = HEAP32[i132 >> 2] | 0;
      i118 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i180) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i120 = i180;
      i126 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i180) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i180 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i180) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 48;
      break;
     }
    default:
     {
      i117 = 0;
      i119 = 0;
      i124 = 0;
      i125 = 0;
     }
    }
    if ((i1 | 0) == 48) {
     i117 = HEAP8[i118 >> 0] | 0;
     i119 = i120;
     i124 = HEAP8[i180 >> 0] | 0;
     i125 = HEAP8[i126 >> 0] | 0;
    }
    if ((i119 & i196 | 0) != (i194 | 0)) HEAP8[i133 >> 0] = (i125 & 255) >>> 5 << 2 | i117 & -32 & 255 | (i124 & 255) >>> 6;
    i134 = i123;
    i143 = i132 + i198 | 0;
    i144 = i133 + 1 | 0;
    i1 = 52;
    continue;
   } else if ((i1 | 0) == 52) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i181 = HEAPU8[i143 >> 0] | 0;
      i129 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i181) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i131 = i181;
      i137 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i181) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i181 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i181) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 57;
      break;
     }
    case 2:
     {
      i181 = HEAPU16[i143 >> 1] | 0;
      i129 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i181) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i131 = i181;
      i137 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i181) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i181 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i181) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 57;
      break;
     }
    case 3:
     {
      i129 = i143 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i131 = 0;
      i137 = i143 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i181 = i143 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 57;
      break;
     }
    case 4:
     {
      i181 = HEAP32[i143 >> 2] | 0;
      i129 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i181) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i131 = i181;
      i137 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i181) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i181 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i181) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 57;
      break;
     }
    default:
     {
      i128 = 0;
      i130 = 0;
      i135 = 0;
      i136 = 0;
     }
    }
    if ((i1 | 0) == 57) {
     i128 = HEAP8[i129 >> 0] | 0;
     i130 = i131;
     i135 = HEAP8[i181 >> 0] | 0;
     i136 = HEAP8[i137 >> 0] | 0;
    }
    if ((i130 & i196 | 0) != (i194 | 0)) HEAP8[i144 >> 0] = (i136 & 255) >>> 5 << 2 | i128 & -32 & 255 | (i135 & 255) >>> 6;
    i145 = i134;
    i154 = i143 + i198 | 0;
    i155 = i144 + 1 | 0;
    i1 = 61;
    continue;
   } else if ((i1 | 0) == 61) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i182 = HEAPU8[i154 >> 0] | 0;
      i140 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i182) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i142 = i182;
      i148 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i182) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i182 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i182) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 66;
      break;
     }
    case 2:
     {
      i182 = HEAPU16[i154 >> 1] | 0;
      i140 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i182) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i142 = i182;
      i148 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i182) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i182 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i182) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 66;
      break;
     }
    case 3:
     {
      i140 = i154 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i142 = 0;
      i148 = i154 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i182 = i154 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 66;
      break;
     }
    case 4:
     {
      i182 = HEAP32[i154 >> 2] | 0;
      i140 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i182) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i142 = i182;
      i148 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i182) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i182 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i182) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 66;
      break;
     }
    default:
     {
      i139 = 0;
      i141 = 0;
      i146 = 0;
      i147 = 0;
     }
    }
    if ((i1 | 0) == 66) {
     i139 = HEAP8[i140 >> 0] | 0;
     i141 = i142;
     i146 = HEAP8[i182 >> 0] | 0;
     i147 = HEAP8[i148 >> 0] | 0;
    }
    if ((i141 & i196 | 0) != (i194 | 0)) HEAP8[i155 >> 0] = (i147 & 255) >>> 5 << 2 | i139 & -32 & 255 | (i146 & 255) >>> 6;
    i156 = i145;
    i165 = i154 + i198 | 0;
    i166 = i155 + 1 | 0;
    i1 = 70;
    continue;
   } else if ((i1 | 0) == 70) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i183 = HEAPU8[i165 >> 0] | 0;
      i151 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i183) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i153 = i183;
      i159 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i183) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i183 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i183) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 75;
      break;
     }
    case 2:
     {
      i183 = HEAPU16[i165 >> 1] | 0;
      i151 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i183) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i153 = i183;
      i159 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i183) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i183 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i183) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 75;
      break;
     }
    case 3:
     {
      i151 = i165 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i153 = 0;
      i159 = i165 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i183 = i165 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 75;
      break;
     }
    case 4:
     {
      i183 = HEAP32[i165 >> 2] | 0;
      i151 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i183) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i153 = i183;
      i159 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i183) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i183 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i183) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 75;
      break;
     }
    default:
     {
      i150 = 0;
      i152 = 0;
      i157 = 0;
      i158 = 0;
     }
    }
    if ((i1 | 0) == 75) {
     i150 = HEAP8[i151 >> 0] | 0;
     i152 = i153;
     i157 = HEAP8[i183 >> 0] | 0;
     i158 = HEAP8[i159 >> 0] | 0;
    }
    if ((i152 & i196 | 0) != (i194 | 0)) HEAP8[i166 >> 0] = (i158 & 255) >>> 5 << 2 | i150 & -32 & 255 | (i157 & 255) >>> 6;
    i2 = i166 + 1 | 0;
    i1 = i165 + i198 | 0;
    if ((i156 | 0) > 1) {
     i19 = i156 + -1 | 0;
     i38 = i1;
     i39 = i2;
     i1 = 7;
     continue;
    } else break;
   }
   if (!i4) {
    i1 = 156;
    break;
   } else {
    i3 = i1 + i199 | 0;
    i1 = i2 + i195 | 0;
    i4 = i4 + -1 | 0;
   }
  }
  if ((i1 | 0) != 79) if ((i1 | 0) == 156) return;
 } else {
  if (i2) return;
  i15 = (i5 + 7 | 0) / 8 | 0;
  i14 = i5 & 255;
  i6 = i193 + 28 | 0;
  i7 = i193 + 12 | 0;
  i8 = i193 + 32 | 0;
  i9 = i193 + 29 | 0;
  i10 = i193 + 16 | 0;
  i11 = i193 + 33 | 0;
  i12 = i193 + 30 | 0;
  i13 = i193 + 20 | 0;
  i5 = i193 + 34 | 0;
  L114 : while (1) {
   switch (i14 & 7) {
   case 0:
    {
     i16 = i15;
     i31 = i3;
     i32 = i1;
     i1 = 82;
     break;
    }
   case 7:
    {
     i25 = i15;
     i44 = i3;
     i45 = i1;
     i1 = 91;
     break;
    }
   case 6:
    {
     i53 = i3;
     i54 = i1;
     i94 = i15;
     i1 = 100;
     break;
    }
   case 5:
    {
     i62 = i3;
     i63 = i1;
     i105 = i15;
     i1 = 109;
     break;
    }
   case 4:
    {
     i71 = i3;
     i72 = i1;
     i116 = i15;
     i1 = 118;
     break;
    }
   case 3:
    {
     i80 = i3;
     i81 = i1;
     i127 = i15;
     i1 = 127;
     break;
    }
   case 2:
    {
     i84 = i3;
     i85 = i1;
     i138 = i15;
     i1 = 136;
     break;
    }
   case 1:
    {
     i86 = i3;
     i87 = i1;
     i149 = i15;
     i1 = 145;
     break;
    }
   default:
    {
     i1 = 154;
     break L114;
    }
   }
   while (1) if ((i1 | 0) == 82) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i184 = HEAPU8[i31 >> 0] | 0;
      i162 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i184) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i164 = i184;
      i168 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i184) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i184 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i184) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 87;
      break;
     }
    case 2:
     {
      i184 = HEAPU16[i31 >> 1] | 0;
      i162 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i184) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i164 = i184;
      i168 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i184) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i184 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i184) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 87;
      break;
     }
    case 3:
     {
      i162 = i31 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i164 = 0;
      i168 = i31 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i184 = i31 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 87;
      break;
     }
    case 4:
     {
      i184 = HEAP32[i31 >> 2] | 0;
      i162 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i184) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i164 = i184;
      i168 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i184) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i184 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i184) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 87;
      break;
     }
    default:
     {
      i160 = 0;
      i161 = 0;
      i163 = 0;
      i167 = 0;
     }
    }
    if ((i1 | 0) == 87) {
     i160 = HEAP8[i184 >> 0] | 0;
     i161 = HEAP8[i162 >> 0] | 0;
     i163 = i164;
     i167 = HEAP8[i168 >> 0] | 0;
    }
    if ((i163 & i196 | 0) != (i194 | 0)) HEAP8[i32 >> 0] = HEAP8[i192 + ((i167 & 255) >>> 5 << 2 | i161 & -32 & 255 | (i160 & 255) >>> 6) >> 0] | 0;
    i25 = i16;
    i44 = i31 + i198 | 0;
    i45 = i32 + 1 | 0;
    i1 = 91;
    continue;
   } else if ((i1 | 0) == 91) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i185 = HEAPU8[i44 >> 0] | 0;
      i171 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i185) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i173 = i185;
      i175 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i185) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i185 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i185) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 96;
      break;
     }
    case 2:
     {
      i185 = HEAPU16[i44 >> 1] | 0;
      i171 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i185) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i173 = i185;
      i175 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i185) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i185 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i185) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 96;
      break;
     }
    case 3:
     {
      i171 = i44 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i173 = 0;
      i175 = i44 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i185 = i44 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 96;
      break;
     }
    case 4:
     {
      i185 = HEAP32[i44 >> 2] | 0;
      i171 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i185) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i173 = i185;
      i175 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i185) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i185 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i185) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 96;
      break;
     }
    default:
     {
      i169 = 0;
      i170 = 0;
      i172 = 0;
      i174 = 0;
     }
    }
    if ((i1 | 0) == 96) {
     i169 = HEAP8[i185 >> 0] | 0;
     i170 = HEAP8[i171 >> 0] | 0;
     i172 = i173;
     i174 = HEAP8[i175 >> 0] | 0;
    }
    if ((i172 & i196 | 0) != (i194 | 0)) HEAP8[i45 >> 0] = HEAP8[i192 + ((i174 & 255) >>> 5 << 2 | i170 & -32 & 255 | (i169 & 255) >>> 6) >> 0] | 0;
    i53 = i44 + i198 | 0;
    i54 = i45 + 1 | 0;
    i94 = i25;
    i1 = 100;
    continue;
   } else if ((i1 | 0) == 100) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i186 = HEAPU8[i53 >> 0] | 0;
      i28 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i186) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i30 = i186;
      i34 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i186) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i186 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i186) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 105;
      break;
     }
    case 2:
     {
      i186 = HEAPU16[i53 >> 1] | 0;
      i28 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i186) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i30 = i186;
      i34 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i186) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i186 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i186) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 105;
      break;
     }
    case 3:
     {
      i28 = i53 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i30 = 0;
      i34 = i53 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i186 = i53 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 105;
      break;
     }
    case 4:
     {
      i186 = HEAP32[i53 >> 2] | 0;
      i28 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i186) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i30 = i186;
      i34 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i186) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i186 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i186) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 105;
      break;
     }
    default:
     {
      i26 = 0;
      i27 = 0;
      i29 = 0;
      i33 = 0;
     }
    }
    if ((i1 | 0) == 105) {
     i26 = HEAP8[i186 >> 0] | 0;
     i27 = HEAP8[i28 >> 0] | 0;
     i29 = i30;
     i33 = HEAP8[i34 >> 0] | 0;
    }
    if ((i29 & i196 | 0) != (i194 | 0)) HEAP8[i54 >> 0] = HEAP8[i192 + ((i33 & 255) >>> 5 << 2 | i27 & -32 & 255 | (i26 & 255) >>> 6) >> 0] | 0;
    i62 = i53 + i198 | 0;
    i63 = i54 + 1 | 0;
    i105 = i94;
    i1 = 109;
    continue;
   } else if ((i1 | 0) == 109) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i187 = HEAPU8[i62 >> 0] | 0;
      i41 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i187) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i43 = i187;
      i47 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i187) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i187 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i187) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 114;
      break;
     }
    case 2:
     {
      i187 = HEAPU16[i62 >> 1] | 0;
      i41 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i187) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i43 = i187;
      i47 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i187) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i187 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i187) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 114;
      break;
     }
    case 3:
     {
      i41 = i62 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i43 = 0;
      i47 = i62 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i187 = i62 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 114;
      break;
     }
    case 4:
     {
      i187 = HEAP32[i62 >> 2] | 0;
      i41 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i187) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i43 = i187;
      i47 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i187) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i187 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i187) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 114;
      break;
     }
    default:
     {
      i35 = 0;
      i40 = 0;
      i42 = 0;
      i46 = 0;
     }
    }
    if ((i1 | 0) == 114) {
     i35 = HEAP8[i187 >> 0] | 0;
     i40 = HEAP8[i41 >> 0] | 0;
     i42 = i43;
     i46 = HEAP8[i47 >> 0] | 0;
    }
    if ((i42 & i196 | 0) != (i194 | 0)) HEAP8[i63 >> 0] = HEAP8[i192 + ((i46 & 255) >>> 5 << 2 | i40 & -32 & 255 | (i35 & 255) >>> 6) >> 0] | 0;
    i71 = i62 + i198 | 0;
    i72 = i63 + 1 | 0;
    i116 = i105;
    i1 = 118;
    continue;
   } else if ((i1 | 0) == 118) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i188 = HEAPU8[i71 >> 0] | 0;
      i50 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i188) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i52 = i188;
      i56 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i188) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i188 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i188) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 123;
      break;
     }
    case 2:
     {
      i188 = HEAPU16[i71 >> 1] | 0;
      i50 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i188) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i52 = i188;
      i56 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i188) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i188 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i188) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 123;
      break;
     }
    case 3:
     {
      i50 = i71 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i52 = 0;
      i56 = i71 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i188 = i71 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 123;
      break;
     }
    case 4:
     {
      i188 = HEAP32[i71 >> 2] | 0;
      i50 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i188) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i52 = i188;
      i56 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i188) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i188 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i188) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 123;
      break;
     }
    default:
     {
      i48 = 0;
      i49 = 0;
      i51 = 0;
      i55 = 0;
     }
    }
    if ((i1 | 0) == 123) {
     i48 = HEAP8[i188 >> 0] | 0;
     i49 = HEAP8[i50 >> 0] | 0;
     i51 = i52;
     i55 = HEAP8[i56 >> 0] | 0;
    }
    if ((i51 & i196 | 0) != (i194 | 0)) HEAP8[i72 >> 0] = HEAP8[i192 + ((i55 & 255) >>> 5 << 2 | i49 & -32 & 255 | (i48 & 255) >>> 6) >> 0] | 0;
    i80 = i71 + i198 | 0;
    i81 = i72 + 1 | 0;
    i127 = i116;
    i1 = 127;
    continue;
   } else if ((i1 | 0) == 127) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i189 = HEAPU8[i80 >> 0] | 0;
      i59 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i189) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i61 = i189;
      i65 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i189) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i189 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i189) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 132;
      break;
     }
    case 2:
     {
      i189 = HEAPU16[i80 >> 1] | 0;
      i59 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i189) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i61 = i189;
      i65 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i189) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i189 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i189) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 132;
      break;
     }
    case 3:
     {
      i59 = i80 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i61 = 0;
      i65 = i80 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i189 = i80 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 132;
      break;
     }
    case 4:
     {
      i189 = HEAP32[i80 >> 2] | 0;
      i59 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i189) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i61 = i189;
      i65 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i189) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i189 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i189) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 132;
      break;
     }
    default:
     {
      i57 = 0;
      i58 = 0;
      i60 = 0;
      i64 = 0;
     }
    }
    if ((i1 | 0) == 132) {
     i57 = HEAP8[i189 >> 0] | 0;
     i58 = HEAP8[i59 >> 0] | 0;
     i60 = i61;
     i64 = HEAP8[i65 >> 0] | 0;
    }
    if ((i60 & i196 | 0) != (i194 | 0)) HEAP8[i81 >> 0] = HEAP8[i192 + ((i64 & 255) >>> 5 << 2 | i58 & -32 & 255 | (i57 & 255) >>> 6) >> 0] | 0;
    i84 = i80 + i198 | 0;
    i85 = i81 + 1 | 0;
    i138 = i127;
    i1 = 136;
    continue;
   } else if ((i1 | 0) == 136) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i190 = HEAPU8[i84 >> 0] | 0;
      i68 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i190) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i70 = i190;
      i74 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i190) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i190 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i190) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 141;
      break;
     }
    case 2:
     {
      i190 = HEAPU16[i84 >> 1] | 0;
      i68 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i190) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i70 = i190;
      i74 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i190) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i190 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i190) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 141;
      break;
     }
    case 3:
     {
      i68 = i84 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i70 = 0;
      i74 = i84 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i190 = i84 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 141;
      break;
     }
    case 4:
     {
      i190 = HEAP32[i84 >> 2] | 0;
      i68 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i190) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i70 = i190;
      i74 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i190) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i190 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i190) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 141;
      break;
     }
    default:
     {
      i66 = 0;
      i67 = 0;
      i69 = 0;
      i73 = 0;
     }
    }
    if ((i1 | 0) == 141) {
     i66 = HEAP8[i190 >> 0] | 0;
     i67 = HEAP8[i68 >> 0] | 0;
     i69 = i70;
     i73 = HEAP8[i74 >> 0] | 0;
    }
    if ((i69 & i196 | 0) != (i194 | 0)) HEAP8[i85 >> 0] = HEAP8[i192 + ((i73 & 255) >>> 5 << 2 | i67 & -32 & 255 | (i66 & 255) >>> 6) >> 0] | 0;
    i86 = i84 + i198 | 0;
    i87 = i85 + 1 | 0;
    i149 = i138;
    i1 = 145;
    continue;
   } else if ((i1 | 0) == 145) {
    i1 = 0;
    switch (i197 << 24 >> 24) {
    case 1:
     {
      i191 = HEAPU8[i86 >> 0] | 0;
      i77 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i191) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i79 = i191;
      i83 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i191) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i191 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i191) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 150;
      break;
     }
    case 2:
     {
      i191 = HEAPU16[i86 >> 1] | 0;
      i77 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i191) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i79 = i191;
      i83 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i191) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i191 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i191) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 150;
      break;
     }
    case 3:
     {
      i77 = i86 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i79 = 0;
      i83 = i86 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i191 = i86 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 150;
      break;
     }
    case 4:
     {
      i191 = HEAP32[i86 >> 2] | 0;
      i77 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i191) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i79 = i191;
      i83 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i191) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i191 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i191) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 150;
      break;
     }
    default:
     {
      i75 = 0;
      i76 = 0;
      i78 = 0;
      i82 = 0;
     }
    }
    if ((i1 | 0) == 150) {
     i75 = HEAP8[i191 >> 0] | 0;
     i76 = HEAP8[i77 >> 0] | 0;
     i78 = i79;
     i82 = HEAP8[i83 >> 0] | 0;
    }
    if ((i78 & i196 | 0) != (i194 | 0)) HEAP8[i87 >> 0] = HEAP8[i192 + ((i82 & 255) >>> 5 << 2 | i76 & -32 & 255 | (i75 & 255) >>> 6) >> 0] | 0;
    i2 = i87 + 1 | 0;
    i1 = i86 + i198 | 0;
    if ((i149 | 0) > 1) {
     i16 = i149 + -1 | 0;
     i31 = i1;
     i32 = i2;
     i1 = 82;
     continue;
    } else break;
   }
   if (!i4) {
    i1 = 156;
    break;
   } else {
    i3 = i1 + i199 | 0;
    i1 = i2 + i195 | 0;
    i4 = i4 + -1 | 0;
   }
  }
  if ((i1 | 0) != 154) if ((i1 | 0) == 156) return;
 }
}

function _BlitNto1(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0;
 i5 = HEAP32[i2 + 24 >> 2] | 0;
 i15 = HEAP32[i2 + 28 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i165 = HEAP32[i2 + 16 >> 2] | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 i164 = HEAP32[i2 + 36 >> 2] | 0;
 i160 = HEAP32[i2 + 48 >> 2] | 0;
 i161 = HEAP32[i2 + 40 >> 2] | 0;
 i162 = HEAP8[i161 + 9 >> 0] | 0;
 i163 = i162 & 255;
 i4 = i15 + -1 | 0;
 i2 = (i15 | 0) == 0;
 if (!i160) {
  if (i2) return;
  i15 = (i5 + 7 | 0) / 8 | 0;
  i14 = i5 & 255;
  i6 = i161 + 28 | 0;
  i7 = i161 + 12 | 0;
  i8 = i161 + 32 | 0;
  i9 = i161 + 29 | 0;
  i10 = i161 + 16 | 0;
  i11 = i161 + 33 | 0;
  i12 = i161 + 30 | 0;
  i13 = i161 + 20 | 0;
  i5 = i161 + 34 | 0;
  L6 : while (1) {
   switch (i14 & 7) {
   case 0:
    {
     i17 = i15;
     i76 = i3;
     i77 = i1;
     i1 = 7;
     break;
    }
   case 7:
    {
     i70 = i15;
     i85 = i3;
     i86 = i1;
     i1 = 14;
     break;
    }
   case 6:
    {
     i79 = i15;
     i94 = i3;
     i95 = i1;
     i1 = 21;
     break;
    }
   case 5:
    {
     i88 = i15;
     i103 = i3;
     i104 = i1;
     i1 = 28;
     break;
    }
   case 4:
    {
     i97 = i15;
     i112 = i3;
     i113 = i1;
     i1 = 35;
     break;
    }
   case 3:
    {
     i106 = i15;
     i121 = i3;
     i122 = i1;
     i1 = 42;
     break;
    }
   case 2:
    {
     i115 = i15;
     i130 = i3;
     i131 = i1;
     i1 = 49;
     break;
    }
   case 1:
    {
     i124 = i15;
     i137 = i3;
     i138 = i1;
     i1 = 56;
     break;
    }
   default:
    {
     i1 = 63;
     break L6;
    }
   }
   while (1) if ((i1 | 0) == 7) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i144 = HEAPU8[i76 >> 0] | 0;
      i20 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i144) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i22 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i144) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i144 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i144) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 12;
      break;
     }
    case 2:
     {
      i144 = HEAPU16[i76 >> 1] | 0;
      i20 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i144) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i22 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i144) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i144 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i144) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 12;
      break;
     }
    case 3:
     {
      i20 = i76 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i22 = i76 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i144 = i76 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 12;
      break;
     }
    case 4:
     {
      i144 = HEAP32[i76 >> 2] | 0;
      i20 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i144) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i22 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i144) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i144 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i144) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 12;
      break;
     }
    default:
     {
      i18 = 0;
      i19 = 0;
      i21 = 0;
     }
    }
    if ((i1 | 0) == 12) {
     i18 = HEAP8[i144 >> 0] | 0;
     i19 = HEAP8[i20 >> 0] | 0;
     i21 = HEAP8[i22 >> 0] | 0;
    }
    HEAP8[i77 >> 0] = (i19 & 255) >>> 5 << 2 | i21 & -32 & 255 | (i18 & 255) >>> 6;
    i70 = i17;
    i85 = i76 + i163 | 0;
    i86 = i77 + 1 | 0;
    i1 = 14;
    continue;
   } else if ((i1 | 0) == 14) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i145 = HEAPU8[i85 >> 0] | 0;
      i73 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i145) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i75 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i145) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i145 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i145) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 19;
      break;
     }
    case 2:
     {
      i145 = HEAPU16[i85 >> 1] | 0;
      i73 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i145) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i75 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i145) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i145 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i145) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 19;
      break;
     }
    case 3:
     {
      i73 = i85 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i75 = i85 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i145 = i85 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 19;
      break;
     }
    case 4:
     {
      i145 = HEAP32[i85 >> 2] | 0;
      i73 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i145) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i75 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i145) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i145 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i145) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 19;
      break;
     }
    default:
     {
      i71 = 0;
      i72 = 0;
      i74 = 0;
     }
    }
    if ((i1 | 0) == 19) {
     i71 = HEAP8[i145 >> 0] | 0;
     i72 = HEAP8[i73 >> 0] | 0;
     i74 = HEAP8[i75 >> 0] | 0;
    }
    HEAP8[i86 >> 0] = (i72 & 255) >>> 5 << 2 | i74 & -32 & 255 | (i71 & 255) >>> 6;
    i79 = i70;
    i94 = i85 + i163 | 0;
    i95 = i86 + 1 | 0;
    i1 = 21;
    continue;
   } else if ((i1 | 0) == 21) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i146 = HEAPU8[i94 >> 0] | 0;
      i82 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i146) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i84 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i146) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i146 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i146) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 26;
      break;
     }
    case 2:
     {
      i146 = HEAPU16[i94 >> 1] | 0;
      i82 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i146) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i84 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i146) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i146 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i146) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 26;
      break;
     }
    case 3:
     {
      i82 = i94 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i84 = i94 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i146 = i94 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 26;
      break;
     }
    case 4:
     {
      i146 = HEAP32[i94 >> 2] | 0;
      i82 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i146) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i84 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i146) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i146 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i146) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 26;
      break;
     }
    default:
     {
      i80 = 0;
      i81 = 0;
      i83 = 0;
     }
    }
    if ((i1 | 0) == 26) {
     i80 = HEAP8[i146 >> 0] | 0;
     i81 = HEAP8[i82 >> 0] | 0;
     i83 = HEAP8[i84 >> 0] | 0;
    }
    HEAP8[i95 >> 0] = (i81 & 255) >>> 5 << 2 | i83 & -32 & 255 | (i80 & 255) >>> 6;
    i88 = i79;
    i103 = i94 + i163 | 0;
    i104 = i95 + 1 | 0;
    i1 = 28;
    continue;
   } else if ((i1 | 0) == 28) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i147 = HEAPU8[i103 >> 0] | 0;
      i91 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i147) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i93 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i147) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i147 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i147) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 33;
      break;
     }
    case 2:
     {
      i147 = HEAPU16[i103 >> 1] | 0;
      i91 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i147) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i93 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i147) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i147 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i147) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 33;
      break;
     }
    case 3:
     {
      i91 = i103 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i93 = i103 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i147 = i103 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 33;
      break;
     }
    case 4:
     {
      i147 = HEAP32[i103 >> 2] | 0;
      i91 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i147) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i93 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i147) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i147 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i147) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 33;
      break;
     }
    default:
     {
      i89 = 0;
      i90 = 0;
      i92 = 0;
     }
    }
    if ((i1 | 0) == 33) {
     i89 = HEAP8[i147 >> 0] | 0;
     i90 = HEAP8[i91 >> 0] | 0;
     i92 = HEAP8[i93 >> 0] | 0;
    }
    HEAP8[i104 >> 0] = (i90 & 255) >>> 5 << 2 | i92 & -32 & 255 | (i89 & 255) >>> 6;
    i97 = i88;
    i112 = i103 + i163 | 0;
    i113 = i104 + 1 | 0;
    i1 = 35;
    continue;
   } else if ((i1 | 0) == 35) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i148 = HEAPU8[i112 >> 0] | 0;
      i100 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i148) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i102 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i148) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i148 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i148) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 40;
      break;
     }
    case 2:
     {
      i148 = HEAPU16[i112 >> 1] | 0;
      i100 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i148) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i102 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i148) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i148 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i148) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 40;
      break;
     }
    case 3:
     {
      i100 = i112 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i102 = i112 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i148 = i112 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 40;
      break;
     }
    case 4:
     {
      i148 = HEAP32[i112 >> 2] | 0;
      i100 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i148) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i102 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i148) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i148 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i148) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 40;
      break;
     }
    default:
     {
      i98 = 0;
      i99 = 0;
      i101 = 0;
     }
    }
    if ((i1 | 0) == 40) {
     i98 = HEAP8[i148 >> 0] | 0;
     i99 = HEAP8[i100 >> 0] | 0;
     i101 = HEAP8[i102 >> 0] | 0;
    }
    HEAP8[i113 >> 0] = (i99 & 255) >>> 5 << 2 | i101 & -32 & 255 | (i98 & 255) >>> 6;
    i106 = i97;
    i121 = i112 + i163 | 0;
    i122 = i113 + 1 | 0;
    i1 = 42;
    continue;
   } else if ((i1 | 0) == 42) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i149 = HEAPU8[i121 >> 0] | 0;
      i109 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i149) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i111 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i149) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i149 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i149) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 47;
      break;
     }
    case 2:
     {
      i149 = HEAPU16[i121 >> 1] | 0;
      i109 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i149) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i111 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i149) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i149 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i149) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 47;
      break;
     }
    case 3:
     {
      i109 = i121 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i111 = i121 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i149 = i121 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 47;
      break;
     }
    case 4:
     {
      i149 = HEAP32[i121 >> 2] | 0;
      i109 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i149) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i111 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i149) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i149 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i149) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 47;
      break;
     }
    default:
     {
      i107 = 0;
      i108 = 0;
      i110 = 0;
     }
    }
    if ((i1 | 0) == 47) {
     i107 = HEAP8[i149 >> 0] | 0;
     i108 = HEAP8[i109 >> 0] | 0;
     i110 = HEAP8[i111 >> 0] | 0;
    }
    HEAP8[i122 >> 0] = (i108 & 255) >>> 5 << 2 | i110 & -32 & 255 | (i107 & 255) >>> 6;
    i115 = i106;
    i130 = i121 + i163 | 0;
    i131 = i122 + 1 | 0;
    i1 = 49;
    continue;
   } else if ((i1 | 0) == 49) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i150 = HEAPU8[i130 >> 0] | 0;
      i118 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i150) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i120 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i150) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i150 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i150) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 54;
      break;
     }
    case 2:
     {
      i150 = HEAPU16[i130 >> 1] | 0;
      i118 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i150) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i120 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i150) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i150 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i150) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 54;
      break;
     }
    case 3:
     {
      i118 = i130 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i120 = i130 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i150 = i130 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 54;
      break;
     }
    case 4:
     {
      i150 = HEAP32[i130 >> 2] | 0;
      i118 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i150) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i120 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i150) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i150 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i150) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 54;
      break;
     }
    default:
     {
      i116 = 0;
      i117 = 0;
      i119 = 0;
     }
    }
    if ((i1 | 0) == 54) {
     i116 = HEAP8[i150 >> 0] | 0;
     i117 = HEAP8[i118 >> 0] | 0;
     i119 = HEAP8[i120 >> 0] | 0;
    }
    HEAP8[i131 >> 0] = (i117 & 255) >>> 5 << 2 | i119 & -32 & 255 | (i116 & 255) >>> 6;
    i124 = i115;
    i137 = i130 + i163 | 0;
    i138 = i131 + 1 | 0;
    i1 = 56;
    continue;
   } else if ((i1 | 0) == 56) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i151 = HEAPU8[i137 >> 0] | 0;
      i127 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i151) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i129 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i151) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i151 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i151) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 61;
      break;
     }
    case 2:
     {
      i151 = HEAPU16[i137 >> 1] | 0;
      i127 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i151) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i129 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i151) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i151 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i151) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 61;
      break;
     }
    case 3:
     {
      i127 = i137 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i129 = i137 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i151 = i137 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 61;
      break;
     }
    case 4:
     {
      i151 = HEAP32[i137 >> 2] | 0;
      i127 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i151) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i129 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i151) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i151 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i151) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 61;
      break;
     }
    default:
     {
      i125 = 0;
      i126 = 0;
      i128 = 0;
     }
    }
    if ((i1 | 0) == 61) {
     i125 = HEAP8[i151 >> 0] | 0;
     i126 = HEAP8[i127 >> 0] | 0;
     i128 = HEAP8[i129 >> 0] | 0;
    }
    HEAP8[i138 >> 0] = (i126 & 255) >>> 5 << 2 | i128 & -32 & 255 | (i125 & 255) >>> 6;
    i2 = i138 + 1 | 0;
    i1 = i137 + i163 | 0;
    if ((i124 | 0) > 1) {
     i17 = i124 + -1 | 0;
     i76 = i1;
     i77 = i2;
     i1 = 7;
     continue;
    } else break;
   }
   if (!i4) {
    i1 = 124;
    break;
   } else {
    i3 = i1 + i165 | 0;
    i1 = i2 + i164 | 0;
    i4 = i4 + -1 | 0;
   }
  }
  if ((i1 | 0) != 63) if ((i1 | 0) == 124) return;
 } else {
  if (i2) return;
  i15 = (i5 + 7 | 0) / 8 | 0;
  i14 = i5 & 255;
  i6 = i161 + 28 | 0;
  i7 = i161 + 12 | 0;
  i8 = i161 + 32 | 0;
  i9 = i161 + 29 | 0;
  i10 = i161 + 16 | 0;
  i11 = i161 + 33 | 0;
  i12 = i161 + 30 | 0;
  i13 = i161 + 20 | 0;
  i5 = i161 + 34 | 0;
  L90 : while (1) {
   switch (i14 & 7) {
   case 0:
    {
     i16 = i15;
     i29 = i3;
     i30 = i1;
     i1 = 66;
     break;
    }
   case 7:
    {
     i23 = i15;
     i36 = i3;
     i37 = i1;
     i1 = 73;
     break;
    }
   case 6:
    {
     i43 = i3;
     i44 = i1;
     i78 = i15;
     i1 = 80;
     break;
    }
   case 5:
    {
     i50 = i3;
     i51 = i1;
     i87 = i15;
     i1 = 87;
     break;
    }
   case 4:
    {
     i57 = i3;
     i58 = i1;
     i96 = i15;
     i1 = 94;
     break;
    }
   case 3:
    {
     i64 = i3;
     i65 = i1;
     i105 = i15;
     i1 = 101;
     break;
    }
   case 2:
    {
     i66 = i3;
     i67 = i1;
     i114 = i15;
     i1 = 108;
     break;
    }
   case 1:
    {
     i68 = i3;
     i69 = i1;
     i123 = i15;
     i1 = 115;
     break;
    }
   default:
    {
     i1 = 122;
     break L90;
    }
   }
   while (1) if ((i1 | 0) == 66) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i152 = HEAPU8[i29 >> 0] | 0;
      i134 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i152) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i136 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i152) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i152 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i152) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 71;
      break;
     }
    case 2:
     {
      i152 = HEAPU16[i29 >> 1] | 0;
      i134 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i152) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i136 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i152) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i152 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i152) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 71;
      break;
     }
    case 3:
     {
      i134 = i29 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i136 = i29 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i152 = i29 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 71;
      break;
     }
    case 4:
     {
      i152 = HEAP32[i29 >> 2] | 0;
      i134 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i152) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i136 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i152) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i152 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i152) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 71;
      break;
     }
    default:
     {
      i132 = 0;
      i133 = 0;
      i135 = 0;
     }
    }
    if ((i1 | 0) == 71) {
     i132 = HEAP8[i152 >> 0] | 0;
     i133 = HEAP8[i134 >> 0] | 0;
     i135 = HEAP8[i136 >> 0] | 0;
    }
    HEAP8[i30 >> 0] = HEAP8[i160 + ((i133 & 255) >>> 5 << 2 | i135 & -32 & 255 | (i132 & 255) >>> 6) >> 0] | 0;
    i23 = i16;
    i36 = i29 + i163 | 0;
    i37 = i30 + 1 | 0;
    i1 = 73;
    continue;
   } else if ((i1 | 0) == 73) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i153 = HEAPU8[i36 >> 0] | 0;
      i141 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i153) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i143 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i153) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i153 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i153) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 78;
      break;
     }
    case 2:
     {
      i153 = HEAPU16[i36 >> 1] | 0;
      i141 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i153) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i143 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i153) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i153 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i153) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 78;
      break;
     }
    case 3:
     {
      i141 = i36 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i143 = i36 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i153 = i36 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 78;
      break;
     }
    case 4:
     {
      i153 = HEAP32[i36 >> 2] | 0;
      i141 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i153) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i143 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i153) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i153 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i153) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 78;
      break;
     }
    default:
     {
      i139 = 0;
      i140 = 0;
      i142 = 0;
     }
    }
    if ((i1 | 0) == 78) {
     i139 = HEAP8[i153 >> 0] | 0;
     i140 = HEAP8[i141 >> 0] | 0;
     i142 = HEAP8[i143 >> 0] | 0;
    }
    HEAP8[i37 >> 0] = HEAP8[i160 + ((i140 & 255) >>> 5 << 2 | i142 & -32 & 255 | (i139 & 255) >>> 6) >> 0] | 0;
    i43 = i36 + i163 | 0;
    i44 = i37 + 1 | 0;
    i78 = i23;
    i1 = 80;
    continue;
   } else if ((i1 | 0) == 80) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i154 = HEAPU8[i43 >> 0] | 0;
      i26 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i154) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i28 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i154) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i154 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i154) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 85;
      break;
     }
    case 2:
     {
      i154 = HEAPU16[i43 >> 1] | 0;
      i26 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i154) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i28 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i154) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i154 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i154) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 85;
      break;
     }
    case 3:
     {
      i26 = i43 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i28 = i43 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i154 = i43 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 85;
      break;
     }
    case 4:
     {
      i154 = HEAP32[i43 >> 2] | 0;
      i26 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i154) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i28 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i154) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i154 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i154) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 85;
      break;
     }
    default:
     {
      i24 = 0;
      i25 = 0;
      i27 = 0;
     }
    }
    if ((i1 | 0) == 85) {
     i24 = HEAP8[i154 >> 0] | 0;
     i25 = HEAP8[i26 >> 0] | 0;
     i27 = HEAP8[i28 >> 0] | 0;
    }
    HEAP8[i44 >> 0] = HEAP8[i160 + ((i25 & 255) >>> 5 << 2 | i27 & -32 & 255 | (i24 & 255) >>> 6) >> 0] | 0;
    i50 = i43 + i163 | 0;
    i51 = i44 + 1 | 0;
    i87 = i78;
    i1 = 87;
    continue;
   } else if ((i1 | 0) == 87) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i155 = HEAPU8[i50 >> 0] | 0;
      i33 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i155) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i35 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i155) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i155 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i155) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 92;
      break;
     }
    case 2:
     {
      i155 = HEAPU16[i50 >> 1] | 0;
      i33 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i155) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i35 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i155) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i155 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i155) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 92;
      break;
     }
    case 3:
     {
      i33 = i50 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i35 = i50 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i155 = i50 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 92;
      break;
     }
    case 4:
     {
      i155 = HEAP32[i50 >> 2] | 0;
      i33 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i155) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i35 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i155) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i155 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i155) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 92;
      break;
     }
    default:
     {
      i31 = 0;
      i32 = 0;
      i34 = 0;
     }
    }
    if ((i1 | 0) == 92) {
     i31 = HEAP8[i155 >> 0] | 0;
     i32 = HEAP8[i33 >> 0] | 0;
     i34 = HEAP8[i35 >> 0] | 0;
    }
    HEAP8[i51 >> 0] = HEAP8[i160 + ((i32 & 255) >>> 5 << 2 | i34 & -32 & 255 | (i31 & 255) >>> 6) >> 0] | 0;
    i57 = i50 + i163 | 0;
    i58 = i51 + 1 | 0;
    i96 = i87;
    i1 = 94;
    continue;
   } else if ((i1 | 0) == 94) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i156 = HEAPU8[i57 >> 0] | 0;
      i40 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i156) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i42 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i156) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i156 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i156) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 99;
      break;
     }
    case 2:
     {
      i156 = HEAPU16[i57 >> 1] | 0;
      i40 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i156) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i42 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i156) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i156 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i156) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 99;
      break;
     }
    case 3:
     {
      i40 = i57 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i42 = i57 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i156 = i57 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 99;
      break;
     }
    case 4:
     {
      i156 = HEAP32[i57 >> 2] | 0;
      i40 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i156) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i42 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i156) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i156 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i156) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 99;
      break;
     }
    default:
     {
      i38 = 0;
      i39 = 0;
      i41 = 0;
     }
    }
    if ((i1 | 0) == 99) {
     i38 = HEAP8[i156 >> 0] | 0;
     i39 = HEAP8[i40 >> 0] | 0;
     i41 = HEAP8[i42 >> 0] | 0;
    }
    HEAP8[i58 >> 0] = HEAP8[i160 + ((i39 & 255) >>> 5 << 2 | i41 & -32 & 255 | (i38 & 255) >>> 6) >> 0] | 0;
    i64 = i57 + i163 | 0;
    i65 = i58 + 1 | 0;
    i105 = i96;
    i1 = 101;
    continue;
   } else if ((i1 | 0) == 101) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i157 = HEAPU8[i64 >> 0] | 0;
      i47 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i157) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i49 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i157) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i157 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i157) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 106;
      break;
     }
    case 2:
     {
      i157 = HEAPU16[i64 >> 1] | 0;
      i47 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i157) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i49 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i157) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i157 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i157) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 106;
      break;
     }
    case 3:
     {
      i47 = i64 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i49 = i64 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i157 = i64 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 106;
      break;
     }
    case 4:
     {
      i157 = HEAP32[i64 >> 2] | 0;
      i47 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i157) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i49 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i157) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i157 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i157) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 106;
      break;
     }
    default:
     {
      i45 = 0;
      i46 = 0;
      i48 = 0;
     }
    }
    if ((i1 | 0) == 106) {
     i45 = HEAP8[i157 >> 0] | 0;
     i46 = HEAP8[i47 >> 0] | 0;
     i48 = HEAP8[i49 >> 0] | 0;
    }
    HEAP8[i65 >> 0] = HEAP8[i160 + ((i46 & 255) >>> 5 << 2 | i48 & -32 & 255 | (i45 & 255) >>> 6) >> 0] | 0;
    i66 = i64 + i163 | 0;
    i67 = i65 + 1 | 0;
    i114 = i105;
    i1 = 108;
    continue;
   } else if ((i1 | 0) == 108) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i158 = HEAPU8[i66 >> 0] | 0;
      i54 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i158) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i56 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i158) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i158 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i158) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 113;
      break;
     }
    case 2:
     {
      i158 = HEAPU16[i66 >> 1] | 0;
      i54 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i158) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i56 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i158) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i158 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i158) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 113;
      break;
     }
    case 3:
     {
      i54 = i66 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i56 = i66 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i158 = i66 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 113;
      break;
     }
    case 4:
     {
      i158 = HEAP32[i66 >> 2] | 0;
      i54 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i158) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i56 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i158) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i158 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i158) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 113;
      break;
     }
    default:
     {
      i52 = 0;
      i53 = 0;
      i55 = 0;
     }
    }
    if ((i1 | 0) == 113) {
     i52 = HEAP8[i158 >> 0] | 0;
     i53 = HEAP8[i54 >> 0] | 0;
     i55 = HEAP8[i56 >> 0] | 0;
    }
    HEAP8[i67 >> 0] = HEAP8[i160 + ((i53 & 255) >>> 5 << 2 | i55 & -32 & 255 | (i52 & 255) >>> 6) >> 0] | 0;
    i68 = i66 + i163 | 0;
    i69 = i67 + 1 | 0;
    i123 = i114;
    i1 = 115;
    continue;
   } else if ((i1 | 0) == 115) {
    i1 = 0;
    switch (i162 << 24 >> 24) {
    case 1:
     {
      i159 = HEAPU8[i68 >> 0] | 0;
      i61 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i159) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i63 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i159) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i159 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i159) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 120;
      break;
     }
    case 2:
     {
      i159 = HEAPU16[i68 >> 1] | 0;
      i61 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i159) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i63 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i159) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i159 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i159) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 120;
      break;
     }
    case 3:
     {
      i61 = i68 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
      i63 = i68 + ((HEAPU8[i8 >> 0] | 0) >>> 3 & 255) | 0;
      i159 = i68 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) | 0;
      i1 = 120;
      break;
     }
    case 4:
     {
      i159 = HEAP32[i68 >> 2] | 0;
      i61 = (HEAP32[5724 + ((HEAPU8[i9 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i10 >> 2] & i159) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
      i63 = (HEAP32[5724 + ((HEAPU8[i6 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i7 >> 2] & i159) >>> (HEAPU8[i8 >> 0] | 0)) | 0;
      i159 = (HEAP32[5724 + ((HEAPU8[i12 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i159) >>> (HEAPU8[i5 >> 0] | 0)) | 0;
      i1 = 120;
      break;
     }
    default:
     {
      i59 = 0;
      i60 = 0;
      i62 = 0;
     }
    }
    if ((i1 | 0) == 120) {
     i59 = HEAP8[i159 >> 0] | 0;
     i60 = HEAP8[i61 >> 0] | 0;
     i62 = HEAP8[i63 >> 0] | 0;
    }
    HEAP8[i69 >> 0] = HEAP8[i160 + ((i60 & 255) >>> 5 << 2 | i62 & -32 & 255 | (i59 & 255) >>> 6) >> 0] | 0;
    i2 = i69 + 1 | 0;
    i1 = i68 + i163 | 0;
    if ((i123 | 0) > 1) {
     i16 = i123 + -1 | 0;
     i29 = i1;
     i30 = i2;
     i1 = 66;
     continue;
    } else break;
   }
   if (!i4) {
    i1 = 124;
    break;
   } else {
    i3 = i1 + i165 | 0;
    i1 = i2 + i164 | 0;
    i4 = i4 + -1 | 0;
   }
  }
  if ((i1 | 0) != 122) if ((i1 | 0) == 124) return;
 }
}

function _inflate(i72, i73) {
 i72 = i72 | 0;
 i73 = i73 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i74 = 0, i75 = 0;
 i14 = 0;
 i75 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i48 = i75;
 if (!i72) {
  i74 = -2;
  STACKTOP = i75;
  return i74 | 0;
 }
 i57 = i72 + 28 | 0;
 i74 = HEAP32[i57 >> 2] | 0;
 if (!i74) {
  i74 = -2;
  STACKTOP = i75;
  return i74 | 0;
 }
 i67 = i72 + 12 | 0;
 i8 = HEAP32[i67 >> 2] | 0;
 if (!i8) {
  i74 = -2;
  STACKTOP = i75;
  return i74 | 0;
 }
 i2 = HEAP32[i72 >> 2] | 0;
 if (!i2) if (HEAP32[i72 + 4 >> 2] | 0) {
  i74 = -2;
  STACKTOP = i75;
  return i74 | 0;
 }
 i1 = HEAP32[i74 >> 2] | 0;
 if ((i1 | 0) == 11) {
  HEAP32[i74 >> 2] = 12;
  i1 = 12;
 }
 i61 = i72 + 16 | 0;
 i6 = HEAP32[i61 >> 2] | 0;
 i59 = i72 + 4 | 0;
 i60 = HEAP32[i59 >> 2] | 0;
 i55 = i74 + 56 | 0;
 i68 = i74 + 60 | 0;
 i63 = i74 + 8 | 0;
 i69 = i74 + 24 | 0;
 i17 = i48 + 1 | 0;
 i66 = i74 + 16 | 0;
 i18 = i74 + 32 | 0;
 i19 = i72 + 24 | 0;
 i20 = i74 + 36 | 0;
 i21 = i74 + 20 | 0;
 i70 = i72 + 48 | 0;
 i22 = i74 + 64 | 0;
 i23 = i74 + 12 | 0;
 i24 = (i73 + -5 | 0) >>> 0 < 2;
 i71 = i74 + 4 | 0;
 i25 = i74 + 76 | 0;
 i26 = i74 + 84 | 0;
 i27 = i74 + 80 | 0;
 i28 = i74 + 88 | 0;
 i29 = (i73 | 0) == 6;
 i30 = i74 + 7108 | 0;
 i31 = i74 + 72 | 0;
 i32 = i74 + 7112 | 0;
 i33 = i74 + 68 | 0;
 i34 = i74 + 44 | 0;
 i35 = i74 + 7104 | 0;
 i36 = i74 + 48 | 0;
 i56 = i74 + 40 | 0;
 i16 = i74 + 52 | 0;
 i64 = i72 + 20 | 0;
 i65 = i74 + 28 | 0;
 i37 = i48 + 2 | 0;
 i38 = i48 + 3 | 0;
 i39 = i74 + 104 | 0;
 i40 = i74 + 96 | 0;
 i41 = i74 + 100 | 0;
 i42 = i74 + 624 | 0;
 i43 = i74 + 1328 | 0;
 i44 = i74 + 108 | 0;
 i45 = i74 + 112 | 0;
 i46 = i74 + 752 | 0;
 i47 = i74 + 92 | 0;
 i5 = 0;
 i7 = i2;
 i15 = i6;
 i3 = HEAP32[i68 >> 2] | 0;
 i4 = HEAP32[i55 >> 2] | 0;
 i2 = i60;
 i53 = i8;
 L17 : while (1) {
  L19 : do switch (i1 | 0) {
  case 28:
   {
    i1 = i7;
    i5 = 1;
    i14 = 281;
    break L17;
   }
  case 29:
   {
    i62 = i15;
    i54 = i3;
    i52 = i4;
    i51 = i2;
    i50 = i7;
    i58 = -3;
    i49 = i6;
    break L17;
   }
  case 30:
   {
    i14 = 303;
    break L17;
   }
  case 0:
   {
    i8 = HEAP32[i63 >> 2] | 0;
    if (!i8) {
     HEAP32[i74 >> 2] = 12;
     i9 = i53;
     i1 = i7;
     i8 = i15;
     break L19;
    }
    if (i3 >>> 0 < 16) while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 < 16) i7 = i1; else break;
    } else i1 = i7;
    if ((i4 | 0) == 35615 & (i8 & 2 | 0) != 0) {
     i9 = _crc32(0, 0, 0) | 0;
     HEAP32[i69 >> 2] = i9;
     HEAP8[i48 >> 0] = 31;
     HEAP8[i17 >> 0] = -117;
     HEAP32[i69 >> 2] = _crc32(i9, i48, 2) | 0;
     HEAP32[i74 >> 2] = 1;
     i9 = i53;
     i8 = i15;
     i3 = 0;
     i4 = 0;
     break L19;
    }
    HEAP32[i66 >> 2] = 0;
    i7 = HEAP32[i18 >> 2] | 0;
    if (i7 | 0) HEAP32[i7 + 48 >> 2] = -1;
    if (i8 & 1 | 0) if (!((((i4 << 8 & 65280) + (i4 >>> 8) | 0) >>> 0) % 31 | 0)) {
     if ((i4 & 15 | 0) != 8) {
      HEAP32[i19 >> 2] = 66415;
      HEAP32[i74 >> 2] = 29;
      i9 = i53;
      i8 = i15;
      break L19;
     }
     i10 = i4 >>> 4;
     i3 = i3 + -4 | 0;
     i7 = i10 & 15;
     i8 = i7 + 8 | 0;
     i9 = HEAP32[i20 >> 2] | 0;
     if (!i9) HEAP32[i20 >> 2] = i8; else if (i8 >>> 0 > i9 >>> 0) {
      HEAP32[i19 >> 2] = 66442;
      HEAP32[i74 >> 2] = 29;
      i9 = i53;
      i8 = i15;
      i4 = i10;
      break L19;
     }
     HEAP32[i21 >> 2] = 256 << i7;
     i9 = _adler32(0, 0, 0) | 0;
     HEAP32[i69 >> 2] = i9;
     HEAP32[i70 >> 2] = i9;
     HEAP32[i74 >> 2] = i4 >>> 12 & 2 ^ 11;
     i9 = i53;
     i8 = i15;
     i3 = 0;
     i4 = 0;
     break L19;
    }
    HEAP32[i19 >> 2] = 66392;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
  case 1:
   {
    if (i3 >>> 0 < 16) while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 < 16) i7 = i1; else break;
    } else i1 = i7;
    HEAP32[i66 >> 2] = i4;
    if ((i4 & 255 | 0) != 8) {
     HEAP32[i19 >> 2] = 66415;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break L19;
    }
    if (i4 & 57344 | 0) {
     HEAP32[i19 >> 2] = 66462;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break L19;
    }
    i3 = HEAP32[i18 >> 2] | 0;
    if (i3 | 0) HEAP32[i3 >> 2] = i4 >>> 8 & 1;
    if (i4 & 512 | 0) {
     HEAP8[i48 >> 0] = i4;
     HEAP8[i17 >> 0] = i4 >>> 8;
     HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i48, 2) | 0;
    }
    HEAP32[i74 >> 2] = 2;
    i3 = 0;
    i4 = 0;
    i14 = 47;
    break;
   }
  case 2:
   {
    if (i3 >>> 0 < 32) {
     i1 = i7;
     i14 = 47;
    } else i14 = 49;
    break;
   }
  case 3:
   {
    if (i3 >>> 0 < 16) i14 = 55; else {
     i1 = i7;
     i14 = 57;
    }
    break;
   }
  case 4:
   {
    i1 = i7;
    i14 = 62;
    break;
   }
  case 5:
   {
    i1 = i7;
    i14 = 73;
    break;
   }
  case 6:
   {
    i1 = i7;
    i14 = 83;
    break;
   }
  case 7:
   {
    i1 = i7;
    i14 = 96;
    break;
   }
  case 8:
   {
    i1 = i7;
    i14 = 109;
    break;
   }
  case 9:
   {
    if (i3 >>> 0 < 32) while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 >= 32) break; else i7 = i1;
    } else i1 = i7;
    i3 = _llvm_bswap_i32(i4 | 0) | 0;
    HEAP32[i69 >> 2] = i3;
    HEAP32[i70 >> 2] = i3;
    HEAP32[i74 >> 2] = 10;
    i3 = 0;
    i4 = 0;
    i14 = 121;
    break;
   }
  case 10:
   {
    i1 = i7;
    i14 = 121;
    break;
   }
  case 11:
   {
    i1 = i7;
    i14 = 124;
    break;
   }
  case 12:
   {
    i1 = i7;
    i14 = 125;
    break;
   }
  case 13:
   {
    i13 = i3 & 7;
    i4 = i4 >>> i13;
    i3 = i3 - i13 | 0;
    if (i3 >>> 0 < 32) while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 < 32) i7 = i1; else break;
    } else i1 = i7;
    i7 = i4 & 65535;
    if ((i7 | 0) == (i4 >>> 16 ^ 65535 | 0)) {
     HEAP32[i22 >> 2] = i7;
     HEAP32[i74 >> 2] = 14;
     if (i29) {
      i3 = 0;
      i4 = 0;
      i14 = 281;
      break L17;
     } else {
      i3 = 0;
      i4 = 0;
      i14 = 144;
      break L19;
     }
    } else {
     HEAP32[i19 >> 2] = 66526;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break L19;
    }
   }
  case 14:
   {
    i1 = i7;
    i14 = 144;
    break;
   }
  case 15:
   {
    i1 = i7;
    i14 = 145;
    break;
   }
  case 16:
   {
    if (i3 >>> 0 < 14) while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 < 14) i7 = i1; else break;
    } else i1 = i7;
    i12 = (i4 & 31) + 257 | 0;
    HEAP32[i40 >> 2] = i12;
    i13 = i4 >>> 5 & 31;
    HEAP32[i41 >> 2] = i13 + 1;
    i8 = (i4 >>> 10 & 15) + 4 | 0;
    HEAP32[i47 >> 2] = i8;
    i4 = i4 >>> 14;
    i3 = i3 + -14 | 0;
    if (i12 >>> 0 > 286 | i13 >>> 0 > 29) {
     HEAP32[i19 >> 2] = 66555;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break L19;
    } else {
     HEAP32[i39 >> 2] = 0;
     HEAP32[i74 >> 2] = 17;
     i7 = 0;
     i14 = 155;
     break L19;
    }
   }
  case 17:
   {
    i9 = HEAP32[i39 >> 2] | 0;
    i8 = HEAP32[i47 >> 2] | 0;
    if (i9 >>> 0 < i8 >>> 0) {
     i1 = i7;
     i7 = i9;
     i14 = 155;
    } else {
     i1 = i7;
     i5 = i9;
     i14 = 156;
    }
    break;
   }
  case 18:
   {
    i1 = i7;
    i8 = HEAP32[i39 >> 2] | 0;
    i14 = 166;
    break;
   }
  case 19:
   {
    i1 = i7;
    i14 = 199;
    break;
   }
  case 20:
   {
    i1 = i7;
    i14 = 200;
    break;
   }
  case 21:
   {
    i1 = i7;
    i8 = HEAP32[i31 >> 2] | 0;
    i14 = 218;
    break;
   }
  case 22:
   {
    i1 = i7;
    i14 = 225;
    break;
   }
  case 23:
   {
    i1 = i7;
    i8 = HEAP32[i31 >> 2] | 0;
    i14 = 237;
    break;
   }
  case 24:
   {
    i1 = i7;
    i14 = 243;
    break;
   }
  case 25:
   {
    if (!i6) {
     i1 = i7;
     i6 = 0;
     i14 = 281;
     break L17;
    }
    HEAP8[i53 >> 0] = HEAP32[i22 >> 2];
    HEAP32[i74 >> 2] = 20;
    i9 = i53 + 1 | 0;
    i1 = i7;
    i8 = i15;
    i6 = i6 + -1 | 0;
    break;
   }
  case 26:
   {
    if (!(HEAP32[i63 >> 2] | 0)) {
     i8 = i15;
     i1 = i7;
    } else {
     if (i3 >>> 0 < 32) while (1) {
      if (!i2) {
       i62 = i15;
       i54 = i3;
       i52 = i4;
       i51 = 0;
       i50 = i7;
       i58 = i5;
       i49 = i6;
       break L17;
      }
      i2 = i2 + -1 | 0;
      i1 = i7 + 1 | 0;
      i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
      i3 = i3 + 8 | 0;
      if (i3 >>> 0 < 32) i7 = i1; else break;
     } else i1 = i7;
     i7 = i15 - i6 | 0;
     HEAP32[i64 >> 2] = (HEAP32[i64 >> 2] | 0) + i7;
     HEAP32[i65 >> 2] = (HEAP32[i65 >> 2] | 0) + i7;
     if (!i7) i7 = HEAP32[i69 >> 2] | 0; else {
      i8 = HEAP32[i69 >> 2] | 0;
      i9 = i53 + (0 - i7) | 0;
      if (!(HEAP32[i66 >> 2] | 0)) i7 = _adler32(i8, i9, i7) | 0; else i7 = _crc32(i8, i9, i7) | 0;
      HEAP32[i69 >> 2] = i7;
      HEAP32[i70 >> 2] = i7;
     }
     i13 = (HEAP32[i66 >> 2] | 0) == 0;
     i15 = _llvm_bswap_i32(i4 | 0) | 0;
     if (((i13 ? i15 : i4) | 0) == (i7 | 0)) {
      i8 = i6;
      i3 = 0;
      i4 = 0;
     } else {
      HEAP32[i19 >> 2] = 66729;
      HEAP32[i74 >> 2] = 29;
      i9 = i53;
      i8 = i6;
      break L19;
     }
    }
    HEAP32[i74 >> 2] = 27;
    i14 = 273;
    break;
   }
  case 27:
   {
    i8 = i15;
    i1 = i7;
    i14 = 273;
    break;
   }
  default:
   {
    i1 = -2;
    i14 = 304;
    break L17;
   }
  } while (0);
  if ((i14 | 0) == 47) while (1) {
   i14 = 0;
   if (!i2) {
    i62 = i15;
    i54 = i3;
    i52 = i4;
    i51 = 0;
    i50 = i1;
    i58 = i5;
    i49 = i6;
    break L17;
   }
   i2 = i2 + -1 | 0;
   i7 = i1 + 1 | 0;
   i4 = (HEAPU8[i1 >> 0] << i3) + i4 | 0;
   i3 = i3 + 8 | 0;
   if (i3 >>> 0 >= 32) {
    i14 = 49;
    break;
   } else {
    i1 = i7;
    i14 = 47;
   }
  } else if ((i14 | 0) == 121) {
   if (!(HEAP32[i23 >> 2] | 0)) {
    i14 = 122;
    break;
   }
   i14 = _adler32(0, 0, 0) | 0;
   HEAP32[i69 >> 2] = i14;
   HEAP32[i70 >> 2] = i14;
   HEAP32[i74 >> 2] = 11;
   i14 = 124;
  } else if ((i14 | 0) == 144) {
   HEAP32[i74 >> 2] = 15;
   i14 = 145;
  } else if ((i14 | 0) == 155) {
   i14 = 0;
   while (1) {
    if (i3 >>> 0 < 3) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i1;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i9 = i3 + 8 | 0;
     i4 = (HEAPU8[i1 >> 0] << i3) + i4 | 0;
     i2 = i2 + -1 | 0;
     i1 = i1 + 1 | 0;
    } else i9 = i3;
    i10 = i7 + 1 | 0;
    HEAP32[i39 >> 2] = i10;
    HEAP16[i74 + 112 + (HEAPU16[37472 + (i7 << 1) >> 1] << 1) >> 1] = i4 & 7;
    i4 = i4 >>> 3;
    i3 = i9 + -3 | 0;
    if (i10 >>> 0 < i8 >>> 0) i7 = i10; else {
     i5 = i10;
     i14 = 156;
     break;
    }
   }
  } else if ((i14 | 0) == 273) {
   i14 = 0;
   if (!(HEAP32[i63 >> 2] | 0)) {
    i14 = 280;
    break;
   }
   if (!(HEAP32[i66 >> 2] | 0)) {
    i14 = 280;
    break;
   }
   if (i3 >>> 0 < 32) {
    i7 = i1;
    while (1) {
     if (!i2) {
      i62 = i8;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 < 32) i7 = i1; else break;
    }
   }
   if ((i4 | 0) == (HEAP32[i65 >> 2] | 0)) {
    i3 = 0;
    i4 = 0;
    i14 = 280;
    break;
   }
   HEAP32[i19 >> 2] = 66750;
   HEAP32[i74 >> 2] = 29;
   i9 = i53;
  }
  do if ((i14 | 0) == 49) {
   i1 = HEAP32[i18 >> 2] | 0;
   if (i1 | 0) HEAP32[i1 + 4 >> 2] = i4;
   if (HEAP32[i66 >> 2] & 512 | 0) {
    HEAP8[i48 >> 0] = i4;
    HEAP8[i17 >> 0] = i4 >>> 8;
    HEAP8[i37 >> 0] = i4 >>> 16;
    HEAP8[i38 >> 0] = i4 >>> 24;
    HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i48, 4) | 0;
   }
   HEAP32[i74 >> 2] = 3;
   i3 = 0;
   i4 = 0;
   i14 = 55;
  } else if ((i14 | 0) == 124) if (i24) {
   i14 = 281;
   break L17;
  } else i14 = 125; else if ((i14 | 0) == 145) {
   i14 = 0;
   i7 = HEAP32[i22 >> 2] | 0;
   if (!i7) {
    HEAP32[i74 >> 2] = 11;
    i9 = i53;
    i8 = i15;
    break;
   }
   i7 = i7 >>> 0 > i2 >>> 0 ? i2 : i7;
   i7 = i7 >>> 0 > i6 >>> 0 ? i6 : i7;
   if (!i7) {
    i14 = 281;
    break L17;
   }
   _memcpy(i53 | 0, i1 | 0, i7 | 0) | 0;
   HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) - i7;
   i9 = i53 + i7 | 0;
   i1 = i1 + i7 | 0;
   i8 = i15;
   i6 = i6 - i7 | 0;
   i2 = i2 - i7 | 0;
  } else if ((i14 | 0) == 156) {
   i14 = 0;
   if (i5 >>> 0 < 19) {
    do {
     HEAP16[i74 + 112 + (HEAPU16[37472 + (i5 << 1) >> 1] << 1) >> 1] = 0;
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != 19);
    HEAP32[i39 >> 2] = 19;
   }
   HEAP32[i44 >> 2] = i43;
   HEAP32[i25 >> 2] = i43;
   HEAP32[i26 >> 2] = 7;
   i5 = _inflate_table(0, i45, 19, i44, i26, i46) | 0;
   if (!i5) {
    HEAP32[i39 >> 2] = 0;
    HEAP32[i74 >> 2] = 18;
    i5 = 0;
    i8 = 0;
    i14 = 166;
    break;
   } else {
    HEAP32[i19 >> 2] = 66591;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
  } while (0);
  L161 : do if ((i14 | 0) == 55) while (1) {
   i14 = 0;
   if (!i2) {
    i62 = i15;
    i54 = i3;
    i52 = i4;
    i51 = 0;
    i50 = i7;
    i58 = i5;
    i49 = i6;
    break L17;
   }
   i2 = i2 + -1 | 0;
   i1 = i7 + 1 | 0;
   i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
   i3 = i3 + 8 | 0;
   if (i3 >>> 0 >= 16) {
    i14 = 57;
    break;
   } else {
    i7 = i1;
    i14 = 55;
   }
  } else if ((i14 | 0) == 125) {
   i14 = 0;
   if (HEAP32[i71 >> 2] | 0) {
    i13 = i3 & 7;
    HEAP32[i74 >> 2] = 26;
    i9 = i53;
    i8 = i15;
    i3 = i3 - i13 | 0;
    i4 = i4 >>> i13;
    break;
   }
   if (i3 >>> 0 < 3) {
    if (!i2) {
     i2 = 0;
     i14 = 281;
     break L17;
    }
    i7 = i3 + 8 | 0;
    i4 = (HEAPU8[i1 >> 0] << i3) + i4 | 0;
    i2 = i2 + -1 | 0;
    i1 = i1 + 1 | 0;
   } else i7 = i3;
   HEAP32[i71 >> 2] = i4 & 1;
   switch (i4 >>> 1 & 3) {
   case 0:
    {
     i3 = 13;
     i14 = 136;
     break;
    }
   case 1:
    {
     HEAP32[i25 >> 2] = 35296;
     HEAP32[i26 >> 2] = 9;
     HEAP32[i27 >> 2] = 37344;
     HEAP32[i28 >> 2] = 5;
     HEAP32[i74 >> 2] = 19;
     if (i29) {
      i14 = 132;
      break L17;
     }
     break;
    }
   case 2:
    {
     i3 = 16;
     i14 = 136;
     break;
    }
   case 3:
    {
     HEAP32[i19 >> 2] = 66507;
     i3 = 29;
     i14 = 136;
     break;
    }
   default:
    {
     i14 = 135;
     break L17;
    }
   }
   if ((i14 | 0) == 136) {
    i14 = 0;
    HEAP32[i74 >> 2] = i3;
   }
   i9 = i53;
   i8 = i15;
   i3 = i7 + -3 | 0;
   i4 = i4 >>> 3;
  } else if ((i14 | 0) == 166) {
   i14 = 0;
   i7 = HEAP32[i40 >> 2] | 0;
   i9 = HEAP32[i41 >> 2] | 0;
   do if (i8 >>> 0 < (i9 + i7 | 0) >>> 0) {
    i13 = i8;
    i12 = i9;
    L182 : while (1) {
     i11 = HEAP32[i25 >> 2] | 0;
     i10 = (1 << HEAP32[i26 >> 2]) + -1 | 0;
     i8 = i10 & i4;
     i9 = HEAPU8[i11 + (i8 << 2) + 1 >> 0] | 0;
     if (i3 >>> 0 < i9 >>> 0) {
      i8 = i1;
      while (1) {
       if (!i2) {
        i62 = i15;
        i54 = i3;
        i52 = i4;
        i51 = 0;
        i50 = i8;
        i58 = i5;
        i49 = i6;
        break L17;
       }
       i2 = i2 + -1 | 0;
       i1 = i8 + 1 | 0;
       i4 = (HEAPU8[i8 >> 0] << i3) + i4 | 0;
       i3 = i3 + 8 | 0;
       i8 = i10 & i4;
       i9 = HEAPU8[i11 + (i8 << 2) + 1 >> 0] | 0;
       if (i3 >>> 0 < i9 >>> 0) i8 = i1; else break;
      }
     }
     i8 = HEAP16[i11 + (i8 << 2) + 2 >> 1] | 0;
     if ((i8 & 65535) < 16) {
      HEAP32[i39 >> 2] = i13 + 1;
      HEAP16[i74 + 112 + (i13 << 1) >> 1] = i8;
      i3 = i3 - i9 | 0;
      i4 = i4 >>> i9;
     } else {
      switch (i8 << 16 >> 16) {
      case 16:
       {
        i10 = i9 + 2 | 0;
        if (i3 >>> 0 < i10 >>> 0) {
         i8 = i1;
         while (1) {
          if (!i2) {
           i62 = i15;
           i54 = i3;
           i52 = i4;
           i51 = 0;
           i50 = i8;
           i58 = i5;
           i49 = i6;
           break L17;
          }
          i2 = i2 + -1 | 0;
          i1 = i8 + 1 | 0;
          i4 = (HEAPU8[i8 >> 0] << i3) + i4 | 0;
          i3 = i3 + 8 | 0;
          if (i3 >>> 0 < i10 >>> 0) i8 = i1; else break;
         }
        }
        i8 = i4 >>> i9;
        i3 = i3 - i9 | 0;
        if (!i13) {
         i4 = i8;
         i14 = 190;
         break L182;
        }
        i10 = HEAPU16[i74 + 112 + (i13 + -1 << 1) >> 1] | 0;
        i3 = i3 + -2 | 0;
        i4 = i8 >>> 2;
        i9 = (i8 & 3) + 3 | 0;
        break;
       }
      case 17:
       {
        i10 = i9 + 3 | 0;
        if (i3 >>> 0 < i10 >>> 0) {
         i8 = i1;
         while (1) {
          if (!i2) {
           i62 = i15;
           i54 = i3;
           i52 = i4;
           i51 = 0;
           i50 = i8;
           i58 = i5;
           i49 = i6;
           break L17;
          }
          i2 = i2 + -1 | 0;
          i1 = i8 + 1 | 0;
          i4 = (HEAPU8[i8 >> 0] << i3) + i4 | 0;
          i3 = i3 + 8 | 0;
          if (i3 >>> 0 < i10 >>> 0) i8 = i1; else break;
         }
        }
        i11 = i4 >>> i9;
        i10 = 0;
        i3 = -3 - i9 + i3 | 0;
        i4 = i11 >>> 3;
        i9 = (i11 & 7) + 3 | 0;
        break;
       }
      default:
       {
        i10 = i9 + 7 | 0;
        if (i3 >>> 0 < i10 >>> 0) {
         i8 = i1;
         while (1) {
          if (!i2) {
           i62 = i15;
           i54 = i3;
           i52 = i4;
           i51 = 0;
           i50 = i8;
           i58 = i5;
           i49 = i6;
           break L17;
          }
          i2 = i2 + -1 | 0;
          i1 = i8 + 1 | 0;
          i4 = (HEAPU8[i8 >> 0] << i3) + i4 | 0;
          i3 = i3 + 8 | 0;
          if (i3 >>> 0 < i10 >>> 0) i8 = i1; else break;
         }
        }
        i11 = i4 >>> i9;
        i10 = 0;
        i3 = -7 - i9 + i3 | 0;
        i4 = i11 >>> 7;
        i9 = (i11 & 127) + 11 | 0;
       }
      }
      if ((i13 + i9 | 0) >>> 0 > (i12 + i7 | 0) >>> 0) {
       i14 = 190;
       break;
      }
      i8 = i10 & 65535;
      i7 = i9 + -1 | 0;
      HEAP32[i39 >> 2] = i13 + 1;
      HEAP16[i74 + 112 + (i13 << 1) >> 1] = i8;
      if (i7) do {
       i13 = HEAP32[i39 >> 2] | 0;
       i7 = i7 + -1 | 0;
       HEAP32[i39 >> 2] = i13 + 1;
       HEAP16[i74 + 112 + (i13 << 1) >> 1] = i8;
      } while ((i7 | 0) != 0);
     }
     i13 = HEAP32[i39 >> 2] | 0;
     i7 = HEAP32[i40 >> 2] | 0;
     i12 = HEAP32[i41 >> 2] | 0;
     if (i13 >>> 0 >= (i12 + i7 | 0) >>> 0) {
      i14 = 191;
      break;
     }
    }
    if ((i14 | 0) == 190) {
     i14 = 0;
     HEAP32[i19 >> 2] = 66616;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break L161;
    } else if ((i14 | 0) == 191) {
     i14 = 0;
     if ((HEAP32[i74 >> 2] | 0) == 29) {
      i9 = i53;
      i8 = i15;
      break L161;
     } else break;
    }
   } while (0);
   if (!(HEAP16[i42 >> 1] | 0)) {
    HEAP32[i19 >> 2] = 66642;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
   HEAP32[i44 >> 2] = i43;
   HEAP32[i25 >> 2] = i43;
   HEAP32[i26 >> 2] = 9;
   i5 = _inflate_table(1, i45, i7, i44, i26, i46) | 0;
   if (i5 | 0) {
    HEAP32[i19 >> 2] = 66679;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
   HEAP32[i27 >> 2] = HEAP32[i44 >> 2];
   HEAP32[i28 >> 2] = 6;
   i5 = _inflate_table(2, i74 + 112 + (HEAP32[i40 >> 2] << 1) | 0, HEAP32[i41 >> 2] | 0, i44, i28, i46) | 0;
   if (!i5) {
    HEAP32[i74 >> 2] = 19;
    if (i29) {
     i5 = 0;
     i14 = 281;
     break L17;
    } else {
     i5 = 0;
     i14 = 199;
     break;
    }
   } else {
    HEAP32[i19 >> 2] = 66707;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
  } while (0);
  if ((i14 | 0) == 57) {
   i3 = HEAP32[i18 >> 2] | 0;
   if (i3 | 0) {
    HEAP32[i3 + 8 >> 2] = i4 & 255;
    HEAP32[i3 + 12 >> 2] = i4 >>> 8;
   }
   if (HEAP32[i66 >> 2] & 512 | 0) {
    HEAP8[i48 >> 0] = i4;
    HEAP8[i17 >> 0] = i4 >>> 8;
    HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i48, 2) | 0;
   }
   HEAP32[i74 >> 2] = 4;
   i3 = 0;
   i4 = 0;
   i14 = 62;
  } else if ((i14 | 0) == 199) {
   HEAP32[i74 >> 2] = 20;
   i14 = 200;
  }
  do if ((i14 | 0) == 62) {
   i14 = 0;
   i8 = HEAP32[i66 >> 2] | 0;
   if (!(i8 & 1024)) {
    i7 = HEAP32[i18 >> 2] | 0;
    if (i7) HEAP32[i7 + 16 >> 2] = 0;
   } else {
    if (i3 >>> 0 < 16) {
     i7 = i1;
     while (1) {
      if (!i2) {
       i62 = i15;
       i54 = i3;
       i52 = i4;
       i51 = 0;
       i50 = i7;
       i58 = i5;
       i49 = i6;
       break L17;
      }
      i2 = i2 + -1 | 0;
      i1 = i7 + 1 | 0;
      i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
      i3 = i3 + 8 | 0;
      if (i3 >>> 0 >= 16) break; else i7 = i1;
     }
    }
    HEAP32[i22 >> 2] = i4;
    i3 = HEAP32[i18 >> 2] | 0;
    if (i3 | 0) HEAP32[i3 + 20 >> 2] = i4;
    if (!(i8 & 512)) {
     i3 = 0;
     i4 = 0;
    } else {
     HEAP8[i48 >> 0] = i4;
     HEAP8[i17 >> 0] = i4 >>> 8;
     HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i48, 2) | 0;
     i3 = 0;
     i4 = 0;
    }
   }
   HEAP32[i74 >> 2] = 5;
   i14 = 73;
  } else if ((i14 | 0) == 200) {
   i14 = 0;
   if (i6 >>> 0 > 257 & i2 >>> 0 > 5) {
    HEAP32[i67 >> 2] = i53;
    HEAP32[i61 >> 2] = i6;
    HEAP32[i72 >> 2] = i1;
    HEAP32[i59 >> 2] = i2;
    HEAP32[i55 >> 2] = i4;
    HEAP32[i68 >> 2] = i3;
    _inflate_fast(i72, i15);
    i7 = HEAP32[i67 >> 2] | 0;
    i6 = HEAP32[i61 >> 2] | 0;
    i1 = HEAP32[i72 >> 2] | 0;
    i2 = HEAP32[i59 >> 2] | 0;
    i4 = HEAP32[i55 >> 2] | 0;
    i3 = HEAP32[i68 >> 2] | 0;
    if ((HEAP32[i74 >> 2] | 0) != 11) {
     i9 = i7;
     i8 = i15;
     break;
    }
    HEAP32[i30 >> 2] = -1;
    i9 = i7;
    i8 = i15;
    break;
   }
   HEAP32[i30 >> 2] = 0;
   i12 = HEAP32[i25 >> 2] | 0;
   i10 = (1 << HEAP32[i26 >> 2]) + -1 | 0;
   i7 = i10 & i4;
   i9 = HEAP8[i12 + (i7 << 2) + 1 >> 0] | 0;
   i8 = i9 & 255;
   if (i3 >>> 0 < i8 >>> 0) {
    i7 = i1;
    while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     i7 = i10 & i4;
     i9 = HEAP8[i12 + (i7 << 2) + 1 >> 0] | 0;
     i8 = i9 & 255;
     if (i3 >>> 0 < i8 >>> 0) i7 = i1; else {
      i11 = i9;
      break;
     }
    }
   } else i11 = i9;
   i10 = i12 + (i7 << 2) | 0;
   i9 = HEAP16[i10 + 2 >> 1] | 0;
   i10 = HEAP8[i10 >> 0] | 0;
   i7 = i10 & 255;
   if (i10 << 24 >> 24 != 0 & (i7 & 240 | 0) == 0) {
    i11 = i9 & 65535;
    i10 = (1 << i8 + i7) + -1 | 0;
    i7 = ((i4 & i10) >>> i8) + i11 | 0;
    i9 = HEAP8[i12 + (i7 << 2) + 1 >> 0] | 0;
    if ((i8 + (i9 & 255) | 0) >>> 0 > i3 >>> 0) {
     i7 = i1;
     while (1) {
      if (!i2) {
       i62 = i15;
       i54 = i3;
       i52 = i4;
       i51 = 0;
       i50 = i7;
       i58 = i5;
       i49 = i6;
       break L17;
      }
      i2 = i2 + -1 | 0;
      i1 = i7 + 1 | 0;
      i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
      i3 = i3 + 8 | 0;
      i7 = ((i4 & i10) >>> i8) + i11 | 0;
      i9 = HEAP8[i12 + (i7 << 2) + 1 >> 0] | 0;
      if ((i8 + (i9 & 255) | 0) >>> 0 > i3 >>> 0) i7 = i1; else break;
     }
    }
    i10 = i12 + (i7 << 2) | 0;
    i13 = HEAP16[i10 + 2 >> 1] | 0;
    i10 = HEAP8[i10 >> 0] | 0;
    HEAP32[i30 >> 2] = i8;
    i3 = i3 - i8 | 0;
    i4 = i4 >>> i8;
    i7 = i9;
    i9 = i13;
   } else {
    i7 = i11;
    i8 = 0;
   }
   i7 = i7 & 255;
   i4 = i4 >>> i7;
   i3 = i3 - i7 | 0;
   HEAP32[i30 >> 2] = i8 + i7;
   HEAP32[i22 >> 2] = i9 & 65535;
   i7 = i10 & 255;
   if (!(i10 << 24 >> 24)) {
    HEAP32[i74 >> 2] = 25;
    i9 = i53;
    i8 = i15;
    break;
   }
   if (i7 & 32 | 0) {
    HEAP32[i30 >> 2] = -1;
    HEAP32[i74 >> 2] = 11;
    i9 = i53;
    i8 = i15;
    break;
   }
   if (!(i7 & 64)) {
    i8 = i7 & 15;
    HEAP32[i31 >> 2] = i8;
    HEAP32[i74 >> 2] = 21;
    i14 = 218;
    break;
   } else {
    HEAP32[i19 >> 2] = 66773;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
  } while (0);
  if ((i14 | 0) == 73) {
   i8 = HEAP32[i66 >> 2] | 0;
   if (i8 & 1024) {
    i7 = HEAP32[i22 >> 2] | 0;
    i11 = i7 >>> 0 > i2 >>> 0 ? i2 : i7;
    if (i11) {
     i9 = HEAP32[i18 >> 2] | 0;
     if (!i9) i7 = i8; else {
      i10 = HEAP32[i9 + 16 >> 2] | 0;
      if (!i10) i7 = i8; else {
       i7 = (HEAP32[i9 + 20 >> 2] | 0) - i7 | 0;
       i14 = HEAP32[i9 + 24 >> 2] | 0;
       _memcpy(i10 + i7 | 0, i1 | 0, ((i7 + i11 | 0) >>> 0 > i14 >>> 0 ? i14 - i7 | 0 : i11) | 0) | 0;
       i7 = HEAP32[i66 >> 2] | 0;
      }
     }
     if (i7 & 512 | 0) HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i1, i11) | 0;
     i7 = (HEAP32[i22 >> 2] | 0) - i11 | 0;
     HEAP32[i22 >> 2] = i7;
     i2 = i2 - i11 | 0;
     i1 = i1 + i11 | 0;
    }
    if (i7) {
     i14 = 281;
     break;
    }
   }
   HEAP32[i22 >> 2] = 0;
   HEAP32[i74 >> 2] = 6;
   i14 = 83;
  } else if ((i14 | 0) == 218) {
   i14 = 0;
   if (!i8) i7 = HEAP32[i22 >> 2] | 0; else {
    if (i3 >>> 0 < i8 >>> 0) {
     i7 = i1;
     while (1) {
      if (!i2) {
       i62 = i15;
       i54 = i3;
       i52 = i4;
       i51 = 0;
       i50 = i7;
       i58 = i5;
       i49 = i6;
       break L17;
      }
      i2 = i2 + -1 | 0;
      i1 = i7 + 1 | 0;
      i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
      i3 = i3 + 8 | 0;
      if (i3 >>> 0 < i8 >>> 0) i7 = i1; else break;
     }
    }
    i7 = (HEAP32[i22 >> 2] | 0) + ((1 << i8) + -1 & i4) | 0;
    HEAP32[i22 >> 2] = i7;
    HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + i8;
    i3 = i3 - i8 | 0;
    i4 = i4 >>> i8;
   }
   HEAP32[i32 >> 2] = i7;
   HEAP32[i74 >> 2] = 22;
   i14 = 225;
  }
  do if ((i14 | 0) == 83) {
   if (!(HEAP32[i66 >> 2] & 2048)) {
    i7 = HEAP32[i18 >> 2] | 0;
    if (i7) HEAP32[i7 + 28 >> 2] = 0;
   } else {
    if (!i2) {
     i2 = 0;
     i14 = 281;
     break L17;
    } else i11 = 0;
    do {
     i7 = i11;
     i11 = i11 + 1 | 0;
     i7 = HEAP8[i1 + i7 >> 0] | 0;
     i8 = HEAP32[i18 >> 2] | 0;
     if (i8 | 0) {
      i9 = HEAP32[i8 + 28 >> 2] | 0;
      if (i9 | 0) {
       i10 = HEAP32[i22 >> 2] | 0;
       if (i10 >>> 0 < (HEAP32[i8 + 32 >> 2] | 0) >>> 0) {
        HEAP32[i22 >> 2] = i10 + 1;
        HEAP8[i9 + i10 >> 0] = i7;
       }
      }
     }
     i7 = i7 << 24 >> 24 != 0;
    } while (i7 & i2 >>> 0 > i11 >>> 0);
    if (HEAP32[i66 >> 2] & 512 | 0) HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i1, i11) | 0;
    i2 = i2 - i11 | 0;
    i1 = i1 + i11 | 0;
    if (i7) {
     i14 = 281;
     break L17;
    }
   }
   HEAP32[i22 >> 2] = 0;
   HEAP32[i74 >> 2] = 7;
   i14 = 96;
  } else if ((i14 | 0) == 225) {
   i14 = 0;
   i12 = HEAP32[i27 >> 2] | 0;
   i10 = (1 << HEAP32[i28 >> 2]) + -1 | 0;
   i8 = i10 & i4;
   i7 = HEAP8[i12 + (i8 << 2) + 1 >> 0] | 0;
   i9 = i7 & 255;
   if (i3 >>> 0 < i9 >>> 0) {
    i7 = i1;
    while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i7;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i1 = i7 + 1 | 0;
     i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     i8 = i10 & i4;
     i7 = HEAP8[i12 + (i8 << 2) + 1 >> 0] | 0;
     i9 = i7 & 255;
     if (i3 >>> 0 < i9 >>> 0) i7 = i1; else {
      i11 = i9;
      break;
     }
    }
   } else i11 = i9;
   i10 = i12 + (i8 << 2) | 0;
   i9 = HEAP16[i10 + 2 >> 1] | 0;
   i10 = HEAP8[i10 >> 0] | 0;
   i8 = i10 & 255;
   if (!(i8 & 240)) {
    i10 = i9 & 65535;
    i9 = (1 << i11 + i8) + -1 | 0;
    i8 = ((i4 & i9) >>> i11) + i10 | 0;
    i7 = HEAP8[i12 + (i8 << 2) + 1 >> 0] | 0;
    if ((i11 + (i7 & 255) | 0) >>> 0 > i3 >>> 0) {
     i7 = i1;
     while (1) {
      if (!i2) {
       i62 = i15;
       i54 = i3;
       i52 = i4;
       i51 = 0;
       i50 = i7;
       i58 = i5;
       i49 = i6;
       break L17;
      }
      i2 = i2 + -1 | 0;
      i1 = i7 + 1 | 0;
      i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
      i3 = i3 + 8 | 0;
      i8 = ((i4 & i9) >>> i11) + i10 | 0;
      i7 = HEAP8[i12 + (i8 << 2) + 1 >> 0] | 0;
      if ((i11 + (i7 & 255) | 0) >>> 0 > i3 >>> 0) i7 = i1; else break;
     }
    }
    i10 = i12 + (i8 << 2) | 0;
    i9 = HEAP16[i10 + 2 >> 1] | 0;
    i10 = HEAP8[i10 >> 0] | 0;
    i8 = (HEAP32[i30 >> 2] | 0) + i11 | 0;
    HEAP32[i30 >> 2] = i8;
    i3 = i3 - i11 | 0;
    i4 = i4 >>> i11;
   } else i8 = HEAP32[i30 >> 2] | 0;
   i7 = i7 & 255;
   i4 = i4 >>> i7;
   i3 = i3 - i7 | 0;
   HEAP32[i30 >> 2] = i8 + i7;
   i7 = i10 & 255;
   if (!(i7 & 64)) {
    HEAP32[i33 >> 2] = i9 & 65535;
    i8 = i7 & 15;
    HEAP32[i31 >> 2] = i8;
    HEAP32[i74 >> 2] = 23;
    i14 = 237;
    break;
   } else {
    HEAP32[i19 >> 2] = 66801;
    HEAP32[i74 >> 2] = 29;
    i9 = i53;
    i8 = i15;
    break;
   }
  } while (0);
  if ((i14 | 0) == 96) {
   if (!(HEAP32[i66 >> 2] & 4096)) {
    i7 = HEAP32[i18 >> 2] | 0;
    if (i7) HEAP32[i7 + 36 >> 2] = 0;
   } else {
    if (!i2) {
     i2 = 0;
     i14 = 281;
     break;
    } else i11 = 0;
    do {
     i7 = i11;
     i11 = i11 + 1 | 0;
     i7 = HEAP8[i1 + i7 >> 0] | 0;
     i8 = HEAP32[i18 >> 2] | 0;
     if (i8 | 0) {
      i9 = HEAP32[i8 + 36 >> 2] | 0;
      if (i9 | 0) {
       i10 = HEAP32[i22 >> 2] | 0;
       if (i10 >>> 0 < (HEAP32[i8 + 40 >> 2] | 0) >>> 0) {
        HEAP32[i22 >> 2] = i10 + 1;
        HEAP8[i9 + i10 >> 0] = i7;
       }
      }
     }
     i7 = i7 << 24 >> 24 != 0;
    } while (i7 & i2 >>> 0 > i11 >>> 0);
    if (HEAP32[i66 >> 2] & 512 | 0) HEAP32[i69 >> 2] = _crc32(HEAP32[i69 >> 2] | 0, i1, i11) | 0;
    i2 = i2 - i11 | 0;
    i1 = i1 + i11 | 0;
    if (i7) {
     i14 = 281;
     break;
    }
   }
   HEAP32[i74 >> 2] = 8;
   i14 = 109;
  } else if ((i14 | 0) == 237) {
   i14 = 0;
   if (i8) {
    if (i3 >>> 0 < i8 >>> 0) {
     i7 = i1;
     while (1) {
      if (!i2) {
       i62 = i15;
       i54 = i3;
       i52 = i4;
       i51 = 0;
       i50 = i7;
       i58 = i5;
       i49 = i6;
       break L17;
      }
      i2 = i2 + -1 | 0;
      i1 = i7 + 1 | 0;
      i4 = (HEAPU8[i7 >> 0] << i3) + i4 | 0;
      i3 = i3 + 8 | 0;
      if (i3 >>> 0 < i8 >>> 0) i7 = i1; else break;
     }
    }
    HEAP32[i33 >> 2] = (HEAP32[i33 >> 2] | 0) + ((1 << i8) + -1 & i4);
    HEAP32[i30 >> 2] = (HEAP32[i30 >> 2] | 0) + i8;
    i3 = i3 - i8 | 0;
    i4 = i4 >>> i8;
   }
   HEAP32[i74 >> 2] = 24;
   i14 = 243;
  }
  do if ((i14 | 0) == 109) {
   i14 = 0;
   i8 = HEAP32[i66 >> 2] | 0;
   if (i8 & 512) {
    if (i3 >>> 0 < 16) while (1) {
     if (!i2) {
      i62 = i15;
      i54 = i3;
      i52 = i4;
      i51 = 0;
      i50 = i1;
      i58 = i5;
      i49 = i6;
      break L17;
     }
     i2 = i2 + -1 | 0;
     i7 = i1 + 1 | 0;
     i4 = (HEAPU8[i1 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 < 16) i1 = i7; else {
      i1 = i7;
      break;
     }
    }
    if ((i4 | 0) == (HEAP32[i69 >> 2] & 65535 | 0)) {
     i3 = 0;
     i4 = 0;
    } else {
     HEAP32[i19 >> 2] = 66487;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break;
    }
   }
   i7 = HEAP32[i18 >> 2] | 0;
   if (i7 | 0) {
    HEAP32[i7 + 44 >> 2] = i8 >>> 9 & 1;
    HEAP32[i7 + 48 >> 2] = 1;
   }
   i9 = _crc32(0, 0, 0) | 0;
   HEAP32[i69 >> 2] = i9;
   HEAP32[i70 >> 2] = i9;
   HEAP32[i74 >> 2] = 11;
   i9 = i53;
   i8 = i15;
  } else if ((i14 | 0) == 243) {
   i14 = 0;
   if (!i6) {
    i6 = 0;
    i14 = 281;
    break L17;
   }
   i7 = i15 - i6 | 0;
   i8 = HEAP32[i33 >> 2] | 0;
   if (i8 >>> 0 > i7 >>> 0) {
    i7 = i8 - i7 | 0;
    if (i7 >>> 0 > (HEAP32[i34 >> 2] | 0) >>> 0) if (HEAP32[i35 >> 2] | 0) {
     HEAP32[i19 >> 2] = 66823;
     HEAP32[i74 >> 2] = 29;
     i9 = i53;
     i8 = i15;
     break;
    }
    i8 = HEAP32[i36 >> 2] | 0;
    if (i7 >>> 0 > i8 >>> 0) {
     i7 = i7 - i8 | 0;
     i9 = i7;
     i7 = (HEAP32[i56 >> 2] | 0) - i7 | 0;
    } else {
     i9 = i7;
     i7 = i8 - i7 | 0;
    }
    i8 = HEAP32[i22 >> 2] | 0;
    i11 = (HEAP32[i16 >> 2] | 0) + i7 | 0;
    i7 = i9 >>> 0 > i8 >>> 0 ? i8 : i9;
   } else {
    i13 = HEAP32[i22 >> 2] | 0;
    i11 = i53 + (0 - i8) | 0;
    i7 = i13;
    i8 = i13;
   }
   i10 = i7 >>> 0 > i6 >>> 0 ? i6 : i7;
   HEAP32[i22 >> 2] = i8 - i10;
   i8 = i10;
   i9 = i53;
   i7 = i11;
   while (1) {
    HEAP8[i9 >> 0] = HEAP8[i7 >> 0] | 0;
    i8 = i8 + -1 | 0;
    if (!i8) break; else {
     i9 = i9 + 1 | 0;
     i7 = i7 + 1 | 0;
    }
   }
   i6 = i6 - i10 | 0;
   i7 = i53 + i10 | 0;
   if (!(HEAP32[i22 >> 2] | 0)) {
    HEAP32[i74 >> 2] = 20;
    i9 = i7;
    i8 = i15;
   } else {
    i9 = i7;
    i8 = i15;
   }
  } while (0);
  i7 = i1;
  i15 = i8;
  i53 = i9;
  i1 = HEAP32[i74 >> 2] | 0;
 }
 if ((i14 | 0) == 122) {
  HEAP32[i67 >> 2] = i53;
  HEAP32[i61 >> 2] = i6;
  HEAP32[i72 >> 2] = i1;
  HEAP32[i59 >> 2] = i2;
  HEAP32[i55 >> 2] = i4;
  HEAP32[i68 >> 2] = i3;
  i74 = 2;
  STACKTOP = i75;
  return i74 | 0;
 } else if ((i14 | 0) == 132) {
  i62 = i15;
  i54 = i7 + -3 | 0;
  i52 = i4 >>> 3;
  i51 = i2;
  i50 = i1;
  i58 = i5;
  i49 = i6;
 } else if ((i14 | 0) != 135) if ((i14 | 0) == 280) {
  HEAP32[i74 >> 2] = 28;
  i62 = i8;
  i54 = i3;
  i52 = i4;
  i51 = i2;
  i50 = i1;
  i58 = 1;
  i49 = i6;
 } else if ((i14 | 0) == 281) {
  i62 = i15;
  i54 = i3;
  i52 = i4;
  i51 = i2;
  i50 = i1;
  i58 = i5;
  i49 = i6;
 } else if ((i14 | 0) == 303) {
  i74 = -4;
  STACKTOP = i75;
  return i74 | 0;
 } else if ((i14 | 0) == 304) {
  STACKTOP = i75;
  return i1 | 0;
 }
 HEAP32[i67 >> 2] = i53;
 HEAP32[i61 >> 2] = i49;
 HEAP32[i72 >> 2] = i50;
 HEAP32[i59 >> 2] = i51;
 HEAP32[i55 >> 2] = i52;
 HEAP32[i68 >> 2] = i54;
 if (!(HEAP32[i56 >> 2] | 0)) {
  if ((i62 | 0) != (i49 | 0)) {
   i1 = HEAP32[i74 >> 2] | 0;
   if (i1 >>> 0 < 29) if ((i73 | 0) != 4 | i1 >>> 0 < 26) i14 = 286;
  }
 } else i14 = 286;
 do if ((i14 | 0) == 286) {
  i6 = i62 - i49 | 0;
  i7 = HEAP32[i57 >> 2] | 0;
  i8 = i7 + 52 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i72 + 32 >> 2] & 63](HEAP32[i72 + 40 >> 2] | 0, 1 << HEAP32[i7 + 36 >> 2], 1) | 0;
   HEAP32[i8 >> 2] = i1;
   if (!i1) {
    HEAP32[i74 >> 2] = 30;
    i74 = -4;
    STACKTOP = i75;
    return i74 | 0;
   }
  }
  i5 = i7 + 40 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if (!i2) {
   i2 = 1 << HEAP32[i7 + 36 >> 2];
   HEAP32[i5 >> 2] = i2;
   HEAP32[i7 + 48 >> 2] = 0;
   HEAP32[i7 + 44 >> 2] = 0;
  }
  if (i2 >>> 0 <= i6 >>> 0) {
   _memcpy(i1 | 0, i53 + (0 - i2) | 0, i2 | 0) | 0;
   HEAP32[i7 + 48 >> 2] = 0;
   HEAP32[i7 + 44 >> 2] = HEAP32[i5 >> 2];
   break;
  }
  i3 = i7 + 48 | 0;
  i57 = HEAP32[i3 >> 2] | 0;
  i4 = i2 - i57 | 0;
  i4 = i4 >>> 0 > i6 >>> 0 ? i6 : i4;
  _memcpy(i1 + i57 | 0, i53 + (0 - i6) | 0, i4 | 0) | 0;
  i1 = i6 - i4 | 0;
  if (i1 | 0) {
   _memcpy(HEAP32[i8 >> 2] | 0, i53 + (0 - i1) | 0, i1 | 0) | 0;
   HEAP32[i3 >> 2] = i1;
   HEAP32[i7 + 44 >> 2] = HEAP32[i5 >> 2];
   break;
  }
  i1 = (HEAP32[i3 >> 2] | 0) + i4 | 0;
  i57 = HEAP32[i5 >> 2] | 0;
  HEAP32[i3 >> 2] = (i1 | 0) == (i57 | 0) ? 0 : i1;
  i1 = i7 + 44 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < i57 >>> 0) HEAP32[i1 >> 2] = i2 + i4;
 } while (0);
 i4 = i60 - (HEAP32[i59 >> 2] | 0) | 0;
 i3 = i62 - (HEAP32[i61 >> 2] | 0) | 0;
 i62 = i72 + 8 | 0;
 HEAP32[i62 >> 2] = (HEAP32[i62 >> 2] | 0) + i4;
 HEAP32[i64 >> 2] = (HEAP32[i64 >> 2] | 0) + i3;
 HEAP32[i65 >> 2] = (HEAP32[i65 >> 2] | 0) + i3;
 if ((i3 | 0) != 0 & (HEAP32[i63 >> 2] | 0) != 0) {
  i2 = HEAP32[i69 >> 2] | 0;
  i1 = (HEAP32[i67 >> 2] | 0) + (0 - i3) | 0;
  if (!(HEAP32[i66 >> 2] | 0)) i1 = _adler32(i2, i1, i3) | 0; else i1 = _crc32(i2, i1, i3) | 0;
  HEAP32[i69 >> 2] = i1;
  HEAP32[i70 >> 2] = i1;
 }
 i74 = HEAP32[i74 >> 2] | 0;
 HEAP32[i72 + 44 >> 2] = (HEAP32[i71 >> 2] | 0 ? 64 : 0) + (HEAP32[i68 >> 2] | 0) + ((i74 | 0) == 11 ? 128 : 0) + ((i74 | 0) == 19 | (i74 | 0) == 14 ? 256 : 0);
 i74 = (i58 | 0) == 0 & ((i73 | 0) == 4 | (i3 | i4 | 0) == 0) ? -5 : i58;
 STACKTOP = i75;
 return i74 | 0;
}

function _Blit1toNAlphaKey(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i31 = HEAP32[i3 + 16 >> 2] | 0;
 i32 = HEAP32[i3 + 36 >> 2] | 0;
 i2 = HEAP32[i3 + 44 >> 2] | 0;
 i25 = HEAP32[(HEAP32[(HEAP32[i3 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i26 = HEAP32[i3 + 56 >> 2] | 0;
 i27 = HEAPU8[i3 + 63 >> 0] | 0;
 i28 = HEAP8[i2 + 9 >> 0] | 0;
 i29 = i28 & 255;
 if (!i4) return;
 i30 = (i1 + 7 | 0) / 8 | 0;
 i24 = i1 & 255;
 i13 = i2 + 28 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2 + 29 | 0;
 i16 = i2 + 33 | 0;
 i17 = i2 + 30 | 0;
 i18 = i2 + 34 | 0;
 i19 = i2 + 31 | 0;
 i20 = i2 + 35 | 0;
 i21 = i2 + 12 | 0;
 i22 = i2 + 16 | 0;
 i23 = i2 + 20 | 0;
 i12 = i2 + 24 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i24 & 7) {
  case 0:
   {
    i11 = i30;
    i10 = i1;
    i1 = 4;
    break;
   }
  case 7:
   {
    i11 = i30;
    i10 = i1;
    i1 = 16;
    break;
   }
  case 6:
   {
    i11 = i30;
    i10 = i1;
    i1 = 28;
    break;
   }
  case 5:
   {
    i11 = i30;
    i10 = i1;
    i1 = 40;
    break;
   }
  case 4:
   {
    i11 = i30;
    i10 = i1;
    i1 = 52;
    break;
   }
  case 3:
   {
    i11 = i30;
    i10 = i1;
    i1 = 64;
    break;
   }
  case 2:
   {
    i11 = i30;
    i10 = i1;
    i1 = 76;
    break;
   }
  case 1:
   {
    i11 = i30;
    i10 = i1;
    i1 = 88;
    break;
   }
  default:
   {
    i1 = 100;
    break L4;
   }
  }
  while (1) if ((i1 | 0) == 4) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L9 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i34 = i1 & 255;
    i33 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i5 = (((Math_imul(i8 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L9;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L9;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L9;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L9;
     }
    default:
     break L9;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 16;
   continue;
  } else if ((i1 | 0) == 16) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L24 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L24;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L24;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L24;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L24;
     }
    default:
     break L24;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 28;
   continue;
  } else if ((i1 | 0) == 28) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L39 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L39;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L39;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L39;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L39;
     }
    default:
     break L39;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 40;
   continue;
  } else if ((i1 | 0) == 40) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L54 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L54;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L54;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L54;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L54;
     }
    default:
     break L54;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 52;
   continue;
  } else if ((i1 | 0) == 52) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L69 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L69;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L69;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L69;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L69;
     }
    default:
     break L69;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 64;
   continue;
  } else if ((i1 | 0) == 64) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L84 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L84;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L84;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L84;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L84;
     }
    default:
     break L84;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 76;
   continue;
  } else if ((i1 | 0) == 76) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L99 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L99;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L99;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L99;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L99;
     }
    default:
     break L99;
    }
   } while (0);
   i10 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   i1 = 88;
   continue;
  } else if ((i1 | 0) == 88) {
   i1 = HEAPU8[i10 >> 0] | 0;
   L114 : do if ((i26 | 0) != (i1 | 0)) {
    i9 = i25 + (i1 << 2) | 0;
    i7 = HEAPU8[i9 >> 0] | 0;
    i8 = HEAPU8[i9 + 1 >> 0] | 0;
    i9 = HEAPU8[i9 + 2 >> 0] | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      i6 = HEAPU8[i2 >> 0] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i6 = HEAPU16[i2 >> 1] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i1 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = -1;
      break;
     }
    case 4:
     {
      i6 = HEAP32[i2 >> 2] | 0;
      i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i6) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i6) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i1 = 0;
      i3 = 0;
      i5 = 0;
      i6 = 0;
     }
    }
    i33 = i1 & 255;
    i34 = i3 & 255;
    i1 = i5 & 255;
    i3 = i6 & 255;
    i6 = (((Math_imul(i7 - i33 | 0, i27) | 0) >>> 0) / 255 | 0) + i33 | 0;
    i5 = (((Math_imul(i8 - i34 | 0, i27) | 0) >>> 0) / 255 | 0) + i34 | 0;
    i1 = (((Math_imul(i9 - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0;
    i3 = i3 + i27 - (((Math_imul(i3, i27) | 0) >>> 0) / 255 | 0) | 0;
    switch (i28 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L114;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L114;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i1;
      break L114;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i5 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i6 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i1 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i3 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
      break L114;
     }
    default:
     break L114;
    }
   } while (0);
   i1 = i10 + 1 | 0;
   i2 = i2 + i29 | 0;
   if ((i11 | 0) > 1) {
    i11 = i11 + -1 | 0;
    i10 = i1;
    i1 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i1 = 102;
   break;
  } else {
   i1 = i1 + i31 | 0;
   i2 = i2 + i32 | 0;
  }
 }
 if ((i1 | 0) != 100) if ((i1 | 0) == 102) return;
}

function _BlitNtoNKeyCopyAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i5 = HEAP32[i4 + 28 >> 2] | 0;
 i41 = HEAP32[i4 + 16 >> 2] | 0;
 i42 = HEAP32[i4 + 36 >> 2] | 0;
 i3 = HEAP32[i4 + 40 >> 2] | 0;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i35 = i3 + 24 | 0;
 i36 = ~HEAP32[i35 >> 2];
 i37 = HEAP8[i3 + 9 >> 0] | 0;
 i38 = HEAP8[i2 + 9 >> 0] | 0;
 i39 = HEAP32[i4 + 56 >> 2] & i36;
 if (!i5) return;
 i40 = (i1 + 7 | 0) / 8 | 0;
 i34 = i1 & 255;
 i25 = i37 & 255;
 i26 = i38 & 255;
 i27 = i2 + 28 | 0;
 i28 = i2 + 32 | 0;
 i29 = i2 + 29 | 0;
 i30 = i2 + 33 | 0;
 i31 = i2 + 30 | 0;
 i32 = i2 + 34 | 0;
 i33 = i2 + 31 | 0;
 i14 = i2 + 35 | 0;
 i15 = i3 + 28 | 0;
 i16 = i3 + 12 | 0;
 i17 = i3 + 32 | 0;
 i18 = i3 + 29 | 0;
 i19 = i3 + 16 | 0;
 i20 = i3 + 33 | 0;
 i21 = i3 + 30 | 0;
 i22 = i3 + 20 | 0;
 i23 = i3 + 34 | 0;
 i24 = i3 + 31 | 0;
 i13 = i3 + 35 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 L4 : while (1) {
  i5 = i5 + -1 | 0;
  switch (i34 & 7) {
  case 0:
   {
    i12 = i40;
    i3 = 4;
    break;
   }
  case 7:
   {
    i12 = i40;
    i3 = 16;
    break;
   }
  case 6:
   {
    i12 = i40;
    i3 = 28;
    break;
   }
  case 5:
   {
    i12 = i40;
    i3 = 40;
    break;
   }
  case 4:
   {
    i12 = i40;
    i3 = 52;
    break;
   }
  case 3:
   {
    i12 = i40;
    i3 = 64;
    break;
   }
  case 2:
   {
    i12 = i40;
    i3 = 76;
    break;
   }
  case 1:
   {
    i12 = i40;
    i3 = 88;
    break;
   }
  default:
   {
    i3 = 100;
    break L4;
   }
  }
  while (1) if ((i3 | 0) == 4) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L15 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L15;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L15;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L15;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L15;
    }
   default:
    break L15;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 16;
   continue;
  } else if ((i3 | 0) == 16) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L30 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L30;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L30;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L30;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L30;
    }
   default:
    break L30;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 28;
   continue;
  } else if ((i3 | 0) == 28) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L45 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L45;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L45;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L45;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L45;
    }
   default:
    break L45;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 40;
   continue;
  } else if ((i3 | 0) == 40) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L60 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L60;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L60;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L60;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L60;
    }
   default:
    break L60;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 52;
   continue;
  } else if ((i3 | 0) == 52) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L75 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L75;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L75;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L75;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L75;
    }
   default:
    break L75;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 64;
   continue;
  } else if ((i3 | 0) == 64) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L90 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L90;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L90;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L90;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L90;
    }
   default:
    break L90;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 76;
   continue;
  } else if ((i3 | 0) == 76) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L105 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L105;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L105;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L105;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L105;
    }
   default:
    break L105;
   } while (0);
   i1 = i1 + i25 | 0;
   i2 = i2 + i26 | 0;
   i3 = 88;
   continue;
  } else if ((i3 | 0) == 88) {
   switch (i37 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i4 = 0;
     i7 = HEAP8[i1 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAP8[i1 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = HEAP8[i1 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = -1;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     i4 = i3;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i15 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i3) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i3) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i3) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i35 >> 2] & i3) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i4 = 0;
     i7 = 0;
     i9 = 0;
     i11 = 0;
     i3 = 0;
    }
   }
   i6 = i7 & 255;
   i8 = i9 & 255;
   i10 = i11 & 255;
   i3 = i3 & 255;
   L120 : do if ((i4 & i36 | 0) != (i39 | 0)) switch (i38 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L120;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L120;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i30 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
     HEAP8[i2 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] = i11;
     break L120;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i8 >>> (HEAPU8[i29 >> 0] | 0) << (HEAPU8[i30 >> 0] | 0) | i6 >>> (HEAPU8[i27 >> 0] | 0) << (HEAPU8[i28 >> 0] | 0) | i10 >>> (HEAPU8[i31 >> 0] | 0) << (HEAPU8[i32 >> 0] | 0) | i3 >>> (HEAPU8[i33 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0);
     break L120;
    }
   default:
    break L120;
   } while (0);
   i2 = i2 + i26 | 0;
   i1 = i1 + i25 | 0;
   if ((i12 | 0) > 1) {
    i12 = i12 + -1 | 0;
    i3 = 4;
    continue;
   } else break;
  }
  if (!i5) {
   i3 = 102;
   break;
  } else {
   i1 = i1 + i41 | 0;
   i2 = i2 + i42 | 0;
  }
 }
 if ((i3 | 0) != 100) if ((i3 | 0) == 102) return;
}

function _SDL_BlendFillRect_RGBA(i227, i232, i2, i5, i229, i231, i1) {
 i227 = i227 | 0;
 i232 = i232 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i229 = i229 | 0;
 i231 = i231 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0, i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0, i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0, i100 = 0, i101 = 0, i102 = 0, i103 = 0, i104 = 0, i105 = 0, i106 = 0, i107 = 0, i108 = 0, i109 = 0, i110 = 0, i111 = 0, i112 = 0, i113 = 0, i114 = 0, i115 = 0, i116 = 0, i117 = 0, i118 = 0, i119 = 0, i120 = 0, i121 = 0, i122 = 0, i123 = 0, i124 = 0, i125 = 0, i126 = 0, i127 = 0, i128 = 0, i129 = 0, i130 = 0, i131 = 0, i132 = 0, i133 = 0, i134 = 0, i135 = 0, i136 = 0, i137 = 0, i138 = 0, i139 = 0, i140 = 0, i141 = 0, i142 = 0, i143 = 0, i144 = 0, i145 = 0, i146 = 0, i147 = 0, i148 = 0, i149 = 0, i150 = 0, i151 = 0, i152 = 0, i153 = 0, i154 = 0, i155 = 0, i156 = 0, i157 = 0, i158 = 0, i159 = 0, i160 = 0, i161 = 0, i162 = 0, i163 = 0, i164 = 0, i165 = 0, i166 = 0, i167 = 0, i168 = 0, i169 = 0, i170 = 0, i171 = 0, i172 = 0, i173 = 0, i174 = 0, i175 = 0, i176 = 0, i177 = 0, i178 = 0, i179 = 0, i180 = 0, i181 = 0, i182 = 0, i183 = 0, i184 = 0, i185 = 0, i186 = 0, i187 = 0, i188 = 0, i189 = 0, i190 = 0, i191 = 0, i192 = 0, i193 = 0, i194 = 0, i195 = 0, i196 = 0, i197 = 0, i198 = 0, i199 = 0, i200 = 0, i201 = 0, i202 = 0, i203 = 0, i204 = 0, i205 = 0, i206 = 0, i207 = 0, i208 = 0, i209 = 0, i210 = 0, i211 = 0, i212 = 0, i213 = 0, i214 = 0, i215 = 0, i216 = 0, i217 = 0, i218 = 0, i219 = 0, i220 = 0, i221 = 0, i222 = 0, i223 = 0, i224 = 0, i225 = 0, i226 = 0, i228 = 0, i230 = 0, i233 = 0;
 i230 = HEAP32[i227 + 4 >> 2] | 0;
 i228 = i1 & 255;
 i58 = i228 ^ 255;
 i17 = HEAP8[i230 + 9 >> 0] | 0;
 i3 = i17 & 255;
 if (i17 << 24 >> 24 != 4) {
  i233 = _SDL_Error(4) | 0;
  return i233 | 0;
 }
 switch (i2 | 0) {
 case 1:
  {
   i1 = HEAP32[i232 + 8 >> 2] | 0;
   i2 = HEAP32[i232 + 12 >> 2] | 0;
   i4 = (HEAP32[i227 + 16 >> 2] | 0) / (i3 | 0) | 0;
   i20 = i4 - i1 | 0;
   if (!i2) {
    i233 = 0;
    return i233 | 0;
   }
   i21 = (i1 + 3 | 0) / 4 | 0;
   i19 = i1 & 255;
   i8 = i230 + 28 | 0;
   i9 = i230 + 12 | 0;
   i10 = i230 + 32 | 0;
   i11 = i230 + 29 | 0;
   i12 = i230 + 16 | 0;
   i13 = i230 + 33 | 0;
   i14 = i230 + 30 | 0;
   i15 = i230 + 20 | 0;
   i16 = i230 + 34 | 0;
   i17 = i230 + 31 | 0;
   i18 = i230 + 24 | 0;
   i7 = i230 + 35 | 0;
   i6 = i5 & 255;
   i5 = i229 & 255;
   i3 = i231 & 255;
   i1 = (HEAP32[i227 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i232 + 4 >> 2] | 0, i4) | 0) << 2) + (HEAP32[i232 >> 2] << 2) | 0;
   L31 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i19 & 3) {
    case 0:
     {
      i164 = HEAP8[i8 >> 0] | 0;
      i181 = HEAP8[i11 >> 0] | 0;
      i204 = HEAP8[i14 >> 0] | 0;
      i226 = HEAP8[i17 >> 0] | 0;
      i59 = i21;
      i62 = i1;
      i146 = i164;
      i156 = HEAP8[i10 >> 0] | 0;
      i164 = HEAP32[5724 + ((i164 & 255) << 2) >> 2] | 0;
      i170 = i181;
      i172 = HEAP8[i13 >> 0] | 0;
      i181 = HEAP32[5724 + ((i181 & 255) << 2) >> 2] | 0;
      i188 = i204;
      i198 = HEAP8[i16 >> 0] | 0;
      i204 = HEAP32[5724 + ((i204 & 255) << 2) >> 2] | 0;
      i212 = i226;
      i223 = HEAP8[i7 >> 0] | 0;
      i226 = HEAP32[5724 + ((i226 & 255) << 2) >> 2] | 0;
      i1 = 10;
      break;
     }
    case 3:
     {
      i85 = HEAP8[i8 >> 0] | 0;
      i88 = HEAP8[i11 >> 0] | 0;
      i91 = HEAP8[i14 >> 0] | 0;
      i94 = HEAP8[i17 >> 0] | 0;
      i63 = i21;
      i68 = i1;
      i83 = i85;
      i84 = HEAP8[i10 >> 0] | 0;
      i85 = HEAP32[5724 + ((i85 & 255) << 2) >> 2] | 0;
      i86 = i88;
      i87 = HEAP8[i13 >> 0] | 0;
      i88 = HEAP32[5724 + ((i88 & 255) << 2) >> 2] | 0;
      i89 = i91;
      i90 = HEAP8[i16 >> 0] | 0;
      i91 = HEAP32[5724 + ((i91 & 255) << 2) >> 2] | 0;
      i92 = i94;
      i93 = HEAP8[i7 >> 0] | 0;
      i94 = HEAP32[5724 + ((i94 & 255) << 2) >> 2] | 0;
      i1 = 11;
      break;
     }
    case 2:
     {
      i97 = HEAP8[i8 >> 0] | 0;
      i100 = HEAP8[i11 >> 0] | 0;
      i103 = HEAP8[i14 >> 0] | 0;
      i106 = HEAP8[i17 >> 0] | 0;
      i69 = i21;
      i74 = i1;
      i95 = i97;
      i96 = HEAP8[i10 >> 0] | 0;
      i97 = HEAP32[5724 + ((i97 & 255) << 2) >> 2] | 0;
      i98 = i100;
      i99 = HEAP8[i13 >> 0] | 0;
      i100 = HEAP32[5724 + ((i100 & 255) << 2) >> 2] | 0;
      i101 = i103;
      i102 = HEAP8[i16 >> 0] | 0;
      i103 = HEAP32[5724 + ((i103 & 255) << 2) >> 2] | 0;
      i104 = i106;
      i105 = HEAP8[i7 >> 0] | 0;
      i106 = HEAP32[5724 + ((i106 & 255) << 2) >> 2] | 0;
      i1 = 12;
      break;
     }
    case 1:
     {
      i109 = HEAP8[i8 >> 0] | 0;
      i112 = HEAP8[i11 >> 0] | 0;
      i115 = HEAP8[i14 >> 0] | 0;
      i118 = HEAP8[i17 >> 0] | 0;
      i75 = i21;
      i80 = i1;
      i107 = i109;
      i108 = HEAP8[i10 >> 0] | 0;
      i109 = HEAP32[5724 + ((i109 & 255) << 2) >> 2] | 0;
      i110 = i112;
      i111 = HEAP8[i13 >> 0] | 0;
      i112 = HEAP32[5724 + ((i112 & 255) << 2) >> 2] | 0;
      i113 = i115;
      i114 = HEAP8[i16 >> 0] | 0;
      i115 = HEAP32[5724 + ((i115 & 255) << 2) >> 2] | 0;
      i116 = i118;
      i117 = HEAP8[i7 >> 0] | 0;
      i118 = HEAP32[5724 + ((i118 & 255) << 2) >> 2] | 0;
      i1 = 13;
      break;
     }
    default:
     {
      i1 = 14;
      break L31;
     }
    }
    while (1) if ((i1 | 0) == 10) {
     i68 = HEAP32[i62 >> 2] | 0;
     i84 = i156 & 255;
     i85 = i172 & 255;
     i83 = i198 & 255;
     i63 = i223 & 255;
     HEAP32[i62 >> 2] = ((((Math_imul(i58, HEAPU8[i181 + ((HEAP32[i12 >> 2] & i68) >>> i85) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i170 & 255) << i85 | ((((Math_imul(i58, HEAPU8[i164 + ((HEAP32[i9 >> 2] & i68) >>> i84) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i146 & 255) << i84 | ((((Math_imul(i58, HEAPU8[i204 + ((HEAP32[i15 >> 2] & i68) >>> i83) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i3 | 0) >>> (i188 & 255) << i83 | ((((Math_imul(i58, HEAPU8[i226 + ((HEAP32[i18 >> 2] & i68) >>> i63) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i228 | 0) >>> (i212 & 255) << i63;
     i63 = i59;
     i68 = i62 + 4 | 0;
     i83 = i146;
     i84 = i156;
     i85 = i164;
     i86 = i170;
     i87 = i172;
     i88 = i181;
     i89 = i188;
     i90 = i198;
     i91 = i204;
     i92 = i212;
     i93 = i223;
     i94 = i226;
     i1 = 11;
     continue;
    } else if ((i1 | 0) == 11) {
     i74 = HEAP32[i68 >> 2] | 0;
     i96 = i84 & 255;
     i97 = i87 & 255;
     i95 = i90 & 255;
     i69 = i93 & 255;
     HEAP32[i68 >> 2] = ((((Math_imul(i58, HEAPU8[i88 + ((HEAP32[i12 >> 2] & i74) >>> i97) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i86 & 255) << i97 | ((((Math_imul(i58, HEAPU8[i85 + ((HEAP32[i9 >> 2] & i74) >>> i96) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i83 & 255) << i96 | ((((Math_imul(i58, HEAPU8[i91 + ((HEAP32[i15 >> 2] & i74) >>> i95) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i3 | 0) >>> (i89 & 255) << i95 | ((((Math_imul(i58, HEAPU8[i94 + ((HEAP32[i18 >> 2] & i74) >>> i69) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i228 | 0) >>> (i92 & 255) << i69;
     i69 = i63;
     i74 = i68 + 4 | 0;
     i95 = i83;
     i96 = i84;
     i97 = i85;
     i98 = i86;
     i99 = i87;
     i100 = i88;
     i101 = i89;
     i102 = i90;
     i103 = i91;
     i104 = i92;
     i105 = i93;
     i106 = i94;
     i1 = 12;
     continue;
    } else if ((i1 | 0) == 12) {
     i80 = HEAP32[i74 >> 2] | 0;
     i108 = i96 & 255;
     i109 = i99 & 255;
     i107 = i102 & 255;
     i75 = i105 & 255;
     HEAP32[i74 >> 2] = ((((Math_imul(i58, HEAPU8[i100 + ((HEAP32[i12 >> 2] & i80) >>> i109) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i98 & 255) << i109 | ((((Math_imul(i58, HEAPU8[i97 + ((HEAP32[i9 >> 2] & i80) >>> i108) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i95 & 255) << i108 | ((((Math_imul(i58, HEAPU8[i103 + ((HEAP32[i15 >> 2] & i80) >>> i107) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i3 | 0) >>> (i101 & 255) << i107 | ((((Math_imul(i58, HEAPU8[i106 + ((HEAP32[i18 >> 2] & i80) >>> i75) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i228 | 0) >>> (i104 & 255) << i75;
     i75 = i69;
     i80 = i74 + 4 | 0;
     i107 = i95;
     i108 = i96;
     i109 = i97;
     i110 = i98;
     i111 = i99;
     i112 = i100;
     i113 = i101;
     i114 = i102;
     i115 = i103;
     i116 = i104;
     i117 = i105;
     i118 = i106;
     i1 = 13;
     continue;
    } else if ((i1 | 0) == 13) {
     i232 = HEAP32[i80 >> 2] | 0;
     i230 = i108 & 255;
     i229 = i111 & 255;
     i231 = i114 & 255;
     i1 = i117 & 255;
     HEAP32[i80 >> 2] = ((((Math_imul(i58, HEAPU8[i112 + ((HEAP32[i12 >> 2] & i232) >>> i229) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> (i110 & 255) << i229 | ((((Math_imul(i58, HEAPU8[i109 + ((HEAP32[i9 >> 2] & i232) >>> i230) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> (i107 & 255) << i230 | ((((Math_imul(i58, HEAPU8[i115 + ((HEAP32[i15 >> 2] & i232) >>> i231) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i3 | 0) >>> (i113 & 255) << i231 | ((((Math_imul(i58, HEAPU8[i118 + ((HEAP32[i18 >> 2] & i232) >>> i1) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i228 | 0) >>> (i116 & 255) << i1;
     i1 = i80 + 4 | 0;
     if ((i75 | 0) > 1) {
      i59 = i75 + -1 | 0;
      i62 = i1;
      i146 = i107;
      i156 = i108;
      i164 = i109;
      i170 = i110;
      i172 = i111;
      i181 = i112;
      i188 = i113;
      i198 = i114;
      i204 = i115;
      i212 = i116;
      i223 = i117;
      i226 = i118;
      i1 = 10;
      continue;
     } else break;
    }
    if (!i2) {
     i233 = 0;
     i1 = 56;
     break;
    } else i1 = i1 + (i20 << 2) | 0;
   }
   if ((i1 | 0) != 14) if ((i1 | 0) == 56) return i233 | 0;
   break;
  }
 case 2:
  {
   i2 = HEAP32[i232 + 8 >> 2] | 0;
   i19 = HEAP32[i232 + 12 >> 2] | 0;
   i1 = (HEAP32[i227 + 16 >> 2] | 0) / (i3 | 0) | 0;
   i21 = i1 - i2 | 0;
   if (!i19) {
    i233 = 0;
    return i233 | 0;
   }
   i1 = (HEAP32[i227 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i232 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i20 = (i2 + 3 | 0) / 4 | 0;
   i18 = i2 & 255;
   i7 = i230 + 28 | 0;
   i8 = i230 + 12 | 0;
   i9 = i230 + 32 | 0;
   i10 = i230 + 29 | 0;
   i11 = i230 + 16 | 0;
   i12 = i230 + 33 | 0;
   i13 = i230 + 30 | 0;
   i14 = i230 + 20 | 0;
   i15 = i230 + 34 | 0;
   i16 = i230 + 31 | 0;
   i17 = i230 + 24 | 0;
   i6 = i230 + 35 | 0;
   i5 = i5 & 255;
   i4 = i229 & 255;
   i3 = i231 & 255;
   i1 = i1 + (HEAP32[i232 >> 2] << 2) | 0;
   i2 = i19;
   L52 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i18 & 3) {
    case 0:
     {
      i121 = HEAP8[i7 >> 0] | 0;
      i124 = HEAP8[i10 >> 0] | 0;
      i127 = HEAP8[i13 >> 0] | 0;
      i130 = HEAP8[i16 >> 0] | 0;
      i60 = i20;
      i64 = i1;
      i119 = i121;
      i120 = HEAP8[i9 >> 0] | 0;
      i121 = HEAP32[5724 + ((i121 & 255) << 2) >> 2] | 0;
      i122 = i124;
      i123 = HEAP8[i12 >> 0] | 0;
      i124 = HEAP32[5724 + ((i124 & 255) << 2) >> 2] | 0;
      i125 = i127;
      i126 = HEAP8[i15 >> 0] | 0;
      i127 = HEAP32[5724 + ((i127 & 255) << 2) >> 2] | 0;
      i128 = i130;
      i129 = HEAP8[i6 >> 0] | 0;
      i130 = HEAP32[5724 + ((i130 & 255) << 2) >> 2] | 0;
      i1 = 23;
      break;
     }
    case 3:
     {
      i133 = HEAP8[i7 >> 0] | 0;
      i136 = HEAP8[i10 >> 0] | 0;
      i139 = HEAP8[i13 >> 0] | 0;
      i142 = HEAP8[i16 >> 0] | 0;
      i65 = i20;
      i70 = i1;
      i131 = i133;
      i132 = HEAP8[i9 >> 0] | 0;
      i133 = HEAP32[5724 + ((i133 & 255) << 2) >> 2] | 0;
      i134 = i136;
      i135 = HEAP8[i12 >> 0] | 0;
      i136 = HEAP32[5724 + ((i136 & 255) << 2) >> 2] | 0;
      i137 = i139;
      i138 = HEAP8[i15 >> 0] | 0;
      i139 = HEAP32[5724 + ((i139 & 255) << 2) >> 2] | 0;
      i140 = i142;
      i141 = HEAP8[i6 >> 0] | 0;
      i142 = HEAP32[5724 + ((i142 & 255) << 2) >> 2] | 0;
      i1 = 24;
      break;
     }
    case 2:
     {
      i145 = HEAP8[i7 >> 0] | 0;
      i149 = HEAP8[i10 >> 0] | 0;
      i152 = HEAP8[i13 >> 0] | 0;
      i155 = HEAP8[i16 >> 0] | 0;
      i71 = i20;
      i76 = i1;
      i143 = i145;
      i144 = HEAP8[i9 >> 0] | 0;
      i145 = HEAP32[5724 + ((i145 & 255) << 2) >> 2] | 0;
      i147 = i149;
      i148 = HEAP8[i12 >> 0] | 0;
      i149 = HEAP32[5724 + ((i149 & 255) << 2) >> 2] | 0;
      i150 = i152;
      i151 = HEAP8[i15 >> 0] | 0;
      i152 = HEAP32[5724 + ((i152 & 255) << 2) >> 2] | 0;
      i153 = i155;
      i154 = HEAP8[i6 >> 0] | 0;
      i155 = HEAP32[5724 + ((i155 & 255) << 2) >> 2] | 0;
      i1 = 25;
      break;
     }
    case 1:
     {
      i159 = HEAP8[i7 >> 0] | 0;
      i162 = HEAP8[i10 >> 0] | 0;
      i166 = HEAP8[i13 >> 0] | 0;
      i169 = HEAP8[i16 >> 0] | 0;
      i77 = i20;
      i81 = i1;
      i157 = i159;
      i158 = HEAP8[i9 >> 0] | 0;
      i159 = HEAP32[5724 + ((i159 & 255) << 2) >> 2] | 0;
      i160 = i162;
      i161 = HEAP8[i12 >> 0] | 0;
      i162 = HEAP32[5724 + ((i162 & 255) << 2) >> 2] | 0;
      i163 = i166;
      i165 = HEAP8[i15 >> 0] | 0;
      i166 = HEAP32[5724 + ((i166 & 255) << 2) >> 2] | 0;
      i167 = i169;
      i168 = HEAP8[i6 >> 0] | 0;
      i169 = HEAP32[5724 + ((i169 & 255) << 2) >> 2] | 0;
      i1 = 26;
      break;
     }
    default:
     {
      i1 = 27;
      break L52;
     }
    }
    while (1) if ((i1 | 0) == 23) {
     i70 = HEAP32[i64 >> 2] | 0;
     i133 = i120 & 255;
     i135 = i123 & 255;
     i131 = i126 & 255;
     i65 = i129 & 255;
     i134 = (HEAPU8[i121 + ((HEAP32[i8 >> 2] & i70) >>> i133) >> 0] | 0) + i5 | 0;
     i136 = (HEAPU8[i124 + ((HEAP32[i11 >> 2] & i70) >>> i135) >> 0] | 0) + i4 | 0;
     i132 = (HEAPU8[i127 + ((HEAP32[i14 >> 2] & i70) >>> i131) >> 0] | 0) + i3 | 0;
     HEAP32[i64 >> 2] = (i136 >>> 0 < 255 ? i136 : 255) >>> (i122 & 255) << i135 | (i134 >>> 0 < 255 ? i134 : 255) >>> (i119 & 255) << i133 | (i132 >>> 0 < 255 ? i132 : 255) >>> (i125 & 255) << i131 | (HEAPU8[i130 + ((HEAP32[i17 >> 2] & i70) >>> i65) >> 0] | 0) >>> (i128 & 255) << i65;
     i65 = i60;
     i70 = i64 + 4 | 0;
     i131 = i119;
     i132 = i120;
     i133 = i121;
     i134 = i122;
     i135 = i123;
     i136 = i124;
     i137 = i125;
     i138 = i126;
     i139 = i127;
     i140 = i128;
     i141 = i129;
     i142 = i130;
     i1 = 24;
     continue;
    } else if ((i1 | 0) == 24) {
     i76 = HEAP32[i70 >> 2] | 0;
     i145 = i132 & 255;
     i148 = i135 & 255;
     i143 = i138 & 255;
     i71 = i141 & 255;
     i147 = (HEAPU8[i133 + ((HEAP32[i8 >> 2] & i76) >>> i145) >> 0] | 0) + i5 | 0;
     i149 = (HEAPU8[i136 + ((HEAP32[i11 >> 2] & i76) >>> i148) >> 0] | 0) + i4 | 0;
     i144 = (HEAPU8[i139 + ((HEAP32[i14 >> 2] & i76) >>> i143) >> 0] | 0) + i3 | 0;
     HEAP32[i70 >> 2] = (i149 >>> 0 < 255 ? i149 : 255) >>> (i134 & 255) << i148 | (i147 >>> 0 < 255 ? i147 : 255) >>> (i131 & 255) << i145 | (i144 >>> 0 < 255 ? i144 : 255) >>> (i137 & 255) << i143 | (HEAPU8[i142 + ((HEAP32[i17 >> 2] & i76) >>> i71) >> 0] | 0) >>> (i140 & 255) << i71;
     i71 = i65;
     i76 = i70 + 4 | 0;
     i143 = i131;
     i144 = i132;
     i145 = i133;
     i147 = i134;
     i148 = i135;
     i149 = i136;
     i150 = i137;
     i151 = i138;
     i152 = i139;
     i153 = i140;
     i154 = i141;
     i155 = i142;
     i1 = 25;
     continue;
    } else if ((i1 | 0) == 25) {
     i81 = HEAP32[i76 >> 2] | 0;
     i159 = i144 & 255;
     i161 = i148 & 255;
     i157 = i151 & 255;
     i77 = i154 & 255;
     i160 = (HEAPU8[i145 + ((HEAP32[i8 >> 2] & i81) >>> i159) >> 0] | 0) + i5 | 0;
     i162 = (HEAPU8[i149 + ((HEAP32[i11 >> 2] & i81) >>> i161) >> 0] | 0) + i4 | 0;
     i158 = (HEAPU8[i152 + ((HEAP32[i14 >> 2] & i81) >>> i157) >> 0] | 0) + i3 | 0;
     HEAP32[i76 >> 2] = (i162 >>> 0 < 255 ? i162 : 255) >>> (i147 & 255) << i161 | (i160 >>> 0 < 255 ? i160 : 255) >>> (i143 & 255) << i159 | (i158 >>> 0 < 255 ? i158 : 255) >>> (i150 & 255) << i157 | (HEAPU8[i155 + ((HEAP32[i17 >> 2] & i81) >>> i77) >> 0] | 0) >>> (i153 & 255) << i77;
     i77 = i71;
     i81 = i76 + 4 | 0;
     i157 = i143;
     i158 = i144;
     i159 = i145;
     i160 = i147;
     i161 = i148;
     i162 = i149;
     i163 = i150;
     i165 = i151;
     i166 = i152;
     i167 = i153;
     i168 = i154;
     i169 = i155;
     i1 = 26;
     continue;
    } else if ((i1 | 0) == 26) {
     i232 = HEAP32[i81 >> 2] | 0;
     i229 = i158 & 255;
     i227 = i161 & 255;
     i231 = i165 & 255;
     i1 = i168 & 255;
     i228 = (HEAPU8[i159 + ((HEAP32[i8 >> 2] & i232) >>> i229) >> 0] | 0) + i5 | 0;
     i226 = (HEAPU8[i162 + ((HEAP32[i11 >> 2] & i232) >>> i227) >> 0] | 0) + i4 | 0;
     i230 = (HEAPU8[i166 + ((HEAP32[i14 >> 2] & i232) >>> i231) >> 0] | 0) + i3 | 0;
     HEAP32[i81 >> 2] = (i226 >>> 0 < 255 ? i226 : 255) >>> (i160 & 255) << i227 | (i228 >>> 0 < 255 ? i228 : 255) >>> (i157 & 255) << i229 | (i230 >>> 0 < 255 ? i230 : 255) >>> (i163 & 255) << i231 | (HEAPU8[i169 + ((HEAP32[i17 >> 2] & i232) >>> i1) >> 0] | 0) >>> (i167 & 255) << i1;
     i1 = i81 + 4 | 0;
     if ((i77 | 0) > 1) {
      i60 = i77 + -1 | 0;
      i64 = i1;
      i119 = i157;
      i120 = i158;
      i121 = i159;
      i122 = i160;
      i123 = i161;
      i124 = i162;
      i125 = i163;
      i126 = i165;
      i127 = i166;
      i128 = i167;
      i129 = i168;
      i130 = i169;
      i1 = 23;
      continue;
     } else break;
    }
    if (!i2) {
     i233 = 0;
     i1 = 56;
     break;
    } else i1 = i1 + (i21 << 2) | 0;
   }
   if ((i1 | 0) != 27) if ((i1 | 0) == 56) return i233 | 0;
   break;
  }
 case 4:
  {
   i2 = HEAP32[i232 + 8 >> 2] | 0;
   i19 = HEAP32[i232 + 12 >> 2] | 0;
   i1 = (HEAP32[i227 + 16 >> 2] | 0) / (i3 | 0) | 0;
   i21 = i1 - i2 | 0;
   if (!i19) {
    i233 = 0;
    return i233 | 0;
   }
   i1 = (HEAP32[i227 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i232 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i20 = (i2 + 3 | 0) / 4 | 0;
   i18 = i2 & 255;
   i7 = i230 + 28 | 0;
   i8 = i230 + 12 | 0;
   i9 = i230 + 32 | 0;
   i10 = i230 + 29 | 0;
   i11 = i230 + 16 | 0;
   i12 = i230 + 33 | 0;
   i13 = i230 + 30 | 0;
   i14 = i230 + 20 | 0;
   i15 = i230 + 34 | 0;
   i16 = i230 + 31 | 0;
   i17 = i230 + 24 | 0;
   i6 = i230 + 35 | 0;
   i5 = i5 & 255;
   i4 = i229 & 255;
   i3 = i231 & 255;
   i1 = i1 + (HEAP32[i232 >> 2] << 2) | 0;
   i2 = i19;
   L73 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i18 & 3) {
    case 0:
     {
      i174 = HEAP8[i7 >> 0] | 0;
      i177 = HEAP8[i10 >> 0] | 0;
      i180 = HEAP8[i13 >> 0] | 0;
      i184 = HEAP8[i16 >> 0] | 0;
      i61 = i20;
      i66 = i1;
      i171 = i174;
      i173 = HEAP8[i9 >> 0] | 0;
      i174 = HEAP32[5724 + ((i174 & 255) << 2) >> 2] | 0;
      i175 = i177;
      i176 = HEAP8[i12 >> 0] | 0;
      i177 = HEAP32[5724 + ((i177 & 255) << 2) >> 2] | 0;
      i178 = i180;
      i179 = HEAP8[i15 >> 0] | 0;
      i180 = HEAP32[5724 + ((i180 & 255) << 2) >> 2] | 0;
      i182 = i184;
      i183 = HEAP8[i6 >> 0] | 0;
      i184 = HEAP32[5724 + ((i184 & 255) << 2) >> 2] | 0;
      i1 = 36;
      break;
     }
    case 3:
     {
      i187 = HEAP8[i7 >> 0] | 0;
      i191 = HEAP8[i10 >> 0] | 0;
      i194 = HEAP8[i13 >> 0] | 0;
      i197 = HEAP8[i16 >> 0] | 0;
      i67 = i20;
      i72 = i1;
      i185 = i187;
      i186 = HEAP8[i9 >> 0] | 0;
      i187 = HEAP32[5724 + ((i187 & 255) << 2) >> 2] | 0;
      i189 = i191;
      i190 = HEAP8[i12 >> 0] | 0;
      i191 = HEAP32[5724 + ((i191 & 255) << 2) >> 2] | 0;
      i192 = i194;
      i193 = HEAP8[i15 >> 0] | 0;
      i194 = HEAP32[5724 + ((i194 & 255) << 2) >> 2] | 0;
      i195 = i197;
      i196 = HEAP8[i6 >> 0] | 0;
      i197 = HEAP32[5724 + ((i197 & 255) << 2) >> 2] | 0;
      i1 = 37;
      break;
     }
    case 2:
     {
      i201 = HEAP8[i7 >> 0] | 0;
      i205 = HEAP8[i10 >> 0] | 0;
      i208 = HEAP8[i13 >> 0] | 0;
      i211 = HEAP8[i16 >> 0] | 0;
      i73 = i20;
      i78 = i1;
      i199 = i201;
      i200 = HEAP8[i9 >> 0] | 0;
      i201 = HEAP32[5724 + ((i201 & 255) << 2) >> 2] | 0;
      i202 = i205;
      i203 = HEAP8[i12 >> 0] | 0;
      i205 = HEAP32[5724 + ((i205 & 255) << 2) >> 2] | 0;
      i206 = i208;
      i207 = HEAP8[i15 >> 0] | 0;
      i208 = HEAP32[5724 + ((i208 & 255) << 2) >> 2] | 0;
      i209 = i211;
      i210 = HEAP8[i6 >> 0] | 0;
      i211 = HEAP32[5724 + ((i211 & 255) << 2) >> 2] | 0;
      i1 = 38;
      break;
     }
    case 1:
     {
      i215 = HEAP8[i7 >> 0] | 0;
      i218 = HEAP8[i10 >> 0] | 0;
      i221 = HEAP8[i13 >> 0] | 0;
      i225 = HEAP8[i16 >> 0] | 0;
      i79 = i20;
      i82 = i1;
      i213 = i215;
      i214 = HEAP8[i9 >> 0] | 0;
      i215 = HEAP32[5724 + ((i215 & 255) << 2) >> 2] | 0;
      i216 = i218;
      i217 = HEAP8[i12 >> 0] | 0;
      i218 = HEAP32[5724 + ((i218 & 255) << 2) >> 2] | 0;
      i219 = i221;
      i220 = HEAP8[i15 >> 0] | 0;
      i221 = HEAP32[5724 + ((i221 & 255) << 2) >> 2] | 0;
      i222 = i225;
      i224 = HEAP8[i6 >> 0] | 0;
      i225 = HEAP32[5724 + ((i225 & 255) << 2) >> 2] | 0;
      i1 = 39;
      break;
     }
    default:
     {
      i1 = 40;
      break L73;
     }
    }
    while (1) if ((i1 | 0) == 36) {
     i72 = HEAP32[i66 >> 2] | 0;
     i186 = i173 & 255;
     i187 = i176 & 255;
     i185 = i179 & 255;
     i67 = i183 & 255;
     HEAP32[i66 >> 2] = (((Math_imul(HEAPU8[i177 + ((HEAP32[i11 >> 2] & i72) >>> i187) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i175 & 255) << i187 | (((Math_imul(HEAPU8[i174 + ((HEAP32[i8 >> 2] & i72) >>> i186) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i171 & 255) << i186 | (((Math_imul(HEAPU8[i180 + ((HEAP32[i14 >> 2] & i72) >>> i185) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> (i178 & 255) << i185 | (HEAPU8[i184 + ((HEAP32[i17 >> 2] & i72) >>> i67) >> 0] | 0) >>> (i182 & 255) << i67;
     i67 = i61;
     i72 = i66 + 4 | 0;
     i185 = i171;
     i186 = i173;
     i187 = i174;
     i189 = i175;
     i190 = i176;
     i191 = i177;
     i192 = i178;
     i193 = i179;
     i194 = i180;
     i195 = i182;
     i196 = i183;
     i197 = i184;
     i1 = 37;
     continue;
    } else if ((i1 | 0) == 37) {
     i78 = HEAP32[i72 >> 2] | 0;
     i200 = i186 & 255;
     i201 = i190 & 255;
     i199 = i193 & 255;
     i73 = i196 & 255;
     HEAP32[i72 >> 2] = (((Math_imul(HEAPU8[i191 + ((HEAP32[i11 >> 2] & i78) >>> i201) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i189 & 255) << i201 | (((Math_imul(HEAPU8[i187 + ((HEAP32[i8 >> 2] & i78) >>> i200) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i185 & 255) << i200 | (((Math_imul(HEAPU8[i194 + ((HEAP32[i14 >> 2] & i78) >>> i199) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> (i192 & 255) << i199 | (HEAPU8[i197 + ((HEAP32[i17 >> 2] & i78) >>> i73) >> 0] | 0) >>> (i195 & 255) << i73;
     i73 = i67;
     i78 = i72 + 4 | 0;
     i199 = i185;
     i200 = i186;
     i201 = i187;
     i202 = i189;
     i203 = i190;
     i205 = i191;
     i206 = i192;
     i207 = i193;
     i208 = i194;
     i209 = i195;
     i210 = i196;
     i211 = i197;
     i1 = 38;
     continue;
    } else if ((i1 | 0) == 38) {
     i82 = HEAP32[i78 >> 2] | 0;
     i214 = i200 & 255;
     i215 = i203 & 255;
     i213 = i207 & 255;
     i79 = i210 & 255;
     HEAP32[i78 >> 2] = (((Math_imul(HEAPU8[i205 + ((HEAP32[i11 >> 2] & i82) >>> i215) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i202 & 255) << i215 | (((Math_imul(HEAPU8[i201 + ((HEAP32[i8 >> 2] & i82) >>> i214) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i199 & 255) << i214 | (((Math_imul(HEAPU8[i208 + ((HEAP32[i14 >> 2] & i82) >>> i213) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> (i206 & 255) << i213 | (HEAPU8[i211 + ((HEAP32[i17 >> 2] & i82) >>> i79) >> 0] | 0) >>> (i209 & 255) << i79;
     i79 = i73;
     i82 = i78 + 4 | 0;
     i213 = i199;
     i214 = i200;
     i215 = i201;
     i216 = i202;
     i217 = i203;
     i218 = i205;
     i219 = i206;
     i220 = i207;
     i221 = i208;
     i222 = i209;
     i224 = i210;
     i225 = i211;
     i1 = 39;
     continue;
    } else if ((i1 | 0) == 39) {
     i232 = HEAP32[i82 >> 2] | 0;
     i230 = i214 & 255;
     i229 = i217 & 255;
     i231 = i220 & 255;
     i1 = i224 & 255;
     HEAP32[i82 >> 2] = (((Math_imul(HEAPU8[i218 + ((HEAP32[i11 >> 2] & i232) >>> i229) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> (i216 & 255) << i229 | (((Math_imul(HEAPU8[i215 + ((HEAP32[i8 >> 2] & i232) >>> i230) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> (i213 & 255) << i230 | (((Math_imul(HEAPU8[i221 + ((HEAP32[i14 >> 2] & i232) >>> i231) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> (i219 & 255) << i231 | (HEAPU8[i225 + ((HEAP32[i17 >> 2] & i232) >>> i1) >> 0] | 0) >>> (i222 & 255) << i1;
     i1 = i82 + 4 | 0;
     if ((i79 | 0) > 1) {
      i61 = i79 + -1 | 0;
      i66 = i1;
      i171 = i213;
      i173 = i214;
      i174 = i215;
      i175 = i216;
      i176 = i217;
      i177 = i218;
      i178 = i219;
      i179 = i220;
      i180 = i221;
      i182 = i222;
      i183 = i224;
      i184 = i225;
      i1 = 36;
      continue;
     } else break;
    }
    if (!i2) {
     i233 = 0;
     i1 = 56;
     break;
    } else i1 = i1 + (i21 << 2) | 0;
   }
   if ((i1 | 0) != 40) if ((i1 | 0) == 56) return i233 | 0;
   break;
  }
 default:
  {
   i2 = HEAP32[i232 + 8 >> 2] | 0;
   i15 = HEAP32[i232 + 12 >> 2] | 0;
   i1 = (HEAP32[i227 + 16 >> 2] | 0) / (i3 | 0) | 0;
   i17 = i1 - i2 | 0;
   if (!i15) {
    i233 = 0;
    return i233 | 0;
   }
   i1 = (HEAP32[i227 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i232 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i16 = (i2 + 3 | 0) / 4 | 0;
   i14 = i2 & 255;
   i13 = i5 & 255;
   i12 = i229 & 255;
   i4 = i231 & 255;
   i5 = i230 + 28 | 0;
   i6 = i230 + 32 | 0;
   i7 = i230 + 29 | 0;
   i8 = i230 + 33 | 0;
   i9 = i230 + 30 | 0;
   i10 = i230 + 34 | 0;
   i11 = i230 + 31 | 0;
   i3 = i230 + 35 | 0;
   i1 = i1 + (HEAP32[i232 >> 2] << 2) | 0;
   i2 = i15;
   L10 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i14 & 3) {
    case 0:
     {
      i18 = i16;
      i20 = i1;
      i41 = HEAP8[i5 >> 0] | 0;
      i42 = HEAP8[i6 >> 0] | 0;
      i43 = HEAP8[i7 >> 0] | 0;
      i44 = HEAP8[i8 >> 0] | 0;
      i45 = HEAP8[i9 >> 0] | 0;
      i46 = HEAP8[i10 >> 0] | 0;
      i47 = HEAP8[i11 >> 0] | 0;
      i48 = HEAP8[i3 >> 0] | 0;
      i1 = 49;
      break;
     }
    case 3:
     {
      i19 = i16;
      i22 = i1;
      i49 = HEAP8[i5 >> 0] | 0;
      i50 = HEAP8[i6 >> 0] | 0;
      i51 = HEAP8[i7 >> 0] | 0;
      i52 = HEAP8[i8 >> 0] | 0;
      i53 = HEAP8[i9 >> 0] | 0;
      i54 = HEAP8[i10 >> 0] | 0;
      i55 = HEAP8[i11 >> 0] | 0;
      i56 = HEAP8[i3 >> 0] | 0;
      i1 = 50;
      break;
     }
    case 2:
     {
      i21 = i16;
      i24 = i1;
      i26 = HEAP8[i6 >> 0] | 0;
      i27 = HEAP8[i7 >> 0] | 0;
      i28 = HEAP8[i8 >> 0] | 0;
      i29 = HEAP8[i9 >> 0] | 0;
      i30 = HEAP8[i10 >> 0] | 0;
      i31 = HEAP8[i11 >> 0] | 0;
      i32 = HEAP8[i3 >> 0] | 0;
      i57 = HEAP8[i5 >> 0] | 0;
      i1 = 51;
      break;
     }
    case 1:
     {
      i23 = i16;
      i25 = i1;
      i33 = HEAP8[i5 >> 0] | 0;
      i34 = HEAP8[i6 >> 0] | 0;
      i35 = HEAP8[i7 >> 0] | 0;
      i36 = HEAP8[i8 >> 0] | 0;
      i37 = HEAP8[i9 >> 0] | 0;
      i38 = HEAP8[i10 >> 0] | 0;
      i39 = HEAP8[i11 >> 0] | 0;
      i40 = HEAP8[i3 >> 0] | 0;
      i1 = 52;
      break;
     }
    default:
     {
      i1 = 53;
      break L10;
     }
    }
    while (1) if ((i1 | 0) == 49) {
     HEAP32[i20 >> 2] = i12 >>> (i43 & 255) << (i44 & 255) | i13 >>> (i41 & 255) << (i42 & 255) | i4 >>> (i45 & 255) << (i46 & 255) | i228 >>> (i47 & 255) << (i48 & 255);
     i19 = i18;
     i22 = i20 + 4 | 0;
     i49 = i41;
     i50 = i42;
     i51 = i43;
     i52 = i44;
     i53 = i45;
     i54 = i46;
     i55 = i47;
     i56 = i48;
     i1 = 50;
     continue;
    } else if ((i1 | 0) == 50) {
     HEAP32[i22 >> 2] = i12 >>> (i51 & 255) << (i52 & 255) | i13 >>> (i49 & 255) << (i50 & 255) | i4 >>> (i53 & 255) << (i54 & 255) | i228 >>> (i55 & 255) << (i56 & 255);
     i21 = i19;
     i24 = i22 + 4 | 0;
     i26 = i50;
     i27 = i51;
     i28 = i52;
     i29 = i53;
     i30 = i54;
     i31 = i55;
     i32 = i56;
     i57 = i49;
     i1 = 51;
     continue;
    } else if ((i1 | 0) == 51) {
     HEAP32[i24 >> 2] = i12 >>> (i27 & 255) << (i28 & 255) | i13 >>> (i57 & 255) << (i26 & 255) | i4 >>> (i29 & 255) << (i30 & 255) | i228 >>> (i31 & 255) << (i32 & 255);
     i23 = i21;
     i25 = i24 + 4 | 0;
     i33 = i57;
     i34 = i26;
     i35 = i27;
     i36 = i28;
     i37 = i29;
     i38 = i30;
     i39 = i31;
     i40 = i32;
     i1 = 52;
     continue;
    } else if ((i1 | 0) == 52) {
     HEAP32[i25 >> 2] = i12 >>> (i35 & 255) << (i36 & 255) | i13 >>> (i33 & 255) << (i34 & 255) | i4 >>> (i37 & 255) << (i38 & 255) | i228 >>> (i39 & 255) << (i40 & 255);
     i1 = i25 + 4 | 0;
     if ((i23 | 0) > 1) {
      i18 = i23 + -1 | 0;
      i20 = i1;
      i41 = i33;
      i42 = i34;
      i43 = i35;
      i44 = i36;
      i45 = i37;
      i46 = i38;
      i47 = i39;
      i48 = i40;
      i1 = 49;
      continue;
     } else break;
    }
    if (!i2) {
     i233 = 0;
     i1 = 56;
     break;
    } else i1 = i1 + (i17 << 2) | 0;
   }
   if ((i1 | 0) != 53) if ((i1 | 0) == 56) return i233 | 0;
  }
 }
 return 0;
}

function _malloc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i14 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i13 = i15;
 do if (i1 >>> 0 < 245) {
  i10 = i1 >>> 0 < 11 ? 16 : i1 + 11 & -8;
  i1 = i10 >>> 3;
  i12 = HEAP32[20488] | 0;
  i2 = i12 >>> i1;
  if (i2 & 3 | 0) {
   i1 = (i2 & 1 ^ 1) + i1 | 0;
   i2 = 81992 + (i1 << 1 << 2) | 0;
   i3 = i2 + 8 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   i5 = i4 + 8 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i6 | 0) == (i2 | 0)) HEAP32[20488] = i12 & ~(1 << i1); else {
    HEAP32[i6 + 12 >> 2] = i2;
    HEAP32[i3 >> 2] = i6;
   }
   i14 = i1 << 3;
   HEAP32[i4 + 4 >> 2] = i14 | 3;
   i14 = i4 + i14 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
   i14 = i5;
   STACKTOP = i15;
   return i14 | 0;
  }
  i11 = HEAP32[20490] | 0;
  if (i10 >>> 0 > i11 >>> 0) {
   if (i2 | 0) {
    i8 = 2 << i1;
    i1 = i2 << i1 & (i8 | 0 - i8);
    i1 = (i1 & 0 - i1) + -1 | 0;
    i8 = i1 >>> 12 & 16;
    i1 = i1 >>> i8;
    i3 = i1 >>> 5 & 8;
    i1 = i1 >>> i3;
    i6 = i1 >>> 2 & 4;
    i1 = i1 >>> i6;
    i2 = i1 >>> 1 & 2;
    i1 = i1 >>> i2;
    i4 = i1 >>> 1 & 1;
    i4 = (i3 | i8 | i6 | i2 | i4) + (i1 >>> i4) | 0;
    i1 = 81992 + (i4 << 1 << 2) | 0;
    i2 = i1 + 8 | 0;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 + 8 | 0;
    i3 = HEAP32[i8 >> 2] | 0;
    if ((i3 | 0) == (i1 | 0)) {
     i2 = i12 & ~(1 << i4);
     HEAP32[20488] = i2;
    } else {
     HEAP32[i3 + 12 >> 2] = i1;
     HEAP32[i2 >> 2] = i3;
     i2 = i12;
    }
    i14 = i4 << 3;
    i7 = i14 - i10 | 0;
    HEAP32[i6 + 4 >> 2] = i10 | 3;
    i5 = i6 + i10 | 0;
    HEAP32[i5 + 4 >> 2] = i7 | 1;
    HEAP32[i6 + i14 >> 2] = i7;
    if (i11 | 0) {
     i4 = HEAP32[20493] | 0;
     i1 = i11 >>> 3;
     i3 = 81992 + (i1 << 1 << 2) | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[20488] = i2 | i1;
      i1 = i3;
      i2 = i3 + 8 | 0;
     } else {
      i2 = i3 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i4;
     HEAP32[i1 + 12 >> 2] = i4;
     HEAP32[i4 + 8 >> 2] = i1;
     HEAP32[i4 + 12 >> 2] = i3;
    }
    HEAP32[20490] = i7;
    HEAP32[20493] = i5;
    i14 = i8;
    STACKTOP = i15;
    return i14 | 0;
   }
   i8 = HEAP32[20489] | 0;
   if (!i8) i12 = i10; else {
    i2 = (i8 & 0 - i8) + -1 | 0;
    i7 = i2 >>> 12 & 16;
    i2 = i2 >>> i7;
    i6 = i2 >>> 5 & 8;
    i2 = i2 >>> i6;
    i9 = i2 >>> 2 & 4;
    i2 = i2 >>> i9;
    i3 = i2 >>> 1 & 2;
    i2 = i2 >>> i3;
    i1 = i2 >>> 1 & 1;
    i1 = HEAP32[82256 + ((i6 | i7 | i9 | i3 | i1) + (i2 >>> i1) << 2) >> 2] | 0;
    i2 = (HEAP32[i1 + 4 >> 2] & -8) - i10 | 0;
    i3 = HEAP32[i1 + 16 + (((HEAP32[i1 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!i3) {
     i9 = i1;
     i6 = i2;
    } else {
     do {
      i7 = (HEAP32[i3 + 4 >> 2] & -8) - i10 | 0;
      i9 = i7 >>> 0 < i2 >>> 0;
      i2 = i9 ? i7 : i2;
      i1 = i9 ? i3 : i1;
      i3 = HEAP32[i3 + 16 + (((HEAP32[i3 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
     } while ((i3 | 0) != 0);
     i9 = i1;
     i6 = i2;
    }
    i7 = i9 + i10 | 0;
    if (i7 >>> 0 > i9 >>> 0) {
     i5 = HEAP32[i9 + 24 >> 2] | 0;
     i1 = HEAP32[i9 + 12 >> 2] | 0;
     do if ((i1 | 0) == (i9 | 0)) {
      i2 = i9 + 20 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i2 = i9 + 16 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       if (!i1) {
        i3 = 0;
        break;
       }
      }
      while (1) {
       i3 = i1 + 20 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4 | 0) {
        i1 = i4;
        i2 = i3;
        continue;
       }
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) break; else {
        i1 = i4;
        i2 = i3;
       }
      }
      HEAP32[i2 >> 2] = 0;
      i3 = i1;
     } else {
      i3 = HEAP32[i9 + 8 >> 2] | 0;
      HEAP32[i3 + 12 >> 2] = i1;
      HEAP32[i1 + 8 >> 2] = i3;
      i3 = i1;
     } while (0);
     do if (i5 | 0) {
      i1 = HEAP32[i9 + 28 >> 2] | 0;
      i2 = 82256 + (i1 << 2) | 0;
      if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
       HEAP32[i2 >> 2] = i3;
       if (!i3) {
        HEAP32[20489] = i8 & ~(1 << i1);
        break;
       }
      } else {
       HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i9 | 0) & 1) << 2) >> 2] = i3;
       if (!i3) break;
      }
      HEAP32[i3 + 24 >> 2] = i5;
      i1 = HEAP32[i9 + 16 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 16 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
      i1 = HEAP32[i9 + 20 >> 2] | 0;
      if (i1 | 0) {
       HEAP32[i3 + 20 >> 2] = i1;
       HEAP32[i1 + 24 >> 2] = i3;
      }
     } while (0);
     if (i6 >>> 0 < 16) {
      i14 = i6 + i10 | 0;
      HEAP32[i9 + 4 >> 2] = i14 | 3;
      i14 = i9 + i14 + 4 | 0;
      HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
     } else {
      HEAP32[i9 + 4 >> 2] = i10 | 3;
      HEAP32[i7 + 4 >> 2] = i6 | 1;
      HEAP32[i7 + i6 >> 2] = i6;
      if (i11 | 0) {
       i4 = HEAP32[20493] | 0;
       i1 = i11 >>> 3;
       i3 = 81992 + (i1 << 1 << 2) | 0;
       i1 = 1 << i1;
       if (!(i12 & i1)) {
        HEAP32[20488] = i12 | i1;
        i1 = i3;
        i2 = i3 + 8 | 0;
       } else {
        i2 = i3 + 8 | 0;
        i1 = HEAP32[i2 >> 2] | 0;
       }
       HEAP32[i2 >> 2] = i4;
       HEAP32[i1 + 12 >> 2] = i4;
       HEAP32[i4 + 8 >> 2] = i1;
       HEAP32[i4 + 12 >> 2] = i3;
      }
      HEAP32[20490] = i6;
      HEAP32[20493] = i7;
     }
     i14 = i9 + 8 | 0;
     STACKTOP = i15;
     return i14 | 0;
    } else i12 = i10;
   }
  } else i12 = i10;
 } else if (i1 >>> 0 > 4294967231) i12 = -1; else {
  i1 = i1 + 11 | 0;
  i10 = i1 & -8;
  i9 = HEAP32[20489] | 0;
  if (!i9) i12 = i10; else {
   i3 = 0 - i10 | 0;
   i1 = i1 >>> 8;
   if (!i1) i7 = 0; else if (i10 >>> 0 > 16777215) i7 = 31; else {
    i12 = (i1 + 1048320 | 0) >>> 16 & 8;
    i14 = i1 << i12;
    i11 = (i14 + 520192 | 0) >>> 16 & 4;
    i14 = i14 << i11;
    i7 = (i14 + 245760 | 0) >>> 16 & 2;
    i7 = 14 - (i11 | i12 | i7) + (i14 << i7 >>> 15) | 0;
    i7 = i10 >>> (i7 + 7 | 0) & 1 | i7 << 1;
   }
   i2 = HEAP32[82256 + (i7 << 2) >> 2] | 0;
   L74 : do if (!i2) {
    i2 = 0;
    i1 = 0;
    i14 = 57;
   } else {
    i1 = 0;
    i6 = i2;
    i5 = i10 << ((i7 | 0) == 31 ? 0 : 25 - (i7 >>> 1) | 0);
    i2 = 0;
    while (1) {
     i4 = (HEAP32[i6 + 4 >> 2] & -8) - i10 | 0;
     if (i4 >>> 0 < i3 >>> 0) if (!i4) {
      i3 = 0;
      i2 = i6;
      i1 = i6;
      i14 = 61;
      break L74;
     } else {
      i1 = i6;
      i3 = i4;
     }
     i4 = HEAP32[i6 + 20 >> 2] | 0;
     i6 = HEAP32[i6 + 16 + (i5 >>> 31 << 2) >> 2] | 0;
     i2 = (i4 | 0) == 0 | (i4 | 0) == (i6 | 0) ? i2 : i4;
     i4 = (i6 | 0) == 0;
     if (i4) {
      i14 = 57;
      break;
     } else i5 = i5 << ((i4 ^ 1) & 1);
    }
   } while (0);
   if ((i14 | 0) == 57) {
    if ((i2 | 0) == 0 & (i1 | 0) == 0) {
     i1 = 2 << i7;
     i1 = i9 & (i1 | 0 - i1);
     if (!i1) {
      i12 = i10;
      break;
     }
     i12 = (i1 & 0 - i1) + -1 | 0;
     i7 = i12 >>> 12 & 16;
     i12 = i12 >>> i7;
     i6 = i12 >>> 5 & 8;
     i12 = i12 >>> i6;
     i8 = i12 >>> 2 & 4;
     i12 = i12 >>> i8;
     i11 = i12 >>> 1 & 2;
     i12 = i12 >>> i11;
     i2 = i12 >>> 1 & 1;
     i1 = 0;
     i2 = HEAP32[82256 + ((i6 | i7 | i8 | i11 | i2) + (i12 >>> i2) << 2) >> 2] | 0;
    }
    if (!i2) {
     i8 = i1;
     i6 = i3;
    } else i14 = 61;
   }
   if ((i14 | 0) == 61) while (1) {
    i14 = 0;
    i11 = (HEAP32[i2 + 4 >> 2] & -8) - i10 | 0;
    i12 = i11 >>> 0 < i3 >>> 0;
    i3 = i12 ? i11 : i3;
    i1 = i12 ? i2 : i1;
    i2 = HEAP32[i2 + 16 + (((HEAP32[i2 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0;
    if (!i2) {
     i8 = i1;
     i6 = i3;
     break;
    } else i14 = 61;
   }
   if (!i8) i12 = i10; else if (i6 >>> 0 < ((HEAP32[20490] | 0) - i10 | 0) >>> 0) {
    i7 = i8 + i10 | 0;
    if (i7 >>> 0 <= i8 >>> 0) {
     i14 = 0;
     STACKTOP = i15;
     return i14 | 0;
    }
    i5 = HEAP32[i8 + 24 >> 2] | 0;
    i1 = HEAP32[i8 + 12 >> 2] | 0;
    do if ((i1 | 0) == (i8 | 0)) {
     i2 = i8 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i8 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i1 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4 | 0) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     HEAP32[i2 >> 2] = 0;
    } else {
     i14 = HEAP32[i8 + 8 >> 2] | 0;
     HEAP32[i14 + 12 >> 2] = i1;
     HEAP32[i1 + 8 >> 2] = i14;
    } while (0);
    do if (!i5) i4 = i9; else {
     i2 = HEAP32[i8 + 28 >> 2] | 0;
     i3 = 82256 + (i2 << 2) | 0;
     if ((i8 | 0) == (HEAP32[i3 >> 2] | 0)) {
      HEAP32[i3 >> 2] = i1;
      if (!i1) {
       i4 = i9 & ~(1 << i2);
       HEAP32[20489] = i4;
       break;
      }
     } else {
      HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i8 | 0) & 1) << 2) >> 2] = i1;
      if (!i1) {
       i4 = i9;
       break;
      }
     }
     HEAP32[i1 + 24 >> 2] = i5;
     i2 = HEAP32[i8 + 16 >> 2] | 0;
     if (i2 | 0) {
      HEAP32[i1 + 16 >> 2] = i2;
      HEAP32[i2 + 24 >> 2] = i1;
     }
     i2 = HEAP32[i8 + 20 >> 2] | 0;
     if (!i2) i4 = i9; else {
      HEAP32[i1 + 20 >> 2] = i2;
      HEAP32[i2 + 24 >> 2] = i1;
      i4 = i9;
     }
    } while (0);
    do if (i6 >>> 0 < 16) {
     i14 = i6 + i10 | 0;
     HEAP32[i8 + 4 >> 2] = i14 | 3;
     i14 = i8 + i14 + 4 | 0;
     HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
    } else {
     HEAP32[i8 + 4 >> 2] = i10 | 3;
     HEAP32[i7 + 4 >> 2] = i6 | 1;
     HEAP32[i7 + i6 >> 2] = i6;
     i1 = i6 >>> 3;
     if (i6 >>> 0 < 256) {
      i3 = 81992 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[20488] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[20488] = i2 | i1;
       i1 = i3;
       i2 = i3 + 8 | 0;
      } else {
       i2 = i3 + 8 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i2 >> 2] = i7;
      HEAP32[i1 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i1;
      HEAP32[i7 + 12 >> 2] = i3;
      break;
     }
     i1 = i6 >>> 8;
     if (!i1) i1 = 0; else if (i6 >>> 0 > 16777215) i1 = 31; else {
      i13 = (i1 + 1048320 | 0) >>> 16 & 8;
      i14 = i1 << i13;
      i12 = (i14 + 520192 | 0) >>> 16 & 4;
      i14 = i14 << i12;
      i1 = (i14 + 245760 | 0) >>> 16 & 2;
      i1 = 14 - (i12 | i13 | i1) + (i14 << i1 >>> 15) | 0;
      i1 = i6 >>> (i1 + 7 | 0) & 1 | i1 << 1;
     }
     i3 = 82256 + (i1 << 2) | 0;
     HEAP32[i7 + 28 >> 2] = i1;
     i2 = i7 + 16 | 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
     i2 = 1 << i1;
     if (!(i4 & i2)) {
      HEAP32[20489] = i4 | i2;
      HEAP32[i3 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i3;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break;
     }
     i2 = i6 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
     i3 = HEAP32[i3 >> 2] | 0;
     while (1) {
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i14 = 97;
       break;
      }
      i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      if (!i1) {
       i14 = 96;
       break;
      } else {
       i2 = i2 << 1;
       i3 = i1;
      }
     }
     if ((i14 | 0) == 96) {
      HEAP32[i4 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i3;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break;
     } else if ((i14 | 0) == 97) {
      i13 = i3 + 8 | 0;
      i14 = HEAP32[i13 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i7;
      HEAP32[i13 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i14;
      HEAP32[i7 + 12 >> 2] = i3;
      HEAP32[i7 + 24 >> 2] = 0;
      break;
     }
    } while (0);
    i14 = i8 + 8 | 0;
    STACKTOP = i15;
    return i14 | 0;
   } else i12 = i10;
  }
 } while (0);
 i3 = HEAP32[20490] | 0;
 if (i3 >>> 0 >= i12 >>> 0) {
  i1 = i3 - i12 | 0;
  i2 = HEAP32[20493] | 0;
  if (i1 >>> 0 > 15) {
   i14 = i2 + i12 | 0;
   HEAP32[20493] = i14;
   HEAP32[20490] = i1;
   HEAP32[i14 + 4 >> 2] = i1 | 1;
   HEAP32[i2 + i3 >> 2] = i1;
   HEAP32[i2 + 4 >> 2] = i12 | 3;
  } else {
   HEAP32[20490] = 0;
   HEAP32[20493] = 0;
   HEAP32[i2 + 4 >> 2] = i3 | 3;
   i14 = i2 + i3 + 4 | 0;
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  }
  i14 = i2 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i7 = HEAP32[20491] | 0;
 if (i7 >>> 0 > i12 >>> 0) {
  i11 = i7 - i12 | 0;
  HEAP32[20491] = i11;
  i14 = HEAP32[20494] | 0;
  i13 = i14 + i12 | 0;
  HEAP32[20494] = i13;
  HEAP32[i13 + 4 >> 2] = i11 | 1;
  HEAP32[i14 + 4 >> 2] = i12 | 3;
  i14 = i14 + 8 | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 if (!(HEAP32[20606] | 0)) {
  HEAP32[20608] = 4096;
  HEAP32[20607] = 4096;
  HEAP32[20609] = -1;
  HEAP32[20610] = -1;
  HEAP32[20611] = 0;
  HEAP32[20599] = 0;
  HEAP32[20606] = i13 & -16 ^ 1431655768;
  i1 = 4096;
 } else i1 = HEAP32[20608] | 0;
 i8 = i12 + 48 | 0;
 i9 = i12 + 47 | 0;
 i6 = i1 + i9 | 0;
 i4 = 0 - i1 | 0;
 i10 = i6 & i4;
 if (i10 >>> 0 <= i12 >>> 0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[20598] | 0;
 if (i1 | 0) {
  i11 = HEAP32[20596] | 0;
  i13 = i11 + i10 | 0;
  if (i13 >>> 0 <= i11 >>> 0 | i13 >>> 0 > i1 >>> 0) {
   i14 = 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 L167 : do if (!(HEAP32[20599] & 4)) {
  i2 = HEAP32[20494] | 0;
  L169 : do if (!i2) i14 = 118; else {
   i3 = 82400;
   while (1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (i1 >>> 0 <= i2 >>> 0) {
     i5 = i3 + 4 | 0;
     if ((i1 + (HEAP32[i5 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) break;
    }
    i1 = HEAP32[i3 + 8 >> 2] | 0;
    if (!i1) {
     i14 = 118;
     break L169;
    } else i3 = i1;
   }
   i1 = i6 - i7 & i4;
   if (i1 >>> 0 < 2147483647) {
    i4 = _sbrk(i1 | 0) | 0;
    if ((i4 | 0) == ((HEAP32[i3 >> 2] | 0) + (HEAP32[i5 >> 2] | 0) | 0)) {
     if ((i4 | 0) != (-1 | 0)) {
      i14 = 135;
      break L167;
     }
    } else i14 = 126;
   } else i1 = 0;
  } while (0);
  do if ((i14 | 0) == 118) {
   i4 = _sbrk(0) | 0;
   if ((i4 | 0) == (-1 | 0)) i1 = 0; else {
    i1 = i4;
    i2 = HEAP32[20607] | 0;
    i3 = i2 + -1 | 0;
    i1 = ((i3 & i1 | 0) == 0 ? 0 : (i3 + i1 & 0 - i2) - i1 | 0) + i10 | 0;
    i2 = HEAP32[20596] | 0;
    i3 = i1 + i2 | 0;
    if (i1 >>> 0 > i12 >>> 0 & i1 >>> 0 < 2147483647) {
     i5 = HEAP32[20598] | 0;
     if (i5 | 0) if (i3 >>> 0 <= i2 >>> 0 | i3 >>> 0 > i5 >>> 0) {
      i1 = 0;
      break;
     }
     i2 = _sbrk(i1 | 0) | 0;
     if ((i2 | 0) == (i4 | 0)) {
      i14 = 135;
      break L167;
     } else {
      i4 = i2;
      i14 = 126;
     }
    } else i1 = 0;
   }
  } while (0);
  do if ((i14 | 0) == 126) {
   i3 = 0 - i1 | 0;
   if (!(i8 >>> 0 > i1 >>> 0 & (i1 >>> 0 < 2147483647 & (i4 | 0) != (-1 | 0)))) if ((i4 | 0) == (-1 | 0)) {
    i1 = 0;
    break;
   } else {
    i14 = 135;
    break L167;
   }
   i2 = HEAP32[20608] | 0;
   i2 = i9 - i1 + i2 & 0 - i2;
   if (i2 >>> 0 >= 2147483647) {
    i14 = 135;
    break L167;
   }
   if ((_sbrk(i2 | 0) | 0) == (-1 | 0)) {
    _sbrk(i3 | 0) | 0;
    i1 = 0;
    break;
   } else {
    i1 = i2 + i1 | 0;
    i14 = 135;
    break L167;
   }
  } while (0);
  HEAP32[20599] = HEAP32[20599] | 4;
  i14 = 133;
 } else {
  i1 = 0;
  i14 = 133;
 } while (0);
 if ((i14 | 0) == 133) if (i10 >>> 0 < 2147483647) {
  i4 = _sbrk(i10 | 0) | 0;
  i13 = _sbrk(0) | 0;
  i2 = i13 - i4 | 0;
  i3 = i2 >>> 0 > (i12 + 40 | 0) >>> 0;
  if (!((i4 | 0) == (-1 | 0) | i3 ^ 1 | i4 >>> 0 < i13 >>> 0 & ((i4 | 0) != (-1 | 0) & (i13 | 0) != (-1 | 0)) ^ 1)) {
   i1 = i3 ? i2 : i1;
   i14 = 135;
  }
 }
 if ((i14 | 0) == 135) {
  i2 = (HEAP32[20596] | 0) + i1 | 0;
  HEAP32[20596] = i2;
  if (i2 >>> 0 > (HEAP32[20597] | 0) >>> 0) HEAP32[20597] = i2;
  i9 = HEAP32[20494] | 0;
  do if (!i9) {
   i14 = HEAP32[20492] | 0;
   if ((i14 | 0) == 0 | i4 >>> 0 < i14 >>> 0) HEAP32[20492] = i4;
   HEAP32[20600] = i4;
   HEAP32[20601] = i1;
   HEAP32[20603] = 0;
   HEAP32[20497] = HEAP32[20606];
   HEAP32[20496] = -1;
   HEAP32[20501] = 81992;
   HEAP32[20500] = 81992;
   HEAP32[20503] = 82e3;
   HEAP32[20502] = 82e3;
   HEAP32[20505] = 82008;
   HEAP32[20504] = 82008;
   HEAP32[20507] = 82016;
   HEAP32[20506] = 82016;
   HEAP32[20509] = 82024;
   HEAP32[20508] = 82024;
   HEAP32[20511] = 82032;
   HEAP32[20510] = 82032;
   HEAP32[20513] = 82040;
   HEAP32[20512] = 82040;
   HEAP32[20515] = 82048;
   HEAP32[20514] = 82048;
   HEAP32[20517] = 82056;
   HEAP32[20516] = 82056;
   HEAP32[20519] = 82064;
   HEAP32[20518] = 82064;
   HEAP32[20521] = 82072;
   HEAP32[20520] = 82072;
   HEAP32[20523] = 82080;
   HEAP32[20522] = 82080;
   HEAP32[20525] = 82088;
   HEAP32[20524] = 82088;
   HEAP32[20527] = 82096;
   HEAP32[20526] = 82096;
   HEAP32[20529] = 82104;
   HEAP32[20528] = 82104;
   HEAP32[20531] = 82112;
   HEAP32[20530] = 82112;
   HEAP32[20533] = 82120;
   HEAP32[20532] = 82120;
   HEAP32[20535] = 82128;
   HEAP32[20534] = 82128;
   HEAP32[20537] = 82136;
   HEAP32[20536] = 82136;
   HEAP32[20539] = 82144;
   HEAP32[20538] = 82144;
   HEAP32[20541] = 82152;
   HEAP32[20540] = 82152;
   HEAP32[20543] = 82160;
   HEAP32[20542] = 82160;
   HEAP32[20545] = 82168;
   HEAP32[20544] = 82168;
   HEAP32[20547] = 82176;
   HEAP32[20546] = 82176;
   HEAP32[20549] = 82184;
   HEAP32[20548] = 82184;
   HEAP32[20551] = 82192;
   HEAP32[20550] = 82192;
   HEAP32[20553] = 82200;
   HEAP32[20552] = 82200;
   HEAP32[20555] = 82208;
   HEAP32[20554] = 82208;
   HEAP32[20557] = 82216;
   HEAP32[20556] = 82216;
   HEAP32[20559] = 82224;
   HEAP32[20558] = 82224;
   HEAP32[20561] = 82232;
   HEAP32[20560] = 82232;
   HEAP32[20563] = 82240;
   HEAP32[20562] = 82240;
   i14 = i1 + -40 | 0;
   i11 = i4 + 8 | 0;
   i11 = (i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7;
   i13 = i4 + i11 | 0;
   i11 = i14 - i11 | 0;
   HEAP32[20494] = i13;
   HEAP32[20491] = i11;
   HEAP32[i13 + 4 >> 2] = i11 | 1;
   HEAP32[i4 + i14 + 4 >> 2] = 40;
   HEAP32[20495] = HEAP32[20610];
  } else {
   i2 = 82400;
   do {
    i3 = HEAP32[i2 >> 2] | 0;
    i5 = i2 + 4 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    if ((i4 | 0) == (i3 + i6 | 0)) {
     i14 = 143;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i14 | 0) == 143) if (!(HEAP32[i2 + 12 >> 2] & 8)) if (i4 >>> 0 > i9 >>> 0 & i3 >>> 0 <= i9 >>> 0) {
    HEAP32[i5 >> 2] = i6 + i1;
    i14 = (HEAP32[20491] | 0) + i1 | 0;
    i11 = i9 + 8 | 0;
    i11 = (i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7;
    i13 = i9 + i11 | 0;
    i11 = i14 - i11 | 0;
    HEAP32[20494] = i13;
    HEAP32[20491] = i11;
    HEAP32[i13 + 4 >> 2] = i11 | 1;
    HEAP32[i9 + i14 + 4 >> 2] = 40;
    HEAP32[20495] = HEAP32[20610];
    break;
   }
   if (i4 >>> 0 < (HEAP32[20492] | 0) >>> 0) HEAP32[20492] = i4;
   i3 = i4 + i1 | 0;
   i2 = 82400;
   while (1) {
    if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) {
     i14 = 151;
     break;
    }
    i2 = HEAP32[i2 + 8 >> 2] | 0;
    if (!i2) {
     i3 = 82400;
     break;
    }
   }
   if ((i14 | 0) == 151) if (!(HEAP32[i2 + 12 >> 2] & 8)) {
    HEAP32[i2 >> 2] = i4;
    i11 = i2 + 4 | 0;
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + i1;
    i11 = i4 + 8 | 0;
    i11 = i4 + ((i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7) | 0;
    i1 = i3 + 8 | 0;
    i1 = i3 + ((i1 & 7 | 0) == 0 ? 0 : 0 - i1 & 7) | 0;
    i10 = i11 + i12 | 0;
    i8 = i1 - i11 - i12 | 0;
    HEAP32[i11 + 4 >> 2] = i12 | 3;
    do if ((i9 | 0) == (i1 | 0)) {
     i14 = (HEAP32[20491] | 0) + i8 | 0;
     HEAP32[20491] = i14;
     HEAP32[20494] = i10;
     HEAP32[i10 + 4 >> 2] = i14 | 1;
    } else {
     if ((HEAP32[20493] | 0) == (i1 | 0)) {
      i14 = (HEAP32[20490] | 0) + i8 | 0;
      HEAP32[20490] = i14;
      HEAP32[20493] = i10;
      HEAP32[i10 + 4 >> 2] = i14 | 1;
      HEAP32[i10 + i14 >> 2] = i14;
      break;
     }
     i2 = HEAP32[i1 + 4 >> 2] | 0;
     if ((i2 & 3 | 0) == 1) {
      i7 = i2 & -8;
      i4 = i2 >>> 3;
      L234 : do if (i2 >>> 0 < 256) {
       i2 = HEAP32[i1 + 8 >> 2] | 0;
       i3 = HEAP32[i1 + 12 >> 2] | 0;
       if ((i3 | 0) == (i2 | 0)) {
        HEAP32[20488] = HEAP32[20488] & ~(1 << i4);
        break;
       } else {
        HEAP32[i2 + 12 >> 2] = i3;
        HEAP32[i3 + 8 >> 2] = i2;
        break;
       }
      } else {
       i6 = HEAP32[i1 + 24 >> 2] | 0;
       i2 = HEAP32[i1 + 12 >> 2] | 0;
       do if ((i2 | 0) == (i1 | 0)) {
        i4 = i1 + 16 | 0;
        i3 = i4 + 4 | 0;
        i2 = HEAP32[i3 >> 2] | 0;
        if (!i2) {
         i2 = HEAP32[i4 >> 2] | 0;
         if (!i2) {
          i2 = 0;
          break;
         } else i3 = i4;
        }
        while (1) {
         i4 = i2 + 20 | 0;
         i5 = HEAP32[i4 >> 2] | 0;
         if (i5 | 0) {
          i2 = i5;
          i3 = i4;
          continue;
         }
         i4 = i2 + 16 | 0;
         i5 = HEAP32[i4 >> 2] | 0;
         if (!i5) break; else {
          i2 = i5;
          i3 = i4;
         }
        }
        HEAP32[i3 >> 2] = 0;
       } else {
        i14 = HEAP32[i1 + 8 >> 2] | 0;
        HEAP32[i14 + 12 >> 2] = i2;
        HEAP32[i2 + 8 >> 2] = i14;
       } while (0);
       if (!i6) break;
       i3 = HEAP32[i1 + 28 >> 2] | 0;
       i4 = 82256 + (i3 << 2) | 0;
       do if ((HEAP32[i4 >> 2] | 0) == (i1 | 0)) {
        HEAP32[i4 >> 2] = i2;
        if (i2 | 0) break;
        HEAP32[20489] = HEAP32[20489] & ~(1 << i3);
        break L234;
       } else {
        HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i1 | 0) & 1) << 2) >> 2] = i2;
        if (!i2) break L234;
       } while (0);
       HEAP32[i2 + 24 >> 2] = i6;
       i3 = i1 + 16 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (i4 | 0) {
        HEAP32[i2 + 16 >> 2] = i4;
        HEAP32[i4 + 24 >> 2] = i2;
       }
       i3 = HEAP32[i3 + 4 >> 2] | 0;
       if (!i3) break;
       HEAP32[i2 + 20 >> 2] = i3;
       HEAP32[i3 + 24 >> 2] = i2;
      } while (0);
      i1 = i1 + i7 | 0;
      i5 = i7 + i8 | 0;
     } else i5 = i8;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i10 + 4 >> 2] = i5 | 1;
     HEAP32[i10 + i5 >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i3 = 81992 + (i1 << 1 << 2) | 0;
      i2 = HEAP32[20488] | 0;
      i1 = 1 << i1;
      if (!(i2 & i1)) {
       HEAP32[20488] = i2 | i1;
       i1 = i3;
       i2 = i3 + 8 | 0;
      } else {
       i2 = i3 + 8 | 0;
       i1 = HEAP32[i2 >> 2] | 0;
      }
      HEAP32[i2 >> 2] = i10;
      HEAP32[i1 + 12 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i1;
      HEAP32[i10 + 12 >> 2] = i3;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i1 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i1 = 31;
       break;
      }
      i13 = (i1 + 1048320 | 0) >>> 16 & 8;
      i14 = i1 << i13;
      i12 = (i14 + 520192 | 0) >>> 16 & 4;
      i14 = i14 << i12;
      i1 = (i14 + 245760 | 0) >>> 16 & 2;
      i1 = 14 - (i12 | i13 | i1) + (i14 << i1 >>> 15) | 0;
      i1 = i5 >>> (i1 + 7 | 0) & 1 | i1 << 1;
     } while (0);
     i4 = 82256 + (i1 << 2) | 0;
     HEAP32[i10 + 28 >> 2] = i1;
     i2 = i10 + 16 | 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 >> 2] = 0;
     i2 = HEAP32[20489] | 0;
     i3 = 1 << i1;
     if (!(i2 & i3)) {
      HEAP32[20489] = i2 | i3;
      HEAP32[i4 >> 2] = i10;
      HEAP32[i10 + 24 >> 2] = i4;
      HEAP32[i10 + 12 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i10;
      break;
     }
     i2 = i5 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
     i3 = HEAP32[i4 >> 2] | 0;
     while (1) {
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
       i14 = 192;
       break;
      }
      i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
      i1 = HEAP32[i4 >> 2] | 0;
      if (!i1) {
       i14 = 191;
       break;
      } else {
       i2 = i2 << 1;
       i3 = i1;
      }
     }
     if ((i14 | 0) == 191) {
      HEAP32[i4 >> 2] = i10;
      HEAP32[i10 + 24 >> 2] = i3;
      HEAP32[i10 + 12 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i10;
      break;
     } else if ((i14 | 0) == 192) {
      i13 = i3 + 8 | 0;
      i14 = HEAP32[i13 >> 2] | 0;
      HEAP32[i14 + 12 >> 2] = i10;
      HEAP32[i13 >> 2] = i10;
      HEAP32[i10 + 8 >> 2] = i14;
      HEAP32[i10 + 12 >> 2] = i3;
      HEAP32[i10 + 24 >> 2] = 0;
      break;
     }
    } while (0);
    i14 = i11 + 8 | 0;
    STACKTOP = i15;
    return i14 | 0;
   } else i3 = 82400;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i9 >>> 0) {
     i2 = i2 + (HEAP32[i3 + 4 >> 2] | 0) | 0;
     if (i2 >>> 0 > i9 >>> 0) break;
    }
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i6 = i2 + -47 | 0;
   i3 = i6 + 8 | 0;
   i3 = i6 + ((i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7) | 0;
   i6 = i9 + 16 | 0;
   i3 = i3 >>> 0 < i6 >>> 0 ? i9 : i3;
   i14 = i3 + 8 | 0;
   i5 = i1 + -40 | 0;
   i11 = i4 + 8 | 0;
   i11 = (i11 & 7 | 0) == 0 ? 0 : 0 - i11 & 7;
   i13 = i4 + i11 | 0;
   i11 = i5 - i11 | 0;
   HEAP32[20494] = i13;
   HEAP32[20491] = i11;
   HEAP32[i13 + 4 >> 2] = i11 | 1;
   HEAP32[i4 + i5 + 4 >> 2] = 40;
   HEAP32[20495] = HEAP32[20610];
   i5 = i3 + 4 | 0;
   HEAP32[i5 >> 2] = 27;
   HEAP32[i14 >> 2] = HEAP32[20600];
   HEAP32[i14 + 4 >> 2] = HEAP32[20601];
   HEAP32[i14 + 8 >> 2] = HEAP32[20602];
   HEAP32[i14 + 12 >> 2] = HEAP32[20603];
   HEAP32[20600] = i4;
   HEAP32[20601] = i1;
   HEAP32[20603] = 0;
   HEAP32[20602] = i14;
   i1 = i3 + 24 | 0;
   do {
    i14 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i14 + 8 | 0) >>> 0 < i2 >>> 0);
   if ((i3 | 0) != (i9 | 0)) {
    i7 = i3 - i9 | 0;
    HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -2;
    HEAP32[i9 + 4 >> 2] = i7 | 1;
    HEAP32[i3 >> 2] = i7;
    i1 = i7 >>> 3;
    if (i7 >>> 0 < 256) {
     i3 = 81992 + (i1 << 1 << 2) | 0;
     i2 = HEAP32[20488] | 0;
     i1 = 1 << i1;
     if (!(i2 & i1)) {
      HEAP32[20488] = i2 | i1;
      i1 = i3;
      i2 = i3 + 8 | 0;
     } else {
      i2 = i3 + 8 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i9;
     HEAP32[i1 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i1;
     HEAP32[i9 + 12 >> 2] = i3;
     break;
    }
    i1 = i7 >>> 8;
    if (!i1) i3 = 0; else if (i7 >>> 0 > 16777215) i3 = 31; else {
     i13 = (i1 + 1048320 | 0) >>> 16 & 8;
     i14 = i1 << i13;
     i11 = (i14 + 520192 | 0) >>> 16 & 4;
     i14 = i14 << i11;
     i3 = (i14 + 245760 | 0) >>> 16 & 2;
     i3 = 14 - (i11 | i13 | i3) + (i14 << i3 >>> 15) | 0;
     i3 = i7 >>> (i3 + 7 | 0) & 1 | i3 << 1;
    }
    i4 = 82256 + (i3 << 2) | 0;
    HEAP32[i9 + 28 >> 2] = i3;
    HEAP32[i9 + 20 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = HEAP32[20489] | 0;
    i2 = 1 << i3;
    if (!(i1 & i2)) {
     HEAP32[20489] = i1 | i2;
     HEAP32[i4 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i4;
     HEAP32[i9 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i9;
     break;
    }
    i2 = i7 << ((i3 | 0) == 31 ? 0 : 25 - (i3 >>> 1) | 0);
    i3 = HEAP32[i4 >> 2] | 0;
    while (1) {
     if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i7 | 0)) {
      i14 = 213;
      break;
     }
     i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     if (!i1) {
      i14 = 212;
      break;
     } else {
      i2 = i2 << 1;
      i3 = i1;
     }
    }
    if ((i14 | 0) == 212) {
     HEAP32[i4 >> 2] = i9;
     HEAP32[i9 + 24 >> 2] = i3;
     HEAP32[i9 + 12 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i9;
     break;
    } else if ((i14 | 0) == 213) {
     i13 = i3 + 8 | 0;
     i14 = HEAP32[i13 >> 2] | 0;
     HEAP32[i14 + 12 >> 2] = i9;
     HEAP32[i13 >> 2] = i9;
     HEAP32[i9 + 8 >> 2] = i14;
     HEAP32[i9 + 12 >> 2] = i3;
     HEAP32[i9 + 24 >> 2] = 0;
     break;
    }
   }
  } while (0);
  i1 = HEAP32[20491] | 0;
  if (i1 >>> 0 > i12 >>> 0) {
   i11 = i1 - i12 | 0;
   HEAP32[20491] = i11;
   i14 = HEAP32[20494] | 0;
   i13 = i14 + i12 | 0;
   HEAP32[20494] = i13;
   HEAP32[i13 + 4 >> 2] = i11 | 1;
   HEAP32[i14 + 4 >> 2] = i12 | 3;
   i14 = i14 + 8 | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i14 = 0;
 STACKTOP = i15;
 return i14 | 0;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i38, i39, i2, i3, i5, i42, i33, i4, i34, i35, i1) {
 i38 = i38 | 0;
 i39 = i39 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i42 = i42 | 0;
 i33 = i33 | 0;
 i4 = i4 | 0;
 i34 = i34 | 0;
 i35 = i35 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i36 = 0, i37 = 0, i40 = 0, i41 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i37 = 0;
 i50 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i27 = i50 + 88 | 0;
 i36 = i50 + 96 | 0;
 i49 = i50 + 80 | 0;
 i40 = i50 + 72 | 0;
 i28 = i50 + 68 | 0;
 i29 = i50 + 500 | 0;
 i30 = i50 + 497 | 0;
 i31 = i50 + 496 | 0;
 i43 = i50 + 56 | 0;
 i44 = i50 + 44 | 0;
 i45 = i50 + 32 | 0;
 i46 = i50 + 20 | 0;
 i47 = i50 + 8 | 0;
 i32 = i50 + 4 | 0;
 i41 = i50;
 HEAP32[i27 >> 2] = i1;
 HEAP32[i49 >> 2] = i36;
 i48 = i49 + 4 | 0;
 HEAP32[i48 >> 2] = 372;
 HEAP32[i40 >> 2] = i36;
 HEAP32[i28 >> 2] = i36 + 400;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i43 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i44 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i45 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i46 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i47 >> 2] = 0;
 HEAP32[i47 + 4 >> 2] = 0;
 HEAP32[i47 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i47 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i2, i3, i29, i30, i31, i43, i44, i45, i46, i32);
 HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
 i22 = i4 + 8 | 0;
 i23 = i45 + 11 | 0;
 i24 = i45 + 4 | 0;
 i25 = i46 + 11 | 0;
 i26 = i46 + 4 | 0;
 i14 = (i5 & 512 | 0) != 0;
 i15 = i44 + 11 | 0;
 i16 = i44 + 4 | 0;
 i17 = i47 + 11 | 0;
 i18 = i47 + 4 | 0;
 i19 = i29 + 3 | 0;
 i20 = i43 + 11 | 0;
 i21 = i43 + 4 | 0;
 i36 = 0;
 i13 = 0;
 L21 : while (1) {
  if (i13 >>> 0 >= 4) {
   i37 = 234;
   break;
  }
  i1 = HEAP32[i38 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i38 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i38 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i39 >> 2] | 0;
  do if (!i2) i37 = 31; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i39 >> 2] = 0;
    i37 = 31;
    break;
   } else if (i3) {
    i12 = i2;
    break;
   } else {
    i37 = 234;
    break L21;
   }
  } while (0);
  if ((i37 | 0) == 31) {
   i37 = 0;
   if (i3) {
    i37 = 234;
    break;
   } else i12 = 0;
  }
  L46 : do switch (HEAP8[i29 + i13 >> 0] | 0) {
  case 1:
   {
    if ((i13 | 0) == 3) i1 = i36; else {
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if ((i1 & 255) << 24 >> 24 <= -1) {
      i37 = 44;
      break L21;
     }
     if (!(HEAP16[(HEAP32[i22 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
      i37 = 44;
      break L21;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 1;
      i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     }
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i47, i1 & 255);
     i1 = i12;
     i4 = i12;
     i37 = 46;
    }
    break;
   }
  case 0:
   {
    if ((i13 | 0) == 3) i1 = i36; else {
     i1 = i12;
     i4 = i12;
     i37 = 46;
    }
    break;
   }
  case 3:
   {
    i1 = HEAP8[i23 >> 0] | 0;
    i1 = i1 << 24 >> 24 < 0 ? HEAP32[i24 >> 2] | 0 : i1 & 255;
    i4 = HEAP8[i25 >> 0] | 0;
    i4 = i4 << 24 >> 24 < 0 ? HEAP32[i26 >> 2] | 0 : i4 & 255;
    if ((i1 | 0) == (0 - i4 | 0)) i1 = i36; else {
     i5 = (i1 | 0) == 0;
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     i3 = (i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0);
     if (i5 | (i4 | 0) == 0) {
      if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      i1 = i1 & 255;
      if (i5) {
       if ((HEAP8[((HEAP8[i25 >> 0] | 0) < 0 ? HEAP32[i46 >> 2] | 0 : i46) >> 0] | 0) != i1 << 24 >> 24) {
        i1 = i36;
        break L46;
       }
       i1 = HEAP32[i38 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
        HEAP32[i2 >> 2] = i3 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
       }
       HEAP8[i33 >> 0] = 1;
       i1 = HEAP8[i25 >> 0] | 0;
       i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i26 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i46 : i36;
       break L46;
      }
      if ((HEAP8[((HEAP8[i23 >> 0] | 0) < 0 ? HEAP32[i45 >> 2] | 0 : i45) >> 0] | 0) != i1 << 24 >> 24) {
       HEAP8[i33 >> 0] = 1;
       i1 = i36;
       break L46;
      }
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
       HEAP32[i2 >> 2] = i3 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      }
      i1 = HEAP8[i23 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i24 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i45 : i36;
      break L46;
     }
     if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = (i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0);
     if ((HEAP8[((HEAP8[i23 >> 0] | 0) < 0 ? HEAP32[i45 >> 2] | 0 : i45) >> 0] | 0) == (i1 & 255) << 24 >> 24) {
      if (i5) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0; else {
       HEAP32[i3 >> 2] = i4 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
      }
      i1 = HEAP8[i23 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i24 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i45 : i36;
      break L46;
     }
     if (i5) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     if ((HEAP8[((HEAP8[i25 >> 0] | 0) < 0 ? HEAP32[i46 >> 2] | 0 : i46) >> 0] | 0) != (i1 & 255) << 24 >> 24) {
      i37 = 103;
      break L21;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     }
     HEAP8[i33 >> 0] = 1;
     i1 = HEAP8[i25 >> 0] | 0;
     i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i26 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i46 : i36;
    }
    break;
   }
  case 2:
   {
    if (!(i13 >>> 0 < 2 | (i36 | 0) != 0)) if (!(i14 | (i13 | 0) == 2 & (HEAP8[i19 >> 0] | 0) != 0)) {
     i1 = 0;
     break L46;
    }
    i2 = HEAP8[i15 >> 0] | 0;
    i1 = i2 << 24 >> 24 < 0;
    i11 = HEAP32[i44 >> 2] | 0;
    i8 = i1 ? i11 : i44;
    i10 = i8;
    L108 : do if (!i13) {
     i7 = i12;
     i3 = i10;
     i1 = i11;
     i4 = i12;
    } else if ((HEAPU8[i29 + (i13 + -1) >> 0] | 0) < 2) {
     i1 = i8 + (i1 ? HEAP32[i16 >> 2] | 0 : i2 & 255) | 0;
     i9 = i10;
     while (1) {
      i3 = i9;
      if ((i1 | 0) == (i3 | 0)) break;
      i4 = HEAP8[i3 >> 0] | 0;
      if (i4 << 24 >> 24 <= -1) break;
      if (!(HEAP16[(HEAP32[i22 >> 2] | 0) + (i4 << 24 >> 24 << 1) >> 1] & 8192)) break;
      i9 = i3 + 1 | 0;
     }
     i1 = i9 - i10 | 0;
     i6 = HEAP8[i17 >> 0] | 0;
     i4 = i6 << 24 >> 24 < 0;
     i5 = HEAP32[i18 >> 2] | 0;
     i6 = i6 & 255;
     if (i1 >>> 0 > (i4 ? i5 : i6) >>> 0) {
      i7 = i12;
      i3 = i10;
      i1 = i11;
      i4 = i12;
     } else {
      i51 = HEAP32[i47 >> 2] | 0;
      i7 = (i4 ? i51 : i47) + (i4 ? i5 : i6) | 0;
      i3 = i8;
      i1 = (i4 ? i51 + i5 | 0 : i47 + i6 | 0) + (0 - i1) | 0;
      while (1) {
       if ((i1 | 0) == (i7 | 0)) {
        i7 = i12;
        i3 = i9;
        i1 = i11;
        i4 = i12;
        break L108;
       }
       if ((HEAP8[i1 >> 0] | 0) != (HEAP8[i3 >> 0] | 0)) {
        i7 = i12;
        i3 = i10;
        i1 = i11;
        i4 = i12;
        break L108;
       }
       i3 = i3 + 1 | 0;
       i1 = i1 + 1 | 0;
      }
     }
    } else {
     i7 = i12;
     i3 = i10;
     i1 = i11;
     i4 = i12;
    } while (0);
    L122 : while (1) {
     i6 = i2 << 24 >> 24 < 0;
     i1 = (i6 ? i1 : i44) + (i6 ? HEAP32[i16 >> 2] | 0 : i2 & 255) | 0;
     i6 = i3;
     if ((i1 | 0) == (i6 | 0)) break;
     i1 = HEAP32[i38 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i38 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i38 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) {
      i1 = i7;
      i37 = 132;
     } else {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i39 >> 2] = 0;
       i1 = 0;
       i37 = 132;
       break;
      } else if (i2 ^ (i7 | 0) == 0) {
       i1 = i7;
       i5 = i7;
       break;
      } else {
       i1 = i6;
       break L122;
      }
     } while (0);
     if ((i37 | 0) == 132) {
      i37 = 0;
      if (i2) {
       i1 = i6;
       break;
      } else i5 = 0;
     }
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     if ((HEAP8[i6 >> 0] | 0) != (i2 & 255) << 24 >> 24) {
      i1 = i6;
      break;
     }
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0; else {
      HEAP32[i3 >> 2] = i4 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     }
     i7 = i1;
     i3 = i6 + 1 | 0;
     i2 = HEAP8[i15 >> 0] | 0;
     i1 = HEAP32[i44 >> 2] | 0;
     i4 = i5;
    }
    if (i14) {
     i51 = HEAP8[i15 >> 0] | 0;
     i12 = i51 << 24 >> 24 < 0;
     if (((i12 ? HEAP32[i44 >> 2] | 0 : i44) + (i12 ? HEAP32[i16 >> 2] | 0 : i51 & 255) | 0) == (i1 | 0)) i1 = i36; else {
      i37 = 144;
      break L21;
     }
    } else i1 = i36;
    break;
   }
  case 4:
   {
    i7 = 0;
    i1 = i12;
    i4 = i12;
    L158 : while (1) {
     i2 = HEAP32[i38 >> 2] | 0;
     do if (!i2) i3 = 1; else {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i38 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i38 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i37 = 158; else {
      i2 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i39 >> 2] = 0;
       i1 = 0;
       i37 = 158;
       break;
      } else if (i3 ^ (i1 | 0) == 0) {
       i5 = i1;
       i6 = i1;
       break;
      } else {
       i4 = i1;
       break L158;
      }
     } while (0);
     if ((i37 | 0) == 158) {
      i37 = 0;
      if (i3) {
       i4 = i1;
       break;
      } else {
       i5 = i1;
       i6 = 0;
      }
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     i2 = i1 & 255;
     if (i2 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[i22 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 2048)) i37 = 168; else {
      i1 = HEAP32[i35 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i27 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i27);
       i1 = HEAP32[i35 >> 2] | 0;
      }
      HEAP32[i35 >> 2] = i1 + 1;
      HEAP8[i1 >> 0] = i2;
      i1 = i7 + 1 | 0;
     } else i37 = 168;
     if ((i37 | 0) == 168) {
      i37 = 0;
      i51 = HEAP8[i20 >> 0] | 0;
      if (!((HEAP8[i31 >> 0] | 0) == i2 << 24 >> 24 & (i7 | 0 ? ((i51 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i51 & 255) | 0) != 0 : 0))) {
       i4 = i5;
       break;
      }
      i1 = HEAP32[i40 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i28 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i49, i40, i28);
       i1 = HEAP32[i40 >> 2] | 0;
      }
      HEAP32[i40 >> 2] = i1 + 4;
      HEAP32[i1 >> 2] = i7;
      i1 = 0;
     }
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
      i7 = i1;
      i1 = i5;
      i4 = i6;
      continue;
     } else {
      HEAP32[i3 >> 2] = i4 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
      i7 = i1;
      i1 = i5;
      i4 = i6;
      continue;
     }
    }
    i1 = HEAP32[i40 >> 2] | 0;
    if (i7 | 0 ? (HEAP32[i49 >> 2] | 0) != (i1 | 0) : 0) {
     if ((i1 | 0) == (HEAP32[i28 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i49, i40, i28);
      i1 = HEAP32[i40 >> 2] | 0;
     }
     HEAP32[i40 >> 2] = i1 + 4;
     HEAP32[i1 >> 2] = i7;
    }
    L209 : do if ((HEAP32[i32 >> 2] | 0) > 0) {
     i1 = HEAP32[i38 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i38 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i38 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i37 = 193; else {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i39 >> 2] = 0;
       i37 = 193;
       break;
      } else if (i2) break; else {
       i37 = 232;
       break L21;
      }
     } while (0);
     if ((i37 | 0) == 193) {
      i37 = 0;
      if (i2) {
       i37 = 232;
       break L21;
      } else i4 = 0;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if ((HEAP8[i30 >> 0] | 0) != (i1 & 255) << 24 >> 24) {
      i37 = 232;
      break L21;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0;
      i1 = i4;
     } else {
      HEAP32[i2 >> 2] = i3 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      i1 = i4;
     }
     while (1) {
      if ((HEAP32[i32 >> 2] | 0) <= 0) break L209;
      i2 = HEAP32[i38 >> 2] | 0;
      do if (!i2) i3 = 1; else {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i38 >> 2] = 0;
        i3 = 1;
        break;
       } else {
        i3 = (HEAP32[i38 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!i4) i37 = 216; else {
       i2 = HEAP32[i4 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[i39 >> 2] = 0;
        i1 = 0;
        i37 = 216;
        break;
       } else if (i3 ^ (i1 | 0) == 0) {
        i5 = i1;
        i4 = i1;
        break;
       } else {
        i37 = 232;
        break L21;
       }
      } while (0);
      if ((i37 | 0) == 216) {
       i37 = 0;
       if (i3) {
        i37 = 232;
        break L21;
       } else {
        i5 = i1;
        i4 = 0;
       }
      }
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if ((i1 & 255) << 24 >> 24 <= -1) {
       i37 = 232;
       break L21;
      }
      if (!(HEAP16[(HEAP32[i22 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 2048)) {
       i37 = 232;
       break L21;
      }
      if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i27 >> 2] | 0)) __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i27);
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      i2 = HEAP32[i35 >> 2] | 0;
      HEAP32[i35 >> 2] = i2 + 1;
      HEAP8[i2 >> 0] = i1;
      HEAP32[i32 >> 2] = (HEAP32[i32 >> 2] | 0) + -1;
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0;
       i1 = i5;
       continue;
      } else {
       HEAP32[i2 >> 2] = i3 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
       i1 = i5;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i34 >> 2] | 0)) {
     i37 = 232;
     break L21;
    } else i1 = i36;
    break;
   }
  default:
   i1 = i36;
  } while (0);
  L283 : do if ((i37 | 0) == 46) while (1) {
   i37 = 0;
   i2 = HEAP32[i38 >> 2] | 0;
   do if (!i2) i3 = 1; else {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i38 >> 2] = 0;
     i3 = 1;
     break;
    } else {
     i3 = (HEAP32[i38 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!i4) i37 = 59; else {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i39 >> 2] = 0;
     i1 = 0;
     i37 = 59;
     break;
    } else if (i3 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else {
     i1 = i36;
     break L283;
    }
   } while (0);
   if ((i37 | 0) == 59) {
    i37 = 0;
    if (i3) {
     i1 = i36;
     break L283;
    } else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i38 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if ((i1 & 255) << 24 >> 24 <= -1) {
    i1 = i36;
    break L283;
   }
   if (!(HEAP16[(HEAP32[i22 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
    i1 = i36;
    break L283;
   }
   i1 = HEAP32[i38 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 1;
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i47, i1 & 255);
   i1 = i5;
   i37 = 46;
  } while (0);
  i36 = i1;
  i13 = i13 + 1 | 0;
 }
 L319 : do if ((i37 | 0) == 44) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 103) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 144) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 232) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 234) {
  L321 : do if (i36 | 0) {
   i5 = i36 + 11 | 0;
   i6 = i36 + 4 | 0;
   i4 = 1;
   L323 : while (1) {
    i1 = HEAP8[i5 >> 0] | 0;
    if (i1 << 24 >> 24 < 0) i1 = HEAP32[i6 >> 2] | 0; else i1 = i1 & 255;
    if (i4 >>> 0 >= i1 >>> 0) break L321;
    i1 = HEAP32[i38 >> 2] | 0;
    do if (!i1) i3 = 1; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i38 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i38 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    i1 = HEAP32[i39 >> 2] | 0;
    do if (!i1) i37 = 253; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i39 >> 2] = 0;
      i37 = 253;
      break;
     } else if (i3) break; else break L323;
    } while (0);
    if ((i37 | 0) == 253) {
     i37 = 0;
     if (i3) break;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
    if ((HEAP8[i5 >> 0] | 0) < 0) i2 = HEAP32[i36 >> 2] | 0; else i2 = i36;
    if ((HEAP8[i2 + i4 >> 0] | 0) != (i1 & 255) << 24 >> 24) break;
    i1 = i4 + 1 | 0;
    i2 = HEAP32[i38 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
     i4 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     i4 = i1;
     continue;
    }
   }
   HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
   i2 = 0;
   break L319;
  } while (0);
  i2 = HEAP32[i49 >> 2] | 0;
  i1 = HEAP32[i40 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) i2 = 1; else {
   HEAP32[i41 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i43, i2, i1, i41);
   if (!(HEAP32[i41 >> 2] | 0)) {
    i2 = 1;
    break;
   } else {
    HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
    i2 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i47);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i46);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i45);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i44);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i43);
 i1 = HEAP32[i49 >> 2] | 0;
 HEAP32[i49 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i48 >> 2] & 511](i1);
 STACKTOP = i50;
 return i2 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i38, i39, i2, i3, i4, i42, i32, i33, i34, i35, i1) {
 i38 = i38 | 0;
 i39 = i39 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i42 = i42 | 0;
 i32 = i32 | 0;
 i33 = i33 | 0;
 i34 = i34 | 0;
 i35 = i35 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i36 = 0, i37 = 0, i40 = 0, i41 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i37 = 0;
 i50 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i26 = i50 + 96 | 0;
 i36 = i50 + 104 | 0;
 i49 = i50 + 88 | 0;
 i40 = i50 + 80 | 0;
 i27 = i50 + 76 | 0;
 i28 = i50 + 504 | 0;
 i29 = i50 + 72 | 0;
 i30 = i50 + 68 | 0;
 i43 = i50 + 56 | 0;
 i44 = i50 + 44 | 0;
 i45 = i50 + 32 | 0;
 i46 = i50 + 20 | 0;
 i47 = i50 + 8 | 0;
 i31 = i50 + 4 | 0;
 i41 = i50;
 HEAP32[i26 >> 2] = i1;
 HEAP32[i49 >> 2] = i36;
 i48 = i49 + 4 | 0;
 HEAP32[i48 >> 2] = 372;
 HEAP32[i40 >> 2] = i36;
 HEAP32[i27 >> 2] = i36 + 400;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i43 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i44 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i45 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i46 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i47 >> 2] = 0;
 HEAP32[i47 + 4 >> 2] = 0;
 HEAP32[i47 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i47 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i2, i3, i28, i29, i30, i43, i44, i45, i46, i31);
 HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
 i22 = i45 + 8 + 3 | 0;
 i23 = i45 + 4 | 0;
 i24 = i46 + 8 + 3 | 0;
 i25 = i46 + 4 | 0;
 i14 = (i4 & 512 | 0) != 0;
 i15 = i44 + 8 + 3 | 0;
 i16 = i44 + 4 | 0;
 i17 = i47 + 8 + 3 | 0;
 i18 = i47 + 4 | 0;
 i19 = i28 + 3 | 0;
 i20 = i43 + 11 | 0;
 i21 = i43 + 4 | 0;
 i36 = 0;
 i13 = 0;
 L21 : while (1) {
  if (i13 >>> 0 >= 4) {
   i37 = 229;
   break;
  }
  i1 = HEAP32[i38 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i38 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i38 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i39 >> 2] | 0;
  do if (!i2) i37 = 31; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i39 >> 2] = 0;
    i37 = 31;
    break;
   } else if (i3) {
    i12 = i2;
    break;
   } else {
    i37 = 229;
    break L21;
   }
  } while (0);
  if ((i37 | 0) == 31) {
   i37 = 0;
   if (i3) {
    i37 = 229;
    break;
   } else i12 = 0;
  }
  L46 : do switch (HEAP8[i28 + i13 >> 0] | 0) {
  case 1:
   {
    if ((i13 | 0) == 3) i1 = i36; else {
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i33 >> 2] | 0) + 12 >> 2] & 63](i33, 8192, i1) | 0)) {
      i37 = 43;
      break L21;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     }
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i47, i1);
     i1 = i12;
     i4 = i12;
     i37 = 45;
    }
    break;
   }
  case 0:
   {
    if ((i13 | 0) == 3) i1 = i36; else {
     i1 = i12;
     i4 = i12;
     i37 = 45;
    }
    break;
   }
  case 3:
   {
    i1 = HEAP8[i22 >> 0] | 0;
    i1 = i1 << 24 >> 24 < 0 ? HEAP32[i23 >> 2] | 0 : i1 & 255;
    i4 = HEAP8[i24 >> 0] | 0;
    i4 = i4 << 24 >> 24 < 0 ? HEAP32[i25 >> 2] | 0 : i4 & 255;
    if ((i1 | 0) == (0 - i4 | 0)) i1 = i36; else {
     i5 = (i1 | 0) == 0;
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     i3 = (i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0);
     if (i5 | (i4 | 0) == 0) {
      if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (i5) {
       if ((i1 | 0) != (HEAP32[((HEAP8[i24 >> 0] | 0) < 0 ? HEAP32[i46 >> 2] | 0 : i46) >> 2] | 0)) {
        i1 = i36;
        break L46;
       }
       i1 = HEAP32[i38 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
        HEAP32[i2 >> 2] = i3 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
       }
       HEAP8[i32 >> 0] = 1;
       i1 = HEAP8[i24 >> 0] | 0;
       i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i25 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i46 : i36;
       break L46;
      }
      if ((i1 | 0) != (HEAP32[((HEAP8[i22 >> 0] | 0) < 0 ? HEAP32[i45 >> 2] | 0 : i45) >> 2] | 0)) {
       HEAP8[i32 >> 0] = 1;
       i1 = i36;
       break L46;
      }
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
       HEAP32[i2 >> 2] = i3 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
      }
      i1 = HEAP8[i22 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i23 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i45 : i36;
      break L46;
     }
     if (i3) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i5 = (i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0);
     if ((i1 | 0) == (HEAP32[((HEAP8[i22 >> 0] | 0) < 0 ? HEAP32[i45 >> 2] | 0 : i45) >> 2] | 0)) {
      if (i5) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0; else {
       HEAP32[i3 >> 2] = i4 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
      }
      i1 = HEAP8[i22 >> 0] | 0;
      i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i23 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i45 : i36;
      break L46;
     }
     if (i5) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
     if ((i1 | 0) != (HEAP32[((HEAP8[i24 >> 0] | 0) < 0 ? HEAP32[i46 >> 2] | 0 : i46) >> 2] | 0)) {
      i37 = 101;
      break L21;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     }
     HEAP8[i32 >> 0] = 1;
     i1 = HEAP8[i24 >> 0] | 0;
     i1 = (i1 << 24 >> 24 < 0 ? HEAP32[i25 >> 2] | 0 : i1 & 255) >>> 0 > 1 ? i46 : i36;
    }
    break;
   }
  case 2:
   {
    if (!(i13 >>> 0 < 2 | (i36 | 0) != 0)) if (!(i14 | (i13 | 0) == 2 & (HEAP8[i19 >> 0] | 0) != 0)) {
     i1 = 0;
     break L46;
    }
    i3 = HEAP8[i15 >> 0] | 0;
    i4 = HEAP32[i44 >> 2] | 0;
    i1 = i3 << 24 >> 24 < 0 ? i4 : i44;
    L107 : do if (!i13) {
     i7 = i12;
     i2 = i1;
     i5 = i12;
    } else if ((HEAPU8[i28 + (i13 + -1) >> 0] | 0) < 2) {
     while (1) {
      i11 = i3 << 24 >> 24 < 0;
      i2 = i1;
      if (((i11 ? i4 : i44) + ((i11 ? HEAP32[i16 >> 2] | 0 : i3 & 255) << 2) | 0) == (i2 | 0)) break;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i33 >> 2] | 0) + 12 >> 2] & 63](i33, 8192, HEAP32[i2 >> 2] | 0) | 0)) {
       i37 = 108;
       break;
      }
      i1 = i2 + 4 | 0;
      i3 = HEAP8[i15 >> 0] | 0;
      i4 = HEAP32[i44 >> 2] | 0;
     }
     if ((i37 | 0) == 108) {
      i37 = 0;
      i3 = HEAP8[i15 >> 0] | 0;
      i4 = HEAP32[i44 >> 2] | 0;
     }
     i2 = i3 << 24 >> 24 < 0 ? i4 : i44;
     i11 = i2;
     i6 = i1 - i11 >> 2;
     i9 = HEAP8[i17 >> 0] | 0;
     i7 = i9 << 24 >> 24 < 0;
     i8 = HEAP32[i18 >> 2] | 0;
     i9 = i9 & 255;
     if (i6 >>> 0 > (i7 ? i8 : i9) >>> 0) {
      i7 = i12;
      i2 = i11;
      i5 = i12;
     } else {
      i51 = HEAP32[i47 >> 2] | 0;
      i10 = (i7 ? i51 : i47) + ((i7 ? i8 : i9) << 2) | 0;
      i5 = i2;
      i2 = (i7 ? i51 + (i8 << 2) | 0 : i47 + (i9 << 2) | 0) + (0 - i6 << 2) | 0;
      while (1) {
       if ((i2 | 0) == (i10 | 0)) {
        i7 = i12;
        i2 = i1;
        i5 = i12;
        break L107;
       }
       if ((HEAP32[i2 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
        i7 = i12;
        i2 = i11;
        i5 = i12;
        break L107;
       }
       i5 = i5 + 4 | 0;
       i2 = i2 + 4 | 0;
      }
     }
    } else {
     i7 = i12;
     i2 = i1;
     i5 = i12;
    } while (0);
    L121 : while (1) {
     i1 = i3 << 24 >> 24 < 0;
     i1 = (i1 ? i4 : i44) + ((i1 ? HEAP32[i16 >> 2] | 0 : i3 & 255) << 2) | 0;
     i6 = i2;
     if ((i1 | 0) == (i6 | 0)) break;
     i1 = HEAP32[i38 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i38 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i38 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i5) {
      i1 = i7;
      i37 = 129;
     } else {
      i1 = HEAP32[i5 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i39 >> 2] = 0;
       i1 = 0;
       i37 = 129;
       break;
      } else if (i2 ^ (i7 | 0) == 0) {
       i1 = i7;
       i5 = i7;
       break;
      } else {
       i1 = i6;
       break L121;
      }
     } while (0);
     if ((i37 | 0) == 129) {
      i37 = 0;
      if (i2) {
       i1 = i6;
       break;
      } else i5 = 0;
     }
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     if ((i2 | 0) != (HEAP32[i6 >> 2] | 0)) {
      i1 = i6;
      break;
     }
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0; else {
      HEAP32[i3 >> 2] = i4 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
     }
     i7 = i1;
     i2 = i6 + 4 | 0;
     i3 = HEAP8[i15 >> 0] | 0;
     i4 = HEAP32[i44 >> 2] | 0;
    }
    if (i14) {
     i51 = HEAP8[i15 >> 0] | 0;
     i12 = i51 << 24 >> 24 < 0;
     if (((i12 ? HEAP32[i44 >> 2] | 0 : i44) + ((i12 ? HEAP32[i16 >> 2] | 0 : i51 & 255) << 2) | 0) == (i1 | 0)) i1 = i36; else {
      i37 = 141;
      break L21;
     }
    } else i1 = i36;
    break;
   }
  case 4:
   {
    i7 = 0;
    i1 = i12;
    i4 = i12;
    L157 : while (1) {
     i2 = HEAP32[i38 >> 2] | 0;
     do if (!i2) i3 = 1; else {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i38 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i38 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i37 = 155; else {
      i2 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i39 >> 2] = 0;
       i1 = 0;
       i37 = 155;
       break;
      } else if (i3 ^ (i1 | 0) == 0) {
       i5 = i1;
       i6 = i1;
       break;
      } else {
       i4 = i1;
       break L157;
      }
     } while (0);
     if ((i37 | 0) == 155) {
      i37 = 0;
      if (i3) {
       i4 = i1;
       break;
      } else {
       i5 = i1;
       i6 = 0;
      }
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i33 >> 2] | 0) + 12 >> 2] & 63](i33, 2048, i2) | 0) {
      i1 = HEAP32[i35 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i26 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i26);
       i1 = HEAP32[i35 >> 2] | 0;
      }
      HEAP32[i35 >> 2] = i1 + 4;
      HEAP32[i1 >> 2] = i2;
      i1 = i7 + 1 | 0;
     } else {
      i51 = HEAP8[i20 >> 0] | 0;
      if (!((i2 | 0) == (HEAP32[i30 >> 2] | 0) & (i7 | 0 ? ((i51 << 24 >> 24 < 0 ? HEAP32[i21 >> 2] | 0 : i51 & 255) | 0) != 0 : 0))) {
       i4 = i5;
       break;
      }
      i1 = HEAP32[i40 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i27 >> 2] | 0)) {
       __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i49, i40, i27);
       i1 = HEAP32[i40 >> 2] | 0;
      }
      HEAP32[i40 >> 2] = i1 + 4;
      HEAP32[i1 >> 2] = i7;
      i1 = 0;
     }
     i2 = HEAP32[i38 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
      i7 = i1;
      i1 = i5;
      i4 = i6;
      continue;
     } else {
      HEAP32[i3 >> 2] = i4 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
      i7 = i1;
      i1 = i5;
      i4 = i6;
      continue;
     }
    }
    i1 = HEAP32[i40 >> 2] | 0;
    if (i7 | 0 ? (HEAP32[i49 >> 2] | 0) != (i1 | 0) : 0) {
     if ((i1 | 0) == (HEAP32[i27 >> 2] | 0)) {
      __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i49, i40, i27);
      i1 = HEAP32[i40 >> 2] | 0;
     }
     HEAP32[i40 >> 2] = i1 + 4;
     HEAP32[i1 >> 2] = i7;
    }
    L206 : do if ((HEAP32[i31 >> 2] | 0) > 0) {
     i1 = HEAP32[i38 >> 2] | 0;
     do if (!i1) i2 = 1; else {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i38 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i38 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) i37 = 189; else {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[i39 >> 2] = 0;
       i37 = 189;
       break;
      } else if (i2) break; else {
       i37 = 227;
       break L21;
      }
     } while (0);
     if ((i37 | 0) == 189) {
      i37 = 0;
      if (i2) {
       i37 = 227;
       break L21;
      } else i4 = 0;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if ((i1 | 0) != (HEAP32[i29 >> 2] | 0)) {
      i37 = 227;
      break L21;
     }
     i1 = HEAP32[i38 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0;
      i1 = i4;
     } else {
      HEAP32[i2 >> 2] = i3 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
      i1 = i4;
     }
     while (1) {
      if ((HEAP32[i31 >> 2] | 0) <= 0) break L206;
      i2 = HEAP32[i38 >> 2] | 0;
      do if (!i2) i3 = 1; else {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[i38 >> 2] = 0;
        i3 = 1;
        break;
       } else {
        i3 = (HEAP32[i38 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!i4) i37 = 212; else {
       i2 = HEAP32[i4 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[i39 >> 2] = 0;
        i1 = 0;
        i37 = 212;
        break;
       } else if (i3 ^ (i1 | 0) == 0) {
        i5 = i1;
        i4 = i1;
        break;
       } else {
        i37 = 227;
        break L21;
       }
      } while (0);
      if ((i37 | 0) == 212) {
       i37 = 0;
       if (i3) {
        i37 = 227;
        break L21;
       } else {
        i5 = i1;
        i4 = 0;
       }
      }
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i33 >> 2] | 0) + 12 >> 2] & 63](i33, 2048, i1) | 0)) {
       i37 = 227;
       break L21;
      }
      if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i26 >> 2] | 0)) __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i26);
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
      i2 = HEAP32[i35 >> 2] | 0;
      HEAP32[i35 >> 2] = i2 + 4;
      HEAP32[i2 >> 2] = i1;
      HEAP32[i31 >> 2] = (HEAP32[i31 >> 2] | 0) + -1;
      i1 = HEAP32[i38 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0;
       i1 = i5;
       continue;
      } else {
       HEAP32[i2 >> 2] = i3 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
       i1 = i5;
       continue;
      }
     }
    } while (0);
    if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i34 >> 2] | 0)) {
     i37 = 227;
     break L21;
    } else i1 = i36;
    break;
   }
  default:
   i1 = i36;
  } while (0);
  L279 : do if ((i37 | 0) == 45) while (1) {
   i37 = 0;
   i2 = HEAP32[i38 >> 2] | 0;
   do if (!i2) i3 = 1; else {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i38 >> 2] = 0;
     i3 = 1;
     break;
    } else {
     i3 = (HEAP32[i38 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!i4) i37 = 58; else {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i39 >> 2] = 0;
     i1 = 0;
     i37 = 58;
     break;
    } else if (i3 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else {
     i1 = i36;
     break L279;
    }
   } while (0);
   if ((i37 | 0) == 58) {
    i37 = 0;
    if (i3) {
     i1 = i36;
     break L279;
    } else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i38 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i33 >> 2] | 0) + 12 >> 2] & 63](i33, 8192, i1) | 0)) {
    i1 = i36;
    break L279;
   }
   i1 = HEAP32[i38 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 4;
    i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i47, i1);
   i1 = i5;
   i37 = 45;
  } while (0);
  i36 = i1;
  i13 = i13 + 1 | 0;
 }
 L314 : do if ((i37 | 0) == 43) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 101) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 141) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 227) {
  HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
  i2 = 0;
 } else if ((i37 | 0) == 229) {
  L316 : do if (i36 | 0) {
   i5 = i36 + 8 + 3 | 0;
   i6 = i36 + 4 | 0;
   i4 = 1;
   L318 : while (1) {
    i1 = HEAP8[i5 >> 0] | 0;
    if (i1 << 24 >> 24 < 0) i1 = HEAP32[i6 >> 2] | 0; else i1 = i1 & 255;
    if (i4 >>> 0 >= i1 >>> 0) break L316;
    i1 = HEAP32[i38 >> 2] | 0;
    do if (!i1) i3 = 1; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i38 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i38 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    i1 = HEAP32[i39 >> 2] | 0;
    do if (!i1) i37 = 248; else {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i39 >> 2] = 0;
      i37 = 248;
      break;
     } else if (i3) break; else break L318;
    } while (0);
    if ((i37 | 0) == 248) {
     i37 = 0;
     if (i3) break;
    }
    i1 = HEAP32[i38 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if ((HEAP8[i5 >> 0] | 0) < 0) i2 = HEAP32[i36 >> 2] | 0; else i2 = i36;
    if ((i1 | 0) != (HEAP32[i2 + (i4 << 2) >> 2] | 0)) break;
    i1 = i4 + 1 | 0;
    i2 = HEAP32[i38 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
     i4 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
     i4 = i1;
     continue;
    }
   }
   HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
   i2 = 0;
   break L314;
  } while (0);
  i2 = HEAP32[i49 >> 2] | 0;
  i1 = HEAP32[i40 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) i2 = 1; else {
   HEAP32[i41 >> 2] = 0;
   __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i43, i2, i1, i41);
   if (!(HEAP32[i41 >> 2] | 0)) {
    i2 = 1;
    break;
   } else {
    HEAP32[i42 >> 2] = HEAP32[i42 >> 2] | 4;
    i2 = 0;
    break;
   }
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i47);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i46);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i45);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i44);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i43);
 i1 = HEAP32[i49 >> 2] | 0;
 HEAP32[i49 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i48 >> 2] & 511](i1);
 STACKTOP = i50;
 return i2 | 0;
}

function _BlitNtoN(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i5 = HEAP32[i4 + 28 >> 2] | 0;
 i37 = HEAP32[i4 + 16 >> 2] | 0;
 i30 = HEAP32[i4 + 36 >> 2] | 0;
 i3 = HEAP32[i4 + 40 >> 2] | 0;
 i31 = HEAP8[i3 + 9 >> 0] | 0;
 i32 = i31 & 255;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i34 = HEAP8[i2 + 9 >> 0] | 0;
 i35 = i34 & 255;
 if (!(HEAP32[i2 + 24 >> 2] | 0)) i33 = 0; else i33 = HEAPU8[i4 + 63 >> 0] | 0;
 if (!i5) return;
 i36 = (i1 + 7 | 0) / 8 | 0;
 i29 = i1 & 255;
 i22 = i2 + 28 | 0;
 i23 = i2 + 32 | 0;
 i24 = i2 + 29 | 0;
 i25 = i2 + 33 | 0;
 i26 = i2 + 30 | 0;
 i27 = i2 + 34 | 0;
 i28 = i2 + 31 | 0;
 i13 = i2 + 35 | 0;
 i14 = i3 + 28 | 0;
 i15 = i3 + 12 | 0;
 i16 = i3 + 32 | 0;
 i17 = i3 + 29 | 0;
 i18 = i3 + 16 | 0;
 i19 = i3 + 33 | 0;
 i20 = i3 + 30 | 0;
 i21 = i3 + 20 | 0;
 i12 = i3 + 34 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i9 = HEAP32[i4 + 20 >> 2] | 0;
 L7 : while (1) {
  i5 = i5 + -1 | 0;
  switch (i29 & 7) {
  case 0:
   {
    i10 = i36;
    i11 = 6;
    break;
   }
  case 7:
   {
    i10 = i36;
    i11 = 18;
    break;
   }
  case 6:
   {
    i10 = i36;
    i11 = 30;
    break;
   }
  case 5:
   {
    i10 = i36;
    i11 = 42;
    break;
   }
  case 4:
   {
    i10 = i36;
    i11 = 54;
    break;
   }
  case 3:
   {
    i10 = i36;
    i11 = 66;
    break;
   }
  case 2:
   {
    i10 = i36;
    i11 = 78;
    break;
   }
  case 1:
   {
    i10 = i36;
    i11 = 90;
    break;
   }
  default:
   {
    i11 = 102;
    break L7;
   }
  }
  while (1) if ((i11 | 0) == 6) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i4 = HEAPU8[i1 >> 0] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 11;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i1 >> 1] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 11;
     break;
    }
   case 3:
    {
     i2 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 11;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 11;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 11) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 18;
   continue;
  } else if ((i11 | 0) == 18) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i4 = HEAPU8[i1 >> 0] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 23;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i1 >> 1] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 23;
     break;
    }
   case 3:
    {
     i2 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 23;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 23;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 23) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 30;
   continue;
  } else if ((i11 | 0) == 30) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i4 = HEAPU8[i1 >> 0] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 35;
     break;
    }
   case 2:
    {
     i4 = HEAPU16[i1 >> 1] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 35;
     break;
    }
   case 3:
    {
     i2 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 35;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i4) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i4) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i4) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 35;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 35) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i2 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i4 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 42;
   continue;
  } else if ((i11 | 0) == 42) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 47;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 47;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i2 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 47;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 47;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 47) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 54;
   continue;
  } else if ((i11 | 0) == 54) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 59;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 59;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i2 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 59;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 59;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 59) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 66;
   continue;
  } else if ((i11 | 0) == 66) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 71;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 71;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i2 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 71;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 71;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 71) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 78;
   continue;
  } else if ((i11 | 0) == 78) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 83;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 83;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i2 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 83;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 83;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 83) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i32 | 0;
   i9 = i9 + i35 | 0;
   i11 = 90;
   continue;
  } else if ((i11 | 0) == 90) {
   i11 = 0;
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 95;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 95;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i2 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 95;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i2) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i2) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i2 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i2) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i11 = 95;
     break;
    }
   default:
    {
     i8 = 0;
     i7 = 0;
     i6 = 0;
    }
   }
   if ((i11 | 0) == 95) {
    i8 = HEAP8[i2 >> 0] | 0;
    i7 = HEAP8[i3 >> 0] | 0;
    i6 = HEAP8[i4 >> 0] | 0;
   }
   i2 = i8 & 255;
   i3 = i7 & 255;
   i4 = i6 & 255;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     HEAP8[i9 >> 0] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i9 >> 1] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i9 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i9 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i9 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i9 >> 2] = i3 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i4 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i2 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i33 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i13 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i2 = i9 + i35 | 0;
   i1 = i1 + i32 | 0;
   if ((i10 | 0) > 1) {
    i10 = i10 + -1 | 0;
    i9 = i2;
    i11 = 6;
    continue;
   } else break;
  }
  if (!i5) {
   i11 = 104;
   break;
  } else {
   i1 = i1 + i37 | 0;
   i9 = i2 + i30 | 0;
  }
 }
 if ((i11 | 0) != 102) if ((i11 | 0) == 104) return;
}
function _BlitNtoNPixelAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i5 = HEAP32[i4 + 28 >> 2] | 0;
 i44 = HEAP32[i4 + 16 >> 2] | 0;
 i45 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i3 = HEAP32[i4 + 44 >> 2] | 0;
 i39 = HEAP8[i2 + 9 >> 0] | 0;
 i40 = i39 & 255;
 i41 = HEAP8[i3 + 9 >> 0] | 0;
 i42 = i41 & 255;
 if (!i5) return;
 i43 = (i1 + 3 | 0) / 4 | 0;
 i38 = i1 & 255;
 i27 = i2 + 28 | 0;
 i28 = i2 + 12 | 0;
 i29 = i2 + 32 | 0;
 i30 = i2 + 29 | 0;
 i31 = i2 + 16 | 0;
 i32 = i2 + 33 | 0;
 i33 = i2 + 30 | 0;
 i34 = i2 + 20 | 0;
 i35 = i2 + 34 | 0;
 i36 = i2 + 31 | 0;
 i37 = i2 + 24 | 0;
 i15 = i2 + 35 | 0;
 i16 = i3 + 28 | 0;
 i17 = i3 + 32 | 0;
 i18 = i3 + 29 | 0;
 i19 = i3 + 33 | 0;
 i20 = i3 + 30 | 0;
 i21 = i3 + 34 | 0;
 i22 = i3 + 31 | 0;
 i23 = i3 + 35 | 0;
 i24 = i3 + 12 | 0;
 i25 = i3 + 16 | 0;
 i26 = i3 + 20 | 0;
 i14 = i3 + 24 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 L4 : while (1) {
  i5 = i5 + -1 | 0;
  switch (i38 & 3) {
  case 0:
   {
    i12 = i43;
    i13 = 4;
    break;
   }
  case 3:
   {
    i12 = i43;
    i13 = 21;
    break;
   }
  case 2:
   {
    i12 = i43;
    i13 = 38;
    break;
   }
  case 1:
   {
    i12 = i43;
    i13 = 55;
    break;
   }
  default:
   {
    i13 = 72;
    break L4;
   }
  }
  while (1) if ((i13 | 0) == 4) {
   i13 = 0;
   switch (i39 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 9;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 9;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i1 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i1 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = 255;
     i13 = 10;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i4) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i13 = 9;
     break;
    }
   default:
    {}
   }
   if ((i13 | 0) == 9) {
    i13 = 0;
    i3 = HEAP8[(HEAP32[i3 >> 2] | 0) + ((i4 & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
    if (i3 << 24 >> 24) {
     i10 = HEAPU8[i7 >> 0] | 0;
     i8 = HEAPU8[i8 >> 0] | 0;
     i9 = HEAPU8[i9 >> 0] | 0;
     i11 = i3 & 255;
     i13 = 10;
    }
   }
   L16 : do if ((i13 | 0) == 10) {
    switch (i41 << 24 >> 24) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i3 = HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = -1;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i3 = 0;
      i4 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    i46 = i3 & 255;
    i13 = i4 & 255;
    i4 = i6 & 255;
    i3 = i7 & 255;
    i7 = (((Math_imul(i10 - i46 | 0, i11) | 0) >>> 0) / 255 | 0) + i46 | 0;
    i6 = (((Math_imul(i8 - i13 | 0, i11) | 0) >>> 0) / 255 | 0) + i13 | 0;
    i4 = (((Math_imul(i9 - i4 | 0, i11) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i3 = i11 + i3 - (((Math_imul(i11, i3) | 0) >>> 0) / 255 | 0) | 0;
    switch (i41 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L16;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L16;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      break L16;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L16;
     }
    default:
     break L16;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i42 | 0;
   i13 = 21;
   continue;
  } else if ((i13 | 0) == 21) {
   i13 = 0;
   switch (i39 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 26;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 26;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i1 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i1 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = 255;
     i13 = 27;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i4) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i13 = 26;
     break;
    }
   default:
    {}
   }
   if ((i13 | 0) == 26) {
    i13 = 0;
    i3 = HEAP8[(HEAP32[i3 >> 2] | 0) + ((i4 & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
    if (i3 << 24 >> 24) {
     i10 = HEAPU8[i7 >> 0] | 0;
     i8 = HEAPU8[i8 >> 0] | 0;
     i9 = HEAPU8[i9 >> 0] | 0;
     i11 = i3 & 255;
     i13 = 27;
    }
   }
   L38 : do if ((i13 | 0) == 27) {
    switch (i41 << 24 >> 24) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i3 = HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = -1;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i3 = 0;
      i4 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    i13 = i3 & 255;
    i46 = i4 & 255;
    i4 = i6 & 255;
    i3 = i7 & 255;
    i7 = (((Math_imul(i10 - i13 | 0, i11) | 0) >>> 0) / 255 | 0) + i13 | 0;
    i6 = (((Math_imul(i8 - i46 | 0, i11) | 0) >>> 0) / 255 | 0) + i46 | 0;
    i4 = (((Math_imul(i9 - i4 | 0, i11) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i3 = i11 + i3 - (((Math_imul(i11, i3) | 0) >>> 0) / 255 | 0) | 0;
    switch (i41 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L38;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L38;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      break L38;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L38;
     }
    default:
     break L38;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i42 | 0;
   i13 = 38;
   continue;
  } else if ((i13 | 0) == 38) {
   i13 = 0;
   switch (i39 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 43;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 43;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i1 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i1 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = 255;
     i13 = 44;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i4) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i13 = 43;
     break;
    }
   default:
    {}
   }
   if ((i13 | 0) == 43) {
    i13 = 0;
    i3 = HEAP8[(HEAP32[i3 >> 2] | 0) + ((i4 & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
    if (i3 << 24 >> 24) {
     i10 = HEAPU8[i7 >> 0] | 0;
     i8 = HEAPU8[i8 >> 0] | 0;
     i9 = HEAPU8[i9 >> 0] | 0;
     i11 = i3 & 255;
     i13 = 44;
    }
   }
   L60 : do if ((i13 | 0) == 44) {
    switch (i41 << 24 >> 24) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i3 = HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = -1;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i3 = 0;
      i4 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    i13 = i3 & 255;
    i46 = i4 & 255;
    i4 = i6 & 255;
    i3 = i7 & 255;
    i7 = (((Math_imul(i10 - i13 | 0, i11) | 0) >>> 0) / 255 | 0) + i13 | 0;
    i6 = (((Math_imul(i8 - i46 | 0, i11) | 0) >>> 0) / 255 | 0) + i46 | 0;
    i4 = (((Math_imul(i9 - i4 | 0, i11) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i3 = i11 + i3 - (((Math_imul(i11, i3) | 0) >>> 0) / 255 | 0) | 0;
    switch (i41 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L60;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L60;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      break L60;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L60;
     }
    default:
     break L60;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i42 | 0;
   i13 = 55;
   continue;
  } else if ((i13 | 0) == 55) {
   i13 = 0;
   switch (i39 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 60;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i6) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i6) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i6) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i4 = HEAP32[i37 >> 2] | 0;
     i13 = 60;
     break;
    }
   case 3:
    {
     i10 = HEAPU8[i1 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i8 = HEAPU8[i1 + ((HEAPU8[i32 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i9 = HEAPU8[i1 + ((HEAPU8[i35 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i11 = 255;
     i13 = 61;
     break;
    }
   case 4:
    {
     i4 = HEAP32[i1 >> 2] | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i4) >>> (HEAPU8[i29 >> 0] | 0)) | 0;
     i8 = (HEAP32[5724 + ((HEAPU8[i30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i4) >>> (HEAPU8[i32 >> 0] | 0)) | 0;
     i9 = (HEAP32[5724 + ((HEAPU8[i33 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i4) >>> (HEAPU8[i35 >> 0] | 0)) | 0;
     i3 = 5724 + ((HEAPU8[i36 >> 0] | 0) << 2) | 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i13 = 60;
     break;
    }
   default:
    {}
   }
   if ((i13 | 0) == 60) {
    i13 = 0;
    i3 = HEAP8[(HEAP32[i3 >> 2] | 0) + ((i4 & i6) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
    if (i3 << 24 >> 24) {
     i10 = HEAPU8[i7 >> 0] | 0;
     i8 = HEAPU8[i8 >> 0] | 0;
     i9 = HEAPU8[i9 >> 0] | 0;
     i11 = i3 & 255;
     i13 = 61;
    }
   }
   L82 : do if ((i13 | 0) == 61) {
    switch (i41 << 24 >> 24) {
    case 1:
     {
      i7 = HEAPU8[i2 >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i2 >> 1] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i3 = HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = -1;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i2 >> 2] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i7) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i7) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i26 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i3 = 0;
      i4 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    i13 = i3 & 255;
    i46 = i4 & 255;
    i4 = i6 & 255;
    i3 = i7 & 255;
    i7 = (((Math_imul(i10 - i13 | 0, i11) | 0) >>> 0) / 255 | 0) + i13 | 0;
    i6 = (((Math_imul(i8 - i46 | 0, i11) | 0) >>> 0) / 255 | 0) + i46 | 0;
    i4 = (((Math_imul(i9 - i4 | 0, i11) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i3 = i11 + i3 - (((Math_imul(i11, i3) | 0) >>> 0) / 255 | 0) | 0;
    switch (i41 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L82;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L82;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i2 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      break L82;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i7 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i4 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0) | i3 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0);
      break L82;
     }
    default:
     break L82;
    }
   } while (0);
   i1 = i1 + i40 | 0;
   i2 = i2 + i42 | 0;
   if ((i12 | 0) > 1) {
    i12 = i12 + -1 | 0;
    i13 = 4;
    continue;
   } else break;
  }
  if (!i5) {
   i13 = 74;
   break;
  } else {
   i1 = i1 + i44 | 0;
   i2 = i2 + i45 | 0;
  }
 }
 if ((i13 | 0) != 72) if ((i13 | 0) == 74) return;
}

function _SDL_BlendLine_RGBA4(i16, i34, i5, i9, i8, i6, i1, i2, i3, i4, i17) {
 i16 = i16 | 0;
 i34 = i34 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i17 = i17 | 0;
 var i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i35 = HEAP32[i16 + 4 >> 2] | 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i33 = i4 & 255;
  i38 = ((Math_imul(i33, i1) | 0) >>> 0) / 255 | 0;
  i37 = ((Math_imul(i33, i2 & 255) | 0) >>> 0) / 255 | 0;
  i36 = ((Math_imul(i33, i3 & 255) | 0) >>> 0) / 255 | 0;
 } else {
  i38 = i1;
  i37 = i2 & 255;
  i36 = i3 & 255;
  i33 = i4 & 255;
 }
 i32 = i33 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i34 | 0)) {
    i19 = i1 + (i9 << 2) | 0;
    i1 = (i17 | 0) != 0;
    i19 = i1 ? i19 : i19 + 4 | 0;
    i2 = i34 - i9 | 0;
   } else {
    i19 = i1 + (i34 << 2) | 0;
    i2 = i9 - i34 | 0;
    i1 = (i17 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i1 = i19;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(i32, HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i5 << i17 | ((((Math_imul(i32, HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i4 << i16 | ((((Math_imul(i32, HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i36 | 0) >>> i6 << i18 | ((((Math_imul(i32, HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i34 | 0)) {
    i19 = i1 + (i9 << 2) | 0;
    i1 = (i17 | 0) != 0;
    i19 = i1 ? i19 : i19 + 4 | 0;
    i2 = i34 - i9 | 0;
   } else {
    i19 = i1 + (i34 << 2) | 0;
    i2 = i9 - i34 | 0;
    i1 = (i17 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i1 = i19;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    i33 = i38 + (HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0;
    i32 = i37 + (HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0;
    i34 = i36 + (HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0;
    HEAP32[i1 >> 2] = (i32 >>> 0 < 255 ? i32 : 255) >>> i5 << i17 | (i33 >>> 0 < 255 ? i33 : 255) >>> i4 << i16 | (i34 >>> 0 < 255 ? i34 : 255) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i34 | 0)) {
    i19 = i1 + (i9 << 2) | 0;
    i1 = (i17 | 0) != 0;
    i19 = i1 ? i19 : i19 + 4 | 0;
    i2 = i34 - i9 | 0;
   } else {
    i19 = i1 + (i34 << 2) | 0;
    i2 = i9 - i34 | 0;
    i1 = (i17 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i1 = i19;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i37, HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i17 | (((Math_imul(i38, HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i16 | (((Math_imul(i36, HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i34 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i17 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i34 - i9 | 0;
   } else {
    i1 = i1 + (i34 << 2) | 0;
    i3 = i9 - i34 | 0;
    i2 = (i17 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = i37 >>> (HEAPU8[i35 + 29 >> 0] | 0) << (HEAPU8[i35 + 33 >> 0] | 0) | i38 >>> (HEAPU8[i35 + 28 >> 0] | 0) << (HEAPU8[i35 + 32 >> 0] | 0) | i36 >>> (HEAPU8[i35 + 30 >> 0] | 0) << (HEAPU8[i35 + 34 >> 0] | 0) | i33 >>> (HEAPU8[i35 + 31 >> 0] | 0) << (HEAPU8[i35 + 35 >> 0] | 0);
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i34 | 0)) switch (i6 | 0) {
 case 1:
  {
   i20 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i19 = i1 + ((Math_imul(i20, i8) | 0) << 2) + (i9 << 2) | 0;
    i1 = (i17 | 0) != 0;
    i19 = i1 ? i19 : i19 + (i20 << 2) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i19 = i1 + ((Math_imul(i20, i5) | 0) << 2) + (i9 << 2) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i17 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i1 = i19;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(i32, HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i5 << i17 | ((((Math_imul(i32, HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i4 << i16 | ((((Math_imul(i32, HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i36 | 0) >>> i6 << i18 | ((((Math_imul(i32, HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i20 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i20 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i19 = i1 + ((Math_imul(i20, i8) | 0) << 2) + (i9 << 2) | 0;
    i1 = (i17 | 0) != 0;
    i19 = i1 ? i19 : i19 + (i20 << 2) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i19 = i1 + ((Math_imul(i20, i5) | 0) << 2) + (i9 << 2) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i17 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i1 = i19;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    i33 = i38 + (HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0;
    i32 = i37 + (HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0;
    i34 = i36 + (HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0;
    HEAP32[i1 >> 2] = (i32 >>> 0 < 255 ? i32 : 255) >>> i5 << i17 | (i33 >>> 0 < 255 ? i33 : 255) >>> i4 << i16 | (i34 >>> 0 < 255 ? i34 : 255) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i20 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i20 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i19 = i1 + ((Math_imul(i20, i8) | 0) << 2) + (i9 << 2) | 0;
    i1 = (i17 | 0) != 0;
    i19 = i1 ? i19 : i19 + (i20 << 2) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i19 = i1 + ((Math_imul(i20, i5) | 0) << 2) + (i9 << 2) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i17 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i1 = i19;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i37, HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i17 | (((Math_imul(i38, HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i16 | (((Math_imul(i36, HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i20 << 2) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i17 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i17 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = i37 >>> (HEAPU8[i35 + 29 >> 0] | 0) << (HEAPU8[i35 + 33 >> 0] | 0) | i38 >>> (HEAPU8[i35 + 28 >> 0] | 0) << (HEAPU8[i35 + 32 >> 0] | 0) | i36 >>> (HEAPU8[i35 + 30 >> 0] | 0) << (HEAPU8[i35 + 34 >> 0] | 0) | i33 >>> (HEAPU8[i35 + 31 >> 0] | 0) << (HEAPU8[i35 + 35 >> 0] | 0);
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 i31 = i34 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i31 | 0) < 0 ? 0 - i31 | 0 : i31) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i20 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i19 = i3 + ((i9 | 0) > (i34 | 0) ? -1 : 1) | 0;
    i20 = (i17 | 0) == 0 ? i20 + (i19 << 2) | 0 : i20;
   } else {
    i20 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i34 << 2) | 0;
    i1 = i8 - i5 | 0;
    i19 = i3 + ((i9 | 0) < (i34 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i17 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i2 = i1;
   i1 = i20;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((((Math_imul(i32, HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i5 << i17 | ((((Math_imul(i32, HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i4 << i16 | ((((Math_imul(i32, HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i36 | 0) >>> i6 << i18 | ((((Math_imul(i32, HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i19 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i20 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i19 = i3 + ((i9 | 0) > (i34 | 0) ? -1 : 1) | 0;
    i20 = (i17 | 0) == 0 ? i20 + (i19 << 2) | 0 : i20;
   } else {
    i20 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i34 << 2) | 0;
    i1 = i8 - i5 | 0;
    i19 = i3 + ((i9 | 0) < (i34 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i17 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i2 = i1;
   i1 = i20;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    i33 = i38 + (HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0;
    i32 = i37 + (HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0;
    i34 = i36 + (HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0;
    HEAP32[i1 >> 2] = (i32 >>> 0 < 255 ? i32 : 255) >>> i5 << i17 | (i33 >>> 0 < 255 ? i33 : 255) >>> i4 << i16 | (i34 >>> 0 < 255 ? i34 : 255) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i19 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i20 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i19 = i3 + ((i9 | 0) > (i34 | 0) ? -1 : 1) | 0;
    i20 = (i17 | 0) == 0 ? i20 + (i19 << 2) | 0 : i20;
   } else {
    i20 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i34 << 2) | 0;
    i1 = i8 - i5 | 0;
    i19 = i3 + ((i9 | 0) < (i34 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i17 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i12 = i35 + 12 | 0;
   i13 = i35 + 16 | 0;
   i14 = i35 + 20 | 0;
   i15 = i35 + 24 | 0;
   i4 = HEAPU8[i35 + 28 >> 0] | 0;
   i8 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i35 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i35 + 30 >> 0] | 0;
   i10 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i7 = HEAPU8[i35 + 31 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i3 = HEAPU8[i35 + 35 >> 0] | 0;
   i2 = i1;
   i1 = i20;
   while (1) {
    i2 = i2 + -1 | 0;
    i35 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i37, HEAPU8[i9 + ((HEAP32[i13 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i17 | (((Math_imul(i38, HEAPU8[i8 + ((HEAP32[i12 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i16 | (((Math_imul(i36, HEAPU8[i10 + ((HEAP32[i14 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i18 | (HEAPU8[i11 + ((HEAP32[i15 >> 2] & i35) >>> i3) >> 0] | 0) >>> i7 << i3;
    if (!i2) break; else i1 = i1 + (i19 << 2) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i35 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i32 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i4 = i3 + ((i9 | 0) > (i34 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i17 | 0) == 0 ? i32 + (i4 << 2) | 0 : i32;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i34 << 2) | 0;
    i2 = i8 - i5 | 0;
    i4 = i3 + ((i9 | 0) < (i34 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i17 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = i37 >>> (HEAPU8[i35 + 29 >> 0] | 0) << (HEAPU8[i35 + 33 >> 0] | 0) | i38 >>> (HEAPU8[i35 + 28 >> 0] | 0) << (HEAPU8[i35 + 32 >> 0] | 0) | i36 >>> (HEAPU8[i35 + 30 >> 0] | 0) << (HEAPU8[i35 + 34 >> 0] | 0) | i33 >>> (HEAPU8[i35 + 31 >> 0] | 0) << (HEAPU8[i35 + 35 >> 0] | 0);
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 } else switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i34 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i30 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i31 = i30;
    i30 = i30 - i2 | 0;
    i1 = i2;
   } else {
    i30 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i31 = i30;
    i30 = i30 - i1 | 0;
   }
   i29 = i3 << 1;
   i28 = (i9 | 0) < (i34 | 0);
   i27 = i28 ? 0 - i4 | 0 : i4;
   i28 = i28 ? -1 : 1;
   i25 = (i8 | 0) < (i5 | 0);
   i26 = i25 ? 0 - i6 | 0 : i6;
   i25 = i25 ? -1 : 1;
   i19 = i1 + ((i17 | 0) != 0 & 1) | 0;
   if ((i19 | 0) <= 0) return;
   i20 = i16 + 16 | 0;
   i21 = i35 + 12 | 0;
   i22 = i35 + 16 | 0;
   i23 = i35 + 20 | 0;
   i24 = i35 + 24 | 0;
   i11 = HEAP32[i16 + 20 >> 2] | 0;
   i7 = HEAPU8[i35 + 28 >> 0] | 0;
   i12 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i35 + 29 >> 0] | 0;
   i13 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i35 + 30 >> 0] | 0;
   i14 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i10 = HEAPU8[i35 + 31 >> 0] | 0;
   i15 = HEAP32[5724 + (i10 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i6 = HEAPU8[i35 + 35 >> 0] | 0;
   i3 = i34;
   i4 = 0;
   i1 = i30;
   while (1) {
    i2 = i11 + (Math_imul(HEAP32[i20 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i35 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = ((((Math_imul(i32, HEAPU8[i13 + ((HEAP32[i22 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i37 | 0) >>> i8 << i17 | ((((Math_imul(i32, HEAPU8[i12 + ((HEAP32[i21 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i38 | 0) >>> i7 << i16 | ((((Math_imul(i32, HEAPU8[i14 + ((HEAP32[i23 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i36 | 0) >>> i9 << i18 | ((((Math_imul(i32, HEAPU8[i15 + ((HEAP32[i24 >> 2] & i35) >>> i6) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i10 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i19 | 0)) break; else {
     i5 = i5 + (i2 ? i26 : i25) | 0;
     i3 = (i2 ? i27 : i28) + i3 | 0;
     i1 = (i2 ? i31 : i29) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i34 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i30 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i31 = i30;
    i30 = i30 - i2 | 0;
    i1 = i2;
   } else {
    i30 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i31 = i30;
    i30 = i30 - i1 | 0;
   }
   i29 = i3 << 1;
   i28 = (i9 | 0) < (i34 | 0);
   i27 = i28 ? 0 - i4 | 0 : i4;
   i28 = i28 ? -1 : 1;
   i25 = (i8 | 0) < (i5 | 0);
   i26 = i25 ? 0 - i6 | 0 : i6;
   i25 = i25 ? -1 : 1;
   i19 = i1 + ((i17 | 0) != 0 & 1) | 0;
   if ((i19 | 0) <= 0) return;
   i20 = i16 + 16 | 0;
   i21 = i35 + 12 | 0;
   i22 = i35 + 16 | 0;
   i23 = i35 + 20 | 0;
   i24 = i35 + 24 | 0;
   i11 = HEAP32[i16 + 20 >> 2] | 0;
   i7 = HEAPU8[i35 + 28 >> 0] | 0;
   i12 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i35 + 29 >> 0] | 0;
   i13 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i35 + 30 >> 0] | 0;
   i14 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i10 = HEAPU8[i35 + 31 >> 0] | 0;
   i15 = HEAP32[5724 + (i10 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i6 = HEAPU8[i35 + 35 >> 0] | 0;
   i3 = i34;
   i4 = 0;
   i1 = i30;
   while (1) {
    i2 = i11 + (Math_imul(HEAP32[i20 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i35 = HEAP32[i2 >> 2] | 0;
    i33 = i38 + (HEAPU8[i12 + ((HEAP32[i21 >> 2] & i35) >>> i16) >> 0] | 0) | 0;
    i32 = i37 + (HEAPU8[i13 + ((HEAP32[i22 >> 2] & i35) >>> i17) >> 0] | 0) | 0;
    i34 = i36 + (HEAPU8[i14 + ((HEAP32[i23 >> 2] & i35) >>> i18) >> 0] | 0) | 0;
    HEAP32[i2 >> 2] = (i32 >>> 0 < 255 ? i32 : 255) >>> i8 << i17 | (i33 >>> 0 < 255 ? i33 : 255) >>> i7 << i16 | (i34 >>> 0 < 255 ? i34 : 255) >>> i9 << i18 | (HEAPU8[i15 + ((HEAP32[i24 >> 2] & i35) >>> i6) >> 0] | 0) >>> i10 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i19 | 0)) break; else {
     i5 = i5 + (i2 ? i26 : i25) | 0;
     i3 = (i2 ? i27 : i28) + i3 | 0;
     i1 = (i2 ? i31 : i29) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i34 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i30 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i31 = i30;
    i30 = i30 - i2 | 0;
    i1 = i2;
   } else {
    i30 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i31 = i30;
    i30 = i30 - i1 | 0;
   }
   i29 = i3 << 1;
   i28 = (i9 | 0) < (i34 | 0);
   i27 = i28 ? 0 - i4 | 0 : i4;
   i28 = i28 ? -1 : 1;
   i25 = (i8 | 0) < (i5 | 0);
   i26 = i25 ? 0 - i6 | 0 : i6;
   i25 = i25 ? -1 : 1;
   i19 = i1 + ((i17 | 0) != 0 & 1) | 0;
   if ((i19 | 0) <= 0) return;
   i20 = i16 + 16 | 0;
   i21 = i35 + 12 | 0;
   i22 = i35 + 16 | 0;
   i23 = i35 + 20 | 0;
   i24 = i35 + 24 | 0;
   i11 = HEAP32[i16 + 20 >> 2] | 0;
   i7 = HEAPU8[i35 + 28 >> 0] | 0;
   i12 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i35 + 29 >> 0] | 0;
   i13 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i35 + 30 >> 0] | 0;
   i14 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i10 = HEAPU8[i35 + 31 >> 0] | 0;
   i15 = HEAP32[5724 + (i10 << 2) >> 2] | 0;
   i16 = HEAPU8[i35 + 32 >> 0] | 0;
   i17 = HEAPU8[i35 + 33 >> 0] | 0;
   i18 = HEAPU8[i35 + 34 >> 0] | 0;
   i6 = HEAPU8[i35 + 35 >> 0] | 0;
   i3 = i34;
   i4 = 0;
   i1 = i30;
   while (1) {
    i2 = i11 + (Math_imul(HEAP32[i20 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i35 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i37, HEAPU8[i13 + ((HEAP32[i22 >> 2] & i35) >>> i17) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i8 << i17 | (((Math_imul(i38, HEAPU8[i12 + ((HEAP32[i21 >> 2] & i35) >>> i16) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i7 << i16 | (((Math_imul(i36, HEAPU8[i14 + ((HEAP32[i23 >> 2] & i35) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i9 << i18 | (HEAPU8[i15 + ((HEAP32[i24 >> 2] & i35) >>> i6) >> 0] | 0) >>> i10 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i19 | 0)) break; else {
     i5 = i5 + (i2 ? i26 : i25) | 0;
     i3 = (i2 ? i27 : i28) + i3 | 0;
     i1 = (i2 ? i31 : i29) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i34 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i15 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i15 = i1;
    i1 = i1 - i2 | 0;
   }
   i14 = i4 << 1;
   i13 = (i9 | 0) < (i34 | 0);
   i12 = i13 ? 0 - i6 | 0 : i6;
   i13 = i13 ? -1 : 1;
   i10 = (i8 | 0) < (i5 | 0);
   i11 = i10 ? 0 - i7 | 0 : i7;
   i10 = i10 ? -1 : 1;
   i8 = i2 + ((i17 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i9 = HEAP32[i16 + 20 >> 2] | 0;
   i7 = i16 + 16 | 0;
   i6 = i37 >>> (HEAPU8[i35 + 29 >> 0] | 0) << (HEAPU8[i35 + 33 >> 0] | 0) | i38 >>> (HEAPU8[i35 + 28 >> 0] | 0) << (HEAPU8[i35 + 32 >> 0] | 0) | i36 >>> (HEAPU8[i35 + 30 >> 0] | 0) << (HEAPU8[i35 + 34 >> 0] | 0) | i33 >>> (HEAPU8[i35 + 31 >> 0] | 0) << (HEAPU8[i35 + 35 >> 0] | 0);
   i3 = i34;
   i4 = 0;
   while (1) {
    HEAP32[i9 + (Math_imul(HEAP32[i7 >> 2] | 0, i5) | 0) + (i3 << 2) >> 2] = i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else {
     i5 = i5 + (i2 ? i11 : i10) | 0;
     i3 = (i2 ? i12 : i13) + i3 | 0;
     i1 = (i2 ? i15 : i14) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _BlitNtoNSurfaceAlpha(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i5 = HEAP32[i4 + 28 >> 2] | 0;
 i40 = HEAP32[i4 + 16 >> 2] | 0;
 i41 = HEAP32[i4 + 36 >> 2] | 0;
 i3 = HEAP32[i4 + 40 >> 2] | 0;
 i2 = HEAP32[i4 + 44 >> 2] | 0;
 i34 = HEAP8[i3 + 9 >> 0] | 0;
 i35 = i34 & 255;
 i36 = HEAP8[i2 + 9 >> 0] | 0;
 i37 = i36 & 255;
 i39 = HEAP8[i4 + 63 >> 0] | 0;
 i38 = i39 & 255;
 if (i39 << 24 >> 24 == 0 | (i5 | 0) == 0) return;
 i39 = (i1 + 3 | 0) / 4 | 0;
 i33 = i1 & 255;
 i22 = i2 + 28 | 0;
 i23 = i2 + 32 | 0;
 i24 = i2 + 29 | 0;
 i25 = i2 + 33 | 0;
 i26 = i2 + 30 | 0;
 i27 = i2 + 34 | 0;
 i28 = i2 + 31 | 0;
 i29 = i2 + 35 | 0;
 i30 = i2 + 12 | 0;
 i31 = i2 + 16 | 0;
 i32 = i2 + 20 | 0;
 i13 = i2 + 24 | 0;
 i14 = i3 + 28 | 0;
 i15 = i3 + 12 | 0;
 i16 = i3 + 32 | 0;
 i17 = i3 + 29 | 0;
 i18 = i3 + 16 | 0;
 i19 = i3 + 33 | 0;
 i20 = i3 + 30 | 0;
 i21 = i3 + 20 | 0;
 i12 = i3 + 34 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 L4 : while (1) {
  i5 = i5 + -1 | 0;
  switch (i33 & 3) {
  case 0:
   {
    i11 = i39;
    i7 = 4;
    break;
   }
  case 3:
   {
    i11 = i39;
    i7 = 21;
    break;
   }
  case 2:
   {
    i11 = i39;
    i7 = 38;
    break;
   }
  case 1:
   {
    i11 = i39;
    i7 = 55;
    break;
   }
  default:
   {
    i7 = 72;
    break L4;
   }
  }
  while (1) if ((i7 | 0) == 4) {
   i7 = 0;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 9;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 9;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = 9;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 9;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
    }
   }
   if ((i7 | 0) == 9) {
    i3 = HEAP8[i3 >> 0] | 0;
    i4 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i6 >> 0] | 0;
   }
   i8 = i3 & 255;
   i9 = i4 & 255;
   i10 = i6 & 255;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i43 = i3 & 255;
   i42 = i4 & 255;
   i3 = i6 & 255;
   i4 = i7 & 255;
   i7 = (((Math_imul(i8 - i43 | 0, i38) | 0) >>> 0) / 255 | 0) + i43 | 0;
   i6 = (((Math_imul(i9 - i42 | 0, i38) | 0) >>> 0) / 255 | 0) + i42 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i38) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i4 = i4 + i38 - (((Math_imul(i4, i38) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i35 | 0;
   i2 = i2 + i37 | 0;
   i7 = 21;
   continue;
  } else if ((i7 | 0) == 21) {
   i7 = 0;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 26;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 26;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = 26;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 26;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
    }
   }
   if ((i7 | 0) == 26) {
    i3 = HEAP8[i3 >> 0] | 0;
    i4 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i6 >> 0] | 0;
   }
   i8 = i3 & 255;
   i9 = i4 & 255;
   i10 = i6 & 255;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i42 = i3 & 255;
   i43 = i4 & 255;
   i3 = i6 & 255;
   i4 = i7 & 255;
   i7 = (((Math_imul(i8 - i42 | 0, i38) | 0) >>> 0) / 255 | 0) + i42 | 0;
   i6 = (((Math_imul(i9 - i43 | 0, i38) | 0) >>> 0) / 255 | 0) + i43 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i38) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i4 = i4 + i38 - (((Math_imul(i4, i38) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i35 | 0;
   i2 = i2 + i37 | 0;
   i7 = 38;
   continue;
  } else if ((i7 | 0) == 38) {
   i7 = 0;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 43;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 43;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = 43;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 43;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
    }
   }
   if ((i7 | 0) == 43) {
    i3 = HEAP8[i3 >> 0] | 0;
    i4 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i6 >> 0] | 0;
   }
   i8 = i3 & 255;
   i9 = i4 & 255;
   i10 = i6 & 255;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i42 = i3 & 255;
   i43 = i4 & 255;
   i3 = i6 & 255;
   i4 = i7 & 255;
   i7 = (((Math_imul(i8 - i42 | 0, i38) | 0) >>> 0) / 255 | 0) + i42 | 0;
   i6 = (((Math_imul(i9 - i43 | 0, i38) | 0) >>> 0) / 255 | 0) + i43 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i38) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i4 = i4 + i38 - (((Math_imul(i4, i38) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i35 | 0;
   i2 = i2 + i37 | 0;
   i7 = 55;
   continue;
  } else if ((i7 | 0) == 55) {
   i7 = 0;
   switch (i34 << 24 >> 24) {
   case 1:
    {
     i6 = HEAPU8[i1 >> 0] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 60;
     break;
    }
   case 2:
    {
     i6 = HEAPU16[i1 >> 1] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 60;
     break;
    }
   case 3:
    {
     i3 = i1 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i4 = i1 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i12 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = 60;
     break;
    }
   case 4:
    {
     i6 = HEAP32[i1 >> 2] | 0;
     i3 = (HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i6) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i4 = (HEAP32[5724 + ((HEAPU8[i17 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i6) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i6) >>> (HEAPU8[i12 >> 0] | 0)) | 0;
     i7 = 60;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
    }
   }
   if ((i7 | 0) == 60) {
    i3 = HEAP8[i3 >> 0] | 0;
    i4 = HEAP8[i4 >> 0] | 0;
    i6 = HEAP8[i6 >> 0] | 0;
   }
   i8 = i3 & 255;
   i9 = i4 & 255;
   i10 = i6 & 255;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i4 = HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i7) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
     i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + ((HEAPU8[i28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i4 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i42 = i3 & 255;
   i43 = i4 & 255;
   i3 = i6 & 255;
   i4 = i7 & 255;
   i7 = (((Math_imul(i8 - i42 | 0, i38) | 0) >>> 0) / 255 | 0) + i42 | 0;
   i6 = (((Math_imul(i9 - i43 | 0, i38) | 0) >>> 0) / 255 | 0) + i43 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i38) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i4 = i4 + i38 - (((Math_imul(i4, i38) | 0) >>> 0) / 255 | 0) | 0;
   switch (i36 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i24 >> 0] | 0) << (HEAPU8[i25 >> 0] | 0) | i7 >>> (HEAPU8[i22 >> 0] | 0) << (HEAPU8[i23 >> 0] | 0) | i3 >>> (HEAPU8[i26 >> 0] | 0) << (HEAPU8[i27 >> 0] | 0) | i4 >>> (HEAPU8[i28 >> 0] | 0) << (HEAPU8[i29 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + i35 | 0;
   i2 = i2 + i37 | 0;
   if ((i11 | 0) > 1) {
    i11 = i11 + -1 | 0;
    i7 = 4;
    continue;
   } else break;
  }
  if (!i5) {
   i7 = 74;
   break;
  } else {
   i1 = i1 + i40 | 0;
   i2 = i2 + i41 | 0;
  }
 }
 if ((i7 | 0) != 72) if ((i7 | 0) == 74) return;
}

function _SDL_BlendLine_RGB4(i29, i31, i5, i9, i8, i6, i1, i2, i3, i4, i10) {
 i29 = i29 | 0;
 i31 = i31 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 var i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i32 = HEAP32[i29 + 4 >> 2] | 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i30 = i4 & 255;
  i34 = ((Math_imul(i30, i1) | 0) >>> 0) / 255 | 0;
  i33 = ((Math_imul(i30, i2 & 255) | 0) >>> 0) / 255 | 0;
  i35 = ((Math_imul(i30, i3 & 255) | 0) >>> 0) / 255 | 0;
  i1 = i30;
 } else {
  i34 = i1;
  i33 = i2 & 255;
  i35 = i3 & 255;
  i1 = i4 & 255;
 }
 i30 = i1 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i29 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i31 | 0)) {
    i16 = i1 + (i9 << 2) | 0;
    i1 = (i10 | 0) != 0;
    i16 = i1 ? i16 : i16 + 4 | 0;
    i2 = i31 - i9 | 0;
   } else {
    i16 = i1 + (i31 << 2) | 0;
    i2 = i9 - i31 | 0;
    i1 = (i10 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = ((((Math_imul(i30, HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(i30, HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i4 << i14;
    i32 = ((((Math_imul(i30, HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i29 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i31 | 0)) {
    i16 = i1 + (i9 << 2) | 0;
    i1 = (i10 | 0) != 0;
    i16 = i1 ? i16 : i16 + 4 | 0;
    i2 = i31 - i9 | 0;
   } else {
    i16 = i1 + (i31 << 2) | 0;
    i2 = i9 - i31 | 0;
    i1 = (i10 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = i34 + (HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0;
    i30 = i33 + (HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0;
    i32 = i35 + (HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 < 255 ? i30 : 255) >>> i5 << i15 | (i31 >>> 0 < 255 ? i31 : 255) >>> i4 << i14 | HEAP32[i13 >> 2] | (i32 >>> 0 < 255 ? i32 : 255) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i29 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i31 | 0)) {
    i16 = i1 + (i9 << 2) | 0;
    i1 = (i10 | 0) != 0;
    i16 = i1 ? i16 : i16 + 4 | 0;
    i2 = i31 - i9 | 0;
   } else {
    i16 = i1 + (i31 << 2) | 0;
    i2 = i9 - i31 | 0;
    i1 = (i10 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(i33, HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(i34, HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i14;
    i32 = (((Math_imul(i35, HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i29 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i31 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i10 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i31 - i9 | 0;
   } else {
    i1 = i1 + (i31 << 2) | 0;
    i3 = i9 - i31 | 0;
    i2 = (i10 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i5 = i33 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i4 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i3 = i32 + 24 | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i5 | HEAP32[i3 >> 2] | i4;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i31 | 0)) switch (i6 | 0) {
 case 1:
  {
   i17 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i16 = i1 + ((Math_imul(i17, i8) | 0) << 2) + (i9 << 2) | 0;
    i1 = (i10 | 0) != 0;
    i16 = i1 ? i16 : i16 + (i17 << 2) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i16 = i1 + ((Math_imul(i17, i5) | 0) << 2) + (i9 << 2) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i10 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = ((((Math_imul(i30, HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(i30, HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i4 << i14;
    i32 = ((((Math_imul(i30, HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + (i17 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i17 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i16 = i1 + ((Math_imul(i17, i8) | 0) << 2) + (i9 << 2) | 0;
    i1 = (i10 | 0) != 0;
    i16 = i1 ? i16 : i16 + (i17 << 2) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i16 = i1 + ((Math_imul(i17, i5) | 0) << 2) + (i9 << 2) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i10 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = i34 + (HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0;
    i30 = i33 + (HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0;
    i32 = i35 + (HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 < 255 ? i30 : 255) >>> i5 << i15 | (i31 >>> 0 < 255 ? i31 : 255) >>> i4 << i14 | HEAP32[i13 >> 2] | (i32 >>> 0 < 255 ? i32 : 255) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i17 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i16 = i1 + ((Math_imul(i17, i8) | 0) << 2) + (i9 << 2) | 0;
    i1 = (i10 | 0) != 0;
    i16 = i1 ? i16 : i16 + (i17 << 2) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i16 = i1 + ((Math_imul(i17, i5) | 0) << 2) + (i9 << 2) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i10 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(i33, HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(i34, HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i14;
    i32 = (((Math_imul(i35, HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + (i17 << 2) | 0;
   }
   return;
  }
 default:
  {
   i6 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i6, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i10 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i6 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i6, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i10 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i5 = i33 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i4 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i3 = i32 + 24 | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i5 | HEAP32[i3 >> 2] | i4;
    if (!i2) break; else i1 = i1 + (i6 << 2) | 0;
   }
   return;
  }
 }
 i28 = i31 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i28 | 0) < 0 ? 0 - i28 | 0 : i28) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i16 = i3 + ((i9 | 0) > (i31 | 0) ? -1 : 1) | 0;
    i17 = (i10 | 0) == 0 ? i17 + (i16 << 2) | 0 : i17;
   } else {
    i17 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i31 << 2) | 0;
    i1 = i8 - i5 | 0;
    i16 = i3 + ((i9 | 0) < (i31 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = i17;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = ((((Math_imul(i30, HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(i30, HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i4 << i14;
    i32 = ((((Math_imul(i30, HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + (i16 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i16 = i3 + ((i9 | 0) > (i31 | 0) ? -1 : 1) | 0;
    i17 = (i10 | 0) == 0 ? i17 + (i16 << 2) | 0 : i17;
   } else {
    i17 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i31 << 2) | 0;
    i1 = i8 - i5 | 0;
    i16 = i3 + ((i9 | 0) < (i31 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = i17;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = i34 + (HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0;
    i30 = i33 + (HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0;
    i32 = i35 + (HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0;
    HEAP32[i1 >> 2] = (i30 >>> 0 < 255 ? i30 : 255) >>> i5 << i15 | (i31 >>> 0 < 255 ? i31 : 255) >>> i4 << i14 | HEAP32[i13 >> 2] | (i32 >>> 0 < 255 ? i32 : 255) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i16 = i3 + ((i9 | 0) > (i31 | 0) ? -1 : 1) | 0;
    i17 = (i10 | 0) == 0 ? i17 + (i16 << 2) | 0 : i17;
   } else {
    i17 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i31 << 2) | 0;
    i1 = i8 - i5 | 0;
    i16 = i3 + ((i9 | 0) < (i31 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i10 = i32 + 12 | 0;
   i11 = i32 + 16 | 0;
   i12 = i32 + 20 | 0;
   i13 = i32 + 24 | 0;
   i4 = HEAPU8[i32 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i5 = HEAPU8[i32 + 29 >> 0] | 0;
   i8 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i6 = HEAPU8[i32 + 30 >> 0] | 0;
   i9 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i3 = HEAPU8[i32 + 34 >> 0] | 0;
   i2 = i1;
   i1 = i17;
   while (1) {
    i2 = i2 + -1 | 0;
    i32 = HEAP32[i1 >> 2] | 0;
    i31 = (((Math_imul(i33, HEAPU8[i8 + ((HEAP32[i11 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(i34, HEAPU8[i7 + ((HEAP32[i10 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i14;
    i32 = (((Math_imul(i35, HEAPU8[i9 + ((HEAP32[i12 >> 2] & i32) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    HEAP32[i1 >> 2] = i31 | HEAP32[i13 >> 2] | i32;
    if (!i2) break; else i1 = i1 + (i16 << 2) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i29 + 16 >> 2] | 0) / (HEAPU8[i32 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i29 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i30 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i6 = i3 + ((i9 | 0) > (i31 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i10 | 0) == 0 ? i30 + (i6 << 2) | 0 : i30;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i31 << 2) | 0;
    i2 = i8 - i5 | 0;
    i6 = i3 + ((i9 | 0) < (i31 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i10 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i5 = i33 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i4 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i3 = i32 + 24 | 0;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i5 | HEAP32[i3 >> 2] | i4;
    if (!i2) break; else i1 = i1 + (i6 << 2) | 0;
   }
   return;
  }
 } else switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i31 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i28 = i27;
    i27 = i27 - i2 | 0;
    i1 = i2;
   } else {
    i27 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i28 = i27;
    i27 = i27 - i1 | 0;
   }
   i26 = i3 << 1;
   i25 = (i9 | 0) < (i31 | 0);
   i24 = i25 ? 0 - i4 | 0 : i4;
   i25 = i25 ? -1 : 1;
   i22 = (i8 | 0) < (i5 | 0);
   i23 = i22 ? 0 - i6 | 0 : i6;
   i22 = i22 ? -1 : 1;
   i16 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i16 | 0) <= 0) return;
   i17 = i29 + 16 | 0;
   i18 = i32 + 12 | 0;
   i19 = i32 + 16 | 0;
   i20 = i32 + 20 | 0;
   i21 = i32 + 24 | 0;
   i10 = HEAP32[i29 + 20 >> 2] | 0;
   i7 = HEAPU8[i32 + 28 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i32 + 29 >> 0] | 0;
   i12 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i32 + 30 >> 0] | 0;
   i13 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i6 = HEAPU8[i32 + 34 >> 0] | 0;
   i3 = i31;
   i4 = 0;
   i1 = i27;
   while (1) {
    i2 = i10 + (Math_imul(HEAP32[i17 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i32 = HEAP32[i2 >> 2] | 0;
    i31 = ((((Math_imul(i30, HEAPU8[i12 + ((HEAP32[i19 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i8 << i15 | ((((Math_imul(i30, HEAPU8[i11 + ((HEAP32[i18 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i7 << i14;
    i32 = ((((Math_imul(i30, HEAPU8[i13 + ((HEAP32[i20 >> 2] & i32) >>> i6) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i35 | 0) >>> i9 << i6;
    HEAP32[i2 >> 2] = i31 | HEAP32[i21 >> 2] | i32;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i16 | 0)) break; else {
     i5 = i5 + (i2 ? i23 : i22) | 0;
     i3 = (i2 ? i24 : i25) + i3 | 0;
     i1 = (i2 ? i28 : i26) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i31 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i28 = i27;
    i27 = i27 - i2 | 0;
    i1 = i2;
   } else {
    i27 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i28 = i27;
    i27 = i27 - i1 | 0;
   }
   i26 = i3 << 1;
   i25 = (i9 | 0) < (i31 | 0);
   i24 = i25 ? 0 - i4 | 0 : i4;
   i25 = i25 ? -1 : 1;
   i22 = (i8 | 0) < (i5 | 0);
   i23 = i22 ? 0 - i6 | 0 : i6;
   i22 = i22 ? -1 : 1;
   i16 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i16 | 0) <= 0) return;
   i17 = i29 + 16 | 0;
   i18 = i32 + 12 | 0;
   i19 = i32 + 16 | 0;
   i20 = i32 + 20 | 0;
   i21 = i32 + 24 | 0;
   i10 = HEAP32[i29 + 20 >> 2] | 0;
   i7 = HEAPU8[i32 + 28 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i32 + 29 >> 0] | 0;
   i12 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i32 + 30 >> 0] | 0;
   i13 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i6 = HEAPU8[i32 + 34 >> 0] | 0;
   i3 = i31;
   i4 = 0;
   i1 = i27;
   while (1) {
    i2 = i10 + (Math_imul(HEAP32[i17 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i32 = HEAP32[i2 >> 2] | 0;
    i31 = i34 + (HEAPU8[i11 + ((HEAP32[i18 >> 2] & i32) >>> i14) >> 0] | 0) | 0;
    i30 = i33 + (HEAPU8[i12 + ((HEAP32[i19 >> 2] & i32) >>> i15) >> 0] | 0) | 0;
    i32 = i35 + (HEAPU8[i13 + ((HEAP32[i20 >> 2] & i32) >>> i6) >> 0] | 0) | 0;
    HEAP32[i2 >> 2] = (i30 >>> 0 < 255 ? i30 : 255) >>> i8 << i15 | (i31 >>> 0 < 255 ? i31 : 255) >>> i7 << i14 | HEAP32[i21 >> 2] | (i32 >>> 0 < 255 ? i32 : 255) >>> i9 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i16 | 0)) break; else {
     i5 = i5 + (i2 ? i23 : i22) | 0;
     i3 = (i2 ? i24 : i25) + i3 | 0;
     i1 = (i2 ? i28 : i26) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i31 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i28 = i27;
    i27 = i27 - i2 | 0;
    i1 = i2;
   } else {
    i27 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i28 = i27;
    i27 = i27 - i1 | 0;
   }
   i26 = i3 << 1;
   i25 = (i9 | 0) < (i31 | 0);
   i24 = i25 ? 0 - i4 | 0 : i4;
   i25 = i25 ? -1 : 1;
   i22 = (i8 | 0) < (i5 | 0);
   i23 = i22 ? 0 - i6 | 0 : i6;
   i22 = i22 ? -1 : 1;
   i16 = i1 + ((i10 | 0) != 0 & 1) | 0;
   if ((i16 | 0) <= 0) return;
   i17 = i29 + 16 | 0;
   i18 = i32 + 12 | 0;
   i19 = i32 + 16 | 0;
   i20 = i32 + 20 | 0;
   i21 = i32 + 24 | 0;
   i10 = HEAP32[i29 + 20 >> 2] | 0;
   i7 = HEAPU8[i32 + 28 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i8 = HEAPU8[i32 + 29 >> 0] | 0;
   i12 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i9 = HEAPU8[i32 + 30 >> 0] | 0;
   i13 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i14 = HEAPU8[i32 + 32 >> 0] | 0;
   i15 = HEAPU8[i32 + 33 >> 0] | 0;
   i6 = HEAPU8[i32 + 34 >> 0] | 0;
   i3 = i31;
   i4 = 0;
   i1 = i27;
   while (1) {
    i2 = i10 + (Math_imul(HEAP32[i17 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i32 = HEAP32[i2 >> 2] | 0;
    i31 = (((Math_imul(i33, HEAPU8[i12 + ((HEAP32[i19 >> 2] & i32) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i8 << i15 | (((Math_imul(i34, HEAPU8[i11 + ((HEAP32[i18 >> 2] & i32) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i7 << i14;
    i32 = (((Math_imul(i35, HEAPU8[i13 + ((HEAP32[i20 >> 2] & i32) >>> i6) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i9 << i6;
    HEAP32[i2 >> 2] = i31 | HEAP32[i21 >> 2] | i32;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i16 | 0)) break; else {
     i5 = i5 + (i2 ? i23 : i22) | 0;
     i3 = (i2 ? i24 : i25) + i3 | 0;
     i1 = (i2 ? i28 : i26) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i31 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i17 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i17 = i1;
    i1 = i1 - i2 | 0;
   }
   i16 = i4 << 1;
   i15 = (i9 | 0) < (i31 | 0);
   i14 = i15 ? 0 - i6 | 0 : i6;
   i15 = i15 ? -1 : 1;
   i12 = (i8 | 0) < (i5 | 0);
   i13 = i12 ? 0 - i7 | 0 : i7;
   i12 = i12 ? -1 : 1;
   i10 = i2 + ((i10 | 0) != 0 & 1) | 0;
   if ((i10 | 0) <= 0) return;
   i11 = HEAP32[i29 + 20 >> 2] | 0;
   i9 = i29 + 16 | 0;
   i8 = i33 >>> (HEAPU8[i32 + 29 >> 0] | 0) << (HEAPU8[i32 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i32 + 28 >> 0] | 0) << (HEAPU8[i32 + 32 >> 0] | 0);
   i7 = i35 >>> (HEAPU8[i32 + 30 >> 0] | 0) << (HEAPU8[i32 + 34 >> 0] | 0);
   i6 = i32 + 24 | 0;
   i3 = i31;
   i4 = 0;
   while (1) {
    i2 = i11 + (Math_imul(HEAP32[i9 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    HEAP32[i2 >> 2] = i8 | HEAP32[i6 >> 2] | i7;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i10 | 0)) break; else {
     i5 = i5 + (i2 ? i13 : i12) | 0;
     i3 = (i2 ? i14 : i15) + i3 | 0;
     i1 = (i2 ? i17 : i16) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _SDL_BlendLine_RGB2(i16, i30, i5, i9, i8, i6, i1, i2, i3, i4, i18) {
 i16 = i16 | 0;
 i30 = i30 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i18 = i18 | 0;
 var i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i31 = HEAP32[i16 + 4 >> 2] | 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i29 = i4 & 255;
  i34 = ((Math_imul(i29, i1) | 0) >>> 0) / 255 | 0;
  i33 = ((Math_imul(i29, i2 & 255) | 0) >>> 0) / 255 | 0;
  i32 = ((Math_imul(i29, i3 & 255) | 0) >>> 0) / 255 | 0;
  i1 = i29;
 } else {
  i34 = i1;
  i33 = i2 & 255;
  i32 = i3 & 255;
  i1 = i4 & 255;
 }
 i29 = i1 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i16 = i1 + (i9 << 1) | 0;
    i1 = (i18 | 0) != 0;
    i16 = i1 ? i16 : i16 + 2 | 0;
    i2 = i30 - i9 | 0;
   } else {
    i16 = i1 + (i30 << 1) | 0;
    i2 = i9 - i30 | 0;
    i1 = (i18 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i29, HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(i29, HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i4 << i14 | i13 | ((((Math_imul(i29, HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i16 = i1 + (i9 << 1) | 0;
    i1 = (i18 | 0) != 0;
    i16 = i1 ? i16 : i16 + 2 | 0;
    i2 = i30 - i9 | 0;
   } else {
    i16 = i1 + (i30 << 1) | 0;
    i2 = i9 - i30 | 0;
    i1 = (i18 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = i34 + (HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0;
    i29 = i33 + (HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0;
    i31 = i32 + (HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 < 255 ? i29 : 255) >>> i5 << i15 | (i30 >>> 0 < 255 ? i30 : 255) >>> i4 << i14 | i13 | (i31 >>> 0 < 255 ? i31 : 255) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i16 = i1 + (i9 << 1) | 0;
    i1 = (i18 | 0) != 0;
    i16 = i1 ? i16 : i16 + 2 | 0;
    i2 = i30 - i9 | 0;
   } else {
    i16 = i1 + (i30 << 1) | 0;
    i2 = i9 - i30 | 0;
    i1 = (i18 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i33, HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(i34, HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i14 | i13 | (((Math_imul(i32, HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i30 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i18 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i30 - i9 | 0;
   } else {
    i1 = i1 + (i30 << 1) | 0;
    i3 = i9 - i30 | 0;
    i2 = (i18 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i32 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i30 | 0)) switch (i6 | 0) {
 case 1:
  {
   i17 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i16 = i1 + ((Math_imul(i17, i8) | 0) << 1) + (i9 << 1) | 0;
    i1 = (i18 | 0) != 0;
    i16 = i1 ? i16 : i16 + (i17 << 1) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i16 = i1 + ((Math_imul(i17, i5) | 0) << 1) + (i9 << 1) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i18 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i29, HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(i29, HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i4 << i14 | i13 | ((((Math_imul(i29, HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i17 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i16 = i1 + ((Math_imul(i17, i8) | 0) << 1) + (i9 << 1) | 0;
    i1 = (i18 | 0) != 0;
    i16 = i1 ? i16 : i16 + (i17 << 1) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i16 = i1 + ((Math_imul(i17, i5) | 0) << 1) + (i9 << 1) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i18 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = i34 + (HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0;
    i29 = i33 + (HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0;
    i31 = i32 + (HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 < 255 ? i29 : 255) >>> i5 << i15 | (i30 >>> 0 < 255 ? i30 : 255) >>> i4 << i14 | i13 | (i31 >>> 0 < 255 ? i31 : 255) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i17 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i16 = i1 + ((Math_imul(i17, i8) | 0) << 1) + (i9 << 1) | 0;
    i1 = (i18 | 0) != 0;
    i16 = i1 ? i16 : i16 + (i17 << 1) | 0;
    i2 = i5 - i8 | 0;
   } else {
    i16 = i1 + ((Math_imul(i17, i5) | 0) << 1) + (i9 << 1) | 0;
    i2 = i8 - i5 | 0;
    i1 = (i18 | 0) != 0;
   }
   i2 = i2 + (i1 & 1) | 0;
   if (!i2) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i1 = i16;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i33, HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(i34, HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i14 | i13 | (((Math_imul(i32, HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i17 << 1) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i18 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i18 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i32 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 i28 = i30 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i28 | 0) < 0 ? 0 - i28 | 0 : i28) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i16 = i3 + ((i9 | 0) > (i30 | 0) ? -1 : 1) | 0;
    i17 = (i18 | 0) == 0 ? i17 + (i16 << 1) | 0 : i17;
   } else {
    i17 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i30 << 1) | 0;
    i1 = i8 - i5 | 0;
    i16 = i3 + ((i9 | 0) < (i30 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i18 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = i17;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i29, HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i5 << i15 | ((((Math_imul(i29, HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i4 << i14 | i13 | ((((Math_imul(i29, HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i16 = i3 + ((i9 | 0) > (i30 | 0) ? -1 : 1) | 0;
    i17 = (i18 | 0) == 0 ? i17 + (i16 << 1) | 0 : i17;
   } else {
    i17 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i30 << 1) | 0;
    i1 = i8 - i5 | 0;
    i16 = i3 + ((i9 | 0) < (i30 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i18 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = i17;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    i30 = i34 + (HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0;
    i29 = i33 + (HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0;
    i31 = i32 + (HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i29 >>> 0 < 255 ? i29 : 255) >>> i5 << i15 | (i30 >>> 0 < 255 ? i30 : 255) >>> i4 << i14 | i13 | (i31 >>> 0 < 255 ? i31 : 255) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i16 = i3 + ((i9 | 0) > (i30 | 0) ? -1 : 1) | 0;
    i17 = (i18 | 0) == 0 ? i17 + (i16 << 1) | 0 : i17;
   } else {
    i17 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i30 << 1) | 0;
    i1 = i8 - i5 | 0;
    i16 = i3 + ((i9 | 0) < (i30 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i18 | 0) != 0 & 1) | 0;
   if (!i1) return;
   i4 = HEAPU8[i31 + 28 >> 0] | 0;
   i7 = HEAP32[5724 + (i4 << 2) >> 2] | 0;
   i8 = HEAP32[i31 + 12 >> 2] | 0;
   i5 = HEAPU8[i31 + 29 >> 0] | 0;
   i9 = HEAP32[5724 + (i5 << 2) >> 2] | 0;
   i10 = HEAP32[i31 + 16 >> 2] | 0;
   i6 = HEAPU8[i31 + 30 >> 0] | 0;
   i11 = HEAP32[5724 + (i6 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 20 >> 2] | 0;
   i13 = HEAP32[i31 + 24 >> 2] | 0;
   i14 = HEAPU8[i31 + 32 >> 0] | 0;
   i15 = HEAPU8[i31 + 33 >> 0] | 0;
   i3 = HEAPU8[i31 + 34 >> 0] | 0;
   i2 = i1;
   i1 = i17;
   while (1) {
    i2 = i2 + -1 | 0;
    i31 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i33, HEAPU8[i9 + ((i10 & i31) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i5 << i15 | (((Math_imul(i34, HEAPU8[i7 + ((i8 & i31) >>> i14) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i4 << i14 | i13 | (((Math_imul(i32, HEAPU8[i11 + ((i12 & i31) >>> i3) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i6 << i3;
    if (!i2) break; else i1 = i1 + (i16 << 1) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[i31 + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i16 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i29 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i4 = i3 + ((i9 | 0) > (i30 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i18 | 0) == 0 ? i29 + (i4 << 1) | 0 : i29;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i30 << 1) | 0;
    i2 = i8 - i5 | 0;
    i4 = i3 + ((i9 | 0) < (i30 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i18 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i32 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 } else switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i30 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i28 = i27;
    i27 = i27 - i2 | 0;
    i1 = i2;
   } else {
    i27 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i28 = i27;
    i27 = i27 - i1 | 0;
   }
   i26 = i3 << 1;
   i25 = (i9 | 0) < (i30 | 0);
   i24 = i25 ? 0 - i4 | 0 : i4;
   i25 = i25 ? -1 : 1;
   i22 = (i8 | 0) < (i5 | 0);
   i23 = i22 ? 0 - i6 | 0 : i6;
   i22 = i22 ? -1 : 1;
   i20 = i1 + ((i18 | 0) != 0 & 1) | 0;
   if ((i20 | 0) <= 0) return;
   i21 = HEAP32[i16 + 20 >> 2] | 0;
   i10 = HEAP32[i16 + 16 >> 2] | 0;
   i7 = HEAPU8[i31 + 28 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 12 >> 2] | 0;
   i8 = HEAPU8[i31 + 29 >> 0] | 0;
   i13 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i14 = HEAP32[i31 + 16 >> 2] | 0;
   i9 = HEAPU8[i31 + 30 >> 0] | 0;
   i15 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i16 = HEAP32[i31 + 20 >> 2] | 0;
   i17 = HEAP32[i31 + 24 >> 2] | 0;
   i18 = HEAPU8[i31 + 32 >> 0] | 0;
   i19 = HEAPU8[i31 + 33 >> 0] | 0;
   i6 = HEAPU8[i31 + 34 >> 0] | 0;
   i3 = i30;
   i4 = 0;
   i1 = i27;
   while (1) {
    i2 = i21 + (Math_imul(i10, i5) | 0) + (i3 << 1) | 0;
    i31 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = ((((Math_imul(i29, HEAPU8[i13 + ((i14 & i31) >>> i19) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i33 | 0) >>> i8 << i19 | ((((Math_imul(i29, HEAPU8[i11 + ((i12 & i31) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i34 | 0) >>> i7 << i18 | i17 | ((((Math_imul(i29, HEAPU8[i15 + ((i16 & i31) >>> i6) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> i9 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i20 | 0)) break; else {
     i5 = i5 + (i2 ? i23 : i22) | 0;
     i3 = (i2 ? i24 : i25) + i3 | 0;
     i1 = (i2 ? i28 : i26) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i30 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i28 = i27;
    i27 = i27 - i2 | 0;
    i1 = i2;
   } else {
    i27 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i28 = i27;
    i27 = i27 - i1 | 0;
   }
   i26 = i3 << 1;
   i25 = (i9 | 0) < (i30 | 0);
   i24 = i25 ? 0 - i4 | 0 : i4;
   i25 = i25 ? -1 : 1;
   i22 = (i8 | 0) < (i5 | 0);
   i23 = i22 ? 0 - i6 | 0 : i6;
   i22 = i22 ? -1 : 1;
   i20 = i1 + ((i18 | 0) != 0 & 1) | 0;
   if ((i20 | 0) <= 0) return;
   i21 = HEAP32[i16 + 20 >> 2] | 0;
   i10 = HEAP32[i16 + 16 >> 2] | 0;
   i7 = HEAPU8[i31 + 28 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 12 >> 2] | 0;
   i8 = HEAPU8[i31 + 29 >> 0] | 0;
   i13 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i14 = HEAP32[i31 + 16 >> 2] | 0;
   i9 = HEAPU8[i31 + 30 >> 0] | 0;
   i15 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i16 = HEAP32[i31 + 20 >> 2] | 0;
   i17 = HEAP32[i31 + 24 >> 2] | 0;
   i18 = HEAPU8[i31 + 32 >> 0] | 0;
   i19 = HEAPU8[i31 + 33 >> 0] | 0;
   i6 = HEAPU8[i31 + 34 >> 0] | 0;
   i3 = i30;
   i4 = 0;
   i1 = i27;
   while (1) {
    i2 = i21 + (Math_imul(i10, i5) | 0) + (i3 << 1) | 0;
    i31 = HEAPU16[i2 >> 1] | 0;
    i30 = i34 + (HEAPU8[i11 + ((i12 & i31) >>> i18) >> 0] | 0) | 0;
    i29 = i33 + (HEAPU8[i13 + ((i14 & i31) >>> i19) >> 0] | 0) | 0;
    i31 = i32 + (HEAPU8[i15 + ((i16 & i31) >>> i6) >> 0] | 0) | 0;
    HEAP16[i2 >> 1] = (i29 >>> 0 < 255 ? i29 : 255) >>> i8 << i19 | (i30 >>> 0 < 255 ? i30 : 255) >>> i7 << i18 | i17 | (i31 >>> 0 < 255 ? i31 : 255) >>> i9 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i20 | 0)) break; else {
     i5 = i5 + (i2 ? i23 : i22) | 0;
     i3 = (i2 ? i24 : i25) + i3 | 0;
     i1 = (i2 ? i28 : i26) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i30 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i27 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i28 = i27;
    i27 = i27 - i2 | 0;
    i1 = i2;
   } else {
    i27 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i28 = i27;
    i27 = i27 - i1 | 0;
   }
   i26 = i3 << 1;
   i25 = (i9 | 0) < (i30 | 0);
   i24 = i25 ? 0 - i4 | 0 : i4;
   i25 = i25 ? -1 : 1;
   i22 = (i8 | 0) < (i5 | 0);
   i23 = i22 ? 0 - i6 | 0 : i6;
   i22 = i22 ? -1 : 1;
   i20 = i1 + ((i18 | 0) != 0 & 1) | 0;
   if ((i20 | 0) <= 0) return;
   i21 = HEAP32[i16 + 20 >> 2] | 0;
   i10 = HEAP32[i16 + 16 >> 2] | 0;
   i7 = HEAPU8[i31 + 28 >> 0] | 0;
   i11 = HEAP32[5724 + (i7 << 2) >> 2] | 0;
   i12 = HEAP32[i31 + 12 >> 2] | 0;
   i8 = HEAPU8[i31 + 29 >> 0] | 0;
   i13 = HEAP32[5724 + (i8 << 2) >> 2] | 0;
   i14 = HEAP32[i31 + 16 >> 2] | 0;
   i9 = HEAPU8[i31 + 30 >> 0] | 0;
   i15 = HEAP32[5724 + (i9 << 2) >> 2] | 0;
   i16 = HEAP32[i31 + 20 >> 2] | 0;
   i17 = HEAP32[i31 + 24 >> 2] | 0;
   i18 = HEAPU8[i31 + 32 >> 0] | 0;
   i19 = HEAPU8[i31 + 33 >> 0] | 0;
   i6 = HEAPU8[i31 + 34 >> 0] | 0;
   i3 = i30;
   i4 = 0;
   i1 = i27;
   while (1) {
    i2 = i21 + (Math_imul(i10, i5) | 0) + (i3 << 1) | 0;
    i31 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = (((Math_imul(i33, HEAPU8[i13 + ((i14 & i31) >>> i19) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i8 << i19 | (((Math_imul(i34, HEAPU8[i11 + ((i12 & i31) >>> i18) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i7 << i18 | i17 | (((Math_imul(i32, HEAPU8[i15 + ((i16 & i31) >>> i6) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> i9 << i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i20 | 0)) break; else {
     i5 = i5 + (i2 ? i23 : i22) | 0;
     i3 = (i2 ? i24 : i25) + i3 | 0;
     i1 = (i2 ? i28 : i26) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i30 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i15 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i15 = i1;
    i1 = i1 - i2 | 0;
   }
   i14 = i4 << 1;
   i13 = (i9 | 0) < (i30 | 0);
   i12 = i13 ? 0 - i6 | 0 : i6;
   i13 = i13 ? -1 : 1;
   i10 = (i8 | 0) < (i5 | 0);
   i11 = i10 ? 0 - i7 | 0 : i7;
   i10 = i10 ? -1 : 1;
   i8 = i2 + ((i18 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i9 = HEAP32[i16 + 20 >> 2] | 0;
   i7 = HEAP32[i16 + 16 >> 2] | 0;
   i6 = (i33 >>> (HEAPU8[i31 + 29 >> 0] | 0) << (HEAPU8[i31 + 33 >> 0] | 0) | i34 >>> (HEAPU8[i31 + 28 >> 0] | 0) << (HEAPU8[i31 + 32 >> 0] | 0) | HEAP32[i31 + 24 >> 2] | i32 >>> (HEAPU8[i31 + 30 >> 0] | 0) << (HEAPU8[i31 + 34 >> 0] | 0)) & 65535;
   i3 = i30;
   i4 = 0;
   while (1) {
    HEAP16[i9 + (Math_imul(i7, i5) | 0) + (i3 << 1) >> 1] = i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else {
     i5 = i5 + (i2 ? i11 : i10) | 0;
     i3 = (i2 ? i12 : i13) + i3 | 0;
     i1 = (i2 ? i15 : i14) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _BlitNto2101010(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i28 = HEAP32[i3 + 16 >> 2] | 0;
 i29 = HEAP32[i3 + 36 >> 2] | 0;
 i2 = HEAP32[i3 + 40 >> 2] | 0;
 i25 = HEAP8[i2 + 9 >> 0] | 0;
 i26 = i25 & 255;
 if (!i4) return;
 i27 = (i1 + 7 | 0) / 8 | 0;
 i24 = i1 & 255;
 i13 = i2 + 28 | 0;
 i14 = i2 + 12 | 0;
 i15 = i2 + 32 | 0;
 i16 = i2 + 29 | 0;
 i17 = i2 + 16 | 0;
 i18 = i2 + 33 | 0;
 i19 = i2 + 30 | 0;
 i20 = i2 + 20 | 0;
 i21 = i2 + 34 | 0;
 i22 = i2 + 31 | 0;
 i23 = i2 + 24 | 0;
 i12 = i2 + 35 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i24 & 7) {
  case 0:
   {
    i10 = i27;
    i11 = 4;
    break;
   }
  case 7:
   {
    i10 = i27;
    i11 = 11;
    break;
   }
  case 6:
   {
    i10 = i27;
    i11 = 18;
    break;
   }
  case 5:
   {
    i10 = i27;
    i11 = 25;
    break;
   }
  case 4:
   {
    i10 = i27;
    i11 = 32;
    break;
   }
  case 3:
   {
    i10 = i27;
    i11 = 39;
    break;
   }
  case 2:
   {
    i10 = i27;
    i11 = 46;
    break;
   }
  case 1:
   {
    i10 = i27;
    i11 = 53;
    break;
   }
  default:
   {
    i11 = 60;
    break L4;
   }
  }
  while (1) if ((i11 | 0) == 4) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 9;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 9;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 9;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 9;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 9) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 11;
   continue;
  } else if ((i11 | 0) == 11) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 16;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 16;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 16;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 16;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 16) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 18;
   continue;
  } else if ((i11 | 0) == 18) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 23;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 23;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 23;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 23;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 23) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 25;
   continue;
  } else if ((i11 | 0) == 25) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 30;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 30;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 30;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 30;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 30) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 32;
   continue;
  } else if ((i11 | 0) == 32) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 37;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 37;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 37;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 37;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 37) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 39;
   continue;
  } else if ((i11 | 0) == 39) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 44;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 44;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 44;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 44;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 44) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 46;
   continue;
  } else if ((i11 | 0) == 46) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 51;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 51;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 51;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 51;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 51) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i1 = i1 + i26 | 0;
   i2 = i2 + 4 | 0;
   i11 = 53;
   continue;
  } else if ((i11 | 0) == 53) {
   i11 = 0;
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i1 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 58;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i1 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 58;
     break;
    }
   case 3:
    {
     i3 = -1;
     i5 = i1 + ((HEAPU8[i21 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i1 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i7 = i1 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i11 = 58;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
     i5 = (HEAP32[5724 + ((HEAPU8[i19 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i7) >>> (HEAPU8[i21 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i7 = (HEAP32[5724 + ((HEAPU8[i13 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i11 = 58;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
     i8 = 0;
     i9 = 0;
    }
   }
   if ((i11 | 0) == 58) {
    i11 = HEAP8[i5 >> 0] | 0;
    i8 = HEAP8[i6 >> 0] | 0;
    i9 = HEAP8[i7 >> 0] | 0;
    i5 = i11;
    i6 = i11 & 255;
    i7 = i8;
    i8 = i8 & 255;
    i9 = i9 << 24 >> 24 == 0 ? 0 : (i9 & 255) << 22 | 3145728;
   }
   HEAP32[i2 >> 2] = (((i3 & 255) / 85 | 0) & 255) << 30 | i9 | (i5 << 24 >> 24 == 0 ? 0 : i6 << 2 | 3) | (i7 << 24 >> 24 == 0 ? 0 : i8 << 12 | 3072);
   i2 = i2 + 4 | 0;
   i1 = i1 + i26 | 0;
   if ((i10 | 0) > 1) {
    i10 = i10 + -1 | 0;
    i11 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i11 = 62;
   break;
  } else {
   i1 = i1 + i28 | 0;
   i2 = i2 + i29 | 0;
  }
 }
 if ((i11 | 0) != 60) if ((i11 | 0) == 62) return;
}

function _BlitNto1SurfaceAlphaKey(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i29 = HEAP32[i3 + 16 >> 2] | 0;
 i30 = HEAP32[i3 + 36 >> 2] | 0;
 i23 = HEAP32[i3 + 48 >> 2] | 0;
 i2 = HEAP32[i3 + 40 >> 2] | 0;
 i24 = HEAP8[i2 + 9 >> 0] | 0;
 i25 = i24 & 255;
 i26 = HEAP32[i3 + 56 >> 2] | 0;
 i27 = HEAPU8[i3 + 63 >> 0] | 0;
 if (!i4) return;
 i28 = (i1 + 7 | 0) / 8 | 0;
 i22 = i1 & 255;
 i12 = (HEAP32[i3 + 44 >> 2] | 0) + 4 | 0;
 i13 = (i23 | 0) == 0;
 i14 = i2 + 28 | 0;
 i15 = i2 + 12 | 0;
 i16 = i2 + 32 | 0;
 i17 = i2 + 29 | 0;
 i18 = i2 + 16 | 0;
 i19 = i2 + 33 | 0;
 i20 = i2 + 30 | 0;
 i21 = i2 + 20 | 0;
 i11 = i2 + 34 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i22 & 7) {
  case 0:
   {
    i9 = i28;
    i8 = i1;
    i10 = 4;
    break;
   }
  case 7:
   {
    i9 = i28;
    i8 = i1;
    i10 = 16;
    break;
   }
  case 6:
   {
    i9 = i28;
    i8 = i1;
    i10 = 28;
    break;
   }
  case 5:
   {
    i9 = i28;
    i8 = i1;
    i10 = 40;
    break;
   }
  case 4:
   {
    i9 = i28;
    i8 = i1;
    i10 = 52;
    break;
   }
  case 3:
   {
    i9 = i28;
    i8 = i1;
    i10 = 64;
    break;
   }
  case 2:
   {
    i9 = i28;
    i8 = i1;
    i10 = 76;
    break;
   }
  case 1:
   {
    i9 = i28;
    i8 = i1;
    i10 = 88;
    break;
   }
  default:
   {
    i10 = 100;
    break L4;
   }
  }
  while (1) if ((i10 | 0) == 4) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 9;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 9;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 9;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 9;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 9) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 16;
   continue;
  } else if ((i10 | 0) == 16) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 21;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 21;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 21;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 21;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 21) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 28;
   continue;
  } else if ((i10 | 0) == 28) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 33;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 33;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 33;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 33;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 33) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 40;
   continue;
  } else if ((i10 | 0) == 40) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 45;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 45;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 45;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 45;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 45) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 52;
   continue;
  } else if ((i10 | 0) == 52) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 57;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 57;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 57;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 57;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 57) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 64;
   continue;
  } else if ((i10 | 0) == 64) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 69;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 69;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 69;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 69;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 69) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 76;
   continue;
  } else if ((i10 | 0) == 76) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 81;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 81;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 81;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 81;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 81) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i8 = i8 + i25 | 0;
   i2 = i2 + 1 | 0;
   i10 = 88;
   continue;
  } else if ((i10 | 0) == 88) {
   i10 = 0;
   switch (i24 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i8 >> 0] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 93;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i8 >> 1] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 93;
     break;
    }
   case 3:
    {
     i5 = i8 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i8 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = 0;
     i3 = i8 + ((HEAPU8[i11 >> 0] | 0) >>> 3 & 255) | 0;
     i10 = 93;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i8 >> 2] | 0;
     i5 = (HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i18 >> 2] & i3) >>> (HEAPU8[i19 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i14 >> 0] << 2) >> 2] | 0) + ((HEAP32[i15 >> 2] & i3) >>> (HEAPU8[i16 >> 0] | 0)) | 0;
     i1 = i3;
     i3 = (HEAP32[5724 + (HEAPU8[i20 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i11 >> 0] | 0)) | 0;
     i10 = 93;
     break;
    }
   default:
    {
     i7 = 0;
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i10 | 0) == 93) {
    i7 = HEAP8[i3 >> 0] | 0;
    i5 = HEAP8[i5 >> 0] | 0;
    i3 = HEAP8[i6 >> 0] | 0;
   }
   if ((i1 | 0) != (i26 | 0)) {
    i10 = HEAP32[(HEAP32[i12 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAPU8[i2 >> 0] | 0;
    i1 = i10 + (i1 << 2) | 0;
    i10 = HEAPU8[i1 >> 0] | 0;
    i6 = HEAPU8[i1 + 1 >> 0] | 0;
    i1 = HEAPU8[i1 + 2 >> 0] | 0;
    i1 = ((((Math_imul((i5 & 255) - i6 | 0, i27) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i3 & 255) - i10 | 0, i27) | 0) >>> 0) / 255 | 0) + i10 & 224 | ((((Math_imul((i7 & 255) - i1 | 0, i27) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
    if (i13) i1 = i1 & 255; else i1 = HEAP8[i23 + i1 >> 0] | 0;
    HEAP8[i2 >> 0] = i1;
   }
   i2 = i2 + 1 | 0;
   i1 = i8 + i25 | 0;
   if ((i9 | 0) > 1) {
    i9 = i9 + -1 | 0;
    i8 = i1;
    i10 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i10 = 102;
   break;
  } else {
   i1 = i1 + i29 | 0;
   i2 = i2 + i30 | 0;
  }
 }
 if ((i10 | 0) != 100) if ((i10 | 0) == 102) return;
}

function _BlitNtoNSurfaceAlphaKey(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i1 = HEAP32[i5 + 24 >> 2] | 0;
 i6 = HEAP32[i5 + 28 >> 2] | 0;
 i42 = HEAP32[i5 + 16 >> 2] | 0;
 i43 = HEAP32[i5 + 36 >> 2] | 0;
 i3 = HEAP32[i5 + 40 >> 2] | 0;
 i4 = HEAP32[i5 + 44 >> 2] | 0;
 i35 = HEAP32[i5 + 56 >> 2] | 0;
 i36 = HEAP8[i3 + 9 >> 0] | 0;
 i37 = i36 & 255;
 i38 = HEAP8[i4 + 9 >> 0] | 0;
 i39 = i38 & 255;
 i2 = HEAP8[i5 + 63 >> 0] | 0;
 i40 = i2 & 255;
 if (!i6) return;
 i41 = (i1 + 3 | 0) / 4 | 0;
 i34 = i1 & 255;
 i25 = i2 << 24 >> 24 == 0;
 i26 = i3 + 28 | 0;
 i27 = i3 + 12 | 0;
 i28 = i3 + 32 | 0;
 i29 = i3 + 29 | 0;
 i30 = i3 + 16 | 0;
 i31 = i3 + 33 | 0;
 i32 = i3 + 30 | 0;
 i33 = i3 + 20 | 0;
 i13 = i3 + 34 | 0;
 i14 = i4 + 28 | 0;
 i15 = i4 + 32 | 0;
 i16 = i4 + 29 | 0;
 i17 = i4 + 33 | 0;
 i18 = i4 + 30 | 0;
 i19 = i4 + 34 | 0;
 i20 = i4 + 31 | 0;
 i21 = i4 + 35 | 0;
 i22 = i4 + 12 | 0;
 i23 = i4 + 16 | 0;
 i24 = i4 + 20 | 0;
 i12 = i4 + 24 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i5 + 20 >> 2] | 0;
 L4 : while (1) {
  i6 = i6 + -1 | 0;
  switch (i34 & 3) {
  case 0:
   {
    i11 = i41;
    i10 = i2;
    i2 = 4;
    break;
   }
  case 3:
   {
    i11 = i41;
    i10 = i2;
    i2 = 21;
    break;
   }
  case 2:
   {
    i11 = i41;
    i10 = i2;
    i2 = 38;
    break;
   }
  case 1:
   {
    i11 = i41;
    i10 = i2;
    i2 = 55;
    break;
   }
  default:
   {
    i2 = 72;
    break L4;
   }
  }
  while (1) if ((i2 | 0) == 4) {
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i2 = 0;
   }
   L15 : do if (!(i25 | (i2 | 0) == (i35 | 0))) {
    i7 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i2) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i9 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i2) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i2) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      i5 = HEAPU8[i10 >> 0] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i5 = HEAPU16[i10 >> 1] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i2 = HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = -1;
      break;
     }
    case 4:
     {
      i5 = HEAP32[i10 >> 2] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i2 = 0;
      i3 = 0;
      i4 = 0;
      i5 = 0;
     }
    }
    i45 = i2 & 255;
    i44 = i3 & 255;
    i2 = i4 & 255;
    i3 = i5 & 255;
    i5 = (((Math_imul(i7 - i45 | 0, i40) | 0) >>> 0) / 255 | 0) + i45 | 0;
    i4 = (((Math_imul(i9 - i44 | 0, i40) | 0) >>> 0) / 255 | 0) + i44 | 0;
    i2 = (((Math_imul(i8 - i2 | 0, i40) | 0) >>> 0) / 255 | 0) + i2 | 0;
    i3 = i3 + i40 - (((Math_imul(i3, i40) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      HEAP8[i10 >> 0] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L15;
     }
    case 2:
     {
      HEAP16[i10 >> 1] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L15;
     }
    case 3:
     {
      HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i2;
      break L15;
     }
    case 4:
     {
      HEAP32[i10 >> 2] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L15;
     }
    default:
     break L15;
    }
   } while (0);
   i1 = i1 + i37 | 0;
   i10 = i10 + i39 | 0;
   i2 = 21;
   continue;
  } else if ((i2 | 0) == 21) {
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i2 = 0;
   }
   L36 : do if (!(i25 | (i2 | 0) == (i35 | 0))) {
    i7 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i2) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i2) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i9 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i2) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      i5 = HEAPU8[i10 >> 0] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i5 = HEAPU16[i10 >> 1] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i2 = HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = -1;
      break;
     }
    case 4:
     {
      i5 = HEAP32[i10 >> 2] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i2 = 0;
      i3 = 0;
      i4 = 0;
      i5 = 0;
     }
    }
    i44 = i2 & 255;
    i45 = i3 & 255;
    i2 = i4 & 255;
    i3 = i5 & 255;
    i5 = (((Math_imul(i7 - i44 | 0, i40) | 0) >>> 0) / 255 | 0) + i44 | 0;
    i4 = (((Math_imul(i8 - i45 | 0, i40) | 0) >>> 0) / 255 | 0) + i45 | 0;
    i2 = (((Math_imul(i9 - i2 | 0, i40) | 0) >>> 0) / 255 | 0) + i2 | 0;
    i3 = i3 + i40 - (((Math_imul(i3, i40) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      HEAP8[i10 >> 0] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L36;
     }
    case 2:
     {
      HEAP16[i10 >> 1] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L36;
     }
    case 3:
     {
      HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i2;
      break L36;
     }
    case 4:
     {
      HEAP32[i10 >> 2] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L36;
     }
    default:
     break L36;
    }
   } while (0);
   i1 = i1 + i37 | 0;
   i10 = i10 + i39 | 0;
   i2 = 38;
   continue;
  } else if ((i2 | 0) == 38) {
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i2 = 0;
   }
   L57 : do if (!(i25 | (i2 | 0) == (i35 | 0))) {
    i7 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i2) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i2) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i9 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i2) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      i5 = HEAPU8[i10 >> 0] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i5 = HEAPU16[i10 >> 1] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i2 = HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = -1;
      break;
     }
    case 4:
     {
      i5 = HEAP32[i10 >> 2] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i2 = 0;
      i3 = 0;
      i4 = 0;
      i5 = 0;
     }
    }
    i44 = i2 & 255;
    i45 = i3 & 255;
    i2 = i4 & 255;
    i3 = i5 & 255;
    i5 = (((Math_imul(i7 - i44 | 0, i40) | 0) >>> 0) / 255 | 0) + i44 | 0;
    i4 = (((Math_imul(i8 - i45 | 0, i40) | 0) >>> 0) / 255 | 0) + i45 | 0;
    i2 = (((Math_imul(i9 - i2 | 0, i40) | 0) >>> 0) / 255 | 0) + i2 | 0;
    i3 = i3 + i40 - (((Math_imul(i3, i40) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      HEAP8[i10 >> 0] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L57;
     }
    case 2:
     {
      HEAP16[i10 >> 1] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L57;
     }
    case 3:
     {
      HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i2;
      break L57;
     }
    case 4:
     {
      HEAP32[i10 >> 2] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L57;
     }
    default:
     break L57;
    }
   } while (0);
   i1 = i1 + i37 | 0;
   i10 = i10 + i39 | 0;
   i2 = 55;
   continue;
  } else if ((i2 | 0) == 55) {
   switch (i36 << 24 >> 24) {
   case 1:
    {
     i2 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i2 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i2 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i2 = 0;
   }
   L78 : do if (!(i25 | (i2 | 0) == (i35 | 0))) {
    i7 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i2) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
    i8 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i30 >> 2] & i2) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
    i9 = HEAPU8[(HEAP32[5724 + ((HEAPU8[i32 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i2) >>> (HEAPU8[i13 >> 0] | 0)) >> 0] | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      i5 = HEAPU8[i10 >> 0] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i5 = HEAPU16[i10 >> 1] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i2 = HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i3 = HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i4 = HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i5 = -1;
      break;
     }
    case 4:
     {
      i5 = HEAP32[i10 >> 2] | 0;
      i2 = HEAP8[(HEAP32[5724 + ((HEAPU8[i14 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i15 >> 0] | 0)) >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i16 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i5) >>> (HEAPU8[i19 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i5) >>> (HEAPU8[i21 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i2 = 0;
      i3 = 0;
      i4 = 0;
      i5 = 0;
     }
    }
    i44 = i2 & 255;
    i45 = i3 & 255;
    i2 = i4 & 255;
    i3 = i5 & 255;
    i5 = (((Math_imul(i7 - i44 | 0, i40) | 0) >>> 0) / 255 | 0) + i44 | 0;
    i4 = (((Math_imul(i8 - i45 | 0, i40) | 0) >>> 0) / 255 | 0) + i45 | 0;
    i2 = (((Math_imul(i9 - i2 | 0, i40) | 0) >>> 0) / 255 | 0) + i2 | 0;
    i3 = i3 + i40 - (((Math_imul(i3, i40) | 0) >>> 0) / 255 | 0) | 0;
    switch (i38 << 24 >> 24) {
    case 1:
     {
      HEAP8[i10 >> 0] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L78;
     }
    case 2:
     {
      HEAP16[i10 >> 1] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L78;
     }
    case 3:
     {
      HEAP8[i10 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
      HEAP8[i10 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      HEAP8[i10 + ((HEAPU8[i19 >> 0] | 0) >>> 3 & 255) >> 0] = i2;
      break L78;
     }
    case 4:
     {
      HEAP32[i10 >> 2] = i4 >>> (HEAPU8[i16 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0) | i5 >>> (HEAPU8[i14 >> 0] | 0) << (HEAPU8[i15 >> 0] | 0) | i2 >>> (HEAPU8[i18 >> 0] | 0) << (HEAPU8[i19 >> 0] | 0) | i3 >>> (HEAPU8[i20 >> 0] | 0) << (HEAPU8[i21 >> 0] | 0);
      break L78;
     }
    default:
     break L78;
    }
   } while (0);
   i1 = i1 + i37 | 0;
   i2 = i10 + i39 | 0;
   if ((i11 | 0) > 1) {
    i11 = i11 + -1 | 0;
    i10 = i2;
    i2 = 4;
    continue;
   } else break;
  }
  if (!i6) {
   i2 = 74;
   break;
  } else {
   i1 = i1 + i42 | 0;
   i2 = i2 + i43 | 0;
  }
 }
 if ((i2 | 0) != 72) if ((i2 | 0) == 74) return;
}

function _BlitNtoNKey(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 i1 = HEAP32[i4 + 24 >> 2] | 0;
 i5 = HEAP32[i4 + 28 >> 2] | 0;
 i38 = HEAP32[i4 + 16 >> 2] | 0;
 i29 = HEAP32[i4 + 36 >> 2] | 0;
 i2 = HEAP32[i4 + 40 >> 2] | 0;
 i3 = HEAP32[i4 + 44 >> 2] | 0;
 i31 = HEAP8[i2 + 9 >> 0] | 0;
 i32 = i31 & 255;
 i33 = HEAP8[i3 + 9 >> 0] | 0;
 i34 = i33 & 255;
 if (!(HEAP32[i3 + 24 >> 2] | 0)) i30 = 0; else i30 = HEAPU8[i4 + 63 >> 0] | 0;
 i35 = ~HEAP32[i2 + 24 >> 2];
 i36 = HEAP32[i4 + 56 >> 2] & i35;
 if (!i5) return;
 i37 = (i1 + 7 | 0) / 8 | 0;
 i28 = i1 & 255;
 i20 = i2 + 28 | 0;
 i21 = i2 + 12 | 0;
 i22 = i2 + 32 | 0;
 i23 = i2 + 29 | 0;
 i24 = i2 + 16 | 0;
 i25 = i2 + 33 | 0;
 i26 = i2 + 30 | 0;
 i27 = i2 + 20 | 0;
 i12 = i2 + 34 | 0;
 i13 = i3 + 28 | 0;
 i14 = i3 + 32 | 0;
 i15 = i3 + 29 | 0;
 i16 = i3 + 33 | 0;
 i17 = i3 + 30 | 0;
 i18 = i3 + 34 | 0;
 i19 = i3 + 31 | 0;
 i11 = i3 + 35 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i4 + 20 >> 2] | 0;
 L7 : while (1) {
  i5 = i5 + -1 | 0;
  switch (i28 & 7) {
  case 0:
   {
    i10 = i37;
    i3 = 6;
    break;
   }
  case 7:
   {
    i10 = i37;
    i3 = 18;
    break;
   }
  case 6:
   {
    i10 = i37;
    i3 = 30;
    break;
   }
  case 5:
   {
    i10 = i37;
    i3 = 42;
    break;
   }
  case 4:
   {
    i10 = i37;
    i3 = 54;
    break;
   }
  case 3:
   {
    i10 = i37;
    i3 = 66;
    break;
   }
  case 2:
   {
    i10 = i37;
    i3 = 78;
    break;
   }
  case 1:
   {
    i10 = i37;
    i3 = 90;
    break;
   }
  default:
   {
    i3 = 102;
    break L7;
   }
  }
  while (1) if ((i3 | 0) == 6) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L18 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L18;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L18;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L18;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L18;
     }
    default:
     break L18;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 18;
   continue;
  } else if ((i3 | 0) == 18) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L33 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L33;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L33;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L33;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L33;
     }
    default:
     break L33;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 30;
   continue;
  } else if ((i3 | 0) == 30) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L48 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L48;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L48;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L48;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L48;
     }
    default:
     break L48;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 42;
   continue;
  } else if ((i3 | 0) == 42) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L63 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L63;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L63;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L63;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L63;
     }
    default:
     break L63;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 54;
   continue;
  } else if ((i3 | 0) == 54) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L78 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L78;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L78;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L78;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L78;
     }
    default:
     break L78;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 66;
   continue;
  } else if ((i3 | 0) == 66) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L93 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L93;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L93;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L93;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L93;
     }
    default:
     break L93;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 78;
   continue;
  } else if ((i3 | 0) == 78) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L108 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L108;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L108;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L108;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L108;
     }
    default:
     break L108;
    }
   } while (0);
   i1 = i1 + i32 | 0;
   i2 = i2 + i34 | 0;
   i3 = 90;
   continue;
  } else if ((i3 | 0) == 90) {
   switch (i31 << 24 >> 24) {
   case 1:
    {
     i3 = HEAPU8[i1 >> 0] | 0;
     break;
    }
   case 2:
    {
     i3 = HEAPU16[i1 >> 1] | 0;
     break;
    }
   case 3:
    {
     i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16;
     break;
    }
   case 4:
    {
     i3 = HEAP32[i1 >> 2] | 0;
     break;
    }
   default:
    i3 = 0;
   }
   L123 : do if ((i3 & i35 | 0) != (i36 | 0)) {
    i6 = HEAP8[(HEAP32[5724 + ((HEAPU8[i20 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i3) >>> (HEAPU8[i22 >> 0] | 0)) >> 0] | 0;
    i7 = i6 & 255;
    i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i24 >> 2] & i3) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
    i9 = i8 & 255;
    i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i26 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i27 >> 2] & i3) >>> (HEAPU8[i12 >> 0] | 0)) >> 0] | 0;
    i4 = i3 & 255;
    switch (i33 << 24 >> 24) {
    case 1:
     {
      HEAP8[i2 >> 0] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L123;
     }
    case 2:
     {
      HEAP16[i2 >> 1] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L123;
     }
    case 3:
     {
      HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
      break L123;
     }
    case 4:
     {
      HEAP32[i2 >> 2] = i9 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i7 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i4 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i30 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i11 >> 0] | 0);
      break L123;
     }
    default:
     break L123;
    }
   } while (0);
   i2 = i2 + i34 | 0;
   i1 = i1 + i32 | 0;
   if ((i10 | 0) > 1) {
    i10 = i10 + -1 | 0;
    i3 = 6;
    continue;
   } else break;
  }
  if (!i5) {
   i3 = 104;
   break;
  } else {
   i1 = i1 + i38 | 0;
   i2 = i2 + i29 | 0;
  }
 }
 if ((i3 | 0) != 102) if ((i3 | 0) == 104) return;
}

function _SDLgfx_rotateSurface(i34, d13, i26, i30, i15, i29, i28, i5, i14, d12, d11) {
 i34 = i34 | 0;
 d13 = +d13;
 i26 = i26 | 0;
 i30 = i30 | 0;
 i15 = i15 | 0;
 i29 = i29 | 0;
 i28 = i28 | 0;
 i5 = i5 | 0;
 i14 = i14 | 0;
 d12 = +d12;
 d11 = +d11;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i31 = 0, i32 = 0, i33 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0;
 i6 = 0;
 i40 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i35 = i40;
 i8 = i40 + 10 | 0;
 i9 = i40 + 9 | 0;
 i10 = i40 + 8 | 0;
 i36 = i40 + 7 | 0;
 i37 = i40 + 6 | 0;
 i38 = i40 + 5 | 0;
 i39 = i40 + 4 | 0;
 HEAP8[i8 >> 0] = 0;
 HEAP8[i9 >> 0] = 0;
 HEAP8[i10 >> 0] = 0;
 if (!i34) {
  i39 = 0;
  STACKTOP = i40;
  return i39 | 0;
 }
 if (!(HEAP32[i34 >> 2] & 1)) {
  i7 = 0;
  i1 = i34 + 4 | 0;
 } else {
  HEAP32[i35 >> 2] = 0;
  _SDL_GetColorKey(i34, i35) | 0;
  i1 = i34 + 4 | 0;
  _SDL_GetRGB(HEAP32[i35 >> 2] | 0, HEAP32[i1 >> 2] | 0, i8, i9, i10);
  i7 = 1;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP8[i2 + 8 >> 0] | 0;
 L8 : do switch (i1 << 24 >> 24) {
 case 8:
 case 32:
  {
   d11 = d11 * 65536.0;
   d12 = d12 * 65536.0;
   i3 = i14 + 2 | 0;
   if (i1 << 24 >> 24 == 32) {
    i4 = i34;
    i6 = 9;
   } else {
    i33 = i34;
    i4 = 0;
    i32 = _SDL_CreateRGBSurface(0, i5, i3, 8, 0, 0, 0, 0) | 0;
   }
   break;
  }
 default:
  {
   i1 = _SDL_ConvertSurfaceFormat(i34, 377888772, HEAP32[i34 >> 2] | 0) | 0;
   if (!i1) {
    i39 = 0;
    STACKTOP = i40;
    return i39 | 0;
   } else {
    i4 = i1;
    i2 = HEAP32[i1 + 4 >> 2] | 0;
    i3 = i14 + 2 | 0;
    d12 = d12 * 65536.0;
    d11 = d11 * 65536.0;
    i6 = 9;
    break L8;
   }
  }
 } while (0);
 if ((i6 | 0) == 9) {
  i33 = i4;
  i4 = 1;
  i32 = _SDL_CreateRGBSurface(0, i5, i3, 32, HEAP32[i2 + 12 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0, HEAP32[i2 + 20 >> 2] | 0, HEAP32[i2 + 24 >> 2] | 0) | 0;
 }
 if (!i32) {
  i39 = 0;
  STACKTOP = i40;
  return i39 | 0;
 }
 i31 = i32 + 12 | 0;
 HEAP32[i31 >> 2] = i14;
 if ((i7 | 0) == 1) _SDL_FillRect(i32, 0, _SDL_MapRGB(HEAP32[i32 + 4 >> 2] | 0, HEAP8[i8 >> 0] | 0, HEAP8[i9 >> 0] | 0, HEAP8[i10 >> 0] | 0) | 0) | 0;
 if (HEAP32[i33 >> 2] & 2 | 0) _SDL_LockSurface(i33) | 0;
 d13 = d13 / 90.0;
 i1 = ~~d13;
 if (d13 == +(i1 | 0)) {
  i14 = (i1 | 0) % 4 | 0;
  i14 = (i14 | 0) < 0 ? i14 + 4 | 0 : i14;
 } else i14 = -1;
 if (i4) {
  L32 : do if ((i14 | 0) > -1) {
   i15 = i32 + 8 | 0;
   i1 = HEAP32[i15 >> 2] | 0;
   i16 = (HEAP32[i32 + 16 >> 2] | 0) - (i1 << 2) | 0;
   i3 = HEAP32[i33 + 20 >> 2] | 0;
   i4 = HEAP32[i32 + 20 >> 2] | 0;
   i9 = (i28 | 0) != 0;
   i10 = HEAP32[i33 + 16 >> 2] | 0;
   i7 = i9 ? 0 - i10 | 0 : i10;
   i8 = (i29 | 0) != 0;
   i2 = i8 ? -4 : 4;
   switch (i14 | 0) {
   case 0:
    {
     i6 = 1;
     i5 = 1;
     i14 = i7 - (Math_imul(HEAP32[i33 + 8 >> 2] | 0, i2) | 0) | 0;
     i7 = i2;
     break;
    }
   case 1:
    {
     i6 = -1;
     i5 = 1;
     i14 = (Math_imul(HEAP32[i33 + 12 >> 2] | 0, i7) | 0) + i2 | 0;
     i7 = 0 - i7 | 0;
     break;
    }
   case 2:
    {
     i6 = -1;
     i5 = -1;
     i14 = (Math_imul(HEAP32[i33 + 8 >> 2] | 0, i2) | 0) - i7 | 0;
     i7 = 0 - i2 | 0;
     break;
    }
   default:
    {
     i6 = 1;
     i5 = -1;
     i14 = (Math_imul(HEAP32[i33 + 12 >> 2] | 0, 0 - i7 | 0) | 0) - i2 | 0;
    }
   }
   if (((i8 ? 0 - i5 | 0 : i5) | 0) < 0) i3 = i3 + ((HEAP32[i33 + 8 >> 2] << 2) + -4) | 0;
   if (((i9 ? 0 - i6 | 0 : i6) | 0) < 0) i3 = i3 + (Math_imul((HEAP32[i33 + 12 >> 2] | 0) + -1 | 0, i10) | 0) | 0;
   i2 = HEAP32[i31 >> 2] | 0;
   if ((i2 | 0) > 0) {
    if ((i7 | 0) == 4) {
     i5 = 0;
     while (1) {
      _SDL_memcpy(i4, i3, i1 << 2) | 0;
      i1 = HEAP32[i15 >> 2] | 0;
      i2 = i1 << 2;
      i5 = i5 + 1 | 0;
      if ((i5 | 0) >= (HEAP32[i31 >> 2] | 0)) break L32; else {
       i4 = i4 + i2 + i16 | 0;
       i3 = i3 + i2 + i14 | 0;
      }
     }
    } else i6 = 0;
    while (1) {
     i1 = i1 << 2;
     i5 = i4 + i1 | 0;
     if (i1) {
      i2 = Math_imul(((i1 + -4 | 0) >>> 2) + 1 | 0, i7) | 0;
      i1 = i3;
      while (1) {
       i30 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
       HEAP8[i4 >> 0] = i30;
       HEAP8[i4 + 1 >> 0] = i30 >> 8;
       HEAP8[i4 + 2 >> 0] = i30 >> 16;
       HEAP8[i4 + 3 >> 0] = i30 >> 24;
       i4 = i4 + 4 | 0;
       if ((i4 | 0) == (i5 | 0)) break; else i1 = i1 + i7 | 0;
      }
      i4 = i5;
      i3 = i3 + i2 | 0;
      i2 = HEAP32[i31 >> 2] | 0;
     }
     i1 = i6 + 1 | 0;
     if ((i1 | 0) >= (i2 | 0)) break L32;
     i4 = i4 + i16 | 0;
     i6 = i1;
     i3 = i3 + i14 | 0;
     i1 = HEAP32[i15 >> 2] | 0;
    }
   }
  } else {
   i27 = ~~d11;
   i24 = ~~d12;
   i19 = i33 + 8 | 0;
   i21 = HEAP32[i19 >> 2] | 0;
   i25 = i32 + 8 | 0;
   i1 = HEAP32[i25 >> 2] | 0;
   i4 = i21 - i1 << 15;
   i20 = i33 + 12 | 0;
   i22 = HEAP32[i20 >> 2] | 0;
   i3 = HEAP32[i31 >> 2] | 0;
   i7 = i22 - i3 << 15;
   i5 = Math_imul(65536 - i24 | 0, i26) | 0;
   i6 = (i30 << 16) - (Math_imul(i27, i26) | 0) | 0;
   i21 = i21 + -1 | 0;
   i22 = i22 + -1 | 0;
   i16 = HEAP32[i32 + 20 >> 2] | 0;
   i23 = (HEAP32[i32 + 16 >> 2] | 0) - (i1 << 2) | 0;
   i2 = (i3 | 0) > 0;
   if (i15 | 0) {
    if (!i2) break;
    i18 = i4 + i5 | 0;
    i17 = i7 + i6 | 0;
    i15 = (i29 | 0) != 0;
    i9 = (i28 | 0) != 0;
    i10 = i33 + 20 | 0;
    i14 = i33 + 16 | 0;
    i8 = 0;
    i4 = i16;
    while (1) {
     i2 = i30 - i8 | 0;
     if ((i1 | 0) > 0) {
      i7 = i18 + (Math_imul(i2, i27) | 0) | 0;
      i5 = i17 - (Math_imul(i2, i24) | 0) | 0;
      i6 = 0;
      i2 = i4;
      while (1) {
       i3 = i7 >> 16;
       i4 = i5 >> 16;
       i3 = i15 ? i21 - i3 | 0 : i3;
       i4 = i9 ? i22 - i4 | 0 : i4;
       if (i3 >>> 0 < i21 >>> 0 & i4 >>> 0 < i22 >>> 0) {
        i51 = HEAP32[i14 >> 2] | 0;
        i47 = (HEAP32[i10 >> 2] | 0) + (Math_imul(i51, i4) | 0) | 0;
        i47 = i47 + (i3 << 2) | 0;
        i48 = i47 | 0;
        i28 = HEAP8[i48 >> 0] | 0;
        i4 = HEAP8[i47 + 1 >> 0] | 0;
        i43 = HEAP8[i47 + 2 >> 0] | 0;
        i47 = HEAP8[i47 + 3 >> 0] | 0;
        i48 = i48 + 4 | 0;
        i49 = HEAP8[i48 >> 0] | 0;
        i45 = HEAP8[i48 + 1 >> 0] | 0;
        i41 = HEAP8[i48 + 2 >> 0] | 0;
        i19 = HEAP8[i48 + 3 >> 0] | 0;
        i51 = i48 + (((i51 | 0) / 4 | 0) << 2) | 0;
        i48 = HEAP8[i51 >> 0] | 0;
        i44 = HEAP8[i51 + 1 >> 0] | 0;
        i3 = HEAP8[i51 + 2 >> 0] | 0;
        i20 = HEAP8[i51 + 3 >> 0] | 0;
        i51 = i51 + -4 | 0;
        i26 = HEAP8[i51 >> 0] | 0;
        i29 = HEAP8[i51 + 1 >> 0] | 0;
        i1 = HEAP8[i51 + 2 >> 0] | 0;
        i51 = HEAP8[i51 + 3 >> 0] | 0;
        i16 = i15 ? i19 : i47;
        i42 = i15 ? i41 : i43;
        i46 = i15 ? i45 : i4;
        i50 = i15 ? i49 : i28;
        i19 = i15 ? i47 : i19;
        i41 = i15 ? i43 : i41;
        i45 = i15 ? i4 : i45;
        i49 = i15 ? i28 : i49;
        i28 = i15 ? i20 : i51;
        i4 = i15 ? i3 : i1;
        i43 = i15 ? i44 : i29;
        i47 = i15 ? i48 : i26;
        i20 = i15 ? i51 : i20;
        i3 = i15 ? i1 : i3;
        i44 = i15 ? i29 : i44;
        i48 = i15 ? i26 : i48;
        i26 = i7 & 65535;
        i29 = i5 & 65535;
        i1 = (i9 ? i47 : i50) & 255;
        i1 = ((Math_imul(((i9 ? i48 : i49) & 255) - i1 | 0, i26) | 0) >>> 16) + i1 | 0;
        i47 = (i9 ? i50 : i47) & 255;
        HEAP8[i2 >> 0] = ((Math_imul((((Math_imul(((i9 ? i49 : i48) & 255) - i47 | 0, i26) | 0) >>> 16) + i47 & 255) - (i1 & 255) | 0, i29) | 0) >>> 16) + i1;
        i1 = (i9 ? i43 : i46) & 255;
        i1 = ((Math_imul(((i9 ? i44 : i45) & 255) - i1 | 0, i26) | 0) >>> 16) + i1 | 0;
        i43 = (i9 ? i46 : i43) & 255;
        HEAP8[i2 + 1 >> 0] = ((Math_imul((((Math_imul(((i9 ? i45 : i44) & 255) - i43 | 0, i26) | 0) >>> 16) + i43 & 255) - (i1 & 255) | 0, i29) | 0) >>> 16) + i1;
        i1 = (i9 ? i4 : i42) & 255;
        i1 = ((Math_imul(((i9 ? i3 : i41) & 255) - i1 | 0, i26) | 0) >>> 16) + i1 | 0;
        i4 = (i9 ? i42 : i4) & 255;
        HEAP8[i2 + 2 >> 0] = ((Math_imul((((Math_imul(((i9 ? i41 : i3) & 255) - i4 | 0, i26) | 0) >>> 16) + i4 & 255) - (i1 & 255) | 0, i29) | 0) >>> 16) + i1;
        i1 = (i9 ? i28 : i16) & 255;
        i1 = ((Math_imul(((i9 ? i20 : i19) & 255) - i1 | 0, i26) | 0) >>> 16) + i1 | 0;
        i28 = (i9 ? i16 : i28) & 255;
        HEAP8[i2 + 3 >> 0] = ((Math_imul((((Math_imul(((i9 ? i19 : i20) & 255) - i28 | 0, i26) | 0) >>> 16) + i28 & 255) - (i1 & 255) | 0, i29) | 0) >>> 16) + i1;
        i1 = HEAP32[i25 >> 2] | 0;
       }
       i2 = i2 + 4 | 0;
       i6 = i6 + 1 | 0;
       if ((i6 | 0) >= (i1 | 0)) break; else {
        i7 = i7 + i24 | 0;
        i5 = i5 + i27 | 0;
       }
      }
      i3 = HEAP32[i31 >> 2] | 0;
     } else i2 = i4;
     i8 = i8 + 1 | 0;
     if ((i8 | 0) >= (i3 | 0)) break L32; else i4 = i2 + i23 | 0;
    }
   }
   if (i2) {
    i18 = i4 + i5 | 0;
    i17 = i7 + i6 | 0;
    i15 = (i29 | 0) == 0;
    i9 = (i28 | 0) == 0;
    i10 = i33 + 20 | 0;
    i14 = i33 + 16 | 0;
    i8 = 0;
    i3 = i16;
    while (1) {
     i4 = i30 - i8 | 0;
     i2 = i18 + (Math_imul(i4, i27) | 0) | 0;
     i4 = i17 - (Math_imul(i4, i24) | 0) | 0;
     if ((i1 | 0) > 0) if (i15) if (i9) {
      i6 = i4;
      i7 = 0;
      while (1) {
       i4 = i2 >> 16;
       i5 = i6 >> 16;
       do if (i4 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
        if (i5 >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) break;
        i1 = (HEAP32[i10 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i5) | 0) + (i4 << 2) | 0;
        i1 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
        HEAP8[i3 >> 0] = i1;
        HEAP8[i3 + 1 >> 0] = i1 >> 8;
        HEAP8[i3 + 2 >> 0] = i1 >> 16;
        HEAP8[i3 + 3 >> 0] = i1 >> 24;
        i1 = HEAP32[i25 >> 2] | 0;
       } while (0);
       i3 = i3 + 4 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i24 | 0;
        i6 = i6 + i27 | 0;
       }
      }
     } else {
      i6 = i4;
      i7 = 0;
      while (1) {
       i4 = i2 >> 16;
       i5 = i6 >> 16;
       do if (i4 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
        if (i5 >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) break;
        i1 = (HEAP32[i10 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i22 - i5 | 0) | 0) + (i4 << 2) | 0;
        i1 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
        HEAP8[i3 >> 0] = i1;
        HEAP8[i3 + 1 >> 0] = i1 >> 8;
        HEAP8[i3 + 2 >> 0] = i1 >> 16;
        HEAP8[i3 + 3 >> 0] = i1 >> 24;
        i1 = HEAP32[i25 >> 2] | 0;
       } while (0);
       i3 = i3 + 4 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i24 | 0;
        i6 = i6 + i27 | 0;
       }
      }
     } else if (i9) {
      i6 = i4;
      i7 = 0;
      while (1) {
       i4 = i2 >> 16;
       i5 = i6 >> 16;
       do if (i4 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
        if (i5 >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) break;
        i1 = (HEAP32[i10 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i5) | 0) + (i21 - i4 << 2) | 0;
        i1 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
        HEAP8[i3 >> 0] = i1;
        HEAP8[i3 + 1 >> 0] = i1 >> 8;
        HEAP8[i3 + 2 >> 0] = i1 >> 16;
        HEAP8[i3 + 3 >> 0] = i1 >> 24;
        i1 = HEAP32[i25 >> 2] | 0;
       } while (0);
       i3 = i3 + 4 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i24 | 0;
        i6 = i6 + i27 | 0;
       }
      }
     } else {
      i6 = i4;
      i7 = 0;
      while (1) {
       i4 = i2 >> 16;
       i5 = i6 >> 16;
       do if (i4 >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0) {
        if (i5 >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) break;
        i1 = (HEAP32[i10 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i22 - i5 | 0) | 0) + (i21 - i4 << 2) | 0;
        i1 = HEAPU8[i1 >> 0] | HEAPU8[i1 + 1 >> 0] << 8 | HEAPU8[i1 + 2 >> 0] << 16 | HEAPU8[i1 + 3 >> 0] << 24;
        HEAP8[i3 >> 0] = i1;
        HEAP8[i3 + 1 >> 0] = i1 >> 8;
        HEAP8[i3 + 2 >> 0] = i1 >> 16;
        HEAP8[i3 + 3 >> 0] = i1 >> 24;
        i1 = HEAP32[i25 >> 2] | 0;
       } while (0);
       i3 = i3 + 4 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i24 | 0;
        i6 = i6 + i27 | 0;
       }
      }
     }
     i8 = i8 + 1 | 0;
     if ((i8 | 0) >= (HEAP32[i31 >> 2] | 0)) break; else i3 = i3 + i23 | 0;
    }
   }
  } while (0);
  HEAP32[i35 >> 2] = 0;
  _SDL_GetColorKey(i33, i35) | 0;
  _SDL_SetColorKey(i32, 3, HEAP32[i35 >> 2] | 0) | 0;
 } else {
  i5 = i33 + 4 | 0;
  i3 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  i6 = i32 + 4 | 0;
  i2 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i4 = 0;
   do {
    i1 = (HEAP32[i2 + 4 >> 2] | 0) + (i4 << 2) | 0;
    i2 = (HEAP32[i3 + 4 >> 2] | 0) + (i4 << 2) | 0;
    i2 = HEAPU8[i2 >> 0] | HEAPU8[i2 + 1 >> 0] << 8 | HEAPU8[i2 + 2 >> 0] << 16 | HEAPU8[i2 + 3 >> 0] << 24;
    HEAP8[i1 >> 0] = i2;
    HEAP8[i1 + 1 >> 0] = i2 >> 8;
    HEAP8[i1 + 2 >> 0] = i2 >> 16;
    HEAP8[i1 + 3 >> 0] = i2 >> 24;
    i4 = i4 + 1 | 0;
    i3 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    i2 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
   } while ((i4 | 0) < (i1 | 0));
  }
  HEAP32[i2 >> 2] = i1;
  L116 : do if ((i14 | 0) > -1) {
   i15 = i32 + 8 | 0;
   i1 = HEAP32[i15 >> 2] | 0;
   i16 = (HEAP32[i32 + 16 >> 2] | 0) - i1 | 0;
   i2 = HEAP32[i33 + 20 >> 2] | 0;
   i3 = HEAP32[i32 + 20 >> 2] | 0;
   i9 = (i28 | 0) != 0;
   i10 = HEAP32[i33 + 16 >> 2] | 0;
   i7 = i9 ? 0 - i10 | 0 : i10;
   i8 = (i29 | 0) != 0;
   i4 = i8 ? -1 : 1;
   switch (i14 | 0) {
   case 0:
    {
     i6 = 1;
     i5 = 1;
     i14 = i7 - (Math_imul(HEAP32[i33 + 8 >> 2] | 0, i4) | 0) | 0;
     i7 = i4;
     break;
    }
   case 1:
    {
     i6 = -1;
     i5 = 1;
     i14 = (Math_imul(HEAP32[i33 + 12 >> 2] | 0, i7) | 0) + i4 | 0;
     i7 = 0 - i7 | 0;
     break;
    }
   case 2:
    {
     i6 = -1;
     i5 = -1;
     i14 = (Math_imul(HEAP32[i33 + 8 >> 2] | 0, i4) | 0) - i7 | 0;
     i7 = 0 - i4 | 0;
     break;
    }
   default:
    {
     i6 = 1;
     i5 = -1;
     i14 = (Math_imul(HEAP32[i33 + 12 >> 2] | 0, 0 - i7 | 0) | 0) - i4 | 0;
    }
   }
   if (((i8 ? 0 - i5 | 0 : i5) | 0) < 0) i2 = i2 + ((HEAP32[i33 + 8 >> 2] | 0) + -1) | 0;
   if (((i9 ? 0 - i6 | 0 : i6) | 0) < 0) i2 = i2 + (Math_imul((HEAP32[i33 + 12 >> 2] | 0) + -1 | 0, i10) | 0) | 0;
   i4 = HEAP32[i31 >> 2] | 0;
   if ((i4 | 0) > 0) {
    if ((i7 | 0) == 1) {
     i4 = 0;
     while (1) {
      _SDL_memcpy(i3, i2, i1) | 0;
      i1 = HEAP32[i15 >> 2] | 0;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) >= (HEAP32[i31 >> 2] | 0)) break L116; else {
       i3 = i3 + i1 + i16 | 0;
       i2 = i2 + i1 + i14 | 0;
      }
     }
    } else i6 = 0;
    while (1) {
     i5 = i3 + i1 | 0;
     if (i1) {
      i4 = i2;
      while (1) {
       HEAP8[i3 >> 0] = HEAP8[i4 >> 0] | 0;
       i3 = i3 + 1 | 0;
       if ((i3 | 0) == (i5 | 0)) break; else i4 = i4 + i7 | 0;
      }
      i2 = i2 + (Math_imul(i1, i7) | 0) | 0;
      i3 = i5;
      i4 = HEAP32[i31 >> 2] | 0;
     }
     i1 = i6 + 1 | 0;
     if ((i1 | 0) >= (i4 | 0)) break L116;
     i3 = i3 + i16 | 0;
     i6 = i1;
     i2 = i2 + i14 | 0;
     i1 = HEAP32[i15 >> 2] | 0;
    }
   }
  } else {
   i27 = ~~d11;
   i21 = ~~d12;
   i22 = i33 + 8 | 0;
   i1 = HEAP32[i22 >> 2] | 0;
   i23 = i32 + 8 | 0;
   i2 = HEAP32[i23 >> 2] | 0;
   i24 = i33 + 12 | 0;
   i4 = HEAP32[i24 >> 2] | 0;
   i5 = HEAP32[i31 >> 2] | 0;
   i3 = HEAP32[i32 + 20 >> 2] | 0;
   i51 = i32 + 16 | 0;
   i25 = (HEAP32[i51 >> 2] | 0) - i2 | 0;
   HEAP32[i35 >> 2] = 0;
   _SDL_GetColorKey(i33, i35) | 0;
   _SDL_memset(i3, HEAP32[i35 >> 2] & 255, Math_imul(HEAP32[i31 >> 2] | 0, HEAP32[i51 >> 2] | 0) | 0) | 0;
   if ((HEAP32[i31 >> 2] | 0) > 0) {
    i20 = (i1 - i2 << 15) + (Math_imul(65536 - i21 | 0, i26) | 0) | 0;
    i19 = (i29 | 0) == 0;
    i16 = (i28 | 0) == 0;
    i17 = i33 + 20 | 0;
    i18 = i33 + 16 | 0;
    i15 = Math_imul(i27, i26) | 0;
    i14 = (i4 - i5 << 15) + (i30 << 16) | 0;
    i10 = 0;
    i1 = HEAP32[i23 >> 2] | 0;
    while (1) {
     i2 = i30 - i10 | 0;
     i4 = i20 + (Math_imul(i2, i27) | 0) | 0;
     i2 = i14 - ((Math_imul(i2, i21) | 0) + i15) | 0;
     if ((i1 | 0) > 0) if (i19) if (i16) {
      i6 = i4;
      i7 = 0;
      while (1) {
       i4 = i6 >> 16;
       i5 = i2 >> 16;
       do if (i4 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        if (i5 >>> 0 >= (HEAP32[i24 >> 2] | 0) >>> 0) break;
        HEAP8[i3 >> 0] = HEAP8[(HEAP32[i17 >> 2] | 0) + (Math_imul(HEAP32[i18 >> 2] | 0, i5) | 0) + i4 >> 0] | 0;
        i1 = HEAP32[i23 >> 2] | 0;
       } while (0);
       i3 = i3 + 1 | 0;
       i7 = i7 + 1 | 0;
       if ((i7 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i27 | 0;
        i6 = i6 + i21 | 0;
       }
      }
     } else {
      i8 = 0;
      while (1) {
       i5 = i4 >> 16;
       i6 = i2 >> 16;
       do if (i5 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        i7 = HEAP32[i24 >> 2] | 0;
        if (i6 >>> 0 >= i7 >>> 0) break;
        HEAP8[i3 >> 0] = HEAP8[(HEAP32[i17 >> 2] | 0) + (Math_imul(HEAP32[i18 >> 2] | 0, i7 + ~i6 | 0) | 0) + i5 >> 0] | 0;
        i1 = HEAP32[i23 >> 2] | 0;
       } while (0);
       i3 = i3 + 1 | 0;
       i8 = i8 + 1 | 0;
       if ((i8 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i27 | 0;
        i4 = i4 + i21 | 0;
       }
      }
     } else if (i16) {
      i8 = 0;
      while (1) {
       i5 = i4 >> 16;
       i6 = i2 >> 16;
       i7 = HEAP32[i22 >> 2] | 0;
       do if (i5 >>> 0 < i7 >>> 0) {
        if (i6 >>> 0 >= (HEAP32[i24 >> 2] | 0) >>> 0) break;
        HEAP8[i3 >> 0] = HEAP8[(HEAP32[i17 >> 2] | 0) + (Math_imul(HEAP32[i18 >> 2] | 0, i6) | 0) + (i7 + ~i5) >> 0] | 0;
        i1 = HEAP32[i23 >> 2] | 0;
       } while (0);
       i3 = i3 + 1 | 0;
       i8 = i8 + 1 | 0;
       if ((i8 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i27 | 0;
        i4 = i4 + i21 | 0;
       }
      }
     } else {
      i9 = 0;
      while (1) {
       i5 = i4 >> 16;
       i6 = i2 >> 16;
       i7 = HEAP32[i22 >> 2] | 0;
       do if (i5 >>> 0 < i7 >>> 0) {
        i8 = HEAP32[i24 >> 2] | 0;
        if (i6 >>> 0 >= i8 >>> 0) break;
        HEAP8[i3 >> 0] = HEAP8[(HEAP32[i17 >> 2] | 0) + (Math_imul(HEAP32[i18 >> 2] | 0, i8 + ~i6 | 0) | 0) + (i7 + ~i5) >> 0] | 0;
        i1 = HEAP32[i23 >> 2] | 0;
       } while (0);
       i3 = i3 + 1 | 0;
       i9 = i9 + 1 | 0;
       if ((i9 | 0) >= (i1 | 0)) break; else {
        i2 = i2 + i27 | 0;
        i4 = i4 + i21 | 0;
       }
      }
     }
     i10 = i10 + 1 | 0;
     if ((i10 | 0) >= (HEAP32[i31 >> 2] | 0)) break; else i3 = i3 + i25 | 0;
    }
   }
  } while (0);
  HEAP32[i35 >> 2] = 0;
  _SDL_GetColorKey(i33, i35) | 0;
  _SDL_SetColorKey(i32, 3, HEAP32[i35 >> 2] | 0) | 0;
 }
 _SDL_GetSurfaceAlphaMod(i34, i36) | 0;
 _SDL_GetSurfaceBlendMode(i34, i35) | 0;
 _SDL_GetSurfaceColorMod(i34, i37, i38, i39) | 0;
 _SDL_SetSurfaceAlphaMod(i32, HEAP8[i36 >> 0] | 0) | 0;
 _SDL_SetSurfaceBlendMode(i32, HEAP32[i35 >> 2] | 0) | 0;
 _SDL_SetSurfaceColorMod(i32, HEAP8[i37 >> 0] | 0, HEAP8[i38 >> 0] | 0, HEAP8[i39 >> 0] | 0) | 0;
 if (HEAP32[i33 >> 2] & 2 | 0) _SDL_UnlockSurface(i33);
 if ((i33 | 0) == (i34 | 0)) {
  i51 = i32;
  STACKTOP = i40;
  return i51 | 0;
 }
 _SDL_FreeSurface(i33);
 i51 = i32;
 STACKTOP = i40;
 return i51 | 0;
}

function _GLES2_CreateRenderer(i10, i5) {
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, f23 = f0, f24 = f0, f25 = f0, f26 = f0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i20 = i22 + 8 | 0;
 i6 = i22;
 i12 = i22 + 52 | 0;
 i14 = i22 + 56 | 0;
 i15 = i22 + 48 | 0;
 i7 = i22 + 44 | 0;
 i16 = i22 + 40 | 0;
 i17 = i22 + 36 | 0;
 i18 = i22 + 32 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i18 >> 2] = 0;
 if ((_SDL_GL_GetAttribute(21, i16) | 0) < 0) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if ((_SDL_GL_GetAttribute(17, i17) | 0) < 0) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if ((_SDL_GL_GetAttribute(18, i18) | 0) < 0) {
  i21 = 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i11 = _SDL_GetWindowFlags(i10) | 0;
 if ((i11 & 2 | 0) == 0 | (HEAP32[i16 >> 2] | 0) != 4 | (HEAP32[i17 >> 2] | 0) != 2 | (HEAP32[i18 >> 2] | 0) != 0) {
  _SDL_GL_SetAttribute(21, 4) | 0;
  _SDL_GL_SetAttribute(17, 2) | 0;
  _SDL_GL_SetAttribute(18, 0) | 0;
  if ((_SDL_RecreateWindow(i10, i11 | 2) | 0) >= 0) {
   i9 = 1;
   i21 = 6;
  }
 } else {
  i9 = 0;
  i21 = 6;
 }
 if ((i21 | 0) == 6) {
  i1 = _SDL_calloc(1, 324) | 0;
  do if (!i1) _SDL_Error(0) | 0; else {
   i13 = _SDL_calloc(1, 308) | 0;
   if (!i13) {
    _GLES2_DestroyRenderer(i1);
    _SDL_Error(0) | 0;
    break;
   }
   i2 = i1 + 104 | 0;
   i3 = 3096;
   i4 = i2 + 84 | 0;
   do {
    HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   } while ((i2 | 0) < (i4 | 0));
   i3 = i1 + 108 | 0;
   HEAP32[i3 >> 2] = 10;
   i19 = i1 + 320 | 0;
   HEAP32[i19 >> 2] = i13;
   i8 = i1 + 188 | 0;
   HEAP32[i8 >> 2] = i10;
   i2 = _SDL_GL_CreateContext(i10) | 0;
   HEAP32[i13 >> 2] = i2;
   if (!i2) {
    _GLES2_DestroyRenderer(i1);
    break;
   }
   if ((_SDL_GL_MakeCurrent(i10, i2) | 0) < 0) {
    _GLES2_DestroyRenderer(i1);
    break;
   }
   i4 = _SDL_GL_GetProcAddress(69234) | 0;
   HEAP32[i13 + 16 >> 2] = i4;
   do if (!i4) {
    i2 = 69234;
    i21 = 68;
   } else {
    i4 = _SDL_GL_GetProcAddress(66992) | 0;
    HEAP32[i13 + 20 >> 2] = i4;
    if (!i4) {
     i2 = 66992;
     i21 = 68;
    } else {
     i4 = _SDL_GL_GetProcAddress(68290) | 0;
     HEAP32[i13 + 24 >> 2] = i4;
     if (!i4) {
      i2 = 68290;
      i21 = 68;
     } else {
      i4 = _SDL_GL_GetProcAddress(67225) | 0;
      HEAP32[i13 + 28 >> 2] = i4;
      if (!i4) {
       i2 = 67225;
       i21 = 68;
      } else {
       i4 = _SDL_GL_GetProcAddress(69580) | 0;
       HEAP32[i13 + 32 >> 2] = i4;
       if (!i4) {
        i2 = 69580;
        i21 = 68;
       } else {
        i4 = _SDL_GL_GetProcAddress(69131) | 0;
        HEAP32[i13 + 36 >> 2] = i4;
        if (!i4) {
         i2 = 69131;
         i21 = 68;
        } else {
         i4 = _SDL_GL_GetProcAddress(69506) | 0;
         HEAP32[i13 + 40 >> 2] = i4;
         if (!i4) {
          i2 = 69506;
          i21 = 68;
         } else {
          i4 = _SDL_GL_GetProcAddress(68108) | 0;
          HEAP32[i13 + 44 >> 2] = i4;
          if (!i4) {
           i2 = 68108;
           i21 = 68;
          } else {
           i4 = _SDL_GL_GetProcAddress(66893) | 0;
           HEAP32[i13 + 48 >> 2] = i4;
           if (!i4) {
            i2 = 66893;
            i21 = 68;
           } else {
            i4 = _SDL_GL_GetProcAddress(66962) | 0;
            HEAP32[i13 + 52 >> 2] = i4;
            if (!i4) {
             i2 = 66962;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68183) | 0;
            HEAP32[i13 + 56 >> 2] = i4;
            if (!i4) {
             i2 = 68183;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68039) | 0;
            HEAP32[i13 + 60 >> 2] = i4;
            if (!i4) {
             i2 = 68039;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67117) | 0;
            HEAP32[i13 + 64 >> 2] = i4;
            if (!i4) {
             i2 = 67117;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69098) | 0;
            HEAP32[i13 + 68 >> 2] = i4;
            if (!i4) {
             i2 = 69098;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68860) | 0;
            HEAP32[i13 + 72 >> 2] = i4;
            if (!i4) {
             i2 = 68860;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68887) | 0;
            HEAP32[i13 + 76 >> 2] = i4;
            if (!i4) {
             i2 = 68887;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69089) | 0;
            HEAP32[i13 + 80 >> 2] = i4;
            if (!i4) {
             i2 = 69089;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68834) | 0;
            HEAP32[i13 + 84 >> 2] = i4;
            if (!i4) {
             i2 = 68834;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69033) | 0;
            HEAP32[i13 + 88 >> 2] = i4;
            if (!i4) {
             i2 = 69033;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68329) | 0;
            HEAP32[i13 + 92 >> 2] = i4;
            if (!i4) {
             i2 = 68329;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67103) | 0;
            HEAP32[i13 + 96 >> 2] = i4;
            if (!i4) {
             i2 = 67103;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67089) | 0;
            HEAP32[i13 + 100 >> 2] = i4;
            if (!i4) {
             i2 = 67089;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67051) | 0;
            HEAP32[i13 + 104 >> 2] = i4;
            if (!i4) {
             i2 = 67051;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68954) | 0;
            HEAP32[i13 + 108 >> 2] = i4;
            if (!i4) {
             i2 = 68954;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67063) | 0;
            HEAP32[i13 + 112 >> 2] = i4;
            if (!i4) {
             i2 = 67063;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68157) | 0;
            HEAP32[i13 + 116 >> 2] = i4;
            if (!i4) {
             i2 = 68157;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68124) | 0;
            HEAP32[i13 + 120 >> 2] = i4;
            if (!i4) {
             i2 = 68124;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68143) | 0;
            HEAP32[i13 + 124 >> 2] = i4;
            if (!i4) {
             i2 = 68143;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67553) | 0;
            HEAP32[i13 + 128 >> 2] = i4;
            if (!i4) {
             i2 = 67553;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68226) | 0;
            HEAP32[i13 + 132 >> 2] = i4;
            if (!i4) {
             i2 = 68226;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67037) | 0;
            HEAP32[i13 + 136 >> 2] = i4;
            if (!i4) {
             i2 = 67037;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67212) | 0;
            HEAP32[i13 + 140 >> 2] = i4;
            if (!i4) {
             i2 = 67212;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69519) | 0;
            HEAP32[i13 + 144 >> 2] = i4;
            if (!i4) {
             i2 = 69519;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68915) | 0;
            HEAP32[i13 + 148 >> 2] = i4;
            if (!i4) {
             i2 = 68915;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68075) | 0;
            HEAP32[i13 + 152 >> 2] = i4;
            if (!i4) {
             i2 = 68075;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67183) | 0;
            HEAP32[i13 + 156 >> 2] = i4;
            if (!i4) {
             i2 = 67183;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69420) | 0;
            HEAP32[i13 + 160 >> 2] = i4;
            if (!i4) {
             i2 = 69420;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67196) | 0;
            HEAP32[i13 + 164 >> 2] = i4;
            if (!i4) {
             i2 = 67196;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67707) | 0;
            HEAP32[i13 + 168 >> 2] = i4;
            if (!i4) {
             i2 = 67707;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67695) | 0;
            HEAP32[i13 + 172 >> 2] = i4;
            if (!i4) {
             i2 = 67695;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67897) | 0;
            HEAP32[i13 + 176 >> 2] = i4;
            if (!i4) {
             i2 = 67897;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(66928) | 0;
            HEAP32[i13 + 180 >> 2] = i4;
            if (!i4) {
             i2 = 66928;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68812) | 0;
            HEAP32[i13 + 184 >> 2] = i4;
            if (!i4) {
             i2 = 68812;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69495) | 0;
            HEAP32[i13 + 188 >> 2] = i4;
            if (!i4) {
             i2 = 69495;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68311) | 0;
            HEAP32[i13 + 192 >> 2] = i4;
            if (!i4) {
             i2 = 68311;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68394) | 0;
            HEAP32[i13 + 196 >> 2] = i4;
            if (!i4) {
             i2 = 68394;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(69192) | 0;
            HEAP32[i13 + 200 >> 2] = i4;
            if (!i4) {
             i2 = 69192;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68347) | 0;
            HEAP32[i13 + 204 >> 2] = i4;
            if (!i4) {
             i2 = 68347;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68001) | 0;
            HEAP32[i13 + 208 >> 2] = i4;
            if (!i4) {
             i2 = 68001;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(68240) | 0;
            HEAP32[i13 + 212 >> 2] = i4;
            if (!i4) {
             i2 = 68240;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67325) | 0;
            HEAP32[i13 + 216 >> 2] = i4;
            if (!i4) {
             i2 = 67325;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67916) | 0;
            HEAP32[i13 + 220 >> 2] = i4;
            if (!i4) {
             i2 = 67916;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67377) | 0;
            HEAP32[i13 + 224 >> 2] = i4;
            if (!i4) {
             i2 = 67377;
             i21 = 68;
             break;
            }
            i4 = _SDL_GL_GetProcAddress(67390) | 0;
            HEAP32[i13 + 228 >> 2] = i4;
            if (!i4) {
             i2 = 67390;
             i21 = 68;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while (0);
   if ((i21 | 0) == 68) {
    i4 = _SDL_GetError() | 0;
    HEAP32[i6 >> 2] = i2;
    HEAP32[i6 + 4 >> 2] = i4;
    if ((_SDL_SetError(39921, i6) | 0) < 0) {
     _GLES2_DestroyRenderer(i1);
     break;
    }
   }
   if (!(i5 & 4)) _SDL_GL_SetSwapInterval(0) | 0; else _SDL_GL_SetSwapInterval(1) | 0;
   if ((_SDL_GL_GetSwapInterval() | 0) > 0) HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 4;
   if (!(_SDL_GL_GetAttribute(20, i7) | 0)) if (HEAP32[i7 >> 2] & 1 | 0) HEAP32[i13 + 4 >> 2] = 1;
   HEAP32[i7 >> 2] = 0;
   i4 = i13 + 112 | 0;
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](3379, i7);
   HEAP32[i1 + 180 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i7 >> 2] = 0;
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](3379, i7);
   HEAP32[i1 + 184 >> 2] = HEAP32[i7 >> 2];
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](36345, i12);
   FUNCTION_TABLE_vii[HEAP32[i13 + 100 >> 2] & 127](36346, i14);
   i2 = HEAP32[i12 >> 2] | 0;
   if (HEAP8[i14 >> 0] | 0) {
    i2 = i2 + 1 | 0;
    HEAP32[i12 >> 2] = i2;
   }
   i2 = _SDL_calloc(i2, 4) | 0;
   i3 = i13 + 244 | 0;
   HEAP32[i3 >> 2] = i2;
   if (!i2) {
    _GLES2_DestroyRenderer(i1);
    _SDL_Error(0) | 0;
    break;
   }
   HEAP32[i13 + 240 >> 2] = HEAP32[i12 >> 2];
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](36344, i2);
   if (HEAP8[i14 >> 0] | 0) HEAP32[(HEAP32[i3 >> 2] | 0) + ((HEAP32[i12 >> 2] | 0) + -1 << 2) >> 2] = -1;
   HEAP32[i13 + 232 >> 2] = 0;
   FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](36006, i15);
   HEAP32[i13 + 236 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i1 + 4 >> 2] = 43;
   HEAP32[i1 + 8 >> 2] = 29;
   HEAP32[i1 + 12 >> 2] = 19;
   HEAP32[i1 + 28 >> 2] = 22;
   HEAP32[i1 + 32 >> 2] = 2;
   HEAP32[i1 + 36 >> 2] = 23;
   HEAP32[i1 + 40 >> 2] = 44;
   HEAP32[i1 + 44 >> 2] = 20;
   HEAP32[i1 + 48 >> 2] = 102;
   HEAP32[i1 + 52 >> 2] = 103;
   HEAP32[i1 + 56 >> 2] = 104;
   HEAP32[i1 + 60 >> 2] = 30;
   HEAP32[i1 + 64 >> 2] = 31;
   HEAP32[i1 + 68 >> 2] = 32;
   HEAP32[i1 + 72 >> 2] = 9;
   HEAP32[i1 + 76 >> 2] = 1;
   HEAP32[i1 + 80 >> 2] = 24;
   HEAP32[i1 + 84 >> 2] = 284;
   HEAP32[i1 + 88 >> 2] = 45;
   HEAP32[i1 + 92 >> 2] = 285;
   HEAP32[i1 + 96 >> 2] = 10;
   HEAP32[i1 + 100 >> 2] = 21;
   i2 = i1 + 116 | 0;
   i18 = i1 + 112 | 0;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 842094169;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 1448433993;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 842094158;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 1;
   HEAP32[i2 + (i3 << 2) >> 2] = 825382478;
   i3 = HEAP32[i19 >> 2] | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   do if ((HEAP32[19486] | 0) == (i2 | 0)) _GLES2_UpdateViewport(i1) | 0; else {
    HEAP32[i3 + 268 >> 2] = 0;
    if ((_SDL_GL_MakeCurrent(HEAP32[i8 >> 2] | 0, i2) | 0) >= 0) {
     HEAP32[19486] = HEAP32[i3 >> 2];
     _GLES2_UpdateViewport(i1) | 0;
     i2 = HEAP32[i19 >> 2] | 0;
     if (!(HEAP32[i2 + 4 >> 2] | 0)) break;
     i2 = i2 + 108 | 0;
     do {} while ((FUNCTION_TABLE_i[HEAP32[i2 >> 2] & 7]() | 0) != 0);
    }
   } while (0);
   HEAP32[i3 + 8 >> 2] = -1;
   HEAP32[i3 + 12 >> 2] = 0;
   FUNCTION_TABLE_vi[HEAP32[i3 + 16 >> 2] & 511](33984);
   i2 = i3 + 136 | 0;
   FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](3333, 1);
   FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](3317, 1);
   f26 = Math_fround(Math_fround(HEAPU8[i3 + 272 >> 0] | 0) * Math_fround(.00392156886));
   f25 = Math_fround(Math_fround(HEAPU8[i3 + 273 >> 0] | 0) * Math_fround(.00392156886));
   f24 = Math_fround(Math_fround(HEAPU8[i3 + 274 >> 0] | 0) * Math_fround(.00392156886));
   f23 = Math_fround(Math_fround(HEAPU8[i3 + 275 >> 0] | 0) * Math_fround(.00392156886));
   FUNCTION_TABLE_vffff[HEAP32[i3 + 40 >> 2] & 3](f26, f25, f24, f23);
   FUNCTION_TABLE_vi[HEAP32[i3 + 84 >> 2] & 511](0);
   FUNCTION_TABLE_vi[HEAP32[i3 + 72 >> 2] & 511](1);
   i2 = HEAP32[i19 >> 2] | 0;
   if (!(HEAP32[i2 + 4 >> 2] | 0)) {
    i21 = i1;
    STACKTOP = i22;
    return i21 | 0;
   }
   i5 = i2 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i5 >> 2] & 7]() | 0;
   if (!i2) {
    i21 = i1;
    STACKTOP = i22;
    return i21 | 0;
   } else i3 = 89710;
   while (1) {
    if (!i3) i21 = 94; else if (!(HEAP8[i3 >> 0] | 0)) i21 = 94; else i4 = i3;
    if ((i21 | 0) == 94) {
     i21 = 0;
     i4 = 39958;
    }
    switch (i2 | 0) {
    case 1280:
     {
      i3 = 40029;
      break;
     }
    case 1281:
     {
      i3 = 40012;
      break;
     }
    case 1282:
     {
      i3 = 39991;
      break;
     }
    case 1285:
     {
      i3 = 39974;
      break;
     }
    default:
     i3 = 39966;
    }
    HEAP32[i20 >> 2] = i4;
    HEAP32[i20 + 4 >> 2] = 40071;
    HEAP32[i20 + 8 >> 2] = 1954;
    HEAP32[i20 + 12 >> 2] = 40165;
    HEAP32[i20 + 16 >> 2] = i3;
    HEAP32[i20 + 20 >> 2] = i2;
    _SDL_SetError(40045, i20) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i5 >> 2] & 7]() | 0;
    if (!i2) break; else i3 = i4;
   }
   STACKTOP = i22;
   return i1 | 0;
  } while (0);
  if (!i9) {
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  }
 }
 _SDL_GL_SetAttribute(21, HEAP32[i16 >> 2] | 0) | 0;
 _SDL_GL_SetAttribute(17, HEAP32[i17 >> 2] | 0) | 0;
 _SDL_GL_SetAttribute(18, HEAP32[i18 >> 2] | 0) | 0;
 _SDL_RecreateWindow(i10, i11) | 0;
 i21 = 0;
 STACKTOP = i22;
 return i21 | 0;
}

function _SDL_BlendLine_RGB555(i17, i18, i5, i9, i8, i6, i1, i2, i3, i4, i19) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 var i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i16 = i4 & 255;
  i22 = ((Math_imul(i16, i1) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i16, i2 & 255) | 0) >>> 0) / 255 | 0;
  i20 = ((Math_imul(i16, i3 & 255) | 0) >>> 0) / 255 | 0;
  i1 = i16;
 } else {
  i22 = i1;
  i21 = i2 & 255;
  i20 = i3 & 255;
  i1 = i4 & 255;
 }
 i16 = i1 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 10 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 3 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 10 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i21, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 3 << 5 | i20 >>> 3 | i22 >>> 3 << 10) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i18 | 0)) switch (i6 | 0) {
 case 1:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 10 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 3 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 10 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i21, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 3 << 5 | i20 >>> 3 | i22 >>> 3 << 10) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 i15 = i18 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 1) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 10 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    if (!i1) break; else i2 = i2 + (i3 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 1) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i2 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 3 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 10 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    if (!i1) break; else i2 = i2 + (i3 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 1) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = (((Math_imul(i21, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i1) break; else i2 = i2 + (i3 << 1) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i4 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i19 | 0) == 0 ? i17 + (i4 << 1) | 0 : i17;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i2 = i8 - i5 | 0;
    i4 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i19 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 3 << 5 | i20 >>> 3 | i22 >>> 3 << 10) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 16 >> 2] | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(i6, i5) | 0) + (i3 << 1) | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 3 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 10 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 16 >> 2] | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(i6, i5) | 0) + (i3 << 1) | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i2 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 3 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 10 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 16 >> 2] | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(i6, i5) | 0) + (i3 << 1) | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = (((Math_imul(i21, HEAPU8[41014 + (i19 >>> 5 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 10 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i15 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i15 = i1;
    i1 = i1 - i2 | 0;
   }
   i14 = i4 << 1;
   i13 = (i9 | 0) < (i18 | 0);
   i12 = i13 ? 0 - i6 | 0 : i6;
   i13 = i13 ? -1 : 1;
   i10 = (i8 | 0) < (i5 | 0);
   i11 = i10 ? 0 - i7 | 0 : i7;
   i10 = i10 ? -1 : 1;
   i8 = i2 + ((i19 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i9 = HEAP32[i17 + 20 >> 2] | 0;
   i7 = HEAP32[i17 + 16 >> 2] | 0;
   i6 = (i21 >>> 3 << 5 | i20 >>> 3 | i22 >>> 3 << 10) & 65535;
   i3 = i18;
   i4 = 0;
   while (1) {
    HEAP16[i9 + (Math_imul(i7, i5) | 0) + (i3 << 1) >> 1] = i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else {
     i5 = i5 + (i2 ? i11 : i10) | 0;
     i3 = (i2 ? i12 : i13) + i3 | 0;
     i1 = (i2 ? i15 : i14) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _SDL_BlendLine_RGB565(i17, i18, i5, i9, i8, i6, i1, i2, i3, i4, i19) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 var i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i16 = i4 & 255;
  i22 = ((Math_imul(i16, i1) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i16, i2 & 255) | 0) >>> 0) / 255 | 0;
  i20 = ((Math_imul(i16, i3 & 255) | 0) >>> 0) / 255 | 0;
  i1 = i16;
 } else {
  i22 = i1;
  i21 = i2 & 255;
  i20 = i3 & 255;
  i1 = i4 & 255;
 }
 i16 = i1 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i16, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 2 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 11 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 2 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 11 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i21, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 2 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 1) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 2 << 5 | i20 >>> 3 | i22 >>> 3 << 11) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + 2 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i18 | 0)) switch (i6 | 0) {
 case 1:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = ((((Math_imul(i16, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 2 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 11 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i1 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 2 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 11 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAPU16[i1 >> 1] | 0;
    HEAP16[i1 >> 1] = (((Math_imul(i21, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 1) + (i9 << 1) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 1) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 1) + (i9 << 1) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 2 << 5 | i20 >>> 3 | i22 >>> 3 << 11) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 i15 = i18 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 1) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = ((((Math_imul(i16, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 2 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 11 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    if (!i1) break; else i2 = i2 + (i3 << 1) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 1) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i2 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 2 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 11 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    if (!i1) break; else i2 = i2 + (i3 << 1) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 1) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = (((Math_imul(i21, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    if (!i1) break; else i2 = i2 + (i3 << 1) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 1) + (i9 << 1) | 0;
    i4 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i19 | 0) == 0 ? i17 + (i4 << 1) | 0 : i17;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 1) + (i18 << 1) | 0;
    i2 = i8 - i5 | 0;
    i4 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i19 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = (i21 >>> 2 << 5 | i20 >>> 3 | i22 >>> 3 << 11) & 65535;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP16[i1 >> 1] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
   }
   return;
  }
 }
 switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 16 >> 2] | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(i6, i5) | 0) + (i3 << 1) | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = ((((Math_imul(i16, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i21 | 0) >>> 2 << 5 | ((((Math_imul(i16, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i22 | 0) >>> 3 << 11 | ((((Math_imul(i16, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i20 | 0) >>> 3;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 16 >> 2] | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(i6, i5) | 0) + (i3 << 1) | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    i18 = i22 + (HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0;
    i17 = i21 + (HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0;
    HEAP16[i2 >> 1] = (i17 >>> 0 < 255 ? i17 : 255) >>> 2 << 5 | (i18 >>> 0 < 255 ? i18 : 255) >>> 3 << 11 | (i19 >>> 0 < 255 ? i19 : 255) >>> 3;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = HEAP32[i17 + 16 >> 2] | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(i6, i5) | 0) + (i3 << 1) | 0;
    i19 = HEAPU16[i2 >> 1] | 0;
    HEAP16[i2 >> 1] = (((Math_imul(i21, HEAPU8[40950 + (i19 >>> 5 & 63) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(i22, HEAPU8[41014 + (i19 >>> 11) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(i20, HEAPU8[41014 + (i19 & 31) >> 0] | 0) | 0) >>> 0) / 255 | 0) >>> 3;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i15 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i15 = i1;
    i1 = i1 - i2 | 0;
   }
   i14 = i4 << 1;
   i13 = (i9 | 0) < (i18 | 0);
   i12 = i13 ? 0 - i6 | 0 : i6;
   i13 = i13 ? -1 : 1;
   i10 = (i8 | 0) < (i5 | 0);
   i11 = i10 ? 0 - i7 | 0 : i7;
   i10 = i10 ? -1 : 1;
   i8 = i2 + ((i19 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i9 = HEAP32[i17 + 20 >> 2] | 0;
   i7 = HEAP32[i17 + 16 >> 2] | 0;
   i6 = (i21 >>> 2 << 5 | i20 >>> 3 | i22 >>> 3 << 11) & 65535;
   i3 = i18;
   i4 = 0;
   while (1) {
    HEAP16[i9 + (Math_imul(i7, i5) | 0) + (i3 << 1) >> 1] = i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else {
     i5 = i5 + (i2 ? i11 : i10) | 0;
     i3 = (i2 ? i12 : i13) + i3 | 0;
     i1 = (i2 ? i15 : i14) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _Blit1toNAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i30 = HEAP32[i3 + 16 >> 2] | 0;
 i31 = HEAP32[i3 + 36 >> 2] | 0;
 i2 = HEAP32[i3 + 44 >> 2] | 0;
 i25 = HEAP32[(HEAP32[(HEAP32[i3 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i26 = HEAPU8[i3 + 63 >> 0] | 0;
 i27 = HEAP8[i2 + 9 >> 0] | 0;
 i28 = i27 & 255;
 if (!i4) return;
 i29 = (i1 + 3 | 0) / 4 | 0;
 i24 = i1 & 255;
 i13 = i2 + 28 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2 + 29 | 0;
 i16 = i2 + 33 | 0;
 i17 = i2 + 30 | 0;
 i18 = i2 + 34 | 0;
 i19 = i2 + 31 | 0;
 i20 = i2 + 35 | 0;
 i21 = i2 + 12 | 0;
 i22 = i2 + 16 | 0;
 i23 = i2 + 20 | 0;
 i12 = i2 + 24 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i24 & 3) {
  case 0:
   {
    i11 = i29;
    i3 = 4;
    break;
   }
  case 3:
   {
    i11 = i29;
    i3 = 15;
    break;
   }
  case 2:
   {
    i11 = i29;
    i3 = 26;
    break;
   }
  case 1:
   {
    i11 = i29;
    i3 = 37;
    break;
   }
  default:
   {
    i3 = 48;
    break L4;
   }
  }
  while (1) if ((i3 | 0) == 4) {
   i10 = HEAPU8[i1 >> 0] | 0;
   i10 = i25 + (i10 << 2) | 0;
   i8 = HEAPU8[i10 >> 0] | 0;
   i9 = HEAPU8[i10 + 1 >> 0] | 0;
   i10 = HEAPU8[i10 + 2 >> 0] | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i33 = i3 & 255;
   i32 = i5 & 255;
   i3 = i6 & 255;
   i5 = i7 & 255;
   i7 = (((Math_imul(i8 - i33 | 0, i26) | 0) >>> 0) / 255 | 0) + i33 | 0;
   i6 = (((Math_imul(i9 - i32 | 0, i26) | 0) >>> 0) / 255 | 0) + i32 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i26) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i5 = i5 + i26 - (((Math_imul(i5, i26) | 0) >>> 0) / 255 | 0) | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + i28 | 0;
   i3 = 15;
   continue;
  } else if ((i3 | 0) == 15) {
   i10 = HEAPU8[i1 >> 0] | 0;
   i10 = i25 + (i10 << 2) | 0;
   i8 = HEAPU8[i10 >> 0] | 0;
   i9 = HEAPU8[i10 + 1 >> 0] | 0;
   i10 = HEAPU8[i10 + 2 >> 0] | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i32 = i3 & 255;
   i33 = i5 & 255;
   i3 = i6 & 255;
   i5 = i7 & 255;
   i7 = (((Math_imul(i8 - i32 | 0, i26) | 0) >>> 0) / 255 | 0) + i32 | 0;
   i6 = (((Math_imul(i9 - i33 | 0, i26) | 0) >>> 0) / 255 | 0) + i33 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i26) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i5 = i5 + i26 - (((Math_imul(i5, i26) | 0) >>> 0) / 255 | 0) | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + i28 | 0;
   i3 = 26;
   continue;
  } else if ((i3 | 0) == 26) {
   i10 = HEAPU8[i1 >> 0] | 0;
   i10 = i25 + (i10 << 2) | 0;
   i8 = HEAPU8[i10 >> 0] | 0;
   i9 = HEAPU8[i10 + 1 >> 0] | 0;
   i10 = HEAPU8[i10 + 2 >> 0] | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i32 = i3 & 255;
   i33 = i5 & 255;
   i3 = i6 & 255;
   i5 = i7 & 255;
   i7 = (((Math_imul(i8 - i32 | 0, i26) | 0) >>> 0) / 255 | 0) + i32 | 0;
   i6 = (((Math_imul(i9 - i33 | 0, i26) | 0) >>> 0) / 255 | 0) + i33 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i26) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i5 = i5 + i26 - (((Math_imul(i5, i26) | 0) >>> 0) / 255 | 0) | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + i28 | 0;
   i3 = 37;
   continue;
  } else if ((i3 | 0) == 37) {
   i10 = HEAPU8[i1 >> 0] | 0;
   i10 = i25 + (i10 << 2) | 0;
   i8 = HEAPU8[i10 >> 0] | 0;
   i9 = HEAPU8[i10 + 1 >> 0] | 0;
   i10 = HEAPU8[i10 + 2 >> 0] | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     i7 = HEAPU8[i2 >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i3 = HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i6 = HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i7 = -1;
     break;
    }
   case 4:
    {
     i7 = HEAP32[i2 >> 2] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i21 >> 2] & i7) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i7) >>> (HEAPU8[i16 >> 0] | 0)) >> 0] | 0;
     i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i17 >> 0] << 2) >> 2] | 0) + ((HEAP32[i23 >> 2] & i7) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
     i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i12 >> 2] & i7) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i3 = 0;
     i5 = 0;
     i6 = 0;
     i7 = 0;
    }
   }
   i32 = i3 & 255;
   i33 = i5 & 255;
   i3 = i6 & 255;
   i5 = i7 & 255;
   i7 = (((Math_imul(i8 - i32 | 0, i26) | 0) >>> 0) / 255 | 0) + i32 | 0;
   i6 = (((Math_imul(i9 - i33 | 0, i26) | 0) >>> 0) / 255 | 0) + i33 | 0;
   i3 = (((Math_imul(i10 - i3 | 0, i26) | 0) >>> 0) / 255 | 0) + i3 | 0;
   i5 = i5 + i26 - (((Math_imul(i5, i26) | 0) >>> 0) / 255 | 0) | 0;
   switch (i27 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i6 >>> (HEAPU8[i15 >> 0] | 0) << HEAPU8[i16 >> 0] | i7 >>> (HEAPU8[i13 >> 0] | 0) << HEAPU8[i14 >> 0] | i3 >>> (HEAPU8[i17 >> 0] | 0) << HEAPU8[i18 >> 0] | i5 >>> (HEAPU8[i19 >> 0] | 0) << HEAPU8[i20 >> 0];
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + i28 | 0;
   if ((i11 | 0) > 1) {
    i11 = i11 + -1 | 0;
    i3 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i3 = 50;
   break;
  } else {
   i1 = i1 + i30 | 0;
   i2 = i2 + i31 | 0;
  }
 }
 if ((i3 | 0) != 48) if ((i3 | 0) == 50) return;
}

function _emscripten_GetProcAddress(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i5 + 12 | 0;
 i6 = i5 + 8 | 0;
 i3 = i5 + 4 | 0;
 i4 = i5;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i3 >> 2] = _malloc((_strlen(HEAP32[i6 >> 2] | 0) | 0) + 1 | 0) | 0;
 _strcpy(HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = _strstr(HEAP32[i3 >> 2] | 0, 66853) | 0;
 if (HEAP32[i4 >> 2] | 0) HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 HEAP32[i4 >> 2] = _strstr(HEAP32[i3 >> 2] | 0, 66857) | 0;
 if (HEAP32[i4 >> 2] | 0) HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 HEAP32[i4 >> 2] = _strstr(HEAP32[i3 >> 2] | 0, 66861) | 0;
 if (HEAP32[i4 >> 2] | 0) HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 HEAP32[i4 >> 2] = _strstr(HEAP32[i3 >> 2] | 0, 66865) | 0;
 if (HEAP32[i4 >> 2] | 0) HEAP8[HEAP32[i4 >> 2] >> 0] = 0;
 do if (_strcmp(HEAP32[i3 >> 2] | 0, 66871) | 0) {
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66909) | 0)) {
   HEAP32[i3 >> 2] = 66928;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66941) | 0)) {
   HEAP32[i3 >> 2] = 66962;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66977) | 0)) {
   HEAP32[i3 >> 2] = 66992;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67007) | 0)) HEAP32[i3 >> 2] = 67022;
 } else HEAP32[i3 >> 2] = 66893; while (0);
 do if (_strcmp(HEAP32[i3 >> 2] | 0, 67037) | 0) {
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67051) | 0)) {
   HEAP32[i2 >> 2] = 124;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67063) | 0)) {
   HEAP32[i2 >> 2] = 61;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67077) | 0)) {
   HEAP32[i2 >> 2] = 62;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67089) | 0)) {
   HEAP32[i2 >> 2] = 63;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67103) | 0)) {
   HEAP32[i2 >> 2] = 64;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67117) | 0)) {
   HEAP32[i2 >> 2] = 65;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67134) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67157) | 0)) {
   HEAP32[i2 >> 2] = 13;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67183) | 0)) {
   HEAP32[i2 >> 2] = 14;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67196) | 0)) {
   HEAP32[i2 >> 2] = 15;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67212) | 0)) {
   HEAP32[i2 >> 2] = 4;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67225) | 0)) {
   HEAP32[i2 >> 2] = 66;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67239) | 0)) {
   HEAP32[i2 >> 2] = 11;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67259) | 0)) {
   HEAP32[i2 >> 2] = 12;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67279) | 0)) {
   HEAP32[i2 >> 2] = 13;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67296) | 0)) {
   HEAP32[i2 >> 2] = 14;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67313) | 0)) {
   HEAP32[i2 >> 2] = 125;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67325) | 0)) {
   HEAP32[i2 >> 2] = 67;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67338) | 0)) {
   HEAP32[i2 >> 2] = 68;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67354) | 0)) {
   HEAP32[i2 >> 2] = 15;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67377) | 0)) {
   HEAP32[i2 >> 2] = 14;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67390) | 0)) {
   HEAP32[i2 >> 2] = 15;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67406) | 0)) {
   HEAP32[i2 >> 2] = 126;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67417) | 0)) {
   HEAP32[i2 >> 2] = 69;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67436) | 0)) {
   HEAP32[i2 >> 2] = 70;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67458) | 0)) {
   HEAP32[i2 >> 2] = 71;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67477) | 0)) {
   HEAP32[i2 >> 2] = 16;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67506) | 0)) {
   HEAP32[i2 >> 2] = 127;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67523) | 0)) {
   HEAP32[i2 >> 2] = 17;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67538) | 0)) {
   HEAP32[i2 >> 2] = 18;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67553) | 0)) {
   HEAP32[i2 >> 2] = 45;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67574) | 0)) {
   HEAP32[i2 >> 2] = 19;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67594) | 0)) {
   HEAP32[i2 >> 2] = 20;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67614) | 0)) {
   HEAP32[i2 >> 2] = 21;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67640) | 0)) {
   HEAP32[i2 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67659) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67671) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67683) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67695) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67707) | 0)) {
   HEAP32[i2 >> 2] = 72;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67719) | 0)) {
   HEAP32[i2 >> 2] = 22;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67731) | 0)) {
   HEAP32[i2 >> 2] = 16;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67743) | 0)) {
   HEAP32[i2 >> 2] = 4;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67755) | 0)) {
   HEAP32[i2 >> 2] = 23;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67768) | 0)) {
   HEAP32[i2 >> 2] = 24;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67781) | 0)) {
   HEAP32[i2 >> 2] = 25;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67794) | 0)) {
   HEAP32[i2 >> 2] = 26;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67807) | 0)) {
   HEAP32[i2 >> 2] = 27;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67820) | 0)) {
   HEAP32[i2 >> 2] = 28;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67833) | 0)) {
   HEAP32[i2 >> 2] = 29;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67846) | 0)) {
   HEAP32[i2 >> 2] = 30;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67859) | 0)) {
   HEAP32[i2 >> 2] = 17;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67878) | 0)) {
   HEAP32[i2 >> 2] = 18;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67897) | 0)) {
   HEAP32[i2 >> 2] = 19;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67916) | 0)) {
   HEAP32[i2 >> 2] = 73;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67929) | 0)) {
   HEAP32[i2 >> 2] = 74;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67947) | 0)) {
   HEAP32[i2 >> 2] = 75;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67965) | 0)) {
   HEAP32[i2 >> 2] = 76;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67983) | 0)) {
   HEAP32[i2 >> 2] = 77;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68001) | 0)) {
   HEAP32[i2 >> 2] = 46;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68021) | 0)) {
   HEAP32[i2 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66962) | 0)) {
   HEAP32[i2 >> 2] = 128;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68039) | 0)) {
   HEAP32[i2 >> 2] = 344;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68054) | 0)) {
   HEAP32[i2 >> 2] = 20;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68075) | 0)) {
   HEAP32[i2 >> 2] = 21;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68090) | 0)) {
   HEAP32[i2 >> 2] = 22;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68108) | 0)) {
   HEAP32[i2 >> 2] = 345;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68124) | 0)) {
   HEAP32[i2 >> 2] = 23;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68143) | 0)) {
   HEAP32[i2 >> 2] = 31;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68157) | 0)) {
   HEAP32[i2 >> 2] = 32;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68172) | 0)) {
   HEAP32[i2 >> 2] = 129;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66893) | 0)) {
   HEAP32[i2 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68183) | 0)) {
   HEAP32[i2 >> 2] = 346;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66992) | 0)) {
   HEAP32[i2 >> 2] = 78;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 67022) | 0)) {
   HEAP32[i2 >> 2] = 79;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68199) | 0)) {
   HEAP32[i2 >> 2] = 24;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68226) | 0)) {
   HEAP32[i2 >> 2] = 347;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68240) | 0)) {
   HEAP32[i2 >> 2] = 25;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 66928) | 0)) {
   HEAP32[i2 >> 2] = 348;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68260) | 0)) {
   HEAP32[i2 >> 2] = 349;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68278) | 0)) {
   HEAP32[i2 >> 2] = 130;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68290) | 0)) {
   HEAP32[i2 >> 2] = 33;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68311) | 0)) {
   HEAP32[i2 >> 2] = 80;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68329) | 0)) {
   HEAP32[i2 >> 2] = 81;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68347) | 0)) {
   HEAP32[i2 >> 2] = 82;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68368) | 0)) {
   HEAP32[i2 >> 2] = 26;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68394) | 0)) {
   HEAP32[i2 >> 2] = 5;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68417) | 0)) {
   HEAP32[i2 >> 2] = 27;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68455) | 0)) {
   HEAP32[i2 >> 2] = 131;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68471) | 0)) {
   HEAP32[i2 >> 2] = 350;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68486) | 0)) {
   HEAP32[i2 >> 2] = 34;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68509) | 0)) {
   HEAP32[i2 >> 2] = 28;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68522) | 0)) {
   HEAP32[i2 >> 2] = 83;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68536) | 0)) {
   HEAP32[i2 >> 2] = 84;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68550) | 0)) {
   HEAP32[i2 >> 2] = 8;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68570) | 0)) {
   HEAP32[i2 >> 2] = 351;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68590) | 0)) {
   HEAP32[i2 >> 2] = 29;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68606) | 0)) {
   HEAP32[i2 >> 2] = 30;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68624) | 0)) {
   HEAP32[i2 >> 2] = 35;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68640) | 0)) {
   HEAP32[i2 >> 2] = 31;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68655) | 0)) {
   HEAP32[i2 >> 2] = 352;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68677) | 0)) {
   HEAP32[i2 >> 2] = 132;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68693) | 0)) {
   HEAP32[i2 >> 2] = 85;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68711) | 0)) {
   HEAP32[i2 >> 2] = 86;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68732) | 0)) {
   HEAP32[i2 >> 2] = 353;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68750) | 0)) {
   HEAP32[i2 >> 2] = 354;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68763) | 0)) {
   HEAP32[i2 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68778) | 0)) {
   HEAP32[i2 >> 2] = 355;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68792) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68802) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68812) | 0)) {
   HEAP32[i2 >> 2] = 9;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68834) | 0)) {
   HEAP32[i2 >> 2] = 356;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68860) | 0)) {
   HEAP32[i2 >> 2] = 357;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68887) | 0)) {
   HEAP32[i2 >> 2] = 36;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68900) | 0)) {
   HEAP32[i2 >> 2] = 32;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68915) | 0)) {
   HEAP32[i2 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68930) | 0)) {
   HEAP32[i2 >> 2] = 7;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68954) | 0)) {
   HEAP32[i2 >> 2] = 6;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68965) | 0)) {
   HEAP32[i2 >> 2] = 87;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 68987) | 0)) {
   HEAP32[i2 >> 2] = 33;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69009) | 0)) {
   HEAP32[i2 >> 2] = 7;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69033) | 0)) {
   HEAP32[i2 >> 2] = 8;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69042) | 0)) {
   HEAP32[i2 >> 2] = 9;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69050) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69063) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69077) | 0)) {
   HEAP32[i2 >> 2] = 358;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69089) | 0)) {
   HEAP32[i2 >> 2] = 359;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69098) | 0)) {
   HEAP32[i2 >> 2] = 360;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69108) | 0)) {
   HEAP32[i2 >> 2] = 361;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69120) | 0)) {
   HEAP32[i2 >> 2] = 362;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69131) | 0)) {
   HEAP32[i2 >> 2] = 363;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69139) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69151) | 0)) {
   HEAP32[i2 >> 2] = 364;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69166) | 0)) {
   HEAP32[i2 >> 2] = 365;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69178) | 0)) {
   HEAP32[i2 >> 2] = 366;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69192) | 0)) {
   HEAP32[i2 >> 2] = 133;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69217) | 0)) {
   HEAP32[i2 >> 2] = 367;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69234) | 0)) {
   HEAP32[i2 >> 2] = 368;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69250) | 0)) {
   HEAP32[i2 >> 2] = 369;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69266) | 0)) {
   HEAP32[i2 >> 2] = 134;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69278) | 0)) {
   HEAP32[i2 >> 2] = 88;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69290) | 0)) {
   HEAP32[i2 >> 2] = 89;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69314) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69327) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69341) | 0)) {
   HEAP32[i2 >> 2] = 90;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69363) | 0)) {
   HEAP32[i2 >> 2] = 91;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69370) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69386) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69403) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69420) | 0)) {
   HEAP32[i2 >> 2] = 37;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69436) | 0)) {
   HEAP32[i2 >> 2] = 1;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69452) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69469) | 0)) {
   HEAP32[i2 >> 2] = 38;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69483) | 0)) {
   HEAP32[i2 >> 2] = 39;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69495) | 0)) {
   HEAP32[i2 >> 2] = 34;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69506) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69519) | 0)) {
   HEAP32[i2 >> 2] = 35;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69529) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69546) | 0)) {
   HEAP32[i2 >> 2] = 36;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69558) | 0)) {
   HEAP32[i2 >> 2] = 37;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69580) | 0)) {
   HEAP32[i2 >> 2] = 38;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69600) | 0)) {
   HEAP32[i2 >> 2] = 3;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69613) | 0)) {
   HEAP32[i2 >> 2] = 39;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69635) | 0)) {
   HEAP32[i2 >> 2] = 40;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69655) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69672) | 0)) {
   HEAP32[i2 >> 2] = 2;
   break;
  }
  if (!(_strcmp(HEAP32[i3 >> 2] | 0, 69689) | 0)) {
   HEAP32[i2 >> 2] = 3;
   break;
  }
  if (_strcmp(HEAP32[i3 >> 2] | 0, 69709) | 0) {
   HEAP32[i2 >> 2] = 0;
   break;
  } else {
   HEAP32[i2 >> 2] = 92;
   break;
  }
 } else HEAP32[i2 >> 2] = 60; while (0);
 STACKTOP = i5;
 return HEAP32[i2 >> 2] | 0;
}

function _IMG_LoadPNG_RW(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i24 = i27;
 i26 = 4;
 i25 = _malloc(40) | 0;
 HEAP32[i25 >> 2] = 0;
 i7 = i27 + 56 | 0;
 i16 = i27 + 52 | 0;
 i17 = i27 + 48 | 0;
 i18 = i27 + 44 | 0;
 i19 = i27 + 40 | 0;
 i20 = i27 + 36 | 0;
 i21 = i27 + 32 | 0;
 i22 = i27 + 28 | 0;
 i23 = i27 + 24 | 0;
 i8 = i27 + 20 | 0;
 i9 = i27 + 16 | 0;
 i10 = i27 + 12 | 0;
 i11 = i27 + 8 | 0;
 i12 = i27 + 4 | 0;
 if (!i6) {
  i26 = 0;
  _free(i25 | 0);
  STACKTOP = i27;
  return i26 | 0;
 }
 i13 = i6 + 4 | 0;
 __THREW__ = 0;
 i14 = invoke_iiiii(HEAP32[i13 >> 2] | 0, i6 | 0, 0, 0, 1) | 0;
 i15 = tempRet0;
 i1 = __THREW__;
 __THREW__ = 0;
 if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
  i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
  if (!i2) _longjmp(i1 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else i2 = -1;
 if ((i2 | 0) == 1) {
  i1 = tempRet0;
  i4 = 12;
 } else {
  __THREW__ = 0;
  i1 = invoke_ii(99, 2) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
  } else {
   if (!i1) {
    i26 = 0;
    _free(i25 | 0);
    STACKTOP = i27;
    return i26 | 0;
   }
   HEAP32[i16 >> 2] = 0;
   HEAP32[i17 >> 2] = 0;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   __THREW__ = 0;
   i1 = invoke_iiiii(6, 60603, 0, 0, 0) | 0;
   i2 = __THREW__;
   __THREW__ = 0;
   if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
    i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i3) _longjmp(i2 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i3 = -1;
   if ((i3 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
   } else {
    HEAP32[i16 >> 2] = i1;
    if (!i1) {
     i1 = 39849;
     i4 = 68;
    } else {
     __THREW__ = 0;
     i1 = invoke_ii(100, i1 | 0) | 0;
     i2 = __THREW__;
     __THREW__ = 0;
     if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
      i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
      if (!i3) _longjmp(i2 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else i3 = -1;
     if ((i3 | 0) == 1) {
      i1 = tempRet0;
      i4 = 12;
     } else {
      HEAP32[i17 >> 2] = i1;
      if (!i1) {
       i1 = 39802;
       i4 = 65;
      } else {
       __THREW__ = 0;
       i1 = invoke_iiii(26, HEAP32[i16 >> 2] | 0, 39, 156) | 0;
       i2 = __THREW__;
       __THREW__ = 0;
       if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
        i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
        if (!i3) _longjmp(i2 | 0, threwValue | 0);
        tempRet0 = threwValue;
       } else i3 = -1;
       if ((i3 | 0) == 1) {
        i1 = tempRet0;
        i4 = 12;
       } else {
        i25 = _saveSetjmp(i1, 1, i25 | 0, i26 | 0) | 0;
        i26 = tempRet0;
        __THREW__ = 0;
        i1 = __THREW__;
        __THREW__ = 0;
        if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
         i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
         if (!i2) _longjmp(i1 | 0, threwValue | 0);
         tempRet0 = threwValue;
        } else i2 = -1;
        if ((i2 | 0) == 1) {
         i1 = tempRet0;
         i4 = 12;
        } else {
         i1 = 0;
         i4 = 12;
        }
       }
      }
     }
    }
   }
  }
 }
 while (1) if ((i4 | 0) == 12) {
  if (i1 | 0) {
   i1 = 39774;
   i4 = 65;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(1, HEAP32[i16 >> 2] | 0, i6 | 0, 2);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  __THREW__ = 0;
  invoke_vii(40, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  __THREW__ = 0;
  invoke_iiiiiiiiii(1, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i18 | 0, i19 | 0, i20 | 0, i21 | 0, i22 | 0, 0, 0) | 0;
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(278, HEAP32[i16 >> 2] | 0);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  __THREW__ = 0;
  invoke_vi(279, HEAP32[i16 >> 2] | 0);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  if (!(HEAP32[i21 >> 2] | 0)) {
   __THREW__ = 0;
   invoke_vi(280, HEAP32[i16 >> 2] | 0);
   i1 = __THREW__;
   __THREW__ = 0;
   if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
    i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i2) _longjmp(i1 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i2 = -1;
   if ((i2 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
  }
  __THREW__ = 0;
  i1 = invoke_iiii(27, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, 16) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  if (!i1) i1 = -1; else {
   __THREW__ = 0;
   invoke_iiiiii(21, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i10 | 0, i9 | 0, i8 | 0) | 0;
   i1 = __THREW__;
   __THREW__ = 0;
   if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
    i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i2) _longjmp(i1 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i2 = -1;
   if ((i2 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
   if ((HEAP32[i21 >> 2] | 0) == 3) {
    i4 = HEAP32[i9 >> 2] | 0;
    L35 : do if ((i4 | 0) > 0) {
     i3 = HEAP32[i10 >> 2] | 0;
     i1 = -1;
     i2 = 0;
     while (1) {
      switch (HEAP8[i3 + i2 >> 0] | 0) {
      case 0:
       {
        if ((i1 | 0) > -1) break L35; else i1 = i2;
        break;
       }
      case -1:
       break;
      default:
       break L35;
      }
      i2 = i2 + 1 | 0;
      if ((i2 | 0) >= (i4 | 0)) break L35;
     }
    } else {
     i1 = -1;
     i2 = 0;
    } while (0);
    if ((i2 | 0) != (i4 | 0)) {
     __THREW__ = 0;
     invoke_vi(280, HEAP32[i16 >> 2] | 0);
     i2 = __THREW__;
     __THREW__ = 0;
     if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
      i1 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
      if (!i1) _longjmp(i2 | 0, threwValue | 0);
      tempRet0 = threwValue;
     } else i1 = -1;
     if ((i1 | 0) == 1) {
      i1 = tempRet0;
      i4 = 12;
      continue;
     }
     i1 = -1;
    }
   } else i1 = 0;
  }
  if ((HEAP32[i21 >> 2] | 0) == 4) {
   __THREW__ = 0;
   invoke_vi(281, HEAP32[i16 >> 2] | 0);
   i2 = __THREW__;
   __THREW__ = 0;
   if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
    i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i3) _longjmp(i2 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i3 = -1;
   if ((i3 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
  }
  __THREW__ = 0;
  invoke_vii(41, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0);
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  __THREW__ = 0;
  invoke_iiiiiiiiii(1, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i18 | 0, i19 | 0, i20 | 0, i21 | 0, i22 | 0, 0, 0) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  __THREW__ = 0;
  i2 = invoke_iii(17, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
  i3 = __THREW__;
  __THREW__ = 0;
  if ((i3 | 0) != 0 & (threwValue | 0) != 0) {
   i4 = _testSetjmp(HEAP32[i3 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i4) _longjmp(i3 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i4 = -1;
  if ((i4 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  i3 = (i2 & 255) > 2;
  i5 = Math_imul(HEAP32[i20 >> 2] | 0, i2 & 255) | 0;
  __THREW__ = 0;
  i2 = invoke_iiiiiiiii(11, 0, HEAP32[i18 >> 2] | 0, HEAP32[i19 >> 2] | 0, i5 | 0, (i3 ? 255 : 0) | 0, (i3 ? 65280 : 0) | 0, (i3 ? 16711680 : 0) | 0, (i2 << 24 >> 24 == 4 ? -16777216 : 0) | 0) | 0;
  i3 = __THREW__;
  __THREW__ = 0;
  if ((i3 | 0) != 0 & (threwValue | 0) != 0) {
   i4 = _testSetjmp(HEAP32[i3 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i4) _longjmp(i3 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i4 = -1;
  if ((i4 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  HEAP32[i7 >> 2] = i2;
  if (!(HEAP32[i7 >> 2] | 0)) {
   __THREW__ = 0;
   i1 = invoke_i(3) | 0;
   i2 = __THREW__;
   __THREW__ = 0;
   if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
    i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i3) _longjmp(i2 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i3 = -1;
   if ((i3 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
   i4 = 65;
   continue;
  }
  if ((i1 | 0) != -1) {
   if ((HEAP32[i21 >> 2] | 0) != 3) {
    i1 = HEAP32[i8 >> 2] | 0;
    __THREW__ = 0;
    i1 = invoke_iiiii(7, HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0, HEAP16[i1 + 2 >> 1] & 255 | 0, HEAP16[i1 + 4 >> 1] & 255 | 0, HEAP16[i1 + 6 >> 1] & 255 | 0) | 0;
    i2 = __THREW__;
    __THREW__ = 0;
    if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
     i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
     if (!i3) _longjmp(i2 | 0, threwValue | 0);
     tempRet0 = threwValue;
    } else i3 = -1;
    if ((i3 | 0) == 1) {
     i1 = tempRet0;
     i4 = 12;
     continue;
    }
   }
   __THREW__ = 0;
   invoke_iiii(28, HEAP32[i7 >> 2] | 0, 1, i1 | 0) | 0;
   i1 = __THREW__;
   __THREW__ = 0;
   if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
    i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i2) _longjmp(i1 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i2 = -1;
   if ((i2 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
  }
  __THREW__ = 0;
  i1 = invoke_ii(101, HEAP32[i19 >> 2] << 2 | 0) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  HEAP32[i23 >> 2] = i1;
  if (!(HEAP32[i23 >> 2] | 0)) {
   i1 = 60570;
   i4 = 65;
   continue;
  }
  i2 = HEAP32[i19 >> 2] | 0;
  if ((i2 | 0) > 0) {
   i1 = 0;
   do {
    i5 = HEAP32[i7 >> 2] | 0;
    i5 = (HEAP32[i5 + 20 >> 2] | 0) + (Math_imul(HEAP32[i5 + 16 >> 2] | 0, i1) | 0) | 0;
    HEAP32[(HEAP32[i23 >> 2] | 0) + (i1 << 2) >> 2] = i5;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i2 | 0));
  }
  __THREW__ = 0;
  invoke_vii(42, HEAP32[i16 >> 2] | 0, HEAP32[i23 >> 2] | 0);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  i5 = HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
  if (!i5) {
   i1 = 0;
   i4 = 65;
   continue;
  }
  __THREW__ = 0;
  invoke_iiiii(8, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i12 | 0, i11 | 0) | 0;
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  do if (!(HEAP32[i21 >> 2] | 0)) {
   HEAP32[i5 >> 2] = 256;
   i2 = HEAP32[i5 + 4 >> 2] | 0;
   i1 = 0;
   do {
    i4 = i1 & 255;
    i5 = i2 + (i1 << 2) | 0;
    HEAP8[i5 >> 0] = i4;
    HEAP8[i5 + 1 >> 0] = i4;
    HEAP8[i5 + 2 >> 0] = i4;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 256);
  } else {
   i1 = HEAP32[i11 >> 2] | 0;
   if ((i1 | 0) <= 0) break;
   HEAP32[i5 >> 2] = i1;
   i3 = HEAP32[i11 >> 2] | 0;
   if ((i3 | 0) <= 0) break;
   i4 = HEAP32[i12 >> 2] | 0;
   i2 = HEAP32[i5 + 4 >> 2] | 0;
   i1 = 0;
   do {
    i5 = i2 + (i1 << 2) | 0;
    i28 = i4 + (i1 * 3 | 0) | 0;
    HEAP8[i5 + 2 >> 0] = HEAP8[i28 + 2 >> 0] | 0;
    HEAP8[i5 + 1 >> 0] = HEAP8[i28 + 1 >> 0] | 0;
    HEAP8[i5 >> 0] = HEAP8[i28 >> 0] | 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i3 | 0));
  } while (0);
  i1 = 0;
  i4 = 65;
  continue;
 } else if ((i4 | 0) == 65) {
  if (!(HEAP32[i16 >> 2] | 0)) {
   i4 = 68;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(3, i16 | 0, (HEAP32[i17 >> 2] | 0 ? i17 : 0) | 0, 0);
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  i4 = 68;
  continue;
 } else if ((i4 | 0) == 68) {
  i4 = 0;
  if (HEAP32[i23 >> 2] | 0) {
   __THREW__ = 0;
   invoke_vi(282, HEAP32[i23 >> 2] | 0);
   i2 = __THREW__;
   __THREW__ = 0;
   if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
    i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i3) _longjmp(i2 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i3 = -1;
   if ((i3 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
  }
  if (!i1) break;
  __THREW__ = 0;
  invoke_iiiii(HEAP32[i13 >> 2] | 0, i6 | 0, i14 | 0, i15 | 0, 0) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  }
  if (HEAP32[i7 >> 2] | 0) {
   __THREW__ = 0;
   invoke_vi(283, HEAP32[i7 >> 2] | 0);
   i2 = __THREW__;
   __THREW__ = 0;
   if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
    i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i25 | 0, i26 | 0) | 0;
    if (!i3) _longjmp(i2 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i3 = -1;
   if ((i3 | 0) == 1) {
    i1 = tempRet0;
    i4 = 12;
    continue;
   }
   HEAP32[i7 >> 2] = 0;
  }
  __THREW__ = 0;
  invoke_iii(18, i1 | 0, i24 | 0) | 0;
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i25 | 0, i26 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) {
   i1 = tempRet0;
   i4 = 12;
   continue;
  } else {
   i4 = 77;
   break;
  }
 }
 i28 = HEAP32[i7 >> 2] | 0;
 _free(i25 | 0);
 STACKTOP = i27;
 return i28 | 0;
}

function _SDL_BlendLine_ARGB8888(i17, i19, i5, i9, i8, i6, i1, i2, i3, i4, i20) {
 i17 = i17 | 0;
 i19 = i19 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i20 = i20 | 0;
 var i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i18 = i4 & 255;
  i23 = ((Math_imul(i18, i1) | 0) >>> 0) / 255 | 0;
  i22 = ((Math_imul(i18, i2 & 255) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i18, i3 & 255) | 0) >>> 0) / 255 | 0;
 } else {
  i23 = i1;
  i22 = i2 & 255;
  i21 = i3 & 255;
  i18 = i4 & 255;
 }
 i16 = i18 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i19 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i19 - i9 | 0;
   } else {
    i1 = i1 + (i19 << 2) | 0;
    i3 = i9 - i19 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i20 >>> 24, i16) | 0) >>> 0) / 255 | 0) + i18 << 24 | (((Math_imul(i20 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 | (((Math_imul(i20 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i23 << 16 | (((Math_imul(i20 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 8;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i19 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i19 - i9 | 0;
   } else {
    i1 = i1 + (i19 << 2) | 0;
    i3 = i9 - i19 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i23 | 0;
    i20 = (i18 >>> 8 & 255) + i22 | 0;
    i17 = (i18 & 255) + i21 | 0;
    HEAP32[i1 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) | i18 & -16777216 | (i19 >>> 0 < 255 ? i19 : 255) << 16 | (i20 >>> 0 < 255 ? i20 : 255) << 8;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i19 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i19 - i9 | 0;
   } else {
    i1 = i1 + (i19 << 2) | 0;
    i3 = i9 - i19 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i20 & 255, i21) | 0) >>> 0) / 255 | 0 | i20 & -16777216 | (((Math_imul(i20 >>> 16 & 255, i23) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i20 >>> 8 & 255, i22) | 0) >>> 0) / 255 | 0) << 8;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i19 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i19 - i9 | 0;
   } else {
    i1 = i1 + (i19 << 2) | 0;
    i3 = i9 - i19 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = i21 | i18 << 24 | i22 << 8 | i23 << 16;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i19 | 0)) switch (i6 | 0) {
 case 1:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i20 >>> 24, i16) | 0) >>> 0) / 255 | 0) + i18 << 24 | (((Math_imul(i20 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 | (((Math_imul(i20 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i23 << 16 | (((Math_imul(i20 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 8;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i23 | 0;
    i20 = (i18 >>> 8 & 255) + i22 | 0;
    i17 = (i18 & 255) + i21 | 0;
    HEAP32[i1 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) | i18 & -16777216 | (i19 >>> 0 < 255 ? i19 : 255) << 16 | (i20 >>> 0 < 255 ? i20 : 255) << 8;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i20 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i20 & 255, i21) | 0) >>> 0) / 255 | 0 | i20 & -16777216 | (((Math_imul(i20 >>> 16 & 255, i23) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i20 >>> 8 & 255, i22) | 0) >>> 0) / 255 | 0) << 8;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i20 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i20 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = i21 | i18 << 24 | i22 << 8 | i23 << 16;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 i15 = i19 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i3 = i3 + ((i9 | 0) > (i19 | 0) ? -1 : 1) | 0;
    i2 = (i20 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i19 << 2) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i19 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i20 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i20 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i20 >>> 24, i16) | 0) >>> 0) / 255 | 0) + i18 << 24 | (((Math_imul(i20 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 | (((Math_imul(i20 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i23 << 16 | (((Math_imul(i20 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 8;
    if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i3 = i3 + ((i9 | 0) > (i19 | 0) ? -1 : 1) | 0;
    i2 = (i20 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i19 << 2) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i19 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i20 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i18 = HEAP32[i2 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i23 | 0;
    i20 = (i18 >>> 8 & 255) + i22 | 0;
    i17 = (i18 & 255) + i21 | 0;
    HEAP32[i2 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) | i18 & -16777216 | (i19 >>> 0 < 255 ? i19 : 255) << 16 | (i20 >>> 0 < 255 ? i20 : 255) << 8;
    if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i3 = i3 + ((i9 | 0) > (i19 | 0) ? -1 : 1) | 0;
    i2 = (i20 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i19 << 2) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i19 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i20 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i20 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = ((Math_imul(i20 & 255, i21) | 0) >>> 0) / 255 | 0 | i20 & -16777216 | (((Math_imul(i20 >>> 16 & 255, i23) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i20 >>> 8 & 255, i22) | 0) >>> 0) / 255 | 0) << 8;
    if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i4 = i3 + ((i9 | 0) > (i19 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i20 | 0) == 0 ? i17 + (i4 << 2) | 0 : i17;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i19 << 2) | 0;
    i2 = i8 - i5 | 0;
    i4 = i3 + ((i9 | 0) < (i19 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i20 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = i21 | i18 << 24 | i22 << 8 | i23 << 16;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i19 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i19 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i20 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = i17 + 16 | 0;
   i3 = i19;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i20 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i20 >>> 24, i16) | 0) >>> 0) / 255 | 0) + i18 << 24 | (((Math_imul(i20 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 | (((Math_imul(i20 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i23 << 16 | (((Math_imul(i20 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 8;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i19 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i19 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i20 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = i17 + 16 | 0;
   i3 = i19;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i18 = HEAP32[i2 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i23 | 0;
    i20 = (i18 >>> 8 & 255) + i22 | 0;
    i17 = (i18 & 255) + i21 | 0;
    HEAP32[i2 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) | i18 & -16777216 | (i19 >>> 0 < 255 ? i19 : 255) << 16 | (i20 >>> 0 < 255 ? i20 : 255) << 8;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i19 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i19 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i20 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = i17 + 16 | 0;
   i3 = i19;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i20 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = ((Math_imul(i20 & 255, i21) | 0) >>> 0) / 255 | 0 | i20 & -16777216 | (((Math_imul(i20 >>> 16 & 255, i23) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i20 >>> 8 & 255, i22) | 0) >>> 0) / 255 | 0) << 8;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i19 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i15 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i15 = i1;
    i1 = i1 - i2 | 0;
   }
   i14 = i4 << 1;
   i13 = (i9 | 0) < (i19 | 0);
   i12 = i13 ? 0 - i6 | 0 : i6;
   i13 = i13 ? -1 : 1;
   i10 = (i8 | 0) < (i5 | 0);
   i11 = i10 ? 0 - i7 | 0 : i7;
   i10 = i10 ? -1 : 1;
   i8 = i2 + ((i20 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i9 = HEAP32[i17 + 20 >> 2] | 0;
   i7 = i17 + 16 | 0;
   i6 = i21 | i18 << 24 | i22 << 8 | i23 << 16;
   i3 = i19;
   i4 = 0;
   while (1) {
    HEAP32[i9 + (Math_imul(HEAP32[i7 >> 2] | 0, i5) | 0) + (i3 << 2) >> 2] = i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else {
     i5 = i5 + (i2 ? i11 : i10) | 0;
     i3 = (i2 ? i12 : i13) + i3 | 0;
     i1 = (i2 ? i15 : i14) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _png_init_read_transformations(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i18 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i21;
 i8 = i20 + 824 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i9 = i20 + 488 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i4 = (i3 | 0) != 0;
 do if (!i2) if (i4) {
  HEAP32[i8 >> 2] = _png_reciprocal(i3) | 0;
  i1 = 0;
  break;
 } else {
  HEAP32[i8 >> 2] = 1e5;
  HEAP32[i9 >> 2] = 1e5;
  i1 = 0;
  break;
 } else {
  if (!i4) {
   HEAP32[i9 >> 2] = _png_reciprocal(i2) | 0;
   i1 = 0;
   break;
  }
  if (!(_png_muldiv(i1, i2, i3, 1e5) | 0)) i1 = 1; else i1 = (_png_gamma_significant(HEAP32[i1 >> 2] | 0) | 0) != 0 & 1;
 } while (0);
 i19 = i20 + 898 | 0;
 HEAP16[i19 >> 1] = HEAP16[i19 >> 1] | 1;
 i19 = i20 + 216 | 0;
 i17 = HEAP32[i19 >> 2] | 0;
 i1 = i1 | 0 ? i17 | 8192 : i17 & -8193;
 HEAP32[i19 >> 2] = i1;
 if ((i1 & 262272 | 0) == 262144) {
  HEAP32[i19 >> 2] = i1 & -41943297;
  i17 = i20 + 212 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] & -8193;
  HEAP16[i20 + 428 >> 1] = 0;
 }
 i17 = (_png_gamma_significant(HEAP32[i9 >> 2] | 0) | 0) == 0;
 i1 = HEAP32[i19 >> 2] | 0;
 if (i17) {
  i1 = i1 & -8388609;
  HEAP32[i19 >> 2] = i1;
  i17 = i20 + 212 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] & -8193;
 }
 if (i1 & 6291456) {
  _png_colorspace_set_rgb_coefficients(i20);
  i1 = HEAP32[i19 >> 2] | 0;
 }
 if (!(i1 & 256)) {
  if ((i1 & 16512 | 0) == 16512) {
   i2 = HEAP16[i20 + 454 >> 1] | 0;
   if (i2 << 16 >> 16 == (HEAP16[i20 + 456 >> 1] | 0)) if (i2 << 16 >> 16 == (HEAP16[i20 + 458 >> 1] | 0)) {
    i17 = i20 + 208 | 0;
    HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 2048;
    HEAP16[i20 + 460 >> 1] = i2;
   }
  }
 } else if (!(HEAP8[i20 + 435 >> 0] & 2)) {
  i17 = i20 + 208 | 0;
  HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 2048;
 }
 i17 = i20 + 435 | 0;
 i3 = HEAP8[i17 >> 0] | 0;
 if (i3 << 24 >> 24 == 3) {
  i6 = HEAP16[i20 + 428 >> 1] | 0;
  i7 = i6 << 16 >> 16 == 0;
  L33 : do if (i7) {
   i2 = 0;
   i18 = 29;
  } else {
   i4 = HEAP32[i20 + 528 >> 2] | 0;
   i5 = i6 & 65535;
   i3 = 0;
   i2 = 0;
   while (1) {
    switch (HEAP8[i4 + i3 >> 0] | 0) {
    case -1:
     break;
    case 0:
     {
      i2 = 1;
      break;
     }
    default:
     break L33;
    }
    i3 = i3 + 1 | 0;
    if ((i3 | 0) >= (i5 | 0)) {
     i18 = 29;
     break L33;
    }
   }
  } while (0);
  if ((i18 | 0) == 29) {
   i3 = i1 & -8388609;
   HEAP32[i19 >> 2] = i3;
   i16 = i20 + 212 | 0;
   HEAP32[i16 >> 2] = HEAP32[i16 >> 2] & -8193;
   i1 = i1 & -8388993;
   if (!i2) HEAP32[i19 >> 2] = i1; else i1 = i3;
  }
  if ((i1 & 4352 | 0) == 4352) {
   i15 = HEAP32[i20 + 416 >> 2] | 0;
   i16 = HEAPU8[i20 + 452 >> 0] | 0;
   i16 = i15 + (i16 * 3 | 0) | 0;
   HEAP16[i20 + 454 >> 1] = HEAPU8[i16 >> 0] | 0;
   HEAP16[i20 + 456 >> 1] = HEAPU8[i16 + 1 >> 0] | 0;
   HEAP16[i20 + 458 >> 1] = HEAPU8[i16 + 2 >> 0] | 0;
   if ((i1 & 34078720 | 0) == 524288) {
    i3 = i6 & 65535;
    if (!i7) {
     i2 = HEAP32[i20 + 528 >> 2] | 0;
     i1 = 0;
     do {
      i16 = i2 + i1 | 0;
      HEAP8[i16 >> 0] = ~HEAP8[i16 >> 0];
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i3 | 0));
     i1 = HEAP32[i19 >> 2] | 0;
    }
   }
  }
 } else {
  if (!(i3 & 4)) {
   i16 = (HEAP16[i20 + 428 >> 1] | 0) == 0;
   i2 = i1 & -8388609;
   HEAP32[i19 >> 2] = i2;
   i15 = i20 + 212 | 0;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] & -8193;
   i1 = i1 & -8388993;
   if (i16) HEAP32[i19 >> 2] = i1; else i1 = i2;
  }
  if ((i3 & 2) == 0 & (i1 & 4352 | 0) == 4352) {
   i2 = HEAPU16[i20 + 460 >> 1] | 0;
   i3 = HEAPU16[i20 + 540 >> 1] | 0;
   switch (HEAP8[i20 + 436 >> 0] | 0) {
   case 1:
    {
     i3 = i3 * 255 | 0;
     i2 = i2 * 255 | 0;
     break;
    }
   case 2:
    {
     i3 = i3 * 85 | 0;
     i2 = i2 * 85 | 0;
     break;
    }
   case 4:
    {
     i3 = i3 * 17 | 0;
     i2 = i2 * 17 | 0;
     break;
    }
   default:
    {}
   }
   i16 = i2 & 65535;
   HEAP16[i20 + 458 >> 1] = i16;
   HEAP16[i20 + 456 >> 1] = i16;
   HEAP16[i20 + 454 >> 1] = i16;
   if (!(i1 & 33554432)) {
    i16 = i3 & 65535;
    HEAP16[i20 + 538 >> 1] = i16;
    HEAP16[i20 + 536 >> 1] = i16;
    HEAP16[i20 + 534 >> 1] = i16;
   }
  }
 }
 if ((i1 & 896 | 0) == 640) if ((HEAP8[i20 + 436 >> 0] | 0) != 16) {
  i16 = i20 + 454 | 0;
  HEAP16[i16 >> 1] = (((HEAPU16[i16 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  i16 = i20 + 456 | 0;
  HEAP16[i16 >> 1] = (((HEAPU16[i16 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  i16 = i20 + 458 | 0;
  HEAP16[i16 >> 1] = (((HEAPU16[i16 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
  i16 = i20 + 460 | 0;
  HEAP16[i16 >> 1] = (((HEAPU16[i16 >> 1] | 0) * 255 | 0) + 32895 | 0) >>> 16;
 }
 if ((i1 & 384 | 0) == 128 & (i1 & 67109888 | 0) != 0) if ((HEAP8[i20 + 436 >> 0] | 0) == 16) {
  i16 = i20 + 454 | 0;
  HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) * 257;
  i16 = i20 + 456 | 0;
  HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) * 257;
  i16 = i20 + 458 | 0;
  HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) * 257;
  i16 = i20 + 460 | 0;
  HEAP16[i16 >> 1] = (HEAPU16[i16 >> 1] | 0) * 257;
 }
 i16 = i20 + 462 | 0;
 i15 = i20 + 452 | 0;
 HEAP16[i16 >> 1] = HEAP16[i15 >> 1] | 0;
 HEAP16[i16 + 2 >> 1] = HEAP16[i15 + 2 >> 1] | 0;
 HEAP16[i16 + 4 >> 1] = HEAP16[i15 + 4 >> 1] | 0;
 HEAP16[i16 + 6 >> 1] = HEAP16[i15 + 6 >> 1] | 0;
 HEAP16[i16 + 8 >> 1] = HEAP16[i15 + 8 >> 1] | 0;
 do if (!(i1 & 8192)) {
  if (i1 & 6291456) {
   if (_png_gamma_significant(HEAP32[i8 >> 2] | 0) | 0) {
    i18 = 66;
    break;
   }
   if (_png_gamma_significant(HEAP32[i9 >> 2] | 0) | 0) {
    i18 = 66;
    break;
   }
   i1 = HEAP32[i19 >> 2] | 0;
  }
  if (i1 & 128 | 0) {
   if (_png_gamma_significant(HEAP32[i8 >> 2] | 0) | 0) {
    i18 = 66;
    break;
   }
   if (_png_gamma_significant(HEAP32[i9 >> 2] | 0) | 0) {
    i18 = 66;
    break;
   }
   if ((HEAP8[i20 + 446 >> 0] | 0) == 3) if (_png_gamma_significant(HEAP32[i20 + 448 >> 2] | 0) | 0) {
    i18 = 66;
    break;
   }
  }
  i1 = HEAP32[i19 >> 2] | 0;
  if (i1 & 8388608) {
   if (_png_gamma_significant(HEAP32[i9 >> 2] | 0) | 0) {
    i18 = 66;
    break;
   }
   i1 = HEAP32[i19 >> 2] | 0;
  }
  if (i1 & 128) if ((HEAP8[i17 >> 0] | 0) == 3) {
   i16 = HEAP16[i20 + 428 >> 1] | 0;
   i8 = i16 & 65535;
   i9 = HEAP32[i20 + 416 >> 2] | 0;
   i2 = HEAP16[i20 + 454 >> 1] | 0;
   i10 = i2 & 255;
   i3 = HEAP16[i20 + 456 >> 1] | 0;
   i11 = i3 & 255;
   i4 = HEAP16[i20 + 458 >> 1] | 0;
   i12 = i4 & 255;
   if (i16 << 16 >> 16) {
    i7 = i20 + 528 | 0;
    i6 = i2 & 255;
    i5 = i3 & 255;
    i2 = i4 & 255;
    i1 = 0;
    do {
     i3 = (HEAP32[i7 >> 2] | 0) + i1 | 0;
     i4 = HEAP8[i3 >> 0] | 0;
     switch (i4 << 24 >> 24) {
     case 0:
      {
       i16 = i9 + (i1 * 3 | 0) | 0;
       HEAP8[i16 >> 0] = i10;
       HEAP8[i16 + 1 >> 0] = i11;
       HEAP8[i16 + 2 >> 0] = i12;
       break;
      }
     case -1:
      break;
     default:
      {
       i16 = i9 + (i1 * 3 | 0) | 0;
       i15 = i16 | 0;
       i14 = i4 & 255;
       i14 = (Math_imul(i14 ^ 255, i6) | 0) + 128 + (Math_imul(HEAPU8[i15 >> 0] | 0, i14) | 0) | 0;
       HEAP8[i15 >> 0] = ((i14 >>> 8 & 255) + i14 | 0) >>> 8;
       i15 = i16 + 1 | 0;
       i14 = HEAPU8[i3 >> 0] | 0;
       i14 = (Math_imul(i14, HEAPU8[i15 >> 0] | 0) | 0) + 128 + (Math_imul(i14 ^ 255, i5) | 0) | 0;
       HEAP8[i15 >> 0] = ((i14 >>> 8 & 255) + i14 | 0) >>> 8;
       i16 = i16 + 2 | 0;
       i15 = HEAPU8[i3 >> 0] | 0;
       i15 = (Math_imul(i15, HEAPU8[i16 >> 0] | 0) | 0) + 128 + (Math_imul(i15 ^ 255, i2) | 0) | 0;
       HEAP8[i16 >> 0] = ((i15 >>> 8 & 255) + i15 | 0) >>> 8;
      }
     }
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i8 | 0));
    i1 = HEAP32[i19 >> 2] | 0;
   }
   i1 = i1 & -129;
   HEAP32[i19 >> 2] = i1;
  }
 } else i18 = 66; while (0);
 do if ((i18 | 0) == 66) {
  _png_build_gamma_table(i20, HEAPU8[i20 + 436 >> 0] | 0);
  i1 = HEAP32[i19 >> 2] | 0;
  if (!(i1 & 128)) {
   if ((HEAP8[i17 >> 0] | 0) != 3) break;
   if (!((i1 & 4096 | 0) == 0 | (i1 & 6291456 | 0) == 0)) break;
   i4 = HEAP32[i20 + 416 >> 2] | 0;
   i18 = HEAP16[i20 + 420 >> 1] | 0;
   i5 = i18 & 65535;
   if (i18 << 16 >> 16) {
    i3 = HEAP32[i20 + 492 >> 2] | 0;
    i2 = 0;
    do {
     i18 = i4 + (i2 * 3 | 0) | 0;
     i16 = i18 | 0;
     HEAP8[i16 >> 0] = HEAP8[i3 + (HEAPU8[i16 >> 0] | 0) >> 0] | 0;
     i16 = i18 + 1 | 0;
     HEAP8[i16 >> 0] = HEAP8[i3 + (HEAPU8[i16 >> 0] | 0) >> 0] | 0;
     i18 = i18 + 2 | 0;
     HEAP8[i18 >> 0] = HEAP8[i3 + (HEAPU8[i18 >> 0] | 0) >> 0] | 0;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i5 | 0));
   }
   i1 = i1 & -8193;
   HEAP32[i19 >> 2] = i1;
   break;
  }
  if (i1 & 6291456 | 0) _png_warning(i20, 65919);
  if ((HEAP8[i17 >> 0] | 0) != 3) {
   i7 = i20 + 446 | 0;
   switch (HEAP8[i7 >> 0] | 0) {
   case 1:
    {
     i10 = HEAP32[i9 >> 2] | 0;
     i11 = 1e5;
     break;
    }
   case 2:
    {
     i10 = _png_reciprocal(HEAP32[i8 >> 2] | 0) | 0;
     i11 = _png_reciprocal2(HEAP32[i8 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
     break;
    }
   case 3:
    {
     i11 = i20 + 448 | 0;
     i10 = _png_reciprocal(HEAP32[i11 >> 2] | 0) | 0;
     i11 = _png_reciprocal2(HEAP32[i11 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
     break;
    }
   default:
    _png_error(i20, 65972);
   }
   i6 = _png_gamma_significant(i10) | 0;
   i1 = _png_gamma_significant(i11) | 0;
   i6 = (i6 | 0) != 0;
   if (i6) HEAP16[i20 + 470 >> 1] = _png_gamma_correct(i20, HEAPU16[i20 + 460 >> 1] | 0, i10) | 0;
   i1 = (i1 | 0) != 0;
   if (i1) {
    i16 = i20 + 460 | 0;
    HEAP16[i16 >> 1] = _png_gamma_correct(i20, HEAPU16[i16 >> 1] | 0, i11) | 0;
   }
   i2 = i20 + 454 | 0;
   i3 = HEAP16[i2 >> 1] | 0;
   i4 = i20 + 456 | 0;
   if (i3 << 16 >> 16 == (HEAP16[i4 >> 1] | 0)) {
    i5 = i20 + 458 | 0;
    if (i3 << 16 >> 16 == (HEAP16[i5 >> 1] | 0)) if (i3 << 16 >> 16 == (HEAP16[i20 + 460 >> 1] | 0)) {
     i16 = HEAP16[i20 + 470 >> 1] | 0;
     HEAP16[i20 + 468 >> 1] = i16;
     HEAP16[i20 + 466 >> 1] = i16;
     HEAP16[i20 + 464 >> 1] = i16;
     HEAP16[i5 >> 1] = i3;
     HEAP16[i4 >> 1] = i3;
    } else i18 = 101; else i18 = 101;
   } else i18 = 101;
   if ((i18 | 0) == 101) {
    if (i6) {
     HEAP16[i20 + 464 >> 1] = _png_gamma_correct(i20, i3 & 65535, i10) | 0;
     HEAP16[i20 + 466 >> 1] = _png_gamma_correct(i20, HEAPU16[i4 >> 1] | 0, i10) | 0;
     HEAP16[i20 + 468 >> 1] = _png_gamma_correct(i20, HEAPU16[i20 + 458 >> 1] | 0, i10) | 0;
    }
    if (i1) {
     HEAP16[i2 >> 1] = _png_gamma_correct(i20, HEAPU16[i2 >> 1] | 0, i11) | 0;
     HEAP16[i4 >> 1] = _png_gamma_correct(i20, HEAPU16[i4 >> 1] | 0, i11) | 0;
     i18 = i20 + 458 | 0;
     HEAP16[i18 >> 1] = _png_gamma_correct(i20, HEAPU16[i18 >> 1] | 0, i11) | 0;
    }
   }
   HEAP8[i7 >> 0] = 1;
   i1 = HEAP32[i19 >> 2] | 0;
   break;
  }
  i15 = HEAP32[i20 + 416 >> 2] | 0;
  i7 = HEAP16[i20 + 420 >> 1] | 0;
  i16 = i7 & 65535;
  switch (HEAP8[i20 + 446 >> 0] | 0) {
  case 2:
   {
    i14 = HEAP32[i20 + 492 >> 2] | 0;
    i2 = HEAPU16[i20 + 454 >> 1] | 0;
    i4 = HEAPU16[i20 + 456 >> 1] | 0;
    i6 = HEAPU16[i20 + 458 >> 1] | 0;
    i3 = HEAP32[i20 + 504 >> 2] | 0;
    i1 = HEAP8[i3 + i2 >> 0] | 0;
    i2 = HEAP8[i14 + i2 >> 0] | 0;
    i5 = HEAP8[i3 + i6 >> 0] | 0;
    i3 = HEAP8[i3 + i4 >> 0] | 0;
    i4 = HEAP8[i14 + i4 >> 0] | 0;
    i6 = HEAP8[i14 + i6 >> 0] | 0;
    break;
   }
  case 1:
   {
    i5 = HEAP32[i9 >> 2] | 0;
    i1 = 1e5;
    i18 = 74;
    break;
   }
  case 3:
   {
    i1 = i20 + 448 | 0;
    i5 = _png_reciprocal(HEAP32[i1 >> 2] | 0) | 0;
    i1 = _png_reciprocal2(HEAP32[i1 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
    i18 = 74;
    break;
   }
  default:
   {
    i5 = 1e5;
    i1 = 1e5;
    i18 = 74;
   }
  }
  do if ((i18 | 0) == 74) {
   i14 = (_png_gamma_significant(i1) | 0) == 0;
   i3 = i20 + 454 | 0;
   i2 = HEAP16[i3 >> 1] | 0;
   if (i14) {
    i6 = HEAP16[i20 + 458 >> 1] & 255;
    i2 = i2 & 255;
    i4 = HEAP16[i20 + 456 >> 1] & 255;
   } else {
    i2 = _png_gamma_8bit_correct(i2 & 65535, i1) | 0;
    i4 = _png_gamma_8bit_correct(HEAPU16[i20 + 456 >> 1] | 0, i1) | 0;
    i6 = _png_gamma_8bit_correct(HEAPU16[i20 + 458 >> 1] | 0, i1) | 0;
   }
   i14 = (_png_gamma_significant(i5) | 0) == 0;
   i1 = HEAP16[i3 >> 1] | 0;
   if (i14) {
    i1 = i1 & 255;
    i5 = HEAP16[i20 + 458 >> 1] & 255;
    i3 = HEAP16[i20 + 456 >> 1] & 255;
    break;
   } else {
    i1 = _png_gamma_8bit_correct(i1 & 65535, i5) | 0;
    i3 = _png_gamma_8bit_correct(HEAPU16[i20 + 456 >> 1] | 0, i5) | 0;
    i5 = _png_gamma_8bit_correct(HEAPU16[i20 + 458 >> 1] | 0, i5) | 0;
    break;
   }
  } while (0);
  if (i7 << 16 >> 16) {
   i12 = i20 + 428 | 0;
   i13 = i20 + 528 | 0;
   i14 = i20 + 504 | 0;
   i10 = i1 & 255;
   i11 = i20 + 500 | 0;
   i9 = i3 & 255;
   i3 = i5 & 255;
   i5 = i20 + 492 | 0;
   i1 = 0;
   do {
    L159 : do if ((i1 | 0) < (HEAPU16[i12 >> 1] | 0)) {
     i7 = (HEAP32[i13 >> 2] | 0) + i1 | 0;
     i8 = HEAP8[i7 >> 0] | 0;
     switch (i8 << 24 >> 24) {
     case -1:
      {
       i18 = 86;
       break L159;
      }
     case 0:
      {
       i8 = i15 + (i1 * 3 | 0) | 0;
       HEAP8[i8 >> 0] = i2;
       HEAP8[i8 + 1 >> 0] = i4;
       HEAP8[i8 + 2 >> 0] = i6;
       break L159;
      }
     default:
      {
       i23 = HEAP32[i14 >> 2] | 0;
       i24 = i15 + (i1 * 3 | 0) | 0;
       i25 = i24 | 0;
       i8 = i8 & 255;
       i8 = (Math_imul(i8 ^ 255, i10) | 0) + 128 + (Math_imul(HEAPU8[i23 + (HEAPU8[i25 >> 0] | 0) >> 0] | 0, i8) | 0) | 0;
       i22 = HEAP32[i11 >> 2] | 0;
       HEAP8[i25 >> 0] = HEAP8[i22 + (((i8 >>> 8 & 255) + i8 | 0) >>> 8 & 255) >> 0] | 0;
       i8 = i24 + 1 | 0;
       i25 = HEAPU8[i7 >> 0] | 0;
       i25 = (Math_imul(i25, HEAPU8[i23 + (HEAPU8[i8 >> 0] | 0) >> 0] | 0) | 0) + 128 + (Math_imul(i25 ^ 255, i9) | 0) | 0;
       HEAP8[i8 >> 0] = HEAP8[i22 + (((i25 >>> 8 & 255) + i25 | 0) >>> 8 & 255) >> 0] | 0;
       i8 = i24 + 2 | 0;
       i7 = HEAPU8[i7 >> 0] | 0;
       i7 = (Math_imul(i7, HEAPU8[i23 + (HEAPU8[i8 >> 0] | 0) >> 0] | 0) | 0) + 128 + (Math_imul(i7 ^ 255, i3) | 0) | 0;
       HEAP8[i8 >> 0] = HEAP8[i22 + (((i7 >>> 8 & 255) + i7 | 0) >>> 8 & 255) >> 0] | 0;
       break L159;
      }
     }
    } else i18 = 86; while (0);
    if ((i18 | 0) == 86) {
     i18 = 0;
     i24 = HEAP32[i5 >> 2] | 0;
     i25 = i15 + (i1 * 3 | 0) | 0;
     i23 = i25 | 0;
     HEAP8[i23 >> 0] = HEAP8[i24 + (HEAPU8[i23 >> 0] | 0) >> 0] | 0;
     i23 = i25 + 1 | 0;
     HEAP8[i23 >> 0] = HEAP8[i24 + (HEAPU8[i23 >> 0] | 0) >> 0] | 0;
     i25 = i25 + 2 | 0;
     HEAP8[i25 >> 0] = HEAP8[i24 + (HEAPU8[i25 >> 0] | 0) >> 0] | 0;
    }
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i16 | 0));
  }
  i1 = HEAP32[i19 >> 2] & -8321;
  HEAP32[i19 >> 2] = i1;
 } while (0);
 if ((i1 & 4104 | 0) != 8) {
  STACKTOP = i21;
  return;
 }
 if ((HEAP8[i17 >> 0] | 0) != 3) {
  STACKTOP = i21;
  return;
 }
 i4 = HEAP16[i20 + 420 >> 1] | 0;
 i5 = i4 & 65535;
 i25 = HEAP8[i20 + 516 >> 0] | 0;
 i3 = 8 - (i25 & 255) | 0;
 HEAP32[i19 >> 2] = i1 & -9;
 i4 = i4 << 16 >> 16 != 0;
 if (i25 << 24 >> 24 != 0 & (i3 | 0) > 0 & i4) {
  i2 = HEAP32[i20 + 416 >> 2] | 0;
  i1 = 0;
  do {
   i25 = i2 + (i1 * 3 | 0) | 0;
   HEAP8[i25 >> 0] = (HEAPU8[i25 >> 0] | 0) >>> i3;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i5 | 0));
 }
 i25 = HEAP8[i20 + 517 >> 0] | 0;
 i2 = 8 - (i25 & 255) | 0;
 if (i25 << 24 >> 24 != 0 & (i2 | 0) > 0 & i4) {
  i3 = HEAP32[i20 + 416 >> 2] | 0;
  i1 = 0;
  do {
   i25 = i3 + (i1 * 3 | 0) + 1 | 0;
   HEAP8[i25 >> 0] = (HEAPU8[i25 >> 0] | 0) >>> i2;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i5 | 0));
 }
 i25 = HEAP8[i20 + 518 >> 0] | 0;
 i3 = 8 - (i25 & 255) | 0;
 if (!(i25 << 24 >> 24 != 0 & (i3 | 0) > 0 & i4)) {
  STACKTOP = i21;
  return;
 }
 i2 = HEAP32[i20 + 416 >> 2] | 0;
 i1 = 0;
 do {
  i25 = i2 + (i1 * 3 | 0) + 2 | 0;
  HEAP8[i25 >> 0] = (HEAPU8[i25 >> 0] | 0) >>> i3;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i5 | 0));
 STACKTOP = i21;
 return;
}

function _SDL_Blit_Slow(i25) {
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0, i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0;
 i66 = 0;
 i1 = HEAP32[i25 + 52 >> 2] | 0;
 i45 = HEAPU8[i25 + 60 >> 0] | 0;
 i65 = HEAPU8[i25 + 61 >> 0] | 0;
 i26 = HEAPU8[i25 + 62 >> 0] | 0;
 i27 = HEAPU8[i25 + 63 >> 0] | 0;
 i3 = HEAP32[i25 + 40 >> 2] | 0;
 i2 = HEAP32[i25 + 44 >> 2] | 0;
 i28 = HEAP8[i3 + 9 >> 0] | 0;
 i29 = i28 & 255;
 i30 = HEAP8[i2 + 9 >> 0] | 0;
 i31 = i30 & 255;
 i32 = i3 + 24 | 0;
 i33 = ~HEAP32[i32 >> 2];
 i34 = HEAP32[i25 + 56 >> 2] | 0;
 i35 = i25 + 28 | 0;
 i64 = HEAP32[i35 >> 2] | 0;
 i36 = (HEAP32[i25 + 8 >> 2] << 16 | 0) / (i64 | 0) | 0;
 i37 = i25 + 24 | 0;
 i4 = HEAP32[i37 >> 2] | 0;
 i38 = (HEAP32[i25 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 HEAP32[i35 >> 2] = i64 + -1;
 if (!i64) return;
 i39 = i25 + 20 | 0;
 i40 = i25 + 32 | 0;
 i41 = i3 + 28 | 0;
 i42 = i3 + 12 | 0;
 i43 = i3 + 32 | 0;
 i44 = i3 + 29 | 0;
 i46 = i3 + 16 | 0;
 i47 = i3 + 33 | 0;
 i48 = i3 + 30 | 0;
 i49 = i3 + 20 | 0;
 i50 = i3 + 34 | 0;
 i51 = (i1 & 256 | 0) == 0;
 i52 = i2 + 24 | 0;
 i53 = i2 + 28 | 0;
 i54 = i2 + 12 | 0;
 i55 = i2 + 32 | 0;
 i56 = i2 + 29 | 0;
 i57 = i2 + 16 | 0;
 i58 = i2 + 33 | 0;
 i59 = i2 + 30 | 0;
 i60 = i2 + 20 | 0;
 i61 = i2 + 34 | 0;
 i62 = (i1 & 1 | 0) == 0;
 i63 = (i1 & 2 | 0) == 0;
 i64 = (i1 & 48 | 0) != 0;
 i24 = i1 >>> 4 & 255;
 i23 = i2 + 31 | 0;
 i20 = i2 + 35 | 0;
 i21 = i28 << 24 >> 24 == 3;
 i22 = i3 + 31 | 0;
 i18 = i3 + 35 | 0;
 i19 = i25 + 12 | 0;
 i2 = 0;
 i3 = 0;
 i1 = HEAP32[i39 >> 2] | 0;
 while (1) {
  if ((i3 | 0) > 65535) {
   i17 = ~i3;
   i17 = i3 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
   i2 = i2 + 1 + (i17 >>> 16) | 0;
   i3 = i3 + -65536 - (i17 & -65536) | 0;
  }
  if (i4 | 0) {
   i5 = 0;
   i6 = -1;
   i7 = 65536;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i7 | 0) > 65535) {
     i16 = ~i7;
     i16 = i7 + 65536 + ((i16 | 0) > -131072 ? i16 : -131072) | 0;
     i6 = i6 + 1 + (i16 >>> 16) | 0;
     i17 = (HEAP32[i25 >> 2] | 0) + (Math_imul(HEAP32[i19 >> 2] | 0, i2) | 0) + (Math_imul(i6, i29) | 0) | 0;
     i7 = i7 + -65536 - (i16 & -65536) | 0;
    } else i17 = i5;
    i5 = HEAP32[i32 >> 2] | 0;
    L15 : do if (!i5) switch (i28 << 24 >> 24) {
    case 1:
     {
      i9 = HEAPU8[i17 >> 0] | 0;
      i10 = -1;
      i11 = i9;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i41 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i42 >> 2] & i9) >>> (HEAPU8[i43 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i44 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i46 >> 2] & i9) >>> (HEAPU8[i47 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i48 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i9) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    case 2:
     {
      i9 = HEAPU16[i17 >> 1] | 0;
      i10 = -1;
      i11 = i9;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i41 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i42 >> 2] & i9) >>> (HEAPU8[i43 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i44 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i46 >> 2] & i9) >>> (HEAPU8[i47 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i48 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i9) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    case 3:
     {
      i10 = -1;
      i11 = 0;
      i5 = HEAP8[i17 + ((HEAPU8[i43 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i8 = HEAP8[i17 + ((HEAPU8[i47 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i9 = HEAP8[i17 + ((HEAPU8[i50 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break L15;
     }
    case 4:
     {
      i9 = HEAP32[i17 >> 2] | 0;
      i10 = -1;
      i11 = i9;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i41 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i42 >> 2] & i9) >>> (HEAPU8[i43 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i44 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i46 >> 2] & i9) >>> (HEAPU8[i47 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i48 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i9) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    default:
     {
      i10 = -1;
      i11 = 0;
      i5 = 0;
      i8 = 0;
      i9 = 0;
      break L15;
     }
    } else switch (i28 << 24 >> 24) {
    case 1:
     {
      i9 = HEAPU8[i17 >> 0] | 0;
      i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & i9) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i11 = i9;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i41 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i42 >> 2] & i9) >>> (HEAPU8[i43 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i44 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i46 >> 2] & i9) >>> (HEAPU8[i47 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i48 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i9) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    case 2:
     {
      i9 = HEAPU16[i17 >> 1] | 0;
      i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & i9) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i11 = i9;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i41 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i42 >> 2] & i9) >>> (HEAPU8[i43 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i44 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i46 >> 2] & i9) >>> (HEAPU8[i47 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i48 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i9) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    case 3:
     {
      i10 = -1;
      i11 = 0;
      i5 = HEAP8[i17 + ((HEAPU8[i43 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i8 = HEAP8[i17 + ((HEAPU8[i47 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i9 = HEAP8[i17 + ((HEAPU8[i50 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break L15;
     }
    case 4:
     {
      i9 = HEAP32[i17 >> 2] | 0;
      i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i22 >> 0] | 0) << 2) >> 2] | 0) + ((i9 & i5) >>> (HEAPU8[i18 >> 0] | 0)) >> 0] | 0;
      i11 = i9;
      i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i41 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i42 >> 2] & i9) >>> (HEAPU8[i43 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i44 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i46 >> 2] & i9) >>> (HEAPU8[i47 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i48 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i49 >> 2] & i9) >>> (HEAPU8[i50 >> 0] | 0)) >> 0] | 0;
      break L15;
     }
    default:
     {
      i10 = 0;
      i11 = 0;
      i5 = 0;
      i8 = 0;
      i9 = 0;
      break L15;
     }
    } while (0);
    i12 = i5 & 255;
    i13 = i8 & 255;
    i14 = i9 & 255;
    i15 = i10 & 255;
    if (i51) i66 = 24; else {
     if (i21) i5 = i13 << (HEAPU8[i47 >> 0] | 0) | i12 << (HEAPU8[i43 >> 0] | 0) | i14 << (HEAPU8[i50 >> 0] | 0); else i5 = i11;
     if ((i5 ^ i34) & i33 | 0) i66 = 24;
    }
    L34 : do if ((i66 | 0) == 24) {
     i66 = 0;
     i5 = HEAP32[i52 >> 2] | 0;
     i16 = (i5 | 0) == 0;
     L36 : do if (i16) switch (i30 << 24 >> 24) {
     case 1:
      {
       i10 = HEAPU8[i1 >> 0] | 0;
       i11 = -1;
       i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i53 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i54 >> 2] & i10) >>> (HEAPU8[i55 >> 0] | 0)) >> 0] | 0;
       i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i56 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i57 >> 2] & i10) >>> (HEAPU8[i58 >> 0] | 0)) >> 0] | 0;
       i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i59 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i60 >> 2] & i10) >>> (HEAPU8[i61 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 2:
      {
       i10 = HEAPU16[i1 >> 1] | 0;
       i11 = -1;
       i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i53 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i54 >> 2] & i10) >>> (HEAPU8[i55 >> 0] | 0)) >> 0] | 0;
       i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i56 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i57 >> 2] & i10) >>> (HEAPU8[i58 >> 0] | 0)) >> 0] | 0;
       i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i59 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i60 >> 2] & i10) >>> (HEAPU8[i61 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 3:
      {
       i11 = -1;
       i5 = HEAP8[i1 + ((HEAPU8[i55 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i8 = HEAP8[i1 + ((HEAPU8[i58 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i10 = HEAP8[i1 + ((HEAPU8[i61 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       break L36;
      }
     case 4:
      {
       i10 = HEAP32[i1 >> 2] | 0;
       i11 = -1;
       i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i53 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i54 >> 2] & i10) >>> (HEAPU8[i55 >> 0] | 0)) >> 0] | 0;
       i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i56 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i57 >> 2] & i10) >>> (HEAPU8[i58 >> 0] | 0)) >> 0] | 0;
       i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i59 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i60 >> 2] & i10) >>> (HEAPU8[i61 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     default:
      {
       i11 = -1;
       i5 = 0;
       i8 = 0;
       i10 = 0;
       break L36;
      }
     } else switch (i30 << 24 >> 24) {
     case 1:
      {
       i10 = HEAPU8[i1 >> 0] | 0;
       i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & i10) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
       i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i53 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i54 >> 2] & i10) >>> (HEAPU8[i55 >> 0] | 0)) >> 0] | 0;
       i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i56 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i57 >> 2] & i10) >>> (HEAPU8[i58 >> 0] | 0)) >> 0] | 0;
       i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i59 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i60 >> 2] & i10) >>> (HEAPU8[i61 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 2:
      {
       i10 = HEAPU16[i1 >> 1] | 0;
       i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((i5 & i10) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
       i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i53 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i54 >> 2] & i10) >>> (HEAPU8[i55 >> 0] | 0)) >> 0] | 0;
       i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i56 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i57 >> 2] & i10) >>> (HEAPU8[i58 >> 0] | 0)) >> 0] | 0;
       i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i59 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i60 >> 2] & i10) >>> (HEAPU8[i61 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     case 3:
      {
       i11 = -1;
       i5 = HEAP8[i1 + ((HEAPU8[i55 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i8 = HEAP8[i1 + ((HEAPU8[i58 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i10 = HEAP8[i1 + ((HEAPU8[i61 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       break L36;
      }
     case 4:
      {
       i10 = HEAP32[i1 >> 2] | 0;
       i11 = HEAP8[(HEAP32[5724 + ((HEAPU8[i23 >> 0] | 0) << 2) >> 2] | 0) + ((i10 & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
       i5 = HEAP8[(HEAP32[5724 + ((HEAPU8[i53 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i54 >> 2] & i10) >>> (HEAPU8[i55 >> 0] | 0)) >> 0] | 0;
       i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i56 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i57 >> 2] & i10) >>> (HEAPU8[i58 >> 0] | 0)) >> 0] | 0;
       i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i59 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i60 >> 2] & i10) >>> (HEAPU8[i61 >> 0] | 0)) >> 0] | 0;
       break L36;
      }
     default:
      {
       i11 = 0;
       i5 = 0;
       i8 = 0;
       i10 = 0;
       break L36;
      }
     } while (0);
     i9 = i5 & 255;
     i8 = i8 & 255;
     i5 = i10 & 255;
     i10 = i11 & 255;
     if (!i62) {
      i12 = ((Math_imul(i12, i45) | 0) >>> 0) / 255 | 0;
      i13 = ((Math_imul(i13, i65) | 0) >>> 0) / 255 | 0;
      i14 = ((Math_imul(i14, i26) | 0) >>> 0) / 255 | 0;
     }
     i11 = ((Math_imul(i15, i27) | 0) >>> 0) / 255 | 0;
     i11 = i63 ? i15 : i11;
     if (i64 & i11 >>> 0 < 255) {
      i12 = ((Math_imul(i12, i11) | 0) >>> 0) / 255 | 0;
      i13 = ((Math_imul(i13, i11) | 0) >>> 0) / 255 | 0;
      i14 = ((Math_imul(i14, i11) | 0) >>> 0) / 255 | 0;
     }
     switch (i24 & 7) {
     case 0:
      {
       i10 = i11;
       i9 = i12;
       i8 = i13;
       i5 = i14;
       break;
      }
     case 1:
      {
       i15 = 255 - i11 | 0;
       i10 = (((Math_imul(i15, i10) | 0) >>> 0) / 255 | 0) + i11 | 0;
       i9 = i12 + (((Math_imul(i15, i9) | 0) >>> 0) / 255 | 0) | 0;
       i8 = i13 + (((Math_imul(i15, i8) | 0) >>> 0) / 255 | 0) | 0;
       i5 = i14 + (((Math_imul(i15, i5) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 2:
      {
       i9 = i12 + i9 | 0;
       i8 = i13 + i8 | 0;
       i5 = i14 + i5 | 0;
       i9 = i9 >>> 0 < 255 ? i9 : 255;
       i8 = i8 >>> 0 < 255 ? i8 : 255;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       break;
      }
     case 4:
      {
       i9 = ((Math_imul(i12, i9) | 0) >>> 0) / 255 | 0;
       i8 = ((Math_imul(i13, i8) | 0) >>> 0) / 255 | 0;
       i5 = ((Math_imul(i14, i5) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     if (i16) switch (i30 << 24 >> 24) {
     case 1:
      {
       HEAP8[i1 >> 0] = i9 >>> (HEAPU8[i53 >> 0] | 0) << (HEAPU8[i55 >> 0] | 0) | i8 >>> (HEAPU8[i56 >> 0] | 0) << (HEAPU8[i58 >> 0] | 0) | i5 >>> (HEAPU8[i59 >> 0] | 0) << (HEAPU8[i61 >> 0] | 0);
       break L34;
      }
     case 2:
      {
       HEAP16[i1 >> 1] = i9 >>> (HEAPU8[i53 >> 0] | 0) << (HEAPU8[i55 >> 0] | 0) | i8 >>> (HEAPU8[i56 >> 0] | 0) << (HEAPU8[i58 >> 0] | 0) | i5 >>> (HEAPU8[i59 >> 0] | 0) << (HEAPU8[i61 >> 0] | 0);
       break L34;
      }
     case 3:
      {
       HEAP8[i1 + ((HEAPU8[i55 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
       HEAP8[i1 + ((HEAPU8[i58 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
       HEAP8[i1 + ((HEAPU8[i61 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
       break L34;
      }
     case 4:
      {
       HEAP32[i1 >> 2] = i9 >>> (HEAPU8[i53 >> 0] | 0) << (HEAPU8[i55 >> 0] | 0) | i8 >>> (HEAPU8[i56 >> 0] | 0) << (HEAPU8[i58 >> 0] | 0) | i5 >>> (HEAPU8[i59 >> 0] | 0) << (HEAPU8[i61 >> 0] | 0);
       break L34;
      }
     default:
      break L34;
     } else switch (i30 << 24 >> 24) {
     case 1:
      {
       HEAP8[i1 >> 0] = i8 >>> (HEAPU8[i56 >> 0] | 0) << (HEAPU8[i58 >> 0] | 0) | i9 >>> (HEAPU8[i53 >> 0] | 0) << (HEAPU8[i55 >> 0] | 0) | i5 >>> (HEAPU8[i59 >> 0] | 0) << (HEAPU8[i61 >> 0] | 0) | i10 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0);
       break L34;
      }
     case 2:
      {
       HEAP16[i1 >> 1] = i8 >>> (HEAPU8[i56 >> 0] | 0) << (HEAPU8[i58 >> 0] | 0) | i9 >>> (HEAPU8[i53 >> 0] | 0) << (HEAPU8[i55 >> 0] | 0) | i5 >>> (HEAPU8[i59 >> 0] | 0) << (HEAPU8[i61 >> 0] | 0) | i10 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0);
       break L34;
      }
     case 3:
      {
       HEAP8[i1 + ((HEAPU8[i55 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
       HEAP8[i1 + ((HEAPU8[i58 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
       HEAP8[i1 + ((HEAPU8[i61 >> 0] | 0) >>> 3 & 255) >> 0] = i5;
       break L34;
      }
     case 4:
      {
       HEAP32[i1 >> 2] = i8 >>> (HEAPU8[i56 >> 0] | 0) << (HEAPU8[i58 >> 0] | 0) | i9 >>> (HEAPU8[i53 >> 0] | 0) << (HEAPU8[i55 >> 0] | 0) | i5 >>> (HEAPU8[i59 >> 0] | 0) << (HEAPU8[i61 >> 0] | 0) | i10 >>> (HEAPU8[i23 >> 0] | 0) << (HEAPU8[i20 >> 0] | 0);
       break L34;
      }
     default:
      break L34;
     }
    } while (0);
    if (!i4) break; else {
     i1 = i1 + i31 | 0;
     i5 = i17;
     i7 = i7 + i38 | 0;
    }
   }
  }
  i1 = (HEAP32[i39 >> 2] | 0) + (HEAP32[i40 >> 2] | 0) | 0;
  HEAP32[i39 >> 2] = i1;
  i17 = HEAP32[i35 >> 2] | 0;
  HEAP32[i35 >> 2] = i17 + -1;
  if (!i17) break;
  i3 = i3 + i36 | 0;
  i4 = HEAP32[i37 >> 2] | 0;
 }
 return;
}

function _GLES2_CreateTexture(i1, i20) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i26 = i28 + 200 | 0;
 i24 = i28 + 176 | 0;
 i22 = i28 + 152 | 0;
 i19 = i28 + 128 | 0;
 i17 = i28 + 104 | 0;
 i13 = i28 + 80 | 0;
 i12 = i28 + 56 | 0;
 i8 = i28 + 32 | 0;
 i7 = i28 + 8 | 0;
 i3 = i28;
 i25 = i1 + 320 | 0;
 i21 = HEAP32[i25 >> 2] | 0;
 i2 = HEAP32[i21 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i2 | 0)) {
  i1 = i21;
  i27 = 4;
 } else {
  HEAP32[i21 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i1 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i21 >> 2];
   _GLES2_UpdateViewport(i1) | 0;
   i1 = HEAP32[i25 >> 2] | 0;
   i27 = 4;
  }
 }
 if ((i27 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i4 = i20 + 4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 L10 : do if ((i1 | 0) < 825382478) if ((i1 | 0) < 374740996) if ((i1 | 0) < 372645892) switch (i1 | 0) {
 case 370546692:
  {
   i15 = 6408;
   break L10;
  }
 default:
  {
   i27 = 9;
   break L10;
  }
 } else switch (i1 | 0) {
 case 372645892:
  {
   i15 = 6408;
   break L10;
  }
 default:
  {
   i27 = 9;
   break L10;
  }
 } else if ((i1 | 0) < 376840196) switch (i1 | 0) {
 case 374740996:
  {
   i15 = 6408;
   break L10;
  }
 default:
  {
   i27 = 9;
   break L10;
  }
 } else switch (i1 | 0) {
 case 376840196:
  {
   i15 = 6408;
   break L10;
  }
 default:
  {
   i27 = 9;
   break L10;
  }
 } else {
  L22 : do if ((i1 | 0) < 842094169) if ((i1 | 0) < 842094158) switch (i1 | 0) {
  case 825382478:
   break L22;
  default:
   {
    i27 = 9;
    break L10;
   }
  } else switch (i1 | 0) {
  case 842094158:
   break L22;
  default:
   {
    i27 = 9;
    break L10;
   }
  } else if ((i1 | 0) < 1448433993) switch (i1 | 0) {
  case 842094169:
   break L22;
  default:
   {
    i27 = 9;
    break L10;
   }
  } else switch (i1 | 0) {
  case 1448433993:
   break L22;
  default:
   {
    i27 = 9;
    break L10;
   }
  } while (0);
  i15 = 6409;
 } while (0);
 if ((i27 | 0) == 9) {
  i27 = _SDL_SetError(46212, i3) | 0;
  STACKTOP = i28;
  return i27 | 0;
 }
 i23 = _SDL_calloc(1, 44) | 0;
 if (!i23) {
  i27 = _SDL_Error(0) | 0;
  STACKTOP = i28;
  return i27 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 i16 = i23 + 4 | 0;
 HEAP32[i16 >> 2] = 3553;
 HEAP32[i23 + 8 >> 2] = i15;
 HEAP32[i23 + 12 >> 2] = 5121;
 i11 = HEAP32[i4 >> 2] | 0;
 i5 = i23 + 24 | 0;
 HEAP32[i5 >> 2] = ((i11 | 0) == 1448433993 | (i11 | 0) == 842094169) & 1;
 i10 = i23 + 28 | 0;
 HEAP32[i10 >> 2] = ((i11 | 0) == 842094158 | (i11 | 0) == 825382478) & 1;
 i11 = i23 + 36 | 0;
 HEAP32[i11 >> 2] = 0;
 i6 = i23 + 32 | 0;
 HEAP32[i6 >> 2] = 0;
 i1 = _SDL_GetHint(47574) | 0;
 if (!i1) i14 = 9728; else if ((HEAP8[i1 >> 0] | 0) == 48) i14 = 9728; else {
  i14 = (_SDL_strcasecmp(i1, 47599) | 0) == 0;
  i14 = i14 ? 9728 : 9729;
 }
 i18 = i20 + 8 | 0;
 if ((HEAP32[i18 >> 2] | 0) == 1) {
  i2 = HEAP32[i20 + 12 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  L46 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L46;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L46;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  i2 = Math_imul(i1, i2) | 0;
  HEAP32[i23 + 20 >> 2] = i2;
  i2 = Math_imul(HEAP32[i20 + 16 >> 2] | 0, i2) | 0;
  if (!(HEAP32[i5 >> 2] | 0)) i1 = i2; else i1 = ((i2 | 0) / 2 | 0) + i2 | 0;
  if (HEAP32[i10 >> 2] | 0) i1 = ((i2 | 0) / 2 | 0) + i1 | 0;
  i9 = _SDL_calloc(1, i1) | 0;
  HEAP32[i23 + 16 >> 2] = i9;
  if (!i9) {
   _SDL_free(i23);
   i27 = _SDL_Error(0) | 0;
   STACKTOP = i28;
   return i27 | 0;
  }
 }
 i1 = HEAP32[i25 >> 2] | 0;
 L63 : do if (HEAP32[i1 + 4 >> 2] | 0) {
  i4 = i1 + 108 | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (i1 | 0) {
   i2 = 89710;
   while (1) {
    if (!i2) i27 = 30; else if (!(HEAP8[i2 >> 0] | 0)) i27 = 30; else i3 = i2;
    if ((i27 | 0) == 30) {
     i27 = 0;
     i3 = 39958;
    }
    switch (i1 | 0) {
    case 1280:
     {
      i2 = 40029;
      break;
     }
    case 1281:
     {
      i2 = 40012;
      break;
     }
    case 1282:
     {
      i2 = 39991;
      break;
     }
    case 1285:
     {
      i2 = 39974;
      break;
     }
    default:
     i2 = 39966;
    }
    HEAP32[i7 >> 2] = i3;
    HEAP32[i7 + 4 >> 2] = 40071;
    HEAP32[i7 + 8 >> 2] = 574;
    HEAP32[i7 + 12 >> 2] = 46241;
    HEAP32[i7 + 16 >> 2] = i2;
    HEAP32[i7 + 20 >> 2] = i1;
    _SDL_SetError(40045, i7) | 0;
    i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
    if (!i1) break L63; else i2 = i3;
   }
  }
 } while (0);
 if (HEAP32[i5 >> 2] | 0) {
  i7 = i21 + 96 | 0;
  FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 127](1, i6);
  i1 = HEAP32[i25 >> 2] | 0;
  if (HEAP32[i1 + 4 >> 2] | 0) {
   i3 = i1 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
   if (i2 | 0) {
    while (1) {
     switch (i2 | 0) {
     case 1280:
      {
       i1 = 40029;
       break;
      }
     case 1281:
      {
       i1 = 40012;
       break;
      }
     case 1282:
      {
       i1 = 39991;
       break;
      }
     case 1285:
      {
       i1 = 39974;
       break;
      }
     default:
      i1 = 39966;
     }
     HEAP32[i8 >> 2] = 46296;
     HEAP32[i8 + 4 >> 2] = 40071;
     HEAP32[i8 + 8 >> 2] = 578;
     HEAP32[i8 + 12 >> 2] = 46241;
     HEAP32[i8 + 16 >> 2] = i1;
     HEAP32[i8 + 20 >> 2] = i2;
     _SDL_SetError(40045, i8) | 0;
     i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
     if (!i2) {
      i1 = -1;
      break;
     }
    }
    STACKTOP = i28;
    return i1 | 0;
   }
  }
  i8 = i21 + 16 | 0;
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 511](33986);
  i9 = i21 + 28 | 0;
  FUNCTION_TABLE_vii[HEAP32[i9 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i6 >> 2] | 0);
  i3 = i21 + 160 | 0;
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10241, i14);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10240, i14);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10242, 33071);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10243, 33071);
  i4 = i21 + 156 | 0;
  i5 = i20 + 12 | 0;
  i6 = i20 + 16 | 0;
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i4 >> 2] & 15](HEAP32[i16 >> 2] | 0, 0, i15, (HEAP32[i5 >> 2] | 0) / 2 | 0, (HEAP32[i6 >> 2] | 0) / 2 | 0, 0, i15, 5121, 0);
  FUNCTION_TABLE_vii[HEAP32[i7 >> 2] & 127](1, i11);
  i1 = HEAP32[i25 >> 2] | 0;
  if (HEAP32[i1 + 4 >> 2] | 0) {
   i7 = i1 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i7 >> 2] & 7]() | 0;
   if (i2 | 0) {
    while (1) {
     switch (i2 | 0) {
     case 1280:
      {
       i1 = 40029;
       break;
      }
     case 1281:
      {
       i1 = 40012;
       break;
      }
     case 1282:
      {
       i1 = 39991;
       break;
      }
     case 1285:
      {
       i1 = 39974;
       break;
      }
     default:
      i1 = 39966;
     }
     HEAP32[i12 >> 2] = 46296;
     HEAP32[i12 + 4 >> 2] = 40071;
     HEAP32[i12 + 8 >> 2] = 590;
     HEAP32[i12 + 12 >> 2] = 46241;
     HEAP32[i12 + 16 >> 2] = i1;
     HEAP32[i12 + 20 >> 2] = i2;
     _SDL_SetError(40045, i12) | 0;
     i2 = FUNCTION_TABLE_i[HEAP32[i7 >> 2] & 7]() | 0;
     if (!i2) {
      i1 = -1;
      break;
     }
    }
    STACKTOP = i28;
    return i1 | 0;
   }
  }
  FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 511](33985);
  FUNCTION_TABLE_vii[HEAP32[i9 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i11 >> 2] | 0);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10241, i14);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10240, i14);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10242, 33071);
  FUNCTION_TABLE_viii[HEAP32[i3 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10243, 33071);
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i4 >> 2] & 15](HEAP32[i16 >> 2] | 0, 0, i15, (HEAP32[i5 >> 2] | 0) / 2 | 0, (HEAP32[i6 >> 2] | 0) / 2 | 0, 0, i15, 5121, 0);
  i1 = HEAP32[i25 >> 2] | 0;
  if (HEAP32[i1 + 4 >> 2] | 0) {
   i3 = i1 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
   if (i2 | 0) {
    while (1) {
     switch (i2 | 0) {
     case 1280:
      {
       i1 = 40029;
       break;
      }
     case 1281:
      {
       i1 = 40012;
       break;
      }
     case 1282:
      {
       i1 = 39991;
       break;
      }
     case 1285:
      {
       i1 = 39974;
       break;
      }
     default:
      i1 = 39966;
     }
     HEAP32[i13 >> 2] = 46311;
     HEAP32[i13 + 4 >> 2] = 40071;
     HEAP32[i13 + 8 >> 2] = 600;
     HEAP32[i13 + 12 >> 2] = 46241;
     HEAP32[i13 + 16 >> 2] = i1;
     HEAP32[i13 + 20 >> 2] = i2;
     _SDL_SetError(40045, i13) | 0;
     i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
     if (!i2) {
      i1 = -1;
      break;
     }
    }
    STACKTOP = i28;
    return i1 | 0;
   }
  }
 }
 i4 = i21 + 96 | 0;
 if (HEAP32[i10 >> 2] | 0) {
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](1, i11);
  i1 = HEAP32[i25 >> 2] | 0;
  if (HEAP32[i1 + 4 >> 2] | 0) {
   i3 = i1 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
   if (i2 | 0) {
    while (1) {
     switch (i2 | 0) {
     case 1280:
      {
       i1 = 40029;
       break;
      }
     case 1281:
      {
       i1 = 40012;
       break;
      }
     case 1282:
      {
       i1 = 39991;
       break;
      }
     case 1285:
      {
       i1 = 39974;
       break;
      }
     default:
      i1 = 39966;
     }
     HEAP32[i17 >> 2] = 46296;
     HEAP32[i17 + 4 >> 2] = 40071;
     HEAP32[i17 + 8 >> 2] = 607;
     HEAP32[i17 + 12 >> 2] = 46241;
     HEAP32[i17 + 16 >> 2] = i1;
     HEAP32[i17 + 20 >> 2] = i2;
     _SDL_SetError(40045, i17) | 0;
     i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
     if (!i2) {
      i1 = -1;
      break;
     }
    }
    STACKTOP = i28;
    return i1 | 0;
   }
  }
  FUNCTION_TABLE_vi[HEAP32[i21 + 16 >> 2] & 511](33985);
  FUNCTION_TABLE_vii[HEAP32[i21 + 28 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i11 >> 2] | 0);
  i1 = i21 + 160 | 0;
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10241, i14);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10240, i14);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10242, 33071);
  FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10243, 33071);
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i21 + 156 >> 2] & 15](HEAP32[i16 >> 2] | 0, 0, 6410, (HEAP32[i20 + 12 >> 2] | 0) / 2 | 0, (HEAP32[i20 + 16 >> 2] | 0) / 2 | 0, 0, 6410, 5121, 0);
  i1 = HEAP32[i25 >> 2] | 0;
  if (HEAP32[i1 + 4 >> 2] | 0) {
   i3 = i1 + 108 | 0;
   i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
   if (i2 | 0) {
    while (1) {
     switch (i2 | 0) {
     case 1280:
      {
       i1 = 40029;
       break;
      }
     case 1281:
      {
       i1 = 40012;
       break;
      }
     case 1282:
      {
       i1 = 39991;
       break;
      }
     case 1285:
      {
       i1 = 39974;
       break;
      }
     default:
      i1 = 39966;
     }
     HEAP32[i19 >> 2] = 46311;
     HEAP32[i19 + 4 >> 2] = 40071;
     HEAP32[i19 + 8 >> 2] = 617;
     HEAP32[i19 + 12 >> 2] = 46241;
     HEAP32[i19 + 16 >> 2] = i1;
     HEAP32[i19 + 20 >> 2] = i2;
     _SDL_SetError(40045, i19) | 0;
     i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
     if (!i2) {
      i1 = -1;
      break;
     }
    }
    STACKTOP = i28;
    return i1 | 0;
   }
  }
 }
 FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](1, i23);
 i1 = HEAP32[i25 >> 2] | 0;
 if (HEAP32[i1 + 4 >> 2] | 0) {
  i3 = i1 + 108 | 0;
  i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (i2 | 0) {
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 40029;
      break;
     }
    case 1281:
     {
      i1 = 40012;
      break;
     }
    case 1282:
     {
      i1 = 39991;
      break;
     }
    case 1285:
     {
      i1 = 39974;
      break;
     }
    default:
     i1 = 39966;
    }
    HEAP32[i22 >> 2] = 46296;
    HEAP32[i22 + 4 >> 2] = 40071;
    HEAP32[i22 + 8 >> 2] = 623;
    HEAP32[i22 + 12 >> 2] = 46241;
    HEAP32[i22 + 16 >> 2] = i1;
    HEAP32[i22 + 20 >> 2] = i2;
    _SDL_SetError(40045, i22) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i28;
   return i1 | 0;
  }
 }
 HEAP32[i20 + 68 >> 2] = i23;
 FUNCTION_TABLE_vi[HEAP32[i21 + 16 >> 2] & 511](33984);
 FUNCTION_TABLE_vii[HEAP32[i21 + 28 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i23 >> 2] | 0);
 i4 = i21 + 160 | 0;
 FUNCTION_TABLE_viii[HEAP32[i4 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10241, i14);
 FUNCTION_TABLE_viii[HEAP32[i4 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10240, i14);
 FUNCTION_TABLE_viii[HEAP32[i4 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10242, 33071);
 FUNCTION_TABLE_viii[HEAP32[i4 >> 2] & 63](HEAP32[i16 >> 2] | 0, 10243, 33071);
 i4 = i20 + 12 | 0;
 i6 = i20 + 16 | 0;
 FUNCTION_TABLE_viiiiiiiii[HEAP32[i21 + 156 >> 2] & 15](HEAP32[i16 >> 2] | 0, 0, i15, HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0, 0, i15, 5121, 0);
 i1 = HEAP32[i25 >> 2] | 0;
 if (HEAP32[i1 + 4 >> 2] | 0) {
  i3 = i1 + 108 | 0;
  i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (i2 | 0) {
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 40029;
      break;
     }
    case 1281:
     {
      i1 = 40012;
      break;
     }
    case 1282:
     {
      i1 = 39991;
      break;
     }
    case 1285:
     {
      i1 = 39974;
      break;
     }
    default:
     i1 = 39966;
    }
    HEAP32[i24 >> 2] = 46311;
    HEAP32[i24 + 4 >> 2] = 40071;
    HEAP32[i24 + 8 >> 2] = 634;
    HEAP32[i24 + 12 >> 2] = 46241;
    HEAP32[i24 + 16 >> 2] = i1;
    HEAP32[i24 + 20 >> 2] = i2;
    _SDL_SetError(40045, i24) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i28;
   return i1 | 0;
  }
 }
 L165 : do if ((HEAP32[i18 >> 2] | 0) == 2) {
  i5 = HEAP32[i25 >> 2] | 0;
  i4 = HEAP32[i4 >> 2] | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = i5 + 232 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 | 0) do {
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) if ((HEAP32[i1 + 4 >> 2] | 0) == (i2 | 0)) break L165;
   i1 = HEAP32[i1 + 12 >> 2] | 0;
  } while ((i1 | 0) != 0);
  i1 = _SDL_malloc(16) | 0;
  HEAP32[i1 >> 2] = i4;
  HEAP32[i1 + 4 >> 2] = i2;
  FUNCTION_TABLE_vii[HEAP32[i5 + 92 >> 2] & 127](1, i1 + 8 | 0);
  HEAP32[i1 + 12 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i3 >> 2] = i1;
 } else i1 = 0; while (0);
 HEAP32[i23 + 40 >> 2] = i1;
 i1 = HEAP32[i25 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i27 = 0;
  STACKTOP = i28;
  return i27 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i27 = 0;
  STACKTOP = i28;
  return i27 | 0;
 } else i2 = 89710;
 while (1) {
  if (!i2) i27 = 105; else if (!(HEAP8[i2 >> 0] | 0)) i27 = 105; else i3 = i2;
  if ((i27 | 0) == 105) {
   i27 = 0;
   i3 = 39958;
  }
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i26 >> 2] = i3;
  HEAP32[i26 + 4 >> 2] = 40071;
  HEAP32[i26 + 8 >> 2] = 644;
  HEAP32[i26 + 12 >> 2] = 46241;
  HEAP32[i26 + 16 >> 2] = i2;
  HEAP32[i26 + 20 >> 2] = i1;
  _SDL_SetError(40045, i26) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i28;
 return i1 | 0;
}

function _SDL_BlendLine_RGB888(i17, i18, i5, i9, i8, i6, i1, i2, i3, i4, i19) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 var i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = i1 & 255;
 if ((i6 + -1 | 0) >>> 0 < 2) {
  i16 = i4 & 255;
  i22 = ((Math_imul(i16, i1) | 0) >>> 0) / 255 | 0;
  i21 = ((Math_imul(i16, i2 & 255) | 0) >>> 0) / 255 | 0;
  i20 = ((Math_imul(i16, i3 & 255) | 0) >>> 0) / 255 | 0;
  i1 = i16;
 } else {
  i22 = i1;
  i21 = i2 & 255;
  i20 = i3 & 255;
  i1 = i4 & 255;
 }
 i16 = i1 ^ 255;
 if ((i8 | 0) == (i5 | 0)) switch (i6 | 0) {
 case 1:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 2) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 & 255, i16) | 0) >>> 0) / 255 | 0) + i20 | (((Math_imul(i19 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 16;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 2:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 2) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i22 | 0;
    i17 = (i18 >>> 8 & 255) + i21 | 0;
    i18 = (i18 & 255) + i20 | 0;
    HEAP32[i1 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) << 8 | (i18 >>> 0 < 255 ? i18 : 255) | (i19 >>> 0 < 255 ? i19 : 255) << 16;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 case 4:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 2) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i20) | 0) >>> 0) / 255 | 0) | (((Math_imul(i19 >>> 16 & 255, i22) | 0) >>> 0) / 255 | 0) << 16;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 default:
  {
   i1 = (HEAP32[i17 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 2) | 0;
   if ((i9 | 0) < (i18 | 0)) {
    i1 = i1 + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + 4 | 0;
    i3 = i18 - i9 | 0;
   } else {
    i1 = i1 + (i18 << 2) | 0;
    i3 = i9 - i18 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = i21 << 8 | i20 | i22 << 16;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + 4 | 0;
   }
   return;
  }
 }
 if ((i9 | 0) == (i18 | 0)) switch (i6 | 0) {
 case 1:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 & 255, i16) | 0) >>> 0) / 255 | 0) + i20 | (((Math_imul(i19 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 16;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i18 = HEAP32[i1 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i22 | 0;
    i17 = (i18 >>> 8 & 255) + i21 | 0;
    i18 = (i18 & 255) + i20 | 0;
    HEAP32[i1 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) << 8 | (i18 >>> 0 < 255 ? i18 : 255) | (i19 >>> 0 < 255 ? i19 : 255) << 16;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   while (1) {
    i2 = i2 + -1 | 0;
    i19 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i20) | 0) >>> 0) / 255 | 0) | (((Math_imul(i19 >>> 16 & 255, i22) | 0) >>> 0) / 255 | 0) << 16;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 default:
  {
   i4 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i1 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i1 = i1 + ((Math_imul(i4, i8) | 0) << 2) + (i9 << 2) | 0;
    i2 = (i19 | 0) != 0;
    i1 = i2 ? i1 : i1 + (i4 << 2) | 0;
    i3 = i5 - i8 | 0;
   } else {
    i1 = i1 + ((Math_imul(i4, i5) | 0) << 2) + (i9 << 2) | 0;
    i3 = i8 - i5 | 0;
    i2 = (i19 | 0) != 0;
   }
   i2 = i3 + (i2 & 1) | 0;
   if (!i2) return;
   i3 = i21 << 8 | i20 | i22 << 16;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 i15 = i18 - i9 | 0;
 i1 = i5 - i8 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) switch (i6 | 0) {
 case 1:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i18 << 2) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i19 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 & 255, i16) | 0) >>> 0) / 255 | 0) + i20 | (((Math_imul(i19 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 16;
    if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
   }
   return;
  }
 case 2:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i18 << 2) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i18 = HEAP32[i2 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i22 | 0;
    i17 = (i18 >>> 8 & 255) + i21 | 0;
    i18 = (i18 & 255) + i20 | 0;
    HEAP32[i2 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) << 8 | (i18 >>> 0 < 255 ? i18 : 255) | (i19 >>> 0 < 255 ? i19 : 255) << 16;
    if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
   }
   return;
  }
 case 4:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i2 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i3 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = (i19 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
   } else {
    i2 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i18 << 2) | 0;
    i1 = i8 - i5 | 0;
    i3 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i1 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if (!i1) return;
   while (1) {
    i1 = i1 + -1 | 0;
    i19 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i20) | 0) >>> 0) / 255 | 0) | (((Math_imul(i19 >>> 16 & 255, i22) | 0) >>> 0) / 255 | 0) << 16;
    if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
   }
   return;
  }
 default:
  {
   i3 = (HEAP32[i17 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i17 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i2 = HEAP32[i17 + 20 >> 2] | 0;
   if ((i8 | 0) < (i5 | 0)) {
    i17 = i2 + ((Math_imul(i3, i8) | 0) << 2) + (i9 << 2) | 0;
    i4 = i3 + ((i9 | 0) > (i18 | 0) ? -1 : 1) | 0;
    i2 = i1;
    i1 = (i19 | 0) == 0 ? i17 + (i4 << 2) | 0 : i17;
   } else {
    i1 = i2 + ((Math_imul(i3, i5) | 0) << 2) + (i18 << 2) | 0;
    i2 = i8 - i5 | 0;
    i4 = i3 + ((i9 | 0) < (i18 | 0) ? -1 : 1) | 0;
   }
   i2 = i2 + ((i19 | 0) != 0 & 1) | 0;
   if (!i2) return;
   i3 = i21 << 8 | i20 | i22 << 16;
   while (1) {
    i2 = i2 + -1 | 0;
    HEAP32[i1 >> 2] = i3;
    if (!i2) break; else i1 = i1 + (i4 << 2) | 0;
   }
   return;
  }
 }
 switch (i6 | 0) {
 case 1:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = i17 + 16 | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i19 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i19 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0) + i21 << 8 | (((Math_imul(i19 & 255, i16) | 0) >>> 0) / 255 | 0) + i20 | (((Math_imul(i19 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0) + i22 << 16;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 2:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = i17 + 16 | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i18 = HEAP32[i2 >> 2] | 0;
    i19 = (i18 >>> 16 & 255) + i22 | 0;
    i17 = (i18 >>> 8 & 255) + i21 | 0;
    i18 = (i18 & 255) + i20 | 0;
    HEAP32[i2 >> 2] = (i17 >>> 0 < 255 ? i17 : 255) << 8 | (i18 >>> 0 < 255 ? i18 : 255) | (i19 >>> 0 < 255 ? i19 : 255) << 16;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 case 4:
  {
   i1 = i9 - i18 | 0;
   i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
   i2 = i8 - i5 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   if ((i1 | 0) < (i2 | 0)) {
    i14 = i1 << 1;
    i6 = 1;
    i4 = 0;
    i3 = i1 - i2 | 0;
    i15 = i14;
    i14 = i14 - i2 | 0;
    i1 = i2;
   } else {
    i14 = i2 << 1;
    i6 = 0;
    i4 = 1;
    i3 = i2 - i1 | 0;
    i15 = i14;
    i14 = i14 - i1 | 0;
   }
   i13 = i3 << 1;
   i12 = (i9 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i4 | 0 : i4;
   i12 = i12 ? -1 : 1;
   i9 = (i8 | 0) < (i5 | 0);
   i10 = i9 ? 0 - i6 | 0 : i6;
   i9 = i9 ? -1 : 1;
   i7 = i1 + ((i19 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) return;
   i8 = HEAP32[i17 + 20 >> 2] | 0;
   i6 = i17 + 16 | 0;
   i3 = i18;
   i4 = 0;
   i1 = i14;
   while (1) {
    i2 = i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i5) | 0) + (i3 << 2) | 0;
    i19 = HEAP32[i2 >> 2] | 0;
    HEAP32[i2 >> 2] = (((Math_imul(i19 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i19 & 255, i20) | 0) >>> 0) / 255 | 0) | (((Math_imul(i19 >>> 16 & 255, i22) | 0) >>> 0) / 255 | 0) << 16;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i7 | 0)) break; else {
     i5 = i5 + (i2 ? i10 : i9) | 0;
     i3 = (i2 ? i11 : i12) + i3 | 0;
     i1 = (i2 ? i15 : i13) + i1 | 0;
    }
   }
   return;
  }
 default:
  {
   i2 = i9 - i18 | 0;
   i2 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i3 = i8 - i5 | 0;
   i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
   if ((i2 | 0) < (i3 | 0)) {
    i1 = i2 << 1;
    i7 = 1;
    i6 = 0;
    i4 = i2 - i3 | 0;
    i15 = i1;
    i1 = i1 - i3 | 0;
    i2 = i3;
   } else {
    i1 = i3 << 1;
    i7 = 0;
    i6 = 1;
    i4 = i3 - i2 | 0;
    i15 = i1;
    i1 = i1 - i2 | 0;
   }
   i14 = i4 << 1;
   i13 = (i9 | 0) < (i18 | 0);
   i12 = i13 ? 0 - i6 | 0 : i6;
   i13 = i13 ? -1 : 1;
   i10 = (i8 | 0) < (i5 | 0);
   i11 = i10 ? 0 - i7 | 0 : i7;
   i10 = i10 ? -1 : 1;
   i8 = i2 + ((i19 | 0) != 0 & 1) | 0;
   if ((i8 | 0) <= 0) return;
   i9 = HEAP32[i17 + 20 >> 2] | 0;
   i7 = i17 + 16 | 0;
   i6 = i21 << 8 | i20 | i22 << 16;
   i3 = i18;
   i4 = 0;
   while (1) {
    HEAP32[i9 + (Math_imul(HEAP32[i7 >> 2] | 0, i5) | 0) + (i3 << 2) >> 2] = i6;
    i2 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i8 | 0)) break; else {
     i5 = i5 + (i2 ? i11 : i10) | 0;
     i3 = (i2 ? i12 : i13) + i3 | 0;
     i1 = (i2 ? i15 : i14) + i1 | 0;
    }
   }
   return;
  }
 }
}

function _vfscanf(i29, i1, i23) {
 i29 = i29 | 0;
 i1 = i1 | 0;
 i23 = i23 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i30 = 0, i31 = 0;
 i28 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 i24 = i31 + 8 | 0;
 i25 = i31 + 17 | 0;
 i26 = i31;
 i27 = i31 + 16 | 0;
 if ((HEAP32[i29 + 76 >> 2] | 0) > -1) i30 = ___lockfile(i29) | 0; else i30 = 0;
 i2 = HEAP8[i1 >> 0] | 0;
 L4 : do if (!(i2 << 24 >> 24)) i1 = 0; else {
  i17 = i29 + 4 | 0;
  i18 = i29 + 100 | 0;
  i19 = i29 + 108 | 0;
  i20 = i29 + 8 | 0;
  i21 = i25 + 10 | 0;
  i22 = i25 + 33 | 0;
  i16 = i24 + 4 | 0;
  i8 = i1;
  i13 = 0;
  i1 = 0;
  i3 = 0;
  i4 = i2;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i4 = (HEAP8[i8 >> 0] | 0) == 37;
    L10 : do if (i4) {
     i5 = i8 + 1 | 0;
     i6 = HEAP8[i5 >> 0] | 0;
     L12 : do switch (i6 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i15 = 0;
       i5 = i8 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit(i6 & 255) | 0) if ((HEAP8[i8 + 2 >> 0] | 0) == 36) {
        i15 = _arg_n(i23, (HEAPU8[i5 >> 0] | 0) + -48 | 0) | 0;
        i5 = i8 + 3 | 0;
        break L12;
       }
       i14 = (HEAP32[i23 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i15 = HEAP32[i14 >> 2] | 0;
       HEAP32[i23 >> 2] = i14 + 4;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[i5 >> 0] | 0) | 0)) i11 = 0; else {
      i4 = 0;
      do {
       i4 = (i4 * 10 | 0) + -48 + (HEAPU8[i5 >> 0] | 0) | 0;
       i5 = i5 + 1 | 0;
      } while ((_isdigit(HEAPU8[i5 >> 0] | 0) | 0) != 0);
      i11 = i4;
     }
     i8 = HEAP8[i5 >> 0] | 0;
     i6 = i5 + 1 | 0;
     if (i8 << 24 >> 24 == 109) {
      i4 = (i15 | 0) != 0 & 1;
      i3 = 0;
      i5 = i6;
      i8 = HEAP8[i6 >> 0] | 0;
      i2 = 0;
     } else i4 = 0;
     i6 = i5 + 1 | 0;
     switch (i8 << 24 >> 24) {
     case 104:
      {
       i14 = (HEAP8[i6 >> 0] | 0) == 104;
       i8 = i14 ? -2 : -1;
       i5 = i14 ? i5 + 2 | 0 : i6;
       break;
      }
     case 108:
      {
       i14 = (HEAP8[i6 >> 0] | 0) == 108;
       i8 = i14 ? 3 : 1;
       i5 = i14 ? i5 + 2 | 0 : i6;
       break;
      }
     case 106:
      {
       i8 = 3;
       i5 = i6;
       break;
      }
     case 116:
     case 122:
      {
       i8 = 1;
       i5 = i6;
       break;
      }
     case 76:
      {
       i8 = 2;
       i5 = i6;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i8 = 0;
       break;
      }
     default:
      {
       i28 = 136;
       break L6;
      }
     }
     i10 = HEAPU8[i5 >> 0] | 0;
     i12 = (i10 & 47 | 0) == 3;
     i10 = i12 ? i10 | 32 : i10;
     i12 = i12 ? 1 : i8;
     i9 = i10 & 255;
     switch (i9 << 24 >> 24) {
     case 99:
      {
       i11 = (i11 | 0) > 1 ? i11 : 1;
       break;
      }
     case 91:
      break;
     case 110:
      {
       _store_int(i15, i12, i13, ((i13 | 0) < 0) << 31 >> 31);
       i6 = i13;
       break L8;
      }
     default:
      {
       ___shlim(i29, 0);
       do {
        i6 = HEAP32[i17 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
         HEAP32[i17 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i29) | 0;
       } while ((_isspace(i6) | 0) != 0);
       if (!(HEAP32[i18 >> 2] | 0)) i6 = HEAP32[i17 >> 2] | 0; else {
        i6 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
        HEAP32[i17 >> 2] = i6;
       }
       i13 = (HEAP32[i19 >> 2] | 0) + i13 + i6 - (HEAP32[i20 >> 2] | 0) | 0;
      }
     }
     ___shlim(i29, i11);
     i8 = HEAP32[i17 >> 2] | 0;
     i6 = HEAP32[i18 >> 2] | 0;
     if (i8 >>> 0 < i6 >>> 0) HEAP32[i17 >> 2] = i8 + 1; else {
      if ((___shgetc(i29) | 0) < 0) {
       i28 = 136;
       break L6;
      }
      i6 = HEAP32[i18 >> 2] | 0;
     }
     if (i6 | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
     L58 : do switch (i9 << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       i14 = (i10 | 0) == 99;
       L60 : do if ((i10 | 16 | 0) == 115) {
        _memset(i25 | 0, -1, 257) | 0;
        HEAP8[i25 >> 0] = 0;
        if ((i10 | 0) == 115) {
         HEAP8[i22 >> 0] = 0;
         HEAP8[i21 >> 0] = 0;
         HEAP8[i21 + 1 >> 0] = 0;
         HEAP8[i21 + 2 >> 0] = 0;
         HEAP8[i21 + 3 >> 0] = 0;
         HEAP8[i21 + 4 >> 0] = 0;
        }
       } else {
        i6 = i5 + 1 | 0;
        i9 = (HEAP8[i6 >> 0] | 0) == 94;
        i10 = i9 & 1;
        i5 = i9 ? i5 + 2 | 0 : i6;
        _memset(i25 | 0, i10 | 0, 257) | 0;
        HEAP8[i25 >> 0] = 0;
        i6 = HEAP8[i5 >> 0] | 0;
        switch (i6 << 24 >> 24) {
        case 45:
         {
          i6 = 46;
          i28 = 65;
          break;
         }
        case 93:
         {
          i6 = 94;
          i28 = 65;
          break;
         }
        default:
         {}
        }
        while (1) {
         if ((i28 | 0) == 65) {
          i28 = 0;
          HEAP8[i25 + i6 >> 0] = i10 ^ 1;
          i6 = i5 + 1 | 0;
          i5 = i6;
          i6 = HEAP8[i6 >> 0] | 0;
         }
         L70 : do switch (i6 << 24 >> 24) {
         case 0:
          {
           i28 = 136;
           break L6;
          }
         case 93:
          break L60;
         case 45:
          {
           i9 = i5 + 1 | 0;
           i6 = HEAP8[i9 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 93:
           case 0:
            {
             i6 = 45;
             break L70;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i6 & 255)) {
            i8 = (i10 ^ 1) & 255;
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i25 + i5 >> 0] = i8;
             i6 = HEAP8[i9 >> 0] | 0;
            } while ((i5 | 0) < (i6 & 255 | 0));
            i5 = i9;
           } else i5 = i9;
           break;
          }
         default:
          {}
         } while (0);
         i6 = (i6 & 255) + 1 | 0;
         i28 = 65;
        }
       } while (0);
       i6 = i14 ? i11 + 1 | 0 : 31;
       i10 = (i12 | 0) == 1;
       i12 = (i4 | 0) != 0;
       L78 : do if (i10) {
        if (i12) {
         i2 = _malloc(i6 << 2) | 0;
         if (!i2) {
          i3 = 0;
          i2 = 0;
          i28 = 136;
          break L6;
         }
        } else i2 = i15;
        HEAP32[i24 >> 2] = 0;
        HEAP32[i16 >> 2] = 0;
        i9 = i6;
        i3 = 0;
        L83 : while (1) {
         i8 = (i2 | 0) == 0;
         do {
          L87 : while (1) {
           i6 = HEAP32[i17 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
            HEAP32[i17 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i29) | 0;
           if (!(HEAP8[i25 + (i6 + 1) >> 0] | 0)) break L83;
           HEAP8[i27 >> 0] = i6;
           switch (_mbrtowc(i26, i27, 1, i24) | 0) {
           case -1:
            {
             i3 = 0;
             i28 = 136;
             break L6;
            }
           case -2:
            break;
           default:
            break L87;
           }
          }
          if (!i8) {
           HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i26 >> 2];
           i3 = i3 + 1 | 0;
          }
         } while (!(i12 & (i3 | 0) == (i9 | 0)));
         i3 = i9 << 1 | 1;
         i6 = _realloc(i2, i3 << 2) | 0;
         if (!i6) {
          i3 = 0;
          i28 = 136;
          break L6;
         } else {
          i8 = i9;
          i9 = i3;
          i2 = i6;
          i3 = i8;
         }
        }
        if (!(_mbsinit(i24) | 0)) {
         i3 = 0;
         i28 = 136;
         break L6;
        } else {
         i9 = i3;
         i3 = 0;
         i8 = i2;
        }
       } else {
        if (i12) {
         i3 = _malloc(i6) | 0;
         if (!i3) {
          i3 = 0;
          i2 = 0;
          i28 = 136;
          break L6;
         } else {
          i8 = i6;
          i2 = 0;
         }
         while (1) {
          do {
           i6 = HEAP32[i17 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
            HEAP32[i17 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i29) | 0;
           if (!(HEAP8[i25 + (i6 + 1) >> 0] | 0)) {
            i9 = i2;
            i8 = 0;
            i2 = 0;
            break L78;
           }
           HEAP8[i3 + i2 >> 0] = i6;
           i2 = i2 + 1 | 0;
          } while ((i2 | 0) != (i8 | 0));
          i2 = i8 << 1 | 1;
          i6 = _realloc(i3, i2) | 0;
          if (!i6) {
           i2 = 0;
           i28 = 136;
           break L6;
          } else {
           i9 = i8;
           i8 = i2;
           i3 = i6;
           i2 = i9;
          }
         }
        }
        if (!i15) while (1) {
         i2 = HEAP32[i17 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
          HEAP32[i17 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i29) | 0;
         if (!(HEAP8[i25 + (i2 + 1) >> 0] | 0)) {
          i9 = 0;
          i3 = 0;
          i8 = 0;
          i2 = 0;
          break L78;
         }
        } else i3 = 0;
        while (1) {
         i2 = HEAP32[i17 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
          HEAP32[i17 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i29) | 0;
         if (!(HEAP8[i25 + (i2 + 1) >> 0] | 0)) {
          i9 = i3;
          i3 = i15;
          i8 = 0;
          i2 = 0;
          break L78;
         }
         HEAP8[i15 + i3 >> 0] = i2;
         i3 = i3 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[i18 >> 2] | 0)) i6 = HEAP32[i17 >> 2] | 0; else {
        i6 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
        HEAP32[i17 >> 2] = i6;
       }
       i6 = i6 - (HEAP32[i20 >> 2] | 0) + (HEAP32[i19 >> 2] | 0) | 0;
       if (!i6) break L6;
       if (!((i6 | 0) == (i11 | 0) | i14 ^ 1)) break L6;
       do if (i12) if (i10) {
        HEAP32[i15 >> 2] = i8;
        break;
       } else {
        HEAP32[i15 >> 2] = i3;
        break;
       } while (0);
       if (!i14) {
        if (i8 | 0) HEAP32[i8 + (i9 << 2) >> 2] = 0;
        if (!i3) {
         i3 = 0;
         break L58;
        }
        HEAP8[i3 + i9 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i28 = 124;
       break;
      }
     case 111:
      {
       i6 = 8;
       i28 = 124;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i28 = 124;
       break;
      }
     case 105:
      {
       i6 = 0;
       i28 = 124;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i29, i12, 0);
       if ((HEAP32[i19 >> 2] | 0) == ((HEAP32[i20 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0)) break L6;
       if (i15) switch (i12 | 0) {
       case 0:
        {
         HEAPF32[i15 >> 2] = Math_fround(d7);
         break L58;
        }
       case 1:
        {
         HEAPF64[i15 >> 3] = d7;
         break L58;
        }
       case 2:
        {
         HEAPF64[i15 >> 3] = d7;
         break L58;
        }
       default:
        break L58;
       }
       break;
      }
     default:
      {}
     } while (0);
     do if ((i28 | 0) == 124) {
      i28 = 0;
      i6 = ___intscan(i29, i6, 0, -1, -1) | 0;
      if ((HEAP32[i19 >> 2] | 0) == ((HEAP32[i20 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0)) break L6;
      if ((i15 | 0) != 0 & (i10 | 0) == 112) {
       HEAP32[i15 >> 2] = i6;
       break;
      } else {
       _store_int(i15, i12, i6, tempRet0);
       break;
      }
     } while (0);
     i1 = i1 + ((i15 | 0) != 0 & 1) | 0;
     i6 = (HEAP32[i19 >> 2] | 0) + i13 + (HEAP32[i17 >> 2] | 0) - (HEAP32[i20 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i8 + (i4 & 1) | 0;
    ___shlim(i29, 0);
    i4 = HEAP32[i17 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
     HEAP32[i17 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i29) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i28 = 22;
     break L6;
    }
    i6 = i13 + 1 | 0;
   } else {
    i5 = i8;
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i29, 0);
    do {
     i4 = HEAP32[i17 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
      HEAP32[i17 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i29) | 0;
    } while ((_isspace(i4) | 0) != 0);
    if (!(HEAP32[i18 >> 2] | 0)) i4 = HEAP32[i17 >> 2] | 0; else {
     i4 = (HEAP32[i17 >> 2] | 0) + -1 | 0;
     HEAP32[i17 >> 2] = i4;
    }
    i6 = (HEAP32[i19 >> 2] | 0) + i13 + i4 - (HEAP32[i20 >> 2] | 0) | 0;
   } while (0);
   i8 = i5 + 1 | 0;
   i4 = HEAP8[i8 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else i13 = i6;
  }
  if ((i28 | 0) == 22) {
   if (HEAP32[i18 >> 2] | 0) HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i1 = 0;
    i28 = 137;
   }
  } else if ((i28 | 0) == 136) if (!i1) {
   i1 = i4;
   i28 = 137;
  }
  if ((i28 | 0) == 137) {
   i4 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i3);
   _free(i2);
  }
 } while (0);
 if (i30 | 0) ___unlockfile(i29);
 STACKTOP = i31;
 return i1 | 0;
}

function _SDL_BlendFillRect_RGB565(i58, i60, i2, i4, i59, i61, i1) {
 i58 = i58 | 0;
 i60 = i60 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i59 = i59 | 0;
 i61 = i61 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0;
 i10 = ~i1 & 255;
 switch (i2 | 0) {
 case 1:
  {
   i1 = HEAP32[i60 + 8 >> 2] | 0;
   i2 = HEAP32[i60 + 12 >> 2] | 0;
   i3 = (HEAP32[i58 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i58 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i3 - i1 | 0;
   if (!i2) return 0;
   i9 = (i1 + 3 | 0) / 4 | 0;
   i7 = i1 & 255;
   i6 = i4 & 255;
   i5 = i59 & 255;
   i4 = i61 & 255;
   i1 = (HEAP32[i58 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i60 + 4 >> 2] | 0, i3) | 0) << 1) + (HEAP32[i60 >> 2] << 1) | 0;
   L41 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 & 3) {
    case 0:
     {
      i11 = i9;
      i13 = i1;
      i49 = 41014;
      i54 = 40950;
      i1 = 5;
      break;
     }
    case 3:
     {
      i14 = i9;
      i19 = i1;
      i56 = 41014;
      i57 = 40950;
      i1 = 6;
      break;
     }
    case 2:
     {
      i20 = i9;
      i25 = i1;
      i34 = 41014;
      i35 = 40950;
      i1 = 7;
      break;
     }
    case 1:
     {
      i26 = i9;
      i31 = i1;
      i36 = 41014;
      i37 = 40950;
      i1 = 8;
      break;
     }
    default:
     {
      i1 = 9;
      break L41;
     }
    }
    while (1) if ((i1 | 0) == 5) {
     i14 = HEAPU16[i13 >> 1] | 0;
     HEAP16[i13 >> 1] = ((((Math_imul(HEAPU8[i54 + (i14 >>> 5 & 63) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i49 + (i14 >>> 11) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i49 + (i14 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i14 = i11;
     i19 = i13 + 2 | 0;
     i56 = i49;
     i57 = i54;
     i1 = 6;
     continue;
    } else if ((i1 | 0) == 6) {
     i20 = HEAPU16[i19 >> 1] | 0;
     HEAP16[i19 >> 1] = ((((Math_imul(HEAPU8[i57 + (i20 >>> 5 & 63) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i56 + (i20 >>> 11) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i56 + (i20 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i20 = i14;
     i25 = i19 + 2 | 0;
     i34 = i56;
     i35 = i57;
     i1 = 7;
     continue;
    } else if ((i1 | 0) == 7) {
     i26 = HEAPU16[i25 >> 1] | 0;
     HEAP16[i25 >> 1] = ((((Math_imul(HEAPU8[i35 + (i26 >>> 5 & 63) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i34 + (i26 >>> 11) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i34 + (i26 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i26 = i20;
     i31 = i25 + 2 | 0;
     i36 = i34;
     i37 = i35;
     i1 = 8;
     continue;
    } else if ((i1 | 0) == 8) {
     i1 = HEAPU16[i31 >> 1] | 0;
     HEAP16[i31 >> 1] = ((((Math_imul(HEAPU8[i37 + (i1 >>> 5 & 63) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 2 << 5 | ((((Math_imul(HEAPU8[i36 + (i1 >>> 11) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 11 | ((((Math_imul(HEAPU8[i36 + (i1 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i1 = i31 + 2 | 0;
     if ((i26 | 0) > 1) {
      i11 = i26 + -1 | 0;
      i13 = i1;
      i49 = i36;
      i54 = i37;
      i1 = 5;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 1) | 0;
   }
   if ((i1 | 0) != 9) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 2:
  {
   i3 = HEAP32[i60 + 8 >> 2] | 0;
   i2 = HEAP32[i60 + 12 >> 2] | 0;
   i1 = (HEAP32[i58 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i58 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i58 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i60 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i59 & 255;
   i3 = i61 & 255;
   i1 = i1 + (HEAP32[i60 >> 2] << 1) | 0;
   L57 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i9 = i7;
      i15 = i1;
      i38 = 41014;
      i39 = 40950;
      i1 = 14;
      break;
     }
    case 3:
     {
      i16 = i7;
      i21 = i1;
      i40 = 41014;
      i41 = 40950;
      i1 = 15;
      break;
     }
    case 2:
     {
      i22 = i7;
      i27 = i1;
      i42 = 41014;
      i43 = 40950;
      i1 = 16;
      break;
     }
    case 1:
     {
      i28 = i7;
      i32 = i1;
      i44 = 41014;
      i45 = 40950;
      i1 = 17;
      break;
     }
    default:
     {
      i1 = 18;
      break L57;
     }
    }
    while (1) if ((i1 | 0) == 14) {
     i16 = HEAPU16[i15 >> 1] | 0;
     i21 = (HEAPU8[i38 + (i16 >>> 11) >> 0] | 0) + i5 | 0;
     i40 = (HEAPU8[i39 + (i16 >>> 5 & 63) >> 0] | 0) + i4 | 0;
     i16 = (HEAPU8[i38 + (i16 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i15 >> 1] = (i40 >>> 0 < 255 ? i40 : 255) >>> 2 << 5 | (i21 >>> 0 < 255 ? i21 : 255) >>> 3 << 11 | (i16 >>> 0 < 255 ? i16 : 255) >>> 3;
     i16 = i9;
     i21 = i15 + 2 | 0;
     i40 = i38;
     i41 = i39;
     i1 = 15;
     continue;
    } else if ((i1 | 0) == 15) {
     i22 = HEAPU16[i21 >> 1] | 0;
     i27 = (HEAPU8[i40 + (i22 >>> 11) >> 0] | 0) + i5 | 0;
     i42 = (HEAPU8[i41 + (i22 >>> 5 & 63) >> 0] | 0) + i4 | 0;
     i22 = (HEAPU8[i40 + (i22 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i21 >> 1] = (i42 >>> 0 < 255 ? i42 : 255) >>> 2 << 5 | (i27 >>> 0 < 255 ? i27 : 255) >>> 3 << 11 | (i22 >>> 0 < 255 ? i22 : 255) >>> 3;
     i22 = i16;
     i27 = i21 + 2 | 0;
     i42 = i40;
     i43 = i41;
     i1 = 16;
     continue;
    } else if ((i1 | 0) == 16) {
     i28 = HEAPU16[i27 >> 1] | 0;
     i32 = (HEAPU8[i42 + (i28 >>> 11) >> 0] | 0) + i5 | 0;
     i44 = (HEAPU8[i43 + (i28 >>> 5 & 63) >> 0] | 0) + i4 | 0;
     i28 = (HEAPU8[i42 + (i28 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i27 >> 1] = (i44 >>> 0 < 255 ? i44 : 255) >>> 2 << 5 | (i32 >>> 0 < 255 ? i32 : 255) >>> 3 << 11 | (i28 >>> 0 < 255 ? i28 : 255) >>> 3;
     i28 = i22;
     i32 = i27 + 2 | 0;
     i44 = i42;
     i45 = i43;
     i1 = 17;
     continue;
    } else if ((i1 | 0) == 17) {
     i1 = HEAPU16[i32 >> 1] | 0;
     i61 = (HEAPU8[i44 + (i1 >>> 11) >> 0] | 0) + i5 | 0;
     i60 = (HEAPU8[i45 + (i1 >>> 5 & 63) >> 0] | 0) + i4 | 0;
     i1 = (HEAPU8[i44 + (i1 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i32 >> 1] = (i60 >>> 0 < 255 ? i60 : 255) >>> 2 << 5 | (i61 >>> 0 < 255 ? i61 : 255) >>> 3 << 11 | (i1 >>> 0 < 255 ? i1 : 255) >>> 3;
     i1 = i32 + 2 | 0;
     if ((i28 | 0) > 1) {
      i9 = i28 + -1 | 0;
      i15 = i1;
      i38 = i44;
      i39 = i45;
      i1 = 14;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 1) | 0;
   }
   if ((i1 | 0) != 18) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 4:
  {
   i3 = HEAP32[i60 + 8 >> 2] | 0;
   i2 = HEAP32[i60 + 12 >> 2] | 0;
   i1 = (HEAP32[i58 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i58 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i58 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i60 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i59 & 255;
   i3 = i61 & 255;
   i1 = i1 + (HEAP32[i60 >> 2] << 1) | 0;
   L73 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i12 = i7;
      i17 = i1;
      i46 = 41014;
      i47 = 40950;
      i1 = 23;
      break;
     }
    case 3:
     {
      i18 = i7;
      i23 = i1;
      i48 = 41014;
      i50 = 40950;
      i1 = 24;
      break;
     }
    case 2:
     {
      i24 = i7;
      i29 = i1;
      i51 = 41014;
      i52 = 40950;
      i1 = 25;
      break;
     }
    case 1:
     {
      i30 = i7;
      i33 = i1;
      i53 = 41014;
      i55 = 40950;
      i1 = 26;
      break;
     }
    default:
     {
      i1 = 27;
      break L73;
     }
    }
    while (1) if ((i1 | 0) == 23) {
     i18 = HEAPU16[i17 >> 1] | 0;
     HEAP16[i17 >> 1] = (((Math_imul(HEAPU8[i47 + (i18 >>> 5 & 63) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i46 + (i18 >>> 11) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i46 + (i18 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i18 = i12;
     i23 = i17 + 2 | 0;
     i48 = i46;
     i50 = i47;
     i1 = 24;
     continue;
    } else if ((i1 | 0) == 24) {
     i24 = HEAPU16[i23 >> 1] | 0;
     HEAP16[i23 >> 1] = (((Math_imul(HEAPU8[i50 + (i24 >>> 5 & 63) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i48 + (i24 >>> 11) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i48 + (i24 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i24 = i18;
     i29 = i23 + 2 | 0;
     i51 = i48;
     i52 = i50;
     i1 = 25;
     continue;
    } else if ((i1 | 0) == 25) {
     i30 = HEAPU16[i29 >> 1] | 0;
     HEAP16[i29 >> 1] = (((Math_imul(HEAPU8[i52 + (i30 >>> 5 & 63) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i51 + (i30 >>> 11) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i51 + (i30 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i30 = i24;
     i33 = i29 + 2 | 0;
     i53 = i51;
     i55 = i52;
     i1 = 26;
     continue;
    } else if ((i1 | 0) == 26) {
     i1 = HEAPU16[i33 >> 1] | 0;
     HEAP16[i33 >> 1] = (((Math_imul(HEAPU8[i55 + (i1 >>> 5 & 63) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 2 << 5 | (((Math_imul(HEAPU8[i53 + (i1 >>> 11) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 11 | (((Math_imul(HEAPU8[i53 + (i1 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i33 + 2 | 0;
     if ((i30 | 0) > 1) {
      i12 = i30 + -1 | 0;
      i17 = i1;
      i46 = i53;
      i47 = i55;
      i1 = 23;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 1) | 0;
   }
   if ((i1 | 0) != 27) if ((i1 | 0) == 46) return 0;
   break;
  }
 default:
  {
   i2 = HEAP32[i60 + 8 >> 2] | 0;
   i57 = HEAP32[i60 + 12 >> 2] | 0;
   i1 = (HEAP32[i58 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i58 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i2 | 0;
   i1 = (HEAP32[i58 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i60 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
   i1 = i1 + (HEAP32[i60 >> 2] << 1) | 0;
   i3 = i57 + -1 | 0;
   if (!i57) return 0;
   i7 = (i2 + 3 | 0) / 4 | 0;
   i6 = ((i59 & 255) >>> 2 << 5 | (i4 & 255) >>> 3 << 11 | (i61 & 255) >>> 3) & 65535;
   switch (i2 & 3) {
   case 0:
    {
     while (1) {
      i2 = i7;
      while (1) {
       HEAP16[i1 >> 1] = i6;
       HEAP16[i1 + 2 >> 1] = i6;
       HEAP16[i1 + 4 >> 1] = i6;
       HEAP16[i1 + 6 >> 1] = i6;
       i1 = i1 + 8 | 0;
       if ((i2 | 0) <= 1) break; else i2 = i2 + -1 | 0;
      }
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 3:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP16[i1 >> 1] = i6;
      HEAP16[i1 + 2 >> 1] = i6;
      HEAP16[i1 + 4 >> 1] = i6;
      i2 = i1 + 6 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP16[i2 >> 1] = i6;
        i2 = i1;
        i1 = i1 + 8 | 0;
        HEAP16[i1 >> 1] = i6;
        HEAP16[i2 + 10 >> 1] = i6;
        HEAP16[i2 + 12 >> 1] = i6;
        i2 = i2 + 14 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 2:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP16[i1 >> 1] = i6;
      HEAP16[i1 + 2 >> 1] = i6;
      i2 = i1 + 4 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP16[i2 >> 1] = i6;
        HEAP16[i1 + 6 >> 1] = i6;
        i2 = i1;
        i1 = i1 + 8 | 0;
        HEAP16[i1 >> 1] = i6;
        HEAP16[i2 + 10 >> 1] = i6;
        i2 = i2 + 12 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   default:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP16[i1 >> 1] = i6;
      i2 = i1 + 2 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP16[i2 >> 1] = i6;
        HEAP16[i1 + 4 >> 1] = i6;
        HEAP16[i1 + 6 >> 1] = i6;
        i2 = i1;
        i1 = i1 + 8 | 0;
        HEAP16[i1 >> 1] = i6;
        i2 = i2 + 10 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   }
  }
 }
 return 0;
}

function _Blit2101010toN(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i24 = HEAP32[i3 + 16 >> 2] | 0;
 i25 = HEAP32[i3 + 36 >> 2] | 0;
 i2 = HEAP32[i3 + 44 >> 2] | 0;
 i21 = HEAP8[i2 + 9 >> 0] | 0;
 i22 = i21 & 255;
 if (!i4) return;
 i23 = (i1 + 7 | 0) / 8 | 0;
 i20 = i1 & 255;
 i13 = i2 + 28 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2 + 29 | 0;
 i16 = i2 + 33 | 0;
 i17 = i2 + 30 | 0;
 i18 = i2 + 34 | 0;
 i19 = i2 + 31 | 0;
 i12 = i2 + 35 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i20 & 7) {
  case 0:
   {
    i11 = i23;
    i3 = 4;
    break;
   }
  case 7:
   {
    i11 = i23;
    i3 = 10;
    break;
   }
  case 6:
   {
    i11 = i23;
    i3 = 16;
    break;
   }
  case 5:
   {
    i11 = i23;
    i3 = 22;
    break;
   }
  case 4:
   {
    i11 = i23;
    i3 = 28;
    break;
   }
  case 3:
   {
    i11 = i23;
    i3 = 34;
    break;
   }
  case 2:
   {
    i11 = i23;
    i3 = 40;
    break;
   }
  case 1:
   {
    i11 = i23;
    i3 = 46;
    break;
   }
  default:
   {
    i3 = 52;
    break L4;
   }
  }
  while (1) if ((i3 | 0) == 4) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 10;
   continue;
  } else if ((i3 | 0) == 10) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 16;
   continue;
  } else if ((i3 | 0) == 16) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 22;
   continue;
  } else if ((i3 | 0) == 22) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 28;
   continue;
  } else if ((i3 | 0) == 28) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 34;
   continue;
  } else if ((i3 | 0) == 34) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 40;
   continue;
  } else if ((i3 | 0) == 40) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i1 = i1 + 4 | 0;
   i2 = i2 + i22 | 0;
   i3 = 46;
   continue;
  } else if ((i3 | 0) == 46) {
   i10 = HEAP32[i1 >> 2] | 0;
   i3 = i10 >>> 22;
   i5 = i3 & 255;
   i6 = i10 >>> 12;
   i7 = i6 & 255;
   i8 = i10 >>> 2;
   i9 = i8 & 255;
   i10 = HEAPU8[41070 + (i10 >>> 30) >> 0] | 0;
   switch (i21 << 24 >> 24) {
   case 1:
    {
     HEAP8[i2 >> 0] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 2:
    {
     HEAP16[i2 >> 1] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   case 3:
    {
     HEAP8[i2 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] = i3;
     HEAP8[i2 + ((HEAPU8[i16 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
     HEAP8[i2 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
     break;
    }
   case 4:
    {
     HEAP32[i2 >> 2] = i7 >>> (HEAPU8[i15 >> 0] | 0) << (HEAPU8[i16 >> 0] | 0) | i5 >>> (HEAPU8[i13 >> 0] | 0) << (HEAPU8[i14 >> 0] | 0) | i9 >>> (HEAPU8[i17 >> 0] | 0) << (HEAPU8[i18 >> 0] | 0) | i10 >>> (HEAPU8[i19 >> 0] | 0) << (HEAPU8[i12 >> 0] | 0);
     break;
    }
   default:
    {}
   }
   i2 = i2 + i22 | 0;
   i1 = i1 + 4 | 0;
   if ((i11 | 0) > 1) {
    i11 = i11 + -1 | 0;
    i3 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i3 = 54;
   break;
  } else {
   i1 = i1 + i24 | 0;
   i2 = i2 + i25 | 0;
  }
 }
 if ((i3 | 0) != 52) if ((i3 | 0) == 54) return;
}

function _BlitNto1PixelAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i28 = HEAP32[i3 + 16 >> 2] | 0;
 i29 = HEAP32[i3 + 36 >> 2] | 0;
 i24 = HEAP32[i3 + 48 >> 2] | 0;
 i2 = HEAP32[i3 + 40 >> 2] | 0;
 i25 = HEAP8[i2 + 9 >> 0] | 0;
 i26 = i25 & 255;
 if (!i4) return;
 i27 = (i1 + 3 | 0) / 4 | 0;
 i23 = i1 & 255;
 i10 = (HEAP32[i3 + 44 >> 2] | 0) + 4 | 0;
 i11 = (i24 | 0) == 0;
 i12 = i2 + 28 | 0;
 i13 = i2 + 12 | 0;
 i14 = i2 + 32 | 0;
 i15 = i2 + 29 | 0;
 i16 = i2 + 16 | 0;
 i17 = i2 + 33 | 0;
 i18 = i2 + 30 | 0;
 i19 = i2 + 20 | 0;
 i20 = i2 + 34 | 0;
 i21 = i2 + 31 | 0;
 i22 = i2 + 24 | 0;
 i9 = i2 + 35 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i6 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i23 & 3) {
  case 0:
   {
    i8 = i27;
    i7 = i1;
    i1 = 4;
    break;
   }
  case 3:
   {
    i8 = i27;
    i7 = i1;
    i1 = 13;
    break;
   }
  case 2:
   {
    i8 = i27;
    i7 = i1;
    i1 = 22;
    break;
   }
  case 1:
   {
    i8 = i27;
    i7 = i1;
    i1 = 31;
    break;
   }
  default:
   {
    i1 = 40;
    break L4;
   }
  }
  while (1) if ((i1 | 0) == 4) {
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i5 = HEAPU8[i7 >> 0] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i7 >> 1] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = -1;
     i2 = HEAP8[i7 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAP8[i7 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i7 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i7 >> 2] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i2 = 0;
     i3 = 0;
     i5 = 0;
    }
   }
   i30 = i1 & 255;
   i31 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i1 = HEAPU8[i6 >> 0] | 0;
   i1 = i31 + (i1 << 2) | 0;
   i31 = HEAPU8[i1 >> 0] | 0;
   i32 = HEAPU8[i1 + 1 >> 0] | 0;
   i1 = HEAPU8[i1 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i32 | 0, i30) | 0) >>> 0) / 255 | 0) + i32 | 0) >>> 3 & 28 | (((Math_imul((i5 & 255) - i31 | 0, i30) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul((i2 & 255) - i1 | 0, i30) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i24 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i7 = i7 + i26 | 0;
   i6 = i6 + 1 | 0;
   i1 = 13;
   continue;
  } else if ((i1 | 0) == 13) {
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i5 = HEAPU8[i7 >> 0] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i7 >> 1] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = -1;
     i2 = HEAP8[i7 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAP8[i7 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i7 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i7 >> 2] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i2 = 0;
     i3 = 0;
     i5 = 0;
    }
   }
   i32 = i1 & 255;
   i31 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i1 = HEAPU8[i6 >> 0] | 0;
   i1 = i31 + (i1 << 2) | 0;
   i31 = HEAPU8[i1 >> 0] | 0;
   i30 = HEAPU8[i1 + 1 >> 0] | 0;
   i1 = HEAPU8[i1 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i30 | 0, i32) | 0) >>> 0) / 255 | 0) + i30 | 0) >>> 3 & 28 | (((Math_imul((i5 & 255) - i31 | 0, i32) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul((i2 & 255) - i1 | 0, i32) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i24 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i7 = i7 + i26 | 0;
   i6 = i6 + 1 | 0;
   i1 = 22;
   continue;
  } else if ((i1 | 0) == 22) {
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i5 = HEAPU8[i7 >> 0] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i7 >> 1] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = -1;
     i2 = HEAP8[i7 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAP8[i7 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i7 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i7 >> 2] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i2 = 0;
     i3 = 0;
     i5 = 0;
    }
   }
   i32 = i1 & 255;
   i31 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i1 = HEAPU8[i6 >> 0] | 0;
   i1 = i31 + (i1 << 2) | 0;
   i31 = HEAPU8[i1 >> 0] | 0;
   i30 = HEAPU8[i1 + 1 >> 0] | 0;
   i1 = HEAPU8[i1 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i30 | 0, i32) | 0) >>> 0) / 255 | 0) + i30 | 0) >>> 3 & 28 | (((Math_imul((i5 & 255) - i31 | 0, i32) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul((i2 & 255) - i1 | 0, i32) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i24 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i7 = i7 + i26 | 0;
   i6 = i6 + 1 | 0;
   i1 = 31;
   continue;
  } else if ((i1 | 0) == 31) {
   switch (i25 << 24 >> 24) {
   case 1:
    {
     i5 = HEAPU8[i7 >> 0] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 2:
    {
     i5 = HEAPU16[i7 >> 1] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   case 3:
    {
     i1 = -1;
     i2 = HEAP8[i7 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i3 = HEAP8[i7 + ((HEAPU8[i17 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     i5 = HEAP8[i7 + ((HEAPU8[i14 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
     break;
    }
   case 4:
    {
     i5 = HEAP32[i7 >> 2] | 0;
     i1 = HEAP8[(HEAP32[5724 + (HEAPU8[i21 >> 0] << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i5) >>> (HEAPU8[i9 >> 0] | 0)) >> 0] | 0;
     i2 = HEAP8[(HEAP32[5724 + (HEAPU8[i18 >> 0] << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i5) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
     i3 = HEAP8[(HEAP32[5724 + (HEAPU8[i15 >> 0] << 2) >> 2] | 0) + ((HEAP32[i16 >> 2] & i5) >>> (HEAPU8[i17 >> 0] | 0)) >> 0] | 0;
     i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i12 >> 0] << 2) >> 2] | 0) + ((HEAP32[i13 >> 2] & i5) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
     break;
    }
   default:
    {
     i1 = 0;
     i2 = 0;
     i3 = 0;
     i5 = 0;
    }
   }
   i32 = i1 & 255;
   i31 = HEAP32[(HEAP32[i10 >> 2] | 0) + 4 >> 2] | 0;
   i1 = HEAPU8[i6 >> 0] | 0;
   i1 = i31 + (i1 << 2) | 0;
   i31 = HEAPU8[i1 >> 0] | 0;
   i30 = HEAPU8[i1 + 1 >> 0] | 0;
   i1 = HEAPU8[i1 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i30 | 0, i32) | 0) >>> 0) / 255 | 0) + i30 | 0) >>> 3 & 28 | (((Math_imul((i5 & 255) - i31 | 0, i32) | 0) >>> 0) / 255 | 0) + i31 & 224 | ((((Math_imul((i2 & 255) - i1 | 0, i32) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> 6 & 3;
   if (i11) i1 = i1 & 255; else i1 = HEAP8[i24 + i1 >> 0] | 0;
   HEAP8[i6 >> 0] = i1;
   i2 = i6 + 1 | 0;
   i1 = i7 + i26 | 0;
   if ((i8 | 0) > 1) {
    i8 = i8 + -1 | 0;
    i7 = i1;
    i6 = i2;
    i1 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i1 = 42;
   break;
  } else {
   i1 = i1 + i28 | 0;
   i6 = i2 + i29 | 0;
  }
 }
 if ((i1 | 0) != 40) if ((i1 | 0) == 42) return;
}

function _SDL_BlendFillRect_RGB555(i46, i48, i2, i4, i47, i49, i1) {
 i46 = i46 | 0;
 i48 = i48 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i47 = i47 | 0;
 i49 = i49 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0;
 i10 = ~i1 & 255;
 switch (i2 | 0) {
 case 1:
  {
   i1 = HEAP32[i48 + 8 >> 2] | 0;
   i2 = HEAP32[i48 + 12 >> 2] | 0;
   i3 = (HEAP32[i46 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i46 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i3 - i1 | 0;
   if (!i2) return 0;
   i9 = (i1 + 3 | 0) / 4 | 0;
   i7 = i1 & 255;
   i6 = i4 & 255;
   i5 = i47 & 255;
   i4 = i49 & 255;
   i1 = (HEAP32[i46 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i48 + 4 >> 2] | 0, i3) | 0) << 1) + (HEAP32[i48 >> 2] << 1) | 0;
   L41 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 & 3) {
    case 0:
     {
      i11 = i9;
      i13 = i1;
      i42 = 41014;
      i1 = 5;
      break;
     }
    case 3:
     {
      i14 = i9;
      i19 = i1;
      i45 = 41014;
      i1 = 6;
      break;
     }
    case 2:
     {
      i20 = i9;
      i25 = i1;
      i34 = 41014;
      i1 = 7;
      break;
     }
    case 1:
     {
      i26 = i9;
      i31 = i1;
      i35 = 41014;
      i1 = 8;
      break;
     }
    default:
     {
      i1 = 9;
      break L41;
     }
    }
    while (1) if ((i1 | 0) == 5) {
     i14 = HEAPU16[i13 >> 1] | 0;
     HEAP16[i13 >> 1] = ((((Math_imul(HEAPU8[i42 + (i14 >>> 5 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i42 + (i14 >>> 10 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i42 + (i14 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i14 = i11;
     i19 = i13 + 2 | 0;
     i45 = i42;
     i1 = 6;
     continue;
    } else if ((i1 | 0) == 6) {
     i20 = HEAPU16[i19 >> 1] | 0;
     HEAP16[i19 >> 1] = ((((Math_imul(HEAPU8[i45 + (i20 >>> 5 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i45 + (i20 >>> 10 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i45 + (i20 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i20 = i14;
     i25 = i19 + 2 | 0;
     i34 = i45;
     i1 = 7;
     continue;
    } else if ((i1 | 0) == 7) {
     i26 = HEAPU16[i25 >> 1] | 0;
     HEAP16[i25 >> 1] = ((((Math_imul(HEAPU8[i34 + (i26 >>> 5 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i34 + (i26 >>> 10 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i34 + (i26 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i26 = i20;
     i31 = i25 + 2 | 0;
     i35 = i34;
     i1 = 8;
     continue;
    } else if ((i1 | 0) == 8) {
     i1 = HEAPU16[i31 >> 1] | 0;
     HEAP16[i31 >> 1] = ((((Math_imul(HEAPU8[i35 + (i1 >>> 5 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i5 | 0) >>> 3 << 5 | ((((Math_imul(HEAPU8[i35 + (i1 >>> 10 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 << 10 | ((((Math_imul(HEAPU8[i35 + (i1 & 31) >> 0] | 0, i10) | 0) >>> 0) / 255 | 0) + i4 | 0) >>> 3;
     i1 = i31 + 2 | 0;
     if ((i26 | 0) > 1) {
      i11 = i26 + -1 | 0;
      i13 = i1;
      i42 = i35;
      i1 = 5;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 1) | 0;
   }
   if ((i1 | 0) != 9) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 2:
  {
   i3 = HEAP32[i48 + 8 >> 2] | 0;
   i2 = HEAP32[i48 + 12 >> 2] | 0;
   i1 = (HEAP32[i46 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i46 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i46 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i48 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i47 & 255;
   i3 = i49 & 255;
   i1 = i1 + (HEAP32[i48 >> 2] << 1) | 0;
   L57 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i9 = i7;
      i15 = i1;
      i36 = 41014;
      i1 = 14;
      break;
     }
    case 3:
     {
      i16 = i7;
      i21 = i1;
      i37 = 41014;
      i1 = 15;
      break;
     }
    case 2:
     {
      i22 = i7;
      i27 = i1;
      i38 = 41014;
      i1 = 16;
      break;
     }
    case 1:
     {
      i28 = i7;
      i32 = i1;
      i39 = 41014;
      i1 = 17;
      break;
     }
    default:
     {
      i1 = 18;
      break L57;
     }
    }
    while (1) if ((i1 | 0) == 14) {
     i16 = HEAPU16[i15 >> 1] | 0;
     i21 = (HEAPU8[i36 + (i16 >>> 10 & 31) >> 0] | 0) + i5 | 0;
     i37 = (HEAPU8[i36 + (i16 >>> 5 & 31) >> 0] | 0) + i4 | 0;
     i16 = (HEAPU8[i36 + (i16 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i15 >> 1] = (i37 >>> 0 < 255 ? i37 : 255) >>> 3 << 5 | (i21 >>> 0 < 255 ? i21 : 255) >>> 3 << 10 | (i16 >>> 0 < 255 ? i16 : 255) >>> 3;
     i16 = i9;
     i21 = i15 + 2 | 0;
     i37 = i36;
     i1 = 15;
     continue;
    } else if ((i1 | 0) == 15) {
     i22 = HEAPU16[i21 >> 1] | 0;
     i27 = (HEAPU8[i37 + (i22 >>> 10 & 31) >> 0] | 0) + i5 | 0;
     i38 = (HEAPU8[i37 + (i22 >>> 5 & 31) >> 0] | 0) + i4 | 0;
     i22 = (HEAPU8[i37 + (i22 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i21 >> 1] = (i38 >>> 0 < 255 ? i38 : 255) >>> 3 << 5 | (i27 >>> 0 < 255 ? i27 : 255) >>> 3 << 10 | (i22 >>> 0 < 255 ? i22 : 255) >>> 3;
     i22 = i16;
     i27 = i21 + 2 | 0;
     i38 = i37;
     i1 = 16;
     continue;
    } else if ((i1 | 0) == 16) {
     i28 = HEAPU16[i27 >> 1] | 0;
     i32 = (HEAPU8[i38 + (i28 >>> 10 & 31) >> 0] | 0) + i5 | 0;
     i39 = (HEAPU8[i38 + (i28 >>> 5 & 31) >> 0] | 0) + i4 | 0;
     i28 = (HEAPU8[i38 + (i28 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i27 >> 1] = (i39 >>> 0 < 255 ? i39 : 255) >>> 3 << 5 | (i32 >>> 0 < 255 ? i32 : 255) >>> 3 << 10 | (i28 >>> 0 < 255 ? i28 : 255) >>> 3;
     i28 = i22;
     i32 = i27 + 2 | 0;
     i39 = i38;
     i1 = 17;
     continue;
    } else if ((i1 | 0) == 17) {
     i1 = HEAPU16[i32 >> 1] | 0;
     i49 = (HEAPU8[i39 + (i1 >>> 10 & 31) >> 0] | 0) + i5 | 0;
     i48 = (HEAPU8[i39 + (i1 >>> 5 & 31) >> 0] | 0) + i4 | 0;
     i1 = (HEAPU8[i39 + (i1 & 31) >> 0] | 0) + i3 | 0;
     HEAP16[i32 >> 1] = (i48 >>> 0 < 255 ? i48 : 255) >>> 3 << 5 | (i49 >>> 0 < 255 ? i49 : 255) >>> 3 << 10 | (i1 >>> 0 < 255 ? i1 : 255) >>> 3;
     i1 = i32 + 2 | 0;
     if ((i28 | 0) > 1) {
      i9 = i28 + -1 | 0;
      i15 = i1;
      i36 = i39;
      i1 = 14;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 1) | 0;
   }
   if ((i1 | 0) != 18) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 4:
  {
   i3 = HEAP32[i48 + 8 >> 2] | 0;
   i2 = HEAP32[i48 + 12 >> 2] | 0;
   i1 = (HEAP32[i46 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i46 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i46 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i48 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i47 & 255;
   i3 = i49 & 255;
   i1 = i1 + (HEAP32[i48 >> 2] << 1) | 0;
   L73 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i12 = i7;
      i17 = i1;
      i40 = 41014;
      i1 = 23;
      break;
     }
    case 3:
     {
      i18 = i7;
      i23 = i1;
      i41 = 41014;
      i1 = 24;
      break;
     }
    case 2:
     {
      i24 = i7;
      i29 = i1;
      i43 = 41014;
      i1 = 25;
      break;
     }
    case 1:
     {
      i30 = i7;
      i33 = i1;
      i44 = 41014;
      i1 = 26;
      break;
     }
    default:
     {
      i1 = 27;
      break L73;
     }
    }
    while (1) if ((i1 | 0) == 23) {
     i18 = HEAPU16[i17 >> 1] | 0;
     HEAP16[i17 >> 1] = (((Math_imul(HEAPU8[i40 + (i18 >>> 5 & 31) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i40 + (i18 >>> 10 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i40 + (i18 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i18 = i12;
     i23 = i17 + 2 | 0;
     i41 = i40;
     i1 = 24;
     continue;
    } else if ((i1 | 0) == 24) {
     i24 = HEAPU16[i23 >> 1] | 0;
     HEAP16[i23 >> 1] = (((Math_imul(HEAPU8[i41 + (i24 >>> 5 & 31) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i41 + (i24 >>> 10 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i41 + (i24 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i24 = i18;
     i29 = i23 + 2 | 0;
     i43 = i41;
     i1 = 25;
     continue;
    } else if ((i1 | 0) == 25) {
     i30 = HEAPU16[i29 >> 1] | 0;
     HEAP16[i29 >> 1] = (((Math_imul(HEAPU8[i43 + (i30 >>> 5 & 31) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i43 + (i30 >>> 10 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i43 + (i30 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i30 = i24;
     i33 = i29 + 2 | 0;
     i44 = i43;
     i1 = 26;
     continue;
    } else if ((i1 | 0) == 26) {
     i1 = HEAPU16[i33 >> 1] | 0;
     HEAP16[i33 >> 1] = (((Math_imul(HEAPU8[i44 + (i1 >>> 5 & 31) >> 0] | 0, i4) | 0) >>> 0) / 255 | 0) >>> 3 << 5 | (((Math_imul(HEAPU8[i44 + (i1 >>> 10 & 31) >> 0] | 0, i5) | 0) >>> 0) / 255 | 0) >>> 3 << 10 | (((Math_imul(HEAPU8[i44 + (i1 & 31) >> 0] | 0, i3) | 0) >>> 0) / 255 | 0) >>> 3;
     i1 = i33 + 2 | 0;
     if ((i30 | 0) > 1) {
      i12 = i30 + -1 | 0;
      i17 = i1;
      i40 = i44;
      i1 = 23;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 1) | 0;
   }
   if ((i1 | 0) != 27) if ((i1 | 0) == 46) return 0;
   break;
  }
 default:
  {
   i2 = HEAP32[i48 + 8 >> 2] | 0;
   i45 = HEAP32[i48 + 12 >> 2] | 0;
   i1 = (HEAP32[i46 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i46 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i2 | 0;
   i1 = (HEAP32[i46 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i48 + 4 >> 2] | 0, i1) | 0) << 1) | 0;
   i1 = i1 + (HEAP32[i48 >> 2] << 1) | 0;
   i3 = i45 + -1 | 0;
   if (!i45) return 0;
   i7 = (i2 + 3 | 0) / 4 | 0;
   i6 = ((i47 & 255) >>> 3 << 5 | (i4 & 255) >>> 3 << 10 | (i49 & 255) >>> 3) & 65535;
   switch (i2 & 3) {
   case 0:
    {
     while (1) {
      i2 = i7;
      while (1) {
       HEAP16[i1 >> 1] = i6;
       HEAP16[i1 + 2 >> 1] = i6;
       HEAP16[i1 + 4 >> 1] = i6;
       HEAP16[i1 + 6 >> 1] = i6;
       i1 = i1 + 8 | 0;
       if ((i2 | 0) <= 1) break; else i2 = i2 + -1 | 0;
      }
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 3:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP16[i1 >> 1] = i6;
      HEAP16[i1 + 2 >> 1] = i6;
      HEAP16[i1 + 4 >> 1] = i6;
      i2 = i1 + 6 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP16[i2 >> 1] = i6;
        i2 = i1;
        i1 = i1 + 8 | 0;
        HEAP16[i1 >> 1] = i6;
        HEAP16[i2 + 10 >> 1] = i6;
        HEAP16[i2 + 12 >> 1] = i6;
        i2 = i2 + 14 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 2:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP16[i1 >> 1] = i6;
      HEAP16[i1 + 2 >> 1] = i6;
      i2 = i1 + 4 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP16[i2 >> 1] = i6;
        HEAP16[i1 + 6 >> 1] = i6;
        i2 = i1;
        i1 = i1 + 8 | 0;
        HEAP16[i1 >> 1] = i6;
        HEAP16[i2 + 10 >> 1] = i6;
        i2 = i2 + 12 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   default:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP16[i1 >> 1] = i6;
      i2 = i1 + 2 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP16[i2 >> 1] = i6;
        HEAP16[i1 + 4 >> 1] = i6;
        HEAP16[i1 + 6 >> 1] = i6;
        i2 = i1;
        i1 = i1 + 8 | 0;
        HEAP16[i1 >> 1] = i6;
        i2 = i2 + 10 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 1) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   }
  }
 }
 return 0;
}

function _SDL_RLESurface(i24) {
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 if (HEAP32[i24 >> 2] & 2 | 0) _SDL_UnRLESurface(i24, 1);
 i8 = i24 + 4 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 i5 = HEAP8[i4 + 8 >> 0] | 0;
 if ((i5 & 255) < 8) {
  i25 = -1;
  return i25 | 0;
 }
 i23 = i24 + 20 | 0;
 if (!(HEAP32[i23 >> 2] | 0)) {
  i25 = -1;
  return i25 | 0;
 }
 i25 = i24 + 52 | 0;
 i2 = HEAP32[i25 >> 2] | 0;
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 if (!((i3 & 272 | 0) != 0 & (i3 & 1 | 0) == 0)) {
  i25 = -1;
  return i25 | 0;
 }
 do if (!(i3 & 2)) if (!(i3 & 608)) {
  i1 = HEAP32[i4 + 24 >> 2] | 0;
  break;
 } else {
  i25 = -1;
  return i25 | 0;
 } else {
  i1 = HEAP32[i4 + 24 >> 2] | 0;
  if (i3 & 608 | i1) {
   i25 = -1;
   return i25 | 0;
  }
 } while (0);
 do if ((i3 & 16 | 0) == 0 | (i1 | 0) == 0) {
  if (!(HEAP32[i2 + 4 >> 2] | 0)) {
   i25 = -1;
   return i25 | 0;
  }
  i2 = HEAP8[i4 + 9 >> 0] | 0;
  i21 = i2 & 255;
  switch (i2 << 24 >> 24) {
  case 1:
   {
    i1 = (Math_imul((HEAP32[i24 + 12 >> 2] | 0) * 3 | 0, ((HEAP32[i24 + 8 >> 2] | 0) / 2 | 0) + 1 | 0) | 0) + 2 | 0;
    break;
   }
  case 3:
  case 2:
   {
    i1 = HEAP32[i24 + 8 >> 2] | 0;
    i1 = (Math_imul((Math_imul(i1, i21) | 0) + 2 + (((i1 | 0) / 255 | 0) << 1) | 0, HEAP32[i24 + 12 >> 2] | 0) | 0) + 2 | 0;
    break;
   }
  case 4:
   {
    i1 = HEAP32[i24 + 8 >> 2] | 0;
    i1 = (Math_imul((((i1 | 0) / 65535 | 0) + i1 << 2) + 4 | 0, HEAP32[i24 + 12 >> 2] | 0) | 0) + 4 | 0;
    break;
   }
  default:
   i1 = 0;
  }
  i22 = _SDL_malloc(i1) | 0;
  if (!i22) {
   if ((_SDL_Error(0) | 0) < 0) i1 = -1; else {
    i1 = 8192;
    i2 = 12;
    break;
   }
   return i1 | 0;
  }
  i20 = i2 << 24 >> 24 == 4;
  i19 = i20 ? 65535 : 255;
  i12 = ~HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2];
  i13 = HEAP32[(HEAP32[i25 >> 2] | 0) + 72 >> 2] & i12;
  i14 = HEAP32[14452 + (i21 + -1 << 2) >> 2] | 0;
  i15 = HEAP32[i24 + 8 >> 2] | 0;
  i16 = HEAP32[i24 + 12 >> 2] | 0;
  if ((i16 | 0) > 0) {
   i17 = i19 & 65535;
   i18 = i24 + 16 | 0;
   i1 = i22;
   i10 = 0;
   i11 = HEAP32[i23 >> 2] | 0;
   i2 = i22;
   while (1) {
    i9 = 0;
    i5 = 0;
    while (1) {
     L41 : do if ((i5 | 0) < (i15 | 0)) {
      i3 = i5;
      do {
       i8 = i11 + (Math_imul(i3, i21) | 0) | 0;
       if (((FUNCTION_TABLE_ii[i14 & 255](i8) | 0) & i12 | 0) != (i13 | 0)) break L41;
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i15 | 0));
     } else i3 = i5; while (0);
     L46 : do if ((i3 | 0) < (i15 | 0)) {
      i4 = i3;
      while (1) {
       i8 = i11 + (Math_imul(i4, i21) | 0) | 0;
       if (((FUNCTION_TABLE_ii[i14 & 255](i8) | 0) & i12 | 0) == (i13 | 0)) {
        i8 = 1;
        break L46;
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) >= (i15 | 0)) {
        i8 = 0;
        break;
       }
      }
     } else {
      i4 = i3;
      i8 = 0;
     } while (0);
     i5 = i3 - i5 | 0;
     i9 = (i5 | 0) == (i15 | 0) ? 1 : i9;
     i6 = i4 - i3 | 0;
     if ((i5 | 0) > (i19 | 0)) if (i20) do {
      HEAP16[i1 >> 1] = i17;
      HEAP16[i1 + 2 >> 1] = 0;
      i1 = i1 + 4 | 0;
      i5 = i5 - i19 | 0;
     } while ((i5 | 0) > (i19 | 0)); else do {
      HEAP8[i1 >> 0] = -1;
      HEAP8[i1 + 1 >> 0] = 0;
      i1 = i1 + 2 | 0;
      i5 = i5 - i19 | 0;
     } while ((i5 | 0) > (i19 | 0));
     i7 = (i6 | 0) < (i19 | 0) ? i6 : i19;
     if (i20) {
      HEAP16[i1 >> 1] = i5;
      HEAP16[i1 + 2 >> 1] = i7;
      i5 = 4;
     } else {
      HEAP8[i1 >> 0] = i5;
      HEAP8[i1 + 1 >> 0] = i7;
      i5 = 2;
     }
     i5 = i1 + i5 | 0;
     i1 = Math_imul(i7, i21) | 0;
     _SDL_memcpy(i5, i11 + (Math_imul(i3, i21) | 0) | 0, i1) | 0;
     i1 = i5 + i1 | 0;
     i6 = i6 - i7 | 0;
     i3 = i7 + i3 | 0;
     if (i6) if (i20) while (1) {
      i5 = (i6 | 0) < (i19 | 0) ? i6 : i19;
      HEAP16[i1 >> 1] = 0;
      HEAP16[i1 + 2 >> 1] = i5;
      i7 = i1 + 4 | 0;
      i1 = Math_imul(i5, i21) | 0;
      _SDL_memcpy(i7, i11 + (Math_imul(i3, i21) | 0) | 0, i1) | 0;
      i1 = i7 + i1 | 0;
      i6 = i6 - i5 | 0;
      if (!i6) break; else i3 = i5 + i3 | 0;
     } else while (1) {
      i5 = (i6 | 0) < (i19 | 0) ? i6 : i19;
      HEAP8[i1 >> 0] = 0;
      HEAP8[i1 + 1 >> 0] = i5;
      i7 = i1 + 2 | 0;
      i1 = Math_imul(i5, i21) | 0;
      _SDL_memcpy(i7, i11 + (Math_imul(i3, i21) | 0) | 0, i1) | 0;
      i1 = i7 + i1 | 0;
      i6 = i6 - i5 | 0;
      if (!i6) break; else i3 = i5 + i3 | 0;
     }
     i2 = (i9 | 0) == 0 ? i1 : i2;
     if (!i8) break; else i5 = i4;
    }
    i10 = i10 + 1 | 0;
    if ((i10 | 0) == (i16 | 0)) break; else i11 = i11 + (HEAP32[i18 >> 2] | 0) | 0;
   }
  } else i2 = i22;
  if (i20) {
   HEAP16[i2 >> 1] = 0;
   HEAP16[i2 + 2 >> 1] = 0;
   i1 = 4;
  } else {
   HEAP8[i2 >> 0] = 0;
   HEAP8[i2 + 1 >> 0] = 0;
   i1 = 2;
  }
  if (!(HEAP32[i24 >> 2] & 1)) {
   _SDL_free(HEAP32[i23 >> 2] | 0);
   HEAP32[i23 >> 2] = 0;
  }
  i1 = _SDL_realloc(i22, i2 + i1 - i22 | 0) | 0;
  HEAP32[(HEAP32[i25 >> 2] | 0) + 12 >> 2] = (i1 | 0) == 0 ? i22 : i1;
  i1 = 8192;
  i2 = 12;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i25 = -1;
   return i25 | 0;
  }
  i21 = HEAP32[i1 + 4 >> 2] | 0;
  if (i5 << 24 >> 24 != 32) {
   i25 = -1;
   return i25 | 0;
  }
  i5 = i21 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i21 + 16 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i7 = i21 + 20 | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  i4 = i2 | i1 | i3;
  i22 = i21 + 9 | 0;
  L87 : do switch (HEAP8[i22 >> 0] | 0) {
  case 2:
   {
    if ((i4 | 0) < 65535) {
     switch (i4 | 0) {
     case 32767:
      break;
     default:
      {
       i25 = -1;
       return i25 | 0;
      }
     }
     if ((i1 | 0) == 992 | (i2 | 0) == 992 | (i3 | 0) == 992) i1 = 29; else {
      i25 = -1;
      return i25 | 0;
     }
    } else {
     switch (i4 | 0) {
     case 65535:
      break;
     default:
      {
       i25 = -1;
       return i25 | 0;
      }
     }
     if ((i1 | 0) == 2016 | (i2 | 0) == 2016 | (i3 | 0) == 2016) i1 = 28; else {
      i25 = -1;
      return i25 | 0;
     }
    }
    i2 = (Math_imul(((HEAP32[i24 + 8 >> 2] | 0) * 6 | 0) + 8 | 0, HEAP32[i24 + 12 >> 2] | 0) | 0) + 2 | 0;
    i18 = i1;
    i19 = 30;
    break;
   }
  case 4:
   if ((i4 | 0) == 16777215) {
    i2 = Math_imul(HEAP32[i24 + 12 >> 2] << 3, (HEAP32[i24 + 8 >> 2] | 0) + 1 | 0) | 0 | 4;
    i18 = 31;
    i19 = 31;
    break L87;
   } else {
    i25 = -1;
    return i25 | 0;
   }
  default:
   {
    i25 = -1;
    return i25 | 0;
   }
  } while (0);
  i20 = _SDL_malloc(i2 + 28 | 0) | 0;
  if (!i20) {
   if ((_SDL_Error(0) | 0) < 0) i1 = -1; else {
    i1 = 16384;
    i2 = 13;
    break;
   }
   return i1 | 0;
  }
  i1 = HEAP8[i22 >> 0] | 0;
  HEAP8[i20 >> 0] = i1;
  HEAP32[i20 + 4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i20 + 12 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i20 + 16 >> 2] = HEAP32[i21 + 24 >> 2];
  HEAP8[i20 + 20 >> 0] = HEAP8[i21 + 28 >> 0] | 0;
  HEAP8[i20 + 21 >> 0] = HEAP8[i21 + 29 >> 0] | 0;
  HEAP8[i20 + 22 >> 0] = HEAP8[i21 + 30 >> 0] | 0;
  HEAP8[i20 + 23 >> 0] = HEAP8[i21 + 31 >> 0] | 0;
  HEAP8[i20 + 24 >> 0] = HEAP8[i21 + 32 >> 0] | 0;
  HEAP8[i20 + 25 >> 0] = HEAP8[i21 + 33 >> 0] | 0;
  HEAP8[i20 + 26 >> 0] = HEAP8[i21 + 34 >> 0] | 0;
  HEAP8[i20 + 27 >> 0] = HEAP8[i21 + 35 >> 0] | 0;
  i3 = i20 + 28 | 0;
  i16 = HEAP32[i24 + 12 >> 2] | 0;
  i17 = HEAP32[i24 + 8 >> 2] | 0;
  i15 = HEAP32[i8 >> 2] | 0;
  if ((i16 | 0) > 0) {
   i12 = i15 + 24 | 0;
   i13 = i15 + 35 | 0;
   i14 = i24 + 16 | 0;
   i2 = i3;
   i10 = HEAP32[i23 >> 2] | 0;
   i11 = 0;
   i1 = i3;
   while (1) {
    i9 = 0;
    i7 = 0;
    while (1) {
     L117 : do if ((i7 | 0) < (i17 | 0)) {
      i4 = HEAP32[i12 >> 2] | 0;
      i5 = HEAPU8[i13 >> 0] | 0;
      i3 = i7;
      do {
       if (((HEAP32[i10 + (i3 << 2) >> 2] & i4) >>> i5 | 0) == 255) break L117;
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i17 | 0));
     } else i3 = i7; while (0);
     L123 : do if ((i3 | 0) < (i17 | 0)) {
      i5 = HEAP32[i12 >> 2] | 0;
      i6 = HEAPU8[i13 >> 0] | 0;
      i4 = i3;
      while (1) {
       if (((HEAP32[i10 + (i4 << 2) >> 2] & i5) >>> i6 | 0) != 255) {
        i8 = 1;
        break L123;
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) >= (i17 | 0)) {
        i8 = 0;
        break;
       }
      }
     } else {
      i4 = i3;
      i8 = 0;
     } while (0);
     i5 = i3 - i7 | 0;
     i9 = (i5 | 0) == (i17 | 0) ? 1 : i9;
     i7 = i4 - i3 | 0;
     if ((i5 | 0) > 255) {
      i6 = i5;
      while (1) {
       if ((HEAP8[i22 >> 0] | 0) == 4) {
        HEAP16[i1 >> 1] = 255;
        HEAP16[i1 + 2 >> 1] = 0;
        i5 = 4;
       } else {
        HEAP8[i1 >> 0] = -1;
        HEAP8[i1 + 1 >> 0] = 0;
        i5 = 2;
       }
       i1 = i1 + i5 | 0;
       i5 = i6 + -255 | 0;
       if ((i6 | 0) > 510) i6 = i5; else break;
      }
     }
     i6 = (i7 | 0) < 255 ? i7 : 255;
     if ((HEAP8[i22 >> 0] | 0) == 4) {
      HEAP16[i1 >> 1] = i5;
      HEAP16[i1 + 2 >> 1] = i6;
      i5 = 4;
     } else {
      HEAP8[i1 >> 0] = i5;
      HEAP8[i1 + 1 >> 0] = i6;
      i5 = 2;
     }
     i1 = i1 + i5 | 0;
     i1 = i1 + (FUNCTION_TABLE_iiiiii[i19 & 63](i1, i10 + (i3 << 2) | 0, i6, i15, i21) | 0) | 0;
     i5 = i7 - i6 | 0;
     if (i5) {
      i7 = i6 + i3 | 0;
      while (1) {
       i6 = (i5 | 0) < 255 ? i5 : 255;
       if ((HEAP8[i22 >> 0] | 0) == 4) {
        HEAP16[i1 >> 1] = 0;
        HEAP16[i1 + 2 >> 1] = i6;
        i3 = 4;
       } else {
        HEAP8[i1 >> 0] = 0;
        HEAP8[i1 + 1 >> 0] = i6;
        i3 = 2;
       }
       i1 = i1 + i3 | 0;
       i1 = i1 + (FUNCTION_TABLE_iiiiii[i19 & 63](i1, i10 + (i7 << 2) | 0, i6, i15, i21) | 0) | 0;
       i5 = i5 - i6 | 0;
       if (!i5) break; else i7 = i6 + i7 | 0;
      }
     }
     if (!i8) break; else i7 = i4;
    }
    i7 = 0;
    i1 = i1 + (i1 & 2) | 0;
    while (1) {
     L153 : do if ((i7 | 0) < (i17 | 0)) {
      i4 = HEAP32[i12 >> 2] | 0;
      i5 = HEAPU8[i13 >> 0] | 0;
      i3 = i7;
      do {
       if ((((HEAP32[i10 + (i3 << 2) >> 2] & i4) >>> i5) + -1 | 0) >>> 0 <= 253) break L153;
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i17 | 0));
     } else i3 = i7; while (0);
     L159 : do if ((i3 | 0) < (i17 | 0)) {
      i5 = HEAP32[i12 >> 2] | 0;
      i6 = HEAPU8[i13 >> 0] | 0;
      i4 = i3;
      while (1) {
       if ((((HEAP32[i10 + (i4 << 2) >> 2] & i5) >>> i6) + -1 | 0) >>> 0 >= 254) {
        i8 = 1;
        break L159;
       }
       i4 = i4 + 1 | 0;
       if ((i4 | 0) >= (i17 | 0)) {
        i8 = 0;
        break;
       }
      }
     } else {
      i4 = i3;
      i8 = 0;
     } while (0);
     i5 = i3 - i7 | 0;
     i9 = i9 & (i5 | 0) == (i17 | 0);
     i7 = i4 - i3 | 0;
     if ((i5 | 0) > 65535) {
      i6 = i5;
      while (1) {
       HEAP16[i1 >> 1] = -1;
       HEAP16[i1 + 2 >> 1] = 0;
       i1 = i1 + 4 | 0;
       i5 = i6 + -65535 | 0;
       if ((i6 | 0) > 131070) i6 = i5; else break;
      }
     }
     i6 = (i7 | 0) < 65535 ? i7 : 65535;
     HEAP16[i1 >> 1] = i5;
     HEAP16[i1 + 2 >> 1] = i6;
     i1 = i1 + 4 | 0;
     i1 = i1 + (FUNCTION_TABLE_iiiiii[i18 & 63](i1, i10 + (i3 << 2) | 0, i6, i15, i21) | 0) | 0;
     i5 = i7 - i6 | 0;
     if (i5) {
      i6 = i6 + i3 | 0;
      while (1) {
       i3 = (i5 | 0) < 65535 ? i5 : 65535;
       HEAP16[i1 >> 1] = 0;
       HEAP16[i1 + 2 >> 1] = i3;
       i1 = i1 + 4 | 0;
       i1 = i1 + (FUNCTION_TABLE_iiiiii[i18 & 63](i1, i10 + (i6 << 2) | 0, i3, i15, i21) | 0) | 0;
       i5 = i5 - i3 | 0;
       if (!i5) break; else i6 = i3 + i6 | 0;
      }
     }
     i2 = (i9 | 0) == 0 ? i1 : i2;
     if (!i8) break; else i7 = i4;
    }
    i11 = i11 + 1 | 0;
    if ((i11 | 0) == (i16 | 0)) break; else i10 = i10 + (HEAP32[i14 >> 2] >> 2 << 2) | 0;
   }
   i1 = HEAP8[i22 >> 0] | 0;
  } else i2 = i3;
  if (i1 << 24 >> 24 == 4) {
   HEAP16[i2 >> 1] = 0;
   HEAP16[i2 + 2 >> 1] = 0;
   i1 = 4;
  } else {
   HEAP8[i2 >> 0] = 0;
   HEAP8[i2 + 1 >> 0] = 0;
   i1 = 2;
  }
  if (!(HEAP32[i24 >> 2] & 1)) {
   _SDL_free(HEAP32[i23 >> 2] | 0);
   HEAP32[i23 >> 2] = 0;
  }
  i1 = _SDL_realloc(i20, i2 + i1 - i20 | 0) | 0;
  HEAP32[(HEAP32[i25 >> 2] | 0) + 12 >> 2] = (i1 | 0) == 0 ? i20 : i1;
  i1 = 16384;
  i2 = 13;
 } while (0);
 i25 = HEAP32[i25 >> 2] | 0;
 HEAP32[i25 + 8 >> 2] = i2;
 i25 = i25 + 68 | 0;
 HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | i1;
 HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 2;
 i25 = 0;
 return i25 | 0;
}

function _SDL_RLEAlphaBlit(i2, i11, i14, i1) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i5 = 0;
 i7 = i2 + 8 | 0;
 i15 = HEAP32[i7 >> 2] | 0;
 i9 = i14 + 4 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 if (HEAP32[i14 >> 2] & 2 | 0) if ((_SDL_LockSurface(i14) | 0) < 0) {
  i15 = -1;
  return i15 | 0;
 }
 i13 = i14 + 16 | 0;
 i8 = (HEAP32[i14 + 20 >> 2] | 0) + (Math_imul(HEAP32[i13 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0) | 0) | 0;
 i6 = HEAP8[i10 + 9 >> 0] | 0;
 i8 = i8 + (Math_imul(HEAP32[i1 >> 2] | 0, i6 & 255) | 0) | 0;
 i1 = (HEAP32[(HEAP32[i2 + 52 >> 2] | 0) + 12 >> 2] | 0) + 28 | 0;
 i2 = HEAP32[i11 + 4 >> 2] | 0;
 L5 : do if (!i2) i5 = 20; else {
  if (i6 << 24 >> 24 != 2) {
   i4 = i2 << 1;
   while (1) {
    i2 = 0;
    do {
     i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
     i12 = HEAP16[i1 + 2 >> 1] | 0;
     i3 = i12 & 65535;
     i1 = i1 + 4 | 0;
     if (!(i12 << 16 >> 16)) {
      if (!i2) break L5;
     } else {
      i2 = i2 + i3 | 0;
      i1 = i1 + (i3 << 2) | 0;
     }
    } while ((i2 | 0) < (i15 | 0));
    i4 = i4 + -1 | 0;
    if (!i4) {
     i5 = 20;
     break L5;
    }
   }
  }
  while (1) {
   i3 = 0;
   do {
    i3 = i3 + (HEAPU8[i1 >> 0] | 0) | 0;
    i12 = HEAP8[i1 + 1 >> 0] | 0;
    i4 = i12 & 255;
    i1 = i1 + 2 | 0;
    if (!(i12 << 24 >> 24)) {
     if (!i3) break L5;
    } else {
     i3 = i3 + i4 | 0;
     i1 = i1 + (i4 << 1) | 0;
    }
   } while ((i3 | 0) < (i15 | 0));
   i3 = 0;
   i1 = i1 + (i1 & 2) | 0;
   do {
    i12 = HEAPU16[i1 + 2 >> 1] | 0;
    i4 = i1;
    i1 = i1 + ((i12 << 2) + 4) | 0;
    i3 = i3 + (HEAPU16[i4 >> 1] | 0) + i12 | 0;
   } while ((i3 | 0) < (i15 | 0));
   i2 = i2 + -1 | 0;
   if (!i2) {
    i5 = 20;
    break;
   }
  }
 } while (0);
 L30 : do if ((i5 | 0) == 20) {
  i12 = HEAP32[i11 >> 2] | 0;
  if (!i12) if ((HEAP32[i11 + 8 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) {
   switch (i6 << 24 >> 24) {
   case 2:
    break;
   case 4:
    {
     i9 = HEAP32[i11 + 12 >> 2] | 0;
     while (1) {
      i2 = 0;
      do {
       i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
       i12 = HEAP16[i1 + 2 >> 1] | 0;
       i3 = i12 & 65535;
       i1 = i1 + 4 | 0;
       if (!(i12 << 16 >> 16)) {
        if (!i2) break L30;
       } else {
        i12 = i3 << 2;
        _SDL_memcpy(i8 + (i2 << 2) | 0, i1, i12) | 0;
        i2 = i2 + i3 | 0;
        i1 = i1 + i12 | 0;
       }
      } while ((i2 | 0) < (i15 | 0));
      i2 = 0;
      do {
       i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
       i12 = HEAP16[i1 + 2 >> 1] | 0;
       i7 = i12 & 65535;
       i1 = i1 + 4 | 0;
       if (i12 << 16 >> 16) {
        i6 = i7 << 2;
        i3 = 0;
        i4 = i8 + (i2 << 2) | 0;
        i5 = i1;
        while (1) {
         i10 = HEAP32[i5 >> 2] | 0;
         i16 = HEAP32[i4 >> 2] | 0;
         i11 = i10 >>> 24;
         i12 = i16 & 16711935;
         i16 = i16 & 65280;
         HEAP32[i4 >> 2] = ((Math_imul((i10 & 65280) - i16 | 0, i11) | 0) >>> 8) + i16 & 65280 | ((Math_imul((i10 & 16711935) - i12 | 0, i11) | 0) >>> 8) + i12 & 16711935 | -16777216;
         i3 = i3 + 1 | 0;
         if ((i3 | 0) == (i7 | 0)) break; else {
          i4 = i4 + 4 | 0;
          i5 = i5 + 4 | 0;
         }
        }
        i1 = i1 + i6 | 0;
        i2 = i2 + i7 | 0;
       }
      } while ((i2 | 0) < (i15 | 0));
      i9 = i9 + -1 | 0;
      if (!i9) break L30; else i8 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
     }
    }
   default:
    break L30;
   }
   if ((HEAP32[i10 + 16 >> 2] | 0) != 2016) if ((HEAP32[i10 + 12 >> 2] | 0) != 2016) if ((HEAP32[i10 + 20 >> 2] | 0) != 2016) {
    i9 = HEAP32[i11 + 12 >> 2] | 0;
    while (1) {
     i2 = 0;
     do {
      i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
      i16 = HEAP8[i1 + 1 >> 0] | 0;
      i3 = i16 & 255;
      i1 = i1 + 2 | 0;
      if (!(i16 << 24 >> 24)) {
       if (!i2) break L30;
      } else {
       i16 = i3 << 1;
       _SDL_memcpy(i8 + (i2 << 1) | 0, i1, i16) | 0;
       i2 = i2 + i3 | 0;
       i1 = i1 + i16 | 0;
      }
     } while ((i2 | 0) < (i15 | 0));
     i1 = i1 + (i1 & 2) | 0;
     i2 = 0;
     do {
      i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
      i16 = HEAP16[i1 + 2 >> 1] | 0;
      i7 = i16 & 65535;
      i1 = i1 + 4 | 0;
      if (i16 << 16 >> 16) {
       i6 = i7 << 2;
       i3 = 0;
       i4 = i8 + (i2 << 1) | 0;
       i5 = i1;
       while (1) {
        i12 = HEAP32[i5 >> 2] | 0;
        i16 = HEAPU16[i4 >> 1] | 0;
        i16 = (i16 << 16 | i16) & 65043487;
        i16 = ((Math_imul((i12 & 65043487) - i16 | 0, i12 >>> 5 & 31) | 0) >>> 5) + i16 & 65043487;
        HEAP16[i4 >> 1] = i16 >>> 16 | i16;
        i3 = i3 + 1 | 0;
        if ((i3 | 0) == (i7 | 0)) break; else {
         i4 = i4 + 2 | 0;
         i5 = i5 + 4 | 0;
        }
       }
       i1 = i1 + i6 | 0;
       i2 = i2 + i7 | 0;
      }
     } while ((i2 | 0) < (i15 | 0));
     i9 = i9 + -1 | 0;
     if (!i9) break L30; else i8 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
    }
   }
   i9 = HEAP32[i11 + 12 >> 2] | 0;
   while (1) {
    i2 = 0;
    do {
     i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
     i16 = HEAP8[i1 + 1 >> 0] | 0;
     i3 = i16 & 255;
     i1 = i1 + 2 | 0;
     if (!(i16 << 24 >> 24)) {
      if (!i2) break L30;
     } else {
      i16 = i3 << 1;
      _SDL_memcpy(i8 + (i2 << 1) | 0, i1, i16) | 0;
      i2 = i2 + i3 | 0;
      i1 = i1 + i16 | 0;
     }
    } while ((i2 | 0) < (i15 | 0));
    i1 = i1 + (i1 & 2) | 0;
    i2 = 0;
    do {
     i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
     i16 = HEAP16[i1 + 2 >> 1] | 0;
     i7 = i16 & 65535;
     i1 = i1 + 4 | 0;
     if (i16 << 16 >> 16) {
      i6 = i7 << 2;
      i3 = i8 + (i2 << 1) | 0;
      i4 = 0;
      i5 = i1;
      while (1) {
       i12 = HEAP32[i5 >> 2] | 0;
       i16 = HEAPU16[i3 >> 1] | 0;
       i16 = (i16 << 16 | i16) & 132184095;
       i16 = ((Math_imul((i12 & 132184095) - i16 | 0, i12 >>> 5 & 31) | 0) >>> 5) + i16 & 132184095;
       HEAP16[i3 >> 1] = i16 >>> 16 | i16;
       i4 = i4 + 1 | 0;
       if ((i4 | 0) == (i7 | 0)) break; else {
        i3 = i3 + 2 | 0;
        i5 = i5 + 4 | 0;
       }
      }
      i1 = i1 + i6 | 0;
      i2 = i2 + i7 | 0;
     }
    } while ((i2 | 0) < (i15 | 0));
    i9 = i9 + -1 | 0;
    if (!i9) break L30; else i8 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
   }
  }
  i2 = HEAP32[i9 >> 2] | 0;
  switch (HEAP8[i2 + 9 >> 0] | 0) {
  case 2:
   break;
  case 4:
   {
    i10 = (HEAP32[i11 + 8 >> 2] | 0) + i12 | 0;
    i9 = HEAP32[i11 + 12 >> 2] | 0;
    i8 = i8 + (0 - (i12 << 2)) | 0;
    while (1) {
     i2 = 0;
     do {
      i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
      i16 = HEAP16[i1 + 2 >> 1] | 0;
      i5 = i16 & 65535;
      i1 = i1 + 4 | 0;
      if (!(i16 << 16 >> 16)) {
       if (!i2) break L30;
      } else {
       i3 = i12 - i2 | 0;
       i16 = (i3 | 0) > 0;
       i4 = i16 ? i12 : i2;
       i3 = i5 - (i16 ? i3 : 0) | 0;
       i16 = i10 - i4 | 0;
       i3 = (i3 | 0) > (i16 | 0) ? i16 : i3;
       if ((i3 | 0) > 0) _SDL_memcpy(i8 + (i4 << 2) | 0, i1 + (i4 - i2 << 2) | 0, i3 << 2) | 0;
       i2 = i2 + i5 | 0;
       i1 = i1 + (i5 << 2) | 0;
      }
     } while ((i2 | 0) < (i15 | 0));
     i2 = 0;
     do {
      i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
      i16 = HEAP16[i1 + 2 >> 1] | 0;
      i7 = i16 & 65535;
      i1 = i1 + 4 | 0;
      if (i16 << 16 >> 16) {
       i5 = i12 - i2 | 0;
       i16 = (i5 | 0) > 0;
       i3 = i16 ? i12 : i2;
       i5 = i7 - (i16 ? i5 : 0) | 0;
       i16 = i10 - i3 | 0;
       i5 = (i5 | 0) > (i16 | 0) ? i16 : i5;
       if ((i5 | 0) > 0) {
        i6 = i8 + (i3 << 2) | 0;
        i4 = i1 + (i3 - i2 << 2) | 0;
        i3 = 0;
        do {
         i18 = HEAP32[i4 + (i3 << 2) >> 2] | 0;
         i16 = i6 + (i3 << 2) | 0;
         i11 = HEAP32[i16 >> 2] | 0;
         i17 = i18 >>> 24;
         i19 = i11 & 16711935;
         i11 = i11 & 65280;
         HEAP32[i16 >> 2] = ((Math_imul((i18 & 16711935) - i19 | 0, i17) | 0) >>> 8) + i19 & 16711935 | ((Math_imul((i18 & 65280) - i11 | 0, i17) | 0) >>> 8) + i11 & 65280 | -16777216;
         i3 = i3 + 1 | 0;
        } while ((i3 | 0) < (i5 | 0));
       }
       i1 = i1 + (i7 << 2) | 0;
       i2 = i2 + i7 | 0;
      }
     } while ((i2 | 0) < (i15 | 0));
     i9 = i9 + -1 | 0;
     if (!i9) break L30; else i8 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
    }
   }
  default:
   break L30;
  }
  if ((HEAP32[i2 + 16 >> 2] | 0) != 2016) if ((HEAP32[i2 + 12 >> 2] | 0) != 2016) if ((HEAP32[i2 + 20 >> 2] | 0) != 2016) {
   i10 = (HEAP32[i11 + 8 >> 2] | 0) + i12 | 0;
   i9 = HEAP32[i11 + 12 >> 2] | 0;
   i8 = i8 + (0 - (i12 << 1)) | 0;
   while (1) {
    i2 = 0;
    do {
     i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
     i19 = HEAP8[i1 + 1 >> 0] | 0;
     i5 = i19 & 255;
     i1 = i1 + 2 | 0;
     if (!(i19 << 24 >> 24)) {
      if (!i2) break L30;
     } else {
      i3 = i12 - i2 | 0;
      i4 = (i3 | 0) > 0;
      i3 = i5 - (i4 ? i3 : 0) | 0;
      i4 = i4 ? i12 : i2;
      i19 = i10 - i4 | 0;
      i3 = (i3 | 0) > (i19 | 0) ? i19 : i3;
      if ((i3 | 0) > 0) _SDL_memcpy(i8 + (i4 << 1) | 0, i1 + (i4 - i2 << 1) | 0, i3 << 1) | 0;
      i2 = i2 + i5 | 0;
      i1 = i1 + (i5 << 1) | 0;
     }
    } while ((i2 | 0) < (i15 | 0));
    i1 = i1 + (i1 & 2) | 0;
    i2 = 0;
    do {
     i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
     i19 = HEAP16[i1 + 2 >> 1] | 0;
     i7 = i19 & 65535;
     i1 = i1 + 4 | 0;
     if (i19 << 16 >> 16) {
      i5 = i12 - i2 | 0;
      i3 = (i5 | 0) > 0;
      i5 = i7 - (i3 ? i5 : 0) | 0;
      i3 = i3 ? i12 : i2;
      i19 = i10 - i3 | 0;
      i5 = (i5 | 0) > (i19 | 0) ? i19 : i5;
      if ((i5 | 0) > 0) {
       i6 = i8 + (i3 << 1) | 0;
       i4 = i1 + (i3 - i2 << 2) | 0;
       i3 = 0;
       do {
        i17 = HEAP32[i4 + (i3 << 2) >> 2] | 0;
        i19 = i6 + (i3 << 1) | 0;
        i18 = HEAPU16[i19 >> 1] | 0;
        i18 = (i18 << 16 | i18) & 65043487;
        i18 = ((Math_imul((i17 & 65043487) - i18 | 0, i17 >>> 5 & 31) | 0) >>> 5) + i18 & 65043487;
        HEAP16[i19 >> 1] = i18 >>> 16 | i18;
        i3 = i3 + 1 | 0;
       } while ((i3 | 0) < (i5 | 0));
      }
      i1 = i1 + (i7 << 2) | 0;
      i2 = i2 + i7 | 0;
     }
    } while ((i2 | 0) < (i15 | 0));
    i9 = i9 + -1 | 0;
    if (!i9) break L30; else i8 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
   }
  }
  i10 = (HEAP32[i11 + 8 >> 2] | 0) + i12 | 0;
  i9 = i8 + (0 - (i12 << 1)) | 0;
  i8 = HEAP32[i11 + 12 >> 2] | 0;
  while (1) {
   i2 = 0;
   do {
    i2 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
    i19 = HEAP8[i1 + 1 >> 0] | 0;
    i5 = i19 & 255;
    i1 = i1 + 2 | 0;
    if (!(i19 << 24 >> 24)) {
     if (!i2) break L30;
    } else {
     i3 = i12 - i2 | 0;
     i4 = (i3 | 0) > 0;
     i3 = i5 - (i4 ? i3 : 0) | 0;
     i4 = i4 ? i12 : i2;
     i19 = i10 - i4 | 0;
     i3 = (i3 | 0) > (i19 | 0) ? i19 : i3;
     if ((i3 | 0) > 0) _SDL_memcpy(i9 + (i4 << 1) | 0, i1 + (i4 - i2 << 1) | 0, i3 << 1) | 0;
     i2 = i2 + i5 | 0;
     i1 = i1 + (i5 << 1) | 0;
    }
   } while ((i2 | 0) < (i15 | 0));
   i2 = 0;
   i1 = i1 + (i1 & 2) | 0;
   do {
    i2 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
    i19 = HEAP16[i1 + 2 >> 1] | 0;
    i7 = i19 & 65535;
    i1 = i1 + 4 | 0;
    if (i19 << 16 >> 16) {
     i5 = i12 - i2 | 0;
     i3 = (i5 | 0) > 0;
     i5 = i7 - (i3 ? i5 : 0) | 0;
     i3 = i3 ? i12 : i2;
     i19 = i10 - i3 | 0;
     i5 = (i5 | 0) > (i19 | 0) ? i19 : i5;
     if ((i5 | 0) > 0) {
      i6 = i9 + (i3 << 1) | 0;
      i4 = i1 + (i3 - i2 << 2) | 0;
      i3 = 0;
      do {
       i17 = HEAP32[i4 + (i3 << 2) >> 2] | 0;
       i19 = i6 + (i3 << 1) | 0;
       i18 = HEAPU16[i19 >> 1] | 0;
       i18 = (i18 << 16 | i18) & 132184095;
       i18 = ((Math_imul((i17 & 132184095) - i18 | 0, i17 >>> 5 & 31) | 0) >>> 5) + i18 & 132184095;
       HEAP16[i19 >> 1] = i18 >>> 16 | i18;
       i3 = i3 + 1 | 0;
      } while ((i3 | 0) < (i5 | 0));
     }
     i2 = i2 + i7 | 0;
     i1 = i1 + (i7 << 2) | 0;
    }
   } while ((i2 | 0) < (i15 | 0));
   i8 = i8 + -1 | 0;
   if (!i8) break; else i9 = i9 + (HEAP32[i13 >> 2] | 0) | 0;
  }
 } while (0);
 if (!(HEAP32[i14 >> 2] & 2)) {
  i19 = 0;
  return i19 | 0;
 }
 _SDL_UnlockSurface(i14);
 i19 = 0;
 return i19 | 0;
}

function _SDL_BlendFillRect_ARGB8888(i35, i37, i2, i4, i36, i38, i1) {
 i35 = i35 | 0;
 i37 = i37 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i36 = i36 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i34 = i1 & 255;
 i10 = i34 ^ 255;
 switch (i2 | 0) {
 case 1:
  {
   i1 = HEAP32[i37 + 8 >> 2] | 0;
   i2 = HEAP32[i37 + 12 >> 2] | 0;
   i3 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i35 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i3 - i1 | 0;
   if (!i2) return 0;
   i9 = (i1 + 3 | 0) / 4 | 0;
   i7 = i1 & 255;
   i6 = i4 & 255;
   i5 = i36 & 255;
   i4 = i38 & 255;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i37 + 4 >> 2] | 0, i3) | 0) << 2) + (HEAP32[i37 >> 2] << 2) | 0;
   L41 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 & 3) {
    case 0:
     {
      i11 = i9;
      i13 = i1;
      i1 = 5;
      break;
     }
    case 3:
     {
      i14 = i9;
      i19 = i1;
      i1 = 6;
      break;
     }
    case 2:
     {
      i20 = i9;
      i25 = i1;
      i1 = 7;
      break;
     }
    case 1:
     {
      i26 = i9;
      i31 = i1;
      i1 = 8;
      break;
     }
    default:
     {
      i1 = 9;
      break L41;
     }
    }
    while (1) if ((i1 | 0) == 5) {
     i14 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = (((Math_imul(i14 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i34 << 24 | (((Math_imul(i14 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i14 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i14 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8;
     i14 = i11;
     i19 = i13 + 4 | 0;
     i1 = 6;
     continue;
    } else if ((i1 | 0) == 6) {
     i20 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = (((Math_imul(i20 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i34 << 24 | (((Math_imul(i20 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i20 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i20 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8;
     i20 = i14;
     i25 = i19 + 4 | 0;
     i1 = 7;
     continue;
    } else if ((i1 | 0) == 7) {
     i26 = HEAP32[i25 >> 2] | 0;
     HEAP32[i25 >> 2] = (((Math_imul(i26 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i34 << 24 | (((Math_imul(i26 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i26 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i26 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8;
     i26 = i20;
     i31 = i25 + 4 | 0;
     i1 = 8;
     continue;
    } else if ((i1 | 0) == 8) {
     i1 = HEAP32[i31 >> 2] | 0;
     HEAP32[i31 >> 2] = (((Math_imul(i1 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i34 << 24 | (((Math_imul(i1 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i1 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16 | (((Math_imul(i1 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8;
     i1 = i31 + 4 | 0;
     if ((i26 | 0) > 1) {
      i11 = i26 + -1 | 0;
      i13 = i1;
      i1 = 5;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 2) | 0;
   }
   if ((i1 | 0) != 9) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 2:
  {
   i3 = HEAP32[i37 + 8 >> 2] | 0;
   i2 = HEAP32[i37 + 12 >> 2] | 0;
   i1 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i35 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i37 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i36 & 255;
   i3 = i38 & 255;
   i1 = i1 + (HEAP32[i37 >> 2] << 2) | 0;
   L57 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i9 = i7;
      i15 = i1;
      i1 = 14;
      break;
     }
    case 3:
     {
      i16 = i7;
      i21 = i1;
      i1 = 15;
      break;
     }
    case 2:
     {
      i22 = i7;
      i27 = i1;
      i1 = 16;
      break;
     }
    case 1:
     {
      i28 = i7;
      i32 = i1;
      i1 = 17;
      break;
     }
    default:
     {
      i1 = 18;
      break L57;
     }
    }
    while (1) if ((i1 | 0) == 14) {
     i1 = HEAP32[i15 >> 2] | 0;
     i21 = (i1 >>> 16 & 255) + i5 | 0;
     i16 = (i1 >>> 8 & 255) + i4 | 0;
     i38 = (i1 & 255) + i3 | 0;
     HEAP32[i15 >> 2] = (i38 >>> 0 < 255 ? i38 : 255) | i1 & -16777216 | (i21 >>> 0 < 255 ? i21 : 255) << 16 | (i16 >>> 0 < 255 ? i16 : 255) << 8;
     i16 = i9;
     i21 = i15 + 4 | 0;
     i1 = 15;
     continue;
    } else if ((i1 | 0) == 15) {
     i1 = HEAP32[i21 >> 2] | 0;
     i27 = (i1 >>> 16 & 255) + i5 | 0;
     i22 = (i1 >>> 8 & 255) + i4 | 0;
     i38 = (i1 & 255) + i3 | 0;
     HEAP32[i21 >> 2] = (i38 >>> 0 < 255 ? i38 : 255) | i1 & -16777216 | (i27 >>> 0 < 255 ? i27 : 255) << 16 | (i22 >>> 0 < 255 ? i22 : 255) << 8;
     i22 = i16;
     i27 = i21 + 4 | 0;
     i1 = 16;
     continue;
    } else if ((i1 | 0) == 16) {
     i1 = HEAP32[i27 >> 2] | 0;
     i32 = (i1 >>> 16 & 255) + i5 | 0;
     i28 = (i1 >>> 8 & 255) + i4 | 0;
     i38 = (i1 & 255) + i3 | 0;
     HEAP32[i27 >> 2] = (i38 >>> 0 < 255 ? i38 : 255) | i1 & -16777216 | (i32 >>> 0 < 255 ? i32 : 255) << 16 | (i28 >>> 0 < 255 ? i28 : 255) << 8;
     i28 = i22;
     i32 = i27 + 4 | 0;
     i1 = 17;
     continue;
    } else if ((i1 | 0) == 17) {
     i37 = HEAP32[i32 >> 2] | 0;
     i38 = (i37 >>> 16 & 255) + i5 | 0;
     i1 = (i37 >>> 8 & 255) + i4 | 0;
     i36 = (i37 & 255) + i3 | 0;
     HEAP32[i32 >> 2] = (i36 >>> 0 < 255 ? i36 : 255) | i37 & -16777216 | (i38 >>> 0 < 255 ? i38 : 255) << 16 | (i1 >>> 0 < 255 ? i1 : 255) << 8;
     i1 = i32 + 4 | 0;
     if ((i28 | 0) > 1) {
      i9 = i28 + -1 | 0;
      i15 = i1;
      i1 = 14;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 2) | 0;
   }
   if ((i1 | 0) != 18) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 4:
  {
   i3 = HEAP32[i37 + 8 >> 2] | 0;
   i2 = HEAP32[i37 + 12 >> 2] | 0;
   i1 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i35 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i37 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i36 & 255;
   i3 = i38 & 255;
   i1 = i1 + (HEAP32[i37 >> 2] << 2) | 0;
   L73 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i12 = i7;
      i17 = i1;
      i1 = 23;
      break;
     }
    case 3:
     {
      i18 = i7;
      i23 = i1;
      i1 = 24;
      break;
     }
    case 2:
     {
      i24 = i7;
      i29 = i1;
      i1 = 25;
      break;
     }
    case 1:
     {
      i30 = i7;
      i33 = i1;
      i1 = 26;
      break;
     }
    default:
     {
      i1 = 27;
      break L73;
     }
    }
    while (1) if ((i1 | 0) == 23) {
     i18 = HEAP32[i17 >> 2] | 0;
     HEAP32[i17 >> 2] = ((Math_imul(i18 & 255, i3) | 0) >>> 0) / 255 | 0 | i18 & -16777216 | (((Math_imul(i18 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i18 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8;
     i18 = i12;
     i23 = i17 + 4 | 0;
     i1 = 24;
     continue;
    } else if ((i1 | 0) == 24) {
     i24 = HEAP32[i23 >> 2] | 0;
     HEAP32[i23 >> 2] = ((Math_imul(i24 & 255, i3) | 0) >>> 0) / 255 | 0 | i24 & -16777216 | (((Math_imul(i24 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i24 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8;
     i24 = i18;
     i29 = i23 + 4 | 0;
     i1 = 25;
     continue;
    } else if ((i1 | 0) == 25) {
     i30 = HEAP32[i29 >> 2] | 0;
     HEAP32[i29 >> 2] = ((Math_imul(i30 & 255, i3) | 0) >>> 0) / 255 | 0 | i30 & -16777216 | (((Math_imul(i30 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i30 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8;
     i30 = i24;
     i33 = i29 + 4 | 0;
     i1 = 26;
     continue;
    } else if ((i1 | 0) == 26) {
     i1 = HEAP32[i33 >> 2] | 0;
     HEAP32[i33 >> 2] = ((Math_imul(i1 & 255, i3) | 0) >>> 0) / 255 | 0 | i1 & -16777216 | (((Math_imul(i1 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i1 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8;
     i1 = i33 + 4 | 0;
     if ((i30 | 0) > 1) {
      i12 = i30 + -1 | 0;
      i17 = i1;
      i1 = 23;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 2) | 0;
   }
   if ((i1 | 0) != 27) if ((i1 | 0) == 46) return 0;
   break;
  }
 default:
  {
   i2 = HEAP32[i37 + 8 >> 2] | 0;
   i33 = HEAP32[i37 + 12 >> 2] | 0;
   i1 = (HEAP32[i35 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i35 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i2 | 0;
   i1 = (HEAP32[i35 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i37 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i1 = i1 + (HEAP32[i37 >> 2] << 2) | 0;
   i3 = i33 + -1 | 0;
   if (!i33) return 0;
   i7 = (i2 + 3 | 0) / 4 | 0;
   i6 = (i36 & 255) << 8 | (i4 & 255) << 16 | i38 & 255 | i34 << 24;
   switch (i2 & 3) {
   case 0:
    {
     while (1) {
      i2 = i7;
      while (1) {
       HEAP32[i1 >> 2] = i6;
       HEAP32[i1 + 4 >> 2] = i6;
       HEAP32[i1 + 8 >> 2] = i6;
       HEAP32[i1 + 12 >> 2] = i6;
       i1 = i1 + 16 | 0;
       if ((i2 | 0) <= 1) break; else i2 = i2 + -1 | 0;
      }
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 3:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP32[i1 >> 2] = i6;
      HEAP32[i1 + 4 >> 2] = i6;
      HEAP32[i1 + 8 >> 2] = i6;
      i2 = i1 + 12 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP32[i2 >> 2] = i6;
        i2 = i1;
        i1 = i1 + 16 | 0;
        HEAP32[i1 >> 2] = i6;
        HEAP32[i2 + 20 >> 2] = i6;
        HEAP32[i2 + 24 >> 2] = i6;
        i2 = i2 + 28 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 2:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP32[i1 >> 2] = i6;
      HEAP32[i1 + 4 >> 2] = i6;
      i2 = i1 + 8 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP32[i2 >> 2] = i6;
        HEAP32[i1 + 12 >> 2] = i6;
        i2 = i1;
        i1 = i1 + 16 | 0;
        HEAP32[i1 >> 2] = i6;
        HEAP32[i2 + 20 >> 2] = i6;
        i2 = i2 + 24 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   default:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP32[i1 >> 2] = i6;
      i2 = i1 + 4 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP32[i2 >> 2] = i6;
        HEAP32[i1 + 8 >> 2] = i6;
        HEAP32[i1 + 12 >> 2] = i6;
        i2 = i1;
        i1 = i1 + 16 | 0;
        HEAP32[i1 >> 2] = i6;
        i2 = i2 + 20 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   }
  }
 }
 return 0;
}
function _printf_core(i19, i1, i24, i25, i26) {
 i19 = i19 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i27 = 0;
 i13 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i20 = i27 + 16 | 0;
 i21 = i27;
 i17 = i27 + 24 | 0;
 i22 = i27 + 8 | 0;
 i23 = i27 + 20 | 0;
 HEAP32[i20 >> 2] = i1;
 i14 = (i19 | 0) != 0;
 i15 = i17 + 40 | 0;
 i16 = i15;
 i17 = i17 + 39 | 0;
 i18 = i22 + 4 | 0;
 i2 = 0;
 i1 = 0;
 i4 = 0;
 L1 : while (1) {
  do if ((i1 | 0) > -1) if ((i2 | 0) > (2147483647 - i1 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   i1 = -1;
   break;
  } else {
   i1 = i2 + i1 | 0;
   break;
  } while (0);
  i9 = HEAP32[i20 >> 2] | 0;
  i2 = HEAP8[i9 >> 0] | 0;
  if (!(i2 << 24 >> 24)) {
   i13 = 88;
   break;
  } else i3 = i9;
  L9 : while (1) {
   switch (i2 << 24 >> 24) {
   case 37:
    {
     i2 = i3;
     i13 = 9;
     break L9;
    }
   case 0:
    {
     i2 = i3;
     break L9;
    }
   default:
    {}
   }
   i12 = i3 + 1 | 0;
   HEAP32[i20 >> 2] = i12;
   i2 = HEAP8[i12 >> 0] | 0;
   i3 = i12;
  }
  L12 : do if ((i13 | 0) == 9) while (1) {
   i13 = 0;
   if ((HEAP8[i3 + 1 >> 0] | 0) != 37) break L12;
   i2 = i2 + 1 | 0;
   i3 = i3 + 2 | 0;
   HEAP32[i20 >> 2] = i3;
   if ((HEAP8[i3 >> 0] | 0) != 37) break; else i13 = 9;
  } while (0);
  i2 = i2 - i9 | 0;
  if (i14) _out(i19, i9, i2);
  if (i2 | 0) continue;
  i12 = (_isdigit(HEAP8[(HEAP32[i20 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  i3 = HEAP32[i20 >> 2] | 0;
  if (i12) {
   i10 = -1;
   i5 = i4;
   i2 = 1;
  } else if ((HEAP8[i3 + 2 >> 0] | 0) == 36) {
   i10 = (HEAP8[i3 + 1 >> 0] | 0) + -48 | 0;
   i5 = 1;
   i2 = 3;
  } else {
   i10 = -1;
   i5 = i4;
   i2 = 1;
  }
  i2 = i3 + i2 | 0;
  HEAP32[i20 >> 2] = i2;
  i3 = HEAP8[i2 >> 0] | 0;
  i12 = (i3 << 24 >> 24) + -32 | 0;
  if (i12 >>> 0 > 31 | (1 << i12 & 75913 | 0) == 0) i4 = 0; else {
   i4 = 0;
   do {
    i4 = 1 << (i3 << 24 >> 24) + -32 | i4;
    i2 = i2 + 1 | 0;
    HEAP32[i20 >> 2] = i2;
    i3 = HEAP8[i2 >> 0] | 0;
    i12 = (i3 << 24 >> 24) + -32 | 0;
   } while (!(i12 >>> 0 > 31 | (1 << i12 & 75913 | 0) == 0));
  }
  if (i3 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[i2 + 1 >> 0] | 0) | 0)) i13 = 23; else {
    i3 = HEAP32[i20 >> 2] | 0;
    if ((HEAP8[i3 + 2 >> 0] | 0) == 36) {
     i2 = i3 + 1 | 0;
     HEAP32[i26 + ((HEAP8[i2 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i2 = HEAP32[i25 + ((HEAP8[i2 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i5 = 1;
     i3 = i3 + 3 | 0;
    } else i13 = 23;
   }
   if ((i13 | 0) == 23) {
    i13 = 0;
    if (i5 | 0) {
     i1 = -1;
     break;
    }
    if (i14) {
     i12 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     i2 = HEAP32[i12 >> 2] | 0;
     HEAP32[i24 >> 2] = i12 + 4;
    } else i2 = 0;
    i5 = 0;
    i3 = (HEAP32[i20 >> 2] | 0) + 1 | 0;
   }
   HEAP32[i20 >> 2] = i3;
   i11 = (i2 | 0) < 0;
   i12 = i11 ? 0 - i2 | 0 : i2;
   i4 = i11 ? i4 | 8192 : i4;
   i11 = i5;
   i2 = i3;
  } else {
   i2 = _getint(i20) | 0;
   if ((i2 | 0) < 0) {
    i1 = -1;
    break;
   }
   i12 = i2;
   i11 = i5;
   i2 = HEAP32[i20 >> 2] | 0;
  }
  do if ((HEAP8[i2 >> 0] | 0) == 46) {
   if ((HEAP8[i2 + 1 >> 0] | 0) != 42) {
    HEAP32[i20 >> 2] = i2 + 1;
    i7 = _getint(i20) | 0;
    i2 = HEAP32[i20 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[i2 + 2 >> 0] | 0) | 0) {
    i2 = HEAP32[i20 >> 2] | 0;
    if ((HEAP8[i2 + 3 >> 0] | 0) == 36) {
     i7 = i2 + 2 | 0;
     HEAP32[i26 + ((HEAP8[i7 >> 0] | 0) + -48 << 2) >> 2] = 10;
     i7 = HEAP32[i25 + ((HEAP8[i7 >> 0] | 0) + -48 << 3) >> 2] | 0;
     i2 = i2 + 4 | 0;
     HEAP32[i20 >> 2] = i2;
     break;
    }
   }
   if (i11 | 0) {
    i1 = -1;
    break L1;
   }
   if (i14) {
    i8 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i24 >> 2] = i8 + 4;
   } else i2 = 0;
   i8 = (HEAP32[i20 >> 2] | 0) + 2 | 0;
   HEAP32[i20 >> 2] = i8;
   i7 = i2;
   i2 = i8;
  } else i7 = -1; while (0);
  i8 = 0;
  while (1) {
   if (((HEAP8[i2 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i3 = i2;
   i2 = i2 + 1 | 0;
   HEAP32[i20 >> 2] = i2;
   i3 = HEAP8[(HEAP8[i3 >> 0] | 0) + -65 + (69989 + (i8 * 58 | 0)) >> 0] | 0;
   i5 = i3 & 255;
   if ((i5 + -1 | 0) >>> 0 >= 8) break; else i8 = i5;
  }
  if (!(i3 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i6 = (i10 | 0) > -1;
  do if (i3 << 24 >> 24 == 19) if (i6) {
   i1 = -1;
   break L1;
  } else i13 = 50; else {
   if (i6) {
    HEAP32[i26 + (i10 << 2) >> 2] = i5;
    i6 = i25 + (i10 << 3) | 0;
    i10 = HEAP32[i6 + 4 >> 2] | 0;
    i13 = i21;
    HEAP32[i13 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i13 + 4 >> 2] = i10;
    i13 = 50;
    break;
   }
   if (!i14) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i21, i5, i24);
   i2 = HEAP32[i20 >> 2] | 0;
  } while (0);
  if ((i13 | 0) == 50) {
   i13 = 0;
   if (!i14) {
    i2 = 0;
    i4 = i11;
    continue;
   }
  }
  i3 = HEAP8[i2 + -1 >> 0] | 0;
  i3 = (i8 | 0) != 0 & (i3 & 15 | 0) == 3 ? i3 & -33 : i3;
  i2 = i4 & -65537;
  i10 = (i4 & 8192 | 0) == 0 ? i4 : i2;
  L73 : do switch (i3 | 0) {
  case 110:
   switch ((i8 & 255) << 24 >> 24) {
   case 0:
    {
     HEAP32[HEAP32[i21 >> 2] >> 2] = i1;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   case 1:
    {
     HEAP32[HEAP32[i21 >> 2] >> 2] = i1;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   case 2:
    {
     i2 = HEAP32[i21 >> 2] | 0;
     HEAP32[i2 >> 2] = i1;
     HEAP32[i2 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   case 3:
    {
     HEAP16[HEAP32[i21 >> 2] >> 1] = i1;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   case 4:
    {
     HEAP8[HEAP32[i21 >> 2] >> 0] = i1;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   case 6:
    {
     HEAP32[HEAP32[i21 >> 2] >> 2] = i1;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   case 7:
    {
     i2 = HEAP32[i21 >> 2] | 0;
     HEAP32[i2 >> 2] = i1;
     HEAP32[i2 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   default:
    {
     i2 = 0;
     i4 = i11;
     continue L1;
    }
   }
  case 112:
   {
    i3 = 120;
    i2 = i7 >>> 0 > 8 ? i7 : 8;
    i4 = i10 | 8;
    i13 = 62;
    break;
   }
  case 88:
  case 120:
   {
    i2 = i7;
    i4 = i10;
    i13 = 62;
    break;
   }
  case 111:
   {
    i3 = i21;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i6 = _fmt_o(i2, i3, i15) | 0;
    i4 = i16 - i6 | 0;
    i8 = 0;
    i5 = 70453;
    i7 = (i10 & 8 | 0) == 0 | (i7 | 0) > (i4 | 0) ? i7 : i4 + 1 | 0;
    i4 = i10;
    i13 = 68;
    break;
   }
  case 105:
  case 100:
   {
    i3 = i21;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i3 | 0) < 0) {
     i2 = _i64Subtract(0, 0, i2 | 0, i3 | 0) | 0;
     i3 = tempRet0;
     i4 = i21;
     HEAP32[i4 >> 2] = i2;
     HEAP32[i4 + 4 >> 2] = i3;
     i4 = 1;
     i5 = 70453;
     i13 = 67;
     break L73;
    } else {
     i4 = (i10 & 2049 | 0) != 0 & 1;
     i5 = (i10 & 2048 | 0) == 0 ? ((i10 & 1 | 0) == 0 ? 70453 : 70455) : 70454;
     i13 = 67;
     break L73;
    }
   }
  case 117:
   {
    i3 = i21;
    i4 = 0;
    i5 = 70453;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i13 = 67;
    break;
   }
  case 99:
   {
    HEAP8[i17 >> 0] = HEAP32[i21 >> 2];
    i9 = i17;
    i8 = 0;
    i5 = 70453;
    i6 = i15;
    i3 = 1;
    break;
   }
  case 109:
   {
    i3 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    i13 = 72;
    break;
   }
  case 115:
   {
    i3 = HEAP32[i21 >> 2] | 0;
    i3 = i3 | 0 ? i3 : 70463;
    i13 = 72;
    break;
   }
  case 67:
   {
    HEAP32[i22 >> 2] = HEAP32[i21 >> 2];
    HEAP32[i18 >> 2] = 0;
    HEAP32[i21 >> 2] = i22;
    i7 = -1;
    i4 = i22;
    i13 = 76;
    break;
   }
  case 83:
   {
    i2 = HEAP32[i21 >> 2] | 0;
    if (!i7) {
     _pad_673(i19, 32, i12, 0, i10);
     i2 = 0;
     i13 = 85;
    } else {
     i4 = i2;
     i13 = 76;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    i2 = _fmt_fp(i19, +HEAPF64[i21 >> 3], i12, i7, i10, i3) | 0;
    i4 = i11;
    continue L1;
   }
  default:
   {
    i8 = 0;
    i5 = 70453;
    i6 = i15;
    i3 = i7;
    i2 = i10;
   }
  } while (0);
  L97 : do if ((i13 | 0) == 62) {
   i10 = i21;
   i9 = HEAP32[i10 >> 2] | 0;
   i10 = HEAP32[i10 + 4 >> 2] | 0;
   i6 = _fmt_x(i9, i10, i15, i3 & 32) | 0;
   i5 = (i4 & 8 | 0) == 0 | (i9 | 0) == 0 & (i10 | 0) == 0;
   i8 = i5 ? 0 : 2;
   i5 = i5 ? 70453 : 70453 + (i3 >> 4) | 0;
   i7 = i2;
   i2 = i9;
   i3 = i10;
   i13 = 68;
  } else if ((i13 | 0) == 67) {
   i6 = _fmt_u(i2, i3, i15) | 0;
   i8 = i4;
   i4 = i10;
   i13 = 68;
  } else if ((i13 | 0) == 72) {
   i13 = 0;
   i10 = _memchr(i3, 0, i7) | 0;
   i4 = (i10 | 0) == 0;
   i9 = i3;
   i8 = 0;
   i5 = 70453;
   i6 = i4 ? i3 + i7 | 0 : i10;
   i3 = i4 ? i7 : i10 - i3 | 0;
  } else if ((i13 | 0) == 76) {
   i13 = 0;
   i6 = i4;
   i2 = 0;
   i3 = 0;
   while (1) {
    i5 = HEAP32[i6 >> 2] | 0;
    if (!i5) break;
    i3 = _wctomb(i23, i5) | 0;
    if ((i3 | 0) < 0 | i3 >>> 0 > (i7 - i2 | 0) >>> 0) break;
    i2 = i3 + i2 | 0;
    if (i7 >>> 0 > i2 >>> 0) i6 = i6 + 4 | 0; else break;
   }
   if ((i3 | 0) < 0) {
    i1 = -1;
    break L1;
   }
   _pad_673(i19, 32, i12, i2, i10);
   if (!i2) {
    i2 = 0;
    i13 = 85;
   } else {
    i5 = 0;
    while (1) {
     i3 = HEAP32[i4 >> 2] | 0;
     if (!i3) {
      i13 = 85;
      break L97;
     }
     i3 = _wctomb(i23, i3) | 0;
     i5 = i3 + i5 | 0;
     if ((i5 | 0) > (i2 | 0)) {
      i13 = 85;
      break L97;
     }
     _out(i19, i23, i3);
     if (i5 >>> 0 >= i2 >>> 0) {
      i13 = 85;
      break;
     } else i4 = i4 + 4 | 0;
    }
   }
  } while (0);
  if ((i13 | 0) == 68) {
   i13 = 0;
   i3 = (i2 | 0) != 0 | (i3 | 0) != 0;
   i2 = (i7 | 0) != 0 | i3;
   i3 = i16 - i6 + ((i3 ^ 1) & 1) | 0;
   i9 = i2 ? i6 : i15;
   i6 = i15;
   i3 = i2 ? ((i7 | 0) > (i3 | 0) ? i7 : i3) : i7;
   i2 = (i7 | 0) > -1 ? i4 & -65537 : i4;
  } else if ((i13 | 0) == 85) {
   i13 = 0;
   _pad_673(i19, 32, i12, i2, i10 ^ 8192);
   i2 = (i12 | 0) > (i2 | 0) ? i12 : i2;
   i4 = i11;
   continue;
  }
  i7 = i6 - i9 | 0;
  i6 = (i3 | 0) < (i7 | 0) ? i7 : i3;
  i10 = i6 + i8 | 0;
  i4 = (i12 | 0) < (i10 | 0) ? i10 : i12;
  _pad_673(i19, 32, i4, i10, i2);
  _out(i19, i5, i8);
  _pad_673(i19, 48, i4, i10, i2 ^ 65536);
  _pad_673(i19, 48, i6, i7, 0);
  _out(i19, i9, i7);
  _pad_673(i19, 32, i4, i10, i2 ^ 8192);
  i2 = i4;
  i4 = i11;
 }
 L116 : do if ((i13 | 0) == 88) if (!i19) if (!i4) i1 = 0; else {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i26 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i25 + (i1 << 3) | 0, i2, i24);
   i2 = i1 + 1 | 0;
   if ((i1 | 0) < 9) i1 = i2; else {
    i1 = i2;
    break;
   }
  }
  if ((i1 | 0) < 10) while (1) {
   if (HEAP32[i26 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L116;
   }
   if ((i1 | 0) < 9) i1 = i1 + 1 | 0; else {
    i1 = 1;
    break;
   }
  } else i1 = 1;
 } while (0);
 STACKTOP = i27;
 return i1 | 0;
}

function _SDL_FillRect(i4, i1, i36) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i36 = i36 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i37 = 0, i38 = 0;
 i34 = 0;
 i38 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i38 + 16 | 0;
 i3 = i38 + 24 | 0;
 if (!i4) {
  i37 = _SDL_SetError(48302, i38) | 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i6 = i4 + 4 | 0;
 if ((HEAPU8[(HEAP32[i6 >> 2] | 0) + 8 >> 0] | 0) < 8) {
  i37 = _SDL_SetError(41206, i38 + 8 | 0) | 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i2 = i4 + 36 | 0;
 if (!i1) {
  if ((HEAP32[i4 + 44 >> 2] | 0) < 1) {
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
  if ((HEAP32[i4 + 48 >> 2] | 0) > 0) i10 = i2; else {
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 } else if (!(_SDL_IntersectRect(i1, i2, i3) | 0)) {
  i37 = 0;
  STACKTOP = i38;
  return i37 | 0;
 } else i10 = i3;
 i1 = HEAP32[i4 + 20 >> 2] | 0;
 if (!i1) {
  i37 = _SDL_SetError(41249, i5) | 0;
  STACKTOP = i38;
  return i37 | 0;
 }
 i37 = HEAP32[i4 + 16 >> 2] | 0;
 i2 = i1 + (Math_imul(i37, HEAP32[i10 + 4 >> 2] | 0) | 0) | 0;
 i8 = HEAP8[(HEAP32[i6 >> 2] | 0) + 9 >> 0] | 0;
 i2 = i2 + (Math_imul(HEAP32[i10 >> 2] | 0, i8 & 255) | 0) | 0;
 switch (i8 << 24 >> 24) {
 case 1:
  {
   i6 = i36 << 8 | i36;
   i6 = i6 << 16 | i6;
   i7 = HEAP32[i10 + 8 >> 2] | 0;
   i33 = HEAP32[i10 + 12 >> 2] | 0;
   i1 = i33 + -1 | 0;
   if (!i33) {
    i37 = 0;
    STACKTOP = i38;
    return i37 | 0;
   }
   i8 = i36 & 255;
   i5 = i7 + -1 | 0;
   if ((i7 | 0) <= 3) {
    i3 = i7 & -4;
    if (!(i7 & 3)) {
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
    switch (i7 & 3) {
    case 3:
     {
      while (1) {
       i35 = i2 + i3 | 0;
       i36 = i35 + 1 | 0;
       HEAP8[i35 >> 0] = i8;
       HEAP8[i36 >> 0] = i8;
       HEAP8[i36 + 1 >> 0] = i8;
       if (!i1) {
        i35 = 0;
        break;
       } else {
        i2 = i2 + i37 | 0;
        i1 = i1 + -1 | 0;
       }
      }
      STACKTOP = i38;
      return i35 | 0;
     }
    case 2:
     {
      while (1) {
       i36 = i2 + i3 | 0;
       HEAP8[i36 >> 0] = i8;
       HEAP8[i36 + 1 >> 0] = i8;
       if (!i1) {
        i35 = 0;
        break;
       } else {
        i2 = i2 + i37 | 0;
        i1 = i1 + -1 | 0;
       }
      }
      STACKTOP = i38;
      return i35 | 0;
     }
    case 1:
     {
      while (1) {
       HEAP8[i2 + i3 >> 0] = i8;
       if (!i1) {
        i35 = 0;
        break;
       } else {
        i2 = i2 + i37 | 0;
        i1 = i1 + -1 | 0;
       }
      }
      STACKTOP = i38;
      return i35 | 0;
     }
    default:
     {
      i37 = 0;
      STACKTOP = i38;
      return i37 | 0;
     }
    }
   }
   L43 : while (1) {
    switch (i2 & 3) {
    case 1:
     {
      HEAP8[i2 >> 0] = i8;
      i11 = i2 + 1 | 0;
      i13 = i5;
      i34 = 21;
      break;
     }
    case 2:
     {
      i11 = i2;
      i13 = i7;
      i34 = 21;
      break;
     }
    case 3:
     {
      i15 = i2;
      i17 = i7;
      i34 = 22;
      break;
     }
    default:
     {
      i19 = i2;
      i21 = i7;
     }
    }
    if ((i34 | 0) == 21) {
     HEAP8[i11 >> 0] = i8;
     i15 = i11 + 1 | 0;
     i17 = i13 + -1 | 0;
     i34 = 22;
    }
    if ((i34 | 0) == 22) {
     i34 = 0;
     HEAP8[i15 >> 0] = i8;
     i19 = i15 + 1 | 0;
     i21 = i17 + -1 | 0;
    }
    i3 = i21 >> 2;
    i4 = (i3 + 3 | 0) >>> 2;
    if (i3 | 0) {
     switch (i3 & 3) {
     case 0:
      {
       i9 = i4;
       i12 = i19;
       i34 = 25;
       break;
      }
     case 3:
      {
       i14 = i4;
       i16 = i19;
       i34 = 26;
       break;
      }
     case 2:
      {
       i18 = i4;
       i20 = i19;
       i34 = 27;
       break;
      }
     case 1:
      {
       i22 = i4;
       i23 = i19;
       i34 = 28;
       break;
      }
     default:
      {
       i34 = 35;
       break L43;
      }
     }
     while (1) if ((i34 | 0) == 25) {
      HEAP32[i12 >> 2] = i6;
      i14 = i9;
      i16 = i12 + 4 | 0;
      i34 = 26;
      continue;
     } else if ((i34 | 0) == 26) {
      HEAP32[i16 >> 2] = i6;
      i18 = i14;
      i20 = i16 + 4 | 0;
      i34 = 27;
      continue;
     } else if ((i34 | 0) == 27) {
      HEAP32[i20 >> 2] = i6;
      i22 = i18;
      i23 = i20 + 4 | 0;
      i34 = 28;
      continue;
     } else if ((i34 | 0) == 28) {
      i34 = 0;
      HEAP32[i23 >> 2] = i6;
      i3 = i22 + -1 | 0;
      if (!i3) break; else {
       i9 = i3;
       i12 = i23 + 4 | 0;
       i34 = 25;
       continue;
      }
     }
    }
    L61 : do if (i21 & 3 | 0) {
     i3 = i19 + (i21 & -4) | 0;
     switch (i21 & 3) {
     case 3:
      {
       HEAP8[i3 >> 0] = i8;
       i24 = i3 + 1 | 0;
       i34 = 32;
       break;
      }
     case 2:
      {
       i24 = i3;
       i34 = 32;
       break;
      }
     case 1:
      {
       i25 = i3;
       break;
      }
     default:
      break L61;
     }
     if ((i34 | 0) == 32) {
      i34 = 0;
      HEAP8[i24 >> 0] = i8;
      i25 = i24 + 1 | 0;
     }
     HEAP8[i25 >> 0] = i8;
    } while (0);
    if (!i1) {
     i35 = 0;
     i34 = 75;
     break;
    } else {
     i2 = i2 + i37 | 0;
     i1 = i1 + -1 | 0;
    }
   }
   if ((i34 | 0) != 35) if ((i34 | 0) == 75) {
    STACKTOP = i38;
    return i35 | 0;
   }
   break;
  }
 case 2:
  {
   i8 = i36 << 16 | i36;
   i9 = HEAP32[i10 + 8 >> 2] | 0;
   i34 = HEAP32[i10 + 12 >> 2] | 0;
   i1 = i34 + -1 | 0;
   if (!i34) {
    i37 = 0;
    STACKTOP = i38;
    return i37 | 0;
   }
   i11 = i9 + -1 | 0;
   i10 = i36 & 65535;
   if ((i9 | 0) <= 1) {
    if (!(i9 & 1)) {
     i37 = 0;
     STACKTOP = i38;
     return i37 | 0;
    }
    while (1) {
     HEAP16[i2 + (i11 << 1) >> 1] = i10;
     if (!i1) {
      i35 = 0;
      break;
     } else {
      i2 = i2 + i37 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    STACKTOP = i38;
    return i35 | 0;
   }
   L83 : while (1) {
    i3 = i2 + 2 | 0;
    if (!(i2 & 2)) {
     i6 = i2;
     i7 = i9;
     i5 = i2;
    } else {
     HEAP16[i2 >> 1] = i10;
     i6 = i3;
     i7 = i11;
     i5 = i3;
    }
    i3 = i7 >> 1;
    i4 = (i3 + 3 | 0) >>> 2;
    if (i3 | 0) {
     switch (i3 & 3) {
     case 0:
      {
       i26 = i4;
       i27 = i5;
       i34 = 43;
       break;
      }
     case 3:
      {
       i28 = i4;
       i29 = i5;
       i34 = 44;
       break;
      }
     case 2:
      {
       i30 = i4;
       i31 = i5;
       i34 = 45;
       break;
      }
     case 1:
      {
       i32 = i4;
       i33 = i5;
       i34 = 46;
       break;
      }
     default:
      {
       i34 = 50;
       break L83;
      }
     }
     while (1) if ((i34 | 0) == 43) {
      HEAP32[i27 >> 2] = i8;
      i28 = i26;
      i29 = i27 + 4 | 0;
      i34 = 44;
      continue;
     } else if ((i34 | 0) == 44) {
      HEAP32[i29 >> 2] = i8;
      i30 = i28;
      i31 = i29 + 4 | 0;
      i34 = 45;
      continue;
     } else if ((i34 | 0) == 45) {
      HEAP32[i31 >> 2] = i8;
      i32 = i30;
      i33 = i31 + 4 | 0;
      i34 = 46;
      continue;
     } else if ((i34 | 0) == 46) {
      HEAP32[i33 >> 2] = i8;
      i3 = i32 + -1 | 0;
      if (!i3) break; else {
       i26 = i3;
       i27 = i33 + 4 | 0;
       i34 = 43;
       continue;
      }
     }
    }
    if (i7 & 1 | 0) HEAP16[i6 + (i7 + -1 << 1) >> 1] = i10;
    if (!i1) {
     i35 = 0;
     i34 = 75;
     break;
    } else {
     i2 = i2 + i37 | 0;
     i1 = i1 + -1 | 0;
    }
   }
   if ((i34 | 0) != 50) if ((i34 | 0) == 75) {
    STACKTOP = i38;
    return i35 | 0;
   }
   break;
  }
 case 3:
  {
   i8 = HEAP32[i10 + 8 >> 2] | 0;
   i4 = HEAP32[i10 + 12 >> 2] | 0;
   i6 = i36 & 255;
   i7 = i36 >>> 8 & 255;
   i5 = i36 >>> 16 & 255;
   if ((i8 | 0) == 0 | (i4 | 0) == 0) {
    i37 = 0;
    STACKTOP = i38;
    return i37 | 0;
   }
   while (1) {
    i1 = i8;
    i3 = i2;
    while (1) {
     i1 = i1 + -1 | 0;
     HEAP8[i3 >> 0] = i6;
     HEAP8[i3 + 1 >> 0] = i7;
     HEAP8[i3 + 2 >> 0] = i5;
     if (!i1) break; else i3 = i3 + 3 | 0;
    }
    i4 = i4 + -1 | 0;
    if (!i4) {
     i35 = 0;
     break;
    } else i2 = i2 + i37 | 0;
   }
   STACKTOP = i38;
   return i35 | 0;
  }
 case 4:
  {
   i3 = HEAP32[i10 + 8 >> 2] | 0;
   i1 = HEAP32[i10 + 12 >> 2] | 0;
   if (!i1) {
    i37 = 0;
    STACKTOP = i38;
    return i37 | 0;
   }
   i5 = (i3 + 3 | 0) >>> 2;
   if (!i3) {
    i37 = 0;
    STACKTOP = i38;
    return i37 | 0;
   }
   switch (i3 & 3) {
   case 0:
    {
     while (1) {
      i3 = i5;
      i4 = i2;
      while (1) {
       HEAP32[i4 >> 2] = i36;
       HEAP32[i4 + 4 >> 2] = i36;
       HEAP32[i4 + 8 >> 2] = i36;
       HEAP32[i4 + 12 >> 2] = i36;
       i3 = i3 + -1 | 0;
       if (!i3) break; else i4 = i4 + 16 | 0;
      }
      i1 = i1 + -1 | 0;
      if (!i1) {
       i35 = 0;
       break;
      } else i2 = i2 + i37 | 0;
     }
     STACKTOP = i38;
     return i35 | 0;
    }
   case 3:
    {
     i5 = i5 + -1 | 0;
     if (!i5) {
      while (1) {
       HEAP32[i2 >> 2] = i36;
       HEAP32[i2 + 4 >> 2] = i36;
       HEAP32[i2 + 8 >> 2] = i36;
       i1 = i1 + -1 | 0;
       if (!i1) {
        i35 = 0;
        break;
       } else i2 = i2 + i37 | 0;
      }
      STACKTOP = i38;
      return i35 | 0;
     }
     while (1) {
      HEAP32[i2 >> 2] = i36;
      HEAP32[i2 + 4 >> 2] = i36;
      HEAP32[i2 + 8 >> 2] = i36;
      i3 = i2;
      i4 = i5;
      do {
       i35 = i3;
       i3 = i3 + 16 | 0;
       HEAP32[i35 + 12 >> 2] = i36;
       HEAP32[i3 >> 2] = i36;
       HEAP32[i35 + 20 >> 2] = i36;
       HEAP32[i35 + 24 >> 2] = i36;
       i4 = i4 + -1 | 0;
      } while ((i4 | 0) != 0);
      i1 = i1 + -1 | 0;
      if (!i1) {
       i35 = 0;
       break;
      } else i2 = i2 + i37 | 0;
     }
     STACKTOP = i38;
     return i35 | 0;
    }
   case 1:
    {
     i5 = i5 + -1 | 0;
     i6 = (i5 | 0) == 0;
     while (1) {
      HEAP32[i2 >> 2] = i36;
      if (!i6) {
       i3 = i2;
       i4 = i5;
       do {
        HEAP32[i3 + 4 >> 2] = i36;
        HEAP32[i3 + 8 >> 2] = i36;
        HEAP32[i3 + 12 >> 2] = i36;
        i3 = i3 + 16 | 0;
        HEAP32[i3 >> 2] = i36;
        i4 = i4 + -1 | 0;
       } while ((i4 | 0) != 0);
      }
      i1 = i1 + -1 | 0;
      if (!i1) {
       i35 = 0;
       break;
      } else i2 = i2 + i37 | 0;
     }
     STACKTOP = i38;
     return i35 | 0;
    }
   default:
    {
     i5 = i5 + -1 | 0;
     i6 = (i5 | 0) == 0;
     while (1) {
      HEAP32[i2 >> 2] = i36;
      HEAP32[i2 + 4 >> 2] = i36;
      if (!i6) {
       i3 = i2;
       i4 = i5;
       do {
        HEAP32[i3 + 8 >> 2] = i36;
        i35 = i3;
        i3 = i3 + 16 | 0;
        HEAP32[i35 + 12 >> 2] = i36;
        HEAP32[i3 >> 2] = i36;
        HEAP32[i35 + 20 >> 2] = i36;
        i4 = i4 + -1 | 0;
       } while ((i4 | 0) != 0);
      }
      i1 = i1 + -1 | 0;
      if (!i1) {
       i35 = 0;
       break;
      } else i2 = i2 + i37 | 0;
     }
     STACKTOP = i38;
     return i35 | 0;
    }
   }
  }
 default:
  {
   i37 = 0;
   STACKTOP = i38;
   return i37 | 0;
  }
 }
 return 0;
}

function _BlitNto1SurfaceAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i27 = HEAP32[i3 + 16 >> 2] | 0;
 i28 = HEAP32[i3 + 36 >> 2] | 0;
 i22 = HEAP32[i3 + 48 >> 2] | 0;
 i2 = HEAP32[i3 + 40 >> 2] | 0;
 i23 = HEAP8[i2 + 9 >> 0] | 0;
 i24 = i23 & 255;
 i25 = HEAPU8[i3 + 63 >> 0] | 0;
 if (!i4) return;
 i26 = (i1 + 3 | 0) / 4 | 0;
 i21 = i1 & 255;
 i11 = (HEAP32[i3 + 44 >> 2] | 0) + 4 | 0;
 i12 = (i22 | 0) == 0;
 i13 = i2 + 28 | 0;
 i14 = i2 + 12 | 0;
 i15 = i2 + 32 | 0;
 i16 = i2 + 29 | 0;
 i17 = i2 + 16 | 0;
 i18 = i2 + 33 | 0;
 i19 = i2 + 30 | 0;
 i20 = i2 + 20 | 0;
 i10 = i2 + 34 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 L4 : while (1) {
  i4 = i4 + -1 | 0;
  switch (i21 & 3) {
  case 0:
   {
    i8 = i26;
    i7 = i1;
    i9 = 4;
    break;
   }
  case 3:
   {
    i8 = i26;
    i7 = i1;
    i9 = 14;
    break;
   }
  case 2:
   {
    i8 = i26;
    i7 = i1;
    i9 = 24;
    break;
   }
  case 1:
   {
    i8 = i26;
    i7 = i1;
    i9 = 34;
    break;
   }
  default:
   {
    i9 = 44;
    break L4;
   }
  }
  while (1) if ((i9 | 0) == 4) {
   i9 = 0;
   switch (i23 << 24 >> 24) {
   case 1:
    {
     i1 = HEAPU8[i7 >> 0] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 9;
     break;
    }
   case 2:
    {
     i1 = HEAPU16[i7 >> 1] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 9;
     break;
    }
   case 3:
    {
     i3 = i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = i7 + ((HEAPU8[i10 >> 0] | 0) >>> 3 & 255) | 0;
     i9 = 9;
     break;
    }
   case 4:
    {
     i1 = HEAP32[i7 >> 2] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 9;
     break;
    }
   default:
    {
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i9 | 0) == 9) {
    i5 = HEAP8[i1 >> 0] | 0;
    i3 = HEAP8[i3 >> 0] | 0;
    i1 = HEAP8[i6 >> 0] | 0;
   }
   i6 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i9 = HEAPU8[i2 >> 0] | 0;
   i9 = i6 + (i9 << 2) | 0;
   i6 = HEAPU8[i9 >> 0] | 0;
   i29 = HEAPU8[i9 + 1 >> 0] | 0;
   i9 = HEAPU8[i9 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i29 | 0, i25) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 3 & 28 | (((Math_imul((i1 & 255) - i6 | 0, i25) | 0) >>> 0) / 255 | 0) + i6 & 224 | ((((Math_imul((i5 & 255) - i9 | 0, i25) | 0) >>> 0) / 255 | 0) + i9 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i22 + i1 >> 0] | 0;
   HEAP8[i2 >> 0] = i1;
   i7 = i7 + i24 | 0;
   i2 = i2 + 1 | 0;
   i9 = 14;
   continue;
  } else if ((i9 | 0) == 14) {
   i9 = 0;
   switch (i23 << 24 >> 24) {
   case 1:
    {
     i1 = HEAPU8[i7 >> 0] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 19;
     break;
    }
   case 2:
    {
     i1 = HEAPU16[i7 >> 1] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 19;
     break;
    }
   case 3:
    {
     i3 = i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = i7 + ((HEAPU8[i10 >> 0] | 0) >>> 3 & 255) | 0;
     i9 = 19;
     break;
    }
   case 4:
    {
     i1 = HEAP32[i7 >> 2] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 19;
     break;
    }
   default:
    {
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i9 | 0) == 19) {
    i5 = HEAP8[i1 >> 0] | 0;
    i3 = HEAP8[i3 >> 0] | 0;
    i1 = HEAP8[i6 >> 0] | 0;
   }
   i9 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i29 = HEAPU8[i2 >> 0] | 0;
   i29 = i9 + (i29 << 2) | 0;
   i9 = HEAPU8[i29 >> 0] | 0;
   i6 = HEAPU8[i29 + 1 >> 0] | 0;
   i29 = HEAPU8[i29 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i6 | 0, i25) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i1 & 255) - i9 | 0, i25) | 0) >>> 0) / 255 | 0) + i9 & 224 | ((((Math_imul((i5 & 255) - i29 | 0, i25) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i22 + i1 >> 0] | 0;
   HEAP8[i2 >> 0] = i1;
   i7 = i7 + i24 | 0;
   i2 = i2 + 1 | 0;
   i9 = 24;
   continue;
  } else if ((i9 | 0) == 24) {
   i9 = 0;
   switch (i23 << 24 >> 24) {
   case 1:
    {
     i1 = HEAPU8[i7 >> 0] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 29;
     break;
    }
   case 2:
    {
     i1 = HEAPU16[i7 >> 1] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 29;
     break;
    }
   case 3:
    {
     i3 = i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = i7 + ((HEAPU8[i10 >> 0] | 0) >>> 3 & 255) | 0;
     i9 = 29;
     break;
    }
   case 4:
    {
     i1 = HEAP32[i7 >> 2] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 29;
     break;
    }
   default:
    {
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i9 | 0) == 29) {
    i5 = HEAP8[i1 >> 0] | 0;
    i3 = HEAP8[i3 >> 0] | 0;
    i1 = HEAP8[i6 >> 0] | 0;
   }
   i9 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i29 = HEAPU8[i2 >> 0] | 0;
   i29 = i9 + (i29 << 2) | 0;
   i9 = HEAPU8[i29 >> 0] | 0;
   i6 = HEAPU8[i29 + 1 >> 0] | 0;
   i29 = HEAPU8[i29 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i6 | 0, i25) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i1 & 255) - i9 | 0, i25) | 0) >>> 0) / 255 | 0) + i9 & 224 | ((((Math_imul((i5 & 255) - i29 | 0, i25) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i22 + i1 >> 0] | 0;
   HEAP8[i2 >> 0] = i1;
   i7 = i7 + i24 | 0;
   i2 = i2 + 1 | 0;
   i9 = 34;
   continue;
  } else if ((i9 | 0) == 34) {
   i9 = 0;
   switch (i23 << 24 >> 24) {
   case 1:
    {
     i1 = HEAPU8[i7 >> 0] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 39;
     break;
    }
   case 2:
    {
     i1 = HEAPU16[i7 >> 1] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 39;
     break;
    }
   case 3:
    {
     i3 = i7 + ((HEAPU8[i18 >> 0] | 0) >>> 3 & 255) | 0;
     i6 = i7 + ((HEAPU8[i15 >> 0] | 0) >>> 3 & 255) | 0;
     i1 = i7 + ((HEAPU8[i10 >> 0] | 0) >>> 3 & 255) | 0;
     i9 = 39;
     break;
    }
   case 4:
    {
     i1 = HEAP32[i7 >> 2] | 0;
     i3 = (HEAP32[5724 + (HEAPU8[i16 >> 0] << 2) >> 2] | 0) + ((HEAP32[i17 >> 2] & i1) >>> (HEAPU8[i18 >> 0] | 0)) | 0;
     i6 = (HEAP32[5724 + (HEAPU8[i13 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i1) >>> (HEAPU8[i15 >> 0] | 0)) | 0;
     i1 = (HEAP32[5724 + (HEAPU8[i19 >> 0] << 2) >> 2] | 0) + ((HEAP32[i20 >> 2] & i1) >>> (HEAPU8[i10 >> 0] | 0)) | 0;
     i9 = 39;
     break;
    }
   default:
    {
     i5 = 0;
     i3 = 0;
     i1 = 0;
    }
   }
   if ((i9 | 0) == 39) {
    i5 = HEAP8[i1 >> 0] | 0;
    i3 = HEAP8[i3 >> 0] | 0;
    i1 = HEAP8[i6 >> 0] | 0;
   }
   i9 = HEAP32[(HEAP32[i11 >> 2] | 0) + 4 >> 2] | 0;
   i29 = HEAPU8[i2 >> 0] | 0;
   i29 = i9 + (i29 << 2) | 0;
   i9 = HEAPU8[i29 >> 0] | 0;
   i6 = HEAPU8[i29 + 1 >> 0] | 0;
   i29 = HEAPU8[i29 + 2 >> 0] | 0;
   i1 = ((((Math_imul((i3 & 255) - i6 | 0, i25) | 0) >>> 0) / 255 | 0) + i6 | 0) >>> 3 & 28 | (((Math_imul((i1 & 255) - i9 | 0, i25) | 0) >>> 0) / 255 | 0) + i9 & 224 | ((((Math_imul((i5 & 255) - i29 | 0, i25) | 0) >>> 0) / 255 | 0) + i29 | 0) >>> 6 & 3;
   if (i12) i1 = i1 & 255; else i1 = HEAP8[i22 + i1 >> 0] | 0;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
   i1 = i7 + i24 | 0;
   if ((i8 | 0) > 1) {
    i8 = i8 + -1 | 0;
    i7 = i1;
    i9 = 4;
    continue;
   } else break;
  }
  if (!i4) {
   i9 = 46;
   break;
  } else {
   i1 = i1 + i27 | 0;
   i2 = i2 + i28 | 0;
  }
 }
 if ((i9 | 0) != 44) if ((i9 | 0) == 46) return;
}

function _SDL_BlendFillRect_RGB888(i34, i36, i2, i4, i35, i37, i1) {
 i34 = i34 | 0;
 i36 = i36 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i35 = i35 | 0;
 i37 = i37 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i10 = ~i1 & 255;
 switch (i2 | 0) {
 case 1:
  {
   i1 = HEAP32[i36 + 8 >> 2] | 0;
   i2 = HEAP32[i36 + 12 >> 2] | 0;
   i3 = (HEAP32[i34 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i34 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i3 - i1 | 0;
   if (!i2) return 0;
   i9 = (i1 + 3 | 0) / 4 | 0;
   i7 = i1 & 255;
   i6 = i4 & 255;
   i5 = i35 & 255;
   i4 = i37 & 255;
   i1 = (HEAP32[i34 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i36 + 4 >> 2] | 0, i3) | 0) << 2) + (HEAP32[i36 >> 2] << 2) | 0;
   L41 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i7 & 3) {
    case 0:
     {
      i11 = i9;
      i13 = i1;
      i1 = 5;
      break;
     }
    case 3:
     {
      i14 = i9;
      i19 = i1;
      i1 = 6;
      break;
     }
    case 2:
     {
      i20 = i9;
      i25 = i1;
      i1 = 7;
      break;
     }
    case 1:
     {
      i26 = i9;
      i31 = i1;
      i1 = 8;
      break;
     }
    default:
     {
      i1 = 9;
      break L41;
     }
    }
    while (1) if ((i1 | 0) == 5) {
     i14 = HEAP32[i13 >> 2] | 0;
     HEAP32[i13 >> 2] = (((Math_imul(i14 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i14 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i14 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16;
     i14 = i11;
     i19 = i13 + 4 | 0;
     i1 = 6;
     continue;
    } else if ((i1 | 0) == 6) {
     i20 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = (((Math_imul(i20 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i20 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i20 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16;
     i20 = i14;
     i25 = i19 + 4 | 0;
     i1 = 7;
     continue;
    } else if ((i1 | 0) == 7) {
     i26 = HEAP32[i25 >> 2] | 0;
     HEAP32[i25 >> 2] = (((Math_imul(i26 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i26 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i26 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16;
     i26 = i20;
     i31 = i25 + 4 | 0;
     i1 = 8;
     continue;
    } else if ((i1 | 0) == 8) {
     i1 = HEAP32[i31 >> 2] | 0;
     HEAP32[i31 >> 2] = (((Math_imul(i1 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + i5 << 8 | (((Math_imul(i1 & 255, i10) | 0) >>> 0) / 255 | 0) + i4 | (((Math_imul(i1 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + i6 << 16;
     i1 = i31 + 4 | 0;
     if ((i26 | 0) > 1) {
      i11 = i26 + -1 | 0;
      i13 = i1;
      i1 = 5;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 2) | 0;
   }
   if ((i1 | 0) != 9) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 2:
  {
   i3 = HEAP32[i36 + 8 >> 2] | 0;
   i2 = HEAP32[i36 + 12 >> 2] | 0;
   i1 = (HEAP32[i34 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i34 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i34 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i36 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i35 & 255;
   i3 = i37 & 255;
   i1 = i1 + (HEAP32[i36 >> 2] << 2) | 0;
   L57 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i9 = i7;
      i15 = i1;
      i1 = 14;
      break;
     }
    case 3:
     {
      i16 = i7;
      i21 = i1;
      i1 = 15;
      break;
     }
    case 2:
     {
      i22 = i7;
      i27 = i1;
      i1 = 16;
      break;
     }
    case 1:
     {
      i28 = i7;
      i32 = i1;
      i1 = 17;
      break;
     }
    default:
     {
      i1 = 18;
      break L57;
     }
    }
    while (1) if ((i1 | 0) == 14) {
     i21 = HEAP32[i15 >> 2] | 0;
     i16 = (i21 >>> 16 & 255) + i5 | 0;
     i1 = (i21 >>> 8 & 255) + i4 | 0;
     i21 = (i21 & 255) + i3 | 0;
     HEAP32[i15 >> 2] = (i1 >>> 0 < 255 ? i1 : 255) << 8 | (i21 >>> 0 < 255 ? i21 : 255) | (i16 >>> 0 < 255 ? i16 : 255) << 16;
     i16 = i9;
     i21 = i15 + 4 | 0;
     i1 = 15;
     continue;
    } else if ((i1 | 0) == 15) {
     i27 = HEAP32[i21 >> 2] | 0;
     i22 = (i27 >>> 16 & 255) + i5 | 0;
     i1 = (i27 >>> 8 & 255) + i4 | 0;
     i27 = (i27 & 255) + i3 | 0;
     HEAP32[i21 >> 2] = (i1 >>> 0 < 255 ? i1 : 255) << 8 | (i27 >>> 0 < 255 ? i27 : 255) | (i22 >>> 0 < 255 ? i22 : 255) << 16;
     i22 = i16;
     i27 = i21 + 4 | 0;
     i1 = 16;
     continue;
    } else if ((i1 | 0) == 16) {
     i32 = HEAP32[i27 >> 2] | 0;
     i28 = (i32 >>> 16 & 255) + i5 | 0;
     i1 = (i32 >>> 8 & 255) + i4 | 0;
     i32 = (i32 & 255) + i3 | 0;
     HEAP32[i27 >> 2] = (i1 >>> 0 < 255 ? i1 : 255) << 8 | (i32 >>> 0 < 255 ? i32 : 255) | (i28 >>> 0 < 255 ? i28 : 255) << 16;
     i28 = i22;
     i32 = i27 + 4 | 0;
     i1 = 17;
     continue;
    } else if ((i1 | 0) == 17) {
     i37 = HEAP32[i32 >> 2] | 0;
     i1 = (i37 >>> 16 & 255) + i5 | 0;
     i36 = (i37 >>> 8 & 255) + i4 | 0;
     i37 = (i37 & 255) + i3 | 0;
     HEAP32[i32 >> 2] = (i36 >>> 0 < 255 ? i36 : 255) << 8 | (i37 >>> 0 < 255 ? i37 : 255) | (i1 >>> 0 < 255 ? i1 : 255) << 16;
     i1 = i32 + 4 | 0;
     if ((i28 | 0) > 1) {
      i9 = i28 + -1 | 0;
      i15 = i1;
      i1 = 14;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 2) | 0;
   }
   if ((i1 | 0) != 18) if ((i1 | 0) == 46) return 0;
   break;
  }
 case 4:
  {
   i3 = HEAP32[i36 + 8 >> 2] | 0;
   i2 = HEAP32[i36 + 12 >> 2] | 0;
   i1 = (HEAP32[i34 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i34 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i3 | 0;
   if (!i2) return 0;
   i1 = (HEAP32[i34 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i36 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i7 = (i3 + 3 | 0) / 4 | 0;
   i6 = i3 & 255;
   i5 = i4 & 255;
   i4 = i35 & 255;
   i3 = i37 & 255;
   i1 = i1 + (HEAP32[i36 >> 2] << 2) | 0;
   L73 : while (1) {
    i2 = i2 + -1 | 0;
    switch (i6 & 3) {
    case 0:
     {
      i12 = i7;
      i17 = i1;
      i1 = 23;
      break;
     }
    case 3:
     {
      i18 = i7;
      i23 = i1;
      i1 = 24;
      break;
     }
    case 2:
     {
      i24 = i7;
      i29 = i1;
      i1 = 25;
      break;
     }
    case 1:
     {
      i30 = i7;
      i33 = i1;
      i1 = 26;
      break;
     }
    default:
     {
      i1 = 27;
      break L73;
     }
    }
    while (1) if ((i1 | 0) == 23) {
     i18 = HEAP32[i17 >> 2] | 0;
     HEAP32[i17 >> 2] = (((Math_imul(i18 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i18 & 255, i3) | 0) >>> 0) / 255 | 0) | (((Math_imul(i18 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16;
     i18 = i12;
     i23 = i17 + 4 | 0;
     i1 = 24;
     continue;
    } else if ((i1 | 0) == 24) {
     i24 = HEAP32[i23 >> 2] | 0;
     HEAP32[i23 >> 2] = (((Math_imul(i24 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i24 & 255, i3) | 0) >>> 0) / 255 | 0) | (((Math_imul(i24 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16;
     i24 = i18;
     i29 = i23 + 4 | 0;
     i1 = 25;
     continue;
    } else if ((i1 | 0) == 25) {
     i30 = HEAP32[i29 >> 2] | 0;
     HEAP32[i29 >> 2] = (((Math_imul(i30 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i30 & 255, i3) | 0) >>> 0) / 255 | 0) | (((Math_imul(i30 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16;
     i30 = i24;
     i33 = i29 + 4 | 0;
     i1 = 26;
     continue;
    } else if ((i1 | 0) == 26) {
     i1 = HEAP32[i33 >> 2] | 0;
     HEAP32[i33 >> 2] = (((Math_imul(i1 >>> 8 & 255, i4) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i1 & 255, i3) | 0) >>> 0) / 255 | 0) | (((Math_imul(i1 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0) << 16;
     i1 = i33 + 4 | 0;
     if ((i30 | 0) > 1) {
      i12 = i30 + -1 | 0;
      i17 = i1;
      i1 = 23;
      continue;
     } else break;
    }
    if (!i2) {
     i1 = 46;
     break;
    } else i1 = i1 + (i8 << 2) | 0;
   }
   if ((i1 | 0) != 27) if ((i1 | 0) == 46) return 0;
   break;
  }
 default:
  {
   i2 = HEAP32[i36 + 8 >> 2] | 0;
   i33 = HEAP32[i36 + 12 >> 2] | 0;
   i1 = (HEAP32[i34 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i34 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
   i8 = i1 - i2 | 0;
   i1 = (HEAP32[i34 + 20 >> 2] | 0) + ((Math_imul(HEAP32[i36 + 4 >> 2] | 0, i1) | 0) << 2) | 0;
   i1 = i1 + (HEAP32[i36 >> 2] << 2) | 0;
   i3 = i33 + -1 | 0;
   if (!i33) return 0;
   i7 = (i2 + 3 | 0) / 4 | 0;
   i6 = (i35 & 255) << 8 | (i4 & 255) << 16 | i37 & 255;
   switch (i2 & 3) {
   case 0:
    {
     while (1) {
      i2 = i7;
      while (1) {
       HEAP32[i1 >> 2] = i6;
       HEAP32[i1 + 4 >> 2] = i6;
       HEAP32[i1 + 8 >> 2] = i6;
       HEAP32[i1 + 12 >> 2] = i6;
       i1 = i1 + 16 | 0;
       if ((i2 | 0) <= 1) break; else i2 = i2 + -1 | 0;
      }
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 3:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP32[i1 >> 2] = i6;
      HEAP32[i1 + 4 >> 2] = i6;
      HEAP32[i1 + 8 >> 2] = i6;
      i2 = i1 + 12 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP32[i2 >> 2] = i6;
        i2 = i1;
        i1 = i1 + 16 | 0;
        HEAP32[i1 >> 2] = i6;
        HEAP32[i2 + 20 >> 2] = i6;
        HEAP32[i2 + 24 >> 2] = i6;
        i2 = i2 + 28 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   case 2:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP32[i1 >> 2] = i6;
      HEAP32[i1 + 4 >> 2] = i6;
      i2 = i1 + 8 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP32[i2 >> 2] = i6;
        HEAP32[i1 + 12 >> 2] = i6;
        i2 = i1;
        i1 = i1 + 16 | 0;
        HEAP32[i1 >> 2] = i6;
        HEAP32[i2 + 20 >> 2] = i6;
        i2 = i2 + 24 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   default:
    {
     i5 = (i2 | 0) > 4;
     while (1) {
      HEAP32[i1 >> 2] = i6;
      i2 = i1 + 4 | 0;
      if (i5) {
       i4 = i7;
       while (1) {
        HEAP32[i2 >> 2] = i6;
        HEAP32[i1 + 8 >> 2] = i6;
        HEAP32[i1 + 12 >> 2] = i6;
        i2 = i1;
        i1 = i1 + 16 | 0;
        HEAP32[i1 >> 2] = i6;
        i2 = i2 + 20 | 0;
        if ((i4 | 0) <= 2) {
         i1 = i2;
         break;
        } else i4 = i4 + -1 | 0;
       }
      } else i1 = i2;
      if (!i3) break; else {
       i1 = i1 + (i8 << 2) | 0;
       i3 = i3 + -1 | 0;
      }
     }
     return 0;
    }
   }
  }
 }
 return 0;
}

function _fmt_fp(i25, d4, i27, i11, i26, i18) {
 i25 = i25 | 0;
 d4 = +d4;
 i27 = i27 | 0;
 i11 = i11 | 0;
 i26 = i26 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i28 = 0;
 i12 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 i3 = i28 + 8 | 0;
 i13 = i28;
 i24 = i28 + 524 | 0;
 i23 = i24;
 i5 = i28 + 512 | 0;
 HEAP32[i13 >> 2] = 0;
 i22 = i5 + 12 | 0;
 ___DOUBLE_BITS_674(d4) | 0;
 if ((tempRet0 | 0) < 0) {
  d4 = -d4;
  i20 = 1;
  i19 = 70470;
 } else {
  i20 = (i26 & 2049 | 0) != 0 & 1;
  i19 = (i26 & 2048 | 0) == 0 ? ((i26 & 1 | 0) == 0 ? 70471 : 70476) : 70473;
 }
 ___DOUBLE_BITS_674(d4) | 0;
 do if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
  i24 = (i18 & 32 | 0) != 0;
  i1 = i20 + 3 | 0;
  _pad_673(i25, 32, i27, i1, i26 & -65537);
  _out(i25, i19, i20);
  _out(i25, d4 != d4 | 0.0 != 0.0 ? (i24 ? 72420 : 70497) : i24 ? 70489 : 70493, 3);
  _pad_673(i25, 32, i27, i1, i26 ^ 8192);
 } else {
  d4 = +_frexpl(d4, i13) * 2.0;
  i1 = d4 != 0.0;
  if (i1) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + -1;
  i15 = i18 | 32;
  if ((i15 | 0) == 97) {
   i8 = i18 & 32;
   i10 = (i8 | 0) == 0 ? i19 : i19 + 9 | 0;
   i9 = i20 | 2;
   i1 = 12 - i11 | 0;
   do if (!(i11 >>> 0 > 11 | (i1 | 0) == 0)) {
    d6 = 8.0;
    do {
     i1 = i1 + -1 | 0;
     d6 = d6 * 16.0;
    } while ((i1 | 0) != 0);
    if ((HEAP8[i10 >> 0] | 0) == 45) {
     d4 = -(d6 + (-d4 - d6));
     break;
    } else {
     d4 = d4 + d6 - d6;
     break;
    }
   } while (0);
   i2 = HEAP32[i13 >> 2] | 0;
   i1 = (i2 | 0) < 0 ? 0 - i2 | 0 : i2;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   if ((i1 | 0) == (i22 | 0)) {
    i1 = i5 + 11 | 0;
    HEAP8[i1 >> 0] = 48;
   }
   HEAP8[i1 + -1 >> 0] = (i2 >> 31 & 2) + 43;
   i7 = i1 + -2 | 0;
   HEAP8[i7 >> 0] = i18 + 15;
   i3 = (i11 | 0) < 1;
   i5 = (i26 & 8 | 0) == 0;
   i1 = i24;
   do {
    i21 = ~~d4;
    i2 = i1 + 1 | 0;
    HEAP8[i1 >> 0] = i8 | HEAPU8[70501 + i21 >> 0];
    d4 = (d4 - +(i21 | 0)) * 16.0;
    if ((i2 - i23 | 0) == 1) if (i5 & (i3 & d4 == 0.0)) i1 = i2; else {
     HEAP8[i2 >> 0] = 46;
     i1 = i1 + 2 | 0;
    } else i1 = i2;
   } while (d4 != 0.0);
   if (!i11) i12 = 24; else if ((-2 - i23 + i1 | 0) < (i11 | 0)) {
    i2 = i1 - i23 | 0;
    i1 = i11 + 2 | 0;
   } else i12 = 24;
   if ((i12 | 0) == 24) {
    i1 = i1 - i23 | 0;
    i2 = i1;
   }
   i22 = i22 - i7 | 0;
   i23 = i22 + i9 + i1 | 0;
   _pad_673(i25, 32, i27, i23, i26);
   _out(i25, i10, i9);
   _pad_673(i25, 48, i27, i23, i26 ^ 65536);
   _out(i25, i24, i2);
   _pad_673(i25, 48, i1 - i2 | 0, 0, 0);
   _out(i25, i7, i22);
   _pad_673(i25, 32, i27, i23, i26 ^ 8192);
   i1 = i23;
   break;
  }
  i2 = (i11 | 0) < 0 ? 6 : i11;
  if (i1) {
   i1 = (HEAP32[i13 >> 2] | 0) + -28 | 0;
   HEAP32[i13 >> 2] = i1;
   d4 = d4 * 268435456.0;
  } else i1 = HEAP32[i13 >> 2] | 0;
  i21 = (i1 | 0) < 0 ? i3 : i3 + 288 | 0;
  i3 = i21;
  do {
   i17 = ~~d4 >>> 0;
   HEAP32[i3 >> 2] = i17;
   i3 = i3 + 4 | 0;
   d4 = (d4 - +(i17 >>> 0)) * 1.0e9;
  } while (d4 != 0.0);
  if ((i1 | 0) > 0) {
   i5 = i21;
   i8 = i3;
   while (1) {
    i7 = (i1 | 0) < 29 ? i1 : 29;
    i1 = i8 + -4 | 0;
    if (i1 >>> 0 >= i5 >>> 0) {
     i3 = 0;
     do {
      i16 = _bitshift64Shl(HEAP32[i1 >> 2] | 0, 0, i7 | 0) | 0;
      i16 = _i64Add(i16 | 0, tempRet0 | 0, i3 | 0, 0) | 0;
      i17 = tempRet0;
      i14 = ___uremdi3(i16 | 0, i17 | 0, 1e9, 0) | 0;
      HEAP32[i1 >> 2] = i14;
      i3 = ___udivdi3(i16 | 0, i17 | 0, 1e9, 0) | 0;
      i1 = i1 + -4 | 0;
     } while (i1 >>> 0 >= i5 >>> 0);
     if (i3) {
      i5 = i5 + -4 | 0;
      HEAP32[i5 >> 2] = i3;
     }
    }
    i3 = i8;
    while (1) {
     if (i3 >>> 0 <= i5 >>> 0) break;
     i1 = i3 + -4 | 0;
     if (!(HEAP32[i1 >> 2] | 0)) i3 = i1; else break;
    }
    i1 = (HEAP32[i13 >> 2] | 0) - i7 | 0;
    HEAP32[i13 >> 2] = i1;
    if ((i1 | 0) > 0) i8 = i3; else break;
   }
  } else i5 = i21;
  if ((i1 | 0) < 0) {
   i11 = ((i2 + 25 | 0) / 9 | 0) + 1 | 0;
   i12 = (i15 | 0) == 102;
   do {
    i10 = 0 - i1 | 0;
    i10 = (i10 | 0) < 9 ? i10 : 9;
    if (i5 >>> 0 < i3 >>> 0) {
     i7 = (1 << i10) + -1 | 0;
     i8 = 1e9 >>> i10;
     i9 = 0;
     i1 = i5;
     do {
      i17 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = (i17 >>> i10) + i9;
      i9 = Math_imul(i17 & i7, i8) | 0;
      i1 = i1 + 4 | 0;
     } while (i1 >>> 0 < i3 >>> 0);
     i1 = (HEAP32[i5 >> 2] | 0) == 0 ? i5 + 4 | 0 : i5;
     if (!i9) {
      i5 = i1;
      i1 = i3;
     } else {
      HEAP32[i3 >> 2] = i9;
      i5 = i1;
      i1 = i3 + 4 | 0;
     }
    } else {
     i5 = (HEAP32[i5 >> 2] | 0) == 0 ? i5 + 4 | 0 : i5;
     i1 = i3;
    }
    i3 = i12 ? i21 : i5;
    i3 = (i1 - i3 >> 2 | 0) > (i11 | 0) ? i3 + (i11 << 2) | 0 : i1;
    i1 = (HEAP32[i13 >> 2] | 0) + i10 | 0;
    HEAP32[i13 >> 2] = i1;
   } while ((i1 | 0) < 0);
   i1 = i5;
   i11 = i3;
  } else {
   i1 = i5;
   i11 = i3;
  }
  i17 = i21;
  if (i1 >>> 0 < i11 >>> 0) {
   i3 = (i17 - i1 >> 2) * 9 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   if (i7 >>> 0 >= 10) {
    i5 = 10;
    do {
     i5 = i5 * 10 | 0;
     i3 = i3 + 1 | 0;
    } while (i7 >>> 0 >= i5 >>> 0);
   }
  } else i3 = 0;
  i12 = (i15 | 0) == 103;
  i14 = (i2 | 0) != 0;
  i5 = i2 - ((i15 | 0) != 102 ? i3 : 0) + ((i14 & i12) << 31 >> 31) | 0;
  if ((i5 | 0) < (((i11 - i17 >> 2) * 9 | 0) + -9 | 0)) {
   i5 = i5 + 9216 | 0;
   i10 = i21 + 4 + (((i5 | 0) / 9 | 0) + -1024 << 2) | 0;
   i5 = (i5 | 0) % 9 | 0;
   if ((i5 | 0) < 8) {
    i7 = 10;
    while (1) {
     i7 = i7 * 10 | 0;
     if ((i5 | 0) < 7) i5 = i5 + 1 | 0; else break;
    }
   } else i7 = 10;
   i8 = HEAP32[i10 >> 2] | 0;
   i9 = (i8 >>> 0) % (i7 >>> 0) | 0;
   i5 = (i10 + 4 | 0) == (i11 | 0);
   if (i5 & (i9 | 0) == 0) i5 = i10; else {
    d6 = (((i8 >>> 0) / (i7 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    i16 = (i7 | 0) / 2 | 0;
    d4 = i9 >>> 0 < i16 >>> 0 ? .5 : i5 & (i9 | 0) == (i16 | 0) ? 1.0 : 1.5;
    if (i20) {
     i16 = (HEAP8[i19 >> 0] | 0) == 45;
     d4 = i16 ? -d4 : d4;
     d6 = i16 ? -d6 : d6;
    }
    i5 = i8 - i9 | 0;
    HEAP32[i10 >> 2] = i5;
    if (d6 + d4 != d6) {
     i16 = i5 + i7 | 0;
     HEAP32[i10 >> 2] = i16;
     if (i16 >>> 0 > 999999999) {
      i3 = i10;
      while (1) {
       i5 = i3 + -4 | 0;
       HEAP32[i3 >> 2] = 0;
       if (i5 >>> 0 < i1 >>> 0) {
        i1 = i1 + -4 | 0;
        HEAP32[i1 >> 2] = 0;
       }
       i16 = (HEAP32[i5 >> 2] | 0) + 1 | 0;
       HEAP32[i5 >> 2] = i16;
       if (i16 >>> 0 > 999999999) i3 = i5; else break;
      }
     } else i5 = i10;
     i3 = (i17 - i1 >> 2) * 9 | 0;
     i8 = HEAP32[i1 >> 2] | 0;
     if (i8 >>> 0 >= 10) {
      i7 = 10;
      do {
       i7 = i7 * 10 | 0;
       i3 = i3 + 1 | 0;
      } while (i8 >>> 0 >= i7 >>> 0);
     }
    } else i5 = i10;
   }
   i5 = i5 + 4 | 0;
   i5 = i11 >>> 0 > i5 >>> 0 ? i5 : i11;
   i16 = i1;
  } else {
   i5 = i11;
   i16 = i1;
  }
  i15 = i5;
  while (1) {
   if (i15 >>> 0 <= i16 >>> 0) {
    i13 = 0;
    break;
   }
   i1 = i15 + -4 | 0;
   if (!(HEAP32[i1 >> 2] | 0)) i15 = i1; else {
    i13 = 1;
    break;
   }
  }
  i11 = 0 - i3 | 0;
  do if (i12) {
   i1 = i2 + ((i14 ^ 1) & 1) | 0;
   if ((i1 | 0) > (i3 | 0) & (i3 | 0) > -5) {
    i8 = i18 + -1 | 0;
    i2 = i1 + -1 - i3 | 0;
   } else {
    i8 = i18 + -2 | 0;
    i2 = i1 + -1 | 0;
   }
   i1 = i26 & 8;
   if (!i1) {
    if (i13) {
     i7 = HEAP32[i15 + -4 >> 2] | 0;
     if (!i7) i5 = 9; else if (!((i7 >>> 0) % 10 | 0)) {
      i5 = 0;
      i1 = 10;
      do {
       i1 = i1 * 10 | 0;
       i5 = i5 + 1 | 0;
      } while (!((i7 >>> 0) % (i1 >>> 0) | 0 | 0));
     } else i5 = 0;
    } else i5 = 9;
    i1 = ((i15 - i17 >> 2) * 9 | 0) + -9 | 0;
    if ((i8 | 32 | 0) == 102) {
     i10 = i1 - i5 | 0;
     i10 = (i10 | 0) > 0 ? i10 : 0;
     i2 = (i2 | 0) < (i10 | 0) ? i2 : i10;
     i10 = 0;
     break;
    } else {
     i10 = i1 + i3 - i5 | 0;
     i10 = (i10 | 0) > 0 ? i10 : 0;
     i2 = (i2 | 0) < (i10 | 0) ? i2 : i10;
     i10 = 0;
     break;
    }
   } else i10 = i1;
  } else {
   i8 = i18;
   i10 = i26 & 8;
  } while (0);
  i12 = i2 | i10;
  i7 = (i12 | 0) != 0 & 1;
  i9 = (i8 | 32 | 0) == 102;
  if (i9) {
   i14 = 0;
   i1 = (i3 | 0) > 0 ? i3 : 0;
  } else {
   i1 = (i3 | 0) < 0 ? i11 : i3;
   i1 = _fmt_u(i1, ((i1 | 0) < 0) << 31 >> 31, i22) | 0;
   i5 = i22;
   if ((i5 - i1 | 0) < 2) do {
    i1 = i1 + -1 | 0;
    HEAP8[i1 >> 0] = 48;
   } while ((i5 - i1 | 0) < 2);
   HEAP8[i1 + -1 >> 0] = (i3 >> 31 & 2) + 43;
   i1 = i1 + -2 | 0;
   HEAP8[i1 >> 0] = i8;
   i14 = i1;
   i1 = i5 - i1 | 0;
  }
  i1 = i20 + 1 + i2 + i7 + i1 | 0;
  _pad_673(i25, 32, i27, i1, i26);
  _out(i25, i19, i20);
  _pad_673(i25, 48, i27, i1, i26 ^ 65536);
  if (i9) {
   i7 = i16 >>> 0 > i21 >>> 0 ? i21 : i16;
   i10 = i24 + 9 | 0;
   i8 = i10;
   i9 = i24 + 8 | 0;
   i5 = i7;
   do {
    i3 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i10) | 0;
    if ((i5 | 0) == (i7 | 0)) {
     if ((i3 | 0) == (i10 | 0)) {
      HEAP8[i9 >> 0] = 48;
      i3 = i9;
     }
    } else if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out(i25, i3, i8 - i3 | 0);
    i5 = i5 + 4 | 0;
   } while (i5 >>> 0 <= i21 >>> 0);
   if (i12 | 0) _out(i25, 70517, 1);
   if (i5 >>> 0 < i15 >>> 0 & (i2 | 0) > 0) while (1) {
    i3 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i10) | 0;
    if (i3 >>> 0 > i24 >>> 0) {
     _memset(i24 | 0, 48, i3 - i23 | 0) | 0;
     do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
    }
    _out(i25, i3, (i2 | 0) < 9 ? i2 : 9);
    i5 = i5 + 4 | 0;
    i3 = i2 + -9 | 0;
    if (!(i5 >>> 0 < i15 >>> 0 & (i2 | 0) > 9)) {
     i2 = i3;
     break;
    } else i2 = i3;
   }
   _pad_673(i25, 48, i2 + 9 | 0, 9, 0);
  } else {
   i12 = i13 ? i15 : i16 + 4 | 0;
   if ((i2 | 0) > -1) {
    i13 = i24 + 9 | 0;
    i10 = (i10 | 0) == 0;
    i11 = i13;
    i8 = 0 - i23 | 0;
    i9 = i24 + 8 | 0;
    i7 = i16;
    do {
     i3 = _fmt_u(HEAP32[i7 >> 2] | 0, 0, i13) | 0;
     if ((i3 | 0) == (i13 | 0)) {
      HEAP8[i9 >> 0] = 48;
      i3 = i9;
     }
     do if ((i7 | 0) == (i16 | 0)) {
      i5 = i3 + 1 | 0;
      _out(i25, i3, 1);
      if (i10 & (i2 | 0) < 1) {
       i3 = i5;
       break;
      }
      _out(i25, 70517, 1);
      i3 = i5;
     } else {
      if (i3 >>> 0 <= i24 >>> 0) break;
      _memset(i24 | 0, 48, i3 + i8 | 0) | 0;
      do i3 = i3 + -1 | 0; while (i3 >>> 0 > i24 >>> 0);
     } while (0);
     i23 = i11 - i3 | 0;
     _out(i25, i3, (i2 | 0) > (i23 | 0) ? i23 : i2);
     i2 = i2 - i23 | 0;
     i7 = i7 + 4 | 0;
    } while (i7 >>> 0 < i12 >>> 0 & (i2 | 0) > -1);
   }
   _pad_673(i25, 48, i2 + 18 | 0, 18, 0);
   _out(i25, i14, i22 - i14 | 0);
  }
  _pad_673(i25, 32, i27, i1, i26 ^ 8192);
 } while (0);
 STACKTOP = i28;
 return ((i1 | 0) < (i27 | 0) ? i27 : i1) | 0;
}

function _decfloat(i23, i2, i26, i25, i24, i20) {
 i23 = i23 | 0;
 i2 = i2 | 0;
 i26 = i26 | 0;
 i25 = i25 | 0;
 i24 = i24 | 0;
 i20 = i20 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, d10 = 0.0, d11 = 0.0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0;
 i19 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512);
 i27 = i30;
 i28 = i25 + i26 | 0;
 i29 = 0 - i28 | 0;
 i21 = i23 + 4 | 0;
 i22 = i23 + 100 | 0;
 i3 = 0;
 L1 : while (1) {
  switch (i2 | 0) {
  case 46:
   {
    i19 = 6;
    break L1;
   }
  case 48:
   break;
  default:
   {
    i14 = 0;
    i8 = i3;
    i9 = 0;
    i7 = 0;
    break L1;
   }
  }
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
   HEAP32[i21 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
   i3 = 1;
   continue;
  } else {
   i2 = ___shgetc(i23) | 0;
   i3 = 1;
   continue;
  }
 }
 if ((i19 | 0) == 6) {
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
   HEAP32[i21 >> 2] = i2 + 1;
   i2 = HEAPU8[i2 >> 0] | 0;
  } else i2 = ___shgetc(i23) | 0;
  if ((i2 | 0) == 48) {
   i3 = 0;
   i2 = 0;
   while (1) {
    i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
    i7 = tempRet0;
    i2 = HEAP32[i21 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i21 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
    } else i2 = ___shgetc(i23) | 0;
    if ((i2 | 0) == 48) i2 = i7; else {
     i14 = 1;
     i8 = 1;
     i9 = i3;
     break;
    }
   }
  } else {
   i14 = 1;
   i8 = i3;
   i9 = 0;
   i7 = 0;
  }
 }
 HEAP32[i27 >> 2] = 0;
 i6 = i2 + -48 | 0;
 i4 = (i2 | 0) == 46;
 L20 : do if (i4 | i6 >>> 0 < 10) {
  i19 = i27 + 496 | 0;
  i15 = 0;
  i3 = 0;
  i12 = 0;
  i16 = i14;
  i17 = i8;
  i18 = i6;
  i8 = 0;
  i6 = 0;
  L22 : while (1) {
   do if (i4) if (!i16) {
    i16 = 1;
    i9 = i8;
    i7 = i6;
   } else break L22; else {
    i8 = _i64Add(i8 | 0, i6 | 0, 1, 0) | 0;
    i6 = tempRet0;
    i14 = (i2 | 0) != 48;
    if ((i3 | 0) >= 125) {
     if (!i14) break;
     HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 1;
     break;
    }
    i4 = i27 + (i3 << 2) | 0;
    if (!i15) i2 = i18; else i2 = i2 + -48 + ((HEAP32[i4 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i4 >> 2] = i2;
    i15 = i15 + 1 | 0;
    i17 = (i15 | 0) == 9;
    i15 = i17 ? 0 : i15;
    i3 = i3 + (i17 & 1) | 0;
    i12 = i14 ? i8 : i12;
    i17 = 1;
   } while (0);
   i2 = HEAP32[i21 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
    HEAP32[i21 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i23) | 0;
   i18 = i2 + -48 | 0;
   i4 = (i2 | 0) == 46;
   if (!(i4 | i18 >>> 0 < 10)) {
    i14 = i16;
    i4 = i17;
    i19 = 29;
    break L20;
   }
  }
  i2 = i15;
  i4 = (i17 | 0) != 0;
  i19 = 37;
 } else {
  i15 = 0;
  i3 = 0;
  i12 = 0;
  i4 = i8;
  i8 = 0;
  i6 = 0;
  i19 = 29;
 } while (0);
 do if ((i19 | 0) == 29) {
  i18 = (i14 | 0) == 0;
  i9 = i18 ? i8 : i9;
  i7 = i18 ? i6 : i7;
  i4 = (i4 | 0) != 0;
  if (!(i4 & (i2 | 32 | 0) == 101)) if ((i2 | 0) > -1) {
   i2 = i15;
   i19 = 37;
   break;
  } else {
   i2 = i15;
   i19 = 39;
   break;
  }
  i4 = _scanexp(i23, i20) | 0;
  i2 = tempRet0;
  if ((i4 | 0) == 0 & (i2 | 0) == -2147483648) {
   if (!i20) {
    ___shlim(i23, 0);
    d1 = 0.0;
    break;
   }
   if (!(HEAP32[i22 >> 2] | 0)) {
    i4 = 0;
    i2 = 0;
   } else {
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
    i4 = 0;
    i2 = 0;
   }
  }
  i17 = _i64Add(i4 | 0, i2 | 0, i9 | 0, i7 | 0) | 0;
  i2 = i15;
  i7 = tempRet0;
  i19 = 41;
 } while (0);
 if ((i19 | 0) == 37) if (!(HEAP32[i22 >> 2] | 0)) i19 = 39; else {
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + -1;
  if (i4) {
   i17 = i9;
   i19 = 41;
  } else i19 = 40;
 }
 if ((i19 | 0) == 39) if (i4) {
  i17 = i9;
  i19 = 41;
 } else i19 = 40;
 do if ((i19 | 0) == 40) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim(i23, 0);
  d1 = 0.0;
 } else if ((i19 | 0) == 41) {
  i4 = HEAP32[i27 >> 2] | 0;
  if (!i4) {
   d1 = +(i24 | 0) * 0.0;
   break;
  }
  if (((i6 | 0) < 0 | (i6 | 0) == 0 & i8 >>> 0 < 10) & ((i17 | 0) == (i8 | 0) & (i7 | 0) == (i6 | 0))) if ((i26 | 0) > 30 | (i4 >>> i26 | 0) == 0) {
   d1 = +(i24 | 0) * +(i4 >>> 0);
   break;
  }
  i23 = (i25 | 0) / -2 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i7 | 0) > (i22 | 0) | (i7 | 0) == (i22 | 0) & i17 >>> 0 > i23 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i24 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i23 = i25 + -106 | 0;
  i22 = ((i23 | 0) < 0) << 31 >> 31;
  if ((i7 | 0) < (i22 | 0) | (i7 | 0) == (i22 | 0) & i17 >>> 0 < i23 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i24 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (i2) {
   if ((i2 | 0) < 9) {
    i6 = i27 + (i3 << 2) | 0;
    i4 = HEAP32[i6 >> 2] | 0;
    while (1) {
     i4 = i4 * 10 | 0;
     if ((i2 | 0) >= 8) break; else i2 = i2 + 1 | 0;
    }
    HEAP32[i6 >> 2] = i4;
   }
   i3 = i3 + 1 | 0;
  }
  if ((i12 | 0) < 9) if ((i12 | 0) <= (i17 | 0) & (i17 | 0) < 18) {
   if ((i17 | 0) == 9) {
    d1 = +(i24 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0);
    break;
   }
   if ((i17 | 0) < 9) {
    d1 = +(i24 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0) / +(HEAP32[31184 + (8 - i17 << 2) >> 2] | 0);
    break;
   }
   i23 = i26 + 27 + (Math_imul(i17, -3) | 0) | 0;
   i2 = HEAP32[i27 >> 2] | 0;
   if ((i23 | 0) > 30 | (i2 >>> i23 | 0) == 0) {
    d1 = +(i24 | 0) * +(i2 >>> 0) * +(HEAP32[31184 + (i17 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  i2 = (i17 | 0) % 9 | 0;
  if (!i2) {
   i2 = 0;
   i6 = 0;
  } else {
   i12 = (i17 | 0) > -1 ? i2 : i2 + 9 | 0;
   i8 = HEAP32[31184 + (8 - i12 << 2) >> 2] | 0;
   if (!i3) {
    i6 = 0;
    i3 = 0;
    i4 = i17;
   } else {
    i9 = 1e9 / (i8 | 0) | 0;
    i6 = 0;
    i7 = 0;
    i4 = i17;
    i2 = 0;
    do {
     i21 = i27 + (i2 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = ((i22 >>> 0) / (i8 >>> 0) | 0) + i6 | 0;
     HEAP32[i21 >> 2] = i23;
     i6 = Math_imul(i9, (i22 >>> 0) % (i8 >>> 0) | 0) | 0;
     i23 = (i2 | 0) == (i7 | 0) & (i23 | 0) == 0;
     i4 = i23 ? i4 + -9 | 0 : i4;
     i7 = i23 ? i7 + 1 & 127 : i7;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i3 | 0));
    if (!i6) i6 = i7; else {
     HEAP32[i27 + (i3 << 2) >> 2] = i6;
     i6 = i7;
     i3 = i3 + 1 | 0;
    }
   }
   i2 = 0;
   i17 = 9 - i12 + i4 | 0;
  }
  L101 : while (1) {
   i12 = (i17 | 0) < 18;
   i14 = (i17 | 0) == 18;
   i15 = i27 + (i6 << 2) | 0;
   while (1) {
    if (!i12) {
     if (!i14) {
      i4 = i17;
      break L101;
     }
     if ((HEAP32[i15 >> 2] | 0) >>> 0 >= 9007199) {
      i4 = 18;
      break L101;
     }
    }
    i4 = 0;
    i16 = i3;
    i3 = i3 + 127 | 0;
    while (1) {
     i7 = i3 & 127;
     i8 = i27 + (i7 << 2) | 0;
     i3 = _bitshift64Shl(HEAP32[i8 >> 2] | 0, 0, 29) | 0;
     i3 = _i64Add(i3 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
     i4 = tempRet0;
     if (i4 >>> 0 > 0 | (i4 | 0) == 0 & i3 >>> 0 > 1e9) {
      i9 = ___udivdi3(i3 | 0, i4 | 0, 1e9, 0) | 0;
      i3 = ___uremdi3(i3 | 0, i4 | 0, 1e9, 0) | 0;
     } else i9 = 0;
     HEAP32[i8 >> 2] = i3;
     i23 = (i7 | 0) == (i6 | 0);
     i16 = (i3 | 0) == 0 & (((i7 | 0) != (i16 + 127 & 127 | 0) | i23) ^ 1) ? i7 : i16;
     if (i23) break; else {
      i4 = i9;
      i3 = i7 + -1 | 0;
     }
    }
    i2 = i2 + -29 | 0;
    if (i9 | 0) break; else i3 = i16;
   }
   i6 = i6 + 127 & 127;
   i3 = i16 + 127 & 127;
   i4 = i27 + ((i16 + 126 & 127) << 2) | 0;
   if ((i6 | 0) == (i16 | 0)) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | HEAP32[i27 + (i3 << 2) >> 2]; else i3 = i16;
   HEAP32[i27 + (i6 << 2) >> 2] = i9;
   i17 = i17 + 9 | 0;
  }
  L119 : while (1) {
   i16 = i3 + 1 & 127;
   i17 = i27 + ((i3 + 127 & 127) << 2) | 0;
   i14 = i4;
   while (1) {
    i8 = (i14 | 0) == 18;
    i15 = (i14 | 0) > 27 ? 9 : 1;
    i18 = i6;
    while (1) {
     i7 = 0;
     while (1) {
      i4 = i7 + i18 & 127;
      if ((i4 | 0) == (i3 | 0)) {
       i4 = 2;
       i19 = 88;
       break;
      }
      i4 = HEAP32[i27 + (i4 << 2) >> 2] | 0;
      i6 = HEAP32[31216 + (i7 << 2) >> 2] | 0;
      if (i4 >>> 0 < i6 >>> 0) {
       i4 = 2;
       i19 = 88;
       break;
      }
      if (i4 >>> 0 > i6 >>> 0) break;
      i4 = i7 + 1 | 0;
      if ((i7 | 0) < 1) i7 = i4; else {
       i19 = 88;
       break;
      }
     }
     if ((i19 | 0) == 88) {
      i19 = 0;
      if (i8 & (i4 | 0) == 2) {
       d1 = 0.0;
       i7 = 0;
       break L119;
      }
     }
     i2 = i15 + i2 | 0;
     if ((i18 | 0) == (i3 | 0)) i18 = i3; else break;
    }
    i9 = (1 << i15) + -1 | 0;
    i12 = 1e9 >>> i15;
    i8 = 0;
    i6 = i18;
    i4 = i14;
    i7 = i18;
    do {
     i21 = i27 + (i7 << 2) | 0;
     i22 = HEAP32[i21 >> 2] | 0;
     i23 = (i22 >>> i15) + i8 | 0;
     HEAP32[i21 >> 2] = i23;
     i8 = Math_imul(i22 & i9, i12) | 0;
     i23 = (i7 | 0) == (i6 | 0) & (i23 | 0) == 0;
     i4 = i23 ? i4 + -9 | 0 : i4;
     i6 = i23 ? i6 + 1 & 127 : i6;
     i7 = i7 + 1 & 127;
    } while ((i7 | 0) != (i3 | 0));
    if (!i8) {
     i14 = i4;
     continue;
    }
    if ((i16 | 0) != (i6 | 0)) break;
    HEAP32[i17 >> 2] = HEAP32[i17 >> 2] | 1;
    i14 = i4;
   }
   HEAP32[i27 + (i3 << 2) >> 2] = i8;
   i3 = i16;
  }
  do {
   i6 = i7 + i18 & 127;
   i4 = i3 + 1 & 127;
   if ((i6 | 0) == (i3 | 0)) {
    HEAP32[i27 + (i4 + -1 << 2) >> 2] = 0;
    i3 = i4;
   }
   d1 = d1 * 1.0e9 + +((HEAP32[i27 + (i6 << 2) >> 2] | 0) >>> 0);
   i7 = i7 + 1 | 0;
  } while ((i7 | 0) != 2);
  d13 = +(i24 | 0);
  d5 = d1 * d13;
  i6 = i2 + 53 | 0;
  i8 = i6 - i25 | 0;
  i9 = (i8 | 0) < (i26 | 0);
  i7 = i9 ? ((i8 | 0) > 0 ? i8 : 0) : i26;
  if ((i7 | 0) < 53) {
   d31 = +_copysignl(+_scalbn(1.0, 105 - i7 | 0), d5);
   d10 = +_fmodl(d5, +_scalbn(1.0, 53 - i7 | 0));
   d11 = d31;
   d1 = d10;
   d10 = d31 + (d5 - d10);
  } else {
   d11 = 0.0;
   d1 = 0.0;
   d10 = d5;
  }
  i4 = i18 + 2 & 127;
  if ((i4 | 0) == (i3 | 0)) d5 = d1; else {
   i4 = HEAP32[i27 + (i4 << 2) >> 2] | 0;
   do if (i4 >>> 0 < 5e8) {
    if (!i4) if ((i18 + 3 & 127 | 0) == (i3 | 0)) break;
    d1 = d13 * .25 + d1;
   } else {
    if ((i4 | 0) != 5e8) {
     d1 = d13 * .75 + d1;
     break;
    }
    if ((i18 + 3 & 127 | 0) == (i3 | 0)) {
     d1 = d13 * .5 + d1;
     break;
    } else {
     d1 = d13 * .75 + d1;
     break;
    }
   } while (0);
   if ((53 - i7 | 0) > 1) if (+_fmodl(d1, 1.0) != 0.0) d5 = d1; else d5 = d1 + 1.0; else d5 = d1;
  }
  d1 = d10 + d5 - d11;
  do if ((i6 & 2147483647 | 0) > (-2 - i28 | 0)) {
   i3 = !(+Math_abs(+d1) >= 9007199254740992.0);
   i2 = i2 + ((i3 ^ 1) & 1) | 0;
   d1 = i3 ? d1 : d1 * .5;
   if ((i2 + 50 | 0) <= (i29 | 0)) if (!(d5 != 0.0 & (i9 & ((i7 | 0) != (i8 | 0) | i3)))) break;
   HEAP32[(___errno_location() | 0) >> 2] = 34;
  } while (0);
  d1 = +_scalbnl(d1, i2);
 } while (0);
 STACKTOP = i30;
 return +d1;
}

function _SDL_GestureProcessEvent(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, f5 = f0, f6 = f0, i7 = 0, f8 = f0, f10 = f0, i11 = 0, d12 = 0.0, f13 = f0, f14 = f0, d15 = 0.0, i16 = 0, i17 = 0, d18 = 0.0, f19 = f0, i20 = 0, f21 = f0, f22 = f0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i17 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 i11 = i27 + 512 | 0;
 i23 = i27;
 i16 = i27 + 520 | 0;
 i7 = HEAP32[i9 >> 2] | 0;
 if ((i7 + -1792 | 0) >>> 0 >= 3) {
  STACKTOP = i27;
  return;
 }
 i1 = i9 + 8 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 i2 = HEAP32[19484] | 0;
 if ((i2 | 0) <= 0) {
  STACKTOP = i27;
  return;
 }
 i26 = HEAP32[19485] | 0;
 i25 = 0;
 while (1) {
  i24 = i26 + (i25 * 8232 | 0) | 0;
  i20 = i24;
  i3 = i25 + 1 | 0;
  if ((HEAP32[i20 >> 2] | 0) == (i4 | 0) ? (HEAP32[i20 + 4 >> 2] | 0) == (i1 | 0) : 0) break;
  if ((i3 | 0) < (i2 | 0)) i25 = i3; else {
   i17 = 52;
   break;
  }
 }
 if ((i17 | 0) == 52) {
  STACKTOP = i27;
  return;
 }
 if (!i24) {
  STACKTOP = i27;
  return;
 }
 f21 = Math_fround(HEAPF32[i9 + 24 >> 2]);
 f22 = Math_fround(HEAPF32[i9 + 28 >> 2]);
 switch (i7 | 0) {
 case 1793:
  {
   i1 = i26 + (i25 * 8232 | 0) | 0;
   i20 = i1 + 8216 | 0;
   HEAP16[i20 >> 1] = (HEAP16[i20 >> 1] | 0) + -1 << 16 >> 16;
   i1 = i1 + 8228 | 0;
   do if (!(HEAP32[i1 >> 2] | 0)) {
    _SDL_memset(i23, 0, 512) | 0;
    i7 = i26 + (i25 * 8232 | 0) | 0;
    _dollarNormalize(i7 + 16 | 0, i23);
    i7 = i7 + 8220 | 0;
    if ((HEAP32[i7 >> 2] | 0) <= 0) break;
    i9 = i26 + (i25 * 8232 | 0) + 8224 | 0;
    f19 = Math_fround(1.0e4);
    i3 = -1;
    i4 = 0;
    do {
     i2 = (HEAP32[i9 >> 2] | 0) + (i4 * 516 | 0) | 0;
     f8 = Math_fround(_dollarDifference(i23, i2, Math_fround(-.185407355)));
     f5 = Math_fround(_dollarDifference(i23, i2, Math_fround(.185407355)));
     i1 = f8 < f5;
     L25 : do if (+_SDL_fabs(-1.5707963267948966) > .03490658503988659) {
      f6 = f5;
      f10 = Math_fround(.185407355);
      f5 = f8;
      f14 = Math_fround(-.185407355);
      d12 = -.7853981633974483;
      d18 = .7853981633974483;
      while (1) {
       d15 = d18 * .618033989;
       f13 = f14;
       while (1) {
        if (i1) break;
        d12 = +f13;
        f8 = Math_fround(d15 + d12 * .38196601100000005);
        f5 = Math_fround(_dollarDifference(i23, i2, f8));
        i1 = f6 < f5;
        if (+_SDL_fabs(d12 - d18) > .03490658503988659) {
         f13 = f10;
         f14 = f6;
         f10 = f8;
         f6 = f5;
         f5 = f14;
        } else break L25;
       }
       d18 = +f10;
       f14 = Math_fround(d18 * .38196601100000005 + d12 * .618033989);
       f8 = Math_fround(_dollarDifference(i23, i2, f14));
       i1 = f8 < f5;
       if (!(+_SDL_fabs(d12 - d18) > .03490658503988659)) {
        f6 = f8;
        break;
       } else {
        f6 = f5;
        f10 = f13;
        f5 = f8;
       }
      }
     } else f6 = f8; while (0);
     f14 = i1 ? f6 : f5;
     i17 = f14 < f19;
     i3 = i17 ? i4 : i3;
     f19 = i17 ? f14 : f19;
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) < (HEAP32[i7 >> 2] | 0));
    if ((i3 | 0) > -1) {
     i17 = HEAP32[(HEAP32[i9 >> 2] | 0) + (i3 * 516 | 0) + 512 >> 2] | 0;
     HEAP32[i23 >> 2] = 2048;
     i11 = i24;
     i16 = HEAP32[i11 + 4 >> 2] | 0;
     i24 = i23 + 8 | 0;
     HEAP32[i24 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i24 + 4 >> 2] = i16;
     i24 = i26 + (i25 * 8232 | 0) | 0;
     HEAP32[i23 + 32 >> 2] = HEAP32[i24 + 8 >> 2];
     HEAP32[i23 + 36 >> 2] = HEAP32[i24 + 12 >> 2];
     i24 = i23 + 16 | 0;
     HEAP32[i24 >> 2] = i17;
     HEAP32[i24 + 4 >> 2] = 0;
     HEAPF32[i23 + 28 >> 2] = f19;
     HEAP32[i23 + 24 >> 2] = (HEAPU16[i20 >> 1] | 0) + 1;
     _SDL_PushEvent(i23) | 0;
    }
   } else {
    HEAP32[i1 >> 2] = 0;
    _dollarNormalize(i26 + (i25 * 8232 | 0) + 16 | 0, i16);
    L36 : do if (!0) {
     i2 = i26 + (i25 * 8232 | 0) | 0;
     i4 = i2 + 8220 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
     i2 = i2 + 8224 | 0;
     i7 = _SDL_realloc(HEAP32[i2 >> 2] | 0, (i1 * 516 | 0) + 516 | 0) | 0;
     if (!i7) {
      i1 = _SDL_Error(0) | 0;
      i17 = 29;
      break;
     }
     HEAP32[i2 >> 2] = i7;
     _SDL_memcpy(i7 + (i1 * 516 | 0) | 0, i16, 512) | 0;
     i2 = 5381;
     i3 = 0;
     do {
      i17 = i7 + (i1 * 516 | 0) + (i3 << 3) | 0;
      i16 = ((i2 * 33 | 0) + (~~Math_fround(HEAPF32[i17 >> 2]) >>> 0) | 0) * 33 | 0;
      i2 = i16 + (~~Math_fround(HEAPF32[i17 + 4 >> 2]) >>> 0) | 0;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != 64);
     HEAP32[i7 + (i1 * 516 | 0) + 512 >> 2] = i2;
     HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
     i17 = 29;
    } else {
     i1 = HEAP32[19484] | 0;
     L45 : do if (!i1) {
      i1 = _SDL_SetError(46742, i11) | 0;
      i17 = 20;
     } else {
      if ((i1 | 0) > 0) i9 = 0; else break L36;
      do {
       i2 = HEAP32[19485] | 0;
       i2 = i2 + (i9 * 8232 | 0) | 0;
       i4 = i2 + 8220 | 0;
       i1 = HEAP32[i4 >> 2] | 0;
       i2 = i2 + 8224 | 0;
       i7 = _SDL_realloc(HEAP32[i2 >> 2] | 0, (i1 * 516 | 0) + 516 | 0) | 0;
       if (!i7) i1 = _SDL_Error(0) | 0; else {
        HEAP32[i2 >> 2] = i7;
        _SDL_memcpy(i7 + (i1 * 516 | 0) | 0, i16, 512) | 0;
        i2 = 5381;
        i3 = 0;
        do {
         i11 = i7 + (i1 * 516 | 0) + (i3 << 3) | 0;
         i28 = ((i2 * 33 | 0) + (~~Math_fround(HEAPF32[i11 >> 2]) >>> 0) | 0) * 33 | 0;
         i2 = i28 + (~~Math_fround(HEAPF32[i11 + 4 >> 2]) >>> 0) | 0;
         i3 = i3 + 1 | 0;
        } while ((i3 | 0) != 64);
        HEAP32[i7 + (i1 * 516 | 0) + 512 >> 2] = i2;
        HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
       }
       i9 = i9 + 1 | 0;
       if ((i1 | 0) < 0) {
        i1 = -1;
        i17 = 20;
        break L45;
       }
       i4 = HEAP32[19484] | 0;
      } while ((i9 | 0) < (i4 | 0));
     } while (0);
     if ((i17 | 0) == 20) i4 = HEAP32[19484] | 0;
     if ((i4 | 0) > 0) {
      i3 = HEAP32[19485] | 0;
      i2 = 0;
      do {
       HEAP32[i3 + (i2 * 8232 | 0) + 8228 >> 2] = 0;
       i2 = i2 + 1 | 0;
      } while ((i2 | 0) < (i4 | 0));
      i17 = 29;
     } else i17 = 29;
    } while (0);
    if ((i17 | 0) == 29) if ((i1 | 0) > -1) {
     i17 = HEAP32[(HEAP32[i26 + (i25 * 8232 | 0) + 8224 >> 2] | 0) + (i1 * 516 | 0) + 512 >> 2] | 0;
     i16 = HEAP32[i24 >> 2] | 0;
     i24 = HEAP32[i24 + 4 >> 2] | 0;
     HEAP32[i23 >> 2] = 2049;
     i28 = i23 + 8 | 0;
     HEAP32[i28 >> 2] = i16;
     HEAP32[i28 + 4 >> 2] = i24;
     i28 = i23 + 16 | 0;
     HEAP32[i28 >> 2] = i17;
     HEAP32[i28 + 4 >> 2] = 0;
     _SDL_PushEvent(i23) | 0;
     break;
    }
    i17 = HEAP32[i24 >> 2] | 0;
    i24 = HEAP32[i24 + 4 >> 2] | 0;
    HEAP32[i23 >> 2] = 2049;
    i28 = i23 + 8 | 0;
    HEAP32[i28 >> 2] = i17;
    HEAP32[i28 + 4 >> 2] = i24;
    i28 = i23 + 16 | 0;
    HEAP32[i28 >> 2] = -1;
    HEAP32[i28 + 4 >> 2] = -1;
    _SDL_PushEvent(i23) | 0;
   } while (0);
   i1 = HEAP16[i20 >> 1] | 0;
   if (i1 << 16 >> 16) {
    i28 = i26 + (i25 * 8232 | 0) | 0;
    i26 = i28 + 8 | 0;
    f14 = Math_fround((i1 & 65535) + 1 | 0);
    f19 = Math_fround(i1 & 65535);
    HEAPF32[i26 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[i26 >> 2]) * f14) - f21) / f19);
    i28 = i28 + 12 | 0;
    HEAPF32[i28 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[i28 >> 2]) * f14) - f22) / f19);
   }
   STACKTOP = i27;
   return;
  }
 case 1794:
  {
   f10 = Math_fround(HEAPF32[i9 + 32 >> 2]);
   f8 = Math_fround(HEAPF32[i9 + 36 >> 2]);
   i1 = i26 + (i25 * 8232 | 0) + 20 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) < 1024) {
    i28 = i26 + (i25 * 8232 | 0) | 0;
    i20 = i26 + (i25 * 8232 | 0) + 24 + (i2 << 3) | 0;
    HEAP32[i20 >> 2] = HEAP32[i28 + 8 >> 2];
    i2 = i28 + 12 | 0;
    HEAP32[i20 + 4 >> 2] = HEAP32[i2 >> 2];
    i20 = HEAP32[i1 >> 2] | 0;
    i17 = i26 + (i25 * 8232 | 0) + 24 + (i20 << 3) | 0;
    f14 = Math_fround(HEAPF32[i17 >> 2]);
    i20 = i20 + -1 | 0;
    i20 = i26 + (i25 * 8232 | 0) + 24 + (i20 << 3) | 0;
    f14 = Math_fround(f14 - Math_fround(HEAPF32[i20 >> 2]));
    f19 = Math_fround(HEAPF32[i17 + 4 >> 2]);
    f19 = Math_fround(f19 - Math_fround(HEAPF32[i20 + 4 >> 2]));
    f19 = Math_fround(+_SDL_sqrt(+Math_fround(Math_fround(f14 * f14) + Math_fround(f19 * f19))));
    i28 = i28 + 16 | 0;
    HEAPF32[i28 >> 2] = Math_fround(Math_fround(HEAPF32[i28 >> 2]) + f19);
    HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
   } else i2 = i26 + (i25 * 8232 | 0) + 12 | 0;
   i3 = i26 + (i25 * 8232 | 0) | 0;
   i1 = i3 + 8 | 0;
   f5 = Math_fround(HEAPF32[i1 >> 2]);
   f6 = Math_fround(HEAPF32[i2 >> 2]);
   i3 = i3 + 8216 | 0;
   i28 = HEAP16[i3 >> 1] | 0;
   f19 = Math_fround(i28 & 65535);
   HEAPF32[i1 >> 2] = Math_fround(f5 + Math_fround(f10 / f19));
   HEAPF32[i2 >> 2] = Math_fround(f6 + Math_fround(f8 / f19));
   if ((i28 & 65535) <= 1) {
    STACKTOP = i27;
    return;
   }
   f10 = Math_fround(Math_fround(f21 - f10) - f5);
   f14 = Math_fround(Math_fround(f22 - f8) - f6);
   f19 = Math_fround(+_SDL_sqrt(+Math_fround(Math_fround(f10 * f10) + Math_fround(f14 * f14))));
   f13 = Math_fround(f21 - Math_fround(HEAPF32[i1 >> 2]));
   f21 = Math_fround(f22 - Math_fround(HEAPF32[i2 >> 2]));
   f22 = Math_fround(+_SDL_sqrt(+Math_fround(Math_fround(f13 * f13) + Math_fround(f21 * f21))));
   f10 = Math_fround(f10 / f19);
   f14 = Math_fround(f14 / f19);
   f13 = Math_fround(f13 / f22);
   f21 = Math_fround(f21 / f22);
   f21 = Math_fround(+_SDL_atan2(+Math_fround(Math_fround(f10 * f21) - Math_fround(f14 * f13)), +Math_fround(Math_fround(f10 * f13) + Math_fround(f14 * f21))));
   f22 = Math_fround(f22 - f19);
   i20 = f19 == Math_fround(0.0);
   f22 = i20 ? Math_fround(0.0) : f22;
   f21 = i20 ? Math_fround(0.0) : f21;
   HEAP32[i23 >> 2] = 2050;
   i20 = i24;
   i24 = HEAP32[i20 + 4 >> 2] | 0;
   i28 = i23 + 8 | 0;
   HEAP32[i28 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i28 + 4 >> 2] = i24;
   HEAP32[i23 + 24 >> 2] = HEAP32[i26 + (i25 * 8232 | 0) + 8 >> 2];
   HEAP32[i23 + 28 >> 2] = HEAP32[i2 >> 2];
   HEAPF32[i23 + 16 >> 2] = f21;
   HEAPF32[i23 + 20 >> 2] = f22;
   HEAP16[i23 + 32 >> 1] = HEAP16[i3 >> 1] | 0;
   _SDL_PushEvent(i23) | 0;
   STACKTOP = i27;
   return;
  }
 case 1792:
  {
   i28 = i26 + (i25 * 8232 | 0) | 0;
   i26 = i28 + 8216 | 0;
   i25 = (HEAP16[i26 >> 1] | 0) + 1 << 16 >> 16;
   HEAP16[i26 >> 1] = i25;
   i26 = i28 + 8 | 0;
   f14 = Math_fround((i25 & 65535) + -1 | 0);
   f19 = Math_fround(i25 & 65535);
   HEAPF32[i26 >> 2] = Math_fround(Math_fround(f21 + Math_fround(Math_fround(HEAPF32[i26 >> 2]) * f14)) / f19);
   i26 = i28 + 12 | 0;
   HEAPF32[i26 >> 2] = Math_fround(Math_fround(f22 + Math_fround(Math_fround(HEAPF32[i26 >> 2]) * f14)) / f19);
   HEAPF32[i28 + 16 >> 2] = Math_fround(0.0);
   HEAPF32[i28 + 24 >> 2] = f21;
   HEAPF32[i28 + 28 >> 2] = f22;
   HEAP32[i28 + 20 >> 2] = 1;
   STACKTOP = i27;
   return;
  }
 default:
  {
   STACKTOP = i27;
   return;
  }
 }
}

function _SDL_SW_CopyYUVToRGB(i24, i25, i18, i14, i15, i7, i3) {
 i24 = i24 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i26 = 0, i27 = 0, i28 = 0;
 i23 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i21 = i27 + 16 | 0;
 i4 = i27 + 8 | 0;
 i2 = i27;
 i26 = i27 + 40 | 0;
 i19 = i27 + 32 | 0;
 i20 = i27 + 28 | 0;
 i16 = i27 + 24 | 0;
 i17 = i27 + 20 | 0;
 i13 = (i18 | 0) == 0 | (i18 & -268435456 | 0) == 268435456;
 L1 : do if (i13) {
  i1 = i18 & 255;
  if (!i1) {
   i26 = _SDL_SetError(59548, i2) | 0;
   STACKTOP = i27;
   return i26 | 0;
  } else i22 = i1;
 } else {
  L6 : do if ((i18 | 0) < 1431918169) switch (i18 | 0) {
  case 844715353:
   break;
  default:
   {
    i22 = 1;
    break L1;
   }
  } else if ((i18 | 0) < 1498831189) switch (i18 | 0) {
  case 1431918169:
   break L6;
  default:
   {
    i22 = 1;
    break L1;
   }
  } else switch (i18 | 0) {
  case 1498831189:
   break L6;
  default:
   {
    i22 = 1;
    break L1;
   }
  } while (0);
  i22 = 2;
 } while (0);
 i1 = i24 + 4 | 0;
 do if ((HEAP32[i1 >> 2] | 0) != (i18 | 0)) {
  i12 = (_SDL_PixelFormatEnumToMasks(i18, i26, i19, i20, i16, i17) | 0) == 0;
  if (i12 | (HEAP32[i26 >> 2] | 0) < 15) {
   if ((_SDL_SetError(59576, i4) | 0) < 0) i1 = -1; else break;
   STACKTOP = i27;
   return i1 | 0;
  }
  HEAP32[i1 >> 2] = i18;
  i10 = HEAP32[i24 + 24 >> 2] | 0;
  i11 = i10 + 3072 | 0;
  i12 = i10 + 6144 | 0;
  i5 = 0;
  do {
   i1 = HEAP32[i19 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i2 = 0;
    do {
     i2 = (i1 & 1) + i2 | 0;
     i1 = i1 >>> 1;
    } while ((i1 | 0) != 0);
    i1 = i2;
   }
   i9 = i5 >> 8 - i1;
   i4 = i5 + 256 | 0;
   i1 = i10 + (i4 << 2) | 0;
   HEAP32[i1 >> 2] = i9;
   i9 = i9 << (_free_bits_at_bottom(HEAP32[i19 >> 2] | 0) | 0);
   HEAP32[i1 >> 2] = i9;
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2] | i9;
   i1 = HEAP32[i20 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i2 = 0;
    do {
     i2 = (i1 & 1) + i2 | 0;
     i1 = i1 >>> 1;
    } while ((i1 | 0) != 0);
    i1 = i2;
   }
   i9 = i5 >> 8 - i1;
   i1 = i11 + (i4 << 2) | 0;
   HEAP32[i1 >> 2] = i9;
   i9 = i9 << (_free_bits_at_bottom(HEAP32[i20 >> 2] | 0) | 0);
   HEAP32[i1 >> 2] = i9;
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2] | i9;
   i1 = HEAP32[i16 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i2 = 0;
    do {
     i2 = (i1 & 1) + i2 | 0;
     i1 = i1 >>> 1;
    } while ((i1 | 0) != 0);
    i1 = i2;
   }
   i8 = i5 >> 8 - i1;
   i9 = i12 + (i4 << 2) | 0;
   HEAP32[i9 >> 2] = i8;
   i8 = i8 << (_free_bits_at_bottom(HEAP32[i16 >> 2] | 0) | 0);
   HEAP32[i9 >> 2] = i8;
   HEAP32[i9 >> 2] = HEAP32[i17 >> 2] | i8;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) != 256);
  L35 : do if (i13) {
   if ((i18 & 255 | 0) == 2) {
    i1 = 0;
    i23 = 21;
   }
  } else {
   if ((i18 | 0) < 1431918169) switch (i18 | 0) {
   case 844715353:
    {
     i1 = 0;
     i23 = 21;
     break L35;
    }
   default:
    break L35;
   }
   if ((i18 | 0) < 1498831189) switch (i18 | 0) {
   case 1431918169:
    {
     i1 = 0;
     i23 = 21;
     break L35;
    }
   default:
    break L35;
   } else switch (i18 | 0) {
   case 1498831189:
    {
     i1 = 0;
     i23 = 21;
     break L35;
    }
   default:
    break L35;
   }
  } while (0);
  if ((i23 | 0) == 21) while (1) {
   i23 = 0;
   i9 = i1 + 256 | 0;
   i8 = i10 + (i9 << 2) | 0;
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i6 << 16 | i6;
   i8 = i11 + (i9 << 2) | 0;
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i8 >> 2] = i6 << 16 | i6;
   i9 = i12 + (i9 << 2) | 0;
   i8 = HEAP32[i9 >> 2] | 0;
   HEAP32[i9 >> 2] = i8 << 16 | i8;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == 256) break; else i23 = 21;
  }
  i2 = i10 + 1024 | 0;
  i4 = i10 + 2044 | 0;
  i5 = i10 + 4096 | 0;
  i6 = i10 + 5116 | 0;
  i8 = i10 + 7168 | 0;
  i9 = i10 + 8188 | 0;
  i1 = 0;
  do {
   HEAP32[i10 + (i1 << 2) >> 2] = HEAP32[i2 >> 2];
   i28 = i1 + 512 | 0;
   HEAP32[i10 + (i28 << 2) >> 2] = HEAP32[i4 >> 2];
   HEAP32[i11 + (i1 << 2) >> 2] = HEAP32[i5 >> 2];
   HEAP32[i11 + (i28 << 2) >> 2] = HEAP32[i6 >> 2];
   HEAP32[i12 + (i1 << 2) >> 2] = HEAP32[i8 >> 2];
   HEAP32[i12 + (i28 << 2) >> 2] = HEAP32[i9 >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 256);
  i1 = HEAP32[i24 >> 2] | 0;
  L51 : do if ((i1 | 0) < 1431918169) if ((i1 | 0) < 844715353) switch (i1 | 0) {
  case 842094169:
   {
    i23 = 24;
    break L51;
   }
  default:
   break L51;
  } else switch (i1 | 0) {
  case 844715353:
   {
    i23 = 31;
    break L51;
   }
  default:
   break L51;
  } else {
   if ((i1 | 0) < 1448433993) switch (i1 | 0) {
   case 1431918169:
    {
     i23 = 31;
     break L51;
    }
   default:
    break L51;
   }
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 1448433993:
    {
     i23 = 24;
     break L51;
    }
   default:
    break L51;
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i23 = 31;
     break L51;
    }
   default:
    break L51;
   }
  } while (0);
  L63 : do if ((i23 | 0) == 24) {
   if (i13) switch ((i18 & 255) << 24 >> 24) {
   case 2:
    {
     HEAP32[i24 + 28 >> 2] = 1;
     HEAP32[i24 + 32 >> 2] = 2;
     break L63;
    }
   case 3:
    {
     HEAP32[i24 + 28 >> 2] = 3;
     HEAP32[i24 + 32 >> 2] = 4;
     break L63;
    }
   case 4:
    {
     HEAP32[i24 + 28 >> 2] = 5;
     HEAP32[i24 + 32 >> 2] = 6;
     break L63;
    }
   default:
    break L63;
   }
   L72 : do if ((i18 | 0) < 1431918169) switch (i18 | 0) {
   case 844715353:
    break;
   default:
    break L63;
   } else if ((i18 | 0) < 1498831189) switch (i18 | 0) {
   case 1431918169:
    break L72;
   default:
    break L63;
   } else switch (i18 | 0) {
   case 1498831189:
    break L72;
   default:
    break L63;
   } while (0);
   HEAP32[i24 + 28 >> 2] = 1;
   HEAP32[i24 + 32 >> 2] = 2;
  } else if ((i23 | 0) == 31) {
   if (i13) switch ((i18 & 255) << 24 >> 24) {
   case 2:
    {
     HEAP32[i24 + 28 >> 2] = 7;
     HEAP32[i24 + 32 >> 2] = 8;
     break L63;
    }
   case 3:
    {
     HEAP32[i24 + 28 >> 2] = 9;
     HEAP32[i24 + 32 >> 2] = 10;
     break L63;
    }
   case 4:
    {
     HEAP32[i24 + 28 >> 2] = 11;
     HEAP32[i24 + 32 >> 2] = 12;
     break L63;
    }
   default:
    break L63;
   }
   L87 : do if ((i18 | 0) < 1431918169) switch (i18 | 0) {
   case 844715353:
    break;
   default:
    break L63;
   } else if ((i18 | 0) < 1498831189) switch (i18 | 0) {
   case 1431918169:
    break L87;
   default:
    break L63;
   } else switch (i18 | 0) {
   case 1498831189:
    break L87;
   default:
    break L63;
   } while (0);
   HEAP32[i24 + 28 >> 2] = 7;
   HEAP32[i24 + 32 >> 2] = 8;
  } while (0);
  i28 = i24 + 60 | 0;
  _SDL_FreeSurface(HEAP32[i28 >> 2] | 0);
  HEAP32[i28 >> 2] = 0;
 } while (0);
 if (!(HEAP32[i25 >> 2] | 0)) if (!(HEAP32[i25 + 4 >> 2] | 0)) {
  i1 = HEAP32[i25 + 8 >> 2] | 0;
  if ((i1 | 0) < (HEAP32[i24 + 8 >> 2] | 0)) i23 = 45; else {
   i2 = HEAP32[i25 + 12 >> 2] | 0;
   if ((i2 | 0) < (HEAP32[i24 + 12 >> 2] | 0)) i23 = 45; else if ((i1 | 0) == (i14 | 0) & (i2 | 0) == (i15 | 0)) {
    i8 = 0;
    i9 = 0;
   } else if ((i1 << 1 | 0) == (i14 | 0) & (i2 << 1 | 0) == (i15 | 0)) {
    i8 = 1;
    i9 = 0;
   } else i23 = 45;
  }
 } else i23 = 45; else i23 = 45;
 if ((i23 | 0) == 45) {
  i1 = i24 + 60 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   _SDL_PixelFormatEnumToMasks(i18, i26, i19, i20, i16, i17) | 0;
   i28 = _SDL_CreateRGBSurfaceFrom(i7, i14, i15, HEAP32[i26 >> 2] | 0, i3, HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = i28;
   if (!i28) {
    i2 = 0;
    i1 = i7;
   } else i23 = 48;
  } else {
   HEAP32[i2 + 8 >> 2] = i14;
   HEAP32[i2 + 12 >> 2] = i15;
   HEAP32[i2 + 20 >> 2] = i7;
   HEAP32[i2 + 16 >> 2] = i3;
   i23 = 48;
  }
  do if ((i23 | 0) == 48) {
   i2 = i24 + 56 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    _SDL_PixelFormatEnumToMasks(i18, i26, i19, i20, i16, i17) | 0;
    i1 = _SDL_CreateRGBSurface(0, HEAP32[i24 + 8 >> 2] | 0, HEAP32[i24 + 12 >> 2] | 0, HEAP32[i26 >> 2] | 0, HEAP32[i19 >> 2] | 0, HEAP32[i20 >> 2] | 0, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0) | 0;
    HEAP32[i2 >> 2] = i1;
    if (!i1) {
     i2 = 0;
     i1 = i7;
     break;
    }
   }
   i2 = 1;
   i3 = HEAP32[i1 + 16 >> 2] | 0;
   i1 = HEAP32[i1 + 20 >> 2] | 0;
  } while (0);
  if (i2) {
   i8 = 0;
   i9 = 1;
   i7 = i1;
  } else {
   i28 = -1;
   STACKTOP = i27;
   return i28 | 0;
  }
 }
 i1 = HEAP32[i24 >> 2] | 0;
 L115 : do if ((i1 | 0) < 1431918169) if ((i1 | 0) < 844715353) {
  switch (i1 | 0) {
  case 842094169:
   break;
  default:
   {
    i23 = 58;
    break L115;
   }
  }
  i4 = HEAP32[i24 + 52 >> 2] | 0;
  i5 = HEAP32[i24 + 48 >> 2] | 0;
  i6 = HEAP32[i24 + 44 >> 2] | 0;
  break;
 } else {
  switch (i1 | 0) {
  case 844715353:
   break;
  default:
   {
    i23 = 58;
    break L115;
   }
  }
  i6 = HEAP32[i24 + 44 >> 2] | 0;
  i4 = i6 + 1 | 0;
  i5 = i6 + 3 | 0;
  break;
 } else {
  if ((i1 | 0) < 1448433993) {
   switch (i1 | 0) {
   case 1431918169:
    break;
   default:
    {
     i23 = 58;
     break L115;
    }
   }
   i6 = HEAP32[i24 + 44 >> 2] | 0;
   i4 = i6 + 3 | 0;
   i5 = i6 + 1 | 0;
   break;
  }
  if ((i1 | 0) < 1498831189) {
   switch (i1 | 0) {
   case 1448433993:
    break;
   default:
    {
     i23 = 58;
     break L115;
    }
   }
   i4 = HEAP32[i24 + 48 >> 2] | 0;
   i5 = HEAP32[i24 + 52 >> 2] | 0;
   i6 = HEAP32[i24 + 44 >> 2] | 0;
   break;
  } else {
   switch (i1 | 0) {
   case 1498831189:
    break;
   default:
    {
     i23 = 58;
     break L115;
    }
   }
   i6 = HEAP32[i24 + 44 >> 2] | 0;
   i4 = i6;
   i5 = i6 + 2 | 0;
   i6 = i6 + 1 | 0;
   break;
  }
 } while (0);
 if ((i23 | 0) == 58) {
  i28 = _SDL_SetError(59611, i21) | 0;
  STACKTOP = i27;
  return i28 | 0;
 }
 i1 = (i3 | 0) / (i22 | 0) | 0;
 i2 = HEAP32[i24 + 8 >> 2] | 0;
 if (!i8) FUNCTION_TABLE_viiiiiiiii[HEAP32[i24 + 28 >> 2] & 15](HEAP32[i24 + 20 >> 2] | 0, HEAP32[i24 + 24 >> 2] | 0, i6, i5, i4, i7, HEAP32[i24 + 12 >> 2] | 0, i2, i1 - i2 | 0); else FUNCTION_TABLE_viiiiiiiii[HEAP32[i24 + 32 >> 2] & 15](HEAP32[i24 + 20 >> 2] | 0, HEAP32[i24 + 24 >> 2] | 0, i6, i5, i4, i7, HEAP32[i24 + 12 >> 2] | 0, i2, i1 - (i2 << 1) | 0);
 if (!i9) {
  i28 = 0;
  STACKTOP = i27;
  return i28 | 0;
 };
 HEAP32[i26 >> 2] = HEAP32[i25 >> 2];
 HEAP32[i26 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
 HEAP32[i26 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
 HEAP32[i26 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
 _SDL_SoftStretch(HEAP32[i24 + 56 >> 2] | 0, i26, HEAP32[i24 + 60 >> 2] | 0, 0) | 0;
 i28 = 0;
 STACKTOP = i27;
 return i28 | 0;
}

function _GLES2_SelectProgram(i13, i1, i3) {
 i13 = i13 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, f19 = f0;
 i8 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i4 = i17;
 i14 = i17 + 8 | 0;
 i15 = i13 + 320 | 0;
 i16 = HEAP32[i15 >> 2] | 0;
 switch (i1 | 0) {
 case 0:
  {
   i1 = 1;
   i8 = 9;
   break;
  }
 case 1:
  {
   i1 = 2;
   i8 = 9;
   break;
  }
 case 2:
  {
   i1 = 3;
   i8 = 9;
   break;
  }
 case 3:
  {
   i1 = 5;
   i8 = 9;
   break;
  }
 case 4:
  {
   i1 = 4;
   i8 = 9;
   break;
  }
 case 5:
  {
   i1 = 6;
   i8 = 9;
   break;
  }
 case 6:
  {
   i1 = 7;
   i8 = 9;
   break;
  }
 case 7:
  {
   i1 = 8;
   i8 = 9;
   break;
  }
 default:
  {}
 }
 if ((i8 | 0) == 9) {
  i10 = _GLES2_CacheShader(i13, 0, i3) | 0;
  if (i10 | 0) {
   i5 = _GLES2_CacheShader(i13, i1, i3) | 0;
   L12 : do if (!i5) i5 = 0; else {
    i12 = i16 + 268 | 0;
    i1 = HEAP32[i12 >> 2] | 0;
    if (i1 | 0) if ((HEAP32[i1 + 8 >> 2] | 0) == (i10 | 0)) if ((HEAP32[i1 + 12 >> 2] | 0) == (i5 | 0)) {
     i16 = 0;
     STACKTOP = i17;
     return i16 | 0;
    }
    i11 = HEAP32[i15 >> 2] | 0;
    i9 = i11 + 260 | 0;
    i1 = HEAP32[i9 >> 2] | 0;
    i7 = i1;
    L19 : do if (!i1) i8 = 24; else {
     i6 = i1;
     while (1) {
      if ((HEAP32[i6 + 8 >> 2] | 0) == (i10 | 0)) if ((HEAP32[i6 + 12 >> 2] | 0) == (i5 | 0)) break;
      i2 = HEAP32[i6 + 156 >> 2] | 0;
      if (!i2) {
       i8 = 24;
       break L19;
      } else i6 = i2;
     }
     if ((i1 | 0) == (i6 | 0)) break;
     i3 = i6 + 156 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i2 = i6 + 152 | 0;
     if (i4 | 0) HEAP32[i4 + 152 >> 2] = HEAP32[i2 >> 2];
     i5 = HEAP32[i2 >> 2] | 0;
     if (i5 | 0) HEAP32[i5 + 156 >> 2] = i4;
     HEAP32[i2 >> 2] = 0;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i1 + 152 >> 2] = i6;
     HEAP32[i9 >> 2] = i6;
     i1 = i6;
     i8 = 49;
    } while (0);
    L35 : do if ((i8 | 0) == 24) {
     i1 = _SDL_calloc(1, 160) | 0;
     do if (!i1) _SDL_Error(0) | 0; else {
      HEAP32[i1 + 8 >> 2] = i10;
      HEAP32[i1 + 12 >> 2] = i5;
      HEAP32[i1 + 4 >> 2] = i3;
      i7 = FUNCTION_TABLE_i[HEAP32[i11 + 48 >> 2] & 7]() | 0;
      HEAP32[i1 >> 2] = i7;
      i8 = i11 + 20 | 0;
      FUNCTION_TABLE_vii[HEAP32[i8 >> 2] & 127](i7, HEAP32[i10 >> 2] | 0);
      FUNCTION_TABLE_vii[HEAP32[i8 >> 2] & 127](HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0);
      i8 = i11 + 24 | 0;
      FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 63](HEAP32[i1 >> 2] | 0, 0, 41596);
      FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 63](HEAP32[i1 >> 2] | 0, 1, 41607);
      FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 63](HEAP32[i1 >> 2] | 0, 2, 41618);
      FUNCTION_TABLE_viii[HEAP32[i8 >> 2] & 63](HEAP32[i1 >> 2] | 0, 3, 41626);
      FUNCTION_TABLE_vi[HEAP32[i11 + 132 >> 2] & 511](HEAP32[i1 >> 2] | 0);
      FUNCTION_TABLE_viii[HEAP32[i11 + 116 >> 2] & 63](HEAP32[i1 >> 2] | 0, 35714, i14);
      if (!(HEAP32[i14 >> 2] | 0)) {
       FUNCTION_TABLE_vi[HEAP32[i11 + 56 >> 2] & 511](HEAP32[i1 >> 2] | 0);
       _SDL_free(i1);
       _SDL_SetError(41635, i4) | 0;
       break;
      }
      i4 = i11 + 128 | 0;
      i8 = i1 + 16 | 0;
      HEAP32[i8 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 41665) | 0;
      i18 = i1 + 36 | 0;
      HEAP32[i18 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 41678) | 0;
      i3 = i1 + 32 | 0;
      HEAP32[i3 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 41690) | 0;
      i6 = i1 + 20 | 0;
      HEAP32[i6 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 41702) | 0;
      i7 = i1 + 24 | 0;
      HEAP32[i7 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 41712) | 0;
      i2 = i1 + 28 | 0;
      HEAP32[i2 >> 2] = FUNCTION_TABLE_iii[HEAP32[i4 >> 2] & 63](HEAP32[i1 >> 2] | 0, 41725) | 0;
      i4 = i1 + 80 | 0;
      HEAP32[i4 >> 2] = -1;
      HEAP32[i4 + 4 >> 2] = -1;
      FUNCTION_TABLE_vi[HEAP32[i11 + 180 >> 2] & 511](HEAP32[i1 >> 2] | 0);
      i4 = i11 + 168 | 0;
      FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i18 >> 2] | 0, 2);
      FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i3 >> 2] | 0, 1);
      FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i6 >> 2] | 0, 0);
      FUNCTION_TABLE_viiii[HEAP32[i11 + 176 >> 2] & 63](HEAP32[i8 >> 2] | 0, 1, 0, i1 + 88 | 0);
      i8 = i11 + 172 | 0;
      FUNCTION_TABLE_viffff[HEAP32[i8 >> 2] & 3](HEAP32[i7 >> 2] | 0, Math_fround(1.0), Math_fround(1.0), Math_fround(1.0), Math_fround(1.0));
      FUNCTION_TABLE_viffff[HEAP32[i8 >> 2] & 3](HEAP32[i2 >> 2] | 0, Math_fround(1.0), Math_fround(1.0), Math_fround(1.0), Math_fround(1.0));
      i2 = HEAP32[i9 >> 2] | 0;
      if (!i2) i2 = i11 + 264 | 0; else {
       HEAP32[i1 + 156 >> 2] = i2;
       i2 = i2 + 152 | 0;
      }
      HEAP32[i2 >> 2] = i1;
      HEAP32[i9 >> 2] = i1;
      i8 = i11 + 256 | 0;
      i18 = HEAP32[i8 >> 2] | 0;
      HEAP32[i8 >> 2] = i18 + 1;
      i10 = i10 + 12 | 0;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
      i10 = i5 + 12 | 0;
      HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 1;
      if ((i18 | 0) <= 7) {
       i8 = 49;
       break L35;
      }
      i7 = i11 + 264 | 0;
      i2 = HEAP32[i7 >> 2] | 0;
      i6 = HEAP32[i2 + 8 >> 2] | 0;
      i10 = i6 + 12 | 0;
      i18 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = i18 + -1;
      if ((i18 | 0) < 2) {
       i4 = HEAP32[i15 >> 2] | 0;
       i5 = i6 + 24 | 0;
       i3 = HEAP32[i5 >> 2] | 0;
       i2 = i6 + 20 | 0;
       if (i3 | 0) HEAP32[i3 + 20 >> 2] = HEAP32[i2 >> 2];
       i2 = HEAP32[i2 >> 2] | 0;
       if (i2 | 0) HEAP32[i2 + 24 >> 2] = i3;
       i2 = i4 + 252 | 0;
       if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
       i2 = i4 + 248 | 0;
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       FUNCTION_TABLE_vi[HEAP32[i4 + 60 >> 2] & 511](HEAP32[i6 >> 2] | 0);
       _SDL_free(i6);
       i2 = HEAP32[i7 >> 2] | 0;
      }
      i6 = HEAP32[i2 + 12 >> 2] | 0;
      i10 = i6 + 12 | 0;
      i18 = HEAP32[i10 >> 2] | 0;
      HEAP32[i10 >> 2] = i18 + -1;
      if ((i18 | 0) < 2) {
       i4 = HEAP32[i15 >> 2] | 0;
       i5 = i6 + 24 | 0;
       i3 = HEAP32[i5 >> 2] | 0;
       i2 = i6 + 20 | 0;
       if (i3 | 0) HEAP32[i3 + 20 >> 2] = HEAP32[i2 >> 2];
       i2 = HEAP32[i2 >> 2] | 0;
       if (i2 | 0) HEAP32[i2 + 24 >> 2] = i3;
       i2 = i4 + 252 | 0;
       if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
       i2 = i4 + 248 | 0;
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + -1;
       FUNCTION_TABLE_vi[HEAP32[i4 + 60 >> 2] & 511](HEAP32[i6 >> 2] | 0);
       _SDL_free(i6);
       i2 = HEAP32[i7 >> 2] | 0;
      }
      FUNCTION_TABLE_vi[HEAP32[i11 + 56 >> 2] & 511](HEAP32[i2 >> 2] | 0);
      i18 = HEAP32[(HEAP32[i7 >> 2] | 0) + 152 >> 2] | 0;
      HEAP32[i7 >> 2] = i18;
      _SDL_free(HEAP32[i18 + 156 >> 2] | 0);
      HEAP32[(HEAP32[i7 >> 2] | 0) + 156 >> 2] = 0;
      HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
      i8 = 49;
      break L35;
     } while (0);
     break L12;
    } while (0);
    FUNCTION_TABLE_vi[HEAP32[i16 + 180 >> 2] & 511](HEAP32[i1 >> 2] | 0);
    HEAP32[i12 >> 2] = i1;
    i3 = HEAP32[i15 >> 2] | 0;
    i1 = HEAP32[i13 + 224 >> 2] | 0;
    if (i1 | 0) {
     i2 = HEAP32[i13 + 228 >> 2] | 0;
     if (i2 | 0) {
      HEAPF32[i14 >> 2] = Math_fround(Math_fround(2.0) / Math_fround(i1 | 0));
      i1 = i14 + 4 | 0;
      HEAP32[i1 >> 2] = 0;
      HEAP32[i1 + 4 >> 2] = 0;
      HEAP32[i1 + 8 >> 2] = 0;
      HEAP32[i1 + 12 >> 2] = 0;
      i1 = (HEAP32[i13 + 308 >> 2] | 0) != 0;
      f19 = Math_fround(i2 | 0);
      HEAPF32[i14 + 20 >> 2] = Math_fround((i1 ? Math_fround(2.0) : Math_fround(-2.0)) / f19);
      i18 = i14 + 24 | 0;
      HEAP32[i18 >> 2] = 0;
      HEAP32[i18 + 4 >> 2] = 0;
      HEAP32[i18 + 8 >> 2] = 0;
      HEAP32[i18 + 12 >> 2] = 0;
      HEAP32[i18 + 16 >> 2] = 0;
      HEAP32[i18 + 20 >> 2] = 0;
      HEAPF32[i14 + 48 >> 2] = Math_fround(-1.0);
      HEAPF32[i14 + 52 >> 2] = i1 ? Math_fround(-1.0) : Math_fround(1.0);
      HEAPF32[i14 + 56 >> 2] = Math_fround(0.0);
      HEAPF32[i14 + 60 >> 2] = Math_fround(1.0);
      i1 = i3 + 268 | 0;
      if (_SDL_memcmp((HEAP32[i1 >> 2] | 0) + 88 | 0, i14, 64) | 0) {
       FUNCTION_TABLE_viiii[HEAP32[i3 + 176 >> 2] & 63](HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0, 1, 0, i14);
       _SDL_memcpy((HEAP32[i1 >> 2] | 0) + 88 | 0, i14, 64) | 0;
      }
     }
    }
    i18 = 0;
    STACKTOP = i17;
    return i18 | 0;
   } while (0);
   if ((HEAP32[i10 + 12 >> 2] | 0) < 1) {
    i3 = HEAP32[i15 >> 2] | 0;
    i4 = i10 + 24 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    i1 = i10 + 20 | 0;
    if (i2 | 0) HEAP32[i2 + 20 >> 2] = HEAP32[i1 >> 2];
    i1 = HEAP32[i1 >> 2] | 0;
    if (i1 | 0) HEAP32[i1 + 24 >> 2] = i2;
    i1 = i3 + 252 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i18 = i3 + 248 | 0;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
    FUNCTION_TABLE_vi[HEAP32[i3 + 60 >> 2] & 511](HEAP32[i10 >> 2] | 0);
    _SDL_free(i10);
   }
   if (i5 | 0) if ((HEAP32[i5 + 12 >> 2] | 0) < 1) {
    i3 = HEAP32[i15 >> 2] | 0;
    i4 = i5 + 24 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    i1 = i5 + 20 | 0;
    if (i2 | 0) HEAP32[i2 + 20 >> 2] = HEAP32[i1 >> 2];
    i1 = HEAP32[i1 >> 2] | 0;
    if (i1 | 0) HEAP32[i1 + 24 >> 2] = i2;
    i1 = i3 + 252 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
    i18 = i3 + 248 | 0;
    HEAP32[i18 >> 2] = (HEAP32[i18 >> 2] | 0) + -1;
    FUNCTION_TABLE_vi[HEAP32[i3 + 60 >> 2] & 511](HEAP32[i5 >> 2] | 0);
    _SDL_free(i5);
   }
  }
 }
 HEAP32[i16 + 268 >> 2] = 0;
 i18 = -1;
 STACKTOP = i17;
 return i18 | 0;
}

function _SDL_ConvertSurface(i24, i5, i26) {
 i24 = i24 | 0;
 i5 = i5 | 0;
 i26 = i26 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i27 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i22 = i27 + 32 | 0;
 i16 = i27 + 24 | 0;
 i13 = i27 + 16 | 0;
 i6 = i27 + 8 | 0;
 i4 = i27;
 i25 = i27 + 56 | 0;
 i10 = i27 + 40 | 0;
 i12 = i27 + 74 | 0;
 i14 = i27 + 73 | 0;
 i15 = i27 + 72 | 0;
 i11 = i5 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  L3 : do if ((i3 | 0) > 0) {
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   i1 = 0;
   do {
    if ((HEAP8[i2 + (i1 << 2) >> 0] | 0) != -1) break L3;
    if ((HEAP8[i2 + (i1 << 2) + 1 >> 0] | 0) != -1) break L3;
    if ((HEAP8[i2 + (i1 << 2) + 2 >> 0] | 0) != -1) break L3;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) < (i3 | 0));
  } else i1 = 0; while (0);
  if ((i1 | 0) == (i3 | 0)) {
   _SDL_SetError(47684, i4) | 0;
   i26 = 0;
   STACKTOP = i27;
   return i26 | 0;
  }
 }
 i7 = i24 + 8 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i8 = i24 + 12 | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 i23 = i5 + 24 | 0;
 i1 = _SDL_MasksToPixelFormatEnum(HEAPU8[i5 + 8 >> 0] | 0, HEAP32[i5 + 12 >> 2] | 0, HEAP32[i5 + 16 >> 2] | 0, HEAP32[i5 + 20 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
 if (!i1) {
  _SDL_SetError(47710, i6) | 0;
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 i21 = _SDL_CreateRGBSurfaceWithFormat(0, i2, i3, 0, i1) | 0;
 if (!i21) {
  i26 = 0;
  STACKTOP = i27;
  return i26 | 0;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 if (i1 | 0) {
  i2 = i21 + 4 | 0;
  i3 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
  if (i3 | 0) {
   _SDL_memcpy(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, HEAP32[i1 >> 2] << 2) | 0;
   HEAP32[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[HEAP32[i11 >> 2] >> 2];
  }
 }
 i9 = i24 + 52 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i19 = i1 + 68 | 0;
 i20 = HEAP32[i19 >> 2] | 0;
 i18 = i1 + 76 | 0;
 i3 = HEAP8[i18 >> 0] | 0;
 i4 = HEAP8[i1 + 77 >> 0] | 0;
 i5 = HEAP8[i1 + 78 >> 0] | 0;
 i6 = HEAP8[i1 + 79 >> 0] | 0;
 HEAP32[i18 >> 2] = -1;
 HEAP32[i19 >> 2] = 0;
 _SDL_InvalidateMap(i1);
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = 0;
 HEAP32[i10 + 8 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i10 + 12 >> 2] = HEAP32[i8 >> 2];
 i1 = HEAP32[i9 >> 2] | 0;
 do if ((HEAP32[i1 >> 2] | 0) == (i21 | 0)) {
  i2 = HEAP32[(HEAP32[i21 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if (i2 | 0) if ((HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
   i19 = 21;
   break;
  }
  i2 = HEAP32[(HEAP32[i24 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if (!i2) i19 = 23; else if ((HEAP32[i1 + 84 >> 2] | 0) == (HEAP32[i2 + 8 >> 2] | 0)) i19 = 23; else i19 = 21;
 } else i19 = 21; while (0);
 if ((i19 | 0) == 21) if ((_SDL_MapSurface(i24, i21) | 0) >= 0) {
  i1 = HEAP32[i9 >> 2] | 0;
  i19 = 23;
 }
 if ((i19 | 0) == 23) FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i24, i10, i21, i10) | 0;
 i18 = i21 + 52 | 0;
 i17 = HEAP32[i18 >> 2] | 0;
 HEAP8[i17 + 76 >> 0] = i3;
 HEAP8[i17 + 77 >> 0] = i4;
 HEAP8[i17 + 78 >> 0] = i5;
 HEAP8[i17 + 79 >> 0] = i6;
 HEAP32[i17 + 68 >> 2] = i20 & -28945;
 i17 = HEAP32[i9 >> 2] | 0;
 HEAP8[i17 + 76 >> 0] = i3;
 HEAP8[i17 + 77 >> 0] = i4;
 HEAP8[i17 + 78 >> 0] = i5;
 HEAP8[i17 + 79 >> 0] = i6;
 HEAP32[i17 + 68 >> 2] = i20;
 _SDL_InvalidateMap(i17);
 i17 = i24 + 4 | 0;
 do if (i20 & 256 | 0) {
  i1 = HEAP32[i17 >> 2] | 0;
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  if (i3) {
   i1 = HEAP32[i11 >> 2] | 0;
   if (i1 | 0) {
    i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) <= (HEAP32[i1 >> 2] | 0)) if (!(_SDL_memcmp(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, i2 << 2) | 0)) {
     i4 = HEAP32[(HEAP32[i9 >> 2] | 0) + 72 >> 2] | 0;
     i5 = HEAP32[(HEAP32[i21 + 4 >> 2] | 0) + 4 >> 2] | 0;
     i6 = (i5 | 0) == 0;
     if (!i6) if ((HEAP32[i5 >> 2] | 0) >>> 0 <= i4 >>> 0) {
      HEAP32[i13 >> 2] = 47731;
      _SDL_SetError(59509, i13) | 0;
      break;
     }
     i1 = HEAP32[i18 >> 2] | 0;
     i22 = i1 + 68 | 0;
     i2 = HEAP32[i22 >> 2] | 0;
     i3 = i2 | 256;
     HEAP32[i22 >> 2] = i3;
     HEAP32[i1 + 72 >> 2] = i4;
     if (!i6) {
      HEAP8[(HEAP32[i5 + 4 >> 2] | 0) + (i4 << 2) + 3 >> 0] = 0;
      i22 = i5 + 8 | 0;
      i16 = (HEAP32[i22 >> 2] | 0) + 1 | 0;
      HEAP32[i22 >> 2] = (i16 | 0) == 0 ? 1 : i16;
     }
     if ((i3 | 0) == (i2 | 0)) break;
     _SDL_InvalidateMap(i1);
     break;
    }
   }
   if (HEAP32[i23 >> 2] | 0) break;
   i1 = HEAP32[i17 >> 2] | 0;
  }
  _SDL_GetRGBA(HEAP32[(HEAP32[i9 >> 2] | 0) + 72 >> 2] | 0, i1, i25, i12, i14, i15);
  i13 = i21 + 4 | 0;
  i4 = _SDL_MapRGBA(HEAP32[i13 >> 2] | 0, HEAP8[i25 >> 0] | 0, HEAP8[i12 >> 0] | 0, HEAP8[i14 >> 0] | 0, HEAP8[i15 >> 0] | 0) | 0;
  i5 = HEAP32[(HEAP32[i13 >> 2] | 0) + 4 >> 2] | 0;
  i6 = (i5 | 0) == 0;
  if (i6) i19 = 41; else if ((HEAP32[i5 >> 2] | 0) >>> 0 > i4 >>> 0) i19 = 41; else {
   HEAP32[i16 >> 2] = 47731;
   _SDL_SetError(59509, i16) | 0;
  }
  if ((i19 | 0) == 41) {
   i1 = HEAP32[i18 >> 2] | 0;
   i16 = i1 + 68 | 0;
   i2 = HEAP32[i16 >> 2] | 0;
   i3 = i2 | 256;
   HEAP32[i16 >> 2] = i3;
   HEAP32[i1 + 72 >> 2] = i4;
   if (!i6) {
    HEAP8[(HEAP32[i5 + 4 >> 2] | 0) + (i4 << 2) + 3 >> 0] = 0;
    i16 = i5 + 8 | 0;
    i15 = (HEAP32[i16 >> 2] | 0) + 1 | 0;
    HEAP32[i16 >> 2] = (i15 | 0) == 0 ? 1 : i15;
   }
   if ((i3 | 0) != (i2 | 0)) _SDL_InvalidateMap(i1);
  }
  if (HEAP32[(HEAP32[i18 >> 2] | 0) + 68 >> 2] & 256 | 0) {
   i1 = HEAP32[i13 >> 2] | 0;
   if (HEAP32[i1 + 24 >> 2] | 0) {
    i12 = i21 + 28 | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    if (!i2) if (!(HEAP32[i21 >> 2] & 2)) i2 = 0; else {
     _SDL_UnRLESurface(i21, 1);
     HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
     i2 = HEAP32[i12 >> 2] | 0;
     i1 = HEAP32[i13 >> 2] | 0;
    }
    i2 = i2 + 1 | 0;
    HEAP32[i12 >> 2] = i2;
    switch (HEAP8[i1 + 9 >> 0] | 0) {
    case 2:
     {
      i7 = HEAP32[i1 + 24 >> 2] & 65535 ^ 65535;
      i8 = i7 & HEAP32[(HEAP32[i18 >> 2] | 0) + 72 >> 2];
      i3 = HEAP32[i21 + 12 >> 2] | 0;
      if (i3) {
       i9 = HEAP32[i21 + 8 >> 2] | 0;
       i10 = (HEAP32[i21 + 16 >> 2] | 0) / 2 | 0;
       if (i9) {
        i11 = i8 & 65535;
        i6 = HEAP32[i21 + 20 >> 2] | 0;
        while (1) {
         i4 = i6;
         i5 = i9;
         while (1) {
          i5 = i5 + -1 | 0;
          if ((i7 & HEAPU16[i4 >> 1] | 0) == (i8 | 0)) HEAP16[i4 >> 1] = i11;
          if (!i5) break; else i4 = i4 + 2 | 0;
         }
         i3 = i3 + -1 | 0;
         if (!i3) break; else i6 = i6 + (i10 << 1) | 0;
        }
       }
      }
      break;
     }
    case 4:
     {
      i8 = ~HEAP32[i1 + 24 >> 2];
      i9 = HEAP32[(HEAP32[i18 >> 2] | 0) + 72 >> 2] & i8;
      i3 = HEAP32[i21 + 12 >> 2] | 0;
      if (i3) {
       i6 = i21 + 8 | 0;
       i7 = i21 + 16 | 0;
       i5 = HEAP32[i21 + 20 >> 2] | 0;
       while (1) {
        i3 = i3 + -1 | 0;
        i2 = HEAP32[i6 >> 2] | 0;
        if (i2 | 0) {
         i4 = i5;
         while (1) {
          i2 = i2 + -1 | 0;
          if ((HEAP32[i4 >> 2] & i8 | 0) == (i9 | 0)) HEAP32[i4 >> 2] = i9;
          if (!i2) break; else i4 = i4 + 4 | 0;
         }
        }
        if (!i3) break; else i5 = i5 + (((HEAP32[i7 >> 2] | 0) / 4 | 0) << 2) | 0;
       }
       i2 = HEAP32[i12 >> 2] | 0;
      }
      break;
     }
    default:
     {}
    }
    if (i2) {
     HEAP32[i12 >> 2] = i2 + -1;
     if ((i2 | 0) <= 1) {
      i2 = HEAP32[i21 >> 2] | 0;
      if (i2 & 2) {
       HEAP32[i21 >> 2] = i2 & -3;
       _SDL_RLESurface(i21) | 0;
       i1 = HEAP32[i13 >> 2] | 0;
      }
     }
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    do if (!i1) {
     i3 = HEAP32[i18 >> 2] | 0;
     i2 = i3 + 68 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     i19 = 76;
    } else if (!(HEAP32[i1 >> 2] | 0)) {
     HEAP32[i22 >> 2] = 47731;
     _SDL_SetError(59509, i22) | 0;
     break;
    } else {
     i3 = HEAP32[i18 >> 2] | 0;
     i2 = i3 + 68 | 0;
     i19 = HEAP32[i2 >> 2] | 0;
     HEAP8[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i3 + 72 >> 2] << 2) + 3 >> 0] = -1;
     i1 = i1 + 8 | 0;
     i22 = (HEAP32[i1 >> 2] | 0) + 1 | 0;
     HEAP32[i1 >> 2] = (i22 | 0) == 0 ? 1 : i22;
     i1 = i19;
     i19 = 76;
     break;
    } while (0);
    if ((i19 | 0) == 76) {
     i22 = i1 & -257;
     HEAP32[i2 >> 2] = i22;
     if ((i22 | 0) != (i1 | 0)) _SDL_InvalidateMap(i3);
    }
    i1 = HEAP32[i18 >> 2] | 0;
    i15 = i1 + 68 | 0;
    i22 = HEAP32[i15 >> 2] | 0;
    i16 = i22 & -113 | 16;
    HEAP32[i15 >> 2] = i16;
    if ((i16 | 0) != (i22 | 0)) _SDL_InvalidateMap(i1);
   }
  }
 } while (0);
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = HEAP32[i21 + 8 >> 2];
 HEAP32[i25 + 12 >> 2] = HEAP32[i21 + 12 >> 2];
 _SDL_IntersectRect(i24 + 36 | 0, i25, i21 + 36 | 0) | 0;
 if (!(HEAP32[(HEAP32[i17 >> 2] | 0) + 24 >> 2] | 0)) {
  if (i20 & 258 | 0) i19 = 84;
 } else if (HEAP32[i23 >> 2] | i20 & 258 | 0) i19 = 84;
 if ((i19 | 0) == 84) {
  i1 = HEAP32[i18 >> 2] | 0;
  i23 = i1 + 68 | 0;
  i25 = HEAP32[i23 >> 2] | 0;
  i24 = i25 & -113 | 16;
  HEAP32[i23 >> 2] = i24;
  if ((i24 | 0) != (i25 | 0)) _SDL_InvalidateMap(i1);
 }
 if (!(i20 & 4096 | i26 & 2)) {
  i26 = i21;
  STACKTOP = i27;
  return i26 | 0;
 }
 i1 = HEAP32[i18 >> 2] | 0;
 i24 = i1 + 68 | 0;
 i26 = HEAP32[i24 >> 2] | 0;
 i25 = i26 | 4096;
 HEAP32[i24 >> 2] = i25;
 if ((i25 | 0) == (i26 | 0)) {
  i26 = i21;
  STACKTOP = i27;
  return i26 | 0;
 }
 _SDL_InvalidateMap(i1);
 i26 = i21;
 STACKTOP = i27;
 return i26 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i35, i36, i37, i38, i39, i40, i41, i1) {
 i35 = i35 | 0;
 i36 = i36 | 0;
 i37 = i37 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i40 = i40 | 0;
 i41 = i41 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0;
 i42 = 0;
 i43 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i2 = i43 + 128 | 0;
 i1 = i43 + 112 | 0;
 i33 = i43 + 124 | 0;
 i34 = i43 + 120 | 0;
 i3 = i43 + 116 | 0;
 i4 = i43 + 108 | 0;
 i5 = i43 + 104 | 0;
 i6 = i43 + 100 | 0;
 i7 = i43 + 96 | 0;
 i8 = i43 + 92 | 0;
 i9 = i43 + 88 | 0;
 i10 = i43 + 84 | 0;
 i11 = i43 + 80 | 0;
 i12 = i43 + 76 | 0;
 i13 = i43 + 72 | 0;
 i14 = i43 + 68 | 0;
 i15 = i43 + 64 | 0;
 i16 = i43 + 60 | 0;
 i17 = i43 + 56 | 0;
 i18 = i43 + 52 | 0;
 i19 = i43 + 48 | 0;
 i20 = i43 + 44 | 0;
 i21 = i43 + 40 | 0;
 i22 = i43 + 36 | 0;
 i23 = i43 + 32 | 0;
 i24 = i43 + 28 | 0;
 i25 = i43 + 24 | 0;
 i26 = i43 + 20 | 0;
 i27 = i43 + 16 | 0;
 i28 = i43 + 12 | 0;
 i29 = i43 + 8 | 0;
 i30 = i43 + 4 | 0;
 i31 = i43;
 HEAP32[i39 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv(i2, i38);
 i32 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 83652) | 0;
 __ZNSt3__26localeD2Ev(i2);
 do switch (i41 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i33 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i34 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i34 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 99:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 12 >> 2] & 255](i34) | 0;
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i4 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 8 + 3 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + ((i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i5 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 12 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i7 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 33648, 33680) | 0;
   i42 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 33680, 33712) | 0;
   i42 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i10 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i11 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i12 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 28 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i13 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i14 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i14 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 4 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i15 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i16 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i17 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 33712, 33756) | 0;
   i42 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i20 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 33756, 33776) | 0;
   i42 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i21 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i22 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, 33776, 33808) | 0;
   i42 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i24 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 120:
  {
   i41 = HEAP32[(HEAP32[i35 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i26 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i41 & 63](i35, i1, i2, i38, i39, i40) | 0;
   break;
  }
 case 88:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 24 >> 2] & 255](i34) | 0;
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i28 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 8 + 3 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + ((i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i29 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i29 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i30 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i31 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 default:
  {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i42 = 26;
  }
 } while (0);
 if ((i42 | 0) == 26) i1 = HEAP32[i36 >> 2] | 0;
 STACKTOP = i43;
 return i1 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i35, i36, i37, i38, i39, i40, i41, i1) {
 i35 = i35 | 0;
 i36 = i36 | 0;
 i37 = i37 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i40 = i40 | 0;
 i41 = i41 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0;
 i42 = 0;
 i43 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i2 = i43 + 128 | 0;
 i1 = i43 + 112 | 0;
 i33 = i43 + 124 | 0;
 i34 = i43 + 120 | 0;
 i3 = i43 + 116 | 0;
 i4 = i43 + 108 | 0;
 i5 = i43 + 104 | 0;
 i6 = i43 + 100 | 0;
 i7 = i43 + 96 | 0;
 i8 = i43 + 92 | 0;
 i9 = i43 + 88 | 0;
 i10 = i43 + 84 | 0;
 i11 = i43 + 80 | 0;
 i12 = i43 + 76 | 0;
 i13 = i43 + 72 | 0;
 i14 = i43 + 68 | 0;
 i15 = i43 + 64 | 0;
 i16 = i43 + 60 | 0;
 i17 = i43 + 56 | 0;
 i18 = i43 + 52 | 0;
 i19 = i43 + 48 | 0;
 i20 = i43 + 44 | 0;
 i21 = i43 + 40 | 0;
 i22 = i43 + 36 | 0;
 i23 = i43 + 32 | 0;
 i24 = i43 + 28 | 0;
 i25 = i43 + 24 | 0;
 i26 = i43 + 20 | 0;
 i27 = i43 + 16 | 0;
 i28 = i43 + 12 | 0;
 i29 = i43 + 8 | 0;
 i30 = i43 + 4 | 0;
 i31 = i43;
 HEAP32[i39 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv(i2, i38);
 i32 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 83620) | 0;
 __ZNSt3__26localeD2Ev(i2);
 do switch (i41 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i33 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i34 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i34 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 99:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 12 >> 2] & 255](i34) | 0;
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i4 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 11 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + (i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) | 0;
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i5 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 12 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i7 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 73864, 73872) | 0;
   i42 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i9 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 73872, 73880) | 0;
   i42 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i10 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i11 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i12 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 28 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i13 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 16 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i14 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i14 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 4 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i15 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i16 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 8 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i17 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 73880, 73891) | 0;
   i42 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i20 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 73891, 73896) | 0;
   i42 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i21 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i22 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, 73896, 73904) | 0;
   i42 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i24 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 24 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 120:
  {
   i41 = HEAP32[(HEAP32[i35 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i26 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i41 & 63](i35, i1, i2, i38, i39, i40) | 0;
   break;
  }
 case 88:
  {
   i34 = i35 + 8 | 0;
   i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i34 >> 2] | 0) + 24 >> 2] & 255](i34) | 0;
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i28 >> 2] = HEAP32[i37 >> 2];
   i42 = HEAP8[i34 + 11 >> 0] | 0;
   i37 = i42 << 24 >> 24 < 0;
   i41 = i37 ? HEAP32[i34 >> 2] | 0 : i34;
   i42 = i41 + (i37 ? HEAP32[i34 + 4 >> 2] | 0 : i42 & 255) | 0;
   HEAP32[i1 >> 2] = HEAP32[i27 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i28 >> 2];
   HEAP32[i36 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i35, i1, i2, i38, i39, i40, i41, i42) | 0;
   i42 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i29 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i29 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i30 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i35, i40 + 20 | 0, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i31 >> 2] = HEAP32[i37 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i35, i36, i2, i39, i32);
   i42 = 26;
   break;
  }
 default:
  {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i42 = 26;
  }
 } while (0);
 if ((i42 | 0) == 26) i1 = HEAP32[i36 >> 2] | 0;
 STACKTOP = i43;
 return i1 | 0;
}

function _BlitRGBtoRGBSurfaceAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i20 = HEAP8[i3 + 63 >> 0] | 0;
 i21 = i20 & 255;
 i19 = HEAP32[i3 + 24 >> 2] | 0;
 i7 = HEAP32[i3 + 28 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i32 = HEAP32[i3 + 16 >> 2] >> 2;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 i31 = HEAP32[i3 + 36 >> 2] >> 2;
 i4 = i7 + -1 | 0;
 i7 = (i7 | 0) == 0;
 if (i20 << 24 >> 24 != -128) {
  if (i7) return;
  i20 = (i19 + 3 | 0) / 4 | 0;
  i9 = i19 & 255;
  if (!(i9 & 3)) {
   while (1) {
    i3 = i20;
    while (1) {
     i29 = HEAP32[i1 >> 2] | 0;
     i28 = HEAP32[i2 >> 2] | 0;
     i30 = i28 & 16711935;
     i28 = i28 & 65280;
     HEAP32[i2 >> 2] = ((Math_imul((i29 & 65280) - i28 | 0, i21) | 0) >>> 8) + i28 & 65280 | ((Math_imul((i29 & 16711935) - i30 | 0, i21) | 0) >>> 8) + i30 & 16711935 | -16777216;
     i30 = i2 + 4 | 0;
     i29 = HEAP32[i1 + 4 >> 2] | 0;
     i28 = HEAP32[i30 >> 2] | 0;
     i27 = i28 & 16711935;
     i28 = i28 & 65280;
     HEAP32[i30 >> 2] = ((Math_imul((i29 & 65280) - i28 | 0, i21) | 0) >>> 8) + i28 & 65280 | ((Math_imul((i29 & 16711935) - i27 | 0, i21) | 0) >>> 8) + i27 & 16711935 | -16777216;
     i30 = i2 + 8 | 0;
     i27 = HEAP32[i1 + 8 >> 2] | 0;
     i29 = HEAP32[i30 >> 2] | 0;
     i28 = i29 & 16711935;
     i29 = i29 & 65280;
     HEAP32[i30 >> 2] = ((Math_imul((i27 & 65280) - i29 | 0, i21) | 0) >>> 8) + i29 & 65280 | ((Math_imul((i27 & 16711935) - i28 | 0, i21) | 0) >>> 8) + i28 & 16711935 | -16777216;
     i30 = i2 + 12 | 0;
     i28 = HEAP32[i1 + 12 >> 2] | 0;
     i27 = HEAP32[i30 >> 2] | 0;
     i29 = i27 & 16711935;
     i27 = i27 & 65280;
     HEAP32[i30 >> 2] = ((Math_imul((i28 & 65280) - i27 | 0, i21) | 0) >>> 8) + i27 & 65280 | ((Math_imul((i28 & 16711935) - i29 | 0, i21) | 0) >>> 8) + i29 & 16711935 | -16777216;
     i1 = i1 + 16 | 0;
     i2 = i2 + 16 | 0;
     if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
    }
    if (!i4) break; else {
     i2 = i2 + (i31 << 2) | 0;
     i1 = i1 + (i32 << 2) | 0;
     i4 = i4 + -1 | 0;
    }
   }
   return;
  } else {
   i5 = i2;
   i3 = i1;
   i8 = i4;
  }
  L13 : while (1) {
   switch (i9 & 3) {
   case 1:
    {
     i14 = i20;
     i17 = i5;
     i18 = i3;
     i5 = 27;
     break;
    }
   case 3:
    {
     i10 = i20;
     i12 = i5;
     i13 = i3;
     i5 = 25;
     break;
    }
   case 2:
    {
     i11 = i20;
     i15 = i5;
     i16 = i3;
     i5 = 26;
     break;
    }
   default:
    {
     i5 = 28;
     break L13;
    }
   }
   while (1) if ((i5 | 0) == 25) {
    i15 = HEAP32[i13 >> 2] | 0;
    i16 = HEAP32[i12 >> 2] | 0;
    i11 = i16 & 16711935;
    i16 = i16 & 65280;
    HEAP32[i12 >> 2] = ((Math_imul((i15 & 65280) - i16 | 0, i21) | 0) >>> 8) + i16 & 65280 | ((Math_imul((i15 & 16711935) - i11 | 0, i21) | 0) >>> 8) + i11 & 16711935 | -16777216;
    i11 = i10;
    i15 = i12 + 4 | 0;
    i16 = i13 + 4 | 0;
    i5 = 26;
    continue;
   } else if ((i5 | 0) == 26) {
    i17 = HEAP32[i16 >> 2] | 0;
    i18 = HEAP32[i15 >> 2] | 0;
    i14 = i18 & 16711935;
    i18 = i18 & 65280;
    HEAP32[i15 >> 2] = ((Math_imul((i17 & 65280) - i18 | 0, i21) | 0) >>> 8) + i18 & 65280 | ((Math_imul((i17 & 16711935) - i14 | 0, i21) | 0) >>> 8) + i14 & 16711935 | -16777216;
    i14 = i11;
    i17 = i15 + 4 | 0;
    i18 = i16 + 4 | 0;
    i5 = 27;
    continue;
   } else if ((i5 | 0) == 27) {
    i3 = HEAP32[i18 >> 2] | 0;
    i5 = HEAP32[i17 >> 2] | 0;
    i6 = i5 & 16711935;
    i5 = i5 & 65280;
    HEAP32[i17 >> 2] = ((Math_imul((i3 & 65280) - i5 | 0, i21) | 0) >>> 8) + i5 & 65280 | ((Math_imul((i3 & 16711935) - i6 | 0, i21) | 0) >>> 8) + i6 & 16711935 | -16777216;
    i6 = i18 + 4 | 0;
    i3 = i17 + 4 | 0;
    if ((i14 | 0) <= 1) break;
    i12 = HEAP32[i6 >> 2] | 0;
    i13 = HEAP32[i3 >> 2] | 0;
    i10 = i13 & 16711935;
    i13 = i13 & 65280;
    HEAP32[i3 >> 2] = ((Math_imul((i12 & 65280) - i13 | 0, i21) | 0) >>> 8) + i13 & 65280 | ((Math_imul((i12 & 16711935) - i10 | 0, i21) | 0) >>> 8) + i10 & 16711935 | -16777216;
    i10 = i14 + -1 | 0;
    i12 = i17 + 8 | 0;
    i13 = i18 + 8 | 0;
    i5 = 25;
    continue;
   }
   if (!i8) {
    i5 = 30;
    break;
   } else {
    i5 = i3 + (i31 << 2) | 0;
    i3 = i6 + (i32 << 2) | 0;
    i8 = i8 + -1 | 0;
   }
  }
  if ((i5 | 0) != 28) if ((i5 | 0) == 30) return;
 }
 if (i7) return;
 i8 = (i19 + 3 | 0) / 4 | 0;
 i3 = i19 & 255;
 switch (i3 & 3) {
 case 0:
  {
   while (1) {
    i3 = i8;
    while (1) {
     i29 = HEAP32[i1 >> 2] | 0;
     i30 = HEAP32[i2 >> 2] | 0;
     i27 = i2 + 4 | 0;
     HEAP32[i2 >> 2] = (((i30 & 16711422) + (i29 & 16711422) | 0) >>> 1) + (i29 & 65793 & i30) | -16777216;
     i30 = HEAP32[i1 + 4 >> 2] | 0;
     i29 = HEAP32[i27 >> 2] | 0;
     i28 = i2 + 8 | 0;
     HEAP32[i27 >> 2] = (((i29 & 16711422) + (i30 & 16711422) | 0) >>> 1) + (i30 & 65793 & i29) | -16777216;
     i27 = HEAP32[i1 + 8 >> 2] | 0;
     i29 = HEAP32[i28 >> 2] | 0;
     i30 = i2 + 12 | 0;
     HEAP32[i28 >> 2] = (((i29 & 16711422) + (i27 & 16711422) | 0) >>> 1) + (i27 & 65793 & i29) | -16777216;
     i28 = i1;
     i1 = i1 + 16 | 0;
     i28 = HEAP32[i28 + 12 >> 2] | 0;
     i29 = HEAP32[i30 >> 2] | 0;
     i2 = i2 + 16 | 0;
     HEAP32[i30 >> 2] = (((i29 & 16711422) + (i28 & 16711422) | 0) >>> 1) + (i28 & 65793 & i29) | -16777216;
     if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
    }
    if (!i4) break; else {
     i1 = i1 + (i32 << 2) | 0;
     i2 = i2 + (i31 << 2) | 0;
     i4 = i4 + -1 | 0;
    }
   }
   return;
  }
 case 1:
  {
   i7 = (i19 | 0) > 4;
   i5 = i1;
   while (1) {
    i1 = i5 + 4 | 0;
    i29 = HEAP32[i5 >> 2] | 0;
    i30 = HEAP32[i2 >> 2] | 0;
    i3 = i2 + 4 | 0;
    HEAP32[i2 >> 2] = (((i30 & 16711422) + (i29 & 16711422) | 0) >>> 1) + (i29 & 65793 & i30) | -16777216;
    if (i7) {
     i6 = i8;
     while (1) {
      i28 = HEAP32[i1 >> 2] | 0;
      i30 = HEAP32[i3 >> 2] | 0;
      i1 = i2 + 8 | 0;
      HEAP32[i3 >> 2] = (((i30 & 16711422) + (i28 & 16711422) | 0) >>> 1) + (i28 & 65793 & i30) | -16777216;
      i30 = HEAP32[i5 + 8 >> 2] | 0;
      i28 = HEAP32[i1 >> 2] | 0;
      i29 = i2 + 12 | 0;
      HEAP32[i1 >> 2] = (((i28 & 16711422) + (i30 & 16711422) | 0) >>> 1) + (i30 & 65793 & i28) | -16777216;
      i1 = i5;
      i5 = i5 + 16 | 0;
      i28 = HEAP32[i1 + 12 >> 2] | 0;
      i30 = HEAP32[i29 >> 2] | 0;
      i3 = i2;
      i2 = i2 + 16 | 0;
      HEAP32[i29 >> 2] = (((i30 & 16711422) + (i28 & 16711422) | 0) >>> 1) + (i28 & 65793 & i30) | -16777216;
      i1 = i1 + 20 | 0;
      i29 = HEAP32[i5 >> 2] | 0;
      i30 = HEAP32[i2 >> 2] | 0;
      i3 = i3 + 20 | 0;
      HEAP32[i2 >> 2] = (((i30 & 16711422) + (i29 & 16711422) | 0) >>> 1) + (i29 & 65793 & i30) | -16777216;
      if ((i6 | 0) <= 2) {
       i2 = i3;
       break;
      } else i6 = i6 + -1 | 0;
     }
    } else i2 = i3;
    if (!i4) break; else {
     i5 = i1 + (i32 << 2) | 0;
     i2 = i2 + (i31 << 2) | 0;
     i4 = i4 + -1 | 0;
    }
   }
   return;
  }
 default:
  {
   L30 : while (1) {
    switch (i3 & 3) {
    case 1:
     {
      i28 = i8;
      i29 = i1;
      i30 = i2;
      i5 = 20;
      break;
     }
    case 3:
     {
      i22 = i8;
      i23 = i1;
      i24 = i2;
      i5 = 18;
      break;
     }
    case 2:
     {
      i25 = i8;
      i26 = i1;
      i27 = i2;
      i5 = 19;
      break;
     }
    default:
     {
      i5 = 21;
      break L30;
     }
    }
    while (1) if ((i5 | 0) == 18) {
     i26 = HEAP32[i23 >> 2] | 0;
     i25 = HEAP32[i24 >> 2] | 0;
     HEAP32[i24 >> 2] = (((i25 & 16711422) + (i26 & 16711422) | 0) >>> 1) + (i26 & 65793 & i25) | -16777216;
     i25 = i22;
     i26 = i23 + 4 | 0;
     i27 = i24 + 4 | 0;
     i5 = 19;
     continue;
    } else if ((i5 | 0) == 19) {
     i29 = HEAP32[i26 >> 2] | 0;
     i28 = HEAP32[i27 >> 2] | 0;
     HEAP32[i27 >> 2] = (((i28 & 16711422) + (i29 & 16711422) | 0) >>> 1) + (i29 & 65793 & i28) | -16777216;
     i28 = i25;
     i29 = i26 + 4 | 0;
     i30 = i27 + 4 | 0;
     i5 = 20;
     continue;
    } else if ((i5 | 0) == 20) {
     i1 = i29 + 4 | 0;
     i20 = HEAP32[i29 >> 2] | 0;
     i21 = HEAP32[i30 >> 2] | 0;
     i2 = i30 + 4 | 0;
     HEAP32[i30 >> 2] = (((i21 & 16711422) + (i20 & 16711422) | 0) >>> 1) + (i20 & 65793 & i21) | -16777216;
     if ((i28 | 0) <= 1) break;
     i23 = HEAP32[i1 >> 2] | 0;
     i22 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = (((i22 & 16711422) + (i23 & 16711422) | 0) >>> 1) + (i23 & 65793 & i22) | -16777216;
     i22 = i28 + -1 | 0;
     i23 = i29 + 8 | 0;
     i24 = i30 + 8 | 0;
     i5 = 18;
     continue;
    }
    if (!i4) {
     i5 = 30;
     break;
    } else {
     i1 = i1 + (i32 << 2) | 0;
     i2 = i2 + (i31 << 2) | 0;
     i4 = i4 + -1 | 0;
    }
   }
   if ((i5 | 0) != 21) if ((i5 | 0) == 30) return;
  }
 }
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i3, i2, i4, i7, i8, i9, i11, i5, i13) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 i13 = i13 | 0;
 var i6 = 0, i10 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i14 + 12 | 0;
 i12 = i14;
 if (i1) {
  i6 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85340) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 127](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 127](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 127](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  }
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 255](i6) | 0;
  HEAP8[i8 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 255](i6) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i12, i6);
  i1 = i9 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i9 + 4 >> 2] = 0;
   i1 = i9;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i9;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i12, i6);
  i1 = i11 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i11 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i11 + 4 >> 2] = 0;
   i1 = i11;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i11, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i11;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i11, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0;
 } else {
  i6 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85332) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 44 >> 2] & 127](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 127](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i10, i6);
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 127](i12, i6);
   i1 = i5 + 11 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i1 = HEAP32[i5 >> 2] | 0;
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
    HEAP32[i5 + 4 >> 2] = 0;
    i1 = i5;
   } else {
    HEAP8[i10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i10);
    HEAP8[i1 >> 0] = 0;
    i1 = i5;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i5, 0);
   HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i12 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
   i2 = i6;
  }
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 255](i6) | 0;
  HEAP8[i8 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 16 >> 2] & 255](i6) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i12, i6);
  i1 = i9 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i9 + 4 >> 2] = 0;
   i1 = i9;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i9, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i9;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i9, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i12, i6);
  i1 = i11 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i11 >> 2] | 0;
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i10);
   HEAP32[i11 + 4 >> 2] = 0;
   i1 = i11;
  } else {
   HEAP8[i10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i11, i10);
   HEAP8[i1 >> 0] = 0;
   i1 = i11;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i11, 0);
  HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i12 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0;
 }
 HEAP32[i13 >> 2] = i1;
 STACKTOP = i14;
 return;
}

function _inflate_table(i21, i26, i22, i27, i28, i29) {
 i21 = i21 | 0;
 i26 = i26 | 0;
 i22 = i22 | 0;
 i27 = i27 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, i25 = 0, i30 = 0, i31 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i30 = i31 + 32 | 0;
 i23 = i31;
 i1 = i30;
 i2 = i1 + 32 | 0;
 do {
  HEAP16[i1 >> 1] = 0;
  i1 = i1 + 2 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i20 = (i22 | 0) == 0;
 if (i20) {
  i1 = HEAP32[i28 >> 2] | 0;
  i25 = 5;
 } else {
  i1 = 0;
  do {
   i25 = i30 + (HEAPU16[i26 + (i1 << 1) >> 1] << 1) | 0;
   HEAP16[i25 >> 1] = (HEAP16[i25 >> 1] | 0) + 1 << 16 >> 16;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i22 | 0));
  i2 = HEAP16[i30 + 30 >> 1] | 0;
  i1 = HEAP32[i28 >> 2] | 0;
  if (!(i2 << 16 >> 16)) i25 = 5; else {
   i4 = 15;
   i25 = 7;
  }
 }
 do if ((i25 | 0) == 5) if (!(HEAP16[i30 + 28 >> 1] | 0)) if (!(HEAP16[i30 + 26 >> 1] | 0)) if (!(HEAP16[i30 + 24 >> 1] | 0)) if (!(HEAP16[i30 + 22 >> 1] | 0)) if (!(HEAP16[i30 + 20 >> 1] | 0)) if (!(HEAP16[i30 + 18 >> 1] | 0)) if (!(HEAP16[i30 + 16 >> 1] | 0)) if (!(HEAP16[i30 + 14 >> 1] | 0)) if (!(HEAP16[i30 + 12 >> 1] | 0)) if (!(HEAP16[i30 + 10 >> 1] | 0)) if (!(HEAP16[i30 + 8 >> 1] | 0)) if (!(HEAP16[i30 + 6 >> 1] | 0)) if (!(HEAP16[i30 + 4 >> 1] | 0)) {
  if (HEAP16[i30 + 2 >> 1] | 0) {
   i1 = (i1 | 0) != 0 & 1;
   i4 = 1;
   i3 = 1;
   i2 = 0;
   break;
  }
  i30 = HEAP32[i27 >> 2] | 0;
  HEAP32[i27 >> 2] = i30 + 4;
  HEAP8[i30 >> 0] = 64;
  HEAP8[i30 + 1 >> 0] = 1;
  HEAP16[i30 + 2 >> 1] = 0;
  i30 = HEAP32[i27 >> 2] | 0;
  HEAP32[i27 >> 2] = i30 + 4;
  HEAP8[i30 >> 0] = 64;
  HEAP8[i30 + 1 >> 0] = 1;
  HEAP16[i30 + 2 >> 1] = 0;
  HEAP32[i28 >> 2] = 1;
  i30 = 0;
  STACKTOP = i31;
  return i30 | 0;
 } else {
  i4 = 2;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 3;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 4;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 5;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 6;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 7;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 8;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 9;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 10;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 11;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 12;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 13;
  i2 = 0;
  i25 = 7;
 } else {
  i4 = 14;
  i2 = 0;
  i25 = 7;
 } while (0);
 L25 : do if ((i25 | 0) == 7) {
  i1 = i1 >>> 0 > i4 >>> 0 ? i4 : i1;
  i3 = 1;
  do {
   if (HEAP16[i30 + (i3 << 1) >> 1] | 0) break L25;
   i3 = i3 + 1 | 0;
  } while (i3 >>> 0 < i4 >>> 0);
 } while (0);
 i24 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
 i17 = HEAP16[i30 + 2 >> 1] | 0;
 i18 = i17 & 65535;
 i1 = 2 - i18 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i19 = HEAPU16[i30 + 4 >> 1] | 0;
 i1 = (i1 << 1) - i19 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i16 = HEAPU16[i30 + 6 >> 1] | 0;
 i1 = (i1 << 1) - i16 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i15 = HEAPU16[i30 + 8 >> 1] | 0;
 i1 = (i1 << 1) - i15 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i14 = HEAPU16[i30 + 10 >> 1] | 0;
 i1 = (i1 << 1) - i14 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i13 = HEAPU16[i30 + 12 >> 1] | 0;
 i1 = (i1 << 1) - i13 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i12 = HEAPU16[i30 + 14 >> 1] | 0;
 i1 = (i1 << 1) - i12 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i11 = HEAPU16[i30 + 16 >> 1] | 0;
 i1 = (i1 << 1) - i11 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i10 = HEAPU16[i30 + 18 >> 1] | 0;
 i1 = (i1 << 1) - i10 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i9 = HEAPU16[i30 + 20 >> 1] | 0;
 i1 = (i1 << 1) - i9 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i8 = HEAPU16[i30 + 22 >> 1] | 0;
 i1 = (i1 << 1) - i8 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i7 = HEAPU16[i30 + 24 >> 1] | 0;
 i1 = (i1 << 1) - i7 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i6 = HEAPU16[i30 + 26 >> 1] | 0;
 i1 = (i1 << 1) - i6 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i5 = HEAPU16[i30 + 28 >> 1] | 0;
 i1 = (i1 << 1) - i5 | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 i1 = (i1 << 1) - (i2 & 65535) | 0;
 if ((i1 | 0) < 0) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 if (i1 | 0) if ((i21 | 0) == 0 | (i4 | 0) != 1) {
  i30 = -1;
  STACKTOP = i31;
  return i30 | 0;
 }
 HEAP16[i23 + 2 >> 1] = 0;
 HEAP16[i23 + 4 >> 1] = i17;
 i19 = i18 + i19 | 0;
 HEAP16[i23 + 6 >> 1] = i19;
 i19 = (i19 & 65535) + i16 | 0;
 HEAP16[i23 + 8 >> 1] = i19;
 i19 = (i19 & 65535) + i15 | 0;
 HEAP16[i23 + 10 >> 1] = i19;
 i19 = (i19 & 65535) + i14 | 0;
 HEAP16[i23 + 12 >> 1] = i19;
 i19 = (i19 & 65535) + i13 | 0;
 HEAP16[i23 + 14 >> 1] = i19;
 i19 = (i19 & 65535) + i12 | 0;
 HEAP16[i23 + 16 >> 1] = i19;
 i19 = (i19 & 65535) + i11 | 0;
 HEAP16[i23 + 18 >> 1] = i19;
 i19 = (i19 & 65535) + i10 | 0;
 HEAP16[i23 + 20 >> 1] = i19;
 i19 = (i19 & 65535) + i9 | 0;
 HEAP16[i23 + 22 >> 1] = i19;
 i19 = (i19 & 65535) + i8 | 0;
 HEAP16[i23 + 24 >> 1] = i19;
 i19 = (i19 & 65535) + i7 | 0;
 HEAP16[i23 + 26 >> 1] = i19;
 i19 = (i19 & 65535) + i6 | 0;
 HEAP16[i23 + 28 >> 1] = i19;
 HEAP16[i23 + 30 >> 1] = i19 + i5;
 if (!i20) {
  i1 = 0;
  do {
   i2 = HEAP16[i26 + (i1 << 1) >> 1] | 0;
   if (i2 << 16 >> 16) {
    i19 = i23 + ((i2 & 65535) << 1) | 0;
    i20 = HEAP16[i19 >> 1] | 0;
    HEAP16[i19 >> 1] = i20 + 1 << 16 >> 16;
    HEAP16[i29 + ((i20 & 65535) << 1) >> 1] = i1;
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i22 | 0));
 }
 switch (i21 | 0) {
 case 0:
  {
   i20 = i29;
   i21 = i29;
   i22 = 19;
   i1 = 0;
   i18 = 0;
   break;
  }
 case 1:
  {
   if (i24 >>> 0 > 9) {
    i30 = 1;
    STACKTOP = i31;
    return i30 | 0;
   } else {
    i20 = 37186;
    i21 = 37060;
    i22 = 256;
    i1 = 0;
    i18 = 1;
   }
   break;
  }
 default:
  {
   i1 = (i21 | 0) == 2;
   if (i1 & i24 >>> 0 > 9) {
    i30 = 1;
    STACKTOP = i31;
    return i30 | 0;
   } else {
    i20 = 37636;
    i21 = 37510;
    i22 = -1;
    i18 = 0;
   }
  }
 }
 i16 = 1 << i24;
 i17 = i16 + -1 | 0;
 i19 = i24 & 255;
 i12 = HEAP32[i27 >> 2] | 0;
 i13 = -1;
 i6 = 0;
 i11 = 0;
 i2 = i24;
 i5 = 0;
 L93 : while (1) {
  i10 = 1 << i2;
  i14 = i6;
  i15 = i5;
  while (1) {
   i6 = i3 - i11 | 0;
   i9 = i6 & 255;
   i2 = HEAP16[i29 + (i15 << 1) >> 1] | 0;
   i5 = i2 & 65535;
   do if ((i22 | 0) > (i5 | 0)) i8 = 0; else {
    if ((i22 | 0) >= (i5 | 0)) {
     i2 = 0;
     i8 = 96;
     break;
    }
    i2 = HEAP16[i21 + (i5 << 1) >> 1] | 0;
    i8 = HEAP16[i20 + (i5 << 1) >> 1] & 255;
   } while (0);
   i6 = 1 << i6;
   i7 = i14 >>> i11;
   i5 = i10;
   do {
    i5 = i5 - i6 | 0;
    i23 = i5 + i7 | 0;
    i23 = i12 + (i23 << 2) | 0;
    HEAP8[i23 >> 0] = i8;
    HEAP8[i23 + 1 >> 0] = i9;
    HEAP16[i23 + 2 >> 1] = i2;
   } while ((i5 | 0) != 0);
   i2 = 1 << i3 + -1;
   while (1) if (!(i2 & i14)) break; else i2 = i2 >>> 1;
   i14 = (i2 | 0) == 0 ? 0 : (i2 + -1 & i14) + i2 | 0;
   i15 = i15 + 1 | 0;
   i8 = i30 + (i3 << 1) | 0;
   i23 = (HEAP16[i8 >> 1] | 0) + -1 << 16 >> 16;
   HEAP16[i8 >> 1] = i23;
   if (!(i23 << 16 >> 16)) {
    if ((i3 | 0) == (i4 | 0)) break L93;
    i3 = HEAPU16[i26 + (HEAPU16[i29 + (i15 << 1) >> 1] << 1) >> 1] | 0;
   }
   if (i3 >>> 0 <= i24 >>> 0) continue;
   i9 = i14 & i17;
   if ((i9 | 0) != (i13 | 0)) break;
  }
  i8 = (i11 | 0) == 0 ? i24 : i11;
  i7 = i12 + (i10 << 2) | 0;
  i2 = i3 - i8 | 0;
  L113 : do if (i3 >>> 0 < i4 >>> 0) {
   i5 = 1 << i2;
   i6 = i3;
   while (1) {
    i5 = i5 - (HEAPU16[i30 + (i6 << 1) >> 1] | 0) | 0;
    if ((i5 | 0) < 1) break L113;
    i2 = i2 + 1 | 0;
    i6 = i2 + i8 | 0;
    if (i6 >>> 0 >= i4 >>> 0) break; else i5 = i5 << 1;
   }
  } while (0);
  i5 = (1 << i2) + i16 | 0;
  if (i18 & i5 >>> 0 > 852 | i1 & i5 >>> 0 > 592) {
   i1 = 1;
   i25 = 43;
   break;
  }
  i13 = HEAP32[i27 >> 2] | 0;
  i12 = i13 + (i9 << 2) | 0;
  HEAP8[i12 >> 0] = i2;
  HEAP8[i12 + 1 >> 0] = i19;
  HEAP16[i12 + 2 >> 1] = (i7 - i13 | 0) >>> 2;
  i12 = i7;
  i13 = i9;
  i6 = i14;
  i16 = i5;
  i11 = i8;
  i5 = i15;
 }
 if ((i25 | 0) == 43) {
  STACKTOP = i31;
  return i1 | 0;
 }
 if (i14 | 0) {
  i30 = i12 + (i14 << 2) | 0;
  HEAP8[i30 >> 0] = 64;
  HEAP8[i30 + 1 >> 0] = i9;
  HEAP16[i30 + 2 >> 1] = 0;
 }
 HEAP32[i27 >> 2] = (HEAP32[i27 >> 2] | 0) + (i16 << 2);
 HEAP32[i28 >> 2] = i24;
 i30 = 0;
 STACKTOP = i31;
 return i30 | 0;
}

function _Blit4to4MaskAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0;
 i9 = HEAP32[i3 + 24 >> 2] | 0;
 i6 = HEAP32[i3 + 28 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i47 = HEAP32[i3 + 16 >> 2] | 0;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i46 = HEAP32[i3 + 36 >> 2] | 0;
 i4 = HEAP32[i3 + 40 >> 2] | 0;
 i5 = HEAP32[i3 + 44 >> 2] | 0;
 if (!(HEAP32[i5 + 24 >> 2] | 0)) {
  i8 = HEAP32[i4 + 16 >> 2] | HEAP32[i4 + 12 >> 2] | HEAP32[i4 + 20 >> 2];
  i4 = i6 + -1 | 0;
  if (!i6) return;
  i7 = (i9 + 7 | 0) / 8 | 0;
  i3 = i9 & 255;
  switch (i3 & 7) {
  case 0:
   {
    while (1) {
     i3 = i7;
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i8;
      HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2] & i8;
      HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2] & i8;
      HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2] & i8;
      HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2] & i8;
      HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2] & i8;
      HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2] & i8;
      HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 28 >> 2] & i8;
      i1 = i1 + 32 | 0;
      i2 = i2 + 32 | 0;
      if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
     }
     if (!i4) break; else {
      i1 = i1 + i46 | 0;
      i2 = i2 + i47 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    return;
   }
  case 7:
   {
    while (1) {
     i6 = i7;
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i8;
      HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2] & i8;
      HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2] & i8;
      HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2] & i8;
      HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2] & i8;
      HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2] & i8;
      HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2] & i8;
      i3 = i1 + 28 | 0;
      i5 = i2 + 28 | 0;
      if ((i6 | 0) <= 1) break;
      HEAP32[i3 >> 2] = HEAP32[i5 >> 2] & i8;
      i6 = i6 + -1 | 0;
      i2 = i2 + 32 | 0;
      i1 = i1 + 32 | 0;
     }
     if (!i4) break; else {
      i1 = i3 + i46 | 0;
      i2 = i5 + i47 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    return;
   }
  default:
   {
    L7 : while (1) {
     switch (i3 & 7) {
     case 1:
      {
       i20 = i2;
       i21 = i1;
       i40 = i7;
       i1 = 37;
       break;
      }
     case 2:
      {
       i18 = i2;
       i19 = i1;
       i36 = i7;
       i1 = 36;
       break;
      }
     case 6:
      {
       i10 = i2;
       i11 = i1;
       i22 = i7;
       i1 = 32;
       break;
      }
     case 5:
      {
       i12 = i2;
       i13 = i1;
       i24 = i7;
       i1 = 33;
       break;
      }
     case 4:
      {
       i14 = i2;
       i15 = i1;
       i28 = i7;
       i1 = 34;
       break;
      }
     case 3:
      {
       i16 = i2;
       i17 = i1;
       i32 = i7;
       i1 = 35;
       break;
      }
     default:
      {
       i1 = 38;
       break L7;
      }
     }
     while (1) if ((i1 | 0) == 32) {
      HEAP32[i11 >> 2] = HEAP32[i10 >> 2] & i8;
      i12 = i10 + 4 | 0;
      i13 = i11 + 4 | 0;
      i24 = i22;
      i1 = 33;
      continue;
     } else if ((i1 | 0) == 33) {
      HEAP32[i13 >> 2] = HEAP32[i12 >> 2] & i8;
      i14 = i12 + 4 | 0;
      i15 = i13 + 4 | 0;
      i28 = i24;
      i1 = 34;
      continue;
     } else if ((i1 | 0) == 34) {
      HEAP32[i15 >> 2] = HEAP32[i14 >> 2] & i8;
      i16 = i14 + 4 | 0;
      i17 = i15 + 4 | 0;
      i32 = i28;
      i1 = 35;
      continue;
     } else if ((i1 | 0) == 35) {
      HEAP32[i17 >> 2] = HEAP32[i16 >> 2] & i8;
      i18 = i16 + 4 | 0;
      i19 = i17 + 4 | 0;
      i36 = i32;
      i1 = 36;
      continue;
     } else if ((i1 | 0) == 36) {
      HEAP32[i19 >> 2] = HEAP32[i18 >> 2] & i8;
      i20 = i18 + 4 | 0;
      i21 = i19 + 4 | 0;
      i40 = i36;
      i1 = 37;
      continue;
     } else if ((i1 | 0) == 37) {
      HEAP32[i21 >> 2] = HEAP32[i20 >> 2] & i8;
      i1 = i21 + 4 | 0;
      i2 = i20 + 4 | 0;
      if ((i40 | 0) <= 1) break;
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & i8;
      HEAP32[i21 + 8 >> 2] = HEAP32[i20 + 8 >> 2] & i8;
      i10 = i20 + 12 | 0;
      i11 = i21 + 12 | 0;
      i22 = i40 + -1 | 0;
      i1 = 32;
      continue;
     }
     if (!i4) {
      i1 = 40;
      break;
     } else {
      i1 = i1 + i46 | 0;
      i2 = i2 + i47 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    if ((i1 | 0) != 38) if ((i1 | 0) == 40) return;
   }
  }
 } else {
  i8 = (HEAPU8[i3 + 63 >> 0] | 0) >>> (HEAPU8[i5 + 31 >> 0] | 0) << (HEAPU8[i5 + 35 >> 0] | 0);
  i4 = i6 + -1 | 0;
  if (!i6) return;
  i7 = (i9 + 7 | 0) / 8 | 0;
  i5 = i9 & 255;
  switch (i5 & 7) {
  case 0:
   {
    while (1) {
     i3 = i7;
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i8;
      HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2] | i8;
      HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2] | i8;
      HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2] | i8;
      HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2] | i8;
      HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2] | i8;
      HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2] | i8;
      HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 28 >> 2] | i8;
      i1 = i1 + 32 | 0;
      i2 = i2 + 32 | 0;
      if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
     }
     if (!i4) break; else {
      i2 = i2 + i47 | 0;
      i1 = i1 + i46 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    return;
   }
  case 7:
   {
    while (1) {
     i6 = i7;
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | i8;
      HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2] | i8;
      HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2] | i8;
      HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2] | i8;
      HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2] | i8;
      HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2] | i8;
      HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2] | i8;
      i5 = i1 + 28 | 0;
      i3 = i2 + 28 | 0;
      if ((i6 | 0) <= 1) break;
      HEAP32[i5 >> 2] = HEAP32[i3 >> 2] | i8;
      i6 = i6 + -1 | 0;
      i2 = i2 + 32 | 0;
      i1 = i1 + 32 | 0;
     }
     if (!i4) break; else {
      i2 = i3 + i47 | 0;
      i1 = i5 + i46 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    return;
   }
  default:
   {
    L40 : while (1) {
     switch (i5 & 7) {
     case 1:
      {
       i41 = i7;
       i44 = i2;
       i45 = i1;
       i1 = 18;
       break;
      }
     case 2:
      {
       i37 = i7;
       i42 = i2;
       i43 = i1;
       i1 = 17;
       break;
      }
     case 6:
      {
       i23 = i7;
       i26 = i2;
       i27 = i1;
       i1 = 13;
       break;
      }
     case 5:
      {
       i25 = i7;
       i30 = i2;
       i31 = i1;
       i1 = 14;
       break;
      }
     case 4:
      {
       i29 = i7;
       i34 = i2;
       i35 = i1;
       i1 = 15;
       break;
      }
     case 3:
      {
       i33 = i7;
       i38 = i2;
       i39 = i1;
       i1 = 16;
       break;
      }
     default:
      {
       i1 = 19;
       break L40;
      }
     }
     while (1) if ((i1 | 0) == 13) {
      HEAP32[i27 >> 2] = HEAP32[i26 >> 2] | i8;
      i25 = i23;
      i30 = i26 + 4 | 0;
      i31 = i27 + 4 | 0;
      i1 = 14;
      continue;
     } else if ((i1 | 0) == 14) {
      HEAP32[i31 >> 2] = HEAP32[i30 >> 2] | i8;
      i29 = i25;
      i34 = i30 + 4 | 0;
      i35 = i31 + 4 | 0;
      i1 = 15;
      continue;
     } else if ((i1 | 0) == 15) {
      HEAP32[i35 >> 2] = HEAP32[i34 >> 2] | i8;
      i33 = i29;
      i38 = i34 + 4 | 0;
      i39 = i35 + 4 | 0;
      i1 = 16;
      continue;
     } else if ((i1 | 0) == 16) {
      HEAP32[i39 >> 2] = HEAP32[i38 >> 2] | i8;
      i37 = i33;
      i42 = i38 + 4 | 0;
      i43 = i39 + 4 | 0;
      i1 = 17;
      continue;
     } else if ((i1 | 0) == 17) {
      HEAP32[i43 >> 2] = HEAP32[i42 >> 2] | i8;
      i41 = i37;
      i44 = i42 + 4 | 0;
      i45 = i43 + 4 | 0;
      i1 = 18;
      continue;
     } else if ((i1 | 0) == 18) {
      HEAP32[i45 >> 2] = HEAP32[i44 >> 2] | i8;
      i3 = i45 + 4 | 0;
      i1 = i44 + 4 | 0;
      if ((i41 | 0) <= 1) break;
      HEAP32[i3 >> 2] = HEAP32[i1 >> 2] | i8;
      HEAP32[i45 + 8 >> 2] = HEAP32[i44 + 8 >> 2] | i8;
      i23 = i41 + -1 | 0;
      i26 = i44 + 12 | 0;
      i27 = i45 + 12 | 0;
      i1 = 13;
      continue;
     }
     if (!i4) {
      i1 = 40;
      break;
     } else {
      i2 = i1 + i47 | 0;
      i1 = i3 + i46 | 0;
      i4 = i4 + -1 | 0;
     }
    }
    if ((i1 | 0) != 19) if ((i1 | 0) == 40) return;
   }
  }
 }
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i3, i2, i4, i6, i7, i8, i10, i5, i12) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i12 = i12 | 0;
 var i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i13 + 12 | 0;
 i11 = i13;
 if (i1) {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85356) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 127](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  }
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0;
 } else {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85348) | 0;
  if (i3) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 127](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i9, i2);
   i1 = HEAP32[i9 >> 2] | 0;
   HEAP8[i4 >> 0] = i1;
   HEAP8[i4 + 1 >> 0] = i1 >> 8;
   HEAP8[i4 + 2 >> 0] = i1 >> 16;
   HEAP8[i4 + 3 >> 0] = i1 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i11, i2);
   i1 = i5 + 8 + 3 | 0;
   if ((HEAP8[i1 >> 0] | 0) < 0) {
    i4 = HEAP32[i5 >> 2] | 0;
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
    HEAP32[i5 + 4 >> 2] = 0;
   } else {
    HEAP32[i9 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
    HEAP8[i1 >> 0] = 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i5, 0);
   HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
   HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i11 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  }
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0;
 }
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function _png_colorspace_check_xy(i23, i24) {
 i23 = i23 | 0;
 i24 = i24 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, d34 = 0.0, d35 = 0.0;
 i33 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i28 = i33;
 i22 = HEAP32[i24 >> 2] | 0;
 if (i22 >>> 0 > 1e5) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i32 = i24 + 4 | 0;
 i3 = HEAP32[i32 >> 2] | 0;
 if ((i3 | 0) < 0 | (i3 | 0) > (1e5 - i22 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i25 = i24 + 8 | 0;
 i1 = HEAP32[i25 >> 2] | 0;
 if (i1 >>> 0 > 1e5) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i26 = i24 + 12 | 0;
 i5 = HEAP32[i26 >> 2] | 0;
 if ((i5 | 0) < 0 | (i5 | 0) > (1e5 - i1 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i27 = i24 + 16 | 0;
 i11 = HEAP32[i27 >> 2] | 0;
 if (i11 >>> 0 > 1e5) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i29 = i24 + 20 | 0;
 i6 = HEAP32[i29 >> 2] | 0;
 if ((i6 | 0) < 0 | (i6 | 0) > (1e5 - i11 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i30 = i24 + 24 | 0;
 i12 = HEAP32[i30 >> 2] | 0;
 if (i12 >>> 0 > 1e5) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i31 = i24 + 28 | 0;
 i21 = HEAP32[i31 >> 2] | 0;
 if ((i21 | 0) < 0 | (i21 | 0) > (1e5 - i12 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i8 = i1 - i11 | 0;
 i16 = i3 - i6 | 0;
 i7 = (i8 | 0) == 0;
 i17 = (i16 | 0) == 0;
 if (i7 | i17) i3 = 0; else {
  d2 = +Math_floor(+(+(i8 | 0) * +(i16 | 0) / 7.0 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i3 = ~~d2; else {
   i32 = 2;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 i9 = i5 - i6 | 0;
 i18 = i22 - i11 | 0;
 i10 = (i9 | 0) == 0;
 i19 = (i18 | 0) == 0;
 if (i19 | i10) i1 = 0; else {
  d2 = +Math_floor(+(+(i18 | 0) * +(i9 | 0) / 7.0 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i32 = 2;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 i20 = i3 - i1 | 0;
 i14 = i21 - i6 | 0;
 i15 = (i14 | 0) == 0;
 if (i7 | i15) i3 = 0; else {
  d2 = +Math_floor(+(+(i8 | 0) * +(i14 | 0) / 7.0 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i3 = ~~d2; else {
   i32 = 2;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 i5 = i12 - i11 | 0;
 i6 = (i5 | 0) == 0;
 if (i10 | i6) i1 = 0; else {
  d2 = +Math_floor(+(+(i9 | 0) * +(i5 | 0) / 7.0 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i32 = 2;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 i1 = i3 - i1 | 0;
 if (!i1) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i7 = (i21 | 0) == 0 | (i20 | 0) == 0;
 if (i7) i8 = 0; else {
  d2 = +Math_floor(+(+(i21 | 0) * +(i20 | 0) / +(i1 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i8 = ~~d2; else {
   i32 = 1;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 if ((i8 | 0) <= (i21 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 if (i17 | i6) i3 = 0; else {
  d2 = +Math_floor(+(+(i16 | 0) * +(i5 | 0) / 7.0 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i3 = ~~d2; else {
   i32 = 2;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 if (i19 | i15) i1 = 0; else {
  d2 = +Math_floor(+(+(i18 | 0) * +(i14 | 0) / 7.0 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i32 = 2;
   STACKTOP = i33;
   return i32 | 0;
  }
 }
 i1 = i3 - i1 | 0;
 if (!i1) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 do if (i7) i5 = 0; else {
  d2 = +Math_floor(+(+(i21 | 0) * +(i20 | 0) / +(i1 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i5 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 if ((i5 | 0) <= (i21 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 d34 = +Math_floor(+(1.0e10 / +(i21 | 0) + .5));
 d4 = +(i8 | 0);
 d2 = +Math_floor(+(1.0e10 / d4 + .5));
 d13 = +(i5 | 0);
 d35 = +Math_floor(+(1.0e10 / d13 + .5));
 i6 = (d35 <= 2147483647.0 & d35 >= -2147483648.0 ? 0 - ~~d35 | 0 : 0) + ((d34 <= 2147483647.0 & d34 >= -2147483648.0 ? ~~d34 : 0) - (d2 <= 2147483647.0 & d2 >= -2147483648.0 ? ~~d2 : 0)) | 0;
 if ((i6 | 0) < 1) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 if (!i8) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 do if (!i22) i1 = 0; else {
  d2 = +Math_floor(+(+(i22 | 0) * 1.0e5 / d4 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i23 >> 2] = i1;
 i3 = i23 + 4 | 0;
 i1 = HEAP32[i32 >> 2] | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / d4 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 8 | 0;
 i1 = 1e5 - (HEAP32[i24 >> 2] | 0) - (HEAP32[i32 >> 2] | 0) | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / d4 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 12 | 0;
 i1 = HEAP32[i25 >> 2] | 0;
 if (!i5) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / d13 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 16 | 0;
 i1 = HEAP32[i26 >> 2] | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / d13 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 20 | 0;
 i1 = 1e5 - (HEAP32[i25 >> 2] | 0) - (HEAP32[i26 >> 2] | 0) | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / d13 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 24 | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i6 | 0) * +(i1 | 0) / 1.0e5 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 28 | 0;
 i1 = HEAP32[i29 >> 2] | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i6 | 0) * +(i1 | 0) / 1.0e5 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i3 = i23 + 32 | 0;
 i1 = 1e5 - (HEAP32[i27 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0;
 do if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i6 | 0) * +(i1 | 0) / 1.0e5 + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) {
   i1 = ~~d2;
   break;
  } else i1 = 1;
  STACKTOP = i33;
  return i1 | 0;
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i1 = _png_xy_from_XYZ(i28, i23) | 0;
 if (i1 | 0) {
  i32 = i1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i23 = HEAP32[i30 >> 2] | 0;
 i30 = HEAP32[i28 + 24 >> 2] | 0;
 if ((i23 | 0) < (i30 + -5 | 0) | (i23 | 0) > (i30 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i30 = HEAP32[i31 >> 2] | 0;
 i31 = HEAP32[i28 + 28 >> 2] | 0;
 if ((i30 | 0) < (i31 + -5 | 0) | (i30 | 0) > (i31 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i30 = HEAP32[i24 >> 2] | 0;
 i31 = HEAP32[i28 >> 2] | 0;
 if ((i30 | 0) < (i31 + -5 | 0) | (i30 | 0) > (i31 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i31 = HEAP32[i32 >> 2] | 0;
 i32 = HEAP32[i28 + 4 >> 2] | 0;
 if ((i31 | 0) < (i32 + -5 | 0) | (i31 | 0) > (i32 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i31 = HEAP32[i25 >> 2] | 0;
 i32 = HEAP32[i28 + 8 >> 2] | 0;
 if ((i31 | 0) < (i32 + -5 | 0) | (i31 | 0) > (i32 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i31 = HEAP32[i26 >> 2] | 0;
 i32 = HEAP32[i28 + 12 >> 2] | 0;
 if ((i31 | 0) < (i32 + -5 | 0) | (i31 | 0) > (i32 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i31 = HEAP32[i27 >> 2] | 0;
 i32 = HEAP32[i28 + 16 >> 2] | 0;
 if ((i31 | 0) < (i32 + -5 | 0) | (i31 | 0) > (i32 + 5 | 0)) {
  i32 = 1;
  STACKTOP = i33;
  return i32 | 0;
 }
 i31 = HEAP32[i29 >> 2] | 0;
 i32 = HEAP32[i28 + 20 >> 2] | 0;
 i32 = ((i31 | 0) < (i32 + -5 | 0) | (i31 | 0) > (i32 + 5 | 0)) & 1;
 STACKTOP = i33;
 return i32 | 0;
}

function _Blit1to1Key(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i4 = HEAP32[i3 + 24 >> 2] | 0;
 i6 = HEAP32[i3 + 28 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i52 = HEAP32[i3 + 16 >> 2] | 0;
 i2 = HEAP32[i3 + 20 >> 2] | 0;
 i51 = HEAP32[i3 + 36 >> 2] | 0;
 i49 = HEAP32[i3 + 48 >> 2] | 0;
 i50 = HEAP32[i3 + 56 >> 2] | 0;
 i5 = i6 + -1 | 0;
 i3 = (i6 | 0) == 0;
 if (!i49) {
  if (i3) return;
  i6 = (i4 + 7 | 0) / 8 | 0;
  i3 = i4 & 255;
  if (!(i3 & 7)) {
   while (1) {
    i4 = i6;
    i3 = i2;
    while (1) {
     i2 = HEAP8[i1 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 >> 0] = i2;
     i2 = HEAP8[i1 + 1 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 1 >> 0] = i2;
     i2 = HEAP8[i1 + 2 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 2 >> 0] = i2;
     i2 = HEAP8[i1 + 3 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 3 >> 0] = i2;
     i2 = HEAP8[i1 + 4 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 4 >> 0] = i2;
     i2 = HEAP8[i1 + 5 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 5 >> 0] = i2;
     i2 = HEAP8[i1 + 6 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 6 >> 0] = i2;
     i2 = HEAP8[i1 + 7 >> 0] | 0;
     if ((i50 | 0) != (i2 & 255 | 0)) HEAP8[i3 + 7 >> 0] = i2;
     i3 = i3 + 8 | 0;
     i1 = i1 + 8 | 0;
     if ((i4 | 0) <= 1) break; else i4 = i4 + -1 | 0;
    }
    if (!i5) break; else {
     i2 = i3 + i51 | 0;
     i1 = i1 + i52 | 0;
     i5 = i5 + -1 | 0;
    }
   }
   return;
  }
  L37 : while (1) {
   switch (i3 & 7) {
   case 1:
    {
     i21 = i1;
     i22 = i2;
     i43 = i6;
     i1 = 93;
     break;
    }
   case 7:
    {
     i7 = i6;
     i8 = i1;
     i9 = i2;
     i1 = 75;
     break;
    }
   case 6:
    {
     i11 = i1;
     i12 = i2;
     i23 = i6;
     i1 = 78;
     break;
    }
   case 5:
    {
     i13 = i1;
     i14 = i2;
     i27 = i6;
     i1 = 81;
     break;
    }
   case 4:
    {
     i15 = i1;
     i16 = i2;
     i31 = i6;
     i1 = 84;
     break;
    }
   case 3:
    {
     i17 = i1;
     i18 = i2;
     i35 = i6;
     i1 = 87;
     break;
    }
   case 2:
    {
     i19 = i1;
     i20 = i2;
     i39 = i6;
     i1 = 90;
     break;
    }
   default:
    {
     i1 = 96;
     break L37;
    }
   }
   while (1) if ((i1 | 0) == 75) {
    i1 = HEAP8[i8 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i9 >> 0] = i1;
    i11 = i8 + 1 | 0;
    i12 = i9 + 1 | 0;
    i23 = i7;
    i1 = 78;
    continue;
   } else if ((i1 | 0) == 78) {
    i1 = HEAP8[i11 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i12 >> 0] = i1;
    i13 = i11 + 1 | 0;
    i14 = i12 + 1 | 0;
    i27 = i23;
    i1 = 81;
    continue;
   } else if ((i1 | 0) == 81) {
    i1 = HEAP8[i13 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i14 >> 0] = i1;
    i15 = i13 + 1 | 0;
    i16 = i14 + 1 | 0;
    i31 = i27;
    i1 = 84;
    continue;
   } else if ((i1 | 0) == 84) {
    i1 = HEAP8[i15 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i16 >> 0] = i1;
    i17 = i15 + 1 | 0;
    i18 = i16 + 1 | 0;
    i35 = i31;
    i1 = 87;
    continue;
   } else if ((i1 | 0) == 87) {
    i1 = HEAP8[i17 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i18 >> 0] = i1;
    i19 = i17 + 1 | 0;
    i20 = i18 + 1 | 0;
    i39 = i35;
    i1 = 90;
    continue;
   } else if ((i1 | 0) == 90) {
    i1 = HEAP8[i19 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i20 >> 0] = i1;
    i21 = i19 + 1 | 0;
    i22 = i20 + 1 | 0;
    i43 = i39;
    i1 = 93;
    continue;
   } else if ((i1 | 0) == 93) {
    i1 = HEAP8[i21 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i22 >> 0] = i1;
    i2 = i22 + 1 | 0;
    i1 = i21 + 1 | 0;
    if ((i43 | 0) <= 1) break;
    i1 = HEAP8[i1 >> 0] | 0;
    if ((i50 | 0) != (i1 & 255 | 0)) HEAP8[i2 >> 0] = i1;
    i7 = i43 + -1 | 0;
    i8 = i21 + 2 | 0;
    i9 = i22 + 2 | 0;
    i1 = 75;
    continue;
   }
   if (!i5) {
    i1 = 98;
    break;
   } else {
    i2 = i2 + i51 | 0;
    i1 = i1 + i52 | 0;
    i5 = i5 + -1 | 0;
   }
  }
  if ((i1 | 0) != 96) if ((i1 | 0) == 98) return;
 } else {
  if (i3) return;
  i6 = (i4 + 7 | 0) / 8 | 0;
  i3 = i4 & 255;
  if (!(i3 & 7)) {
   while (1) {
    i4 = i6;
    i3 = i2;
    while (1) {
     i2 = HEAPU8[i1 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 1 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 1 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 2 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 2 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 3 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 3 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 4 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 4 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 5 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 5 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 6 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 6 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i2 = HEAPU8[i1 + 7 >> 0] | 0;
     if ((i50 | 0) != (i2 | 0)) HEAP8[i3 + 7 >> 0] = HEAP8[i49 + i2 >> 0] | 0;
     i3 = i3 + 8 | 0;
     i1 = i1 + 8 | 0;
     if ((i4 | 0) <= 1) break; else i4 = i4 + -1 | 0;
    }
    if (!i5) break; else {
     i1 = i1 + i52 | 0;
     i2 = i3 + i51 | 0;
     i5 = i5 + -1 | 0;
    }
   }
   return;
  }
  L112 : while (1) {
   switch (i3 & 7) {
   case 1:
    {
     i44 = i6;
     i47 = i1;
     i48 = i2;
     i1 = 66;
     break;
    }
   case 7:
    {
     i10 = i6;
     i25 = i1;
     i26 = i2;
     i1 = 48;
     break;
    }
   case 6:
    {
     i24 = i6;
     i29 = i1;
     i30 = i2;
     i1 = 51;
     break;
    }
   case 5:
    {
     i28 = i6;
     i33 = i1;
     i34 = i2;
     i1 = 54;
     break;
    }
   case 4:
    {
     i32 = i6;
     i37 = i1;
     i38 = i2;
     i1 = 57;
     break;
    }
   case 3:
    {
     i36 = i6;
     i41 = i1;
     i42 = i2;
     i1 = 60;
     break;
    }
   case 2:
    {
     i40 = i6;
     i45 = i1;
     i46 = i2;
     i1 = 63;
     break;
    }
   default:
    {
     i1 = 69;
     break L112;
    }
   }
   while (1) if ((i1 | 0) == 48) {
    i1 = HEAPU8[i25 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i26 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i24 = i10;
    i29 = i25 + 1 | 0;
    i30 = i26 + 1 | 0;
    i1 = 51;
    continue;
   } else if ((i1 | 0) == 51) {
    i1 = HEAPU8[i29 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i30 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i28 = i24;
    i33 = i29 + 1 | 0;
    i34 = i30 + 1 | 0;
    i1 = 54;
    continue;
   } else if ((i1 | 0) == 54) {
    i1 = HEAPU8[i33 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i34 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i32 = i28;
    i37 = i33 + 1 | 0;
    i38 = i34 + 1 | 0;
    i1 = 57;
    continue;
   } else if ((i1 | 0) == 57) {
    i1 = HEAPU8[i37 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i38 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i36 = i32;
    i41 = i37 + 1 | 0;
    i42 = i38 + 1 | 0;
    i1 = 60;
    continue;
   } else if ((i1 | 0) == 60) {
    i1 = HEAPU8[i41 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i42 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i40 = i36;
    i45 = i41 + 1 | 0;
    i46 = i42 + 1 | 0;
    i1 = 63;
    continue;
   } else if ((i1 | 0) == 63) {
    i1 = HEAPU8[i45 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i46 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i44 = i40;
    i47 = i45 + 1 | 0;
    i48 = i46 + 1 | 0;
    i1 = 66;
    continue;
   } else if ((i1 | 0) == 66) {
    i1 = HEAPU8[i47 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i48 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i2 = i48 + 1 | 0;
    i1 = i47 + 1 | 0;
    if ((i44 | 0) <= 1) break;
    i1 = HEAPU8[i1 >> 0] | 0;
    if ((i50 | 0) != (i1 | 0)) HEAP8[i2 >> 0] = HEAP8[i49 + i1 >> 0] | 0;
    i10 = i44 + -1 | 0;
    i25 = i47 + 2 | 0;
    i26 = i48 + 2 | 0;
    i1 = 48;
    continue;
   }
   if (!i5) {
    i1 = 98;
    break;
   } else {
    i1 = i1 + i52 | 0;
    i2 = i2 + i51 | 0;
    i5 = i5 + -1 | 0;
   }
  }
  if ((i1 | 0) != 69) if ((i1 | 0) == 98) return;
 }
}

function _SDL_CreateWindow(i20, i9, i15, i1, i3, i8) {
 i20 = i20 | 0;
 i9 = i9 | 0;
 i15 = i15 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i28 = i29 + 112 | 0;
 i27 = i29 + 104 | 0;
 i26 = i29 + 96 | 0;
 i25 = i29 + 88 | 0;
 i24 = i29 + 80 | 0;
 i23 = i29 + 72 | 0;
 i22 = i29 + 64 | 0;
 i21 = i29 + 56 | 0;
 i18 = i29 + 48 | 0;
 i19 = i29 + 40 | 0;
 i7 = i29 + 32 | 0;
 i6 = i29 + 24 | 0;
 i5 = i29 + 16 | 0;
 i4 = i29 + 8 | 0;
 i2 = i29;
 i16 = i29 + 120 | 0;
 if (!(HEAP32[19487] | 0)) if ((_SDL_VideoInit(0) | 0) < 0) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 if (((i8 >>> 17 & 1) + (i8 >>> 18 & 1) + (i8 >>> 19 & 1) | 0) >>> 0 > 1) {
  _SDL_SetError(60327, i2) | 0;
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i14 = (i1 | 0) > 1 ? i1 : 1;
 i13 = (i3 | 0) > 1 ? i3 : 1;
 if ((i14 | 0) > 16384 | (i13 | 0) > 16384) {
  _SDL_SetError(60362, i4) | 0;
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 L13 : do if (i8 & 2 | 0) {
  i2 = HEAP32[19487] | 0;
  if (!(HEAP32[i2 + 176 >> 2] | 0)) {
   _SDL_SetError(46708, i5) | 0;
   i28 = 0;
   STACKTOP = i29;
   return i28 | 0;
  }
  L19 : do if (!i2) i1 = _SDL_SetError(40203, i6) | 0; else {
   i1 = HEAP32[i2 + 388 >> 2] | 0;
   do if (!i1) {
    i1 = HEAP32[i2 + 164 >> 2] | 0;
    if (!i1) {
     i1 = _SDL_SetError(46488, i7) | 0;
     break L19;
    }
    i1 = FUNCTION_TABLE_iii[i1 & 63](i2, 0) | 0;
    i3 = HEAP32[19487] | 0;
    if (!i1) {
     i2 = i3;
     i1 = HEAP32[i3 + 388 >> 2] | 0;
     break;
    }
    i2 = HEAP32[i3 + 172 >> 2] | 0;
    if (!i2) break L19;
    FUNCTION_TABLE_vi[i2 & 511](i3);
    break L19;
   } while (0);
   HEAP32[i2 + 388 >> 2] = i1 + 1;
   break L13;
  } while (0);
  if ((i1 | 0) < 0) {
   i28 = 0;
   STACKTOP = i29;
   return i28 | 0;
  }
 } while (0);
 if (i8 & 8192) {
  i17 = (_SDL_GetHintBoolean(60383, 0) | 0) == 0;
  i8 = i17 ? i8 : i8 & -8193;
 }
 i17 = _SDL_calloc(1, 156) | 0;
 if (!i17) {
  _SDL_Error(0) | 0;
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i10 = HEAP32[19487] | 0;
 HEAP32[i17 >> 2] = i10 + 280;
 i10 = i10 + 284 | 0;
 i7 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i7 + 1;
 HEAP32[i17 + 4 >> 2] = i7;
 i7 = i17 + 16 | 0;
 HEAP32[i7 >> 2] = i9;
 i10 = i17 + 20 | 0;
 HEAP32[i10 >> 2] = i15;
 i11 = i17 + 24 | 0;
 HEAP32[i11 >> 2] = i14;
 i12 = i17 + 28 | 0;
 HEAP32[i12 >> 2] = i13;
 i5 = i9 & -65536;
 if ((i5 | 0) < 805240832) switch (i5 | 0) {
 case 536805376:
  {
   i6 = 27;
   break;
  }
 default:
  i6 = 26;
 } else switch (i5 | 0) {
 case 805240832:
  {
   i6 = 27;
   break;
  }
 default:
  i6 = 26;
 }
 L45 : do if ((i6 | 0) == 26) {
  i1 = i15 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i6 = 27;
    break L45;
   }
  default:
   {
    i4 = i13;
    i3 = i9;
    i1 = i15;
    i2 = i14;
    break L45;
   }
  } else switch (i1 | 0) {
  case 805240832:
   {
    i6 = 27;
    break L45;
   }
  default:
   {
    i4 = i13;
    i3 = i9;
    i1 = i15;
    i2 = i14;
    break L45;
   }
  }
 } while (0);
 if ((i6 | 0) == 27) {
  i1 = _SDL_GetWindowDisplayIndex(i17) | 0;
  i2 = HEAP32[19487] | 0;
  if ((i1 | 0) > -1) i3 = (HEAP32[i2 + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i3 = 0;
  i4 = HEAP32[i2 + 264 >> 2] | 0;
  L55 : do if ((i4 | 0) > 0) {
   i2 = HEAP32[i2 + 268 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((i2 + (i1 * 68 | 0) | 0) == (i3 | 0)) break L55;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i4 | 0)) {
     i1 = 0;
     break;
    }
   }
  } else i1 = 0; while (0);
  _SDL_GetDisplayBounds(i1, i16) | 0;
  if ((i5 | 0) < 805240832) switch (i5 | 0) {
  case 536805376:
   {
    i6 = 34;
    break;
   }
  default:
   {}
  } else switch (i5 | 0) {
  case 805240832:
   {
    i6 = 34;
    break;
   }
  default:
   {}
  }
  if ((i6 | 0) == 34) HEAP32[i7 >> 2] = (((HEAP32[i16 + 8 >> 2] | 0) - i14 | 0) / 2 | 0) + (HEAP32[i16 >> 2] | 0);
  i1 = i15 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i6 = 37;
    break;
   }
  default:
   i6 = 36;
  } else switch (i1 | 0) {
  case 805240832:
   {
    i6 = 37;
    break;
   }
  default:
   i6 = 36;
  }
  if ((i6 | 0) == 36) i1 = HEAP32[i10 >> 2] | 0; else if ((i6 | 0) == 37) {
   i1 = (((HEAP32[i16 + 12 >> 2] | 0) - i13 | 0) / 2 | 0) + (HEAP32[i16 + 4 >> 2] | 0) | 0;
   HEAP32[i10 >> 2] = i1;
  }
  i4 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i11 >> 2] | 0;
 }
 HEAP32[i17 + 56 >> 2] = i3;
 HEAP32[i17 + 60 >> 2] = i1;
 HEAP32[i17 + 64 >> 2] = i2;
 HEAP32[i17 + 68 >> 2] = i4;
 i5 = (i8 & 1 | 0) == 0;
 if (!i5) {
  i1 = _SDL_GetWindowDisplayIndex(i17) | 0;
  i2 = HEAP32[19487] | 0;
  if ((i1 | 0) > -1) i3 = (HEAP32[i2 + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i3 = 0;
  i4 = HEAP32[i2 + 264 >> 2] | 0;
  L80 : do if ((i4 | 0) > 0) {
   i2 = HEAP32[i2 + 268 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((i2 + (i1 * 68 | 0) | 0) == (i3 | 0)) break L80;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i4 | 0)) {
     i1 = 0;
     break;
    }
   }
  } else i1 = 0; while (0);
  _SDL_GetDisplayBounds(i1, i16) | 0;
  HEAP32[i7 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i16 + 4 >> 2];
  HEAP32[i11 >> 2] = HEAP32[i16 + 8 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i16 + 12 >> 2];
 }
 i3 = i8 & 1024050 | 8;
 i4 = i17 + 48 | 0;
 HEAP32[i4 >> 2] = i3;
 HEAP32[i17 + 52 >> 2] = i3;
 HEAPF32[i17 + 92 >> 2] = Math_fround(1.0);
 HEAPF32[i17 + 96 >> 2] = Math_fround(1.0);
 i3 = HEAP32[19487] | 0;
 i1 = i3 + 272 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i17 + 152 >> 2] = i2;
 HEAP32[i17 + 120 >> 2] = 0;
 if (i2 | 0) HEAP32[i2 + 148 >> 2] = i17;
 HEAP32[i1 >> 2] = i17;
 i1 = HEAP32[i3 + 32 >> 2] | 0;
 if (i1 | 0) if ((FUNCTION_TABLE_iii[i1 & 63](i3, i17) | 0) < 0) {
  _SDL_DestroyWindow(i17);
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 do if (i20 | 0) {
  i1 = HEAP32[19487] | 0;
  if (!i1) {
   _SDL_SetError(40203, i19) | 0;
   break;
  }
  if ((HEAP32[i17 >> 2] | 0) != (i1 + 280 | 0)) {
   _SDL_SetError(59973, i18) | 0;
   break;
  }
  i1 = i17 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) != (i20 | 0)) {
   _SDL_free(i2);
   HEAP32[i1 >> 2] = _SDL_strdup(i20) | 0;
   i1 = HEAP32[19487] | 0;
   i2 = HEAP32[i1 + 40 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[i2 & 127](i1, i17);
  }
 } while (0);
 do if (i8 & 128 | 0) {
  i2 = HEAP32[19487] | 0;
  if (!i2) {
   _SDL_SetError(40203, i21) | 0;
   break;
  }
  if ((HEAP32[i17 >> 2] | 0) != (i2 + 280 | 0)) {
   _SDL_SetError(59973, i22) | 0;
   break;
  }
  if (!(HEAP32[i4 >> 2] & 128)) {
   i1 = HEAP32[i2 + 92 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[i1 & 127](i2, i17);
  }
 } while (0);
 do if (i8 & 64 | 0) {
  i1 = HEAP32[19487] | 0;
  if (!i1) {
   _SDL_SetError(40203, i23) | 0;
   break;
  }
  if ((HEAP32[i17 >> 2] | 0) != (i1 + 280 | 0)) {
   _SDL_SetError(59973, i24) | 0;
   break;
  }
  if (!(HEAP32[i4 >> 2] & 64)) {
   _SDL_UpdateFullscreenMode(i17, 0) | 0;
   i1 = HEAP32[19487] | 0;
   i2 = HEAP32[i1 + 96 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[i2 & 127](i1, i17);
  }
 } while (0);
 do if (!i5) {
  i1 = HEAP32[19487] | 0;
  if (!i1) {
   _SDL_SetError(40203, i25) | 0;
   break;
  }
  if ((HEAP32[i17 >> 2] | 0) != (i1 + 280 | 0)) {
   _SDL_SetError(59973, i26) | 0;
   break;
  }
  i1 = i8 & 4097;
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = i2 & 4097;
  if ((i1 | 0) != (i3 | 0)) {
   HEAP32[i4 >> 2] = i2 & -4098 | i1;
   if (_SDL_UpdateFullscreenMode(i17, (i2 & 4 | 0) == 0 ? 0 : i2 >>> 6 & 1 ^ 1) | 0) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -4098 | i3;
  }
 } while (0);
 if (i8 & 256 | 0) _SDL_SetWindowGrab(i17, 1);
 do if (!(i8 & 8)) {
  i2 = HEAP32[19487] | 0;
  if (!i2) {
   _SDL_SetError(40203, i27) | 0;
   break;
  }
  if ((HEAP32[i17 >> 2] | 0) != (i2 + 280 | 0)) {
   _SDL_SetError(59973, i28) | 0;
   break;
  }
  if (!(HEAP32[i4 >> 2] & 4)) {
   i1 = HEAP32[i2 + 80 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[i1 & 127](i2, i17);
   _SDL_SendWindowEvent(i17, 1, 0, 0) | 0;
  }
 } while (0);
 i28 = HEAP32[i4 >> 2] | 0;
 _SDL_UpdateFullscreenMode(i17, (i28 & 5 | 0) != 5 ? 0 : i28 >>> 6 & 1 ^ 1) | 0;
 i28 = i17;
 STACKTOP = i29;
 return i28 | 0;
}

function _SDL_GameControllerEventWatcher(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i8 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i2 = i11 + 64 | 0;
 i1 = i11 + 56 | 0;
 i10 = i11;
 switch (HEAP32[i9 >> 2] | 0) {
 case 1536:
  {
   i3 = HEAP8[i9 + 12 >> 0] | 0;
   if ((i3 & 255) > 47) {
    HEAP32[i1 >> 2] = i3 & 255;
    _SDL_SetError(58321, i1) | 0;
    STACKTOP = i11;
    return 1;
   }
   i1 = HEAP32[20465] | 0;
   if (!i1) {
    STACKTOP = i11;
    return 1;
   }
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i4 = i1;
   while (1) {
    if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == (i2 | 0)) break;
    i1 = HEAP32[i4 + 1344 >> 2] | 0;
    if (!i1) {
     i8 = 19;
     break;
    } else i4 = i1;
   }
   if ((i8 | 0) == 19) {
    STACKTOP = i11;
    return 1;
   }
   i1 = i3 & 255;
   i2 = HEAP32[i4 + 320 + (i1 << 2) >> 2] | 0;
   if ((i2 | 0) > -1) {
    i1 = HEAP16[i9 + 16 >> 1] | 0;
    if ((i2 & -2 | 0) == 4) i1 = (((i1 << 16 >> 16) / 2 | 0) & 65535) + 16384 & 65535;
    if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) {
     STACKTOP = i11;
     return 1;
    }
    HEAP32[i10 >> 2] = 1616;
    HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
    HEAP8[i10 + 12 >> 0] = i2;
    HEAP16[i10 + 16 >> 1] = i1;
    _SDL_PushEvent(i10) | 0;
    STACKTOP = i11;
    return 1;
   } else {
    i2 = HEAP32[i4 + 896 + (i1 << 2) >> 2] | 0;
    if ((i2 | 0) <= -1) {
     STACKTOP = i11;
     return 1;
    }
    i9 = HEAP16[i9 + 16 >> 1] | 0;
    i9 = i9 << 16 >> 16 | 0;
    i1 = i9 | 0;
    i1 = (((i9 | 0) < 0 ? 0 - i1 | 0 : i1) | 0) > 16384;
    i9 = i1 ? 1617 : 1618;
    HEAP32[i10 >> 2] = i9;
    if ((_SDL_EventState(i9, -1) | 0) << 24 >> 24 == 1) {
     HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
     HEAP8[i10 + 12 >> 0] = i2;
     HEAP8[i10 + 13 >> 0] = i1 & 1;
     _SDL_PushEvent(i10) | 0;
    }
    STACKTOP = i11;
    return 1;
   }
  }
 case 1540:
 case 1539:
  {
   i3 = HEAP8[i9 + 12 >> 0] | 0;
   if ((i3 & 255) > 47) {
    HEAP32[i2 >> 2] = i3 & 255;
    _SDL_SetError(58394, i2) | 0;
    STACKTOP = i11;
    return 1;
   }
   i1 = HEAP32[20465] | 0;
   if (!i1) {
    STACKTOP = i11;
    return 1;
   }
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i4 = i1;
   while (1) {
    if ((HEAP32[HEAP32[i4 >> 2] >> 2] | 0) == (i2 | 0)) break;
    i1 = HEAP32[i4 + 1344 >> 2] | 0;
    if (!i1) {
     i8 = 19;
     break;
    } else i4 = i1;
   }
   if ((i8 | 0) == 19) {
    STACKTOP = i11;
    return 1;
   }
   i1 = i3 & 255;
   i2 = HEAP32[i4 + 704 + (i1 << 2) >> 2] | 0;
   if ((i2 | 0) > -1) {
    i1 = HEAP8[i9 + 13 >> 0] | 0;
    switch (i1 << 24 >> 24) {
    case 1:
     {
      i5 = 1617;
      i8 = 28;
      break;
     }
    case 0:
     {
      i5 = 1618;
      i8 = 28;
      break;
     }
    default:
     {}
    }
    if ((i8 | 0) == 28) {
     HEAP32[i10 >> 2] = i5;
     if ((_SDL_EventState(i5, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i2;
      HEAP8[i10 + 13 >> 0] = i1;
      _SDL_PushEvent(i10) | 0;
     }
    }
    STACKTOP = i11;
    return 1;
   } else {
    i2 = HEAP32[i4 + 512 + (i1 << 2) >> 2] | 0;
    if ((i2 | 0) <= -1) {
     STACKTOP = i11;
     return 1;
    }
    i1 = HEAP8[i9 + 13 >> 0] | 0;
    if ((_SDL_EventState(1616, -1) | 0) << 24 >> 24 != 1) {
     STACKTOP = i11;
     return 1;
    }
    HEAP32[i10 >> 2] = 1616;
    HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i4 >> 2] >> 2];
    HEAP8[i10 + 12 >> 0] = i2;
    HEAP16[i10 + 16 >> 1] = i1 << 24 >> 24 ? 32767 : 0;
    _SDL_PushEvent(i10) | 0;
    STACKTOP = i11;
    return 1;
   }
  }
 case 1538:
  {
   i7 = i9 + 12 | 0;
   i3 = HEAP8[i7 >> 0] | 0;
   if ((i3 & 255) > 3) {
    STACKTOP = i11;
    return 1;
   }
   i1 = HEAP32[20465] | 0;
   if (!i1) {
    STACKTOP = i11;
    return 1;
   }
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i6 = i1;
   while (1) {
    if ((HEAP32[HEAP32[i6 >> 2] >> 2] | 0) == (i2 | 0)) break;
    i1 = HEAP32[i6 + 1344 >> 2] | 0;
    if (!i1) {
     i8 = 19;
     break;
    } else i6 = i1;
   }
   if ((i8 | 0) == 19) {
    STACKTOP = i11;
    return 1;
   }
   i4 = i3 & 255;
   i2 = HEAP8[i6 + 8 + i4 >> 0] | 0;
   i5 = i9 + 13 | 0;
   i3 = HEAP8[i5 >> 0] & i2;
   i4 = i4 << 4;
   i2 = (i3 ^ i2) & 255;
   if (i2 & 4 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 4) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1618;
     if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 0;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   if (i2 & 1 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 1) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1618;
     if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 0;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   if (i2 & 8 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 8) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1618;
     if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 0;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   if (i2 & 2 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 2) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1618;
     if ((_SDL_EventState(1618, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 0;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   i2 = (HEAP8[i5 >> 0] ^ i3) & 255;
   if (i2 & 4 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 4) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1617;
     if ((_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 1;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   if (i2 & 1 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 1) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1617;
     if ((_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 1;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   if (i2 & 8 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 8) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1617;
     if ((_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 1;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   if (i2 & 2 | 0) {
    i1 = HEAP32[i6 + 1088 + ((i4 | 2) << 2) >> 2] | 0;
    if ((i1 | 0) != -1) {
     HEAP32[i10 >> 2] = 1617;
     if ((_SDL_EventState(1617, -1) | 0) << 24 >> 24 == 1) {
      HEAP32[i10 + 8 >> 2] = HEAP32[HEAP32[i6 >> 2] >> 2];
      HEAP8[i10 + 12 >> 0] = i1;
      HEAP8[i10 + 13 >> 0] = 1;
      _SDL_PushEvent(i10) | 0;
     }
    }
   }
   HEAP8[(HEAPU8[i7 >> 0] | 0) + (i6 + 8) >> 0] = HEAP8[i5 >> 0] | 0;
   STACKTOP = i11;
   return 1;
  }
 case 1541:
  {
   i1 = i9 + 8 | 0;
   if (!(_SDL_PrivateGetControllerMapping(HEAP32[i1 >> 2] | 0) | 0)) {
    STACKTOP = i11;
    return 1;
   }
   HEAP32[i10 >> 2] = 1619;
   HEAP32[i10 + 8 >> 2] = HEAP32[i1 >> 2];
   _SDL_PushEvent(i10) | 0;
   STACKTOP = i11;
   return 1;
  }
 case 1542:
  {
   i1 = HEAP32[20465] | 0;
   if (!i1) {
    STACKTOP = i11;
    return 1;
   }
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   while (1) {
    if ((HEAP32[HEAP32[i1 >> 2] >> 2] | 0) == (i2 | 0)) break;
    i1 = HEAP32[i1 + 1344 >> 2] | 0;
    if (!i1) {
     i8 = 19;
     break;
    }
   }
   if ((i8 | 0) == 19) {
    STACKTOP = i11;
    return 1;
   }
   HEAP32[i10 >> 2] = 1620;
   HEAP32[i10 + 8 >> 2] = i2;
   _SDL_PushEvent(i10) | 0;
   _UpdateEventsForDeviceRemoval();
   STACKTOP = i11;
   return 1;
  }
 default:
  {
   STACKTOP = i11;
   return 1;
  }
 }
 return 0;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i3, i6, i7, i8, i10, i5, i4, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i13 + 12 | 0;
 i11 = i13;
 if (i1) {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85340) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 127](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i11, i2);
  i1 = i4 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i4 + 4 >> 2] = 0;
   i1 = i4;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i4, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i4;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i4, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i11, i2);
  i1 = i5 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i5 + 4 >> 2] = 0;
   i1 = i5;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i5, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  HEAP8[i6 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2) | 0;
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i11, i2);
  i1 = i10 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i10 + 4 >> 2] = 0;
   i1 = i10;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i10, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i10;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i10, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0;
 } else {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85332) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 127](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i11, i2);
  i1 = i4 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i4 + 4 >> 2] = 0;
   i1 = i4;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i4, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i4;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i4, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i11, i2);
  i1 = i5 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i5 + 4 >> 2] = 0;
   i1 = i5;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i5;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i5, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  HEAP8[i6 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2) | 0;
  HEAP8[i7 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i11, i2);
  i1 = i10 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i10 + 4 >> 2] = 0;
   i1 = i10;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i10, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i10;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i10, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0;
 }
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i3, i6, i7, i8, i10, i5, i4, i12) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 var i9 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i13 + 12 | 0;
 i11 = i13;
 if (i1) {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85356) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 127](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i11, i2);
  i1 = i4 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i9);
   HEAP32[i4 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i4, 0);
  HEAP32[i4 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i11, i2);
  i1 = i5 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP32[i5 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i5, 0);
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0;
 } else {
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85348) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 44 >> 2] & 127](i9, i2);
  i1 = HEAP32[i9 >> 2] | 0;
  HEAP8[i3 >> 0] = i1;
  HEAP8[i3 + 1 >> 0] = i1 >> 8;
  HEAP8[i3 + 2 >> 0] = i1 >> 16;
  HEAP8[i3 + 3 >> 0] = i1 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 127](i11, i2);
  i1 = i4 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i3, i9);
   HEAP32[i4 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i4, 0);
  HEAP32[i4 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i4 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i4 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i11, i2);
  i1 = i5 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i4, i9);
   HEAP32[i5 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i5, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i5, 0);
  HEAP32[i5 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  HEAP32[i6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](i2) | 0;
  HEAP32[i7 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 255](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 127](i11, i2);
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i9);
   HEAP32[i8 + 4 >> 2] = 0;
   i1 = i8;
  } else {
   HEAP8[i9 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i9);
   HEAP8[i1 >> 0] = 0;
   i1 = i8;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, 0);
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i11, i2);
  i1 = i10 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i8 = HEAP32[i10 >> 2] | 0;
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i9);
   HEAP32[i10 + 4 >> 2] = 0;
  } else {
   HEAP32[i9 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i10, i9);
   HEAP8[i1 >> 0] = 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i10, 0);
  HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  i1 = 0;
  while (1) {
   if ((i1 | 0) == 3) break;
   HEAP32[i11 + (i1 << 2) >> 2] = 0;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i11);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0;
 }
 HEAP32[i12 >> 2] = i1;
 STACKTOP = i13;
 return;
}

function _GLES2_SetupCopy(i4, i7) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, f14 = f0, f15 = f0, f16 = f0, f17 = f0;
 i10 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i13 + 8 | 0;
 i3 = i13;
 i12 = HEAP32[i4 + 320 >> 2] | 0;
 i5 = HEAP32[i7 + 68 >> 2] | 0;
 i11 = HEAP32[i7 + 24 >> 2] | 0;
 i6 = i4 + 308 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i1) {
  i1 = HEAP32[i7 + 4 >> 2] | 0;
  L3 : do if ((i1 | 0) < 825382478) {
   if ((i1 | 0) < 374740996) {
    if ((i1 | 0) >= 372645892) switch (i1 | 0) {
    case 372645892:
     {
      i1 = 2;
      break L1;
     }
    default:
     break L3;
    }
    switch (i1 | 0) {
    case 370546692:
     break;
    default:
     break L3;
    }
    i1 = 3;
    break L1;
   }
   if ((i1 | 0) < 376840196) {
    switch (i1 | 0) {
    case 374740996:
     break;
    default:
     break L3;
    }
    i1 = 4;
    break L1;
   } else {
    switch (i1 | 0) {
    case 376840196:
     break;
    default:
     break L3;
    }
    i1 = 1;
    break L1;
   }
  } else {
   if ((i1 | 0) >= 842094169) {
    if ((i1 | 0) < 1448433993) switch (i1 | 0) {
    case 842094169:
     break;
    default:
     break L3;
    } else switch (i1 | 0) {
    case 1448433993:
     break;
    default:
     break L3;
    }
    i1 = 5;
    break L1;
   }
   if ((i1 | 0) < 842094158) {
    switch (i1 | 0) {
    case 825382478:
     break;
    default:
     break L3;
    }
    i1 = 7;
    break L1;
   } else {
    switch (i1 | 0) {
    case 842094158:
     break;
    default:
     break L3;
    }
    i1 = 6;
    break L1;
   }
  } while (0);
  i12 = _SDL_SetError(41569, i2) | 0;
  STACKTOP = i13;
  return i12 | 0;
 } else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i2 = HEAP32[i7 + 4 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) i1 = 1; else {
   L34 : do if ((i2 | 0) < 825382478) if ((i2 | 0) < 374740996) {
    if ((i2 | 0) >= 372645892) {
     switch (i2 | 0) {
     case 372645892:
      break;
     default:
      break L34;
     }
     if ((i1 | 0) < 376840196) switch (i1 | 0) {
     case 374740996:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     } else switch (i1 | 0) {
     case 376840196:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
    switch (i2 | 0) {
    case 370546692:
     break;
    default:
     break L34;
    }
    if ((i1 | 0) < 374740996) {
     switch (i1 | 0) {
     case 372645892:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 4;
     break L1;
    }
    if ((i1 | 0) < 376840196) {
     switch (i1 | 0) {
     case 374740996:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    } else {
     switch (i1 | 0) {
     case 376840196:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
   } else {
    if ((i2 | 0) >= 376840196) {
     switch (i2 | 0) {
     case 376840196:
      break;
     default:
      break L34;
     }
     if ((i1 | 0) < 372645892) switch (i1 | 0) {
     case 370546692:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     } else switch (i1 | 0) {
     case 372645892:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
    switch (i2 | 0) {
    case 374740996:
     break;
    default:
     break L34;
    }
    if ((i1 | 0) < 372645892) {
     switch (i1 | 0) {
     case 370546692:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 2;
     break L1;
    }
    if ((i1 | 0) < 376840196) {
     switch (i1 | 0) {
     case 372645892:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 3;
     break L1;
    } else {
     switch (i1 | 0) {
     case 376840196:
      break;
     default:
      {
       i1 = 1;
       break L1;
      }
     }
     i1 = 4;
     break L1;
    }
   } else {
    if ((i2 | 0) >= 842094169) if ((i2 | 0) < 1448433993) switch (i2 | 0) {
    case 842094169:
     {
      i1 = 5;
      break L1;
     }
    default:
     break L34;
    } else switch (i2 | 0) {
    case 1448433993:
     {
      i1 = 5;
      break L1;
     }
    default:
     break L34;
    }
    if ((i2 | 0) < 842094158) {
     switch (i2 | 0) {
     case 825382478:
      break;
     default:
      break L34;
     }
     i1 = 7;
     break L1;
    } else {
     switch (i2 | 0) {
     case 842094158:
      break;
     default:
      break L34;
     }
     i1 = 6;
     break L1;
    }
   } while (0);
   i12 = _SDL_SetError(41569, i3) | 0;
   STACKTOP = i13;
   return i12 | 0;
  }
 } while (0);
 if ((_GLES2_SelectProgram(i4, i1, i11) | 0) < 0) {
  i12 = -1;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (HEAP32[i5 + 24 >> 2] | 0) {
  i9 = i12 + 16 | 0;
  FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 511](33986);
  i4 = i12 + 28 | 0;
  i8 = i5 + 4 | 0;
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i8 >> 2] | 0, HEAP32[i5 + 32 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 511](33985);
  FUNCTION_TABLE_vii[HEAP32[i4 >> 2] & 127](HEAP32[i8 >> 2] | 0, HEAP32[i5 + 36 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 511](33984);
 }
 if (!(HEAP32[i5 + 28 >> 2] | 0)) {
  i1 = i5 + 4 | 0;
  i2 = i12 + 28 | 0;
 } else {
  i9 = i12 + 16 | 0;
  FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 511](33985);
  i2 = i12 + 28 | 0;
  i1 = i5 + 4 | 0;
  FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](HEAP32[i1 >> 2] | 0, HEAP32[i5 + 36 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[i9 >> 2] & 511](33984);
 }
 FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0);
 i8 = HEAP8[i7 + 29 >> 0] | 0;
 i9 = HEAP8[i7 + 31 >> 0] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L100 : do if (!i1) i10 = 36; else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i1 | 0) < 372645892) switch (i1 | 0) {
  case 370546692:
   break;
  default:
   {
    i10 = 36;
    break L100;
   }
  } else switch (i1 | 0) {
  case 372645892:
   break;
  default:
   {
    i10 = 36;
    break L100;
   }
  }
  i1 = i7 + 28 | 0;
  i2 = i7 + 30 | 0;
 } while (0);
 if ((i10 | 0) == 36) {
  i1 = i7 + 30 | 0;
  i2 = i7 + 28 | 0;
 }
 i7 = HEAP8[i1 >> 0] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i2 = HEAP32[i12 + 268 >> 2] | 0;
 i3 = i2 + 84 | 0;
 i4 = i2 + 85 | 0;
 i5 = i2 + 86 | 0;
 i6 = i2 + 87 | 0;
 if (((HEAPU8[i4 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i6 >> 0] | 0) | 0) != ((i8 & 255) << 16 | i9 & 255 | (i7 & 255) << 8 | (i1 & 255) << 24 | 0)) {
  f17 = Math_fround(Math_fround(i1 & 255) * Math_fround(.00392156886));
  f16 = Math_fround(Math_fround(i8 & 255) * Math_fround(.00392156886));
  f15 = Math_fround(Math_fround(i7 & 255) * Math_fround(.00392156886));
  f14 = Math_fround(Math_fround(i9 & 255) * Math_fround(.00392156886));
  FUNCTION_TABLE_viffff[HEAP32[i12 + 172 >> 2] & 3](HEAP32[i2 + 24 >> 2] | 0, f17, f16, f15, f14);
  HEAP8[i3 >> 0] = i1;
  HEAP8[i4 >> 0] = i8;
  HEAP8[i5 >> 0] = i7;
  HEAP8[i6 >> 0] = i9;
 }
 i1 = i12 + 8 | 0;
 if ((HEAP32[i1 >> 2] | 0) != (i11 | 0)) {
  switch (i11 | 0) {
  case 4:
   {
    FUNCTION_TABLE_vi[HEAP32[i12 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i12 + 32 >> 2] & 63](0, 768, 0, 1);
    break;
   }
  case 1:
   {
    FUNCTION_TABLE_vi[HEAP32[i12 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i12 + 32 >> 2] & 63](770, 771, 1, 771);
    break;
   }
  case 2:
   {
    FUNCTION_TABLE_vi[HEAP32[i12 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i12 + 32 >> 2] & 63](770, 1, 0, 1);
    break;
   }
  default:
   FUNCTION_TABLE_vi[HEAP32[i12 + 68 >> 2] & 511](3042);
  }
  HEAP32[i1 >> 2] = i11;
 }
 i1 = i12 + 12 | 0;
 if ((HEAP32[i1 >> 2] | 0) == 1) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[i12 + 84 >> 2] & 511](1);
 HEAP32[i1 >> 2] = 1;
 i12 = 0;
 STACKTOP = i13;
 return i12 | 0;
}

function runPostSets() {}
function __emscripten_dceable_type_decls() {
 _eglGetDisplay(0) | 0;
 _eglInitialize(0, 0, 0) | 0;
 _eglTerminate(0) | 0;
 _eglGetProcAddress(0) | 0;
 _eglChooseConfig(0, 0, 0, 0, 0) | 0;
 _eglGetConfigAttrib(0, 0, 0, 0) | 0;
 _eglCreateContext(0, 0, 0, 0) | 0;
 _eglDestroyContext(0, 0) | 0;
 _eglCreateWindowSurface(0, 0, 0, 0) | 0;
 _eglDestroySurface(0, 0) | 0;
 _eglMakeCurrent(0, 0, 0, 0) | 0;
 _eglSwapBuffers(0, 0) | 0;
 _eglSwapInterval(0, 0) | 0;
 _eglWaitNative(0) | 0;
 _eglWaitGL() | 0;
 _eglBindAPI(0) | 0;
 _emscripten_glPixelStorei(0, 0);
 _emscripten_glGetString(0) | 0;
 _emscripten_glGetIntegerv(0, 0);
 _emscripten_glGetFloatv(0, 0);
 _emscripten_glGetBooleanv(0, 0);
 _emscripten_glGenTextures(0, 0);
 _emscripten_glDeleteTextures(0, 0);
 _emscripten_glCompressedTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCompressedTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glTexImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glReadPixels(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glBindTexture(0, 0);
 _emscripten_glGetTexParameterfv(0, 0, 0);
 _emscripten_glGetTexParameteriv(0, 0, 0);
 _emscripten_glTexParameterfv(0, 0, 0);
 _emscripten_glTexParameteriv(0, 0, 0);
 _emscripten_glIsTexture(0) << 24 >> 24;
 _emscripten_glGenBuffers(0, 0);
 _emscripten_glDeleteBuffers(0, 0);
 _emscripten_glGetBufferParameteriv(0, 0, 0);
 _emscripten_glBufferData(0, 0, 0, 0);
 _emscripten_glBufferSubData(0, 0, 0, 0);
 _emscripten_glIsBuffer(0) << 24 >> 24;
 _emscripten_glGenRenderbuffers(0, 0);
 _emscripten_glDeleteRenderbuffers(0, 0);
 _emscripten_glBindRenderbuffer(0, 0);
 _emscripten_glGetRenderbufferParameteriv(0, 0, 0);
 _emscripten_glIsRenderbuffer(0) << 24 >> 24;
 _emscripten_glGetUniformfv(0, 0, 0);
 _emscripten_glGetUniformiv(0, 0, 0);
 _emscripten_glGetUniformLocation(0, 0) | 0;
 _emscripten_glGetVertexAttribfv(0, 0, 0);
 _emscripten_glGetVertexAttribiv(0, 0, 0);
 _emscripten_glGetVertexAttribPointerv(0, 0, 0);
 _emscripten_glGetActiveUniform(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glUniform1f(0, Math_fround(0.0));
 _emscripten_glUniform2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glUniform1i(0, 0);
 _emscripten_glUniform2i(0, 0, 0);
 _emscripten_glUniform3i(0, 0, 0, 0);
 _emscripten_glUniform4i(0, 0, 0, 0, 0);
 _emscripten_glUniform1iv(0, 0, 0);
 _emscripten_glUniform2iv(0, 0, 0);
 _emscripten_glUniform3iv(0, 0, 0);
 _emscripten_glUniform4iv(0, 0, 0);
 _emscripten_glUniform1fv(0, 0, 0);
 _emscripten_glUniform2fv(0, 0, 0);
 _emscripten_glUniform3fv(0, 0, 0);
 _emscripten_glUniform4fv(0, 0, 0);
 _emscripten_glUniformMatrix2fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix3fv(0, 0, 0, 0);
 _emscripten_glUniformMatrix4fv(0, 0, 0, 0);
 _emscripten_glBindBuffer(0, 0);
 _emscripten_glVertexAttrib1fv(0, 0);
 _emscripten_glVertexAttrib2fv(0, 0);
 _emscripten_glVertexAttrib3fv(0, 0);
 _emscripten_glVertexAttrib4fv(0, 0);
 _emscripten_glGetAttribLocation(0, 0) | 0;
 _emscripten_glGetActiveAttrib(0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCreateShader(0) | 0;
 _emscripten_glDeleteShader(0);
 _emscripten_glGetAttachedShaders(0, 0, 0, 0);
 _emscripten_glShaderSource(0, 0, 0, 0);
 _emscripten_glGetShaderSource(0, 0, 0, 0);
 _emscripten_glCompileShader(0);
 _emscripten_glGetShaderInfoLog(0, 0, 0, 0);
 _emscripten_glGetShaderiv(0, 0, 0);
 _emscripten_glGetProgramiv(0, 0, 0);
 _emscripten_glIsShader(0) << 24 >> 24;
 _emscripten_glCreateProgram() | 0;
 _emscripten_glDeleteProgram(0);
 _emscripten_glAttachShader(0, 0);
 _emscripten_glDetachShader(0, 0);
 _emscripten_glGetShaderPrecisionFormat(0, 0, 0, 0);
 _emscripten_glLinkProgram(0);
 _emscripten_glGetProgramInfoLog(0, 0, 0, 0);
 _emscripten_glUseProgram(0);
 _emscripten_glValidateProgram(0);
 _emscripten_glIsProgram(0) << 24 >> 24;
 _emscripten_glBindAttribLocation(0, 0, 0);
 _emscripten_glBindFramebuffer(0, 0);
 _emscripten_glGenFramebuffers(0, 0);
 _emscripten_glDeleteFramebuffers(0, 0);
 _emscripten_glFramebufferRenderbuffer(0, 0, 0, 0);
 _emscripten_glFramebufferTexture2D(0, 0, 0, 0, 0);
 _emscripten_glGetFramebufferAttachmentParameteriv(0, 0, 0, 0);
 _emscripten_glIsFramebuffer(0) << 24 >> 24;
 _emscripten_glDeleteObjectARB(0);
 _emscripten_glGetObjectParameterivARB(0, 0, 0);
 _emscripten_glGetInfoLogARB(0, 0, 0, 0);
 _emscripten_glBindProgramARB(0, 0);
 _emscripten_glGetPointerv(0, 0);
 _emscripten_glDrawRangeElements(0, 0, 0, 0, 0, 0);
 _emscripten_glEnableClientState(0);
 _emscripten_glVertexPointer(0, 0, 0, 0);
 _emscripten_glTexCoordPointer(0, 0, 0, 0);
 _emscripten_glNormalPointer(0, 0, 0);
 _emscripten_glColorPointer(0, 0, 0, 0);
 _emscripten_glClientActiveTexture(0);
 _emscripten_glIsVertexArray(0) << 24 >> 24;
 _emscripten_glGenVertexArrays(0, 0);
 _emscripten_glDeleteVertexArrays(0, 0);
 _emscripten_glBindVertexArray(0);
 _emscripten_glMatrixMode(0);
 _emscripten_glLoadIdentity();
 _emscripten_glLoadMatrixf(0);
 _emscripten_glFrustum(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 _emscripten_glRotatef(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttribPointer(0, 0, 0, 0, 0, 0);
 _emscripten_glEnableVertexAttribArray(0);
 _emscripten_glDisableVertexAttribArray(0);
 _emscripten_glDrawArrays(0, 0, 0);
 _emscripten_glDrawElements(0, 0, 0, 0);
 _emscripten_glShaderBinary(0, 0, 0, 0, 0);
 _emscripten_glReleaseShaderCompiler();
 _emscripten_glGetError() | 0;
 _emscripten_glVertexAttribDivisor(0, 0);
 _emscripten_glDrawArraysInstanced(0, 0, 0, 0);
 _emscripten_glDrawElementsInstanced(0, 0, 0, 0, 0);
 _emscripten_glFinish();
 _emscripten_glFlush();
 _emscripten_glClearDepth(0.0);
 _emscripten_glClearDepthf(Math_fround(0.0));
 _emscripten_glDepthFunc(0);
 _emscripten_glEnable(0);
 _emscripten_glDisable(0);
 _emscripten_glFrontFace(0);
 _emscripten_glCullFace(0);
 _emscripten_glClear(0);
 _emscripten_glLineWidth(Math_fround(0.0));
 _emscripten_glClearStencil(0);
 _emscripten_glDepthMask(0);
 _emscripten_glStencilMask(0);
 _emscripten_glCheckFramebufferStatus(0) | 0;
 _emscripten_glGenerateMipmap(0);
 _emscripten_glActiveTexture(0);
 _emscripten_glBlendEquation(0);
 _emscripten_glIsEnabled(0) << 24 >> 24;
 _emscripten_glBlendFunc(0, 0);
 _emscripten_glBlendEquationSeparate(0, 0);
 _emscripten_glDepthRange(0.0, 0.0);
 _emscripten_glDepthRangef(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glStencilMaskSeparate(0, 0);
 _emscripten_glHint(0, 0);
 _emscripten_glPolygonOffset(Math_fround(0.0), Math_fround(0.0));
 _emscripten_glVertexAttrib1f(0, Math_fround(0.0));
 _emscripten_glSampleCoverage(Math_fround(0.0), 0);
 _emscripten_glTexParameteri(0, 0, 0);
 _emscripten_glTexParameterf(0, 0, Math_fround(0.0));
 _emscripten_glVertexAttrib2f(0, Math_fround(0.0), Math_fround(0.0));
 _emscripten_glStencilFunc(0, 0, 0);
 _emscripten_glStencilOp(0, 0, 0);
 _emscripten_glViewport(0, 0, 0, 0);
 _emscripten_glClearColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glScissor(0, 0, 0, 0);
 _emscripten_glVertexAttrib3f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glColorMask(0, 0, 0, 0);
 _emscripten_glRenderbufferStorage(0, 0, 0, 0);
 _emscripten_glBlendFuncSeparate(0, 0, 0, 0);
 _emscripten_glBlendColor(Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glStencilFuncSeparate(0, 0, 0, 0);
 _emscripten_glStencilOpSeparate(0, 0, 0, 0);
 _emscripten_glVertexAttrib4f(0, Math_fround(0.0), Math_fround(0.0), Math_fround(0.0), Math_fround(0.0));
 _emscripten_glCopyTexImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glCopyTexSubImage2D(0, 0, 0, 0, 0, 0, 0, 0);
 _emscripten_glDrawBuffers(0, 0);
 _emscripten_longjmp(0, 0);
}

function _inflate_fast(i26, i1) {
 i26 = i26 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0;
 i34 = 0;
 i25 = HEAP32[i26 + 28 >> 2] | 0;
 i2 = (HEAP32[i26 >> 2] | 0) + -1 | 0;
 i32 = i26 + 4 | 0;
 i33 = i2 + ((HEAP32[i32 >> 2] | 0) + -5) | 0;
 i27 = i26 + 12 | 0;
 i4 = (HEAP32[i27 >> 2] | 0) + -1 | 0;
 i28 = i26 + 16 | 0;
 i12 = HEAP32[i28 >> 2] | 0;
 i29 = i4 + (i12 + -257) | 0;
 i18 = HEAP32[i25 + 40 >> 2] | 0;
 i19 = HEAP32[i25 + 44 >> 2] | 0;
 i20 = HEAP32[i25 + 48 >> 2] | 0;
 i30 = i25 + 56 | 0;
 i31 = i25 + 60 | 0;
 i21 = HEAP32[i25 + 76 >> 2] | 0;
 i22 = HEAP32[i25 + 80 >> 2] | 0;
 i23 = (1 << HEAP32[i25 + 84 >> 2]) + -1 | 0;
 i24 = (1 << HEAP32[i25 + 88 >> 2]) + -1 | 0;
 i12 = i4 + (i12 - i1) | 0;
 i13 = i25 + 7104 | 0;
 i14 = (HEAP32[i25 + 52 >> 2] | 0) + -1 | 0;
 i15 = (i20 | 0) == 0;
 i16 = i20 + i18 | 0;
 i17 = i12 - i20 | 0;
 i1 = i4;
 i4 = HEAP32[i30 >> 2] | 0;
 i3 = HEAP32[i31 >> 2] | 0;
 L1 : while (1) {
  if (i3 >>> 0 < 15) {
   i11 = i2 + 2 | 0;
   i5 = i11;
   i4 = (HEAPU8[i2 + 1 >> 0] << i3) + i4 + (HEAPU8[i11 >> 0] << i3 + 8) | 0;
   i3 = i3 + 16 | 0;
  } else i5 = i2;
  i11 = i4 & i23;
  i11 = i21 + (i11 << 2) | 0;
  i2 = HEAP8[i11 >> 0] | 0;
  i6 = HEAP16[i11 + 2 >> 1] | 0;
  i11 = HEAPU8[i11 + 1 >> 0] | 0;
  i4 = i4 >>> i11;
  i3 = i3 - i11 | 0;
  do if (!(i2 << 24 >> 24)) {
   i2 = i6 & 255;
   i34 = 7;
  } else {
   i2 = i2 & 255;
   while (1) {
    if (i2 & 16 | 0) break;
    if (i2 & 64 | 0) {
     i34 = 53;
     break L1;
    }
    i11 = (i4 & (1 << i2) + -1) + (i6 & 65535) | 0;
    i11 = i21 + (i11 << 2) | 0;
    i2 = HEAP8[i11 >> 0] | 0;
    i6 = HEAP16[i11 + 2 >> 1] | 0;
    i11 = HEAPU8[i11 + 1 >> 0] | 0;
    i4 = i4 >>> i11;
    i3 = i3 - i11 | 0;
    if (!(i2 << 24 >> 24)) {
     i34 = 6;
     break;
    } else i2 = i2 & 255;
   }
   if ((i34 | 0) == 6) {
    i2 = i6 & 255;
    i34 = 7;
    break;
   }
   i8 = i6 & 65535;
   i6 = i2 & 15;
   if (i6) {
    i2 = i5 + 1 | 0;
    if (i3 >>> 0 < i6 >>> 0) {
     i5 = i2;
     i4 = (HEAPU8[i2 >> 0] << i3) + i4 | 0;
     i3 = i3 + 8 | 0;
    }
    i8 = (i4 & (1 << i6) + -1) + i8 | 0;
    i4 = i4 >>> i6;
    i3 = i3 - i6 | 0;
   }
   if (i3 >>> 0 < 15) {
    i11 = i5 + 2 | 0;
    i2 = i11;
    i4 = (HEAPU8[i5 + 1 >> 0] << i3) + i4 + (HEAPU8[i11 >> 0] << i3 + 8) | 0;
    i3 = i3 + 16 | 0;
   } else i2 = i5;
   i6 = i4 & i24;
   i6 = i22 + (i6 << 2) | 0;
   i7 = HEAP16[i6 + 2 >> 1] | 0;
   i11 = HEAPU8[i6 + 1 >> 0] | 0;
   i5 = i4 >>> i11;
   i3 = i3 - i11 | 0;
   i6 = HEAPU8[i6 >> 0] | 0;
   if (!(i6 & 16)) {
    i4 = i7;
    do {
     if (i6 & 64 | 0) {
      i4 = 66801;
      i34 = 55;
      break L1;
     }
     i6 = (i5 & (1 << i6) + -1) + (i4 & 65535) | 0;
     i6 = i22 + (i6 << 2) | 0;
     i4 = HEAP16[i6 + 2 >> 1] | 0;
     i11 = HEAPU8[i6 + 1 >> 0] | 0;
     i5 = i5 >>> i11;
     i3 = i3 - i11 | 0;
     i6 = HEAPU8[i6 >> 0] | 0;
    } while ((i6 & 16 | 0) == 0);
   } else i4 = i7;
   i9 = i4 & 65535;
   i10 = i6 & 15;
   if (i3 >>> 0 < i10 >>> 0) {
    i6 = i2 + 1 | 0;
    i5 = (HEAPU8[i6 >> 0] << i3) + i5 | 0;
    i7 = i3 + 8 | 0;
    i4 = i2 + 2 | 0;
    if (i7 >>> 0 < i10 >>> 0) {
     i2 = i4;
     i5 = (HEAPU8[i4 >> 0] << i7) + i5 | 0;
     i3 = i3 + 16 | 0;
    } else {
     i2 = i6;
     i3 = i7;
    }
   }
   i11 = (i5 & (1 << i10) + -1) + i9 | 0;
   i4 = i5 >>> i10;
   i3 = i3 - i10 | 0;
   i9 = i1;
   i5 = i9 - i12 | 0;
   if (i11 >>> 0 <= i5 >>> 0) {
    i7 = i1 + (0 - i11) | 0;
    while (1) {
     HEAP8[i1 + 1 >> 0] = HEAP8[i7 + 1 >> 0] | 0;
     HEAP8[i1 + 2 >> 0] = HEAP8[i7 + 2 >> 0] | 0;
     i5 = i7 + 3 | 0;
     i6 = i1 + 3 | 0;
     HEAP8[i6 >> 0] = HEAP8[i5 >> 0] | 0;
     i8 = i8 + -3 | 0;
     if (i8 >>> 0 <= 2) break; else {
      i7 = i5;
      i1 = i6;
     }
    }
    if (!i8) {
     i1 = i6;
     break;
    }
    i5 = i1 + 4 | 0;
    HEAP8[i5 >> 0] = HEAP8[i7 + 4 >> 0] | 0;
    if ((i8 | 0) == 1) {
     i1 = i5;
     break;
    }
    i1 = i1 + 5 | 0;
    HEAP8[i1 >> 0] = HEAP8[i7 + 5 >> 0] | 0;
    break;
   }
   i7 = i11 - i5 | 0;
   if (i7 >>> 0 > i19 >>> 0) if (HEAP32[i13 >> 2] | 0) {
    i5 = i4;
    i4 = 66823;
    i34 = 55;
    break L1;
   }
   do if (i15) {
    i6 = i14 + (i18 - i7) | 0;
    if (i8 >>> 0 > i7 >>> 0) {
     i5 = i8 - i7 | 0;
     i9 = i11 - i9 | 0;
     i8 = i1;
     do {
      i6 = i6 + 1 | 0;
      i8 = i8 + 1 | 0;
      HEAP8[i8 >> 0] = HEAP8[i6 >> 0] | 0;
      i7 = i7 + -1 | 0;
     } while ((i7 | 0) != 0);
     i1 = i1 + i12 + i9 | 0;
     i6 = i1 + (0 - i11) | 0;
    } else i5 = i8;
   } else {
    if (i20 >>> 0 >= i7 >>> 0) {
     i6 = i14 + (i20 - i7) | 0;
     if (i8 >>> 0 <= i7 >>> 0) {
      i5 = i8;
      break;
     }
     i5 = i8 - i7 | 0;
     i9 = i11 - i9 | 0;
     i8 = i1;
     do {
      i6 = i6 + 1 | 0;
      i8 = i8 + 1 | 0;
      HEAP8[i8 >> 0] = HEAP8[i6 >> 0] | 0;
      i7 = i7 + -1 | 0;
     } while ((i7 | 0) != 0);
     i1 = i1 + i12 + i9 | 0;
     i6 = i1 + (0 - i11) | 0;
     break;
    }
    i6 = i14 + (i16 - i7) | 0;
    i7 = i7 - i20 | 0;
    if (i8 >>> 0 > i7 >>> 0) {
     i5 = i8 - i7 | 0;
     i10 = i11 - i9 | 0;
     i8 = i1;
     do {
      i6 = i6 + 1 | 0;
      i8 = i8 + 1 | 0;
      HEAP8[i8 >> 0] = HEAP8[i6 >> 0] | 0;
      i7 = i7 + -1 | 0;
     } while ((i7 | 0) != 0);
     i9 = i1 + i17 + i10 | 0;
     if (i5 >>> 0 > i20 >>> 0) {
      i8 = i1 + i12 | 0;
      i6 = i14;
      i7 = i20;
      i1 = i9;
      do {
       i6 = i6 + 1 | 0;
       i1 = i1 + 1 | 0;
       HEAP8[i1 >> 0] = HEAP8[i6 >> 0] | 0;
       i7 = i7 + -1 | 0;
      } while ((i7 | 0) != 0);
      i1 = i8 + i10 | 0;
      i5 = i5 - i20 | 0;
      i6 = i1 + (0 - i11) | 0;
     } else {
      i6 = i14;
      i1 = i9;
     }
    } else i5 = i8;
   } while (0);
   if (i5 >>> 0 > 2) do {
    HEAP8[i1 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
    HEAP8[i1 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
    i6 = i6 + 3 | 0;
    i1 = i1 + 3 | 0;
    HEAP8[i1 >> 0] = HEAP8[i6 >> 0] | 0;
    i5 = i5 + -3 | 0;
   } while (i5 >>> 0 > 2);
   if (i5) {
    i7 = i1 + 1 | 0;
    HEAP8[i7 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
    if ((i5 | 0) == 1) i1 = i7; else {
     i1 = i1 + 2 | 0;
     HEAP8[i1 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
    }
   }
  } while (0);
  if ((i34 | 0) == 7) {
   i34 = 0;
   i1 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i2;
   i2 = i5;
  }
  if (!(i1 >>> 0 < i29 >>> 0 & i2 >>> 0 < i33 >>> 0)) {
   i34 = 57;
   break;
  }
 }
 if ((i34 | 0) == 53) if (!(i2 & 32)) {
  i2 = i5;
  i5 = i4;
  i4 = 66773;
  i34 = 55;
 } else {
  i2 = i5;
  i5 = i4;
  i4 = 11;
 } else if ((i34 | 0) == 57) {
  i24 = i3 >>> 3;
  i24 = 0 - i24 | 0;
  i24 = i2 + i24 | 0;
  i34 = i3 & 7;
  i25 = 1 << i34;
  i25 = i25 + -1 | 0;
  i25 = i25 & i4;
  i23 = i24 + 1 | 0;
  HEAP32[i26 >> 2] = i23;
  i26 = i1 + 1 | 0;
  HEAP32[i27 >> 2] = i26;
  i27 = i24;
  i33 = i33 + 5 | 0;
  i33 = i33 - i27 | 0;
  HEAP32[i32 >> 2] = i33;
  i33 = i1;
  i32 = i29;
  i32 = i32 + 257 | 0;
  i33 = i32 - i33 | 0;
  HEAP32[i28 >> 2] = i33;
  HEAP32[i30 >> 2] = i25;
  HEAP32[i31 >> 2] = i34;
  return;
 }
 if ((i34 | 0) == 55) {
  HEAP32[i26 + 24 >> 2] = i4;
  i4 = 29;
 }
 HEAP32[i25 >> 2] = i4;
 i25 = i5;
 i34 = i3;
 i22 = i2;
 i24 = i1;
 i23 = i34 >>> 3;
 i23 = 0 - i23 | 0;
 i23 = i22 + i23 | 0;
 i34 = i34 & 7;
 i22 = 1 << i34;
 i22 = i22 + -1 | 0;
 i25 = i22 & i25;
 i22 = i23 + 1 | 0;
 HEAP32[i26 >> 2] = i22;
 i26 = i24 + 1 | 0;
 HEAP32[i27 >> 2] = i26;
 i27 = i23;
 i33 = i33 + 5 | 0;
 i33 = i33 - i27 | 0;
 HEAP32[i32 >> 2] = i33;
 i33 = i24;
 i32 = i29;
 i32 = i32 + 257 | 0;
 i33 = i32 - i33 | 0;
 HEAP32[i28 >> 2] = i33;
 HEAP32[i30 >> 2] = i25;
 HEAP32[i31 >> 2] = i34;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i11, i19, i20, i14, i21, i15, i1, i16) {
 i11 = i11 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i14 = i14 | 0;
 i21 = i21 | 0;
 i15 = i15 | 0;
 i1 = i1 | 0;
 i16 = i16 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i17 = 0, i18 = 0, i22 = 0, i23 = 0;
 i22 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i23 + 12 | 0;
 i9 = i23 + 8 | 0;
 i17 = i23 + 4 | 0;
 i18 = i23;
 __ZNKSt3__28ios_base6getlocEv(i10, i14);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 83620) | 0;
 __ZNSt3__26localeD2Ev(i10);
 HEAP32[i21 >> 2] = 0;
 i13 = i12 + 8 | 0;
 i2 = 0;
 L1 : while (1) {
  i8 = (i1 | 0) != (i16 | 0);
  i3 = i2;
  while (1) {
   i2 = HEAP32[i19 >> 2] | 0;
   if (!(i8 & (i3 | 0) == 0)) break L1;
   i4 = i2;
   if (!i2) {
    i2 = 0;
    i6 = 1;
    i7 = i4;
   } else {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i19 >> 2] = 0;
     i2 = 0;
     i6 = 1;
     i7 = 0;
    } else {
     i6 = 0;
     i7 = i4;
    }
   }
   i5 = HEAP32[i20 >> 2] | 0;
   i3 = i5;
   do if (!i5) i22 = 16; else {
    i4 = HEAP32[i5 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i4 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i4, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i20 >> 2] = 0;
     i3 = 0;
     i22 = 16;
     break;
    } else if (i6) break; else {
     i22 = 62;
     break L1;
    }
   } while (0);
   if ((i22 | 0) == 16) {
    i22 = 0;
    if (i6) {
     i22 = 62;
     break L1;
    } else i5 = 0;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i1 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    i22 = 19;
    break;
   }
   i3 = HEAP8[i1 >> 0] | 0;
   if (i3 << 24 >> 24 > -1) {
    i4 = HEAP32[i13 >> 2] | 0;
    if (HEAP16[i4 + (i3 << 24 >> 24 << 1) >> 1] & 8192) {
     i22 = 26;
     break;
    }
   }
   i4 = i2 + 12 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   i5 = i2 + 16 | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, i3 & 255) | 0;
   if (i7 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, HEAP8[i1 >> 0] | 0) | 0) << 24 >> 24) {
    i22 = 56;
    break;
   }
   HEAP32[i21 >> 2] = 4;
   i3 = 4;
  }
  L35 : do if ((i22 | 0) == 19) {
   i22 = 0;
   i6 = i1 + 1 | 0;
   if ((i6 | 0) == (i16 | 0)) {
    i22 = 62;
    break L1;
   }
   i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i6 >> 0] | 0, 0) | 0;
   switch (i4 << 24 >> 24) {
   case 48:
   case 69:
    {
     i1 = i1 + 2 | 0;
     if ((i1 | 0) == (i16 | 0)) {
      i22 = 62;
      break L1;
     }
     i5 = i4;
     i2 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, HEAP8[i1 >> 0] | 0, 0) | 0;
     i1 = i6;
     break;
    }
   default:
    {
     i5 = 0;
     i2 = i4;
    }
   }
   i8 = HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[i17 >> 2] = i7;
   HEAP32[i18 >> 2] = i3;
   HEAP32[i9 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i19 >> 2] = FUNCTION_TABLE_iiiiiiiii[i8 & 31](i11, i9, i10, i14, i21, i15, i2, i5) | 0;
   i1 = i1 + 2 | 0;
  } else if ((i22 | 0) == 26) {
   while (1) {
    i22 = 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i16 | 0)) {
     i1 = i16;
     break;
    }
    i3 = HEAP8[i1 >> 0] | 0;
    if (i3 << 24 >> 24 <= -1) break;
    if (!(HEAP16[i4 + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break; else i22 = 26;
   }
   i3 = i5;
   while (1) {
    if (!i2) {
     i6 = 1;
     i2 = 0;
    } else {
     i4 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i4 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i4, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i19 >> 2] = 0;
      i6 = 1;
      i2 = 0;
     } else i6 = 0;
    }
    do if (!i5) i22 = 42; else {
     i4 = HEAP32[i5 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i4 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i4, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i20 >> 2] = 0;
      i3 = 0;
      i22 = 42;
      break;
     } else if (i6 ^ (i3 | 0) == 0) {
      i7 = i3;
      i5 = i3;
      break;
     } else break L35;
    } while (0);
    if ((i22 | 0) == 42) {
     i22 = 0;
     if (i6) break L35; else {
      i7 = i3;
      i5 = 0;
     }
    }
    i4 = i2 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i6 = i2 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
    if ((i3 & 255) << 24 >> 24 <= -1) break L35;
    if (!(HEAP16[(HEAP32[i13 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break L35;
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
     i3 = i7;
     continue;
    } else {
     HEAP32[i4 >> 2] = i3 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
     i3 = i7;
     continue;
    }
   }
  } else if ((i22 | 0) == 56) {
   i22 = 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0; else {
    HEAP32[i4 >> 2] = i3 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   }
   i1 = i1 + 1 | 0;
  } while (0);
  i2 = HEAP32[i21 >> 2] | 0;
 }
 if ((i22 | 0) == 62) HEAP32[i21 >> 2] = 4;
 if (!i2) {
  i2 = 0;
  i4 = 1;
 } else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i2 = 0;
   i4 = 1;
  } else i4 = 0;
 }
 i1 = HEAP32[i20 >> 2] | 0;
 do if (!i1) i22 = 75; else {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i20 >> 2] = 0;
   i22 = 75;
   break;
  } else if (i4) break; else {
   i22 = 77;
   break;
  }
 } while (0);
 if ((i22 | 0) == 75) if (i4) i22 = 77;
 if ((i22 | 0) == 77) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 STACKTOP = i23;
 return i2 | 0;
}

function ___rem_pio2_large(i19, i2, i23, i20, i26) {
 i19 = i19 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 i26 = i26 | 0;
 var d1 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, d31 = 0.0;
 i28 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560);
 i24 = i30 + 480 | 0;
 i21 = i30 + 320 | 0;
 i29 = i30 + 160 | 0;
 i27 = i30;
 i25 = HEAP32[31224 + (i26 << 2) >> 2] | 0;
 i9 = i20 + -1 | 0;
 i18 = (i23 + -3 | 0) / 24 | 0;
 i18 = (i18 | 0) > 0 ? i18 : 0;
 i22 = Math_imul(i18, -24) | 0;
 i4 = i23 + -24 + i22 | 0;
 if ((i25 + i9 | 0) >= 0) {
  i7 = i25 + i20 | 0;
  i5 = i18 - i9 | 0;
  i6 = 0;
  while (1) {
   if ((i5 | 0) < 0) d1 = 0.0; else d1 = +(HEAP32[31240 + (i5 << 2) >> 2] | 0);
   HEAPF64[i21 + (i6 << 3) >> 3] = d1;
   i6 = i6 + 1 | 0;
   if ((i6 | 0) == (i7 | 0)) break; else i5 = i5 + 1 | 0;
  }
 }
 i8 = (i20 | 0) > 0;
 i7 = 0;
 while (1) {
  if (i8) {
   i6 = i7 + i9 | 0;
   d1 = 0.0;
   i5 = 0;
   do {
    d1 = d1 + +HEAPF64[i19 + (i5 << 3) >> 3] * +HEAPF64[i21 + (i6 - i5 << 3) >> 3];
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != (i20 | 0));
  } else d1 = 0.0;
  HEAPF64[i27 + (i7 << 3) >> 3] = d1;
  if ((i7 | 0) < (i25 | 0)) i7 = i7 + 1 | 0; else break;
 }
 i13 = (i4 | 0) > 0;
 i14 = 24 - i4 | 0;
 i15 = 23 - i4 | 0;
 i16 = (i20 | 0) > 0;
 i17 = (i4 | 0) == 0;
 i5 = i25;
 L17 : while (1) {
  d1 = +HEAPF64[i27 + (i5 << 3) >> 3];
  i8 = (i5 | 0) > 0;
  if (i8) {
   i6 = i5;
   i7 = 0;
   while (1) {
    d3 = +(~~(d1 * 5.9604644775390625e-08) | 0);
    HEAP32[i24 + (i7 << 2) >> 2] = ~~(d1 - d3 * 16777216.0);
    i12 = i6;
    i6 = i6 + -1 | 0;
    d1 = +HEAPF64[i27 + (i6 << 3) >> 3] + d3;
    if ((i12 | 0) <= 1) break; else i7 = i7 + 1 | 0;
   }
  }
  d1 = +_scalbn(d1, i4);
  d1 = d1 - +Math_floor(+(d1 * .125)) * 8.0;
  i6 = ~~d1;
  d1 = d1 - +(i6 | 0);
  do if (i13) {
   i12 = i24 + (i5 + -1 << 2) | 0;
   i7 = HEAP32[i12 >> 2] | 0;
   i28 = i7 >> i14;
   i7 = i7 - (i28 << i14) | 0;
   HEAP32[i12 >> 2] = i7;
   i7 = i7 >> i15;
   i6 = i28 + i6 | 0;
   i28 = 19;
  } else if (i17) {
   i7 = HEAP32[i24 + (i5 + -1 << 2) >> 2] >> 23;
   i28 = 19;
   break;
  } else if (!(d1 >= .5)) {
   i9 = 0;
   i12 = i6;
   break;
  } else {
   i7 = 2;
   i28 = 20;
   break;
  } while (0);
  if ((i28 | 0) == 19) {
   i28 = 0;
   if ((i7 | 0) > 0) i28 = 20; else {
    i9 = i7;
    i12 = i6;
   }
  }
  if ((i28 | 0) == 20) {
   i28 = 0;
   i12 = i6 + 1 | 0;
   if (i8) {
    i6 = 0;
    i11 = 0;
    do {
     i9 = i24 + (i11 << 2) | 0;
     i10 = HEAP32[i9 >> 2] | 0;
     if (!i6) if (!i10) i6 = 0; else {
      i6 = 1;
      i8 = 16777216;
      i28 = 23;
     } else {
      i8 = 16777215;
      i28 = 23;
     }
     if ((i28 | 0) == 23) {
      i28 = 0;
      HEAP32[i9 >> 2] = i8 - i10;
     }
     i11 = i11 + 1 | 0;
    } while ((i11 | 0) != (i5 | 0));
   } else i6 = 0;
   L42 : do if (i13) {
    switch (i4 | 0) {
    case 1:
     {
      i8 = 8388607;
      break;
     }
    case 2:
     {
      i8 = 4194303;
      break;
     }
    default:
     break L42;
    }
    i11 = i24 + (i5 + -1 << 2) | 0;
    HEAP32[i11 >> 2] = HEAP32[i11 >> 2] & i8;
   } while (0);
   if ((i7 | 0) == 2) {
    d1 = 1.0 - d1;
    if (!i6) i9 = 2; else {
     i9 = 2;
     d1 = d1 - +_scalbn(1.0, i4);
    }
   } else i9 = i7;
  }
  if (!(d1 == 0.0)) {
   i28 = 42;
   break;
  }
  if ((i5 | 0) > (i25 | 0)) {
   i6 = 0;
   i7 = i5;
   do {
    i7 = i7 + -1 | 0;
    i6 = HEAP32[i24 + (i7 << 2) >> 2] | i6;
   } while ((i7 | 0) > (i25 | 0));
   if (!i6) i6 = 1; else {
    i28 = 41;
    break;
   }
  } else i6 = 1;
  while (1) if (!(HEAP32[i24 + (i25 - i6 << 2) >> 2] | 0)) i6 = i6 + 1 | 0; else break;
  i8 = i6 + i5 | 0;
  if ((i6 | 0) <= 0) {
   i5 = i8;
   continue;
  }
  while (1) {
   i7 = i5 + 1 | 0;
   i6 = i5 + i20 | 0;
   HEAPF64[i21 + (i6 << 3) >> 3] = +(HEAP32[31240 + (i7 + i18 << 2) >> 2] | 0);
   if (i16) {
    d1 = 0.0;
    i5 = 0;
    do {
     d1 = d1 + +HEAPF64[i19 + (i5 << 3) >> 3] * +HEAPF64[i21 + (i6 - i5 << 3) >> 3];
     i5 = i5 + 1 | 0;
    } while ((i5 | 0) != (i20 | 0));
   } else d1 = 0.0;
   HEAPF64[i27 + (i7 << 3) >> 3] = d1;
   if ((i7 | 0) < (i8 | 0)) i5 = i7; else {
    i5 = i8;
    continue L17;
   }
  }
 }
 if ((i28 | 0) == 41) while (1) {
  i28 = 0;
  i4 = i4 + -24 | 0;
  i5 = i5 + -1 | 0;
  if (!(HEAP32[i24 + (i5 << 2) >> 2] | 0)) i28 = 41; else {
   i8 = i5;
   break;
  }
 } else if ((i28 | 0) == 42) {
  d1 = +_scalbn(d1, 0 - i4 | 0);
  if (d1 >= 16777216.0) {
   d3 = +(~~(d1 * 5.9604644775390625e-08) | 0);
   HEAP32[i24 + (i5 << 2) >> 2] = ~~(d1 - d3 * 16777216.0);
   i4 = i22 + i23 | 0;
   i5 = i5 + 1 | 0;
   d1 = d3;
  }
  HEAP32[i24 + (i5 << 2) >> 2] = ~~d1;
  i8 = i5;
 }
 d1 = +_scalbn(1.0, i4);
 i7 = (i8 | 0) > -1;
 if (i7) {
  i4 = i8;
  while (1) {
   HEAPF64[i27 + (i4 << 3) >> 3] = d1 * +(HEAP32[i24 + (i4 << 2) >> 2] | 0);
   if ((i4 | 0) > 0) {
    d1 = d1 * 5.9604644775390625e-08;
    i4 = i4 + -1 | 0;
   } else break;
  }
  if (i7) {
   i5 = i8;
   while (1) {
    i6 = i8 - i5 | 0;
    i4 = 0;
    d1 = 0.0;
    while (1) {
     d1 = d1 + +HEAPF64[1128 + (i4 << 3) >> 3] * +HEAPF64[i27 + (i4 + i5 << 3) >> 3];
     if ((i4 | 0) >= (i25 | 0) | (i4 | 0) >= (i6 | 0)) break; else i4 = i4 + 1 | 0;
    }
    HEAPF64[i29 + (i6 << 3) >> 3] = d1;
    if ((i5 | 0) > 0) i5 = i5 + -1 | 0; else break;
   }
  }
 }
 switch (i26 | 0) {
 case 0:
  {
   if (i7) {
    d1 = 0.0;
    i4 = i8;
    while (1) {
     d1 = d1 + +HEAPF64[i29 + (i4 << 3) >> 3];
     if ((i4 | 0) > 0) i4 = i4 + -1 | 0; else break;
    }
   } else d1 = 0.0;
   d3 = (i9 | 0) == 0 ? d1 : -d1;
   i28 = 72;
   break;
  }
 case 2:
 case 1:
  {
   if (i7) {
    d1 = 0.0;
    i4 = i8;
    while (1) {
     d1 = d1 + +HEAPF64[i29 + (i4 << 3) >> 3];
     if ((i4 | 0) > 0) i4 = i4 + -1 | 0; else break;
    }
   } else d1 = 0.0;
   i5 = (i9 | 0) == 0;
   HEAPF64[i2 >> 3] = i5 ? d1 : -d1;
   d1 = +HEAPF64[i29 >> 3] - d1;
   if ((i8 | 0) >= 1) {
    i4 = 1;
    while (1) {
     d1 = d1 + +HEAPF64[i29 + (i4 << 3) >> 3];
     if ((i4 | 0) == (i8 | 0)) break; else i4 = i4 + 1 | 0;
    }
   }
   d3 = i5 ? d1 : -d1;
   i2 = i2 + 8 | 0;
   i28 = 72;
   break;
  }
 case 3:
  {
   if ((i8 | 0) > 0) {
    i4 = i8;
    d1 = +HEAPF64[i29 + (i8 << 3) >> 3];
    do {
     i28 = i4;
     i4 = i4 + -1 | 0;
     i27 = i29 + (i4 << 3) | 0;
     d3 = +HEAPF64[i27 >> 3];
     d31 = d1;
     d1 = d3 + d1;
     HEAPF64[i29 + (i28 << 3) >> 3] = d31 + (d3 - d1);
     HEAPF64[i27 >> 3] = d1;
    } while ((i28 | 0) > 1);
    i5 = (i8 | 0) > 1;
    if (i5) {
     i4 = i8;
     d1 = +HEAPF64[i29 + (i8 << 3) >> 3];
     do {
      i28 = i4;
      i4 = i4 + -1 | 0;
      i27 = i29 + (i4 << 3) | 0;
      d31 = +HEAPF64[i27 >> 3];
      d3 = d1;
      d1 = d31 + d1;
      HEAPF64[i29 + (i28 << 3) >> 3] = d3 + (d31 - d1);
      HEAPF64[i27 >> 3] = d1;
     } while ((i28 | 0) > 2);
     if (i5) {
      i4 = i8;
      d3 = 0.0;
      while (1) {
       d3 = d3 + +HEAPF64[i29 + (i4 << 3) >> 3];
       if ((i4 | 0) > 2) i4 = i4 + -1 | 0; else break;
      }
     } else d3 = 0.0;
    } else d3 = 0.0;
   } else d3 = 0.0;
   d1 = +HEAPF64[i29 >> 3];
   if (!i9) {
    HEAPF64[i2 >> 3] = d1;
    d1 = +HEAPF64[i29 + 8 >> 3];
   } else {
    HEAPF64[i2 >> 3] = -d1;
    d3 = -d3;
    d1 = -+HEAPF64[i29 + 8 >> 3];
   }
   HEAPF64[i2 + 8 >> 3] = d1;
   i2 = i2 + 16 | 0;
   i28 = 72;
   break;
  }
 default:
  {}
 }
 if ((i28 | 0) == 72) HEAPF64[i2 >> 3] = d3;
 STACKTOP = i30;
 return i12 & 7 | 0;
}

function ___intscan(i13, i4, i6, i1, i2) {
 i13 = i13 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i4 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 100 | 0;
  do {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
  } while ((_isspace(i3) | 0) != 0);
  L11 : do switch (i3 | 0) {
  case 43:
  case 45:
   {
    i3 = ((i3 | 0) == 45) << 31 >> 31;
    i5 = HEAP32[i15 >> 2] | 0;
    if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i5 + 1;
     i12 = i3;
     i3 = HEAPU8[i5 >> 0] | 0;
     break L11;
    } else {
     i12 = i3;
     i3 = ___shgetc(i13) | 0;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i4 | 0) == 0;
  do if ((i4 | 16 | 0) == 16 & (i3 | 0) == 48) {
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((i3 | 32 | 0) != 120) if (i5) {
    i4 = 8;
    i10 = 46;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i3 = HEAPU8[i3 >> 0] | 0;
   } else i3 = ___shgetc(i13) | 0;
   if ((HEAPU8[69724 + i3 >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) == 0;
    if (!i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i4 = 16;
    i10 = 46;
   }
  } else {
   i4 = i5 ? 10 : i4;
   if (i4 >>> 0 > (HEAPU8[69724 + i3 >> 0] | 0) >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((i10 | 0) == 32) if ((i4 | 0) == 10) {
   i4 = i3 + -48 | 0;
   if (i4 >>> 0 < 10) {
    i3 = 0;
    i5 = i4;
    do {
     i3 = (i3 * 10 | 0) + i5 | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = i4 + -48 | 0;
    } while (i5 >>> 0 < 10 & i3 >>> 0 < 429496729);
    i6 = 0;
   } else {
    i4 = i3;
    i3 = 0;
    i6 = 0;
   }
   i7 = i4 + -48 | 0;
   if (i7 >>> 0 < 10) {
    i5 = i4;
    do {
     i4 = ___muldi3(i3 | 0, i6 | 0, 10, 0) | 0;
     i8 = tempRet0;
     i9 = ((i7 | 0) < 0) << 31 >> 31;
     i11 = ~i9;
     if (i8 >>> 0 > i11 >>> 0 | (i8 | 0) == (i11 | 0) & i4 >>> 0 > ~i7 >>> 0) {
      i4 = 10;
      i10 = 72;
      break L43;
     }
     i3 = _i64Add(i4 | 0, i8 | 0, i7 | 0, i9 | 0) | 0;
     i6 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i5 = HEAPU8[i4 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i7 = i5 + -48 | 0;
    } while (i7 >>> 0 < 10 & (i6 >>> 0 < 429496729 | (i6 | 0) == 429496729 & i3 >>> 0 < 2576980378));
    if (i7 >>> 0 > 9) {
     i5 = i12;
     i4 = i6;
    } else {
     i4 = 10;
     i10 = 72;
    }
   } else {
    i5 = i12;
    i4 = i6;
   }
  } else i10 = 46; while (0);
  L63 : do if ((i10 | 0) == 46) {
   if (!(i4 + -1 & i4)) {
    i10 = HEAP8[69980 + ((i4 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i6 = HEAP8[69724 + i3 >> 0] | 0;
    i5 = i6 & 255;
    if (i4 >>> 0 > i5 >>> 0) {
     i3 = 0;
     i7 = i5;
     do {
      i3 = i7 | i3 << i10;
      i5 = HEAP32[i15 >> 2] | 0;
      if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i5 + 1;
       i5 = HEAPU8[i5 >> 0] | 0;
      } else i5 = ___shgetc(i13) | 0;
      i6 = HEAP8[69724 + i5 >> 0] | 0;
      i7 = i6 & 255;
     } while (i3 >>> 0 < 134217728 & i4 >>> 0 > i7 >>> 0);
     i7 = 0;
    } else {
     i5 = i3;
     i7 = 0;
     i3 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i9 = tempRet0;
    if (i4 >>> 0 <= (i6 & 255) >>> 0 | (i9 >>> 0 < i7 >>> 0 | (i9 | 0) == (i7 | 0) & i8 >>> 0 < i3 >>> 0)) {
     i6 = i7;
     i10 = 72;
     break;
    } else i5 = i7;
    while (1) {
     i3 = _bitshift64Shl(i3 | 0, i5 | 0, i10 | 0) | 0;
     i7 = tempRet0;
     i3 = i3 | i6 & 255;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[69724 + i5 >> 0] | 0;
     if (i4 >>> 0 <= (i6 & 255) >>> 0 | (i7 >>> 0 > i9 >>> 0 | (i7 | 0) == (i9 | 0) & i3 >>> 0 > i8 >>> 0)) {
      i6 = i7;
      i10 = 72;
      break L63;
     } else i5 = i7;
    }
   }
   i6 = HEAP8[69724 + i3 >> 0] | 0;
   i5 = i6 & 255;
   if (i4 >>> 0 > i5 >>> 0) {
    i3 = 0;
    i7 = i5;
    do {
     i3 = i7 + (Math_imul(i3, i4) | 0) | 0;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[69724 + i5 >> 0] | 0;
     i7 = i6 & 255;
    } while (i3 >>> 0 < 119304647 & i4 >>> 0 > i7 >>> 0);
    i7 = 0;
   } else {
    i5 = i3;
    i3 = 0;
    i7 = 0;
   }
   if (i4 >>> 0 > (i6 & 255) >>> 0) {
    i10 = ___udivdi3(-1, -1, i4 | 0, 0) | 0;
    i11 = tempRet0;
    i9 = i7;
    while (1) {
     if (i9 >>> 0 > i11 >>> 0 | (i9 | 0) == (i11 | 0) & i3 >>> 0 > i10 >>> 0) {
      i6 = i9;
      i10 = 72;
      break L63;
     }
     i7 = ___muldi3(i3 | 0, i9 | 0, i4 | 0, 0) | 0;
     i8 = tempRet0;
     i6 = i6 & 255;
     if (i8 >>> 0 > 4294967295 | (i8 | 0) == -1 & i7 >>> 0 > ~i6 >>> 0) {
      i6 = i9;
      i10 = 72;
      break L63;
     }
     i3 = _i64Add(i7 | 0, i8 | 0, i6 | 0, 0) | 0;
     i7 = tempRet0;
     i5 = HEAP32[i15 >> 2] | 0;
     if (i5 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i5 + 1;
      i5 = HEAPU8[i5 >> 0] | 0;
     } else i5 = ___shgetc(i13) | 0;
     i6 = HEAP8[69724 + i5 >> 0] | 0;
     if (i4 >>> 0 <= (i6 & 255) >>> 0) {
      i6 = i7;
      i10 = 72;
      break;
     } else i9 = i7;
    }
   } else {
    i6 = i7;
    i10 = 72;
   }
  } while (0);
  if ((i10 | 0) == 72) if (i4 >>> 0 > (HEAPU8[69724 + i5 >> 0] | 0) >>> 0) {
   do {
    i3 = HEAP32[i15 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
    } else i3 = ___shgetc(i13) | 0;
   } while (i4 >>> 0 > (HEAPU8[69724 + i3 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i5 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
   i4 = i2;
   i3 = i1;
  } else {
   i5 = i12;
   i4 = i6;
  }
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i4 >>> 0 < i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i5 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
    break;
   }
   if (i4 >>> 0 > i2 >>> 0 | (i4 | 0) == (i2 | 0) & i3 >>> 0 > i1 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    break;
   }
  }
  i1 = ((i5 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i3 ^ i5 | 0, i4 ^ i1 | 0, i5 | 0, i1 | 0) | 0;
  i2 = tempRet0;
 } while (0);
 tempRet0 = i2;
 return i1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i11, i18, i19, i13, i20, i14, i1, i15) {
 i11 = i11 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i13 = i13 | 0;
 i20 = i20 | 0;
 i14 = i14 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i22 + 12 | 0;
 i9 = i22 + 8 | 0;
 i16 = i22 + 4 | 0;
 i17 = i22;
 __ZNKSt3__28ios_base6getlocEv(i10, i13);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 83652) | 0;
 __ZNSt3__26localeD2Ev(i10);
 HEAP32[i20 >> 2] = 0;
 i2 = 0;
 L1 : while (1) {
  i8 = (i1 | 0) != (i15 | 0);
  i3 = i2;
  while (1) {
   i2 = HEAP32[i18 >> 2] | 0;
   if (!(i8 & (i3 | 0) == 0)) break L1;
   i4 = i2;
   if (!i2) {
    i2 = 0;
    i6 = 1;
    i7 = i4;
   } else {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i18 >> 2] = 0;
     i2 = 0;
     i6 = 1;
     i7 = 0;
    } else {
     i6 = 0;
     i7 = i4;
    }
   }
   i5 = HEAP32[i19 >> 2] | 0;
   i3 = i5;
   do if (!i5) i21 = 16; else {
    i4 = HEAP32[i5 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i4 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i4, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i19 >> 2] = 0;
     i3 = 0;
     i21 = 16;
     break;
    } else if (i6) break; else {
     i21 = 59;
     break L1;
    }
   } while (0);
   if ((i21 | 0) == 16) {
    i21 = 0;
    if (i6) {
     i21 = 59;
     break L1;
    } else i5 = 0;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i1 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    i21 = 19;
    break;
   }
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, HEAP32[i1 >> 2] | 0) | 0) {
    i21 = 25;
    break;
   }
   i4 = i2 + 12 | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   i5 = i2 + 16 | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 63](i12, i3) | 0;
   if ((i7 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 63](i12, HEAP32[i1 >> 2] | 0) | 0)) {
    i21 = 53;
    break;
   }
   HEAP32[i20 >> 2] = 4;
   i3 = 4;
  }
  L33 : do if ((i21 | 0) == 19) {
   i21 = 0;
   i6 = i1 + 4 | 0;
   if ((i6 | 0) == (i15 | 0)) {
    i21 = 59;
    break L1;
   }
   i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i6 >> 2] | 0, 0) | 0;
   switch (i4 << 24 >> 24) {
   case 48:
   case 69:
    {
     i1 = i1 + 8 | 0;
     if ((i1 | 0) == (i15 | 0)) {
      i21 = 59;
      break L1;
     }
     i5 = i4;
     i2 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 63](i12, HEAP32[i1 >> 2] | 0, 0) | 0;
     i1 = i6;
     break;
    }
   default:
    {
     i5 = 0;
     i2 = i4;
    }
   }
   i8 = HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[i16 >> 2] = i7;
   HEAP32[i17 >> 2] = i3;
   HEAP32[i9 >> 2] = HEAP32[i16 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i18 >> 2] = FUNCTION_TABLE_iiiiiiiii[i8 & 31](i11, i9, i10, i13, i20, i14, i2, i5) | 0;
   i1 = i1 + 8 | 0;
  } else if ((i21 | 0) == 25) {
   while (1) {
    i21 = 0;
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i15 | 0)) {
     i1 = i15;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, HEAP32[i1 >> 2] | 0) | 0) i21 = 25; else break;
   }
   i3 = i5;
   i6 = i5;
   while (1) {
    if (!i2) {
     i5 = 1;
     i2 = 0;
    } else {
     i4 = HEAP32[i2 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i4 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i4, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i18 >> 2] = 0;
      i5 = 1;
      i2 = 0;
     } else i5 = 0;
    }
    do if (!i6) i21 = 40; else {
     i4 = HEAP32[i6 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0; else i4 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i4, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[i19 >> 2] = 0;
      i3 = 0;
      i21 = 40;
      break;
     } else if (i5 ^ (i3 | 0) == 0) {
      i7 = i3;
      i6 = i3;
      break;
     } else break L33;
    } while (0);
    if ((i21 | 0) == 40) {
     i21 = 0;
     if (i5) break L33; else {
      i7 = i3;
      i6 = 0;
     }
    }
    i4 = i2 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i2 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 63](i12, 8192, i3) | 0)) break L33;
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
     i3 = i7;
     continue;
    } else {
     HEAP32[i4 >> 2] = i3 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
     i3 = i7;
     continue;
    }
   }
  } else if ((i21 | 0) == 53) {
   i21 = 0;
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0; else {
    HEAP32[i4 >> 2] = i3 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   }
   i1 = i1 + 4 | 0;
  } while (0);
  i2 = HEAP32[i20 >> 2] | 0;
 }
 if ((i21 | 0) == 59) HEAP32[i20 >> 2] = 4;
 if (!i2) {
  i2 = 0;
  i4 = 1;
 } else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i18 >> 2] = 0;
   i2 = 0;
   i4 = 1;
  } else i4 = 0;
 }
 i1 = HEAP32[i19 >> 2] | 0;
 do if (!i1) i21 = 72; else {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i19 >> 2] = 0;
   i21 = 72;
   break;
  } else if (i4) break; else {
   i21 = 74;
   break;
  }
 } while (0);
 if ((i21 | 0) == 72) if (i4) i21 = 74;
 if ((i21 | 0) == 74) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 2;
 STACKTOP = i22;
 return i2 | 0;
}

function _GLES2_UpdateTexture(i1, i3, i24, i13, i25) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i24 = i24 | 0;
 i13 = i13 | 0;
 i25 = i25 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i14 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i28 = i29;
 i26 = i1 + 320 | 0;
 i27 = HEAP32[i26 >> 2] | 0;
 i23 = HEAP32[i3 + 68 >> 2] | 0;
 i2 = HEAP32[i27 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i2 | 0)) {
  i1 = i27;
  i14 = 4;
 } else {
  HEAP32[i27 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i1 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i27 >> 2];
   _GLES2_UpdateViewport(i1) | 0;
   i1 = HEAP32[i26 >> 2] | 0;
   i14 = 4;
  }
 }
 if ((i14 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i21 = i24 + 8 | 0;
 if ((HEAP32[i21 >> 2] | 0) < 1) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i22 = i24 + 12 | 0;
 if ((HEAP32[i22 >> 2] | 0) < 1) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i18 = i27 + 28 | 0;
 i19 = i23 + 4 | 0;
 FUNCTION_TABLE_vii[HEAP32[i18 >> 2] & 127](HEAP32[i19 >> 2] | 0, HEAP32[i23 >> 2] | 0);
 i6 = HEAP32[i19 >> 2] | 0;
 i7 = HEAP32[i24 >> 2] | 0;
 i20 = i24 + 4 | 0;
 i8 = HEAP32[i20 >> 2] | 0;
 i9 = HEAP32[i21 >> 2] | 0;
 i10 = HEAP32[i22 >> 2] | 0;
 i16 = i23 + 8 | 0;
 i11 = HEAP32[i16 >> 2] | 0;
 i17 = i23 + 12 | 0;
 i12 = HEAP32[i17 >> 2] | 0;
 i15 = i3 + 4 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 L16 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
  if ((i1 | 0) < 1498831189) switch (i1 | 0) {
  case 844715353:
   {
    i1 = 2;
    break L16;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 1498831189:
   {
    i1 = 2;
    break L16;
   }
  default:
   {}
  }
  i1 = (i1 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 i4 = Math_imul(i1, i9) | 0;
 do if ((i4 | 0) == (i25 | 0)) {
  i2 = 0;
  i1 = i13;
  i14 = 18;
 } else {
  i5 = _SDL_malloc(Math_imul(i4, i10) | 0) | 0;
  if (!i5) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i10 | 0) > 0) {
   i1 = 0;
   i2 = i5;
   i3 = i13;
   while (1) {
    _SDL_memcpy(i2, i3, i4) | 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i10 | 0)) {
     i2 = i5;
     i1 = i5;
     i14 = 18;
     break;
    } else {
     i2 = i2 + i4 | 0;
     i3 = i3 + i25 | 0;
    }
   }
  } else {
   i2 = i5;
   i1 = i5;
   i14 = 18;
  }
 } while (0);
 if ((i14 | 0) == 18) {
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i27 + 164 >> 2] & 15](i6, 0, i7, i8, i9, i10, i11, i12, i1);
  if (i2 | 0) _SDL_free(i2);
 }
 do if (!(HEAP32[i23 + 24 >> 2] | 0)) i1 = i13; else {
  i12 = i13 + (Math_imul(HEAP32[i22 >> 2] | 0, i25) | 0) | 0;
  i1 = HEAP32[i18 >> 2] | 0;
  i2 = HEAP32[i19 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == 842094169) FUNCTION_TABLE_vii[i1 & 127](i2, HEAP32[i23 + 32 >> 2] | 0); else FUNCTION_TABLE_vii[i1 & 127](i2, HEAP32[i23 + 36 >> 2] | 0);
  i5 = HEAP32[i19 >> 2] | 0;
  i6 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
  i7 = (HEAP32[i20 >> 2] | 0) / 2 | 0;
  i8 = (HEAP32[i21 >> 2] | 0) / 2 | 0;
  i1 = HEAP32[i22 >> 2] | 0;
  i9 = (i1 | 0) / 2 | 0;
  i10 = HEAP32[i16 >> 2] | 0;
  i11 = HEAP32[i17 >> 2] | 0;
  i13 = (i25 | 0) / 2 | 0;
  do if ((i8 | 0) == (i13 | 0)) {
   i2 = 0;
   i1 = i12;
   i14 = 29;
  } else {
   i4 = _SDL_malloc(Math_imul(i9, i8) | 0) | 0;
   if (!i4) {
    _SDL_Error(0) | 0;
    break;
   }
   if ((i1 | 0) > 1) {
    i1 = 0;
    i2 = i4;
    i3 = i12;
    while (1) {
     _SDL_memcpy(i2, i3, i8) | 0;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) == (i9 | 0)) {
      i2 = i4;
      i1 = i4;
      i14 = 29;
      break;
     } else {
      i2 = i2 + i8 | 0;
      i3 = i3 + i13 | 0;
     }
    }
   } else {
    i2 = i4;
    i1 = i4;
    i14 = 29;
   }
  } while (0);
  if ((i14 | 0) == 29) {
   FUNCTION_TABLE_viiiiiiiii[HEAP32[i27 + 164 >> 2] & 15](i5, 0, i6, i7, i8, i9, i10, i11, i1);
   if (i2 | 0) _SDL_free(i2);
  }
  i1 = i12 + ((Math_imul(HEAP32[i22 >> 2] | 0, i25) | 0) / 4 | 0) | 0;
  i2 = HEAP32[i18 >> 2] | 0;
  i3 = HEAP32[i19 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == 842094169) FUNCTION_TABLE_vii[i2 & 127](i3, HEAP32[i23 + 36 >> 2] | 0); else FUNCTION_TABLE_vii[i2 & 127](i3, HEAP32[i23 + 32 >> 2] | 0);
  i8 = HEAP32[i19 >> 2] | 0;
  i9 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
  i10 = (HEAP32[i20 >> 2] | 0) / 2 | 0;
  i11 = (HEAP32[i21 >> 2] | 0) / 2 | 0;
  i2 = HEAP32[i22 >> 2] | 0;
  i12 = (i2 | 0) / 2 | 0;
  i7 = HEAP32[i16 >> 2] | 0;
  i6 = HEAP32[i17 >> 2] | 0;
  if ((i11 | 0) == (i13 | 0)) {
   i3 = 0;
   i2 = i1;
  } else {
   i5 = _SDL_malloc(Math_imul(i12, i11) | 0) | 0;
   if (!i5) {
    _SDL_Error(0) | 0;
    break;
   }
   if ((i2 | 0) > 1) {
    i2 = 0;
    i3 = i5;
    i4 = i1;
    while (1) {
     _SDL_memcpy(i3, i4, i11) | 0;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i12 | 0)) {
      i3 = i5;
      i2 = i5;
      break;
     } else {
      i3 = i3 + i11 | 0;
      i4 = i4 + i13 | 0;
     }
    }
   } else {
    i3 = i5;
    i2 = i5;
   }
  }
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i27 + 164 >> 2] & 15](i8, 0, i9, i10, i11, i12, i7, i6, i2);
  if (i3) _SDL_free(i3);
 } while (0);
 do if (HEAP32[i23 + 28 >> 2] | 0) {
  i1 = i1 + (Math_imul(HEAP32[i22 >> 2] | 0, i25) | 0) | 0;
  FUNCTION_TABLE_vii[HEAP32[i18 >> 2] & 127](HEAP32[i19 >> 2] | 0, HEAP32[i23 + 36 >> 2] | 0);
  i10 = HEAP32[i19 >> 2] | 0;
  i9 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
  i8 = (HEAP32[i20 >> 2] | 0) / 2 | 0;
  i7 = (HEAP32[i21 >> 2] | 0) / 2 | 0;
  i2 = HEAP32[i22 >> 2] | 0;
  i6 = (i2 | 0) / 2 | 0;
  i4 = i7 << 1;
  if ((i4 | 0) == (i25 | 0)) i2 = 0; else {
   i5 = _SDL_malloc(Math_imul(i4, i6) | 0) | 0;
   if (!i5) {
    _SDL_Error(0) | 0;
    break;
   }
   if ((i2 | 0) > 1) {
    i2 = 0;
    i3 = i5;
    while (1) {
     _SDL_memcpy(i3, i1, i4) | 0;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i6 | 0)) {
      i2 = i5;
      i1 = i5;
      break;
     } else {
      i3 = i3 + i4 | 0;
      i1 = i1 + i25 | 0;
     }
    }
   } else {
    i2 = i5;
    i1 = i5;
   }
  }
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i27 + 164 >> 2] & 15](i10, 0, i9, i8, i7, i6, 6410, 5121, i1);
  if (i2 | 0) _SDL_free(i2);
 } while (0);
 i1 = HEAP32[i26 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 i3 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
 if (!i1) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 while (1) {
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i28 >> 2] = 45966;
  HEAP32[i28 + 4 >> 2] = 40071;
  HEAP32[i28 + 8 >> 2] = 753;
  HEAP32[i28 + 12 >> 2] = 46120;
  HEAP32[i28 + 16 >> 2] = i2;
  HEAP32[i28 + 20 >> 2] = i1;
  _SDL_SetError(40045, i28) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  }
 }
 STACKTOP = i29;
 return i1 | 0;
}

function _free(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if (!i1) return;
 i3 = i1 + -8 | 0;
 i5 = HEAP32[20492] | 0;
 i1 = HEAP32[i1 + -4 >> 2] | 0;
 i2 = i1 & -8;
 i9 = i3 + i2 | 0;
 do if (!(i1 & 1)) {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!(i1 & 3)) return;
  i7 = i3 + (0 - i4) | 0;
  i6 = i4 + i2 | 0;
  if (i7 >>> 0 < i5 >>> 0) return;
  if ((HEAP32[20493] | 0) == (i7 | 0)) {
   i1 = i9 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i8 = i7;
    i2 = i6;
    break;
   }
   HEAP32[20490] = i6;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i7 + 4 >> 2] = i6 | 1;
   HEAP32[i7 + i6 >> 2] = i6;
   return;
  }
  i3 = i4 >>> 3;
  if (i4 >>> 0 < 256) {
   i1 = HEAP32[i7 + 8 >> 2] | 0;
   i2 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    HEAP32[20488] = HEAP32[20488] & ~(1 << i3);
    i8 = i7;
    i2 = i6;
    break;
   } else {
    HEAP32[i1 + 12 >> 2] = i2;
    HEAP32[i2 + 8 >> 2] = i1;
    i8 = i7;
    i2 = i6;
    break;
   }
  }
  i5 = HEAP32[i7 + 24 >> 2] | 0;
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i7 | 0)) {
   i3 = i7 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    } else i2 = i3;
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4 | 0) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   HEAP32[i2 >> 2] = 0;
  } else {
   i8 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i8 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i8;
  } while (0);
  if (!i5) {
   i8 = i7;
   i2 = i6;
  } else {
   i2 = HEAP32[i7 + 28 >> 2] | 0;
   i3 = 82256 + (i2 << 2) | 0;
   if ((HEAP32[i3 >> 2] | 0) == (i7 | 0)) {
    HEAP32[i3 >> 2] = i1;
    if (!i1) {
     HEAP32[20489] = HEAP32[20489] & ~(1 << i2);
     i8 = i7;
     i2 = i6;
     break;
    }
   } else {
    HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i7 | 0) & 1) << 2) >> 2] = i1;
    if (!i1) {
     i8 = i7;
     i2 = i6;
     break;
    }
   }
   HEAP32[i1 + 24 >> 2] = i5;
   i2 = i7 + 16 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 | 0) {
    HEAP32[i1 + 16 >> 2] = i3;
    HEAP32[i3 + 24 >> 2] = i1;
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i2) {
    i8 = i7;
    i2 = i6;
   } else {
    HEAP32[i1 + 20 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i1;
    i8 = i7;
    i2 = i6;
   }
  }
 } else {
  i8 = i3;
  i7 = i3;
 } while (0);
 if (i7 >>> 0 >= i9 >>> 0) return;
 i1 = i9 + 4 | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!(i4 & 1)) return;
 if (!(i4 & 2)) {
  if ((HEAP32[20494] | 0) == (i9 | 0)) {
   i9 = (HEAP32[20491] | 0) + i2 | 0;
   HEAP32[20491] = i9;
   HEAP32[20494] = i8;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   if ((i8 | 0) != (HEAP32[20493] | 0)) return;
   HEAP32[20493] = 0;
   HEAP32[20490] = 0;
   return;
  }
  if ((HEAP32[20493] | 0) == (i9 | 0)) {
   i9 = (HEAP32[20490] | 0) + i2 | 0;
   HEAP32[20490] = i9;
   HEAP32[20493] = i7;
   HEAP32[i8 + 4 >> 2] = i9 | 1;
   HEAP32[i7 + i9 >> 2] = i9;
   return;
  }
  i5 = (i4 & -8) + i2 | 0;
  i3 = i4 >>> 3;
  do if (i4 >>> 0 < 256) {
   i2 = HEAP32[i9 + 8 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[20488] = HEAP32[20488] & ~(1 << i3);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i9 + 24 >> 2] | 0;
   i1 = HEAP32[i9 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i9 | 0)) {
    i3 = i9 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4 | 0) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i9 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i9 + 28 >> 2] | 0;
    i2 = 82256 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[20489] = HEAP32[20489] & ~(1 << i1);
      break;
     }
    } else {
     HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i9 | 0) & 1) << 2) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i1 = i9 + 16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     HEAP32[i3 + 16 >> 2] = i2;
     HEAP32[i2 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i8 + 4 >> 2] = i5 | 1;
  HEAP32[i7 + i5 >> 2] = i5;
  if ((i8 | 0) == (HEAP32[20493] | 0)) {
   HEAP32[20490] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i4 & -2;
  HEAP32[i8 + 4 >> 2] = i2 | 1;
  HEAP32[i7 + i2 >> 2] = i2;
  i5 = i2;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i3 = 81992 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[20488] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[20488] = i2 | i1;
   i1 = i3;
   i2 = i3 + 8 | 0;
  } else {
   i2 = i3 + 8 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i8;
  HEAP32[i1 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i1;
  HEAP32[i8 + 12 >> 2] = i3;
  return;
 }
 i1 = i5 >>> 8;
 if (!i1) i1 = 0; else if (i5 >>> 0 > 16777215) i1 = 31; else {
  i7 = (i1 + 1048320 | 0) >>> 16 & 8;
  i9 = i1 << i7;
  i6 = (i9 + 520192 | 0) >>> 16 & 4;
  i9 = i9 << i6;
  i1 = (i9 + 245760 | 0) >>> 16 & 2;
  i1 = 14 - (i6 | i7 | i1) + (i9 << i1 >>> 15) | 0;
  i1 = i5 >>> (i1 + 7 | 0) & 1 | i1 << 1;
 }
 i4 = 82256 + (i1 << 2) | 0;
 HEAP32[i8 + 28 >> 2] = i1;
 HEAP32[i8 + 20 >> 2] = 0;
 HEAP32[i8 + 16 >> 2] = 0;
 i2 = HEAP32[20489] | 0;
 i3 = 1 << i1;
 do if (!(i2 & i3)) {
  HEAP32[20489] = i2 | i3;
  HEAP32[i4 >> 2] = i8;
  HEAP32[i8 + 24 >> 2] = i4;
  HEAP32[i8 + 12 >> 2] = i8;
  HEAP32[i8 + 8 >> 2] = i8;
 } else {
  i2 = i5 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
  i3 = HEAP32[i4 >> 2] | 0;
  while (1) {
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
    i1 = 73;
    break;
   }
   i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if (!i1) {
    i1 = 72;
    break;
   } else {
    i2 = i2 << 1;
    i3 = i1;
   }
  }
  if ((i1 | 0) == 72) {
   HEAP32[i4 >> 2] = i8;
   HEAP32[i8 + 24 >> 2] = i3;
   HEAP32[i8 + 12 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i8;
   break;
  } else if ((i1 | 0) == 73) {
   i7 = i3 + 8 | 0;
   i9 = HEAP32[i7 >> 2] | 0;
   HEAP32[i9 + 12 >> 2] = i8;
   HEAP32[i7 >> 2] = i8;
   HEAP32[i8 + 8 >> 2] = i9;
   HEAP32[i8 + 12 >> 2] = i3;
   HEAP32[i8 + 24 >> 2] = 0;
   break;
  }
 } while (0);
 i9 = (HEAP32[20496] | 0) + -1 | 0;
 HEAP32[20496] = i9;
 if (!i9) i1 = 82408; else return;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[20496] = -1;
 return;
}

function _SDL_BlendPoint_RGB(i2, i3, i4, i5, i6, i7, i8, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i9 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = ~i1 & 255;
 switch (HEAP8[i9 + 9 >> 0] | 0) {
 case 2:
  {
   switch (i5 | 0) {
   case 1:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
     i11 = HEAPU8[i9 + 28 >> 0] | 0;
     i10 = HEAPU16[i3 >> 1] | 0;
     i2 = HEAPU8[i9 + 32 >> 0] | 0;
     i13 = HEAPU8[i9 + 29 >> 0] | 0;
     i12 = HEAPU8[i9 + 33 >> 0] | 0;
     i4 = HEAPU8[i9 + 30 >> 0] | 0;
     i5 = HEAPU8[i9 + 34 >> 0] | 0;
     i2 = ((((Math_imul(HEAPU8[(HEAP32[5724 + (i13 << 2) >> 2] | 0) + ((HEAP32[i9 + 16 >> 2] & i10) >>> i12) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0) >>> i13 << i12 | ((((Math_imul(HEAPU8[(HEAP32[5724 + (i11 << 2) >> 2] | 0) + ((HEAP32[i9 + 12 >> 2] & i10) >>> i2) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0) >>> i11 << i2;
     i1 = ((((Math_imul(HEAPU8[(HEAP32[5724 + (i4 << 2) >> 2] | 0) + ((HEAP32[i9 + 20 >> 2] & i10) >>> i5) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0) >>> i4 << i5;
     break;
    }
   case 2:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
     i11 = HEAPU8[i9 + 28 >> 0] | 0;
     i12 = HEAPU16[i3 >> 1] | 0;
     i2 = HEAPU8[i9 + 32 >> 0] | 0;
     i4 = HEAPU8[i9 + 29 >> 0] | 0;
     i5 = HEAPU8[i9 + 33 >> 0] | 0;
     i13 = HEAPU8[i9 + 30 >> 0] | 0;
     i1 = HEAPU8[i9 + 34 >> 0] | 0;
     i10 = (HEAPU8[(HEAP32[5724 + (i11 << 2) >> 2] | 0) + ((HEAP32[i9 + 12 >> 2] & i12) >>> i2) >> 0] | 0) + (i6 & 255) | 0;
     i7 = (HEAPU8[(HEAP32[5724 + (i4 << 2) >> 2] | 0) + ((HEAP32[i9 + 16 >> 2] & i12) >>> i5) >> 0] | 0) + (i7 & 255) | 0;
     i12 = (HEAPU8[(HEAP32[5724 + (i13 << 2) >> 2] | 0) + ((HEAP32[i9 + 20 >> 2] & i12) >>> i1) >> 0] | 0) + (i8 & 255) | 0;
     i2 = (i7 >>> 0 < 255 ? i7 : 255) >>> i4 << i5 | (i10 >>> 0 < 255 ? i10 : 255) >>> i11 << i2;
     i1 = (i12 >>> 0 < 255 ? i12 : 255) >>> i13 << i1;
     break;
    }
   case 4:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
     i11 = HEAPU8[i9 + 28 >> 0] | 0;
     i12 = HEAPU16[i3 >> 1] | 0;
     i2 = HEAPU8[i9 + 32 >> 0] | 0;
     i5 = HEAPU8[i9 + 29 >> 0] | 0;
     i10 = HEAPU8[i9 + 33 >> 0] | 0;
     i13 = HEAPU8[i9 + 30 >> 0] | 0;
     i1 = HEAPU8[i9 + 34 >> 0] | 0;
     i2 = (((Math_imul(HEAPU8[(HEAP32[5724 + (i5 << 2) >> 2] | 0) + ((HEAP32[i9 + 16 >> 2] & i12) >>> i10) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0) >>> i5 << i10 | (((Math_imul(HEAPU8[(HEAP32[5724 + (i11 << 2) >> 2] | 0) + ((HEAP32[i9 + 12 >> 2] & i12) >>> i2) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0) >>> i11 << i2;
     i1 = (((Math_imul(HEAPU8[(HEAP32[5724 + (i13 << 2) >> 2] | 0) + ((HEAP32[i9 + 20 >> 2] & i12) >>> i1) >> 0] | 0, i8 & 255) | 0) >>> 0) / 255 | 0) >>> i13 << i1;
     break;
    }
   default:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
     i2 = (i7 & 255) >>> (HEAPU8[i9 + 29 >> 0] | 0) << HEAPU8[i9 + 33 >> 0] | (i6 & 255) >>> (HEAPU8[i9 + 28 >> 0] | 0) << HEAPU8[i9 + 32 >> 0];
     i1 = (i8 & 255) >>> (HEAPU8[i9 + 30 >> 0] | 0) << HEAPU8[i9 + 34 >> 0];
    }
   }
   HEAP16[i3 >> 1] = i2 | i1 | HEAP32[i9 + 24 >> 2];
   i13 = 0;
   return i13 | 0;
  }
 case 4:
  {
   switch (i5 | 0) {
   case 1:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
     i10 = HEAPU8[i9 + 28 >> 0] | 0;
     i11 = HEAP32[i3 >> 2] | 0;
     i2 = HEAPU8[i9 + 32 >> 0] | 0;
     i4 = HEAPU8[i9 + 29 >> 0] | 0;
     i5 = HEAPU8[i9 + 33 >> 0] | 0;
     i12 = HEAPU8[i9 + 30 >> 0] | 0;
     i13 = HEAPU8[i9 + 34 >> 0] | 0;
     i2 = ((((Math_imul(HEAPU8[(HEAP32[5724 + (i4 << 2) >> 2] | 0) + ((HEAP32[i9 + 16 >> 2] & i11) >>> i5) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0) >>> i4 << i5 | ((((Math_imul(HEAPU8[(HEAP32[5724 + (i10 << 2) >> 2] | 0) + ((HEAP32[i9 + 12 >> 2] & i11) >>> i2) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0) >>> i10 << i2;
     i1 = ((((Math_imul(HEAPU8[(HEAP32[5724 + (i12 << 2) >> 2] | 0) + ((HEAP32[i9 + 20 >> 2] & i11) >>> i13) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0) >>> i12 << i13;
     break;
    }
   case 2:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
     i11 = HEAPU8[i9 + 28 >> 0] | 0;
     i12 = HEAP32[i3 >> 2] | 0;
     i2 = HEAPU8[i9 + 32 >> 0] | 0;
     i4 = HEAPU8[i9 + 29 >> 0] | 0;
     i5 = HEAPU8[i9 + 33 >> 0] | 0;
     i13 = HEAPU8[i9 + 30 >> 0] | 0;
     i1 = HEAPU8[i9 + 34 >> 0] | 0;
     i10 = (HEAPU8[(HEAP32[5724 + (i11 << 2) >> 2] | 0) + ((HEAP32[i9 + 12 >> 2] & i12) >>> i2) >> 0] | 0) + (i6 & 255) | 0;
     i7 = (HEAPU8[(HEAP32[5724 + (i4 << 2) >> 2] | 0) + ((HEAP32[i9 + 16 >> 2] & i12) >>> i5) >> 0] | 0) + (i7 & 255) | 0;
     i12 = (HEAPU8[(HEAP32[5724 + (i13 << 2) >> 2] | 0) + ((HEAP32[i9 + 20 >> 2] & i12) >>> i1) >> 0] | 0) + (i8 & 255) | 0;
     i2 = (i7 >>> 0 < 255 ? i7 : 255) >>> i4 << i5 | (i10 >>> 0 < 255 ? i10 : 255) >>> i11 << i2;
     i1 = (i12 >>> 0 < 255 ? i12 : 255) >>> i13 << i1;
     break;
    }
   case 4:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
     i11 = HEAPU8[i9 + 28 >> 0] | 0;
     i12 = HEAP32[i3 >> 2] | 0;
     i2 = HEAPU8[i9 + 32 >> 0] | 0;
     i5 = HEAPU8[i9 + 29 >> 0] | 0;
     i10 = HEAPU8[i9 + 33 >> 0] | 0;
     i13 = HEAPU8[i9 + 30 >> 0] | 0;
     i1 = HEAPU8[i9 + 34 >> 0] | 0;
     i2 = (((Math_imul(HEAPU8[(HEAP32[5724 + (i5 << 2) >> 2] | 0) + ((HEAP32[i9 + 16 >> 2] & i12) >>> i10) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0) >>> i5 << i10 | (((Math_imul(HEAPU8[(HEAP32[5724 + (i11 << 2) >> 2] | 0) + ((HEAP32[i9 + 12 >> 2] & i12) >>> i2) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0) >>> i11 << i2;
     i1 = (((Math_imul(HEAPU8[(HEAP32[5724 + (i13 << 2) >> 2] | 0) + ((HEAP32[i9 + 20 >> 2] & i12) >>> i1) >> 0] | 0, i8 & 255) | 0) >>> 0) / 255 | 0) >>> i13 << i1;
     break;
    }
   default:
    {
     i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
     i2 = (i7 & 255) >>> (HEAPU8[i9 + 29 >> 0] | 0) << HEAPU8[i9 + 33 >> 0] | (i6 & 255) >>> (HEAPU8[i9 + 28 >> 0] | 0) << HEAPU8[i9 + 32 >> 0];
     i1 = (i8 & 255) >>> (HEAPU8[i9 + 30 >> 0] | 0) << HEAPU8[i9 + 34 >> 0];
    }
   }
   HEAP32[i3 >> 2] = i2 | i1 | HEAP32[i9 + 24 >> 2];
   i13 = 0;
   return i13 | 0;
  }
 default:
  {
   i13 = _SDL_Error(4) | 0;
   return i13 | 0;
  }
 }
 return 0;
}

function _SDL_SaveBMP_RW(i18, i19, i20) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i21 + 8 | 0;
 i4 = i21;
 i7 = i21 + 56 | 0;
 i17 = i21 + 12 | 0;
 HEAP16[i7 >> 1] = 19778;
 if (!i19) {
  i20 = -1;
  STACKTOP = i21;
  return i20 | 0;
 }
 i2 = HEAP32[i18 + 4 >> 2] | 0;
 i3 = HEAP8[i2 + 8 >> 0] | 0;
 do if ((i3 & 255) > 7) {
  if (!(HEAP32[i2 + 24 >> 2] | 0)) if (!(HEAP32[(HEAP32[i18 + 52 >> 2] | 0) + 68 >> 2] & 256)) {
   i6 = 6;
   break;
  }
  _SDL_InitFormat(i17, 372645892) | 0;
  i3 = 1;
  i1 = 1;
  i6 = 14;
 } else i6 = 6; while (0);
 do if ((i6 | 0) == 6) {
  i1 = i3 & 255;
  if (HEAP32[i2 + 4 >> 2] | 0) {
   if (i3 << 24 >> 24 == 8) {
    i2 = i18;
    i3 = 0;
    i1 = 0;
    i6 = 19;
    break;
   }
   HEAP32[i4 >> 2] = i1;
   _SDL_SetError(57555, i4) | 0;
   break;
  }
  if (i3 << 24 >> 24 == 24) if ((HEAP32[i2 + 12 >> 2] | 0) == 16711680) if ((HEAP32[i2 + 16 >> 2] | 0) == 65280) if ((HEAP32[i2 + 20 >> 2] | 0) == 255) {
   i2 = i18;
   i3 = 0;
   i1 = 0;
   i6 = 19;
   break;
  }
  _SDL_InitFormat(i17, 390076419) | 0;
  i3 = 0;
  i1 = 0;
  i6 = 14;
 } while (0);
 if ((i6 | 0) == 14) {
  i2 = _SDL_ConvertSurface(i18, i17, 0) | 0;
  if (!i2) {
   HEAP32[i5 >> 2] = HEAPU8[i17 + 8 >> 0];
   _SDL_SetError(57586, i5) | 0;
  }
  if (i1) i1 = _SDL_GetHintBoolean(57619, 0) | 0; else i1 = 0;
  if (i2 | 0) i6 = 19;
 }
 if ((i6 | 0) == 19) if (!(_SDL_LockSurface(i2) | 0)) {
  i5 = i2 + 8 | 0;
  i9 = i2 + 4 | 0;
  i12 = Math_imul(HEAP32[i5 >> 2] | 0, HEAPU8[(HEAP32[i9 >> 2] | 0) + 9 >> 0] | 0) | 0;
  i14 = i19 + 4 | 0;
  i15 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 31](i19, 0, 0, 1) | 0;
  i16 = tempRet0;
  _SDL_ClearError();
  i13 = i19 + 12 | 0;
  FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i7, 2, 1) | 0;
  _SDL_WriteLE32(i19, 0) | 0;
  _SDL_WriteLE16(i19, 0) | 0;
  _SDL_WriteLE16(i19, 0) | 0;
  _SDL_WriteLE32(i19, 0) | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i10 = i2 + 12 | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  i7 = HEAPU8[i4 + 8 >> 0] | 0;
  i11 = i2 + 16 | 0;
  i8 = Math_imul(HEAP32[i11 >> 2] | 0, i6) | 0;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  if (!i4) i4 = 0; else i4 = HEAP32[i4 >> 2] | 0;
  i3 = (i3 | 0) == 0 | (i1 | 0) != 0;
  _SDL_WriteLE32(i19, i3 ? 40 : 108) | 0;
  _SDL_WriteLE32(i19, i5) | 0;
  _SDL_WriteLE32(i19, i6) | 0;
  _SDL_WriteLE16(i19, 1) | 0;
  _SDL_WriteLE16(i19, i7) | 0;
  _SDL_WriteLE32(i19, i3 ? 0 : 3) | 0;
  _SDL_WriteLE32(i19, i8) | 0;
  _SDL_WriteLE32(i19, 0) | 0;
  _SDL_WriteLE32(i19, 0) | 0;
  _SDL_WriteLE32(i19, i4) | 0;
  _SDL_WriteLE32(i19, 0) | 0;
  if (!i3) {
   _SDL_WriteLE32(i19, 16711680) | 0;
   _SDL_WriteLE32(i19, 65280) | 0;
   _SDL_WriteLE32(i19, 255) | 0;
   _SDL_WriteLE32(i19, -16777216) | 0;
   _SDL_WriteLE32(i19, 1466527264) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
   _SDL_WriteLE32(i19, 0) | 0;
  }
  i1 = HEAP32[(HEAP32[i9 >> 2] | 0) + 4 >> 2] | 0;
  if (i1 | 0) {
   i4 = HEAP32[i1 + 4 >> 2] | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   if ((i3 | 0) > 0) {
    i1 = 0;
    do {
     i9 = i4 + (i1 << 2) | 0;
     FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i9 + 2 | 0, 1, 1) | 0;
     FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i9 + 1 | 0, 1, 1) | 0;
     FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i9 | 0, 1, 1) | 0;
     FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i9 + 3 | 0, 1, 1) | 0;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != (i3 | 0));
   }
  }
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 31](i19, 0, 0, 1) | 0;
  i1 = _i64Subtract(i1 | 0, tempRet0 | 0, i15 | 0, i16 | 0) | 0;
  i8 = HEAP32[i14 >> 2] | 0;
  i9 = _i64Add(i15 | 0, i16 | 0, 10, 0) | 0;
  FUNCTION_TABLE_iiiii[i8 & 31](i19, i9, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  _SDL_WriteLE32(i19, i1) | 0;
  i8 = HEAP32[i14 >> 2] | 0;
  i9 = _i64Add(i1 | 0, 0, i15 | 0, i16 | 0) | 0;
  FUNCTION_TABLE_iiiii[i8 & 31](i19, i9, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  i5 = i2 + 20 | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  i10 = Math_imul(i3, HEAP32[i10 >> 2] | 0) | 0;
  i1 = (HEAP32[i5 >> 2] | 0) + i10 | 0;
  i4 = (i12 | 0) % 4 | 0;
  i4 = (i4 | 0) == 0 ? 0 : 4 - i4 | 0;
  L48 : do if ((i10 | 0) > 0) {
   L50 : do if (!i4) {
    i1 = i1 + (0 - i3) | 0;
    if ((FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i1, 1, i12) | 0) == (i12 | 0)) do {
     if (i1 >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break L48;
     i1 = i1 + (0 - (HEAP32[i11 >> 2] | 0)) | 0;
    } while ((FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i1, 1, i12) | 0) == (i12 | 0));
   } else {
    i1 = i1 + (0 - i3) | 0;
    i3 = (FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i1, 1, i12) | 0) == (i12 | 0);
    if ((i4 | 0) <= 0) {
     if (!i3) break;
     while (1) {
      if (i1 >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break L48;
      i1 = i1 + (0 - (HEAP32[i11 >> 2] | 0)) | 0;
      if ((FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i1, 1, i12) | 0) != (i12 | 0)) break L50;
     }
    }
    if (i3) do {
     HEAP8[i17 >> 0] = 0;
     i3 = 0;
     do {
      FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i17, 1, 1) | 0;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) != (i4 | 0));
     if (i1 >>> 0 <= (HEAP32[i5 >> 2] | 0) >>> 0) break L48;
     i1 = i1 + (0 - (HEAP32[i11 >> 2] | 0)) | 0;
    } while ((FUNCTION_TABLE_iiiii[HEAP32[i13 >> 2] & 31](i19, i1, 1, i12) | 0) == (i12 | 0));
   } while (0);
   _SDL_Error(2) | 0;
  } while (0);
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i14 >> 2] & 31](i19, 0, 0, 1) | 0;
  i1 = _i64Subtract(i1 | 0, tempRet0 | 0, i15 | 0, i16 | 0) | 0;
  i13 = HEAP32[i14 >> 2] | 0;
  i17 = _i64Add(i15 | 0, i16 | 0, 2, 0) | 0;
  FUNCTION_TABLE_iiiii[i13 & 31](i19, i17, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  _SDL_WriteLE32(i19, i1) | 0;
  i14 = HEAP32[i14 >> 2] | 0;
  i17 = _i64Add(i1 | 0, 0, i15 | 0, i16 | 0) | 0;
  FUNCTION_TABLE_iiiii[i14 & 31](i19, i17, tempRet0, 0) | 0;
  if ((tempRet0 | 0) < 0) _SDL_Error(3) | 0;
  _SDL_UnlockSurface(i2);
  if ((i2 | 0) != (i18 | 0)) _SDL_FreeSurface(i2);
 }
 if (i20 | 0) FUNCTION_TABLE_ii[HEAP32[i19 + 16 >> 2] & 255](i19) | 0;
 i20 = ((_SDL_strcmp(_SDL_GetError() | 0, 89710) | 0) != 0) << 31 >> 31;
 STACKTOP = i21;
 return i20 | 0;
}

function __ZN4GameC2EPKciiiib(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i8 = i18;
 i12 = i18 + 48 | 0;
 i13 = i18 + 32 | 0;
 i17 = i18 + 28 | 0;
 i14 = i18 + 24 | 0;
 i15 = i18 + 20 | 0;
 i16 = i18 + 16 | 0;
 i9 = i18 + 12 | 0;
 i10 = i18 + 8 | 0;
 i11 = i18 + 4 | 0;
 HEAP32[i1 >> 2] = 0;
 if (!(_SDL_Init(25137) | 0)) {
  i8 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 39009, 24) | 0;
  __ZNKSt3__28ios_base6getlocEv(i12, i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0);
  i19 = __ZNKSt3__26locale9use_facetERNS0_2idE(i12, 83620) | 0;
  i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i19 >> 2] | 0) + 28 >> 2] & 63](i19, 10) | 0;
  __ZNSt3__26localeD2Ev(i12);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i8, i19) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i8) | 0;
  i8 = _SDL_CreateWindow(i2, i3, i4, i5, i6, i7 ? 7 : 6) | 0;
  i1 = i1 + 4 | 0;
  HEAP32[i1 >> 2] = i8;
  if (!i8) {
   i8 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 39050, 26) | 0;
   i19 = _SDL_GetError() | 0;
   i19 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i8, i19, _strlen(i19) | 0) | 0;
   __ZNKSt3__28ios_base6getlocEv(i12, i19 + (HEAP32[(HEAP32[i19 >> 2] | 0) + -12 >> 2] | 0) | 0);
   i8 = __ZNKSt3__26locale9use_facetERNS0_2idE(i12, 83620) | 0;
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] & 63](i8, 10) | 0;
   __ZNSt3__26localeD2Ev(i12);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i19, i8) | 0;
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i19) | 0;
  } else {
   i19 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 39034, 15) | 0;
   __ZNKSt3__28ios_base6getlocEv(i12, i19 + (HEAP32[(HEAP32[i19 >> 2] | 0) + -12 >> 2] | 0) | 0);
   i8 = __ZNKSt3__26locale9use_facetERNS0_2idE(i12, 83620) | 0;
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] & 63](i8, 10) | 0;
   __ZNSt3__26localeD2Ev(i12);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i19, i8) | 0;
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i19) | 0;
  }
  i1 = _SDL_CreateRenderer(HEAP32[i1 >> 2] | 0, -1, 0) | 0;
  HEAP32[19464] = i1;
  if (i1 | 0) {
   _SDL_SetRenderDrawColor(i1, -1, -1, -1, -1) | 0;
   i19 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 39077, 17) | 0;
   __ZNKSt3__28ios_base6getlocEv(i12, i19 + (HEAP32[(HEAP32[i19 >> 2] | 0) + -12 >> 2] | 0) | 0);
   i8 = __ZNKSt3__26locale9use_facetERNS0_2idE(i12, 83620) | 0;
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i8 >> 2] | 0) + 28 >> 2] & 63](i8, 10) | 0;
   __ZNSt3__26localeD2Ev(i12);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i19, i8) | 0;
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i19) | 0;
  }
 } else {
  HEAP32[i8 >> 2] = _SDL_GetError() | 0;
  _printf(39095, i8) | 0;
 }
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 __ZN3Map7LoadMapENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i12, i13);
 if ((HEAP8[i13 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i13 >> 2] | 0);
 i1 = HEAP32[19473] | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i14 >> 2] = 93;
 HEAP32[i15 >> 2] = 3341;
 HEAP32[i16 >> 2] = 372;
 HEAP32[i9 >> 2] = 1;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i11 >> 2] = 0;
 __ZN6Entity12addComponentI18TransformComponentJiiiiiiiEEERT_DpOT0_(i1, i17, i14, i15, i16, i9, i10, i11) | 0;
 __ZN6Entity12addComponentI15CanvasComponentJEEERT_DpOT0_(HEAP32[19473] | 0) | 0;
 __ZN6Entity12addComponentI15PaintControllerJRA17_KcEEERT_DpOT0_(HEAP32[19473] | 0, 39130) | 0;
 __ZN6Entity8addGroupEj(HEAP32[19473] | 0, 0);
 i1 = HEAP32[19474] | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i14 >> 2] = 0;
 HEAP32[i15 >> 2] = 73;
 HEAP32[i16 >> 2] = 206;
 HEAP32[i9 >> 2] = 1;
 HEAP32[i10 >> 2] = 1;
 HEAP32[i11 >> 2] = 1;
 __ZN6Entity12addComponentI18TransformComponentJiiiiiiiEEERT_DpOT0_(i1, i17, i14, i15, i16, i9, i10, i11) | 0;
 i1 = HEAP32[19474] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i19 = HEAP32[19475] | 0;
  HEAP32[19475] = i19 + 1;
  HEAP32[19476] = i19;
 }
 i19 = HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2] | 0;
 HEAPF32[i19 + 8 >> 2] = Math_fround(562.0);
 HEAPF32[i19 + 12 >> 2] = Math_fround(330.0);
 i19 = HEAP32[19474] | 0;
 HEAP8[i17 >> 0] = 1;
 __ZN6Entity12addComponentI15SpriteComponentJRA14_KcbEEERT_DpOT0_(i19, 39147, i17) | 0;
 __ZN6Entity12addComponentI18KeyboardControllerJEEERT_DpOT0_(HEAP32[19474] | 0) | 0;
 __ZN6Entity12addComponentI17ColliderComponentJRA7_KcEEERT_DpOT0_(HEAP32[19474] | 0, 39161) | 0;
 __ZN6Entity8addGroupEj(HEAP32[19474] | 0, 1);
 i19 = HEAP32[19468] | 0;
 HEAPF32[i17 >> 2] = Math_fround(0.0);
 HEAPF32[i14 >> 2] = Math_fround(254.0);
 HEAP32[i15 >> 2] = 3e3;
 HEAP32[i16 >> 2] = 10;
 __ZN6Entity12addComponentI18TransformComponentJffiiEEERT_DpOT0_(i19, i17, i14, i15, i16) | 0;
 __ZN6Entity12addComponentI17ColliderComponentJRA5_KcEEERT_DpOT0_(HEAP32[19468] | 0, 39168) | 0;
 i19 = HEAP32[19469] | 0;
 HEAPF32[i17 >> 2] = Math_fround(0.0);
 HEAPF32[i14 >> 2] = Math_fround(824.0);
 HEAP32[i15 >> 2] = 3e3;
 HEAP32[i16 >> 2] = 10;
 __ZN6Entity12addComponentI18TransformComponentJffiiEEERT_DpOT0_(i19, i17, i14, i15, i16) | 0;
 __ZN6Entity12addComponentI17ColliderComponentJRA5_KcEEERT_DpOT0_(HEAP32[19469] | 0, 39173) | 0;
 i19 = HEAP32[19471] | 0;
 HEAPF32[i17 >> 2] = Math_fround(-30.0);
 HEAPF32[i14 >> 2] = Math_fround(0.0);
 HEAP32[i15 >> 2] = 10;
 HEAP32[i16 >> 2] = 800;
 __ZN6Entity12addComponentI18TransformComponentJffiiEEERT_DpOT0_(i19, i17, i14, i15, i16) | 0;
 __ZN6Entity12addComponentI17ColliderComponentJRA6_KcEEERT_DpOT0_(HEAP32[19471] | 0, 39178) | 0;
 i19 = HEAP32[19470] | 0;
 HEAPF32[i17 >> 2] = Math_fround(2738.0);
 HEAPF32[i14 >> 2] = Math_fround(0.0);
 HEAP32[i15 >> 2] = 10;
 HEAP32[i16 >> 2] = 800;
 __ZN6Entity12addComponentI18TransformComponentJffiiEEERT_DpOT0_(i19, i17, i14, i15, i16) | 0;
 __ZN6Entity12addComponentI17ColliderComponentJRA7_KcEEERT_DpOT0_(HEAP32[19470] | 0, 39184) | 0;
 __ZN6Entity8addGroupEj(HEAP32[19468] | 0, 2);
 __ZN6Entity8addGroupEj(HEAP32[19469] | 0, 2);
 __ZN6Entity8addGroupEj(HEAP32[19471] | 0, 2);
 __ZN6Entity8addGroupEj(HEAP32[19470] | 0, 2);
 STACKTOP = i18;
 return;
}

function _SDL_UpdateFullscreenMode(i14, i6) {
 i14 = i14 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i10 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i7 = i17 + 40 | 0;
 i9 = i17 + 32 | 0;
 i5 = i17 + 24 | 0;
 i4 = i17 + 16 | 0;
 i2 = i17 + 8 | 0;
 i15 = i17 + 84 | 0;
 i16 = i17 + 64 | 0;
 i11 = i17 + 44 | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i17) | 0;
  i16 = -1;
  STACKTOP = i17;
  return i16 | 0;
 }
 if (i14 | 0) if ((HEAP32[i14 >> 2] | 0) == (i1 + 280 | 0)) {
  i2 = (i6 | 0) != 0;
  if (i2 & (HEAP32[i14 + 116 >> 2] | 0) != 0) {
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  }
  i1 = _SDL_GetWindowDisplayIndex(i14) | 0;
  if ((i1 | 0) > -1) i12 = (HEAP32[(HEAP32[19487] | 0) + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i12 = 0;
  i13 = i12 + 56 | 0;
  do if (i2) {
   i3 = HEAP32[i13 >> 2] | 0;
   if (!((i3 | 0) == 0 | (i3 | 0) == (i14 | 0))) {
    i1 = HEAP32[19487] | 0;
    if (!i1) {
     _SDL_SetError(40203, i4) | 0;
     break;
    }
    if ((HEAP32[i3 >> 2] | 0) != (i1 + 280 | 0)) {
     _SDL_SetError(59973, i5) | 0;
     break;
    }
    if (!(HEAP32[i3 + 48 >> 2] & 64)) {
     _SDL_UpdateFullscreenMode(i3, 0) | 0;
     i1 = HEAP32[19487] | 0;
     i2 = HEAP32[i1 + 96 >> 2] | 0;
     if (i2 | 0) FUNCTION_TABLE_vii[i2 & 127](i1, i3);
    }
   }
  } while (0);
  if (((HEAP32[i13 >> 2] | 0) == (i14 | 0) | 0) == (i6 | 0)) if (!((HEAP32[i14 + 48 >> 2] ^ HEAP32[i14 + 52 >> 2]) & 4097)) {
   i16 = 0;
   STACKTOP = i17;
   return i16 | 0;
  }
  i1 = HEAP32[(HEAP32[19487] | 0) + 272 >> 2] | 0;
  L30 : do if (i1 | 0) {
   L32 : do if (!i6) {
    i2 = i1;
    while (1) {
     if ((i2 | 0) != (i14 | 0)) if ((HEAP32[i2 + 48 >> 2] & 69 | 0) == 5) {
      i1 = _SDL_GetWindowDisplayIndex(i2) | 0;
      if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[19487] | 0) + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
      if ((i1 | 0) == (i12 | 0)) {
       _SDL_memset(i11, 0, 20) | 0;
       if (!(_SDL_GetWindowDisplayMode(i2, i11) | 0)) break L32;
      }
     }
     i2 = HEAP32[i2 + 152 >> 2] | 0;
     if (!i2) break L30;
    }
   } else {
    i2 = i1;
    while (1) {
     if ((i2 | 0) == (i14 | 0)) i10 = 35; else if ((HEAP32[i2 + 48 >> 2] & 69 | 0) == 5) {
      i1 = _SDL_GetWindowDisplayIndex(i2) | 0;
      if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[19487] | 0) + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
      if ((i1 | 0) == (i12 | 0)) i10 = 35;
     }
     if ((i10 | 0) == 35) {
      i10 = 0;
      _SDL_memset(i11, 0, 20) | 0;
      if (!(_SDL_GetWindowDisplayMode(i2, i11) | 0)) break L32;
     }
     i2 = HEAP32[i2 + 152 >> 2] | 0;
     if (!i2) break L30;
    }
   } while (0);
   i6 = i2 + 24 | 0;
   i7 = i11 + 4 | 0;
   if ((HEAP32[i6 >> 2] | 0) == (HEAP32[i7 >> 2] | 0)) i5 = (HEAP32[i2 + 28 >> 2] | 0) != (HEAP32[i11 + 8 >> 2] | 0) & 1; else i5 = 1;
   i8 = i14 + 48 | 0;
   L60 : do if ((HEAP32[i8 >> 2] & 4097 | 0) == 4097) {
    i1 = i12 + 16 | 0;
    HEAP32[i15 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i15 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP32[i15 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
    HEAP32[i15 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
    HEAP32[i15 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
    i1 = i12 + 36 | 0;
    HEAP32[i16 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
    HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
    HEAP32[i16 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
    HEAP32[i16 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
    do if (_SDL_memcmp(i15, i16, 20) | 0) {
     i3 = HEAP32[19487] | 0;
     i4 = HEAP32[i3 + 28 >> 2] | 0;
     if (!i4) if ((_SDL_SetError(46895, i9) | 0) < 0) {
      i1 = -1;
      break L60;
     } else {
      i10 = 47;
      break L60;
     }
     if ((FUNCTION_TABLE_iiii[i4 & 63](i3, i12, i15) | 0) < 0) {
      i1 = -1;
      break L60;
     } else {
      HEAP32[i1 >> 2] = HEAP32[i15 >> 2];
      HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
      HEAP32[i1 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
      HEAP32[i1 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
      HEAP32[i1 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
      break;
     }
    } while (0);
    i10 = 47;
   } else if ((_SDL_SetDisplayModeForDisplay(i12, i11) | 0) < 0) i1 = -1; else i10 = 47; while (0);
   if ((i10 | 0) == 47) {
    i1 = HEAP32[19487] | 0;
    i3 = HEAP32[i1 + 112 >> 2] | 0;
    if (i3 | 0) FUNCTION_TABLE_viiii[i3 & 63](i1, i2, i12, 1);
    HEAP32[i13 >> 2] = i2;
    if (!i5) {
     HEAP32[i2 + 112 >> 2] = 0;
     _SDL_SendWindowEvent(i2, 6, HEAP32[i6 >> 2] | 0, HEAP32[i2 + 28 >> 2] | 0) | 0;
    } else _SDL_SendWindowEvent(i2, 5, HEAP32[i7 >> 2] | 0, HEAP32[i11 + 8 >> 2] | 0) | 0;
    if ((_SDL_GetMouseFocus() | 0) == (i2 | 0)) {
     _SDL_GetMouseState(i15, i16) | 0;
     _SDL_WarpMouseInWindow(i2, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0);
    }
    HEAP32[i14 + 52 >> 2] = HEAP32[i8 >> 2];
    i1 = 0;
   }
   i16 = i1;
   STACKTOP = i17;
   return i16 | 0;
  } while (0);
  i1 = i12 + 16 | 0;
  HEAP32[i15 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i15 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i15 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  i1 = i12 + 36 | 0;
  HEAP32[i16 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i16 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i16 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  do if (_SDL_memcmp(i15, i16, 20) | 0) {
   i2 = HEAP32[19487] | 0;
   i3 = HEAP32[i2 + 28 >> 2] | 0;
   if (!i3) {
    _SDL_SetError(46895, i7) | 0;
    break;
   }
   if ((FUNCTION_TABLE_iiii[i3 & 63](i2, i12, i15) | 0) >= 0) {
    HEAP32[i1 >> 2] = HEAP32[i15 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i15 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i15 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i15 + 12 >> 2];
    HEAP32[i1 + 16 >> 2] = HEAP32[i15 + 16 >> 2];
   }
  } while (0);
  i1 = HEAP32[19487] | 0;
  i2 = HEAP32[i1 + 112 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_viiii[i2 & 63](i1, i14, i12, 0);
  HEAP32[i13 >> 2] = 0;
  HEAP32[i14 + 112 >> 2] = 0;
  _SDL_SendWindowEvent(i14, 6, HEAP32[i14 + 24 >> 2] | 0, HEAP32[i14 + 28 >> 2] | 0) | 0;
  if ((_SDL_GetMouseFocus() | 0) == (i14 | 0)) {
   _SDL_GetMouseState(i15, i16) | 0;
   _SDL_WarpMouseInWindow(i14, HEAP32[i15 >> 2] | 0, HEAP32[i16 >> 2] | 0);
  }
  HEAP32[i14 + 52 >> 2] = HEAP32[i14 + 48 >> 2];
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 _SDL_SetError(59973, i2) | 0;
 i16 = -1;
 STACKTOP = i17;
 return i16 | 0;
}

function _Blit_RGB101010_index8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i7 = HEAP32[i2 + 24 >> 2] | 0;
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i49 = (HEAP32[i2 + 16 >> 2] | 0) / 4 | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 i48 = HEAP32[i2 + 36 >> 2] | 0;
 i23 = HEAP32[i2 + 48 >> 2] | 0;
 i2 = i4 + -1 | 0;
 i4 = (i4 | 0) == 0;
 if (!i23) {
  if (i4) return;
  i5 = (i7 + 7 | 0) / 8 | 0;
  i4 = i7 & 255;
  L6 : while (1) {
   switch (i4 & 7) {
   case 0:
    {
     i6 = i5;
     i9 = i1;
     i1 = 7;
     break;
    }
   case 7:
    {
     i8 = i5;
     i11 = i1;
     i1 = 8;
     break;
    }
   case 6:
    {
     i10 = i5;
     i13 = i1;
     i1 = 9;
     break;
    }
   case 5:
    {
     i12 = i5;
     i15 = i1;
     i1 = 10;
     break;
    }
   case 4:
    {
     i14 = i5;
     i17 = i1;
     i1 = 11;
     break;
    }
   case 3:
    {
     i16 = i5;
     i19 = i1;
     i1 = 12;
     break;
    }
   case 2:
    {
     i18 = i5;
     i21 = i1;
     i1 = 13;
     break;
    }
   case 1:
    {
     i20 = i5;
     i22 = i1;
     i1 = 14;
     break;
    }
   default:
    {
     i1 = 15;
     break L6;
    }
   }
   while (1) if ((i1 | 0) == 7) {
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP8[i9 >> 0] = i8 >>> 22 & 224 | i8 >>> 15 & 28 | i8 >>> 8 & 3;
    i8 = i6;
    i11 = i9 + 1 | 0;
    i1 = 8;
    continue;
   } else if ((i1 | 0) == 8) {
    i10 = HEAP32[i3 >> 2] | 0;
    HEAP8[i11 >> 0] = i10 >>> 22 & 224 | i10 >>> 15 & 28 | i10 >>> 8 & 3;
    i10 = i8;
    i13 = i11 + 1 | 0;
    i1 = 9;
    continue;
   } else if ((i1 | 0) == 9) {
    i12 = HEAP32[i3 >> 2] | 0;
    HEAP8[i13 >> 0] = i12 >>> 22 & 224 | i12 >>> 15 & 28 | i12 >>> 8 & 3;
    i12 = i10;
    i15 = i13 + 1 | 0;
    i1 = 10;
    continue;
   } else if ((i1 | 0) == 10) {
    i14 = HEAP32[i3 >> 2] | 0;
    HEAP8[i15 >> 0] = i14 >>> 22 & 224 | i14 >>> 15 & 28 | i14 >>> 8 & 3;
    i14 = i12;
    i17 = i15 + 1 | 0;
    i1 = 11;
    continue;
   } else if ((i1 | 0) == 11) {
    i16 = HEAP32[i3 >> 2] | 0;
    HEAP8[i17 >> 0] = i16 >>> 22 & 224 | i16 >>> 15 & 28 | i16 >>> 8 & 3;
    i16 = i14;
    i19 = i17 + 1 | 0;
    i1 = 12;
    continue;
   } else if ((i1 | 0) == 12) {
    i18 = HEAP32[i3 >> 2] | 0;
    HEAP8[i19 >> 0] = i18 >>> 22 & 224 | i18 >>> 15 & 28 | i18 >>> 8 & 3;
    i18 = i16;
    i21 = i19 + 1 | 0;
    i1 = 13;
    continue;
   } else if ((i1 | 0) == 13) {
    i20 = HEAP32[i3 >> 2] | 0;
    HEAP8[i21 >> 0] = i20 >>> 22 & 224 | i20 >>> 15 & 28 | i20 >>> 8 & 3;
    i20 = i18;
    i22 = i21 + 1 | 0;
    i1 = 14;
    continue;
   } else if ((i1 | 0) == 14) {
    i47 = HEAP32[i3 >> 2] | 0;
    i1 = i22 + 1 | 0;
    HEAP8[i22 >> 0] = i47 >>> 22 & 224 | i47 >>> 15 & 28 | i47 >>> 8 & 3;
    if ((i20 | 0) > 1) {
     i6 = i20 + -1 | 0;
     i9 = i1;
     i1 = 7;
     continue;
    } else break;
   }
   if (!i2) {
    i1 = 28;
    break;
   } else {
    i3 = i3 + (i49 << 2) | 0;
    i1 = i1 + i48 | 0;
    i2 = i2 + -1 | 0;
   }
  }
  if ((i1 | 0) != 15) if ((i1 | 0) == 28) return;
 } else {
  if (i4) return;
  i6 = (i7 + 7 | 0) / 8 | 0;
  i5 = i7 & 255;
  L26 : while (1) {
   switch (i5 & 7) {
   case 0:
    {
     i24 = i6;
     i26 = i1;
     i35 = i3;
     i1 = 18;
     break;
    }
   case 7:
    {
     i25 = i6;
     i27 = i1;
     i37 = i3;
     i1 = 19;
     break;
    }
   case 6:
    {
     i28 = i1;
     i34 = i6;
     i39 = i3;
     i1 = 20;
     break;
    }
   case 5:
    {
     i29 = i1;
     i36 = i6;
     i41 = i3;
     i1 = 21;
     break;
    }
   case 4:
    {
     i30 = i1;
     i38 = i6;
     i43 = i3;
     i1 = 22;
     break;
    }
   case 3:
    {
     i31 = i1;
     i40 = i6;
     i45 = i3;
     i1 = 23;
     break;
    }
   case 2:
    {
     i32 = i1;
     i42 = i6;
     i46 = i3;
     i1 = 24;
     break;
    }
   case 1:
    {
     i33 = i1;
     i44 = i6;
     i47 = i3;
     i1 = 25;
     break;
    }
   default:
    {
     i1 = 26;
     break L26;
    }
   }
   while (1) if ((i1 | 0) == 18) {
    i25 = HEAP32[i35 >> 2] | 0;
    HEAP8[i26 >> 0] = HEAP8[i23 + (i25 >>> 22 & 224 | i25 >>> 15 & 28 | i25 >>> 8 & 3) >> 0] | 0;
    i25 = i24;
    i27 = i26 + 1 | 0;
    i37 = i35 + 4 | 0;
    i1 = 19;
    continue;
   } else if ((i1 | 0) == 19) {
    i28 = HEAP32[i37 >> 2] | 0;
    HEAP8[i27 >> 0] = HEAP8[i23 + (i28 >>> 22 & 224 | i28 >>> 15 & 28 | i28 >>> 8 & 3) >> 0] | 0;
    i28 = i27 + 1 | 0;
    i34 = i25;
    i39 = i37 + 4 | 0;
    i1 = 20;
    continue;
   } else if ((i1 | 0) == 20) {
    i29 = HEAP32[i39 >> 2] | 0;
    HEAP8[i28 >> 0] = HEAP8[i23 + (i29 >>> 22 & 224 | i29 >>> 15 & 28 | i29 >>> 8 & 3) >> 0] | 0;
    i29 = i28 + 1 | 0;
    i36 = i34;
    i41 = i39 + 4 | 0;
    i1 = 21;
    continue;
   } else if ((i1 | 0) == 21) {
    i30 = HEAP32[i41 >> 2] | 0;
    HEAP8[i29 >> 0] = HEAP8[i23 + (i30 >>> 22 & 224 | i30 >>> 15 & 28 | i30 >>> 8 & 3) >> 0] | 0;
    i30 = i29 + 1 | 0;
    i38 = i36;
    i43 = i41 + 4 | 0;
    i1 = 22;
    continue;
   } else if ((i1 | 0) == 22) {
    i31 = HEAP32[i43 >> 2] | 0;
    HEAP8[i30 >> 0] = HEAP8[i23 + (i31 >>> 22 & 224 | i31 >>> 15 & 28 | i31 >>> 8 & 3) >> 0] | 0;
    i31 = i30 + 1 | 0;
    i40 = i38;
    i45 = i43 + 4 | 0;
    i1 = 23;
    continue;
   } else if ((i1 | 0) == 23) {
    i32 = HEAP32[i45 >> 2] | 0;
    HEAP8[i31 >> 0] = HEAP8[i23 + (i32 >>> 22 & 224 | i32 >>> 15 & 28 | i32 >>> 8 & 3) >> 0] | 0;
    i32 = i31 + 1 | 0;
    i42 = i40;
    i46 = i45 + 4 | 0;
    i1 = 24;
    continue;
   } else if ((i1 | 0) == 24) {
    i33 = HEAP32[i46 >> 2] | 0;
    HEAP8[i32 >> 0] = HEAP8[i23 + (i33 >>> 22 & 224 | i33 >>> 15 & 28 | i33 >>> 8 & 3) >> 0] | 0;
    i33 = i32 + 1 | 0;
    i44 = i42;
    i47 = i46 + 4 | 0;
    i1 = 25;
    continue;
   } else if ((i1 | 0) == 25) {
    i1 = HEAP32[i47 >> 2] | 0;
    i4 = i33 + 1 | 0;
    HEAP8[i33 >> 0] = HEAP8[i23 + (i1 >>> 22 & 224 | i1 >>> 15 & 28 | i1 >>> 8 & 3) >> 0] | 0;
    i1 = i47 + 4 | 0;
    if ((i44 | 0) > 1) {
     i24 = i44 + -1 | 0;
     i26 = i4;
     i35 = i1;
     i1 = 18;
     continue;
    } else break;
   }
   if (!i2) {
    i1 = 28;
    break;
   } else {
    i3 = i1 + (i49 << 2) | 0;
    i1 = i4 + i48 | 0;
    i2 = i2 + -1 | 0;
   }
  }
  if ((i1 | 0) != 26) if ((i1 | 0) == 28) return;
 }
}

function _Blit_RGB888_index8(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
 i7 = HEAP32[i2 + 24 >> 2] | 0;
 i4 = HEAP32[i2 + 28 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i49 = (HEAP32[i2 + 16 >> 2] | 0) / 4 | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 i48 = HEAP32[i2 + 36 >> 2] | 0;
 i23 = HEAP32[i2 + 48 >> 2] | 0;
 i2 = i4 + -1 | 0;
 i4 = (i4 | 0) == 0;
 if (!i23) {
  if (i4) return;
  i5 = (i7 + 7 | 0) / 8 | 0;
  i4 = i7 & 255;
  L6 : while (1) {
   switch (i4 & 7) {
   case 0:
    {
     i6 = i5;
     i9 = i1;
     i1 = 7;
     break;
    }
   case 7:
    {
     i8 = i5;
     i11 = i1;
     i1 = 8;
     break;
    }
   case 6:
    {
     i10 = i5;
     i13 = i1;
     i1 = 9;
     break;
    }
   case 5:
    {
     i12 = i5;
     i15 = i1;
     i1 = 10;
     break;
    }
   case 4:
    {
     i14 = i5;
     i17 = i1;
     i1 = 11;
     break;
    }
   case 3:
    {
     i16 = i5;
     i19 = i1;
     i1 = 12;
     break;
    }
   case 2:
    {
     i18 = i5;
     i21 = i1;
     i1 = 13;
     break;
    }
   case 1:
    {
     i20 = i5;
     i22 = i1;
     i1 = 14;
     break;
    }
   default:
    {
     i1 = 15;
     break L6;
    }
   }
   while (1) if ((i1 | 0) == 7) {
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP8[i9 >> 0] = i8 >>> 16 & 224 | i8 >>> 11 & 28 | i8 >>> 6 & 3;
    i8 = i6;
    i11 = i9 + 1 | 0;
    i1 = 8;
    continue;
   } else if ((i1 | 0) == 8) {
    i10 = HEAP32[i3 >> 2] | 0;
    HEAP8[i11 >> 0] = i10 >>> 16 & 224 | i10 >>> 11 & 28 | i10 >>> 6 & 3;
    i10 = i8;
    i13 = i11 + 1 | 0;
    i1 = 9;
    continue;
   } else if ((i1 | 0) == 9) {
    i12 = HEAP32[i3 >> 2] | 0;
    HEAP8[i13 >> 0] = i12 >>> 16 & 224 | i12 >>> 11 & 28 | i12 >>> 6 & 3;
    i12 = i10;
    i15 = i13 + 1 | 0;
    i1 = 10;
    continue;
   } else if ((i1 | 0) == 10) {
    i14 = HEAP32[i3 >> 2] | 0;
    HEAP8[i15 >> 0] = i14 >>> 16 & 224 | i14 >>> 11 & 28 | i14 >>> 6 & 3;
    i14 = i12;
    i17 = i15 + 1 | 0;
    i1 = 11;
    continue;
   } else if ((i1 | 0) == 11) {
    i16 = HEAP32[i3 >> 2] | 0;
    HEAP8[i17 >> 0] = i16 >>> 16 & 224 | i16 >>> 11 & 28 | i16 >>> 6 & 3;
    i16 = i14;
    i19 = i17 + 1 | 0;
    i1 = 12;
    continue;
   } else if ((i1 | 0) == 12) {
    i18 = HEAP32[i3 >> 2] | 0;
    HEAP8[i19 >> 0] = i18 >>> 16 & 224 | i18 >>> 11 & 28 | i18 >>> 6 & 3;
    i18 = i16;
    i21 = i19 + 1 | 0;
    i1 = 13;
    continue;
   } else if ((i1 | 0) == 13) {
    i20 = HEAP32[i3 >> 2] | 0;
    HEAP8[i21 >> 0] = i20 >>> 16 & 224 | i20 >>> 11 & 28 | i20 >>> 6 & 3;
    i20 = i18;
    i22 = i21 + 1 | 0;
    i1 = 14;
    continue;
   } else if ((i1 | 0) == 14) {
    i47 = HEAP32[i3 >> 2] | 0;
    i1 = i22 + 1 | 0;
    HEAP8[i22 >> 0] = i47 >>> 16 & 224 | i47 >>> 11 & 28 | i47 >>> 6 & 3;
    if ((i20 | 0) > 1) {
     i6 = i20 + -1 | 0;
     i9 = i1;
     i1 = 7;
     continue;
    } else break;
   }
   if (!i2) {
    i1 = 28;
    break;
   } else {
    i3 = i3 + (i49 << 2) | 0;
    i1 = i1 + i48 | 0;
    i2 = i2 + -1 | 0;
   }
  }
  if ((i1 | 0) != 15) if ((i1 | 0) == 28) return;
 } else {
  if (i4) return;
  i6 = (i7 + 7 | 0) / 8 | 0;
  i5 = i7 & 255;
  L26 : while (1) {
   switch (i5 & 7) {
   case 0:
    {
     i24 = i6;
     i26 = i1;
     i35 = i3;
     i1 = 18;
     break;
    }
   case 7:
    {
     i25 = i6;
     i27 = i1;
     i37 = i3;
     i1 = 19;
     break;
    }
   case 6:
    {
     i28 = i1;
     i34 = i6;
     i39 = i3;
     i1 = 20;
     break;
    }
   case 5:
    {
     i29 = i1;
     i36 = i6;
     i41 = i3;
     i1 = 21;
     break;
    }
   case 4:
    {
     i30 = i1;
     i38 = i6;
     i43 = i3;
     i1 = 22;
     break;
    }
   case 3:
    {
     i31 = i1;
     i40 = i6;
     i45 = i3;
     i1 = 23;
     break;
    }
   case 2:
    {
     i32 = i1;
     i42 = i6;
     i46 = i3;
     i1 = 24;
     break;
    }
   case 1:
    {
     i33 = i1;
     i44 = i6;
     i47 = i3;
     i1 = 25;
     break;
    }
   default:
    {
     i1 = 26;
     break L26;
    }
   }
   while (1) if ((i1 | 0) == 18) {
    i25 = HEAP32[i35 >> 2] | 0;
    HEAP8[i26 >> 0] = HEAP8[i23 + (i25 >>> 16 & 224 | i25 >>> 11 & 28 | i25 >>> 6 & 3) >> 0] | 0;
    i25 = i24;
    i27 = i26 + 1 | 0;
    i37 = i35 + 4 | 0;
    i1 = 19;
    continue;
   } else if ((i1 | 0) == 19) {
    i28 = HEAP32[i37 >> 2] | 0;
    HEAP8[i27 >> 0] = HEAP8[i23 + (i28 >>> 16 & 224 | i28 >>> 11 & 28 | i28 >>> 6 & 3) >> 0] | 0;
    i28 = i27 + 1 | 0;
    i34 = i25;
    i39 = i37 + 4 | 0;
    i1 = 20;
    continue;
   } else if ((i1 | 0) == 20) {
    i29 = HEAP32[i39 >> 2] | 0;
    HEAP8[i28 >> 0] = HEAP8[i23 + (i29 >>> 16 & 224 | i29 >>> 11 & 28 | i29 >>> 6 & 3) >> 0] | 0;
    i29 = i28 + 1 | 0;
    i36 = i34;
    i41 = i39 + 4 | 0;
    i1 = 21;
    continue;
   } else if ((i1 | 0) == 21) {
    i30 = HEAP32[i41 >> 2] | 0;
    HEAP8[i29 >> 0] = HEAP8[i23 + (i30 >>> 16 & 224 | i30 >>> 11 & 28 | i30 >>> 6 & 3) >> 0] | 0;
    i30 = i29 + 1 | 0;
    i38 = i36;
    i43 = i41 + 4 | 0;
    i1 = 22;
    continue;
   } else if ((i1 | 0) == 22) {
    i31 = HEAP32[i43 >> 2] | 0;
    HEAP8[i30 >> 0] = HEAP8[i23 + (i31 >>> 16 & 224 | i31 >>> 11 & 28 | i31 >>> 6 & 3) >> 0] | 0;
    i31 = i30 + 1 | 0;
    i40 = i38;
    i45 = i43 + 4 | 0;
    i1 = 23;
    continue;
   } else if ((i1 | 0) == 23) {
    i32 = HEAP32[i45 >> 2] | 0;
    HEAP8[i31 >> 0] = HEAP8[i23 + (i32 >>> 16 & 224 | i32 >>> 11 & 28 | i32 >>> 6 & 3) >> 0] | 0;
    i32 = i31 + 1 | 0;
    i42 = i40;
    i46 = i45 + 4 | 0;
    i1 = 24;
    continue;
   } else if ((i1 | 0) == 24) {
    i33 = HEAP32[i46 >> 2] | 0;
    HEAP8[i32 >> 0] = HEAP8[i23 + (i33 >>> 16 & 224 | i33 >>> 11 & 28 | i33 >>> 6 & 3) >> 0] | 0;
    i33 = i32 + 1 | 0;
    i44 = i42;
    i47 = i46 + 4 | 0;
    i1 = 25;
    continue;
   } else if ((i1 | 0) == 25) {
    i1 = HEAP32[i47 >> 2] | 0;
    i4 = i33 + 1 | 0;
    HEAP8[i33 >> 0] = HEAP8[i23 + (i1 >>> 16 & 224 | i1 >>> 11 & 28 | i1 >>> 6 & 3) >> 0] | 0;
    i1 = i47 + 4 | 0;
    if ((i44 | 0) > 1) {
     i24 = i44 + -1 | 0;
     i26 = i4;
     i35 = i1;
     i1 = 18;
     continue;
    } else break;
   }
   if (!i2) {
    i1 = 28;
    break;
   } else {
    i3 = i1 + (i49 << 2) | 0;
    i1 = i4 + i48 | 0;
    i2 = i2 + -1 | 0;
   }
  }
  if ((i1 | 0) != 26) if ((i1 | 0) == 28) return;
 }
}

function _GLES2_RenderCopyEx(i2, i17, i18, i13, d5, i3, i14) {
 i2 = i2 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i13 = i13 | 0;
 d5 = +d5;
 i3 = i3 | 0;
 i14 = i14 | 0;
 var i1 = 0, i4 = 0, f6 = f0, f7 = f0, f8 = f0, i9 = 0, i10 = 0, i11 = 0, f12 = f0, i15 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i23 = i25;
 i19 = i25 + 104 | 0;
 i22 = i25 + 72 | 0;
 i16 = i25 + 40 | 0;
 i15 = i25 + 24 | 0;
 i20 = i2 + 320 | 0;
 i21 = HEAP32[i20 >> 2] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i21;
  i24 = 4;
 } else {
  HEAP32[i21 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i2 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i21 >> 2];
   _GLES2_UpdateViewport(i2) | 0;
   i1 = HEAP32[i20 >> 2] | 0;
   i24 = 4;
  }
 }
 if ((i24 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 if ((_GLES2_SetupCopy(i2, i17) | 0) < 0) {
  i24 = -1;
  STACKTOP = i25;
  return i24 | 0;
 }
 i4 = i21 + 84 | 0;
 FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](3);
 FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 511](2);
 f8 = Math_fround(360.0 - d5);
 HEAPF32[i15 + 12 >> 2] = f8;
 HEAPF32[i15 + 8 >> 2] = f8;
 HEAPF32[i15 + 4 >> 2] = f8;
 HEAPF32[i15 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 >> 2]);
 f12 = Math_fround(HEAPF32[i13 >> 2]);
 f8 = Math_fround(f8 + f12);
 HEAPF32[i16 + 24 >> 2] = f8;
 HEAPF32[i16 + 16 >> 2] = f8;
 HEAPF32[i16 + 8 >> 2] = f8;
 HEAPF32[i16 >> 2] = f8;
 f8 = Math_fround(HEAPF32[i3 + 4 >> 2]);
 f7 = Math_fround(HEAPF32[i13 + 4 >> 2]);
 f8 = Math_fround(f8 + f7);
 HEAPF32[i16 + 28 >> 2] = f8;
 HEAPF32[i16 + 20 >> 2] = f8;
 HEAPF32[i16 + 12 >> 2] = f8;
 HEAPF32[i16 + 4 >> 2] = f8;
 HEAPF32[i19 >> 2] = f12;
 i4 = i19 + 4 | 0;
 HEAPF32[i4 >> 2] = f7;
 f8 = Math_fround(f12 + Math_fround(HEAPF32[i13 + 8 >> 2]));
 i9 = i19 + 8 | 0;
 HEAPF32[i9 >> 2] = f8;
 i10 = i19 + 12 | 0;
 HEAPF32[i10 >> 2] = f7;
 i11 = i19 + 16 | 0;
 HEAPF32[i11 >> 2] = f12;
 f6 = Math_fround(f7 + Math_fround(HEAPF32[i13 + 12 >> 2]));
 i1 = i19 + 20 | 0;
 HEAPF32[i1 >> 2] = f6;
 i2 = i19 + 24 | 0;
 HEAPF32[i2 >> 2] = f8;
 i3 = i19 + 28 | 0;
 HEAPF32[i3 >> 2] = f6;
 if (i14 & 1 | 0) {
  HEAPF32[i11 >> 2] = f8;
  HEAPF32[i19 >> 2] = f8;
  HEAPF32[i2 >> 2] = f12;
  HEAPF32[i9 >> 2] = f12;
 }
 if (i14 & 2 | 0) {
  HEAPF32[i10 >> 2] = f6;
  HEAPF32[i4 >> 2] = f6;
  HEAPF32[i3 >> 2] = f7;
  HEAPF32[i1 >> 2] = f7;
 }
 i3 = HEAP32[i20 >> 2] | 0;
 i2 = i3 + 284 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 300 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 16) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 16, i15, 35040);
  HEAP32[i1 >> 2] = 16;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 16, i15);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](2, 1, 5126, 0, 0, 0);
 i3 = HEAP32[i20 >> 2] | 0;
 i2 = i3 + 288 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 304 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i16, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i16);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](3, 2, 5126, 0, 0, 0);
 i3 = HEAP32[i20 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i19, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i19);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 i2 = HEAP32[i18 >> 2] | 0;
 f7 = Math_fround(i2 | 0);
 f8 = Math_fround(HEAP32[i17 + 12 >> 2] | 0);
 f7 = Math_fround(f7 / f8);
 HEAPF32[i22 >> 2] = f7;
 i3 = HEAP32[i18 + 4 >> 2] | 0;
 f6 = Math_fround(i3 | 0);
 f12 = Math_fround(HEAP32[i17 + 16 >> 2] | 0);
 f6 = Math_fround(f6 / f12);
 HEAPF32[i22 + 4 >> 2] = f6;
 f8 = Math_fround(Math_fround((HEAP32[i18 + 8 >> 2] | 0) + i2 | 0) / f8);
 HEAPF32[i22 + 8 >> 2] = f8;
 HEAPF32[i22 + 12 >> 2] = f6;
 HEAPF32[i22 + 16 >> 2] = f7;
 f12 = Math_fround(Math_fround((HEAP32[i18 + 12 >> 2] | 0) + i3 | 0) / f12);
 HEAPF32[i22 + 20 >> 2] = f12;
 HEAPF32[i22 + 24 >> 2] = f8;
 HEAPF32[i22 + 28 >> 2] = f12;
 i3 = HEAP32[i20 >> 2] | 0;
 i2 = i3 + 280 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 296 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i22, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i22);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](1, 2, 5126, 0, 0, 0);
 FUNCTION_TABLE_viii[HEAP32[i21 + 76 >> 2] & 63](5, 0, 4);
 i1 = i21 + 72 | 0;
 FUNCTION_TABLE_vi[HEAP32[i1 >> 2] & 511](3);
 FUNCTION_TABLE_vi[HEAP32[i1 >> 2] & 511](2);
 i1 = HEAP32[i20 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 } else i2 = 89710;
 while (1) {
  if (!i2) i24 = 36; else if (!(HEAP8[i2 >> 0] | 0)) i24 = 36; else i3 = i2;
  if ((i24 | 0) == 36) {
   i24 = 0;
   i3 = 39958;
  }
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i23 >> 2] = i3;
  HEAP32[i23 + 4 >> 2] = 40071;
  HEAP32[i23 + 8 >> 2] = 1820;
  HEAP32[i23 + 12 >> 2] = 41420;
  HEAP32[i23 + 16 >> 2] = i2;
  HEAP32[i23 + 20 >> 2] = i1;
  _SDL_SetError(40045, i23) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i25;
 return i1 | 0;
}

function _png_combine_row(i6, i16, i9) {
 i6 = i6 | 0;
 i16 = i16 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i18 = 0;
 i14 = HEAP8[i6 + 443 >> 0] | 0;
 i15 = i14 & 255;
 i17 = (HEAP32[i6 + 384 >> 2] | 0) + 1 | 0;
 i13 = HEAP32[i6 + 348 >> 2] | 0;
 i4 = HEAP8[i6 + 433 >> 0] | 0;
 i11 = i4 & 255;
 if (!(i14 << 24 >> 24)) _png_error(i6, 65444);
 i1 = HEAP32[i6 + 404 >> 2] | 0;
 if (i1 | 0) {
  if ((i14 & 255) > 7) i2 = Math_imul(i13, i15 >>> 3) | 0; else i2 = ((Math_imul(i13, i15) | 0) + 7 | 0) >>> 3;
  if ((i1 | 0) != (i2 | 0)) _png_error(i6, 65469);
 }
 if (!i13) _png_error(i6, 65505);
 i10 = Math_imul(i13, i15) | 0;
 i2 = i10 & 7;
 do if (!i2) {
  i1 = 0;
  i8 = 0;
  i7 = 0;
 } else {
  i1 = Math_imul(i13, i15 >>> 3) | 0;
  i1 = i16 + ((i14 & 255) > 7 ? i1 : (i10 + 7 | 0) >>> 3) + -1 | 0;
  i3 = HEAP8[i1 >> 0] | 0;
  if (!(HEAP32[i6 + 216 >> 2] & 65536)) {
   i8 = 255 >>> i2;
   i7 = i3;
   break;
  } else {
   i8 = 255 << i2;
   i7 = i3;
   break;
  }
 } while (0);
 L21 : do if (!(HEAP8[i6 + 432 >> 0] | 0)) i18 = 63; else {
  i5 = HEAP32[i6 + 216 >> 2] | 0;
  if ((i4 & 255) < 6 & (i5 & 2 | 0) != 0) {
   switch (i9 | 0) {
   case 0:
    {
     i2 = i11 & 1;
     break;
    }
   case 1:
    {
     if (!(i11 & 1)) {
      i18 = 63;
      break L21;
     } else i2 = 1;
     break;
    }
   default:
    {
     i18 = 63;
     break L21;
    }
   }
   i2 = i2 << 3 - ((i11 + 1 | 0) >>> 1) & 7;
   if (i13 >>> 0 <= i2 >>> 0) return;
   if ((i14 & 255) < 8) {
    i6 = 8 / (i15 >>> 0) | 0;
    i2 = (i9 | 0) != 0;
    i3 = i14 << 24 >> 24 | 0;
    i3 = (i3 | 0) == 1 ? 0 : (i3 | 0) == 2 ? 1 : 2;
    do if (!(i5 & 65536)) if (i2) {
     i2 = 18840 + (i3 * 12 | 0) + (i11 >>> 1 << 2) | 0;
     break;
    } else {
     i2 = 18732 + (i3 * 24 | 0) + (i11 << 2) | 0;
     break;
    } else i2 = i2 ? 18804 + (i3 * 12 | 0) + (i11 >>> 1 << 2) | 0 : 18660 + (i3 * 24 | 0) + (i11 << 2) | 0; while (0);
    i3 = i16;
    i4 = i17;
    i5 = i13;
    i2 = HEAP32[i2 >> 2] | 0;
    while (1) {
     switch ((i2 & 255) << 24 >> 24) {
     case 0:
      break;
     case -1:
      {
       i12 = HEAP8[i4 >> 0] | 0;
       i18 = 31;
       break;
      }
     default:
      {
       i12 = (i2 & HEAPU8[i4 >> 0] | (i2 ^ 255) & HEAPU8[i3 >> 0]) & 255;
       i18 = 31;
      }
     }
     i2 = i2 >>> 8 | i2 << 24;
     if ((i18 | 0) == 31) {
      i18 = 0;
      HEAP8[i3 >> 0] = i12;
     }
     if (i5 >>> 0 <= i6 >>> 0) break L21; else {
      i3 = i3 + 1 | 0;
      i4 = i4 + 1 | 0;
      i5 = i5 - i6 | 0;
     }
    }
   }
   if (i15 & 7 | 0) _png_error(i6, 65530);
   i7 = i15 >>> 3;
   i1 = Math_imul(i2, i7) | 0;
   i2 = (Math_imul(i13, i7) | 0) - i1 | 0;
   i3 = i16 + i1 | 0;
   i1 = i17 + i1 | 0;
   i4 = i7 << ((6 - i11 | 0) >>> 1);
   i4 = (i9 | 0) == 0 ? i7 : i4 >>> 0 > i2 >>> 0 ? i2 : i4;
   i7 = i7 << ((7 - i11 | 0) >>> 1);
   switch (i4 | 0) {
   case 1:
    {
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     if (i2 >>> 0 <= i7 >>> 0) return;
     do {
      i3 = i3 + i7 | 0;
      i1 = i1 + i7 | 0;
      i2 = i2 - i7 | 0;
      HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     } while (i2 >>> 0 > i7 >>> 0);
     return;
    }
   case 2:
    {
     do {
      HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i3 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
      if (i2 >>> 0 <= i7 >>> 0) {
       i18 = 66;
       break;
      }
      i1 = i1 + i7 | 0;
      i3 = i3 + i7 | 0;
      i2 = i2 - i7 | 0;
     } while (i2 >>> 0 > 1);
     if ((i18 | 0) == 66) return;
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     return;
    }
   case 3:
    {
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     HEAP8[i3 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
     HEAP8[i3 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
     if (i2 >>> 0 <= i7 >>> 0) return;
     do {
      i1 = i1 + i7 | 0;
      i3 = i3 + i7 | 0;
      i2 = i2 - i7 | 0;
      HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
      HEAP8[i3 + 1 >> 0] = HEAP8[i1 + 1 >> 0] | 0;
      HEAP8[i3 + 2 >> 0] = HEAP8[i1 + 2 >> 0] | 0;
     } while (i2 >>> 0 > i7 >>> 0);
     return;
    }
   default:
    {
     if (i4 >>> 0 < 16) {
      i5 = i3;
      if (!(i5 & 1)) {
       i6 = i7 | i1;
       if (!((i6 | i4) & 1)) if (!((i6 | i5 | i4) & 3)) {
        i6 = (i7 - i4 | 0) >>> 2;
        do {
         i5 = i4;
         do {
          i16 = i1;
          i1 = i1 + 4 | 0;
          i17 = i3;
          i3 = i3 + 4 | 0;
          HEAP32[i17 >> 2] = HEAP32[i16 >> 2];
          i5 = i5 + -4 | 0;
         } while ((i5 | 0) != 0);
         i3 = i3 + (i6 << 2) | 0;
         i1 = i1 + (i6 << 2) | 0;
         i17 = i2;
         i2 = i2 - i7 | 0;
         if (i17 >>> 0 <= i7 >>> 0) {
          i18 = 66;
          break;
         }
        } while (i4 >>> 0 <= i2 >>> 0);
        if ((i18 | 0) == 66) return;
        while (1) {
         HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
         i2 = i2 + -1 | 0;
         if (!i2) break; else {
          i3 = i3 + 1 | 0;
          i1 = i1 + 1 | 0;
         }
        }
        return;
       } else {
        i6 = (i7 - i4 | 0) >>> 1;
        do {
         i5 = i4;
         do {
          i16 = i1;
          i1 = i1 + 2 | 0;
          i17 = i3;
          i3 = i3 + 2 | 0;
          HEAP16[i17 >> 1] = HEAP16[i16 >> 1] | 0;
          i5 = i5 + -2 | 0;
         } while ((i5 | 0) != 0);
         i3 = i3 + (i6 << 1) | 0;
         i1 = i1 + (i6 << 1) | 0;
         i17 = i2;
         i2 = i2 - i7 | 0;
         if (i17 >>> 0 <= i7 >>> 0) {
          i18 = 66;
          break;
         }
        } while (i4 >>> 0 <= i2 >>> 0);
        if ((i18 | 0) == 66) return;
        while (1) {
         HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
         i2 = i2 + -1 | 0;
         if (!i2) break; else {
          i3 = i3 + 1 | 0;
          i1 = i1 + 1 | 0;
         }
        }
        return;
       }
      }
     }
     _memcpy(i3 | 0, i1 | 0, i4 | 0) | 0;
     if (i2 >>> 0 <= i7 >>> 0) return;
     do {
      i1 = i1 + i7 | 0;
      i3 = i3 + i7 | 0;
      i2 = i2 - i7 | 0;
      i4 = i4 >>> 0 > i2 >>> 0 ? i2 : i4;
      _memcpy(i3 | 0, i1 | 0, i4 | 0) | 0;
     } while (i2 >>> 0 > i7 >>> 0);
     return;
    }
   }
  } else i18 = 63;
 } while (0);
 if ((i18 | 0) == 63) {
  i18 = Math_imul(i13, i15 >>> 3) | 0;
  _memcpy(i16 | 0, i17 | 0, ((i14 & 255) > 7 ? i18 : (i10 + 7 | 0) >>> 3) | 0) | 0;
 }
 if (!i1) return;
 HEAP8[i1 >> 0] = (i8 ^ 255) & HEAPU8[i1 >> 0] | i8 & (i7 & 255);
 return;
}

function _dispose_chunk(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i2 + i1 | 0;
 i3 = HEAP32[i2 + 4 >> 2] | 0;
 do if (!(i3 & 1)) {
  i5 = HEAP32[i2 >> 2] | 0;
  if (!(i3 & 3)) return;
  i7 = i2 + (0 - i5) | 0;
  i1 = i5 + i1 | 0;
  if ((HEAP32[20493] | 0) == (i7 | 0)) {
   i2 = i8 + 4 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 & 3 | 0) != 3) break;
   HEAP32[20490] = i1;
   HEAP32[i2 >> 2] = i3 & -2;
   HEAP32[i7 + 4 >> 2] = i1 | 1;
   HEAP32[i8 >> 2] = i1;
   return;
  }
  i4 = i5 >>> 3;
  if (i5 >>> 0 < 256) {
   i2 = HEAP32[i7 + 8 >> 2] | 0;
   i3 = HEAP32[i7 + 12 >> 2] | 0;
   if ((i3 | 0) == (i2 | 0)) {
    HEAP32[20488] = HEAP32[20488] & ~(1 << i4);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i3;
    HEAP32[i3 + 8 >> 2] = i2;
    break;
   }
  }
  i6 = HEAP32[i7 + 24 >> 2] | 0;
  i2 = HEAP32[i7 + 12 >> 2] | 0;
  do if ((i2 | 0) == (i7 | 0)) {
   i4 = i7 + 16 | 0;
   i3 = i4 + 4 | 0;
   i2 = HEAP32[i3 >> 2] | 0;
   if (!i2) {
    i2 = HEAP32[i4 >> 2] | 0;
    if (!i2) {
     i2 = 0;
     break;
    } else i3 = i4;
   }
   while (1) {
    i4 = i2 + 20 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if (i5 | 0) {
     i2 = i5;
     i3 = i4;
     continue;
    }
    i4 = i2 + 16 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if (!i5) break; else {
     i2 = i5;
     i3 = i4;
    }
   }
   HEAP32[i3 >> 2] = 0;
  } else {
   i5 = HEAP32[i7 + 8 >> 2] | 0;
   HEAP32[i5 + 12 >> 2] = i2;
   HEAP32[i2 + 8 >> 2] = i5;
  } while (0);
  if (i6) {
   i3 = HEAP32[i7 + 28 >> 2] | 0;
   i4 = 82256 + (i3 << 2) | 0;
   if ((HEAP32[i4 >> 2] | 0) == (i7 | 0)) {
    HEAP32[i4 >> 2] = i2;
    if (!i2) {
     HEAP32[20489] = HEAP32[20489] & ~(1 << i3);
     break;
    }
   } else {
    HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i7 | 0) & 1) << 2) >> 2] = i2;
    if (!i2) break;
   }
   HEAP32[i2 + 24 >> 2] = i6;
   i3 = i7 + 16 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (i4 | 0) {
    HEAP32[i2 + 16 >> 2] = i4;
    HEAP32[i4 + 24 >> 2] = i2;
   }
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   if (i3) {
    HEAP32[i2 + 20 >> 2] = i3;
    HEAP32[i3 + 24 >> 2] = i2;
   }
  }
 } else i7 = i2; while (0);
 i2 = i8 + 4 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if (!(i4 & 2)) {
  if ((HEAP32[20494] | 0) == (i8 | 0)) {
   i8 = (HEAP32[20491] | 0) + i1 | 0;
   HEAP32[20491] = i8;
   HEAP32[20494] = i7;
   HEAP32[i7 + 4 >> 2] = i8 | 1;
   if ((i7 | 0) != (HEAP32[20493] | 0)) return;
   HEAP32[20493] = 0;
   HEAP32[20490] = 0;
   return;
  }
  if ((HEAP32[20493] | 0) == (i8 | 0)) {
   i8 = (HEAP32[20490] | 0) + i1 | 0;
   HEAP32[20490] = i8;
   HEAP32[20493] = i7;
   HEAP32[i7 + 4 >> 2] = i8 | 1;
   HEAP32[i7 + i8 >> 2] = i8;
   return;
  }
  i5 = (i4 & -8) + i1 | 0;
  i3 = i4 >>> 3;
  do if (i4 >>> 0 < 256) {
   i2 = HEAP32[i8 + 8 >> 2] | 0;
   i1 = HEAP32[i8 + 12 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) {
    HEAP32[20488] = HEAP32[20488] & ~(1 << i3);
    break;
   } else {
    HEAP32[i2 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i2;
    break;
   }
  } else {
   i6 = HEAP32[i8 + 24 >> 2] | 0;
   i1 = HEAP32[i8 + 12 >> 2] | 0;
   do if ((i1 | 0) == (i8 | 0)) {
    i3 = i8 + 16 | 0;
    i2 = i3 + 4 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i1 = HEAP32[i3 >> 2] | 0;
     if (!i1) {
      i3 = 0;
      break;
     } else i2 = i3;
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4 | 0) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    HEAP32[i2 >> 2] = 0;
    i3 = i1;
   } else {
    i3 = HEAP32[i8 + 8 >> 2] | 0;
    HEAP32[i3 + 12 >> 2] = i1;
    HEAP32[i1 + 8 >> 2] = i3;
    i3 = i1;
   } while (0);
   if (i6 | 0) {
    i1 = HEAP32[i8 + 28 >> 2] | 0;
    i2 = 82256 + (i1 << 2) | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i8 | 0)) {
     HEAP32[i2 >> 2] = i3;
     if (!i3) {
      HEAP32[20489] = HEAP32[20489] & ~(1 << i1);
      break;
     }
    } else {
     HEAP32[i6 + 16 + (((HEAP32[i6 + 16 >> 2] | 0) != (i8 | 0) & 1) << 2) >> 2] = i3;
     if (!i3) break;
    }
    HEAP32[i3 + 24 >> 2] = i6;
    i1 = i8 + 16 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) {
     HEAP32[i3 + 16 >> 2] = i2;
     HEAP32[i2 + 24 >> 2] = i3;
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i3 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i3;
    }
   }
  } while (0);
  HEAP32[i7 + 4 >> 2] = i5 | 1;
  HEAP32[i7 + i5 >> 2] = i5;
  if ((i7 | 0) == (HEAP32[20493] | 0)) {
   HEAP32[20490] = i5;
   return;
  }
 } else {
  HEAP32[i2 >> 2] = i4 & -2;
  HEAP32[i7 + 4 >> 2] = i1 | 1;
  HEAP32[i7 + i1 >> 2] = i1;
  i5 = i1;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i3 = 81992 + (i1 << 1 << 2) | 0;
  i2 = HEAP32[20488] | 0;
  i1 = 1 << i1;
  if (!(i2 & i1)) {
   HEAP32[20488] = i2 | i1;
   i1 = i3;
   i2 = i3 + 8 | 0;
  } else {
   i2 = i3 + 8 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i7;
  HEAP32[i1 + 12 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i1;
  HEAP32[i7 + 12 >> 2] = i3;
  return;
 }
 i1 = i5 >>> 8;
 if (!i1) i1 = 0; else if (i5 >>> 0 > 16777215) i1 = 31; else {
  i6 = (i1 + 1048320 | 0) >>> 16 & 8;
  i8 = i1 << i6;
  i4 = (i8 + 520192 | 0) >>> 16 & 4;
  i8 = i8 << i4;
  i1 = (i8 + 245760 | 0) >>> 16 & 2;
  i1 = 14 - (i4 | i6 | i1) + (i8 << i1 >>> 15) | 0;
  i1 = i5 >>> (i1 + 7 | 0) & 1 | i1 << 1;
 }
 i4 = 82256 + (i1 << 2) | 0;
 HEAP32[i7 + 28 >> 2] = i1;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 16 >> 2] = 0;
 i2 = HEAP32[20489] | 0;
 i3 = 1 << i1;
 if (!(i2 & i3)) {
  HEAP32[20489] = i2 | i3;
  HEAP32[i4 >> 2] = i7;
  HEAP32[i7 + 24 >> 2] = i4;
  HEAP32[i7 + 12 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i7;
  return;
 }
 i2 = i5 << ((i1 | 0) == 31 ? 0 : 25 - (i1 >>> 1) | 0);
 i3 = HEAP32[i4 >> 2] | 0;
 while (1) {
  if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
   i1 = 69;
   break;
  }
  i4 = i3 + 16 + (i2 >>> 31 << 2) | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (!i1) {
   i1 = 68;
   break;
  } else {
   i2 = i2 << 1;
   i3 = i1;
  }
 }
 if ((i1 | 0) == 68) {
  HEAP32[i4 >> 2] = i7;
  HEAP32[i7 + 24 >> 2] = i3;
  HEAP32[i7 + 12 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i7;
  return;
 } else if ((i1 | 0) == 69) {
  i6 = i3 + 8 | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  HEAP32[i8 + 12 >> 2] = i7;
  HEAP32[i6 >> 2] = i7;
  HEAP32[i7 + 8 >> 2] = i8;
  HEAP32[i7 + 12 >> 2] = i3;
  HEAP32[i7 + 24 >> 2] = 0;
  return;
 }
}

function _SDL_SoftStretch(i25, i3, i27, i6) {
 i25 = i25 | 0;
 i3 = i3 | 0;
 i27 = i27 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i26 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i9 = i29 + 32 | 0;
 i8 = i29 + 24 | 0;
 i7 = i29 + 16 | 0;
 i4 = i29 + 8 | 0;
 i1 = i29 + 56 | 0;
 i5 = i29 + 40 | 0;
 i24 = HEAP32[i27 + 4 >> 2] | 0;
 i28 = HEAP8[i24 + 9 >> 0] | 0;
 i26 = i28 & 255;
 if ((HEAP32[HEAP32[i25 + 4 >> 2] >> 2] | 0) != (HEAP32[i24 >> 2] | 0)) {
  i28 = _SDL_SetError(47794, i29) | 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 do if (!i3) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
  i3 = i1;
 } else {
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) >= 0) {
   i2 = HEAP32[i3 + 4 >> 2] | 0;
   if ((i2 | 0) >= 0) if (((HEAP32[i3 + 8 >> 2] | 0) + i1 | 0) <= (HEAP32[i25 + 8 >> 2] | 0)) if (((HEAP32[i3 + 12 >> 2] | 0) + i2 | 0) <= (HEAP32[i25 + 12 >> 2] | 0)) break;
  }
  i28 = _SDL_SetError(47831, i4) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } while (0);
 do if (!i6) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = HEAP32[i27 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i27 + 12 >> 2];
 } else {
  i1 = HEAP32[i6 >> 2] | 0;
  if ((i1 | 0) >= 0) {
   i2 = HEAP32[i6 + 4 >> 2] | 0;
   if ((i2 | 0) >= 0) if (((HEAP32[i6 + 8 >> 2] | 0) + i1 | 0) <= (HEAP32[i27 + 8 >> 2] | 0)) if (((HEAP32[i6 + 12 >> 2] | 0) + i2 | 0) <= (HEAP32[i27 + 12 >> 2] | 0)) {
    i5 = i6;
    break;
   }
  }
  i28 = _SDL_SetError(47861, i7) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } while (0);
 if (!(HEAP32[i27 >> 2] & 2)) i24 = 0; else if ((_SDL_LockSurface(i27) | 0) < 0) {
  i28 = _SDL_SetError(47896, i8) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } else i24 = 1;
 if (!(HEAP32[i25 >> 2] & 2)) i15 = 0; else if ((_SDL_LockSurface(i25) | 0) < 0) {
  if (i24 | 0) _SDL_UnlockSurface(i27);
  i28 = _SDL_SetError(47931, i9) | 0;
  STACKTOP = i29;
  return i28 | 0;
 } else i15 = 1;
 i23 = HEAP32[i5 + 12 >> 2] | 0;
 i16 = (HEAP32[i3 + 12 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i17 = i1 + i23 | 0;
 L38 : do if ((i23 | 0) > 0) {
  i18 = i27 + 20 | 0;
  i19 = i27 + 16 | 0;
  i20 = i3 + 8 | 0;
  i21 = i5 + 8 | 0;
  i22 = i25 + 20 | 0;
  i23 = i25 + 16 | 0;
  i6 = 65536;
  i2 = 0;
  i4 = HEAP32[i3 + 4 >> 2] | 0;
  while (1) {
   i11 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i19 >> 2] | 0, i1) | 0) | 0;
   i11 = i11 + (Math_imul(HEAP32[i5 >> 2] | 0, i26) | 0) | 0;
   if ((i6 | 0) > 65535) {
    i13 = ~i6;
    i13 = i6 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
    i14 = i13 >>> 16;
    i2 = (HEAP32[i22 >> 2] | 0) + (Math_imul(HEAP32[i23 >> 2] | 0, i4 + i14 | 0) | 0) | 0;
    i2 = i2 + (Math_imul(HEAP32[i3 >> 2] | 0, i26) | 0) | 0;
    i6 = i6 + -65536 - (i13 & -65536) | 0;
    i4 = i4 + 1 + i14 | 0;
   }
   switch (i28 << 24 >> 24) {
   case 1:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i12 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i9 = i2;
      i10 = 65536;
      i8 = 0;
      while (1) {
       if ((i10 | 0) > 65535) {
        i14 = ~i10;
        i14 = i10 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
        i13 = i14 >>> 16;
        i8 = HEAP8[i9 + i13 >> 0] | 0;
        i9 = i9 + 1 + i13 | 0;
        i10 = i10 + -65536 - (i14 & -65536) | 0;
       }
       HEAP8[i11 >> 0] = i8;
       if ((i7 | 0) > 1) {
        i10 = i10 + i12 | 0;
        i7 = i7 + -1 | 0;
        i11 = i11 + 1 | 0;
       } else break;
      }
     }
     break;
    }
   case 2:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i12 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i9 = i2;
      i10 = 65536;
      i8 = 0;
      while (1) {
       if ((i10 | 0) > 65535) {
        i14 = ~i10;
        i14 = i10 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
        i13 = i14 >>> 16;
        i8 = HEAP16[i9 + (i13 << 1) >> 1] | 0;
        i9 = i9 + 2 + (i13 << 1) | 0;
        i10 = i10 + -65536 - (i14 & -65536) | 0;
       }
       HEAP16[i11 >> 1] = i8;
       if ((i7 | 0) > 1) {
        i10 = i10 + i12 | 0;
        i7 = i7 + -1 | 0;
        i11 = i11 + 2 | 0;
       } else break;
      }
     }
     break;
    }
   case 3:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i14 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i9 = 65536;
      i8 = i2;
      i10 = 0;
      i12 = 0;
      i13 = 0;
      while (1) {
       if ((i9 | 0) > 65535) {
        i10 = ~i9;
        i10 = i9 + 65536 + ((i10 | 0) > -131072 ? i10 : -131072) | 0;
        i12 = (i10 >>> 16) * 3 | 0;
        i13 = i8 + i12 | 0;
        i8 = i8 + 3 + i12 | 0;
        i9 = i9 + -65536 - (i10 & -65536) | 0;
        i10 = HEAP8[i13 >> 0] | 0;
        i12 = HEAP8[i13 + 1 >> 0] | 0;
        i13 = HEAP8[i13 + 2 >> 0] | 0;
       }
       HEAP8[i11 >> 0] = i10;
       HEAP8[i11 + 1 >> 0] = i12;
       HEAP8[i11 + 2 >> 0] = i13;
       if ((i7 | 0) > 1) {
        i9 = i9 + i14 | 0;
        i7 = i7 + -1 | 0;
        i11 = i11 + 3 | 0;
       } else break;
      }
     }
     break;
    }
   case 4:
    {
     i7 = HEAP32[i21 >> 2] | 0;
     i12 = (HEAP32[i20 >> 2] << 16 | 0) / (i7 | 0) | 0;
     if ((i7 | 0) > 0) {
      i9 = i2;
      i10 = 65536;
      i8 = 0;
      while (1) {
       if ((i10 | 0) > 65535) {
        i14 = ~i10;
        i14 = i10 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
        i13 = i14 >>> 16;
        i8 = HEAP32[i9 + (i13 << 2) >> 2] | 0;
        i9 = i9 + 4 + (i13 << 2) | 0;
        i10 = i10 + -65536 - (i14 & -65536) | 0;
       }
       HEAP32[i11 >> 2] = i8;
       if ((i7 | 0) > 1) {
        i10 = i10 + i12 | 0;
        i7 = i7 + -1 | 0;
        i11 = i11 + 4 | 0;
       } else break;
      }
     }
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i17 | 0)) break L38; else i6 = i6 + i16 | 0;
  }
 } while (0);
 if (i24 | 0) _SDL_UnlockSurface(i27);
 if (!i15) {
  i28 = 0;
  STACKTOP = i29;
  return i28 | 0;
 }
 _SDL_UnlockSurface(i25);
 i28 = 0;
 STACKTOP = i29;
 return i28 | 0;
}

function _SDL_CreateTextureFromSurface(i8, i16) {
 i8 = i8 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i12 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i19 = i20 + 40 | 0;
 i18 = i20 + 32 | 0;
 i15 = i20 + 24 | 0;
 i13 = i20 + 16 | 0;
 i2 = i20 + 8 | 0;
 i1 = i20;
 i9 = i20 + 51 | 0;
 i10 = i20 + 50 | 0;
 i11 = i20 + 49 | 0;
 i14 = i20 + 48 | 0;
 i17 = i20 + 44 | 0;
 if (i8 | 0) if ((HEAP32[i8 >> 2] | 0) == 85556) {
  if (!i16) {
   _SDL_SetError(60410, i2) | 0;
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
  i7 = i16 + 4 | 0;
  if (!(HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0)) i4 = (_SDL_GetColorKey(i16, 0) | 0) == 0 & 1; else i4 = 1;
  i1 = HEAP32[i8 + 116 >> 2] | 0;
  i6 = HEAP32[i8 + 112 >> 2] | 0;
  L11 : do if (i6) {
   i5 = 0;
   i3 = i1;
   while (1) {
    if ((i3 | 0) == 0 | (i3 & -268435456 | 0) == 268435456) {
     i2 = i3 >>> 24 & 15;
     if ((i2 + -4 | 0) >>> 0 < 3) switch (i3 >>> 20 & 15) {
     case 8:
     case 7:
     case 4:
     case 3:
      {
       i2 = 1;
       break;
      }
     default:
      i12 = 12;
     } else i12 = 12;
     L18 : do if ((i12 | 0) == 12) {
      i12 = 0;
      if ((i2 + -7 | 0) >>> 0 < 5) {
       switch (i3 >>> 20 & 15) {
       case 5:
       case 6:
       case 2:
       case 3:
        {
         i2 = 1;
         break L18;
        }
       default:
        {}
       }
       i2 = 0;
      } else i2 = 0;
     } while (0);
     if ((i4 | 0) == (i2 | 0)) {
      i1 = i3;
      break L11;
     }
    }
    i2 = i5 + 1 | 0;
    if (i2 >>> 0 >= i6 >>> 0) break L11;
    i5 = i2;
    i3 = HEAP32[i8 + 116 + (i2 << 2) >> 2] | 0;
   }
  } while (0);
  i6 = _SDL_CreateTexture(i8, i1, 0, HEAP32[i16 + 8 >> 2] | 0, HEAP32[i16 + 12 >> 2] | 0) | 0;
  if (!i6) {
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
  do if ((i1 | 0) == (HEAP32[HEAP32[i7 >> 2] >> 2] | 0)) if (!(HEAP32[i16 >> 2] & 2)) {
   _SDL_UpdateTexture(i6, 0, HEAP32[i16 + 20 >> 2] | 0, HEAP32[i16 + 16 >> 2] | 0) | 0;
   break;
  } else {
   _SDL_LockSurface(i16) | 0;
   _SDL_UpdateTexture(i6, 0, HEAP32[i16 + 20 >> 2] | 0, HEAP32[i16 + 16 >> 2] | 0) | 0;
   _SDL_UnlockSurface(i16);
   break;
  } else {
   i1 = _SDL_AllocFormat(i1) | 0;
   if (!i1) {
    _SDL_DestroyTexture(i6);
    i19 = 0;
    STACKTOP = i20;
    return i19 | 0;
   }
   i2 = _SDL_ConvertSurface(i16, i1, 0) | 0;
   _SDL_FreeFormat(i1);
   if (i2 | 0) {
    _SDL_UpdateTexture(i6, 0, HEAP32[i2 + 20 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0) | 0;
    _SDL_FreeSurface(i2);
    break;
   }
   _SDL_DestroyTexture(i6);
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  } while (0);
  _SDL_GetSurfaceColorMod(i16, i9, i10, i11) | 0;
  i5 = HEAP8[i9 >> 0] | 0;
  i4 = HEAP8[i10 >> 0] | 0;
  i1 = HEAP8[i11 >> 0] | 0;
  L44 : do if ((i4 & i5) << 24 >> 24 == -1 & i1 << 24 >> 24 == -1) {
   i3 = i6;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) != 85557) {
     i12 = 32;
     break L44;
    }
    i1 = i3 + 20 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
    HEAP8[i3 + 28 >> 0] = i5;
    HEAP8[i3 + 29 >> 0] = i4;
    HEAP8[i3 + 30 >> 0] = -1;
    i1 = HEAP32[i3 + 36 >> 2] | 0;
    if (!i1) {
     i12 = 34;
     break;
    } else i3 = i1;
   }
  } else {
   i3 = i6;
   while (1) {
    if ((HEAP32[i3 >> 2] | 0) != 85557) {
     i12 = 32;
     break L44;
    }
    i2 = i3 + 20 | 0;
    HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
    HEAP8[i3 + 28 >> 0] = i5;
    HEAP8[i3 + 29 >> 0] = i4;
    HEAP8[i3 + 30 >> 0] = i1;
    i2 = HEAP32[i3 + 36 >> 2] | 0;
    if (!i2) {
     i12 = 34;
     break;
    } else i3 = i2;
   }
  } while (0);
  if ((i12 | 0) == 32) _SDL_SetError(41358, i13) | 0; else if ((i12 | 0) == 34) {
   i1 = HEAP32[i3 + 32 >> 2] | 0;
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
  }
  _SDL_GetSurfaceAlphaMod(i16, i14) | 0;
  i3 = HEAP8[i14 >> 0] | 0;
  L56 : do if (i3 << 24 >> 24 == -1) {
   i1 = i6;
   while (1) {
    if (!i1) {
     i12 = 42;
     break L56;
    }
    if ((HEAP32[i1 >> 2] | 0) != 85557) {
     i12 = 42;
     break L56;
    }
    i2 = i1 + 20 | 0;
    HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -3;
    HEAP8[i1 + 31 >> 0] = -1;
    i2 = HEAP32[i1 + 36 >> 2] | 0;
    if (!i2) {
     i12 = 44;
     break;
    } else i1 = i2;
   }
  } else {
   i1 = i6;
   while (1) {
    if (!i1) {
     i12 = 42;
     break L56;
    }
    if ((HEAP32[i1 >> 2] | 0) != 85557) {
     i12 = 42;
     break L56;
    }
    i2 = i1 + 20 | 0;
    HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
    HEAP8[i1 + 31 >> 0] = i3;
    i2 = HEAP32[i1 + 36 >> 2] | 0;
    if (!i2) {
     i12 = 44;
     break;
    } else i1 = i2;
   }
  } while (0);
  if ((i12 | 0) == 42) _SDL_SetError(41358, i15) | 0; else if ((i12 | 0) == 44) {
   i2 = HEAP32[i1 + 32 >> 2] | 0;
   i3 = HEAP32[i2 + 20 >> 2] | 0;
   if (i3 | 0) FUNCTION_TABLE_iii[i3 & 63](i2, i1) | 0;
  }
  do if (!(_SDL_GetColorKey(i16, 0) | 0)) {
   i3 = i6;
   while (1) {
    if (!i3) {
     i12 = 49;
     break;
    }
    if ((HEAP32[i3 >> 2] | 0) != 85557) {
     i12 = 49;
     break;
    }
    HEAP32[i3 + 24 >> 2] = 1;
    i1 = HEAP32[i3 + 36 >> 2] | 0;
    if (!i1) break; else i3 = i1;
   }
   if ((i12 | 0) == 49) {
    _SDL_SetError(41358, i18) | 0;
    break;
   }
   i1 = HEAP32[i3 + 32 >> 2] | 0;
   i2 = HEAP32[i1 + 24 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
  } else {
   _SDL_GetSurfaceBlendMode(i16, i17) | 0;
   i1 = HEAP32[i17 >> 2] | 0;
   i3 = i6;
   while (1) {
    if (!i3) {
     i12 = 56;
     break;
    }
    if ((HEAP32[i3 >> 2] | 0) != 85557) {
     i12 = 56;
     break;
    }
    HEAP32[i3 + 24 >> 2] = i1;
    i2 = HEAP32[i3 + 36 >> 2] | 0;
    if (!i2) break; else i3 = i2;
   }
   if ((i12 | 0) == 56) {
    _SDL_SetError(41358, i19) | 0;
    break;
   }
   i1 = HEAP32[i3 + 32 >> 2] | 0;
   i2 = HEAP32[i1 + 24 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
  } while (0);
  i19 = i6;
  STACKTOP = i20;
  return i19 | 0;
 }
 _SDL_SetError(41341, i1) | 0;
 i19 = 0;
 STACKTOP = i20;
 return i19 | 0;
}

function _hexfloat(i18, i22, i21, i23, i19) {
 i18 = i18 | 0;
 i22 = i22 | 0;
 i21 = i21 | 0;
 i23 = i23 | 0;
 i19 = i19 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0;
 i16 = 0;
 i20 = i18 + 4 | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 i17 = i18 + 100 | 0;
 if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
  HEAP32[i20 >> 2] = i2 + 1;
  i3 = HEAPU8[i2 >> 0] | 0;
  i5 = 0;
 } else {
  i3 = ___shgetc(i18) | 0;
  i5 = 0;
 }
 L4 : while (1) {
  switch (i3 | 0) {
  case 46:
   {
    i16 = 8;
    break L4;
   }
  case 48:
   break;
  default:
   {
    i12 = 0;
    i7 = 0;
    d8 = 1.0;
    d1 = 0.0;
    i2 = 0;
    i6 = i3;
    i13 = i5;
    i15 = 0;
    i14 = 0;
    i5 = 0;
    i3 = 0;
    break L4;
   }
  }
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i3 = HEAPU8[i2 >> 0] | 0;
   i5 = 1;
   continue;
  } else {
   i3 = ___shgetc(i18) | 0;
   i5 = 1;
   continue;
  }
 }
 if ((i16 | 0) == 8) {
  i2 = HEAP32[i20 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i2 + 1;
   i3 = HEAPU8[i2 >> 0] | 0;
  } else i3 = ___shgetc(i18) | 0;
  if ((i3 | 0) == 48) {
   i5 = 0;
   i3 = 0;
   do {
    i2 = HEAP32[i20 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
     HEAP32[i20 >> 2] = i2 + 1;
     i6 = HEAPU8[i2 >> 0] | 0;
    } else i6 = ___shgetc(i18) | 0;
    i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
    i3 = tempRet0;
   } while ((i6 | 0) == 48);
   i12 = 1;
   i7 = 0;
   d8 = 1.0;
   d1 = 0.0;
   i2 = 0;
   i13 = 1;
   i15 = 0;
   i14 = 0;
  } else {
   i12 = 1;
   i7 = 0;
   d8 = 1.0;
   d1 = 0.0;
   i2 = 0;
   i6 = i3;
   i13 = i5;
   i15 = 0;
   i14 = 0;
   i5 = 0;
   i3 = 0;
  }
 }
 while (1) {
  i10 = i6 + -48 | 0;
  i9 = i6 | 32;
  if (i10 >>> 0 < 10) i16 = 20; else {
   i11 = (i6 | 0) == 46;
   if (!(i11 | (i9 + -97 | 0) >>> 0 < 6)) break;
   if (i11) if (!i12) {
    i12 = 1;
    d4 = d8;
    i11 = i13;
    i5 = i14;
    i3 = i15;
    i10 = i14;
    i9 = i15;
   } else {
    i6 = 46;
    break;
   } else i16 = 20;
  }
  if ((i16 | 0) == 20) {
   i16 = 0;
   i6 = (i6 | 0) > 57 ? i9 + -87 | 0 : i10;
   do if ((i15 | 0) < 0 | (i15 | 0) == 0 & i14 >>> 0 < 8) {
    d4 = d8;
    i2 = i6 + (i2 << 4) | 0;
   } else if ((i15 | 0) < 0 | (i15 | 0) == 0 & i14 >>> 0 < 14) {
    d8 = d8 * .0625;
    d4 = d8;
    d1 = d1 + d8 * +(i6 | 0);
    break;
   } else {
    i13 = (i7 | 0) != 0 | (i6 | 0) == 0;
    i7 = i13 ? i7 : 1;
    d4 = d8;
    d1 = i13 ? d1 : d1 + d8 * .5;
    break;
   } while (0);
   i10 = _i64Add(i14 | 0, i15 | 0, 1, 0) | 0;
   i11 = 1;
   i9 = tempRet0;
  }
  i6 = HEAP32[i20 >> 2] | 0;
  if (i6 >>> 0 < (HEAP32[i17 >> 2] | 0) >>> 0) {
   HEAP32[i20 >> 2] = i6 + 1;
   d8 = d4;
   i6 = HEAPU8[i6 >> 0] | 0;
   i13 = i11;
   i15 = i9;
   i14 = i10;
   continue;
  } else {
   d8 = d4;
   i6 = ___shgetc(i18) | 0;
   i13 = i11;
   i15 = i9;
   i14 = i10;
   continue;
  }
 }
 do if (!i13) {
  i2 = (HEAP32[i17 >> 2] | 0) == 0;
  if (!i2) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  if (!i19) ___shlim(i18, 0); else {
   if (!i2) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   if (!((i12 | 0) == 0 | i2)) HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
  }
  d1 = +(i23 | 0) * 0.0;
 } else {
  i9 = (i12 | 0) == 0;
  i10 = i9 ? i14 : i5;
  i9 = i9 ? i15 : i3;
  if ((i15 | 0) < 0 | (i15 | 0) == 0 & i14 >>> 0 < 8) {
   i5 = i14;
   i3 = i15;
   while (1) {
    i2 = i2 << 4;
    i16 = i5;
    i5 = _i64Add(i5 | 0, i3 | 0, 1, 0) | 0;
    if (!((i3 | 0) < 0 | (i3 | 0) == 0 & i16 >>> 0 < 7)) {
     i7 = i2;
     break;
    } else i3 = tempRet0;
   }
  } else i7 = i2;
  if ((i6 | 32 | 0) == 112) {
   i3 = _scanexp(i18, i19) | 0;
   i2 = tempRet0;
   if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
    if (!i19) {
     ___shlim(i18, 0);
     d1 = 0.0;
     break;
    }
    if (!(HEAP32[i17 >> 2] | 0)) {
     i3 = 0;
     i2 = 0;
    } else {
     HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
     i3 = 0;
     i2 = 0;
    }
   }
  } else if (!(HEAP32[i17 >> 2] | 0)) {
   i3 = 0;
   i2 = 0;
  } else {
   HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + -1;
   i3 = 0;
   i2 = 0;
  }
  i5 = _bitshift64Shl(i10 | 0, i9 | 0, 2) | 0;
  i5 = _i64Add(i5 | 0, tempRet0 | 0, -32, -1) | 0;
  i5 = _i64Add(i5 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
  i2 = tempRet0;
  if (!i7) {
   d1 = +(i23 | 0) * 0.0;
   break;
  }
  i20 = 0 - i21 | 0;
  i19 = ((i20 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) > (i19 | 0) | (i2 | 0) == (i19 | 0) & i5 >>> 0 > i20 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i23 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  i20 = i21 + -106 | 0;
  i19 = ((i20 | 0) < 0) << 31 >> 31;
  if ((i2 | 0) < (i19 | 0) | (i2 | 0) == (i19 | 0) & i5 >>> 0 < i20 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   d1 = +(i23 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if ((i7 | 0) > -1) {
   i3 = i7;
   do {
    i20 = !(d1 >= .5);
    i3 = i3 << 1 | (i20 ^ 1) & 1;
    d1 = d1 + (i20 ? d1 : d1 + -1.0);
    i5 = _i64Add(i5 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
   } while ((i3 | 0) > -1);
   d8 = d1;
   i6 = i3;
  } else {
   d8 = d1;
   i6 = i7;
  }
  i20 = ((i22 | 0) < 0) << 31 >> 31;
  i21 = _i64Subtract(32, 0, i21 | 0, ((i21 | 0) < 0) << 31 >> 31 | 0) | 0;
  i2 = _i64Add(i21 | 0, tempRet0 | 0, i5 | 0, i2 | 0) | 0;
  i21 = tempRet0;
  if ((i21 | 0) < (i20 | 0) | (i21 | 0) == (i20 | 0) & i2 >>> 0 < i22 >>> 0) if ((i2 | 0) > 0) i16 = 59; else {
   i3 = 0;
   i2 = 84;
   i16 = 61;
  } else {
   i2 = i22;
   i16 = 59;
  }
  if ((i16 | 0) == 59) if ((i2 | 0) < 53) {
   i3 = i2;
   i2 = 84 - i2 | 0;
   i16 = 61;
  } else {
   d4 = 0.0;
   d1 = +(i23 | 0);
  }
  if ((i16 | 0) == 61) {
   d1 = +(i23 | 0);
   d4 = +_copysignl(+_scalbn(1.0, i2), d1);
   i2 = i3;
  }
  i23 = (i6 & 1 | 0) == 0 & (d8 != 0.0 & (i2 | 0) < 32);
  d1 = (i23 ? 0.0 : d8) * d1 + (d4 + d1 * +((i6 + (i23 & 1) | 0) >>> 0)) - d4;
  if (!(d1 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
  d1 = +_scalbnl(d1, i5);
 } while (0);
 return +d1;
}

function _SDL_DrawLine2(i18, i2, i19, i4, i8, i20, i9) {
 i18 = i18 | 0;
 i2 = i2 | 0;
 i19 = i19 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i20 = i20 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0;
 i17 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i21 + 3 | 0;
 i6 = i21 + 2 | 0;
 i7 = i21 + 1 | 0;
 i1 = i21;
 if ((i8 | 0) == (i19 | 0)) {
  i1 = (HEAP32[i18 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i8) | 0) << 1) | 0;
  if ((i4 | 0) < (i2 | 0)) {
   i1 = i1 + (i4 << 1) | 0;
   i3 = (i9 | 0) != 0;
   i1 = i3 ? i1 : i1 + 2 | 0;
   i4 = 0 - i4 | 0;
  } else {
   i1 = i1 + (i2 << 1) | 0;
   i3 = (i9 | 0) != 0;
   i2 = 0 - i2 | 0;
  }
  i2 = i4 + i2 + (i3 & 1) | 0;
  if (!i2) {
   STACKTOP = i21;
   return;
  }
  i3 = i20 & 65535;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP16[i1 >> 1] = i3;
   if (!i2) break; else i1 = i1 + 2 | 0;
  }
  STACKTOP = i21;
  return;
 }
 if ((i4 | 0) == (i2 | 0)) {
  i5 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  i1 = HEAP32[i18 + 20 >> 2] | 0;
  if ((i8 | 0) < (i19 | 0)) {
   i1 = i1 + ((Math_imul(i5, i8) | 0) << 1) + (i4 << 1) | 0;
   i3 = (i9 | 0) != 0;
   i1 = i3 ? i1 : i1 + (i5 << 1) | 0;
   i4 = 0 - i8 | 0;
   i2 = i19;
  } else {
   i1 = i1 + ((Math_imul(i5, i19) | 0) << 1) + (i4 << 1) | 0;
   i4 = i8;
   i3 = (i9 | 0) != 0;
   i2 = 0 - i19 | 0;
  }
  i2 = i4 + i2 + (i3 & 1) | 0;
  if (!i2) {
   STACKTOP = i21;
   return;
  }
  i3 = i20 & 65535;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP16[i1 >> 1] = i3;
   if (!i2) break; else i1 = i1 + (i5 << 1) | 0;
  }
  STACKTOP = i21;
  return;
 }
 i16 = i2 - i4 | 0;
 i3 = i19 - i8 | 0;
 if ((((i16 | 0) < 0 ? 0 - i16 | 0 : i16) | 0) == (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0)) {
  i5 = (HEAP32[i18 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i18 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  i1 = HEAP32[i18 + 20 >> 2] | 0;
  if ((i8 | 0) < (i19 | 0)) {
   i1 = i1 + ((Math_imul(i5, i8) | 0) << 1) + (i4 << 1) | 0;
   i4 = i5 + ((i4 | 0) > (i2 | 0) ? -1 : 1) | 0;
   i1 = (i9 | 0) == 0 ? i1 + (i4 << 1) | 0 : i1;
  } else {
   i1 = i1 + ((Math_imul(i5, i19) | 0) << 1) + (i2 << 1) | 0;
   i3 = i8 - i19 | 0;
   i4 = i5 + ((i4 | 0) < (i2 | 0) ? -1 : 1) | 0;
  }
  i2 = i3 + ((i9 | 0) != 0 & 1) | 0;
  if (!i2) {
   STACKTOP = i21;
   return;
  }
  i3 = i20 & 65535;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP16[i1 >> 1] = i3;
   if (!i2) break; else i1 = i1 + (i4 << 1) | 0;
  }
  STACKTOP = i21;
  return;
 }
 i16 = HEAP32[i18 + 4 >> 2] | 0;
 _SDL_GetRGBA(i20, i16, i5, i6, i7, i1);
 i1 = HEAP32[i16 + 12 >> 2] | 0;
 L40 : do if ((i1 | 0) < 63488) {
  switch (i1 | 0) {
  case 31744:
   break;
  default:
   {
    i17 = 35;
    break L40;
   }
  }
  i1 = i4 - i2 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i3 = i8 - i19 | 0;
  i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
  if ((i1 | 0) < (i3 | 0)) {
   i15 = i1 << 1;
   i7 = 1;
   i6 = 0;
   i5 = i1 - i3 | 0;
   i16 = i15;
   i15 = i15 - i3 | 0;
   i1 = i3;
  } else {
   i15 = i3 << 1;
   i7 = 0;
   i6 = 1;
   i5 = i3 - i1 | 0;
   i16 = i15;
   i15 = i15 - i1 | 0;
  }
  i14 = i5 << 1;
  i13 = (i4 | 0) < (i2 | 0);
  i12 = i13 ? 0 - i6 | 0 : i6;
  i13 = i13 ? -1 : 1;
  i10 = (i8 | 0) < (i19 | 0);
  i11 = i10 ? 0 - i7 | 0 : i7;
  i10 = i10 ? -1 : 1;
  i9 = i1 + ((i9 | 0) != 0 & 1) | 0;
  if ((i9 | 0) > 0) {
   i7 = i20 & 65535;
   i8 = HEAP32[i18 + 20 >> 2] | 0;
   i6 = HEAP32[i18 + 16 >> 2] | 0;
   i5 = i19;
   i4 = 0;
   i1 = i15;
   while (1) {
    HEAP16[i8 + (Math_imul(i6, i5) | 0) + (i2 << 1) >> 1] = i7;
    i3 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i9 | 0)) break; else {
     i5 = i5 + (i3 ? i11 : i10) | 0;
     i2 = (i3 ? i12 : i13) + i2 | 0;
     i1 = (i3 ? i16 : i14) + i1 | 0;
    }
   }
  }
 } else {
  switch (i1 | 0) {
  case 63488:
   break;
  default:
   {
    i17 = 35;
    break L40;
   }
  }
  i1 = i4 - i2 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i3 = i8 - i19 | 0;
  i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
  if ((i1 | 0) < (i3 | 0)) {
   i15 = i1 << 1;
   i7 = 1;
   i6 = 0;
   i5 = i1 - i3 | 0;
   i16 = i15;
   i15 = i15 - i3 | 0;
   i1 = i3;
  } else {
   i15 = i3 << 1;
   i7 = 0;
   i6 = 1;
   i5 = i3 - i1 | 0;
   i16 = i15;
   i15 = i15 - i1 | 0;
  }
  i14 = i5 << 1;
  i13 = (i4 | 0) < (i2 | 0);
  i12 = i13 ? 0 - i6 | 0 : i6;
  i13 = i13 ? -1 : 1;
  i10 = (i8 | 0) < (i19 | 0);
  i11 = i10 ? 0 - i7 | 0 : i7;
  i10 = i10 ? -1 : 1;
  i9 = i1 + ((i9 | 0) != 0 & 1) | 0;
  if ((i9 | 0) > 0) {
   i7 = i20 & 65535;
   i8 = HEAP32[i18 + 20 >> 2] | 0;
   i6 = HEAP32[i18 + 16 >> 2] | 0;
   i5 = i19;
   i4 = 0;
   i1 = i15;
   while (1) {
    HEAP16[i8 + (Math_imul(i6, i5) | 0) + (i2 << 1) >> 1] = i7;
    i3 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i9 | 0)) break; else {
     i5 = i5 + (i3 ? i11 : i10) | 0;
     i2 = (i3 ? i12 : i13) + i2 | 0;
     i1 = (i3 ? i16 : i14) + i1 | 0;
    }
   }
  }
 } while (0);
 if ((i17 | 0) == 35) {
  i1 = i4 - i2 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i3 = i8 - i19 | 0;
  i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
  if ((i1 | 0) < (i3 | 0)) {
   i15 = i1 << 1;
   i7 = 1;
   i6 = 0;
   i5 = i1 - i3 | 0;
   i16 = i15;
   i15 = i15 - i3 | 0;
   i1 = i3;
  } else {
   i15 = i3 << 1;
   i7 = 0;
   i6 = 1;
   i5 = i3 - i1 | 0;
   i16 = i15;
   i15 = i15 - i1 | 0;
  }
  i14 = i5 << 1;
  i13 = (i4 | 0) < (i2 | 0);
  i12 = i13 ? 0 - i6 | 0 : i6;
  i13 = i13 ? -1 : 1;
  i10 = (i8 | 0) < (i19 | 0);
  i11 = i10 ? 0 - i7 | 0 : i7;
  i10 = i10 ? -1 : 1;
  i9 = i1 + ((i9 | 0) != 0 & 1) | 0;
  if ((i9 | 0) > 0) {
   i7 = i20 & 65535;
   i8 = HEAP32[i18 + 20 >> 2] | 0;
   i6 = HEAP32[i18 + 16 >> 2] | 0;
   i5 = i19;
   i4 = 0;
   i1 = i15;
   while (1) {
    HEAP16[i8 + (Math_imul(i6, i5) | 0) + (i2 << 1) >> 1] = i7;
    i3 = (i1 | 0) < 0;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) >= (i9 | 0)) break; else {
     i5 = i5 + (i3 ? i11 : i10) | 0;
     i2 = (i3 ? i12 : i13) + i2 | 0;
     i1 = (i3 ? i16 : i14) + i1 | 0;
    }
   }
  }
 }
 STACKTOP = i21;
 return;
}

function _SDL_RecreateWindow(i19, i2) {
 i19 = i19 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i18 = i21 + 112 | 0;
 i17 = i21 + 104 | 0;
 i15 = i21 + 96 | 0;
 i14 = i21 + 88 | 0;
 i13 = i21 + 80 | 0;
 i12 = i21 + 72 | 0;
 i11 = i21 + 64 | 0;
 i10 = i21 + 56 | 0;
 i9 = i21 + 48 | 0;
 i7 = i21 + 40 | 0;
 i8 = i21 + 32 | 0;
 i6 = i21 + 24 | 0;
 i5 = i21 + 16 | 0;
 i4 = i21 + 8 | 0;
 i1 = i21;
 i3 = HEAP32[19487] | 0;
 if (i2 & 2 | 0) if (!(HEAP32[i3 + 176 >> 2] | 0)) {
  i20 = _SDL_SetError(46708, i1) | 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i20 = i19 + 48 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 i16 = (i1 & 2048 | 0) == 0 ? i2 & -2049 : i2 | 2048;
 do if (!i3) _SDL_SetError(40203, i4) | 0; else {
  if ((HEAP32[i19 >> 2] | 0) != (i3 + 280 | 0)) {
   _SDL_SetError(59973, i5) | 0;
   break;
  }
  if (i1 & 4 | 0) {
   i1 = i19 + 116 | 0;
   HEAP32[i1 >> 2] = 1;
   _SDL_UpdateFullscreenMode(i19, 0) | 0;
   i2 = HEAP32[19487] | 0;
   i3 = HEAP32[i2 + 84 >> 2] | 0;
   if (i3 | 0) FUNCTION_TABLE_vii[i3 & 127](i2, i19);
   HEAP32[i1 >> 2] = 0;
   _SDL_SendWindowEvent(i19, 2, 0, 0) | 0;
  }
 } while (0);
 i1 = i19 + 108 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -5;
  _SDL_FreeSurface(i2);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = HEAP32[19487] | 0;
 i2 = HEAP32[i1 + 140 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_vii[i2 & 127](i1, i19);
  i1 = HEAP32[19487] | 0;
 }
 i2 = HEAP32[i1 + 128 >> 2] | 0;
 i4 = (i16 & 2048 | 0) == 0;
 if (i4 & (i2 | 0) != 0) FUNCTION_TABLE_vii[i2 & 127](i1, i19);
 i1 = i16 & 2;
 L26 : do if ((HEAP32[i20 >> 2] & 2 | 0) == (i1 | 0)) i1 = 0; else {
  i3 = HEAP32[19487] | 0;
  i2 = (i3 | 0) == 0;
  if (!i1) {
   if (i2) {
    _SDL_SetError(40203, i7) | 0;
    i1 = 0;
    break;
   }
   i1 = i3 + 388 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) <= 0) {
    i1 = 0;
    break;
   }
   HEAP32[i1 >> 2] = i2 + -1;
   if ((i2 | 0) != 1) {
    i1 = 0;
    break;
   }
   i1 = HEAP32[i3 + 172 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
   FUNCTION_TABLE_vi[i1 & 511](i3);
   i1 = 0;
   break;
  }
  L37 : do if (i2) i1 = _SDL_SetError(40203, i6) | 0; else {
   i1 = HEAP32[i3 + 388 >> 2] | 0;
   do if (!i1) {
    i1 = HEAP32[i3 + 164 >> 2] | 0;
    if (!i1) {
     i1 = _SDL_SetError(46488, i8) | 0;
     break L37;
    }
    i1 = FUNCTION_TABLE_iii[i1 & 63](i3, 0) | 0;
    i3 = HEAP32[19487] | 0;
    if (!i1) {
     i2 = i3;
     i1 = HEAP32[i3 + 388 >> 2] | 0;
     break;
    }
    i2 = HEAP32[i3 + 172 >> 2] | 0;
    if (!i2) break L37;
    FUNCTION_TABLE_vi[i2 & 511](i3);
    break L37;
   } else i2 = i3; while (0);
   HEAP32[i2 + 388 >> 2] = i1 + 1;
   i1 = 1;
   break L26;
  } while (0);
  if ((i1 | 0) < 0) {
   i20 = -1;
   STACKTOP = i21;
   return i20 | 0;
  } else i1 = 1;
 } while (0);
 i2 = i16 & 1024050 | 8;
 HEAP32[i20 >> 2] = i2;
 HEAP32[i19 + 52 >> 2] = i2;
 HEAP32[i19 + 120 >> 2] = 0;
 i2 = HEAP32[19487] | 0;
 i3 = HEAP32[i2 + 32 >> 2] | 0;
 if (i4 & (i3 | 0) != 0) if ((FUNCTION_TABLE_iii[i3 & 63](i2, i19) | 0) < 0) {
  if (!i1) {
   i20 = -1;
   STACKTOP = i21;
   return i20 | 0;
  }
  i3 = HEAP32[19487] | 0;
  if (!i3) _SDL_SetError(40203, i9) | 0; else {
   i1 = i3 + 388 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) > 0) {
    HEAP32[i1 >> 2] = i2 + -1;
    if ((i2 | 0) == 1) {
     i1 = HEAP32[i3 + 172 >> 2] | 0;
     if (i1 | 0) FUNCTION_TABLE_vi[i1 & 511](i3);
    }
   }
  }
  HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & -3;
  i20 = -1;
  STACKTOP = i21;
  return i20 | 0;
 }
 if (!i4) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 2048;
 i2 = HEAP32[19487] | 0;
 i1 = HEAP32[i2 + 40 >> 2] | 0;
 if (i1) if (HEAP32[i19 + 8 >> 2] | 0) {
  FUNCTION_TABLE_vii[i1 & 127](i2, i19);
  i2 = HEAP32[19487] | 0;
 }
 i1 = HEAP32[i2 + 44 >> 2] | 0;
 if (i1 | 0) {
  i3 = HEAP32[i19 + 12 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_viii[i1 & 63](i2, i19, i3);
 }
 if (HEAP32[i19 + 132 >> 2] | 0) FUNCTION_TABLE_iii[HEAP32[(HEAP32[19487] | 0) + 256 >> 2] & 63](i19, 1) | 0;
 do if (i16 & 128 | 0) {
  i2 = HEAP32[19487] | 0;
  if (!i2) {
   _SDL_SetError(40203, i10) | 0;
   break;
  }
  if ((HEAP32[i19 >> 2] | 0) != (i2 + 280 | 0)) {
   _SDL_SetError(59973, i11) | 0;
   break;
  }
  if (!(HEAP32[i20 >> 2] & 128)) {
   i1 = HEAP32[i2 + 92 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[i1 & 127](i2, i19);
  }
 } while (0);
 do if (i16 & 64 | 0) {
  i1 = HEAP32[19487] | 0;
  if (!i1) {
   _SDL_SetError(40203, i12) | 0;
   break;
  }
  if ((HEAP32[i19 >> 2] | 0) != (i1 + 280 | 0)) {
   _SDL_SetError(59973, i13) | 0;
   break;
  }
  if (!(HEAP32[i20 >> 2] & 64)) {
   _SDL_UpdateFullscreenMode(i19, 0) | 0;
   i1 = HEAP32[19487] | 0;
   i2 = HEAP32[i1 + 96 >> 2] | 0;
   if (i2 | 0) FUNCTION_TABLE_vii[i2 & 127](i1, i19);
  }
 } while (0);
 do if (i16 & 1 | 0) {
  i1 = HEAP32[19487] | 0;
  if (!i1) {
   _SDL_SetError(40203, i14) | 0;
   break;
  }
  if ((HEAP32[i19 >> 2] | 0) != (i1 + 280 | 0)) {
   _SDL_SetError(59973, i15) | 0;
   break;
  }
  i1 = i16 & 4097;
  i2 = HEAP32[i20 >> 2] | 0;
  i3 = i2 & 4097;
  if ((i1 | 0) != (i3 | 0)) {
   HEAP32[i20 >> 2] = i2 & -4098 | i1;
   if (_SDL_UpdateFullscreenMode(i19, (i2 & 4 | 0) == 0 ? 0 : i2 >>> 6 & 1 ^ 1) | 0) HEAP32[i20 >> 2] = HEAP32[i20 >> 2] & -4098 | i3;
  }
 } while (0);
 if (i16 & 256 | 0) _SDL_SetWindowGrab(i19, 1);
 if (i16 & 8 | 0) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i17) | 0;
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 if ((HEAP32[i19 >> 2] | 0) != (i2 + 280 | 0)) {
  _SDL_SetError(59973, i18) | 0;
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 if (HEAP32[i20 >> 2] & 4 | 0) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i1 = HEAP32[i2 + 80 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_vii[i1 & 127](i2, i19);
 _SDL_SendWindowEvent(i19, 1, 0, 0) | 0;
 i20 = 0;
 STACKTOP = i21;
 return i20 | 0;
}

function _SW_RenderCopyEx(i9, i8, i21, i10, d24, i28, i25) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i21 = i21 | 0;
 i10 = i10 | 0;
 d24 = +d24;
 i28 = i28 | 0;
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, f3 = f0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i26 = 0, i27 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, d33 = 0.0, d34 = 0.0, d35 = 0.0, d36 = 0.0, d37 = 0.0, d38 = 0.0, d39 = 0.0, d40 = 0.0, d41 = 0.0, d42 = 0.0, d43 = 0.0, d44 = 0.0;
 i32 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i29 = i32 + 32 | 0;
 i30 = i32 + 28 | 0;
 i31 = i32 + 24 | 0;
 i26 = i32 + 8 | 0;
 i27 = i32;
 i12 = i32 + 20 | 0;
 i16 = i32 + 16 | 0;
 i17 = i32 + 51 | 0;
 i18 = i32 + 50 | 0;
 i19 = i32 + 49 | 0;
 i20 = i32 + 48 | 0;
 i6 = i9 + 320 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if (!i1) {
  i2 = i7 + 4 | 0;
  i23 = HEAP32[i2 >> 2] | 0;
  HEAP32[i7 >> 2] = i23;
  i1 = i23;
  if (!i23) {
   i5 = _SDL_GetWindowSurface(HEAP32[i9 + 188 >> 2] | 0) | 0;
   do if (i5 | 0) {
    HEAP32[i2 >> 2] = i5;
    HEAP32[i7 >> 2] = i5;
    i1 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0;
    if (!i1) {
     i22 = i5;
     break L1;
    }
    _SDL_SetClipRect(i1, i9 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i6 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i9 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i9 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i22 = HEAP32[i7 >> 2] | 0;
  } else i22 = i1;
 } else i22 = i1; while (0);
 i23 = HEAP32[i8 + 68 >> 2] | 0;
 if (!i22) {
  i31 = -1;
  STACKTOP = i32;
  return i31 | 0;
 }
 i2 = HEAP32[i9 + 216 >> 2] | 0;
 i1 = HEAP32[i9 + 220 >> 2] | 0;
 if (!(i2 | i1)) {
  f3 = Math_fround(HEAPF32[i10 >> 2]);
  f4 = Math_fround(HEAPF32[i10 + 4 >> 2]);
 } else {
  f3 = Math_fround(i2 | 0);
  f3 = Math_fround(Math_fround(HEAPF32[i10 >> 2]) + f3);
  f4 = Math_fround(i1 | 0);
  f4 = Math_fround(Math_fround(HEAPF32[i10 + 4 >> 2]) + f4);
 }
 i15 = ~~f3;
 i13 = ~~f4;
 i14 = ~~Math_fround(HEAPF32[i10 + 8 >> 2]);
 i11 = ~~Math_fround(HEAPF32[i10 + 12 >> 2]);
 i8 = i29 + 4 | 0;
 i9 = i29 + 8 | 0;
 HEAP32[i9 >> 2] = i14;
 i10 = i29 + 12 | 0;
 HEAP32[i10 >> 2] = i11;
 HEAP32[i29 >> 2] = 0;
 HEAP32[i8 >> 2] = 0;
 if ((HEAP32[i21 + 8 >> 2] | 0) == (i14 | 0)) if ((HEAP32[i21 + 12 >> 2] | 0) == (i11 | 0)) if (!(HEAP32[i21 >> 2] | 0)) if (!(HEAP32[i21 + 4 >> 2] | 0)) {
  i2 = i23;
  i1 = i14;
  i5 = i11;
  i7 = 32;
 } else i7 = 18; else i7 = 18; else i7 = 18; else i7 = 18;
 if ((i7 | 0) == 18) {
  i6 = i23 + 4 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i2 = _SDL_CreateRGBSurface(0, i14, i11, HEAPU8[i2 + 8 >> 0] | 0, HEAP32[i2 + 12 >> 2] | 0, HEAP32[i2 + 16 >> 2] | 0, HEAP32[i2 + 20 >> 2] | 0, HEAP32[i2 + 24 >> 2] | 0) | 0;
  do if (!i2) {
   i5 = 0;
   i1 = 0;
  } else {
   if (!(_SDL_GetColorKey(i23, i12) | 0)) {
    _SDL_SetColorKey(i2, 1, HEAP32[i12 >> 2] | 0) | 0;
    i1 = 1;
   } else i1 = 0;
   _SDL_GetSurfaceAlphaMod(i23, i17) | 0;
   _SDL_GetSurfaceBlendMode(i23, i16) | 0;
   _SDL_GetSurfaceColorMod(i23, i18, i19, i20) | 0;
   if (!(HEAP32[i16 >> 2] | 0)) i5 = (HEAP8[i18 >> 0] & HEAP8[i17 >> 0] & HEAP8[i19 >> 0] & HEAP8[i20 >> 0]) << 24 >> 24 != -1 & 1; else i5 = 1;
   if (!(i5 | i1)) {
    i5 = 1;
    i1 = _SDL_UpperBlitScaled(i23, i21, i2, i29) | 0;
    break;
   }
   i5 = _SDL_ConvertSurface(i23, HEAP32[i6 >> 2] | 0, HEAP32[i23 >> 2] | 0) | 0;
   if (!i5) {
    _SDL_FreeSurface(i2);
    i5 = 0;
    i1 = 0;
    break;
   }
   _SDL_SetSurfaceAlphaMod(i5, -1) | 0;
   _SDL_SetSurfaceBlendMode(i5, 0) | 0;
   _SDL_SetColorKey(i5, 0, 0) | 0;
   _SDL_SetSurfaceColorMod(i5, -1, -1, -1) | 0;
   _SDL_SetSurfaceRLE(i5, 0) | 0;
   _SDL_SetSurfaceAlphaMod(i2, HEAP8[i17 >> 0] | 0) | 0;
   _SDL_SetSurfaceBlendMode(i2, HEAP32[i16 >> 2] | 0) | 0;
   _SDL_SetSurfaceColorMod(i2, HEAP8[i18 >> 0] | 0, HEAP8[i19 >> 0] | 0, HEAP8[i20 >> 0] | 0) | 0;
   i1 = _SDL_UpperBlitScaled(i5, i21, i2, i29) | 0;
   if ((i5 | 0) == (i23 | 0)) i5 = 1; else {
    _SDL_FreeSurface(i5);
    i5 = 1;
   }
  } while (0);
  if (!i5) {
   i31 = -1;
   STACKTOP = i32;
   return i31 | 0;
  }
  if (!i1) {
   i1 = HEAP32[i9 >> 2] | 0;
   i5 = HEAP32[i10 >> 2] | 0;
   i7 = 32;
  }
 }
 if ((i7 | 0) == 32) {
  _SDLgfx_rotozoomSurfaceSizeTrig(i1, i5, d24, i30, i31, i26, i27);
  i5 = (HEAP32[i30 >> 2] | 0) / 2 | 0;
  i6 = (HEAP32[i31 >> 2] | 0) / 2 | 0;
  i1 = _SDL_GetHint(47574) | 0;
  if (!i1) i1 = 0; else if ((HEAP8[i1 >> 0] | 0) == 48) i1 = 0; else i1 = (_SDL_strcasecmp(i1, 47599) | 0) != 0 & 1;
  i1 = _SDLgfx_rotateSurface(i2, d24, i5, i6, i1, i25 & 1, i25 & 2, HEAP32[i30 >> 2] | 0, HEAP32[i31 >> 2] | 0, +HEAPF64[i26 >> 3], +HEAPF64[i27 >> 3]) | 0;
  if (!i1) i1 = 0; else {
   i20 = ~~Math_fround(HEAPF32[i28 >> 2]);
   i25 = i20 + i15 | 0;
   i21 = ~~Math_fround(HEAPF32[i28 + 4 >> 2]);
   i28 = i21 + i13 | 0;
   d42 = -+HEAPF64[i27 >> 3];
   HEAPF64[i27 >> 3] = d42;
   d34 = +(0 - i20 | 0);
   d33 = +(0 - i21 | 0);
   d44 = +HEAPF64[i26 >> 3];
   d38 = d44 * d34;
   d37 = d42 * d33;
   d36 = +(i25 | 0);
   d39 = d38 - d37 + d36;
   d34 = d34 * d42;
   d33 = d44 * d33;
   d24 = +(i28 | 0);
   d35 = d34 + d33 + d24;
   d41 = +(i14 + i15 - i25 | 0);
   d43 = d44 * d41;
   d37 = d43 - d37 + d36;
   d41 = d42 * d41;
   d33 = d41 + d33 + d24;
   d40 = +(i11 + i13 - i28 | 0);
   d42 = d42 * d40;
   d38 = d38 - d42 + d36;
   d40 = d44 * d40;
   d34 = d34 + d40 + d24;
   d36 = d43 - d42 + d36;
   d24 = d41 + d40 + d24;
   d37 = d39 < d37 ? d39 : d37;
   d36 = d38 < d36 ? d38 : d36;
   HEAP32[i29 >> 2] = ~~(d37 < d36 ? d37 : d36);
   d33 = d35 < d33 ? d35 : d33;
   d24 = d34 < d24 ? d34 : d24;
   HEAP32[i8 >> 2] = ~~(d33 < d24 ? d33 : d24);
   HEAP32[i9 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i31 >> 2];
   i31 = _SDL_UpperBlit(i1, 0, i22, i29) | 0;
   _SDL_FreeSurface(i1);
   i1 = i31;
  }
 }
 if ((i2 | 0) == (i23 | 0)) {
  i31 = i1;
  STACKTOP = i32;
  return i31 | 0;
 }
 _SDL_FreeSurface(i2);
 i31 = i1;
 STACKTOP = i32;
 return i31 | 0;
}

function __ZNSt3__26locale5__impC2Ej(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 HEAP32[i5 + 4 >> 2] = i1 + -1;
 HEAP32[i5 >> 2] = 34440;
 i2 = i5 + 8 | 0;
 __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, 28);
 i1 = i5 + 144 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(73161) | 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) HEAP8[i1 + 11 >> 0] = i3; else {
  i8 = i3 + 16 & -16;
  i7 = __Znwj(i8) | 0;
  HEAP32[i1 >> 2] = i7;
  HEAP32[i5 + 152 >> 2] = i8 | -2147483648;
  HEAP32[i5 + 148 >> 2] = i3;
  i1 = i7;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 73161, i3) | 0;
 HEAP8[i4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i3 | 0, i4);
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = i5 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((i3 | 0) == (i1 | 0)) break;
  i8 = i3 + -4 | 0;
  HEAP32[i2 >> 2] = i8;
  i3 = i8;
 }
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_(i5, 76968);
 __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_(i5, 76976);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_(i5, 76984);
 __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_(i5, 77e3);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i5, 77008);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i5, 77016);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i5, 77032);
 __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i5, 77040);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_(i5, 77048);
 __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_(i5, 77072);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i5, 77104);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i5, 77112);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i5, 77120);
 __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i5, 77128);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i5, 77136);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i5, 77144);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i5, 77152);
 __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i5, 77160);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i5, 77168);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i5, 77176);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i5, 77184);
 __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i5, 77192);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i5, 77200);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i5, 77216);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i5, 77232);
 __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i5, 77248);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_(i5, 77264);
 __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_();
 __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_(i5, 77272);
 STACKTOP = i6;
 return;
}

function _png_do_expand(i19, i16, i3) {
 i19 = i19 | 0;
 i16 = i16 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0;
 i11 = 0;
 i18 = HEAP32[i19 >> 2] | 0;
 i17 = i19 + 8 | 0;
 i1 = HEAP8[i17 >> 0] | 0;
 if (i1 << 24 >> 24) {
  if (!((i3 | 0) != 0 & i1 << 24 >> 24 == 2)) return;
  i15 = i19 + 9 | 0;
  switch (HEAP8[i15 >> 0] | 0) {
  case 8:
   {
    if (i18 | 0) {
     i9 = HEAP16[i3 + 2 >> 1] & 255;
     i10 = HEAP16[i3 + 4 >> 1] & 255;
     i8 = HEAP16[i3 + 6 >> 1] & 255;
     i6 = 0;
     i7 = i16 + (i18 << 2) | 0;
     i3 = i16 + (HEAP32[i19 + 4 >> 2] | 0) | 0;
     do {
      i2 = i3 + -1 | 0;
      i1 = i7 + -1 | 0;
      i4 = i3 + -2 | 0;
      i3 = i3 + -3 | 0;
      if ((HEAPU8[i3 >> 0] | 0) == (i9 | 0)) if ((HEAPU8[i4 >> 0] | 0) == (i10 | 0)) if ((HEAPU8[i2 >> 0] | 0) == (i8 | 0)) i5 = 0; else i11 = 37; else i11 = 37; else i11 = 37;
      if ((i11 | 0) == 37) {
       i11 = 0;
       i5 = -1;
      }
      HEAP8[i1 >> 0] = i5;
      HEAP8[i7 + -2 >> 0] = HEAP8[i2 >> 0] | 0;
      HEAP8[i7 + -3 >> 0] = HEAP8[i4 >> 0] | 0;
      i7 = i7 + -4 | 0;
      HEAP8[i7 >> 0] = HEAP8[i3 >> 0] | 0;
      i6 = i6 + 1 | 0;
     } while ((i6 | 0) != (i18 | 0));
    }
    break;
   }
  case 16:
   {
    i1 = HEAP16[i3 + 2 >> 1] | 0;
    i13 = (i1 & 65535) >>> 8 & 65535;
    i2 = HEAP16[i3 + 4 >> 1] | 0;
    i14 = (i2 & 65535) >>> 8 & 65535;
    i3 = HEAP16[i3 + 6 >> 1] | 0;
    i12 = (i3 & 65535) >>> 8 & 65535;
    if (i18 | 0) {
     i11 = i1 & 255;
     i10 = i2 & 255;
     i9 = i3 & 255;
     i7 = 0;
     i8 = i16 + (HEAP32[i19 + 4 >> 2] | 0) | 0;
     i4 = i16 + (i18 << 3) | 0;
     do {
      i2 = i8 + -1 | 0;
      i1 = i4 + -1 | 0;
      i3 = i8;
      i8 = i8 + -6 | 0;
      i6 = i3 + -5 | 0;
      if ((HEAPU8[i8 >> 0] | 0) == (i13 | 0)) if ((HEAPU8[i6 >> 0] | 0) == (i11 | 0)) if ((HEAPU8[i3 + -4 >> 0] | 0) == (i14 | 0)) if ((HEAPU8[i3 + -3 >> 0] | 0) == (i10 | 0)) if ((HEAPU8[i3 + -2 >> 0] | 0) == (i12 | 0)) i5 = ((HEAPU8[i2 >> 0] | 0) != (i9 | 0)) << 31 >> 31; else i5 = -1; else i5 = -1; else i5 = -1; else i5 = -1; else i5 = -1;
      HEAP8[i1 >> 0] = i5;
      HEAP8[i4 + -2 >> 0] = i5;
      HEAP8[i4 + -3 >> 0] = HEAP8[i2 >> 0] | 0;
      HEAP8[i4 + -4 >> 0] = HEAP8[i3 + -2 >> 0] | 0;
      HEAP8[i4 + -5 >> 0] = HEAP8[i3 + -3 >> 0] | 0;
      HEAP8[i4 + -6 >> 0] = HEAP8[i3 + -4 >> 0] | 0;
      HEAP8[i4 + -7 >> 0] = HEAP8[i6 >> 0] | 0;
      i4 = i4 + -8 | 0;
      HEAP8[i4 >> 0] = HEAP8[i8 >> 0] | 0;
      i7 = i7 + 1 | 0;
     } while ((i7 | 0) != (i18 | 0));
    }
    break;
   }
  default:
   {}
  }
  HEAP8[i17 >> 0] = 6;
  HEAP8[i19 + 10 >> 0] = 4;
  i1 = HEAPU8[i15 >> 0] << 2;
  HEAP8[i19 + 11 >> 0] = i1;
  i1 = i1 & 252;
  if (i1 >>> 0 > 7) i1 = Math_imul(i1 >>> 3, i18) | 0; else i1 = ((Math_imul(i1, i18) | 0) + 7 | 0) >>> 3;
  HEAP32[i19 + 4 >> 2] = i1;
  return;
 }
 i7 = (i3 | 0) != 0;
 if (i7) i1 = HEAPU16[i3 + 8 >> 1] | 0; else i1 = 0;
 i8 = i19 + 9 | 0;
 i2 = HEAP8[i8 >> 0] | 0;
 if ((i2 & 255) < 8) {
  switch (i2 << 24 >> 24) {
  case 1:
   {
    i1 = 0 - (i1 & 1) & 255;
    if (i18) {
     i2 = i16 + ((i18 + -1 | 0) >>> 3) | 0;
     i3 = i16 + i18 | 0;
     i4 = 0;
     i5 = i18 + 7 & 7 ^ 7;
     while (1) {
      i3 = i3 + -1 | 0;
      HEAP8[i3 >> 0] = ((1 << i5 & HEAPU8[i2 >> 0] | 0) != 0) << 31 >> 31;
      i6 = (i5 | 0) == 7;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i18 | 0)) break; else {
       i2 = i6 ? i2 + -1 | 0 : i2;
       i5 = i6 ? 0 : i5 + 1 | 0;
      }
     }
    }
    break;
   }
  case 2:
   {
    i1 = (i1 & 3) * 85 | 0;
    if (i18) {
     i2 = i16 + i18 | 0;
     i3 = 0;
     i4 = i16 + ((i18 + -1 | 0) >>> 2) | 0;
     i5 = (i18 << 1) + 6 & 6 ^ 6;
     while (1) {
      i2 = i2 + -1 | 0;
      i6 = (HEAPU8[i4 >> 0] | 0) >>> i5 & 3;
      HEAP8[i2 >> 0] = i6 << 2 | i6 | i6 << 4 | i6 << 6;
      i6 = (i5 | 0) == 6;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) == (i18 | 0)) break; else {
       i4 = i6 ? i4 + -1 | 0 : i4;
       i5 = i6 ? 0 : i5 + 2 | 0;
      }
     }
    }
    break;
   }
  case 4:
   {
    i1 = (i1 & 15) * 17 | 0;
    if (i18) {
     i3 = i16 + i18 | 0;
     i4 = 0;
     i5 = i16 + ((i18 + -1 | 0) >>> 1) | 0;
     i2 = i18 << 2 & 4;
     while (1) {
      i3 = i3 + -1 | 0;
      i15 = (HEAPU8[i5 >> 0] | 0) >>> i2 & 15;
      HEAP8[i3 >> 0] = i15 << 4 | i15;
      i2 = (i2 | 0) == 4;
      i4 = i4 + 1 | 0;
      if ((i4 | 0) == (i18 | 0)) break; else {
       i5 = i2 ? i5 + -1 | 0 : i5;
       i2 = i2 ? 0 : 4;
      }
     }
    }
    break;
   }
  default:
   {}
  }
  HEAP8[i8 >> 0] = 8;
  HEAP8[i19 + 11 >> 0] = 8;
  HEAP32[i19 + 4 >> 2] = i18;
  i2 = 8;
 }
 if (!i7) return;
 switch (i2 << 24 >> 24) {
 case 8:
  {
   if (i18 | 0) {
    i4 = i1 & 255;
    i2 = 0;
    i3 = i16 + (i18 << 1) | 0;
    i1 = i16 + i18 | 0;
    do {
     i1 = i1 + -1 | 0;
     i16 = i3;
     i3 = i3 + -2 | 0;
     HEAP8[i16 + -1 >> 0] = ((HEAP8[i1 >> 0] | 0) != i4 << 24 >> 24) << 31 >> 31;
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) != (i18 | 0));
   }
   break;
  }
 case 16:
  {
   i2 = HEAP32[i19 + 4 >> 2] | 0;
   if (i18 | 0) {
    i7 = i1 >>> 8 & 255;
    i6 = i1 & 255;
    i4 = 0;
    i5 = i16 + (i2 << 1) | 0;
    i2 = i16 + i2 | 0;
    do {
     i1 = i2 + -1 | 0;
     i2 = i2 + -2 | 0;
     if ((HEAP8[i2 >> 0] | 0) == i7 << 24 >> 24) i3 = ((HEAP8[i1 >> 0] | 0) != i6 << 24 >> 24) << 31 >> 31; else i3 = -1;
     HEAP8[i5 + -1 >> 0] = i3;
     HEAP8[i5 + -2 >> 0] = i3;
     HEAP8[i5 + -3 >> 0] = HEAP8[i1 >> 0] | 0;
     i5 = i5 + -4 | 0;
     HEAP8[i5 >> 0] = HEAP8[i2 >> 0] | 0;
     i4 = i4 + 1 | 0;
    } while ((i4 | 0) != (i18 | 0));
   }
   break;
  }
 default:
  {}
 }
 HEAP8[i17 >> 0] = 4;
 HEAP8[i19 + 10 >> 0] = 2;
 i1 = HEAPU8[i8 >> 0] << 1;
 HEAP8[i19 + 11 >> 0] = i1;
 i1 = i1 & 254;
 if (i1 >>> 0 > 7) i1 = Math_imul(i1 >>> 3, i18) | 0; else i1 = ((Math_imul(i1, i18) | 0) + 7 | 0) >>> 3;
 HEAP32[i19 + 4 >> 2] = i1;
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i14, i15, i16, i12, i7) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i1 = HEAP32[i14 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i14 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i14 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i15 >> 2] | 0;
 do if (!i2) i13 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i13 = 14;
   break;
  } else if (i3) {
   i13 = 17;
   break;
  } else {
   i13 = 16;
   break;
  }
 } while (0);
 if ((i13 | 0) == 14) if (i3) i13 = 16; else {
  i2 = 0;
  i13 = 17;
 }
 L22 : do if ((i13 | 0) == 16) {
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 6;
  i1 = 0;
 } else if ((i13 | 0) == 17) {
  i1 = HEAP32[i14 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  i3 = i1 & 255;
  if (i3 << 24 >> 24 > -1) {
   i11 = i12 + 8 | 0;
   if (HEAP16[(HEAP32[i11 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 2048) {
    i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, i3, 0) | 0) << 24 >> 24;
    i3 = HEAP32[i14 >> 2] | 0;
    i4 = i3 + 12 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 255](i3) | 0;
     i6 = i2;
     i4 = i2;
    } else {
     HEAP32[i4 >> 2] = i5 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 >> 0] | 0) | 0;
     i6 = i2;
     i4 = i2;
    }
    while (1) {
     i1 = i1 + -48 | 0;
     i10 = i7 + -1 | 0;
     i2 = HEAP32[i14 >> 2] | 0;
     do if (!i2) i5 = 1; else {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i14 >> 2] = 0;
       i5 = 1;
       break;
      } else {
       i5 = (HEAP32[i14 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!i4) {
      i9 = i6;
      i2 = 1;
      i8 = 0;
     } else {
      i2 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[i15 >> 2] = 0;
       i9 = 0;
       i2 = 1;
       i8 = 0;
       break;
      } else {
       i9 = i6;
       i2 = (i6 | 0) == 0;
       i8 = i6;
       break;
      }
     } while (0);
     i3 = HEAP32[i14 >> 2] | 0;
     if (!((i7 | 0) > 1 & (i5 ^ i2))) break;
     i2 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     i3 = i2 & 255;
     if (i3 << 24 >> 24 <= -1) break L22;
     if (!(HEAP16[(HEAP32[i11 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break L22;
     i1 = (i1 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 63](i12, i3, 0) | 0) << 24 >> 24) | 0;
     i2 = HEAP32[i14 >> 2] | 0;
     i3 = i2 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
      i7 = i10;
      i6 = i9;
      i4 = i8;
      continue;
     } else {
      HEAP32[i3 >> 2] = i4 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i4 >> 0] | 0) | 0;
      i7 = i10;
      i6 = i9;
      i4 = i8;
      continue;
     }
    }
    do if (!i3) i3 = 1; else {
     i2 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i14 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i14 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!i9) i13 = 62; else {
     i2 = HEAP32[i9 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 255](i9) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[i15 >> 2] = 0;
      i13 = 62;
      break;
     } else if (i3) break L22; else break;
    } while (0);
    if ((i13 | 0) == 62) if (!i3) break;
    HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 2;
    break;
   }
  }
  HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 4;
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function _SDL_CreateTexture(i11, i1, i15, i16, i17) {
 i11 = i11 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i18 = 0;
 i12 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i18 + 32 | 0;
 i5 = i18 + 24 | 0;
 i4 = i18 + 16 | 0;
 i3 = i18 + 8 | 0;
 i2 = i18;
 if (i11 | 0) if ((HEAP32[i11 >> 2] | 0) == 85556) {
  if (!i1) i13 = HEAP32[i11 + 116 >> 2] | 0; else i13 = i1;
  i14 = (i13 | 0) == 0 | (i13 & -268435456 | 0) == 268435456;
  i1 = i13 & 255;
  if ((i1 | 0) == 0 & i14) {
   _SDL_SetError(59819, i3) | 0;
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  if (i14) if (((i13 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
   _SDL_SetError(59842, i4) | 0;
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  if ((i16 | 0) < 1 | (i17 | 0) < 1) {
   _SDL_SetError(59880, i5) | 0;
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  i3 = HEAP32[i11 + 180 >> 2] | 0;
  i2 = HEAP32[i11 + 184 >> 2] | 0;
  if (!((i3 | 0) != 0 & (i3 | 0) < (i16 | 0))) if (!((i2 | 0) != 0 & (i2 | 0) < (i17 | 0))) {
   i10 = _SDL_calloc(1, 80) | 0;
   if (!i10) {
    _SDL_Error(0) | 0;
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   HEAP32[i10 >> 2] = 85557;
   i7 = i10 + 4 | 0;
   HEAP32[i7 >> 2] = i13;
   HEAP32[i10 + 8 >> 2] = i15;
   HEAP32[i10 + 12 >> 2] = i16;
   HEAP32[i10 + 16 >> 2] = i17;
   HEAP32[i10 + 28 >> 2] = -1;
   HEAP32[i10 + 32 >> 2] = i11;
   i8 = i11 + 304 | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   i9 = i10 + 76 | 0;
   HEAP32[i9 >> 2] = i2;
   if (i2 | 0) HEAP32[i2 + 72 >> 2] = i10;
   HEAP32[i8 >> 2] = i10;
   i6 = HEAP32[i11 + 112 >> 2] | 0;
   i3 = (i6 | 0) == 0;
   L30 : do if (!i3) {
    i2 = 0;
    while (1) {
     if ((HEAP32[i11 + 116 + (i2 << 2) >> 2] | 0) == (i13 | 0)) break;
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 >= i6 >>> 0) break L30;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[i11 + 12 >> 2] & 63](i11, i10) | 0) >= 0) {
     i17 = i10;
     STACKTOP = i18;
     return i17 | 0;
    }
    _SDL_DestroyTexture(i10);
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   } while (0);
   L40 : do if (i14) {
    i2 = i13 >>> 24 & 15;
    if ((i2 + -4 | 0) >>> 0 < 3) switch (i13 >>> 20 & 15) {
    case 8:
    case 7:
    case 4:
    case 3:
     {
      i5 = 1;
      break;
     }
    default:
     i12 = 31;
    } else i12 = 31;
    L44 : do if ((i12 | 0) == 31) if ((i2 + -7 | 0) >>> 0 < 5) {
     i2 = i13 >>> 20;
     switch (i2 & 15) {
     case 6:
     case 2:
     case 3:
      {
       i5 = 1;
       break L44;
      }
     default:
      {}
     }
     i5 = (i2 & 15 | 0) == 5 & 1;
    } else i5 = 0; while (0);
    if (i3) i12 = 43; else {
     i4 = 0;
     while (1) {
      i2 = HEAP32[i11 + 116 + (i4 << 2) >> 2] | 0;
      if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) {
       i3 = i2 >>> 24 & 15;
       if ((i3 + -4 | 0) >>> 0 < 3) switch (i2 >>> 20 & 15) {
       case 8:
       case 7:
       case 4:
       case 3:
        {
         i3 = 1;
         break;
        }
       default:
        i12 = 38;
       } else i12 = 38;
       L55 : do if ((i12 | 0) == 38) {
        i12 = 0;
        if ((i3 + -7 | 0) >>> 0 >= 5) {
         i3 = 0;
         break;
        }
        switch (i2 >>> 20 & 15) {
        case 5:
        case 6:
        case 2:
        case 3:
         {
          i3 = 1;
          break L55;
         }
        default:
         {}
        }
        i3 = 0;
       } while (0);
       if ((i5 | 0) == (i3 | 0)) break L40;
      }
      i4 = i4 + 1 | 0;
      if (i4 >>> 0 >= i6 >>> 0) {
       i12 = 43;
       break;
      }
     }
    }
   } else if (i3) i12 = 43; else {
    i2 = 0;
    while (1) {
     if ((HEAP32[i11 + 116 + (i2 << 2) >> 2] | 0) == (i13 | 0)) {
      i2 = i13;
      break L40;
     }
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 >= i6 >>> 0) {
      i12 = 43;
      break;
     }
    }
   } while (0);
   if ((i12 | 0) == 43) i2 = HEAP32[i11 + 116 >> 2] | 0;
   i4 = _SDL_CreateTexture(i11, i2, i15, i16, i17) | 0;
   HEAP32[i10 + 36 >> 2] = i4;
   if (!i4) {
    _SDL_DestroyTexture(i10);
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   i2 = HEAP32[i9 >> 2] | 0;
   HEAP32[i4 + 76 >> 2] = i2;
   if (i2 | 0) HEAP32[i2 + 72 >> 2] = i4;
   i2 = i4 + 72 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   HEAP32[i10 + 72 >> 2] = i3;
   if (i3 | 0) HEAP32[i3 + 76 >> 2] = i10;
   HEAP32[i2 >> 2] = i10;
   HEAP32[i9 >> 2] = i4;
   HEAP32[i8 >> 2] = i10;
   i12 = HEAP32[i7 >> 2] | 0;
   if (!((i12 | 0) == 0 | (i12 & -268435456 | 0) == 268435456)) {
    i17 = _SDL_SW_CreateYUVTexture(i13, i16, i17) | 0;
    HEAP32[i10 + 40 >> 2] = i17;
    if (i17 | 0) {
     i17 = i10;
     STACKTOP = i18;
     return i17 | 0;
    }
    _SDL_DestroyTexture(i10);
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   if ((i15 | 0) != 1) {
    i17 = i10;
    STACKTOP = i18;
    return i17 | 0;
   }
   L88 : do if (!i14) {
    if ((i13 | 0) < 1498831189) switch (i13 | 0) {
    case 844715353:
     {
      i1 = 2;
      break L88;
     }
    default:
     {}
    } else switch (i13 | 0) {
    case 1498831189:
     {
      i1 = 2;
      break L88;
     }
    default:
     {}
    }
    i1 = (i13 | 0) == 1431918169 ? 2 : 1;
   } while (0);
   i16 = (Math_imul(i1, i16) | 0) + 3 & -4;
   HEAP32[i10 + 48 >> 2] = i16;
   i17 = _SDL_calloc(1, Math_imul(i16, i17) | 0) | 0;
   HEAP32[i10 + 44 >> 2] = i17;
   if (i17 | 0) {
    i17 = i10;
    STACKTOP = i18;
    return i17 | 0;
   }
   _SDL_DestroyTexture(i10);
   i17 = 0;
   STACKTOP = i18;
   return i17 | 0;
  }
  HEAP32[i6 >> 2] = i3;
  HEAP32[i6 + 4 >> 2] = i2;
  _SDL_SetError(59910, i6) | 0;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 _SDL_SetError(41341, i2) | 0;
 i17 = 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _SDL_DrawLine4(i16, i18, i2, i4, i9, i19, i17) {
 i16 = i16 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i19 = i19 | 0;
 i17 = i17 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i20 + 3 | 0;
 i6 = i20 + 2 | 0;
 i7 = i20 + 1 | 0;
 i3 = i20;
 if ((i9 | 0) == (i2 | 0)) {
  i1 = (HEAP32[i16 + 20 >> 2] | 0) + ((Math_imul((HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i16 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i9) | 0) << 2) | 0;
  if ((i4 | 0) < (i18 | 0)) {
   i1 = i1 + (i4 << 2) | 0;
   i3 = (i17 | 0) != 0;
   i1 = i3 ? i1 : i1 + 4 | 0;
   i4 = 0 - i4 | 0;
   i2 = i18;
  } else {
   i1 = i1 + (i18 << 2) | 0;
   i3 = (i17 | 0) != 0;
   i2 = 0 - i18 | 0;
  }
  i2 = i4 + i2 + (i3 & 1) | 0;
  if (!i2) {
   STACKTOP = i20;
   return;
  }
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i19;
   if (!i2) break; else i1 = i1 + 4 | 0;
  }
  STACKTOP = i20;
  return;
 }
 if ((i4 | 0) == (i18 | 0)) {
  i5 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i16 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  i1 = HEAP32[i16 + 20 >> 2] | 0;
  if ((i9 | 0) < (i2 | 0)) {
   i1 = i1 + ((Math_imul(i5, i9) | 0) << 2) + (i4 << 2) | 0;
   i3 = (i17 | 0) != 0;
   i1 = i3 ? i1 : i1 + (i5 << 2) | 0;
   i4 = 0 - i9 | 0;
  } else {
   i1 = i1 + ((Math_imul(i5, i2) | 0) << 2) + (i4 << 2) | 0;
   i4 = i9;
   i3 = (i17 | 0) != 0;
   i2 = 0 - i2 | 0;
  }
  i2 = i4 + i2 + (i3 & 1) | 0;
  if (!i2) {
   STACKTOP = i20;
   return;
  }
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP32[i1 >> 2] = i19;
   if (!i2) break; else i1 = i1 + (i5 << 2) | 0;
  }
  STACKTOP = i20;
  return;
 }
 i15 = i18 - i4 | 0;
 i1 = i2 - i9 | 0;
 if ((((i15 | 0) < 0 ? 0 - i15 | 0 : i15) | 0) == (((i1 | 0) < 0 ? 0 - i1 | 0 : i1) | 0)) {
  i5 = (HEAP32[i16 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i16 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  i3 = HEAP32[i16 + 20 >> 2] | 0;
  if ((i9 | 0) < (i2 | 0)) {
   i2 = i3 + ((Math_imul(i5, i9) | 0) << 2) + (i4 << 2) | 0;
   i3 = i5 + ((i4 | 0) > (i18 | 0) ? -1 : 1) | 0;
   i2 = (i17 | 0) == 0 ? i2 + (i3 << 2) | 0 : i2;
  } else {
   i3 = i3 + ((Math_imul(i5, i2) | 0) << 2) + (i18 << 2) | 0;
   i1 = i9 - i2 | 0;
   i2 = i3;
   i3 = i5 + ((i4 | 0) < (i18 | 0) ? -1 : 1) | 0;
  }
  i1 = i1 + ((i17 | 0) != 0 & 1) | 0;
  if (!i1) {
   STACKTOP = i20;
   return;
  }
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i2 >> 2] = i19;
   if (!i1) break; else i2 = i2 + (i3 << 2) | 0;
  }
  STACKTOP = i20;
  return;
 }
 i8 = HEAP32[i16 + 4 >> 2] | 0;
 _SDL_GetRGBA(i19, i8, i5, i6, i7, i3);
 do if ((HEAP32[i8 + 12 >> 2] | 0) == 16711680) {
  i6 = i4 - i18 | 0;
  i6 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
  i7 = i9 - i2 | 0;
  i7 = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
  i1 = (i6 | 0) < (i7 | 0);
  if (!(HEAP32[i8 + 24 >> 2] | 0)) {
   if (i1) {
    i14 = i6 << 1;
    i5 = 1;
    i3 = 0;
    i1 = i6 - i7 | 0;
    i15 = i14;
    i14 = i14 - i7 | 0;
    i6 = i7;
   } else {
    i14 = i7 << 1;
    i5 = 0;
    i3 = 1;
    i1 = i7 - i6 | 0;
    i15 = i14;
    i14 = i14 - i6 | 0;
   }
   i13 = i1 << 1;
   i12 = (i4 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i3 | 0 : i3;
   i12 = i12 ? -1 : 1;
   i9 = (i9 | 0) < (i2 | 0);
   i10 = i9 ? 0 - i5 | 0 : i5;
   i9 = i9 ? -1 : 1;
   i7 = i6 + ((i17 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) break;
   i8 = HEAP32[i16 + 20 >> 2] | 0;
   i6 = i16 + 16 | 0;
   i4 = i18;
   i5 = 0;
   i1 = i14;
   while (1) {
    HEAP32[i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i4 << 2) >> 2] = i19;
    i3 = (i1 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i7 | 0)) break; else {
     i2 = i2 + (i3 ? i10 : i9) | 0;
     i4 = (i3 ? i11 : i12) + i4 | 0;
     i1 = (i3 ? i15 : i13) + i1 | 0;
    }
   }
  } else {
   if (i1) {
    i14 = i6 << 1;
    i5 = 1;
    i3 = 0;
    i1 = i6 - i7 | 0;
    i15 = i14;
    i14 = i14 - i7 | 0;
    i6 = i7;
   } else {
    i14 = i7 << 1;
    i5 = 0;
    i3 = 1;
    i1 = i7 - i6 | 0;
    i15 = i14;
    i14 = i14 - i6 | 0;
   }
   i13 = i1 << 1;
   i12 = (i4 | 0) < (i18 | 0);
   i11 = i12 ? 0 - i3 | 0 : i3;
   i12 = i12 ? -1 : 1;
   i9 = (i9 | 0) < (i2 | 0);
   i10 = i9 ? 0 - i5 | 0 : i5;
   i9 = i9 ? -1 : 1;
   i7 = i6 + ((i17 | 0) != 0 & 1) | 0;
   if ((i7 | 0) <= 0) break;
   i8 = HEAP32[i16 + 20 >> 2] | 0;
   i6 = i16 + 16 | 0;
   i4 = i18;
   i5 = 0;
   i1 = i14;
   while (1) {
    HEAP32[i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i4 << 2) >> 2] = i19;
    i3 = (i1 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i7 | 0)) break; else {
     i2 = i2 + (i3 ? i10 : i9) | 0;
     i4 = (i3 ? i11 : i12) + i4 | 0;
     i1 = (i3 ? i15 : i13) + i1 | 0;
    }
   }
  }
 } else {
  i1 = i4 - i18 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i3 = i9 - i2 | 0;
  i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
  if ((i1 | 0) < (i3 | 0)) {
   i14 = i1 << 1;
   i7 = 1;
   i6 = 0;
   i5 = i1 - i3 | 0;
   i15 = i14;
   i14 = i14 - i3 | 0;
   i1 = i3;
  } else {
   i14 = i3 << 1;
   i7 = 0;
   i6 = 1;
   i5 = i3 - i1 | 0;
   i15 = i14;
   i14 = i14 - i1 | 0;
  }
  i13 = i5 << 1;
  i12 = (i4 | 0) < (i18 | 0);
  i11 = i12 ? 0 - i6 | 0 : i6;
  i12 = i12 ? -1 : 1;
  i9 = (i9 | 0) < (i2 | 0);
  i10 = i9 ? 0 - i7 | 0 : i7;
  i9 = i9 ? -1 : 1;
  i7 = i1 + ((i17 | 0) != 0 & 1) | 0;
  if ((i7 | 0) > 0) {
   i8 = HEAP32[i16 + 20 >> 2] | 0;
   i6 = i16 + 16 | 0;
   i4 = i18;
   i5 = 0;
   i1 = i14;
   while (1) {
    HEAP32[i8 + (Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + (i4 << 2) >> 2] = i19;
    i3 = (i1 | 0) < 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) >= (i7 | 0)) break; else {
     i2 = i2 + (i3 ? i10 : i9) | 0;
     i4 = (i3 ? i11 : i12) + i4 | 0;
     i1 = (i3 ? i15 : i13) + i1 | 0;
    }
   }
  }
 } while (0);
 STACKTOP = i20;
 return;
}

function _SDL_ConvertPixels(i13, i20, i18, i1, i19, i9, i2, i21) {
 i13 = i13 | 0;
 i20 = i20 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i19 = i19 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i22 = 0;
 i17 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(448);
 i10 = i22 + 32 | 0;
 i6 = i22 + 24 | 0;
 i5 = i22 + 16 | 0;
 i4 = i22 + 8 | 0;
 i3 = i22;
 i15 = i22 + 380 | 0;
 i16 = i22 + 320 | 0;
 i7 = i22 + 276 | 0;
 i11 = i22 + 232 | 0;
 i8 = i22 + 144 | 0;
 i12 = i22 + 56 | 0;
 i14 = i22 + 40 | 0;
 if (!i2) {
  HEAP32[i3 >> 2] = 40432;
  i21 = _SDL_SetError(59509, i3) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 if (!i21) {
  HEAP32[i4 >> 2] = 40436;
  i21 = _SDL_SetError(59509, i4) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 i3 = (i18 | 0) == 0 | (i18 & -268435456 | 0) == 268435456;
 if ((i18 | 0) != (i9 | 0)) {
  if (i3) if (((i18 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
   _SDL_SetError(40474, i6) | 0;
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  if ((_SDL_InitFormat(i7, i18) | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  _SDL_memset(i15, 0, 60) | 0;
  HEAP32[i15 >> 2] = 1;
  i5 = i15 + 4 | 0;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i15 + 20 >> 2] = i1;
  HEAP32[i15 + 8 >> 2] = i13;
  HEAP32[i15 + 12 >> 2] = i20;
  HEAP32[i15 + 16 >> 2] = i19;
  _SDL_memset(i8, 0, 88) | 0;
  i4 = i15 + 52 | 0;
  HEAP32[i8 + 76 >> 2] = -1;
  HEAP32[i4 >> 2] = i8;
  HEAP32[i15 + 56 >> 2] = 1;
  if ((i9 | 0) == 0 | (i9 & -268435456 | 0) == 268435456) if (((i9 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
   _SDL_SetError(40474, i10) | 0;
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  if ((_SDL_InitFormat(i11, i9) | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  }
  _SDL_memset(i16, 0, 60) | 0;
  HEAP32[i16 >> 2] = 1;
  i3 = i16 + 4 | 0;
  HEAP32[i3 >> 2] = i11;
  HEAP32[i16 + 20 >> 2] = i2;
  HEAP32[i16 + 8 >> 2] = i13;
  HEAP32[i16 + 12 >> 2] = i20;
  HEAP32[i16 + 16 >> 2] = i21;
  _SDL_memset(i12, 0, 88) | 0;
  HEAP32[i12 + 76 >> 2] = -1;
  HEAP32[i16 + 52 >> 2] = i12;
  HEAP32[i16 + 56 >> 2] = 1;
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = i13;
  HEAP32[i14 + 12 >> 2] = i20;
  i1 = HEAP32[i4 >> 2] | 0;
  do if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) {
   i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] | 0;
   if (i2 | 0) if ((HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
    i17 = 35;
    break;
   }
   i2 = HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] | 0;
   if (i2) if ((HEAP32[i1 + 84 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) i17 = 35;
  } else i17 = 35; while (0);
  do if ((i17 | 0) == 35) if ((_SDL_MapSurface(i15, i16) | 0) < 0) {
   i21 = -1;
   STACKTOP = i22;
   return i21 | 0;
  } else {
   i1 = HEAP32[i4 >> 2] | 0;
   break;
  } while (0);
  i21 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i15, i14, i16, i14) | 0;
  STACKTOP = i22;
  return i21 | 0;
 }
 L41 : do if (i3) i3 = i18 & 255; else {
  L44 : do if ((i18 | 0) < 844715353) if ((i18 | 0) < 842094158) switch (i18 | 0) {
  case 825382478:
   {
    i17 = 8;
    break L44;
   }
  default:
   break L44;
  } else switch (i18 | 0) {
  case 842094158:
  case 842094169:
   {
    i17 = 8;
    break L44;
   }
  default:
   break L44;
  } else if ((i18 | 0) < 1448433993) if ((i18 | 0) < 1431918169) switch (i18 | 0) {
  case 844715353:
   {
    i3 = 2;
    break L41;
   }
  default:
   break L44;
  } else switch (i18 | 0) {
  case 1431918169:
   {
    i3 = 2;
    break L41;
   }
  default:
   break L44;
  } else if ((i18 | 0) < 1498831189) switch (i18 | 0) {
  case 1448433993:
   {
    i17 = 8;
    break L44;
   }
  default:
   break L44;
  } else switch (i18 | 0) {
  case 1498831189:
   {
    i3 = 2;
    break L41;
   }
  default:
   break L44;
  } while (0);
  if ((i17 | 0) == 8) {
   i3 = 1;
   break;
  }
  i21 = _SDL_SetError(40446, i5) | 0;
  STACKTOP = i22;
  return i21 | 0;
 } while (0);
 i8 = Math_imul(i3, i13) | 0;
 if (i20) {
  i7 = Math_imul(i19, i20) | 0;
  i6 = Math_imul(i21, i20) | 0;
  i3 = i20;
  i4 = i2;
  i5 = i1;
  while (1) {
   i3 = i3 + -1 | 0;
   _SDL_memcpy(i4, i5, i8) | 0;
   if (!i3) break; else {
    i4 = i4 + i21 | 0;
    i5 = i5 + i19 | 0;
   }
  }
  i2 = i2 + i6 | 0;
  i1 = i1 + i7 | 0;
 }
 if ((i18 | 0) < 842094169) {
  L72 : do if ((i18 | 0) < 842094158) {
   switch (i18 | 0) {
   case 825382478:
    break L72;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } else {
   switch (i18 | 0) {
   case 842094158:
    break L72;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } while (0);
  if ((i20 + 1 | 0) >>> 0 < 3) {
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  i3 = (i20 | 0) / 2 | 0;
  while (1) {
   i3 = i3 + -1 | 0;
   _SDL_memcpy(i2, i1, i8) | 0;
   if (!i3) {
    i1 = 0;
    break;
   } else {
    i2 = i2 + i21 | 0;
    i1 = i1 + i19 | 0;
   }
  }
  STACKTOP = i22;
  return i1 | 0;
 } else {
  L85 : do if ((i18 | 0) < 1448433993) {
   switch (i18 | 0) {
   case 842094169:
    break L85;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } else {
   switch (i18 | 0) {
   case 1448433993:
    break L85;
   default:
    i1 = 0;
   }
   STACKTOP = i22;
   return i1 | 0;
  } while (0);
  i6 = (i8 | 0) / 2 | 0;
  i5 = (i19 | 0) / 2 | 0;
  i4 = (i21 | 0) / 2 | 0;
  if ((i20 + 1 | 0) >>> 0 < 3) {
   i21 = 0;
   STACKTOP = i22;
   return i21 | 0;
  }
  i3 = i2;
  i2 = i1;
  i1 = ((i20 | 0) / 2 | 0) << 1;
  while (1) {
   i1 = i1 + -1 | 0;
   _SDL_memcpy(i3, i2, i6) | 0;
   if (!i1) {
    i1 = 0;
    break;
   } else {
    i3 = i3 + i4 | 0;
    i2 = i2 + i5 | 0;
   }
  }
  STACKTOP = i22;
  return i1 | 0;
 }
 return 0;
}

function _SDL_MapSurface(i26, i24) {
 i26 = i26 | 0;
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 i3 = i28;
 i5 = i28 + 16 | 0;
 i2 = i26 + 52 | 0;
 i27 = HEAP32[i2 >> 2] | 0;
 if (HEAP32[i26 >> 2] & 2 | 0) _SDL_UnRLESurface(i26, 1);
 if (i27 | 0) {
  i1 = HEAP32[i27 >> 2] | 0;
  if (i1 | 0) {
   i23 = i1 + 56 | 0;
   i25 = HEAP32[i23 >> 2] | 0;
   HEAP32[i23 >> 2] = i25 + -1;
   if ((i25 | 0) < 2) _SDL_FreeSurface(i1);
  }
  HEAP32[i27 >> 2] = 0;
  HEAP32[i27 + 84 >> 2] = 0;
  HEAP32[i27 + 80 >> 2] = 0;
  i25 = i27 + 64 | 0;
  _SDL_free(HEAP32[i25 >> 2] | 0);
  HEAP32[i25 >> 2] = 0;
 }
 i4 = i27 + 4 | 0;
 HEAP32[i4 >> 2] = 0;
 i25 = HEAP32[i26 + 4 >> 2] | 0;
 i23 = HEAP32[i24 + 4 >> 2] | 0;
 i1 = HEAP32[i25 >> 2] | 0;
 do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) if (((i1 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
  i1 = HEAP32[i23 >> 2] | 0;
  if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) if (((i1 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
   i22 = _Map1to1(HEAP32[i25 + 4 >> 2] | 0, HEAP32[i23 + 4 >> 2] | 0, i4) | 0;
   HEAP32[i27 + 64 >> 2] = i22;
   if ((i22 | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 0) {
    i27 = -1;
    STACKTOP = i28;
    return i27 | 0;
   }
   if ((HEAP8[i25 + 8 >> 0] | 0) == (HEAP8[i23 + 8 >> 0] | 0)) {
    i1 = 35;
    break;
   }
   HEAP32[i4 >> 2] = 0;
   i1 = 35;
   break;
  }
  i4 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP8[i4 + 76 >> 0] | 0;
  i2 = HEAP8[i4 + 77 >> 0] | 0;
  i3 = HEAP8[i4 + 78 >> 0] | 0;
  i4 = HEAP8[i4 + 79 >> 0] | 0;
  i19 = HEAP32[i25 + 4 >> 2] | 0;
  i20 = i23 + 9 | 0;
  i18 = HEAP8[i20 >> 0] | 0;
  i18 = i18 << 24 >> 24 == 3 ? 4 : i18 & 255;
  i21 = _SDL_malloc(Math_imul(i18, HEAP32[i19 >> 2] | 0) | 0) | 0;
  if (!i21) {
   _SDL_Error(0) | 0;
   HEAP32[i27 + 64 >> 2] = 0;
   i27 = -1;
   STACKTOP = i28;
   return i27 | 0;
  }
  if ((HEAP32[i19 >> 2] | 0) <= 0) {
   HEAP32[i27 + 64 >> 2] = i21;
   i1 = 35;
   break;
  }
  i22 = i19 + 4 | 0;
  i17 = i1 & 255;
  i16 = i2 & 255;
  i15 = i3 & 255;
  i3 = i4 & 255;
  i4 = i23 + 28 | 0;
  i5 = i23 + 32 | 0;
  i6 = i23 + 29 | 0;
  i7 = i23 + 33 | 0;
  i8 = i23 + 30 | 0;
  i9 = i23 + 34 | 0;
  i10 = i23 + 31 | 0;
  i11 = i23 + 35 | 0;
  i1 = 0;
  do {
   i2 = HEAP32[i22 >> 2] | 0;
   i2 = i2 + (i1 << 2) | 0;
   i12 = ((Math_imul(HEAPU8[i2 >> 0] | 0, i17) | 0) >>> 0) / 255 | 0;
   i13 = ((Math_imul(HEAPU8[i2 + 1 >> 0] | 0, i16) | 0) >>> 0) / 255 | 0;
   i14 = ((Math_imul(HEAPU8[i2 + 2 >> 0] | 0, i15) | 0) >>> 0) / 255 | 0;
   i2 = ((Math_imul(HEAPU8[i2 + 3 >> 0] | 0, i3) | 0) >>> 0) / 255 | 0;
   switch (HEAP8[i20 >> 0] | 0) {
   case 1:
    {
     HEAP8[i21 + (Math_imul(i1, i18) | 0) >> 0] = (i13 & 255) >>> (HEAPU8[i6 >> 0] | 0) << HEAPU8[i7 >> 0] | (i12 & 255) >>> (HEAPU8[i4 >> 0] | 0) << HEAPU8[i5 >> 0] | (i14 & 255) >>> (HEAPU8[i8 >> 0] | 0) << HEAPU8[i9 >> 0] | (i2 & 255) >>> (HEAPU8[i10 >> 0] | 0) << HEAPU8[i11 >> 0];
     break;
    }
   case 2:
    {
     HEAP16[i21 + (Math_imul(i1, i18) | 0) >> 1] = (i13 & 255) >>> (HEAPU8[i6 >> 0] | 0) << HEAPU8[i7 >> 0] | (i12 & 255) >>> (HEAPU8[i4 >> 0] | 0) << HEAPU8[i5 >> 0] | (i14 & 255) >>> (HEAPU8[i8 >> 0] | 0) << HEAPU8[i9 >> 0] | (i2 & 255) >>> (HEAPU8[i10 >> 0] | 0) << HEAPU8[i11 >> 0];
     break;
    }
   case 3:
    {
     i2 = i21 + (Math_imul(i1, i18) | 0) | 0;
     HEAP8[i2 + ((HEAPU8[i5 >> 0] | 0) >>> 3 & 255) >> 0] = i12;
     HEAP8[i2 + ((HEAPU8[i7 >> 0] | 0) >>> 3 & 255) >> 0] = i13;
     HEAP8[i2 + ((HEAPU8[i9 >> 0] | 0) >>> 3 & 255) >> 0] = i14;
     break;
    }
   case 4:
    {
     HEAP32[i21 + (Math_imul(i1, i18) | 0) >> 2] = (i13 & 255) >>> (HEAPU8[i6 >> 0] | 0) << HEAPU8[i7 >> 0] | (i12 & 255) >>> (HEAPU8[i4 >> 0] | 0) << HEAPU8[i5 >> 0] | (i14 & 255) >>> (HEAPU8[i8 >> 0] | 0) << HEAPU8[i9 >> 0] | (i2 & 255) >>> (HEAPU8[i10 >> 0] | 0) << HEAPU8[i11 >> 0];
     break;
    }
   default:
    {}
   }
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i19 >> 2] | 0));
  HEAP32[i27 + 64 >> 2] = i21;
  i1 = 36;
 } else i1 = 27; else i1 = 27; while (0);
 do if ((i1 | 0) == 27) {
  i1 = HEAP32[i23 >> 2] | 0;
  if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) if (((i1 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
   i2 = HEAP32[i23 + 4 >> 2] | 0;
   HEAP32[i3 >> 2] = 256;
   i1 = 0;
   do {
    i21 = i1 & 224;
    i22 = i5 + (i1 << 2) | 0;
    HEAP8[i22 >> 0] = i21 >>> 6 | i21 | i21 >>> 3;
    i21 = i1 << 3 & 224;
    HEAP8[i22 + 1 >> 0] = i21 >>> 6 | i21 | i21 >>> 3;
    i21 = i1 & 3;
    i21 = i21 << 2 | i21;
    HEAP8[i22 + 2 >> 0] = i21 << 4 | i21;
    HEAP8[i22 + 3 >> 0] = -1;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 256);
   HEAP32[i3 + 4 >> 2] = i5;
   i22 = _Map1to1(i3, i2, i4) | 0;
   HEAP32[i27 + 64 >> 2] = i22;
   if ((i22 | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 0) {
    i27 = -1;
    STACKTOP = i28;
    return i27 | 0;
   } else {
    HEAP32[i4 >> 2] = 0;
    i1 = 36;
    break;
   }
  }
  if ((i25 | 0) == (i23 | 0)) {
   HEAP32[i4 >> 2] = 1;
   i1 = 35;
  } else i1 = 35;
 } while (0);
 if ((i1 | 0) == 35) {
  HEAP32[i27 >> 2] = i24;
  i1 = 37;
 } else if ((i1 | 0) == 36) {
  HEAP32[i27 >> 2] = i24;
  if (i24 | 0) i1 = 37;
 }
 if ((i1 | 0) == 37) {
  i24 = i24 + 56 | 0;
  HEAP32[i24 >> 2] = (HEAP32[i24 >> 2] | 0) + 1;
 }
 i1 = HEAP32[i23 + 4 >> 2] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i27 + 80 >> 2] = i1;
 i1 = HEAP32[i25 + 4 >> 2] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 8 >> 2] | 0;
 HEAP32[i27 + 84 >> 2] = i1;
 i27 = _SDL_CalculateBlit(i26) | 0;
 STACKTOP = i28;
 return i27 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 i12 = i24 + 208 | 0;
 i13 = i24 + 200 | 0;
 i14 = i24 + 196 | 0;
 i22 = i24 + 184 | 0;
 i21 = i24 + 172 | 0;
 i16 = i24 + 168 | 0;
 i17 = i24 + 8 | 0;
 i18 = i24 + 4 | 0;
 i19 = i24;
 i15 = i24 + 337 | 0;
 i11 = i24 + 336 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i21 + 11 | 0;
 i10 = i21 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i7 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i15, i11, i2, i16, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF32[i20 >> 2] = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27));
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 47;
   break;
  } else if (i2) break; else {
   i23 = 49;
   break;
  }
 } while (0);
 if ((i23 | 0) == 47) if (i2) i23 = 49;
 if ((i23 | 0) == 49) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i12 = i24 + 200 | 0;
 i13 = i24 + 199 | 0;
 i14 = i24 + 198 | 0;
 i22 = i24 + 184 | 0;
 i21 = i24 + 172 | 0;
 i16 = i24 + 168 | 0;
 i17 = i24 + 8 | 0;
 i18 = i24 + 4 | 0;
 i19 = i24;
 i15 = i24 + 197 | 0;
 i11 = i24 + 196 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i21 + 11 | 0;
 i10 = i21 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i7 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1 & 255, i15, i11, i2, i16, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF32[i20 >> 2] = Math_fround(__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27));
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 47;
   break;
  } else if (i2) break; else {
   i23 = 49;
   break;
  }
 } while (0);
 if ((i23 | 0) == 47) if (i2) i23 = 49;
 if ((i23 | 0) == 49) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 i12 = i24 + 208 | 0;
 i13 = i24 + 200 | 0;
 i14 = i24 + 196 | 0;
 i22 = i24 + 184 | 0;
 i21 = i24 + 172 | 0;
 i16 = i24 + 168 | 0;
 i17 = i24 + 8 | 0;
 i18 = i24 + 4 | 0;
 i19 = i24;
 i15 = i24 + 337 | 0;
 i11 = i24 + 336 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i21 + 11 | 0;
 i10 = i21 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i7 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i15, i11, i2, i16, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 47;
   break;
  } else if (i2) break; else {
   i23 = 49;
   break;
  }
 } while (0);
 if ((i23 | 0) == 47) if (i2) i23 = 49;
 if ((i23 | 0) == 49) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(352);
 i12 = i24 + 208 | 0;
 i13 = i24 + 200 | 0;
 i14 = i24 + 196 | 0;
 i22 = i24 + 184 | 0;
 i21 = i24 + 172 | 0;
 i16 = i24 + 168 | 0;
 i17 = i24 + 8 | 0;
 i18 = i24 + 4 | 0;
 i19 = i24;
 i15 = i24 + 337 | 0;
 i11 = i24 + 336 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i21 + 11 | 0;
 i10 = i21 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i7 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i15, i11, i2, i16, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 47;
   break;
  } else if (i2) break; else {
   i23 = 49;
   break;
  }
 } while (0);
 if ((i23 | 0) == 47) if (i2) i23 = 49;
 if ((i23 | 0) == 49) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i12 = i24 + 200 | 0;
 i13 = i24 + 199 | 0;
 i14 = i24 + 198 | 0;
 i22 = i24 + 184 | 0;
 i21 = i24 + 172 | 0;
 i16 = i24 + 168 | 0;
 i17 = i24 + 8 | 0;
 i18 = i24 + 4 | 0;
 i19 = i24;
 i15 = i24 + 197 | 0;
 i11 = i24 + 196 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i21 + 11 | 0;
 i10 = i21 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i7 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1 & 255, i15, i11, i2, i16, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 47;
   break;
  } else if (i2) break; else {
   i23 = 49;
   break;
  }
 } while (0);
 if ((i23 | 0) == 47) if (i2) i23 = 49;
 if ((i23 | 0) == 49) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i25, i26, i2, i27, i20) {
 i1 = i1 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i2 = i2 | 0;
 i27 = i27 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i12 = i24 + 200 | 0;
 i13 = i24 + 199 | 0;
 i14 = i24 + 198 | 0;
 i22 = i24 + 184 | 0;
 i21 = i24 + 172 | 0;
 i16 = i24 + 168 | 0;
 i17 = i24 + 8 | 0;
 i18 = i24 + 4 | 0;
 i19 = i24;
 i15 = i24 + 197 | 0;
 i11 = i24 + 196 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i22, i2, i12, i13, i14);
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i21 + 11 | 0;
 i10 = i21 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
 HEAP32[i16 >> 2] = i2;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i19 >> 2] = 0;
 HEAP8[i15 >> 0] = 1;
 HEAP8[i11 >> 0] = 69;
 i7 = i21 + 4 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i25 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i26 >> 2] | 0;
  do if (!i3) i23 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i26 >> 2] = 0;
    i23 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i23 | 0) == 19) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i16 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i21, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i21 >> 2] | 0 : i21;
   HEAP32[i16 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i1 & 255, i15, i11, i2, i16, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i17, i18, i19, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i14 = HEAP8[i22 + 11 >> 0] | 0;
 if (!((HEAP8[i15 >> 0] | 0) == 0 ? 1 : ((i14 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i14 & 255) | 0) == 0)) {
  i1 = HEAP32[i18 >> 2] | 0;
  if ((i1 - i17 | 0) < 160) {
   i19 = HEAP32[i19 >> 2] | 0;
   HEAP32[i18 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i19;
  }
 }
 HEAPF64[i20 >> 3] = +__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i16 >> 2] | 0, i27);
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i22, i17, HEAP32[i18 >> 2] | 0, i27);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i25 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i23 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i26 >> 2] = 0;
   i23 = 47;
   break;
  } else if (i2) break; else {
   i23 = 49;
   break;
  }
 } while (0);
 if ((i23 | 0) == 47) if (i2) i23 = 49;
 if ((i23 | 0) == 49) HEAP32[i27 >> 2] = HEAP32[i27 >> 2] | 2;
 i27 = HEAP32[i25 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 STACKTOP = i24;
 return i27 | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i13, i14, i15, i11, i8) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i11 = i11 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0;
 i1 = HEAP32[i13 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i13 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i13 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i14 >> 2] | 0;
 do if (!i2) i12 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i14 >> 2] = 0;
   i12 = 14;
   break;
  } else if (i3) {
   i12 = 17;
   break;
  } else {
   i12 = 16;
   break;
  }
 } while (0);
 if ((i12 | 0) == 14) if (i3) i12 = 16; else {
  i2 = 0;
  i12 = 17;
 }
 L22 : do if ((i12 | 0) == 16) {
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 6;
  i1 = 0;
 } else if ((i12 | 0) == 17) {
  i1 = HEAP32[i13 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 63](i11, 2048, i1) | 0)) {
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 4;
   i1 = 0;
   break;
  }
  i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] & 63](i11, i1, 0) | 0) << 24 >> 24;
  i3 = HEAP32[i13 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 255](i3) | 0;
   i6 = i2;
   i4 = i2;
  } else {
   HEAP32[i4 >> 2] = i5 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i5 >> 2] | 0) | 0;
   i6 = i2;
   i4 = i2;
  }
  while (1) {
   i1 = i1 + -48 | 0;
   i10 = i8 + -1 | 0;
   i2 = HEAP32[i13 >> 2] | 0;
   do if (!i2) i5 = 1; else {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i13 >> 2] = 0;
     i5 = 1;
     break;
    } else {
     i5 = (HEAP32[i13 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!i4) {
    i9 = i6;
    i2 = 1;
    i7 = 0;
   } else {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i14 >> 2] = 0;
     i9 = 0;
     i2 = 1;
     i7 = 0;
     break;
    } else {
     i9 = i6;
     i2 = (i6 | 0) == 0;
     i7 = i6;
     break;
    }
   } while (0);
   i3 = HEAP32[i13 >> 2] | 0;
   if (!((i8 | 0) > 1 & (i5 ^ i2))) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 63](i11, 2048, i2) | 0)) break L22;
   i1 = (i1 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 52 >> 2] & 63](i11, i2, 0) | 0) << 24 >> 24) | 0;
   i2 = HEAP32[i13 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 255](i2) | 0;
    i8 = i10;
    i6 = i9;
    i4 = i7;
    continue;
   } else {
    HEAP32[i3 >> 2] = i4 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i4 >> 2] | 0) | 0;
    i8 = i10;
    i6 = i9;
    i4 = i7;
    continue;
   }
  }
  do if (!i3) i3 = 1; else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i13 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i13 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!i9) i12 = 60; else {
   i2 = HEAP32[i9 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 36 >> 2] & 255](i9) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i14 >> 2] = 0;
    i12 = 60;
    break;
   } else if (i3) break L22; else break;
  } while (0);
  if ((i12 | 0) == 60) if (!i3) break;
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i22, i23, i2, i24, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i16 = i21;
 i14 = i21 + 204 | 0;
 i18 = i21 + 192 | 0;
 i19 = i21 + 180 | 0;
 i15 = i21 + 176 | 0;
 i11 = i21 + 16 | 0;
 i12 = i21 + 8 | 0;
 i13 = i21 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i18 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i19, i2);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i19, 83620) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 31](i1, 73125, 73151, i14) | 0;
 __ZNSt3__26localeD2Ev(i19);
 HEAP32[i19 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i19 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i10 = i19 + 11 | 0;
 i9 = i19 + 8 | 0;
 if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, i1, 0);
 i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i13 >> 2] = 0;
 i8 = i19 + 4 | 0;
 i4 = HEAP32[i22 >> 2] | 0;
 i3 = i4;
 L12 : while (1) {
  if (!i3) {
   i7 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i22 >> 2] = 0;
    i7 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i7 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i23 >> 2] | 0;
  do if (!i3) i20 = 22; else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i20 = 22;
    break;
   } else if (i5) break; else break L12;
  } while (0);
  if ((i20 | 0) == 22) {
   i20 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i2 = HEAP8[i10 >> 0] | 0;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i2 & 255;
  if ((HEAP32[i15 >> 2] | 0) == (i1 + i2 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, i2 << 1, 0);
   if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, i1, 0);
   i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
   HEAP32[i15 >> 2] = i1 + i2;
  }
  i5 = i7 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i7 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 255](i7) | 0; else i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, 16, i1, i15, i13, 0, i18, i11, i12, i14) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 255](i7) | 0;
   i3 = i7;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   i3 = i7;
   continue;
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, (HEAP32[i15 >> 2] | 0) - i1 | 0, 0);
 i14 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 i15 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i16 >> 2] = i17;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i14, i15, 73158, i16) | 0) != 1) HEAP32[i24 >> 2] = 4;
 if (!i7) i2 = 1; else {
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i7) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i22 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i20 = 49; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i20 = 49;
   break;
  } else if (i2) break; else {
   i20 = 51;
   break;
  }
 } while (0);
 if ((i20 | 0) == 49) if (i2) i20 = 51;
 if ((i20 | 0) == 51) HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 2;
 i24 = HEAP32[i22 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i21;
 return i24 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i15, i16, i1, i17, i13, i18, i14) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 i13 = i13 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i3 = i21;
 i4 = (i17 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i2 = i3;
   i19 = i3;
  }
 } else {
  i2 = i3;
  i19 = 0;
 }
 i6 = i1;
 i7 = i2;
 i3 = 0;
 while (1) {
  if ((i6 | 0) == (i17 | 0)) break;
  i5 = HEAP8[i6 + 11 >> 0] | 0;
  if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
  if (!i5) {
   HEAP8[i7 >> 0] = 2;
   i4 = i4 + -1 | 0;
   i3 = i3 + 1 | 0;
  } else HEAP8[i7 >> 0] = 1;
  i6 = i6 + 12 | 0;
  i7 = i7 + 1 | 0;
 }
 i12 = 0;
 i10 = i3;
 L17 : while (1) {
  i3 = HEAP32[i15 >> 2] | 0;
  do if (!i3) i7 = 1; else {
   i5 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i5 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i15 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i15 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i5 = HEAP32[i16 >> 2] | 0;
  if (!i5) {
   i5 = 0;
   i3 = 1;
  } else {
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i16 >> 2] = 0;
    i5 = 0;
    i3 = 1;
   } else i3 = 0;
  }
  i6 = HEAP32[i15 >> 2] | 0;
  if (!((i4 | 0) != 0 & (i7 ^ i3))) break;
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  i3 = i3 & 255;
  if (!i14) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 63](i13, i3) | 0;
  i11 = i12 + 1 | 0;
  i8 = i1;
  i7 = 0;
  i9 = i2;
  while (1) {
   if ((i8 | 0) == (i17 | 0)) break;
   do if ((HEAP8[i9 >> 0] | 0) == 1) {
    i6 = i8 + 11 | 0;
    if ((HEAP8[i6 >> 0] | 0) < 0) i5 = HEAP32[i8 >> 2] | 0; else i5 = i8;
    i5 = HEAP8[i5 + i12 >> 0] | 0;
    if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 63](i13, i5) | 0;
    if (i3 << 24 >> 24 != i5 << 24 >> 24) {
     HEAP8[i9 >> 0] = 0;
     i5 = i7;
     i6 = i10;
     i4 = i4 + -1 | 0;
     break;
    }
    i5 = HEAP8[i6 >> 0] | 0;
    if (i5 << 24 >> 24 < 0) i5 = HEAP32[i8 + 4 >> 2] | 0; else i5 = i5 & 255;
    if ((i5 | 0) == (i11 | 0)) {
     HEAP8[i9 >> 0] = 2;
     i5 = 1;
     i6 = i10 + 1 | 0;
     i4 = i4 + -1 | 0;
    } else {
     i5 = 1;
     i6 = i10;
    }
   } else {
    i5 = i7;
    i6 = i10;
   } while (0);
   i8 = i8 + 12 | 0;
   i7 = i5;
   i9 = i9 + 1 | 0;
   i10 = i6;
  }
  if (!i7) {
   i12 = i11;
   continue;
  }
  i3 = HEAP32[i15 >> 2] | 0;
  i5 = i3 + 12 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 255](i3) | 0; else {
   HEAP32[i5 >> 2] = i6 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i6 >> 0] | 0) | 0;
  }
  if ((i10 + i4 | 0) >>> 0 > 1) {
   i6 = i1;
   i7 = i2;
   i3 = i10;
  } else {
   i12 = i11;
   continue;
  }
  while (1) {
   if ((i6 | 0) == (i17 | 0)) {
    i12 = i11;
    i10 = i3;
    continue L17;
   }
   if ((HEAP8[i7 >> 0] | 0) == 2) {
    i5 = HEAP8[i6 + 11 >> 0] | 0;
    if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
    if ((i5 | 0) != (i11 | 0)) {
     HEAP8[i7 >> 0] = 0;
     i3 = i3 + -1 | 0;
    }
   }
   i6 = i6 + 12 | 0;
   i7 = i7 + 1 | 0;
  }
 }
 do if (!i6) i4 = 1; else {
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i5) i20 = 41; else {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i3 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i3, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i16 >> 2] = 0;
   i20 = 41;
   break;
  } else if (i4) break; else {
   i20 = 77;
   break;
  }
 } while (0);
 if ((i20 | 0) == 41) if (i4) i20 = 77;
 if ((i20 | 0) == 77) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 while (1) {
  if ((i1 | 0) == (i17 | 0)) {
   i20 = 81;
   break;
  }
  if ((HEAP8[i2 >> 0] | 0) == 2) break;
  i1 = i1 + 12 | 0;
  i2 = i2 + 1 | 0;
 }
 if ((i20 | 0) == 81) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i17;
 }
 _free(i19);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i22, i23, i2, i24, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(320);
 i16 = i21;
 i14 = i21 + 208 | 0;
 i18 = i21 + 192 | 0;
 i19 = i21 + 180 | 0;
 i15 = i21 + 176 | 0;
 i11 = i21 + 16 | 0;
 i12 = i21 + 8 | 0;
 i13 = i21 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i18 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i19, i2);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i19, 83652) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, 73125, 73151, i14) | 0;
 __ZNSt3__26localeD2Ev(i19);
 HEAP32[i19 >> 2] = 0;
 HEAP32[i19 + 4 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i19 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i10 = i19 + 11 | 0;
 i9 = i19 + 8 | 0;
 if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, i1, 0);
 i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i12 >> 2] = i11;
 HEAP32[i13 >> 2] = 0;
 i8 = i19 + 4 | 0;
 i4 = HEAP32[i22 >> 2] | 0;
 i3 = i4;
 L12 : while (1) {
  if (!i3) {
   i7 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i22 >> 2] = 0;
    i7 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i7 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i23 >> 2] | 0;
  do if (!i3) i20 = 22; else {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i20 = 22;
    break;
   } else if (i5) break; else break L12;
  } while (0);
  if ((i20 | 0) == 22) {
   i20 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i2 = HEAP8[i10 >> 0] | 0;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i2 & 255;
  if ((HEAP32[i15 >> 2] | 0) == (i1 + i2 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, i2 << 1, 0);
   if ((HEAP8[i10 >> 0] | 0) < 0) i1 = (HEAP32[i9 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, i1, 0);
   i1 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
   HEAP32[i15 >> 2] = i1 + i2;
  }
  i5 = i7 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i7 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 36 >> 2] & 255](i7) | 0; else i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i2, 16, i1, i15, i13, 0, i18, i11, i12, i14) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 255](i7) | 0;
   i3 = i7;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   i3 = i7;
   continue;
  }
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i19, (HEAP32[i15 >> 2] | 0) - i1 | 0, 0);
 i14 = (HEAP8[i10 >> 0] | 0) < 0 ? HEAP32[i19 >> 2] | 0 : i19;
 i15 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i16 >> 2] = i17;
 if ((__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i14, i15, 73158, i16) | 0) != 1) HEAP32[i24 >> 2] = 4;
 if (!i7) i2 = 1; else {
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i7) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i22 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i20 = 49; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i20 = 49;
   break;
  } else if (i2) break; else {
   i20 = 51;
   break;
  }
 } while (0);
 if ((i20 | 0) == 49) if (i2) i20 = 51;
 if ((i20 | 0) == 51) HEAP32[i24 >> 2] = HEAP32[i24 >> 2] | 2;
 i24 = HEAP32[i22 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i21;
 return i24 | 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i15, i16, i1, i17, i13, i18, i14) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i17 = i17 | 0;
 i13 = i13 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i19 = 0, i20 = 0, i21 = 0;
 i20 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i3 = i21;
 i4 = (i17 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i2 = i3;
   i19 = i3;
  }
 } else {
  i2 = i3;
  i19 = 0;
 }
 i3 = 0;
 i6 = i1;
 i7 = i2;
 while (1) {
  if ((i6 | 0) == (i17 | 0)) break;
  i5 = HEAP8[i6 + 8 + 3 >> 0] | 0;
  if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
  if (!i5) {
   HEAP8[i7 >> 0] = 2;
   i3 = i3 + 1 | 0;
   i4 = i4 + -1 | 0;
  } else HEAP8[i7 >> 0] = 1;
  i6 = i6 + 12 | 0;
  i7 = i7 + 1 | 0;
 }
 i12 = 0;
 i10 = i3;
 L17 : while (1) {
  i3 = HEAP32[i15 >> 2] | 0;
  do if (!i3) i7 = 1; else {
   i5 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i5 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i15 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i15 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i5 = HEAP32[i16 >> 2] | 0;
  if (!i5) {
   i5 = 0;
   i3 = 1;
  } else {
   i3 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i16 >> 2] = 0;
    i5 = 0;
    i3 = 1;
   } else i3 = 0;
  }
  i6 = HEAP32[i15 >> 2] | 0;
  if (!((i4 | 0) != 0 & (i7 ^ i3))) break;
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (!i14) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, i3) | 0;
  i11 = i12 + 1 | 0;
  i8 = i1;
  i7 = 0;
  i9 = i2;
  while (1) {
   if ((i8 | 0) == (i17 | 0)) break;
   do if ((HEAP8[i9 >> 0] | 0) == 1) {
    i6 = i8 + 8 + 3 | 0;
    if ((HEAP8[i6 >> 0] | 0) < 0) i5 = HEAP32[i8 >> 2] | 0; else i5 = i8;
    i5 = HEAP32[i5 + (i12 << 2) >> 2] | 0;
    if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 63](i13, i5) | 0;
    if ((i3 | 0) != (i5 | 0)) {
     HEAP8[i9 >> 0] = 0;
     i5 = i7;
     i6 = i10;
     i4 = i4 + -1 | 0;
     break;
    }
    i5 = HEAP8[i6 >> 0] | 0;
    if (i5 << 24 >> 24 < 0) i5 = HEAP32[i8 + 4 >> 2] | 0; else i5 = i5 & 255;
    if ((i5 | 0) == (i11 | 0)) {
     HEAP8[i9 >> 0] = 2;
     i5 = 1;
     i6 = i10 + 1 | 0;
     i4 = i4 + -1 | 0;
    } else {
     i5 = 1;
     i6 = i10;
    }
   } else {
    i5 = i7;
    i6 = i10;
   } while (0);
   i8 = i8 + 12 | 0;
   i7 = i5;
   i9 = i9 + 1 | 0;
   i10 = i6;
  }
  if (!i7) {
   i12 = i11;
   continue;
  }
  i3 = HEAP32[i15 >> 2] | 0;
  i5 = i3 + 12 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 255](i3) | 0; else {
   HEAP32[i5 >> 2] = i6 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i6 >> 2] | 0) | 0;
  }
  if ((i10 + i4 | 0) >>> 0 > 1) {
   i6 = i1;
   i7 = i2;
   i3 = i10;
  } else {
   i12 = i11;
   continue;
  }
  while (1) {
   if ((i6 | 0) == (i17 | 0)) {
    i12 = i11;
    i10 = i3;
    continue L17;
   }
   if ((HEAP8[i7 >> 0] | 0) == 2) {
    i5 = HEAP8[i6 + 8 + 3 >> 0] | 0;
    if (i5 << 24 >> 24 < 0) i5 = HEAP32[i6 + 4 >> 2] | 0; else i5 = i5 & 255;
    if ((i5 | 0) != (i11 | 0)) {
     HEAP8[i7 >> 0] = 0;
     i3 = i3 + -1 | 0;
    }
   }
   i6 = i6 + 12 | 0;
   i7 = i7 + 1 | 0;
  }
 }
 do if (!i6) i4 = 1; else {
  i3 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 255](i6) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i5) i20 = 41; else {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 255](i5) | 0; else i3 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i3, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i16 >> 2] = 0;
   i20 = 41;
   break;
  } else if (i4) break; else {
   i20 = 77;
   break;
  }
 } while (0);
 if ((i20 | 0) == 41) if (i4) i20 = 77;
 if ((i20 | 0) == 77) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 while (1) {
  if ((i1 | 0) == (i17 | 0)) {
   i20 = 81;
   break;
  }
  if ((HEAP8[i2 >> 0] | 0) == 2) break;
  i1 = i1 + 12 | 0;
  i2 = i2 + 1 | 0;
 }
 if ((i20 | 0) == 81) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i17;
 }
 _free(i19);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i11 = i22 + 200 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i17 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i18 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i22 + 198 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i17 = __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i18 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i11 = i22 + 200 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i17 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i18 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i22 + 198 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 i17 = __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 HEAP32[i18 >> 2] = i17;
 HEAP32[i18 + 4 >> 2] = tempRet0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i11 = i22 + 200 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP16[i18 >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i11 = i22 + 200 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i22 + 198 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP16[i18 >> 1] = __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i22 + 198 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i22 + 198 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}
function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i11 = i22 + 200 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(304);
 i11 = i22 + 200 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i17, i2, i13, i16, HEAP32[i12 >> 2] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i18 = i18 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i21 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i22 + 198 | 0;
 i12 = i22 + 196 | 0;
 i19 = i22 + 184 | 0;
 i20 = i22 + 172 | 0;
 i13 = i22 + 168 | 0;
 i14 = i22 + 8 | 0;
 i15 = i22 + 4 | 0;
 i16 = i22;
 i17 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i12);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = i20 + 11 | 0;
 i10 = i20 + 8 | 0;
 if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
 HEAP32[i13 >> 2] = i2;
 HEAP32[i15 >> 2] = i14;
 HEAP32[i16 >> 2] = 0;
 i7 = i20 + 4 | 0;
 i4 = HEAP32[i23 >> 2] | 0;
 i3 = i4;
 L8 : while (1) {
  if (!i3) {
   i8 = 0;
   i4 = 0;
   i5 = 1;
  } else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i23 >> 2] = 0;
    i8 = 0;
    i4 = 0;
    i5 = 1;
   } else {
    i8 = i3;
    i5 = 0;
   }
  }
  i3 = HEAP32[i24 >> 2] | 0;
  do if (!i3) i21 = 19; else {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i24 >> 2] = 0;
    i21 = 19;
    break;
   } else if (i5) break; else break L8;
  } while (0);
  if ((i21 | 0) == 19) {
   i21 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i5 = HEAP8[i9 >> 0] | 0;
  i5 = i5 << 24 >> 24 < 0 ? HEAP32[i7 >> 2] | 0 : i5 & 255;
  if ((HEAP32[i13 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if ((HEAP8[i9 >> 0] | 0) < 0) i1 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0; else i1 = 10;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i20 >> 2] | 0 : i20;
   HEAP32[i13 >> 2] = i2 + i5;
  }
  i5 = i8 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i8 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i1 & 255, i17, i2, i13, i16, HEAP8[i12 >> 0] | 0, i19, i14, i15, i11) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 40 >> 2] & 255](i8) | 0;
   i3 = i8;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   i3 = i8;
   continue;
  }
 }
 i12 = HEAP8[i19 + 11 >> 0] | 0;
 if ((i12 << 24 >> 24 < 0 ? HEAP32[i19 + 4 >> 2] | 0 : i12 & 255) | 0) {
  i1 = HEAP32[i15 >> 2] | 0;
  if ((i1 - i14 | 0) < 160) {
   i16 = HEAP32[i16 >> 2] | 0;
   HEAP32[i15 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i16;
  }
 }
 HEAP32[i18 >> 2] = __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i13 >> 2] | 0, i25, i17) | 0;
 __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i14, HEAP32[i15 >> 2] | 0, i25);
 if (!i8) i2 = 1; else {
  i1 = HEAP32[i8 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i8) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 }
 do if (!i3) i21 = 47; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i24 >> 2] = 0;
   i21 = 47;
   break;
  } else if (i2) break; else {
   i21 = 49;
   break;
  }
 } while (0);
 if ((i21 | 0) == 47) if (i2) i21 = 49;
 if ((i21 | 0) == 49) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i25 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i22;
 return i25 | 0;
}

function _BlitBtoNAlphaKey(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i18 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i35 = HEAP32[i2 + 36 >> 2] | 0;
 i1 = HEAP32[i2 + 44 >> 2] | 0;
 i16 = HEAP32[(HEAP32[(HEAP32[i2 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i17 = HEAPU8[i2 + 63 >> 0] | 0;
 i19 = HEAP32[i2 + 56 >> 2] | 0;
 i20 = HEAP8[i1 + 9 >> 0] | 0;
 i21 = i20 & 255;
 i22 = ((i18 + 7 | 0) / -8 | 0) + i18 + (HEAP32[i2 + 16 >> 2] | 0) | 0;
 if (!i3) return;
 i23 = (i18 | 0) > 0;
 i24 = i1 + 28 | 0;
 i25 = i1 + 32 | 0;
 i26 = i1 + 29 | 0;
 i27 = i1 + 33 | 0;
 i28 = i1 + 30 | 0;
 i29 = i1 + 34 | 0;
 i30 = i1 + 31 | 0;
 i31 = i1 + 35 | 0;
 i32 = i1 + 12 | 0;
 i33 = i1 + 16 | 0;
 i34 = i1 + 20 | 0;
 i14 = i1 + 24 | 0;
 i15 = Math_imul(i18, i21) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 while (1) {
  i3 = i3 + -1 | 0;
  if (i23) {
   i4 = 0;
   i12 = 0;
   i13 = i2;
   while (1) {
    if (!(i12 & 7)) {
     i4 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    }
    i11 = i4 & 255;
    i4 = (i4 & 255) >>> 7 & 255;
    L12 : do if ((i19 | 0) != (i4 | 0)) {
     i10 = i16 + (i4 << 2) | 0;
     i8 = HEAPU8[i10 >> 0] | 0;
     i9 = HEAPU8[i10 + 1 >> 0] | 0;
     i10 = HEAPU8[i10 + 2 >> 0] | 0;
     switch (i20 << 24 >> 24) {
     case 1:
      {
       i7 = HEAPU8[i13 >> 0] | 0;
       i4 = HEAP8[(HEAP32[5724 + (HEAPU8[i30 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
       i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i28 >> 0] << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
       i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i26 >> 0] << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
       i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i24 >> 0] << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
       break;
      }
     case 2:
      {
       i7 = HEAPU16[i13 >> 1] | 0;
       i4 = HEAP8[(HEAP32[5724 + (HEAPU8[i30 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
       i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i28 >> 0] << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
       i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i26 >> 0] << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
       i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i24 >> 0] << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
       break;
      }
     case 3:
      {
       i4 = -1;
       i5 = HEAP8[i13 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i6 = HEAP8[i13 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       i7 = HEAP8[i13 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
       break;
      }
     case 4:
      {
       i7 = HEAP32[i13 >> 2] | 0;
       i4 = HEAP8[(HEAP32[5724 + (HEAPU8[i30 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i31 >> 0] | 0)) >> 0] | 0;
       i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i28 >> 0] << 2) >> 2] | 0) + ((HEAP32[i34 >> 2] & i7) >>> (HEAPU8[i29 >> 0] | 0)) >> 0] | 0;
       i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i26 >> 0] << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i7) >>> (HEAPU8[i27 >> 0] | 0)) >> 0] | 0;
       i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i24 >> 0] << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i25 >> 0] | 0)) >> 0] | 0;
       break;
      }
     default:
      {
       i4 = 0;
       i5 = 0;
       i6 = 0;
       i7 = 0;
      }
     }
     i36 = i4 & 255;
     i4 = i5 & 255;
     i6 = i6 & 255;
     i7 = i7 & 255;
     i7 = (((Math_imul(i8 - i7 | 0, i17) | 0) >>> 0) / 255 | 0) + i7 | 0;
     i6 = (((Math_imul(i9 - i6 | 0, i17) | 0) >>> 0) / 255 | 0) + i6 | 0;
     i4 = (((Math_imul(i10 - i4 | 0, i17) | 0) >>> 0) / 255 | 0) + i4 | 0;
     i5 = i36 + i17 - (((Math_imul(i36, i17) | 0) >>> 0) / 255 | 0) | 0;
     switch (i20 << 24 >> 24) {
     case 1:
      {
       HEAP8[i13 >> 0] = i6 >>> (HEAPU8[i26 >> 0] | 0) << HEAPU8[i27 >> 0] | i7 >>> (HEAPU8[i24 >> 0] | 0) << HEAPU8[i25 >> 0] | i4 >>> (HEAPU8[i28 >> 0] | 0) << HEAPU8[i29 >> 0] | i5 >>> (HEAPU8[i30 >> 0] | 0) << HEAPU8[i31 >> 0];
       break L12;
      }
     case 2:
      {
       HEAP16[i13 >> 1] = i6 >>> (HEAPU8[i26 >> 0] | 0) << HEAPU8[i27 >> 0] | i7 >>> (HEAPU8[i24 >> 0] | 0) << HEAPU8[i25 >> 0] | i4 >>> (HEAPU8[i28 >> 0] | 0) << HEAPU8[i29 >> 0] | i5 >>> (HEAPU8[i30 >> 0] | 0) << HEAPU8[i31 >> 0];
       break L12;
      }
     case 3:
      {
       HEAP8[i13 + ((HEAPU8[i25 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
       HEAP8[i13 + ((HEAPU8[i27 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
       HEAP8[i13 + ((HEAPU8[i29 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
       break L12;
      }
     case 4:
      {
       HEAP32[i13 >> 2] = i6 >>> (HEAPU8[i26 >> 0] | 0) << HEAPU8[i27 >> 0] | i7 >>> (HEAPU8[i24 >> 0] | 0) << HEAPU8[i25 >> 0] | i4 >>> (HEAPU8[i28 >> 0] | 0) << HEAPU8[i29 >> 0] | i5 >>> (HEAPU8[i30 >> 0] | 0) << HEAPU8[i31 >> 0];
       break L12;
      }
     default:
      break L12;
     }
    } while (0);
    i12 = i12 + 1 | 0;
    if ((i12 | 0) == (i18 | 0)) break; else {
     i4 = i11 << 1 & 255;
     i13 = i13 + i21 | 0;
    }
   }
   i2 = i2 + i15 | 0;
  }
  if (!i3) break; else {
   i1 = i1 + i22 | 0;
   i2 = i2 + i35 | 0;
  }
 }
 return;
}

function __ZNSt3__25dequeIP11SDL_TextureNS_9allocatorIS2_EEE19__add_back_capacityEv(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i15 + 4 | 0;
 i8 = i15;
 i1 = i14 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 > 1023) {
  HEAP32[i1 >> 2] = i2 + -1024;
  i11 = i14 + 4 | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[i10 >> 2] | 0;
  i10 = i10 + 4 | 0;
  HEAP32[i11 >> 2] = i10;
  i12 = i14 + 8 | 0;
  i8 = HEAP32[i12 >> 2] | 0;
  i9 = i14 + 12 | 0;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = i7;
  do if ((i8 | 0) == (i7 | 0)) {
   i4 = HEAP32[i14 >> 2] | 0;
   i2 = i4;
   if (i10 >>> 0 > i4 >>> 0) {
    i1 = i10;
    i3 = ((i1 - i2 >> 2) + 1 | 0) / -2 | 0;
    i4 = i10 + (i3 << 2) | 0;
    i1 = i8 - i1 | 0;
    i2 = i1 >> 2;
    if (!i2) i1 = i10; else {
     _memmove(i4 | 0, i10 | 0, i1 | 0) | 0;
     i1 = HEAP32[i11 >> 2] | 0;
    }
    i14 = i4 + (i2 << 2) | 0;
    HEAP32[i12 >> 2] = i14;
    HEAP32[i11 >> 2] = i1 + (i3 << 2);
    i1 = i14;
    break;
   }
   i1 = i1 - i2 >> 1;
   i1 = (i1 | 0) == 0 ? 1 : i1;
   if (i1 >>> 0 > 1073741823) {
    i15 = ___cxa_allocate_exception(8) | 0;
    __ZNSt11logic_errorC2EPKc(i15, 38941);
    HEAP32[i15 >> 2] = 35044;
    ___cxa_throw(i15 | 0, 2680, 272);
   }
   i5 = __Znwj(i1 << 2) | 0;
   i6 = i5;
   i3 = i5 + (i1 >>> 2 << 2) | 0;
   i7 = i3;
   i5 = i5 + (i1 << 2) | 0;
   if ((i10 | 0) == (i8 | 0)) {
    i1 = i7;
    i2 = i4;
   } else {
    i1 = i7;
    i2 = i10;
    do {
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
     i3 = i1 + 4 | 0;
     i1 = i3;
     i2 = i2 + 4 | 0;
    } while ((i2 | 0) != (i8 | 0));
    i2 = HEAP32[i14 >> 2] | 0;
   }
   HEAP32[i14 >> 2] = i6;
   HEAP32[i11 >> 2] = i7;
   HEAP32[i12 >> 2] = i1;
   HEAP32[i9 >> 2] = i5;
   if (i2) {
    __ZdlPv(i2);
    i1 = HEAP32[i12 >> 2] | 0;
   }
  } else i1 = i8; while (0);
  HEAP32[i1 >> 2] = i13;
  HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 4;
  STACKTOP = i15;
  return;
 }
 i12 = i14 + 8 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i11 = i14 + 4 | 0;
 i4 = i1 - (HEAP32[i11 >> 2] | 0) | 0;
 i10 = i14 + 12 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i3 = i2 - (HEAP32[i14 >> 2] | 0) | 0;
 if (i4 >>> 0 >= i3 >>> 0) {
  i1 = i3 >> 1;
  i1 = (i1 | 0) == 0 ? 1 : i1;
  HEAP32[i9 + 12 >> 2] = 0;
  HEAP32[i9 + 16 >> 2] = i14 + 12;
  if (i1 >>> 0 > 1073741823) {
   i15 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc(i15, 38941);
   HEAP32[i15 >> 2] = 35044;
   ___cxa_throw(i15 | 0, 2680, 272);
  }
  i13 = __Znwj(i1 << 2) | 0;
  HEAP32[i9 >> 2] = i13;
  i6 = i13 + (i4 >> 2 << 2) | 0;
  i7 = i9 + 8 | 0;
  HEAP32[i7 >> 2] = i6;
  i5 = i9 + 4 | 0;
  HEAP32[i5 >> 2] = i6;
  i6 = i9 + 12 | 0;
  HEAP32[i6 >> 2] = i13 + (i1 << 2);
  HEAP32[i8 >> 2] = __Znwj(4096) | 0;
  __ZNSt3__214__split_bufferIPP11SDL_TextureRNS_9allocatorIS3_EEE9push_backEOS3_(i9, i8);
  i4 = HEAP32[i12 >> 2] | 0;
  while (1) {
   i1 = HEAP32[i11 >> 2] | 0;
   if ((i4 | 0) == (i1 | 0)) break;
   i13 = i4 + -4 | 0;
   __ZNSt3__214__split_bufferIPP11SDL_TextureRNS_9allocatorIS3_EEE10push_frontERKS3_(i9, i13);
   i4 = i13;
  }
  i2 = i1;
  i3 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i9 >> 2] = i3;
  HEAP32[i11 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = i2;
  i1 = HEAP32[i12 >> 2] | 0;
  HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i7 >> 2] = i1;
  i14 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i6 >> 2] = i14;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i7 >> 2] = i1 + (~((i1 + -4 - i2 | 0) >>> 2) << 2);
  if (i3 | 0) __ZdlPv(i3);
  STACKTOP = i15;
  return;
 }
 if ((i2 | 0) != (i1 | 0)) {
  HEAP32[i9 >> 2] = __Znwj(4096) | 0;
  __ZNSt3__214__split_bufferIPP11SDL_TextureNS_9allocatorIS3_EEE9push_backEOS3_(i14, i9);
  STACKTOP = i15;
  return;
 }
 HEAP32[i9 >> 2] = __Znwj(4096) | 0;
 __ZNSt3__214__split_bufferIPP11SDL_TextureNS_9allocatorIS3_EEE10push_frontEOS3_(i14, i9);
 i8 = HEAP32[i11 >> 2] | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i8 = i8 + 4 | 0;
 HEAP32[i11 >> 2] = i8;
 i7 = HEAP32[i12 >> 2] | 0;
 i13 = HEAP32[i10 >> 2] | 0;
 i1 = i13;
 do if ((i7 | 0) == (i13 | 0)) {
  i2 = HEAP32[i14 >> 2] | 0;
  i3 = i2;
  if (i8 >>> 0 > i2 >>> 0) {
   i1 = i8;
   i3 = ((i1 - i3 >> 2) + 1 | 0) / -2 | 0;
   i4 = i8 + (i3 << 2) | 0;
   i1 = i7 - i1 | 0;
   i2 = i1 >> 2;
   if (!i2) i1 = i8; else {
    _memmove(i4 | 0, i8 | 0, i1 | 0) | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   }
   i14 = i4 + (i2 << 2) | 0;
   HEAP32[i12 >> 2] = i14;
   HEAP32[i11 >> 2] = i1 + (i3 << 2);
   i1 = i14;
   break;
  }
  i1 = i1 - i3 >> 1;
  i1 = (i1 | 0) == 0 ? 1 : i1;
  if (i1 >>> 0 > 1073741823) {
   i15 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc(i15, 38941);
   HEAP32[i15 >> 2] = 35044;
   ___cxa_throw(i15 | 0, 2680, 272);
  }
  i4 = __Znwj(i1 << 2) | 0;
  i5 = i4;
  i3 = i4 + (i1 >>> 2 << 2) | 0;
  i6 = i3;
  i4 = i4 + (i1 << 2) | 0;
  if ((i8 | 0) == (i7 | 0)) i1 = i6; else {
   i1 = i6;
   i2 = i8;
   do {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    i3 = i1 + 4 | 0;
    i1 = i3;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) != (i7 | 0));
   i2 = HEAP32[i14 >> 2] | 0;
  }
  HEAP32[i14 >> 2] = i5;
  HEAP32[i11 >> 2] = i6;
  HEAP32[i12 >> 2] = i1;
  HEAP32[i10 >> 2] = i4;
  if (i2) {
   __ZdlPv(i2);
   i1 = HEAP32[i12 >> 2] | 0;
  }
 } else i1 = i7; while (0);
 HEAP32[i1 >> 2] = i9;
 HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 4;
 STACKTOP = i15;
 return;
}

function __ZN4Game6updateEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, f5 = f0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = 0;
 __ZN7Manager7refreshEv(77460);
 i1 = HEAP32[19365] | 0;
 i4 = HEAP32[19366] | 0;
 if ((i1 | 0) != (i4 | 0)) do {
  i3 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i3 + 8 >> 2] | 0;
  i3 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i2 | 0) != (i3 | 0)) do {
   i14 = HEAP32[i2 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i14 >> 2] | 0) + 4 >> 2] & 511](i14);
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i4 | 0));
 i1 = HEAP32[19474] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i14 = HEAP32[19475] | 0;
  HEAP32[19475] = i14 + 1;
  HEAP32[19476] = i14;
 }
 HEAP32[21387] = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2] | 0) + 8 >> 2]) + Math_fround(-683.0));
 i1 = HEAP32[19474] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i14 = HEAP32[19475] | 0;
  HEAP32[19475] = i14 + 1;
  HEAP32[19476] = i14;
 }
 HEAP32[21388] = ~~Math_fround(Math_fround(HEAPF32[(HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2] | 0) + 12 >> 2]) + Math_fround(-320.0));
 i1 = HEAP32[19465] | 0;
 i14 = HEAP32[19466] | 0;
 if ((i1 | 0) != (i14 | 0)) do {
  i10 = HEAP32[i1 >> 2] | 0;
  i13 = i10 + 24 | 0;
  i2 = HEAP32[19474] | 0;
  if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
   i12 = HEAP32[19475] | 0;
   HEAP32[19475] = i12 + 1;
   HEAP32[19477] = i12;
  }
  i8 = HEAP32[i2 + 20 + (HEAP32[19477] << 2) >> 2] | 0;
  i2 = i8 + 24 | 0;
  i11 = i13 + 11 | 0;
  i3 = HEAP8[i11 >> 0] | 0;
  i6 = i3 << 24 >> 24 < 0;
  i12 = i10 + 28 | 0;
  i3 = i3 & 255;
  i7 = i6 ? HEAP32[i12 >> 2] | 0 : i3;
  i9 = HEAP8[i2 + 11 >> 0] | 0;
  i4 = i9 << 24 >> 24 < 0;
  L24 : do if ((i7 | 0) == ((i4 ? HEAP32[i8 + 28 >> 2] | 0 : i9 & 255) | 0)) {
   i8 = HEAP32[i13 >> 2] | 0;
   i9 = i6 ? i8 : i13;
   i2 = i4 ? HEAP32[i2 >> 2] | 0 : i2;
   i4 = (i7 | 0) == 0;
   if (i6) {
    if (i4) break;
    if (!(_memcmp(i9, i2, i7) | 0)) break; else {
     i15 = 24;
     break;
    }
   }
   if (!i4) if ((HEAP8[i2 >> 0] | 0) == (i8 & 255) << 24 >> 24) {
    i4 = i13;
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = i4 + 1 | 0;
     if (!i3) break L24;
     i2 = i2 + 1 | 0;
     if ((HEAP8[i4 >> 0] | 0) != (HEAP8[i2 >> 0] | 0)) {
      i15 = 24;
      break;
     }
    }
   } else i15 = 24;
  } else i15 = 24; while (0);
  L34 : do if ((i15 | 0) == 24) {
   i15 = 0;
   i2 = HEAP32[19474] | 0;
   if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
    i9 = HEAP32[19475] | 0;
    HEAP32[19475] = i9 + 1;
    HEAP32[19477] = i9;
   }
   if (__ZN9Collision4AABBERK17ColliderComponentS2_(i10, HEAP32[i2 + 20 + (HEAP32[19477] << 2) >> 2] | 0) | 0) {
    i2 = HEAP8[i11 >> 0] | 0;
    i3 = HEAP32[i12 >> 2] | 0;
    if (((i2 << 24 >> 24 < 0 ? i3 : i2 & 255) | 0) == 4) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i13, 0, -1, 39168, 4) | 0)) {
     f5 = Math_fround(6.0);
     i15 = 33;
    } else {
     i2 = HEAP8[i11 >> 0] | 0;
     i3 = HEAP32[i12 >> 2] | 0;
     i15 = 31;
    } else i15 = 31;
    if ((i15 | 0) == 31) {
     i15 = 0;
     if (((i2 << 24 >> 24 < 0 ? i3 : i2 & 255) | 0) == 4) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i13, 0, -1, 39173, 4) | 0)) {
      f5 = Math_fround(-6.0);
      i15 = 33;
     }
    }
    if ((i15 | 0) == 33) {
     i15 = 0;
     i2 = HEAP32[19474] | 0;
     if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
      i10 = HEAP32[19475] | 0;
      HEAP32[19475] = i10 + 1;
      HEAP32[19476] = i10;
     }
     i10 = (HEAP32[i2 + 20 + (HEAP32[19476] << 2) >> 2] | 0) + 12 | 0;
     HEAPF32[i10 >> 2] = Math_fround(f5 + Math_fround(HEAPF32[i10 >> 2]));
    }
    i3 = HEAP8[i11 >> 0] | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    do if (((i3 << 24 >> 24 < 0 ? i2 : i3 & 255) | 0) == 5) {
     if (__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i13, 0, -1, 39178, 5) | 0) {
      i3 = HEAP8[i11 >> 0] | 0;
      i2 = HEAP32[i12 >> 2] | 0;
      break;
     }
     i2 = HEAP32[19474] | 0;
     if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
      i13 = HEAP32[19475] | 0;
      HEAP32[19475] = i13 + 1;
      HEAP32[19476] = i13;
     }
     i13 = (HEAP32[i2 + 20 + (HEAP32[19476] << 2) >> 2] | 0) + 8 | 0;
     HEAPF32[i13 >> 2] = Math_fround(Math_fround(HEAPF32[i13 >> 2]) + Math_fround(6.0));
     break L34;
    } while (0);
    if (((i3 << 24 >> 24 < 0 ? i2 : i3 & 255) | 0) == 6) if (!(__ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i13, 0, -1, 39184, 6) | 0)) {
     i2 = HEAP32[19474] | 0;
     if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
      i13 = HEAP32[19475] | 0;
      HEAP32[19475] = i13 + 1;
      HEAP32[19476] = i13;
     }
     i13 = (HEAP32[i2 + 20 + (HEAP32[19476] << 2) >> 2] | 0) + 8 | 0;
     HEAPF32[i13 >> 2] = Math_fround(Math_fround(HEAPF32[i13 >> 2]) + Math_fround(-6.0));
    }
   }
  } while (0);
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i14 | 0));
 i1 = HEAP32[21387] | 0;
 if ((i1 | 0) > 1366) {
  i1 = 1366;
  i15 = 52;
 } else if ((i1 | 0) < 0) {
  i1 = 0;
  i15 = 52;
 }
 if ((i15 | 0) == 52) HEAP32[21387] = i1;
 i1 = HEAP32[21388] | 0;
 if ((i1 | 0) < -56) i1 = -56; else if ((i1 | 0) > 170) i1 = 170; else return;
 HEAP32[21388] = i1;
 return;
}

function _png_handle_iCCP(i19, i20, i2) {
 i19 = i19 | 0;
 i20 = i20 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0;
 i18 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 1248 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1248);
 i16 = i21 + 4 | 0;
 i15 = i21 + 1164 | 0;
 i11 = i21 + 1032 | 0;
 i12 = i21 + 8 | 0;
 i14 = i21;
 HEAP32[i16 >> 2] = i2;
 i1 = HEAP32[i19 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i19, 63643);
 if (i1 & 6 | 0) {
  _png_crc_finish(i19, i2) | 0;
  _png_chunk_benign_error(i19, 64026);
  STACKTOP = i21;
  return;
 }
 if (i2 >>> 0 < 9) {
  _png_crc_finish(i19, i2) | 0;
  _png_chunk_benign_error(i19, 64911);
  STACKTOP = i21;
  return;
 }
 i13 = i19 + 824 | 0;
 i17 = i19 + 898 | 0;
 i1 = HEAPU16[i17 >> 1] | 0;
 if (i1 & 32768 | 0) {
  _png_crc_finish(i19, i2) | 0;
  STACKTOP = i21;
  return;
 }
 L16 : do if (!(i1 & 4)) {
  i3 = i2 >>> 0 < 81 ? i2 : 81;
  _png_read_data(i19, i15, i3);
  _png_calculate_crc(i19, i15, i3);
  i2 = i2 - i3 | 0;
  HEAP32[i16 >> 2] = i2;
  do if (!i3) i1 = 63755; else {
   i1 = 0;
   do {
    if (!(HEAP8[i15 + i1 >> 0] | 0)) break;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < 80 & i1 >>> 0 < i3 >>> 0);
   if ((i1 + -1 | 0) >>> 0 < 79) {
    i10 = i1 + 1 | 0;
    if (i10 >>> 0 < i3 >>> 0) if (!(HEAP8[i15 + i10 >> 0] | 0)) {
     i1 = i1 + 2 | 0;
     if (_png_inflate_claim(i19, 1766015824) | 0) {
      i1 = HEAP32[i19 + 248 >> 2] | 0;
      break;
     }
     HEAP32[i14 >> 2] = 132;
     HEAP32[i19 + 224 >> 2] = i15 + i1;
     HEAP32[i19 + 228 >> 2] = i3 - i1;
     _png_inflate_read(i19, i12, i16, i11, i14, 0);
     do if (!(HEAP32[i14 >> 2] | 0)) {
      i8 = HEAPU8[i11 + 1 >> 0] << 16 | HEAPU8[i11 >> 0] << 24 | HEAPU8[i11 + 2 >> 0] << 8 | HEAPU8[i11 + 3 >> 0];
      if (!(_png_icc_check_length(i19, i13, i15, i8) | 0)) {
       i2 = 1;
       i3 = 0;
       i1 = 0;
      } else if (!(_png_icc_check_header(i19, i13, i15, i8, i11, HEAPU8[i19 + 435 >> 0] | 0) | 0)) {
       i2 = 1;
       i3 = 0;
       i1 = 0;
      } else {
       i3 = HEAP8[i11 + 128 >> 0] | 0;
       i4 = HEAP8[i11 + 129 >> 0] | 0;
       i5 = HEAP8[i11 + 130 >> 0] | 0;
       i6 = HEAP8[i11 + 131 >> 0] | 0;
       i9 = i19 + 788 | 0;
       i1 = HEAP32[i9 >> 2] | 0;
       if (!i1) i18 = 23; else {
        i2 = i19 + 792 | 0;
        if ((HEAP32[i2 >> 2] | 0) >>> 0 < i8 >>> 0) {
         HEAP32[i9 >> 2] = 0;
         HEAP32[i2 >> 2] = 0;
         _png_free(i19, i1);
         i18 = 23;
        } else i7 = i1;
       }
       if ((i18 | 0) == 23) {
        i1 = _png_malloc_base(i19, i8) | 0;
        if (!i1) {
         i2 = 1;
         i3 = 0;
         i1 = 63690;
         break;
        }
        HEAP32[i9 >> 2] = i1;
        HEAP32[i19 + 792 >> 2] = i8;
        i7 = i1;
       }
       _memcpy(i7 | 0, i11 | 0, 132) | 0;
       i1 = ((i4 & 255) << 16 | (i3 & 255) << 24 | (i5 & 255) << 8 | i6 & 255) * 12 | 0;
       HEAP32[i14 >> 2] = i1;
       i2 = i7 + 132 | 0;
       _png_inflate_read(i19, i12, i16, i2, i14, 0);
       if (HEAP32[i14 >> 2] | 0) {
        i2 = 1;
        i3 = 0;
        i1 = HEAP32[i19 + 248 >> 2] | 0;
        break;
       }
       if (!(_png_icc_check_tag_table(i19, i13, i15, i8, i7) | 0)) {
        i2 = 1;
        i3 = 0;
        i1 = 0;
       } else {
        HEAP32[i14 >> 2] = i8 + -132 - i1;
        _png_inflate_read(i19, i12, i16, i2 + i1 | 0, i14, 1);
        i1 = HEAP32[i16 >> 2] | 0;
        i2 = (i1 | 0) == 0;
        if (!i2) if (!(HEAP32[i19 + 212 >> 2] & 1048576)) {
         i2 = 1;
         i3 = 0;
         i1 = 63852;
         break;
        }
        if (HEAP32[i14 >> 2] | 0) {
         i2 = 1;
         i3 = 0;
         i1 = 63724;
         break;
        }
        if (!i2) _png_chunk_warning(i19, 63852);
        _png_crc_finish(i19, i1) | 0;
        _png_icc_set_sRGB(i19, i13, i7, HEAP32[i19 + 272 >> 2] | 0);
        if (!i20) {
         i2 = 0;
         i3 = 1;
         i1 = 0;
         break;
        }
        _png_free_data(i19, i20, 16, 0);
        i1 = _png_malloc_base(i19, i10) | 0;
        HEAP32[i20 + 116 >> 2] = i1;
        if (!i1) {
         HEAP16[i17 >> 1] = HEAP16[i17 >> 1] | -32768;
         _png_colorspace_sync(i19, i20);
         i2 = 1;
         i3 = 1;
         i1 = 63690;
         break;
        } else {
         _memcpy(i1 | 0, i15 | 0, i10 | 0) | 0;
         HEAP32[i20 + 124 >> 2] = i8;
         HEAP32[i20 + 120 >> 2] = i7;
         HEAP32[i9 >> 2] = 0;
         i2 = i20 + 232 | 0;
         HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 16;
         i2 = i20 + 8 | 0;
         HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 4096;
         _png_colorspace_sync(i19, i20);
         i2 = 0;
         i3 = 1;
         i1 = 0;
         break;
        }
       }
      }
     } else {
      i2 = 1;
      i3 = 0;
      i1 = HEAP32[i19 + 248 >> 2] | 0;
     } while (0);
     HEAP32[i19 + 220 >> 2] = 0;
     if (!i2) {
      STACKTOP = i21;
      return;
     }
     if (i3 | 0) break L16;
     i2 = HEAP32[i16 >> 2] | 0;
     i18 = 43;
     break L16;
    } else i1 = 64921; else i1 = 64921;
   } else i1 = 63755;
  } while (0);
  i18 = 43;
 } else {
  i1 = 64944;
  i18 = 43;
 } while (0);
 if ((i18 | 0) == 43) _png_crc_finish(i19, i2) | 0;
 HEAP16[i17 >> 1] = HEAP16[i17 >> 1] | -32768;
 _png_colorspace_sync(i19, i20);
 if (!i1) {
  STACKTOP = i21;
  return;
 }
 _png_chunk_benign_error(i19, i1);
 STACKTOP = i21;
 return;
}

function _png_read_row(i19, i15, i16) {
 i19 = i19 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i20 = 0;
 i18 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i17 = i20;
 if (!i19) {
  STACKTOP = i20;
  return;
 }
 if (!(HEAP32[i19 + 212 >> 2] & 64)) _png_read_start_row(i19);
 i1 = HEAP32[i19 + 368 >> 2] | 0;
 HEAP32[i17 >> 2] = i1;
 i9 = i17 + 8 | 0;
 HEAP8[i9 >> 0] = HEAP8[i19 + 435 >> 0] | 0;
 i10 = i17 + 9 | 0;
 HEAP8[i10 >> 0] = HEAP8[i19 + 436 >> 0] | 0;
 HEAP8[i17 + 10 >> 0] = HEAP8[i19 + 439 >> 0] | 0;
 i14 = HEAP8[i19 + 438 >> 0] | 0;
 i12 = i17 + 11 | 0;
 HEAP8[i12 >> 0] = i14;
 i2 = i14 & 255;
 if ((i14 & 255) > 7) i5 = Math_imul(i1, i2 >>> 3) | 0; else i5 = ((Math_imul(i1, i2) | 0) + 7 | 0) >>> 3;
 i4 = i17 + 4 | 0;
 HEAP32[i4 >> 2] = i5;
 i14 = i19 + 372 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i11 = i19 + 432 | 0;
 L11 : do if (HEAP8[i11 >> 0] | 0) if (HEAP32[i19 + 216 >> 2] & 2 | 0) switch (HEAP8[i19 + 433 >> 0] | 0) {
 case 0:
  {
   if (!(i1 & 7)) break L11;
   if (i16 | 0) _png_combine_row(i19, i16, 1);
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 case 1:
  {
   if (!(i1 & 7)) if ((HEAP32[i19 + 348 >> 2] | 0) >>> 0 >= 5) break L11;
   if (i16 | 0) _png_combine_row(i19, i16, 1);
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 case 2:
  {
   if ((i1 & 7 | 0) == 4) break L11;
   if (!((i16 | 0) == 0 | (i1 & 4 | 0) == 0)) _png_combine_row(i19, i16, 1);
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 case 3:
  {
   if (!(i1 & 3)) if ((HEAP32[i19 + 348 >> 2] | 0) >>> 0 >= 3) break L11;
   if (i16 | 0) _png_combine_row(i19, i16, 1);
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 case 4:
  {
   if ((i1 & 3 | 0) == 2) break L11;
   if (!((i16 | 0) == 0 | (i1 & 2 | 0) == 0)) _png_combine_row(i19, i16, 1);
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 case 5:
  {
   if (!(i1 & 1)) if ((HEAP32[i19 + 348 >> 2] | 0) >>> 0 >= 2) break L11;
   if (i16 | 0) _png_combine_row(i19, i16, 1);
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 default:
  {
   if (i1 & 1 | 0) break L11;
   _png_read_finish_row(i19);
   STACKTOP = i20;
   return;
  }
 } while (0);
 if (!(HEAP32[i19 + 208 >> 2] & 4)) _png_error(i19, 66060);
 i13 = i19 + 384 | 0;
 _png_read_IDAT_data(i19, HEAP32[i13 >> 2] | 0, i5 + 1 | 0);
 i1 = HEAP32[i13 >> 2] | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = i2 & 255;
 do if (!(i2 << 24 >> 24)) {
  i6 = i19 + 380 | 0;
  i7 = i5;
  i8 = i1;
 } else if ((i2 & 255) < 5) {
  i6 = i19 + 380 | 0;
  _png_read_filter_row(i19, i17, i1 + 1 | 0, (HEAP32[i6 >> 2] | 0) + 1 | 0, i3);
  i7 = HEAP32[i4 >> 2] | 0;
  i8 = HEAP32[i13 >> 2] | 0;
  break;
 } else _png_error(i19, 66093); while (0);
 _memcpy(HEAP32[i6 >> 2] | 0, i8 | 0, i7 + 1 | 0) | 0;
 L71 : do if (HEAP32[i19 + 708 >> 2] & 4 | 0) if ((HEAP8[i19 + 712 >> 0] | 0) == 64) {
  i1 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
  i4 = HEAP32[i17 >> 2] | 0;
  i2 = HEAP8[i9 >> 0] | 0;
  if (i2 & 2) switch (HEAP8[i10 >> 0] | 0) {
  case 8:
   {
    switch (i2 << 24 >> 24) {
    case 2:
     {
      i3 = 3;
      break;
     }
    case 6:
     {
      i3 = 4;
      break;
     }
    default:
     break L71;
    }
    if (!i4) break L71; else i2 = 0;
    while (1) {
     i9 = HEAPU8[i1 + 1 >> 0] | 0;
     HEAP8[i1 >> 0] = i9 + (HEAPU8[i1 >> 0] | 0);
     i10 = i1 + 2 | 0;
     HEAP8[i10 >> 0] = (HEAPU8[i10 >> 0] | 0) + i9;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + i3 | 0;
    }
    break;
   }
  case 16:
   {
    switch (i2 << 24 >> 24) {
    case 2:
     {
      i3 = 6;
      break;
     }
    case 6:
     {
      i3 = 8;
      break;
     }
    default:
     break L71;
    }
    if (!i4) break L71; else i2 = 0;
    while (1) {
     i7 = i1 + 1 | 0;
     i9 = HEAPU8[i1 + 2 >> 0] << 8 | HEAPU8[i1 + 3 >> 0];
     i8 = i1 + 4 | 0;
     i10 = i1 + 5 | 0;
     i6 = i9 + (HEAPU8[i1 >> 0] << 8 | HEAPU8[i7 >> 0]) | 0;
     i9 = (HEAPU8[i8 >> 0] << 8 | HEAPU8[i10 >> 0]) + i9 | 0;
     HEAP8[i1 >> 0] = i6 >>> 8;
     HEAP8[i7 >> 0] = i6;
     HEAP8[i8 >> 0] = i9 >>> 8;
     HEAP8[i10 >> 0] = i9;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + i3 | 0;
    }
    break;
   }
  default:
   break L71;
  }
 } while (0);
 i2 = i19 + 216 | 0;
 if (HEAP32[i2 >> 2] | 0) _png_do_read_transformations(i19, i17);
 i3 = i19 + 443 | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP8[i12 >> 0] | 0;
 if (!(i4 << 24 >> 24)) {
  HEAP8[i3 >> 0] = i1;
  if ((i1 & 255) > (HEAPU8[i19 + 442 >> 0] | 0)) _png_error(i19, 66119);
 } else if (i4 << 24 >> 24 != i1 << 24 >> 24) _png_error(i19, 66143);
 if (!(HEAP8[i11 >> 0] | 0)) i18 = 73; else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!(i1 & 2)) i18 = 73; else {
   i2 = HEAP8[i19 + 433 >> 0] | 0;
   if ((i2 & 255) < 6) _png_do_read_interlace(i17, (HEAP32[i13 >> 2] | 0) + 1 | 0, i2 & 255, i1);
   if (i16 | 0) _png_combine_row(i19, i16, 1);
   if (i15 | 0) _png_combine_row(i19, i15, 0);
  }
 }
 if ((i18 | 0) == 73) {
  if (i15 | 0) _png_combine_row(i19, i15, -1);
  if (i16 | 0) _png_combine_row(i19, i16, -1);
 }
 _png_read_finish_row(i19);
 i1 = HEAP32[i19 + 544 >> 2] | 0;
 if (!i1) {
  STACKTOP = i20;
  return;
 }
 FUNCTION_TABLE_viii[i1 & 63](i19, HEAP32[i14 >> 2] | 0, HEAPU8[i19 + 433 >> 0] | 0);
 STACKTOP = i20;
 return;
}

function _BlitBtoNAlpha(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i18 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i34 = HEAP32[i2 + 36 >> 2] | 0;
 i16 = HEAP32[(HEAP32[(HEAP32[i2 + 40 >> 2] | 0) + 4 >> 2] | 0) + 4 >> 2] | 0;
 i1 = HEAP32[i2 + 44 >> 2] | 0;
 i17 = HEAPU8[i2 + 63 >> 0] | 0;
 i19 = HEAP8[i1 + 9 >> 0] | 0;
 i20 = i19 & 255;
 i21 = ((i18 + 7 | 0) / -8 | 0) + i18 + (HEAP32[i2 + 16 >> 2] | 0) | 0;
 if (!i3) return;
 i22 = (i18 | 0) > 0;
 i23 = i1 + 28 | 0;
 i24 = i1 + 32 | 0;
 i25 = i1 + 29 | 0;
 i26 = i1 + 33 | 0;
 i27 = i1 + 30 | 0;
 i28 = i1 + 34 | 0;
 i29 = i1 + 31 | 0;
 i30 = i1 + 35 | 0;
 i31 = i1 + 12 | 0;
 i32 = i1 + 16 | 0;
 i33 = i1 + 20 | 0;
 i14 = i1 + 24 | 0;
 i15 = Math_imul(i18, i20) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 while (1) {
  i3 = i3 + -1 | 0;
  if (i22) {
   i4 = 0;
   i12 = 0;
   i13 = i2;
   while (1) {
    if (!(i12 & 7)) {
     i4 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    }
    i11 = i4 & 255;
    i10 = (i4 & 255) >>> 7 & 255;
    i10 = i16 + (i10 << 2) | 0;
    i8 = HEAPU8[i10 >> 0] | 0;
    i9 = HEAPU8[i10 + 1 >> 0] | 0;
    i10 = HEAPU8[i10 + 2 >> 0] | 0;
    switch (i19 << 24 >> 24) {
    case 1:
     {
      i7 = HEAPU8[i13 >> 0] | 0;
      i4 = HEAP8[(HEAP32[5724 + (HEAPU8[i29 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i30 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i27 >> 0] << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i7) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i25 >> 0] << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i26 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i23 >> 0] << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i24 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i7 = HEAPU16[i13 >> 1] | 0;
      i4 = HEAP8[(HEAP32[5724 + (HEAPU8[i29 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i30 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i27 >> 0] << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i7) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i25 >> 0] << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i26 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i23 >> 0] << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i24 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i4 = -1;
      i5 = HEAP8[i13 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i6 = HEAP8[i13 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i7 = HEAP8[i13 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i7 = HEAP32[i13 >> 2] | 0;
      i4 = HEAP8[(HEAP32[5724 + (HEAPU8[i29 >> 0] << 2) >> 2] | 0) + ((HEAP32[i14 >> 2] & i7) >>> (HEAPU8[i30 >> 0] | 0)) >> 0] | 0;
      i5 = HEAP8[(HEAP32[5724 + (HEAPU8[i27 >> 0] << 2) >> 2] | 0) + ((HEAP32[i33 >> 2] & i7) >>> (HEAPU8[i28 >> 0] | 0)) >> 0] | 0;
      i6 = HEAP8[(HEAP32[5724 + (HEAPU8[i25 >> 0] << 2) >> 2] | 0) + ((HEAP32[i32 >> 2] & i7) >>> (HEAPU8[i26 >> 0] | 0)) >> 0] | 0;
      i7 = HEAP8[(HEAP32[5724 + (HEAPU8[i23 >> 0] << 2) >> 2] | 0) + ((HEAP32[i31 >> 2] & i7) >>> (HEAPU8[i24 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i4 = 0;
      i5 = 0;
      i6 = 0;
      i7 = 0;
     }
    }
    i35 = i4 & 255;
    i4 = i5 & 255;
    i6 = i6 & 255;
    i7 = i7 & 255;
    i7 = (((Math_imul(i8 - i7 | 0, i17) | 0) >>> 0) / 255 | 0) + i7 | 0;
    i6 = (((Math_imul(i9 - i6 | 0, i17) | 0) >>> 0) / 255 | 0) + i6 | 0;
    i4 = (((Math_imul(i10 - i4 | 0, i17) | 0) >>> 0) / 255 | 0) + i4 | 0;
    i5 = i35 + i17 - (((Math_imul(i35, i17) | 0) >>> 0) / 255 | 0) | 0;
    switch (i19 << 24 >> 24) {
    case 1:
     {
      HEAP8[i13 >> 0] = i6 >>> (HEAPU8[i25 >> 0] | 0) << HEAPU8[i26 >> 0] | i7 >>> (HEAPU8[i23 >> 0] | 0) << HEAPU8[i24 >> 0] | i4 >>> (HEAPU8[i27 >> 0] | 0) << HEAPU8[i28 >> 0] | i5 >>> (HEAPU8[i29 >> 0] | 0) << HEAPU8[i30 >> 0];
      break;
     }
    case 2:
     {
      HEAP16[i13 >> 1] = i6 >>> (HEAPU8[i25 >> 0] | 0) << HEAPU8[i26 >> 0] | i7 >>> (HEAPU8[i23 >> 0] | 0) << HEAPU8[i24 >> 0] | i4 >>> (HEAPU8[i27 >> 0] | 0) << HEAPU8[i28 >> 0] | i5 >>> (HEAPU8[i29 >> 0] | 0) << HEAPU8[i30 >> 0];
      break;
     }
    case 3:
     {
      HEAP8[i13 + ((HEAPU8[i24 >> 0] | 0) >>> 3 & 255) >> 0] = i7;
      HEAP8[i13 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] = i6;
      HEAP8[i13 + ((HEAPU8[i28 >> 0] | 0) >>> 3 & 255) >> 0] = i4;
      break;
     }
    case 4:
     {
      HEAP32[i13 >> 2] = i6 >>> (HEAPU8[i25 >> 0] | 0) << HEAPU8[i26 >> 0] | i7 >>> (HEAPU8[i23 >> 0] | 0) << HEAPU8[i24 >> 0] | i4 >>> (HEAPU8[i27 >> 0] | 0) << HEAPU8[i28 >> 0] | i5 >>> (HEAPU8[i29 >> 0] | 0) << HEAPU8[i30 >> 0];
      break;
     }
    default:
     {}
    }
    i12 = i12 + 1 | 0;
    if ((i12 | 0) == (i18 | 0)) break; else {
     i4 = i11 << 1 & 255;
     i13 = i13 + i20 | 0;
    }
   }
   i2 = i2 + i15 | 0;
  }
  if (!i3) break; else {
   i1 = i1 + i21 | 0;
   i2 = i2 + i34 | 0;
  }
 }
 return;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i28, i29, i30, i31, i1, i21, i22, i23, i24, i25, i10, i11, i12, i26, i13) {
 i28 = i28 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i26 = i26 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i27 = 0, i32 = 0;
 HEAP32[i30 >> 2] = i28;
 i14 = i26 + 8 + 3 | 0;
 i27 = i26 + 4 | 0;
 i15 = i12 + 8 + 3 | 0;
 i16 = i12 + 4 | 0;
 i17 = (i31 & 512 | 0) == 0;
 i18 = (i13 | 0) > 0;
 i19 = i11 + 11 | 0;
 i20 = i11 + 4 | 0;
 i9 = 0;
 while (1) {
  if ((i9 | 0) == 4) break;
  L4 : do switch (HEAP8[i24 + i9 >> 0] | 0) {
  case 0:
   {
    HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 44 >> 2] & 63](i22, 32) | 0;
    i8 = HEAP32[i30 >> 2] | 0;
    HEAP32[i30 >> 2] = i8 + 4;
    HEAP32[i8 >> 2] = i7;
    break;
   }
  case 3:
   {
    i8 = HEAP8[i14 >> 0] | 0;
    i2 = i8 << 24 >> 24 < 0;
    if ((i2 ? HEAP32[i27 >> 2] | 0 : i8 & 255) | 0) {
     i7 = HEAP32[(i2 ? HEAP32[i26 >> 2] | 0 : i26) >> 2] | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     HEAP32[i30 >> 2] = i8 + 4;
     HEAP32[i8 >> 2] = i7;
    }
    break;
   }
  case 2:
   {
    i6 = HEAP8[i15 >> 0] | 0;
    i2 = i6 << 24 >> 24 < 0;
    i6 = i2 ? HEAP32[i16 >> 2] | 0 : i6 & 255;
    if (!(i17 | (i6 | 0) == 0)) {
     i5 = i2 ? HEAP32[i12 >> 2] | 0 : i12;
     i3 = i5 + (i6 << 2) | 0;
     i4 = HEAP32[i30 >> 2] | 0;
     i2 = i4;
     while (1) {
      if ((i5 | 0) == (i3 | 0)) break;
      HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
      i2 = i2 + 4 | 0;
      i5 = i5 + 4 | 0;
     }
     HEAP32[i30 >> 2] = i4 + (i6 << 2);
    }
    break;
   }
  case 4:
   {
    i3 = HEAP32[i30 >> 2] | 0;
    i1 = i23 ? i1 + 4 | 0 : i1;
    i2 = i1;
    while (1) {
     if (i2 >>> 0 >= i21 >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i22 >> 2] | 0) + 12 >> 2] & 63](i22, 2048, HEAP32[i2 >> 2] | 0) | 0)) break;
     i2 = i2 + 4 | 0;
    }
    if (i18) {
     i5 = i13;
     while (1) {
      i4 = (i5 | 0) > 0;
      if (!(i2 >>> 0 > i1 >>> 0 & i4)) break;
      i8 = i2 + -4 | 0;
      i6 = HEAP32[i8 >> 2] | 0;
      i7 = HEAP32[i30 >> 2] | 0;
      HEAP32[i30 >> 2] = i7 + 4;
      HEAP32[i7 >> 2] = i6;
      i5 = i5 + -1 | 0;
      i2 = i8;
     }
     if (i4) i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 44 >> 2] & 63](i22, 48) | 0; else i7 = 0;
     i6 = HEAP32[i30 >> 2] | 0;
     while (1) {
      i4 = i6 + 4 | 0;
      if ((i5 | 0) <= 0) break;
      HEAP32[i6 >> 2] = i7;
      i5 = i5 + -1 | 0;
      i6 = i4;
     }
     HEAP32[i30 >> 2] = i4;
     HEAP32[i6 >> 2] = i25;
    }
    if ((i2 | 0) == (i1 | 0)) {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 44 >> 2] & 63](i22, 48) | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     i2 = i8 + 4 | 0;
     HEAP32[i30 >> 2] = i2;
     HEAP32[i8 >> 2] = i7;
    } else {
     i8 = HEAP8[i19 >> 0] | 0;
     i4 = i8 << 24 >> 24 < 0;
     if (!((i4 ? HEAP32[i20 >> 2] | 0 : i8 & 255) | 0)) {
      i6 = -1;
      i5 = 0;
      i7 = 0;
     } else {
      i6 = HEAP8[(i4 ? HEAP32[i11 >> 2] | 0 : i11) >> 0] | 0;
      i5 = 0;
      i7 = 0;
     }
     while (1) {
      if ((i2 | 0) == (i1 | 0)) break;
      i4 = HEAP32[i30 >> 2] | 0;
      if ((i7 | 0) == (i6 | 0)) {
       i8 = i4 + 4 | 0;
       HEAP32[i30 >> 2] = i8;
       HEAP32[i4 >> 2] = i10;
       i5 = i5 + 1 | 0;
       i6 = HEAP8[i19 >> 0] | 0;
       i4 = i6 << 24 >> 24 < 0;
       if (i5 >>> 0 < (i4 ? HEAP32[i20 >> 2] | 0 : i6 & 255) >>> 0) {
        i6 = HEAP8[(i4 ? HEAP32[i11 >> 2] | 0 : i11) + i5 >> 0] | 0;
        i6 = i6 << 24 >> 24 | 0;
        i6 = (i6 | 0) == 127 ? -1 : i6 | 0;
        i7 = 0;
        i4 = i8;
       } else {
        i6 = i7;
        i7 = 0;
        i4 = i8;
       }
      }
      i8 = i2 + -4 | 0;
      i32 = HEAP32[i8 >> 2] | 0;
      HEAP32[i30 >> 2] = i4 + 4;
      HEAP32[i4 >> 2] = i32;
      i7 = i7 + 1 | 0;
      i2 = i8;
     }
     i2 = HEAP32[i30 >> 2] | 0;
    }
    if ((i3 | 0) != (i2 | 0)) while (1) {
     i2 = i2 + -4 | 0;
     if (i3 >>> 0 >= i2 >>> 0) break L4;
     i32 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i2 >> 2] = i32;
     i3 = i3 + 4 | 0;
    }
    break;
   }
  default:
   {}
  } while (0);
  i9 = i9 + 1 | 0;
 }
 i2 = HEAP8[i14 >> 0] | 0;
 i1 = i2 << 24 >> 24 < 0;
 i2 = i1 ? HEAP32[i27 >> 2] | 0 : i2 & 255;
 if (i2 >>> 0 > 1) {
  i3 = HEAP32[i26 >> 2] | 0;
  i5 = i1 ? i3 + 4 | 0 : i27;
  i2 = (i1 ? i3 : i26) + (i2 << 2) | 0;
  i3 = HEAP32[i30 >> 2] | 0;
  i4 = i2 - i5 | 0;
  i1 = i3;
  while (1) {
   if ((i5 | 0) == (i2 | 0)) break;
   HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
   i1 = i1 + 4 | 0;
   i5 = i5 + 4 | 0;
  }
  HEAP32[i30 >> 2] = i3 + (i4 >>> 2 << 2);
 }
 switch ((i31 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i29 >> 2] = i28;
 }
 return;
}

function _GLES2_UpdateTextureYUV(i3, i2, i24, i1, i27, i19, i20, i13, i14) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 i1 = i1 | 0;
 i27 = i27 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i26 = 0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i30 = i31;
 i29 = i3 + 320 | 0;
 i28 = HEAP32[i29 >> 2] | 0;
 i21 = HEAP32[i2 + 68 >> 2] | 0;
 i2 = HEAP32[i28 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i2 | 0)) {
  i2 = i28;
  i26 = 4;
 } else {
  HEAP32[i28 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i3 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i28 >> 2];
   _GLES2_UpdateViewport(i3) | 0;
   i2 = HEAP32[i29 >> 2] | 0;
   i26 = 4;
  }
 }
 if ((i26 | 0) == 4) if (HEAP32[i2 + 4 >> 2] | 0) {
  i2 = i2 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i2 >> 2] & 7]() | 0) != 0);
 }
 i18 = i24 + 8 | 0;
 if ((HEAP32[i18 >> 2] | 0) < 1) {
  i30 = 0;
  STACKTOP = i31;
  return i30 | 0;
 }
 i22 = i24 + 12 | 0;
 if ((HEAP32[i22 >> 2] | 0) < 1) {
  i30 = 0;
  STACKTOP = i31;
  return i30 | 0;
 }
 i15 = i28 + 28 | 0;
 i16 = i21 + 4 | 0;
 FUNCTION_TABLE_vii[HEAP32[i15 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i21 + 32 >> 2] | 0);
 i6 = HEAP32[i16 >> 2] | 0;
 i7 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
 i17 = i24 + 4 | 0;
 i8 = (HEAP32[i17 >> 2] | 0) / 2 | 0;
 i9 = (HEAP32[i18 >> 2] | 0) / 2 | 0;
 i2 = HEAP32[i22 >> 2] | 0;
 i10 = (i2 | 0) / 2 | 0;
 i23 = i21 + 8 | 0;
 i11 = HEAP32[i23 >> 2] | 0;
 i25 = i21 + 12 | 0;
 i12 = HEAP32[i25 >> 2] | 0;
 do if ((i9 | 0) == (i14 | 0)) {
  i3 = 0;
  i2 = i13;
  i26 = 14;
 } else {
  i5 = _SDL_malloc(Math_imul(i10, i9) | 0) | 0;
  if (!i5) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i2 | 0) > 1) {
   i3 = 0;
   i4 = i5;
   i2 = i13;
   while (1) {
    _SDL_memcpy(i4, i2, i9) | 0;
    i3 = i3 + 1 | 0;
    if ((i3 | 0) == (i10 | 0)) {
     i3 = i5;
     i2 = i5;
     i26 = 14;
     break;
    } else {
     i4 = i4 + i9 | 0;
     i2 = i2 + i14 | 0;
    }
   }
  } else {
   i3 = i5;
   i2 = i5;
   i26 = 14;
  }
 } while (0);
 if ((i26 | 0) == 14) {
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i28 + 164 >> 2] & 15](i6, 0, i7, i8, i9, i10, i11, i12, i2);
  if (i3 | 0) _SDL_free(i3);
 }
 FUNCTION_TABLE_vii[HEAP32[i15 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i21 + 36 >> 2] | 0);
 i6 = HEAP32[i16 >> 2] | 0;
 i7 = (HEAP32[i24 >> 2] | 0) / 2 | 0;
 i8 = (HEAP32[i17 >> 2] | 0) / 2 | 0;
 i9 = (HEAP32[i18 >> 2] | 0) / 2 | 0;
 i2 = HEAP32[i22 >> 2] | 0;
 i10 = (i2 | 0) / 2 | 0;
 i11 = HEAP32[i23 >> 2] | 0;
 i12 = HEAP32[i25 >> 2] | 0;
 do if ((i9 | 0) == (i20 | 0)) {
  i3 = 0;
  i2 = i19;
  i26 = 21;
 } else {
  i5 = _SDL_malloc(Math_imul(i10, i9) | 0) | 0;
  if (!i5) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i2 | 0) > 1) {
   i3 = 0;
   i4 = i5;
   i2 = i19;
   while (1) {
    _SDL_memcpy(i4, i2, i9) | 0;
    i3 = i3 + 1 | 0;
    if ((i3 | 0) == (i10 | 0)) {
     i3 = i5;
     i2 = i5;
     i26 = 21;
     break;
    } else {
     i4 = i4 + i9 | 0;
     i2 = i2 + i20 | 0;
    }
   }
  } else {
   i3 = i5;
   i2 = i5;
   i26 = 21;
  }
 } while (0);
 if ((i26 | 0) == 21) {
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i28 + 164 >> 2] & 15](i6, 0, i7, i8, i9, i10, i11, i12, i2);
  if (i3 | 0) _SDL_free(i3);
 }
 FUNCTION_TABLE_vii[HEAP32[i15 >> 2] & 127](HEAP32[i16 >> 2] | 0, HEAP32[i21 >> 2] | 0);
 i11 = HEAP32[i16 >> 2] | 0;
 i10 = HEAP32[i24 >> 2] | 0;
 i9 = HEAP32[i17 >> 2] | 0;
 i8 = HEAP32[i18 >> 2] | 0;
 i7 = HEAP32[i22 >> 2] | 0;
 i6 = HEAP32[i23 >> 2] | 0;
 i5 = HEAP32[i25 >> 2] | 0;
 do if ((i8 | 0) == (i27 | 0)) {
  i2 = 0;
  i26 = 28;
 } else {
  i4 = _SDL_malloc(Math_imul(i7, i8) | 0) | 0;
  if (!i4) {
   _SDL_Error(0) | 0;
   break;
  }
  if ((i7 | 0) > 0) {
   i2 = 0;
   i3 = i4;
   while (1) {
    _SDL_memcpy(i3, i1, i8) | 0;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == (i7 | 0)) {
     i2 = i4;
     i1 = i4;
     i26 = 28;
     break;
    } else {
     i3 = i3 + i8 | 0;
     i1 = i1 + i27 | 0;
    }
   }
  } else {
   i2 = i4;
   i1 = i4;
   i26 = 28;
  }
 } while (0);
 if ((i26 | 0) == 28) {
  FUNCTION_TABLE_viiiiiiiii[HEAP32[i28 + 164 >> 2] & 15](i11, 0, i10, i9, i8, i7, i6, i5, i1);
  if (i2 | 0) _SDL_free(i2);
 }
 i1 = HEAP32[i29 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i30 = 0;
  STACKTOP = i31;
  return i30 | 0;
 }
 i3 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
 if (!i1) {
  i30 = 0;
  STACKTOP = i31;
  return i30 | 0;
 }
 while (1) {
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i30 >> 2] = 45966;
  HEAP32[i30 + 4 >> 2] = 40071;
  HEAP32[i30 + 8 >> 2] = 803;
  HEAP32[i30 + 12 >> 2] = 45984;
  HEAP32[i30 + 16 >> 2] = i2;
  HEAP32[i30 + 20 >> 2] = i1;
  _SDL_SetError(40045, i30) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  }
 }
 STACKTOP = i31;
 return i1 | 0;
}

function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i28, i29, i30, i31, i1, i21, i22, i23, i24, i25, i9, i10, i11, i27, i12) {
 i28 = i28 | 0;
 i29 = i29 | 0;
 i30 = i30 | 0;
 i31 = i31 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i27 = i27 | 0;
 i12 = i12 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i26 = 0, i32 = 0, i33 = 0;
 HEAP32[i30 >> 2] = i28;
 i13 = i27 + 11 | 0;
 i26 = i27 + 4 | 0;
 i14 = i11 + 11 | 0;
 i15 = i11 + 4 | 0;
 i16 = (i31 & 512 | 0) == 0;
 i17 = i22 + 8 | 0;
 i18 = (i12 | 0) > 0;
 i19 = i10 + 11 | 0;
 i20 = i10 + 4 | 0;
 i8 = 0;
 while (1) {
  if ((i8 | 0) == 4) break;
  L4 : do switch (HEAP8[i24 + i8 >> 0] | 0) {
  case 0:
   {
    HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
    i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] & 63](i22, 32) | 0;
    i7 = HEAP32[i30 >> 2] | 0;
    HEAP32[i30 >> 2] = i7 + 1;
    HEAP8[i7 >> 0] = i6;
    break;
   }
  case 3:
   {
    i7 = HEAP8[i13 >> 0] | 0;
    i2 = i7 << 24 >> 24 < 0;
    if ((i2 ? HEAP32[i26 >> 2] | 0 : i7 & 255) | 0) {
     i6 = HEAP8[(i2 ? HEAP32[i27 >> 2] | 0 : i27) >> 0] | 0;
     i7 = HEAP32[i30 >> 2] | 0;
     HEAP32[i30 >> 2] = i7 + 1;
     HEAP8[i7 >> 0] = i6;
    }
    break;
   }
  case 2:
   {
    i3 = HEAP8[i14 >> 0] | 0;
    i2 = i3 << 24 >> 24 < 0;
    i3 = i2 ? HEAP32[i15 >> 2] | 0 : i3 & 255;
    if (!(i16 | (i3 | 0) == 0)) {
     i7 = i2 ? HEAP32[i11 >> 2] | 0 : i11;
     i4 = i7 + i3 | 0;
     i2 = HEAP32[i30 >> 2] | 0;
     i3 = i7;
     while (1) {
      if ((i3 | 0) == (i4 | 0)) break;
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      i2 = i2 + 1 | 0;
      i3 = i3 + 1 | 0;
     }
     HEAP32[i30 >> 2] = i2;
    }
    break;
   }
  case 4:
   {
    i3 = HEAP32[i30 >> 2] | 0;
    i1 = i23 ? i1 + 1 | 0 : i1;
    i4 = i1;
    while (1) {
     if (i4 >>> 0 >= i21 >>> 0) break;
     i2 = HEAP8[i4 >> 0] | 0;
     if (i2 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[i17 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break;
     i4 = i4 + 1 | 0;
    }
    if (i18) {
     i5 = i12;
     while (1) {
      i2 = (i5 | 0) > 0;
      if (!(i4 >>> 0 > i1 >>> 0 & i2)) break;
      i7 = i4 + -1 | 0;
      i2 = HEAP8[i7 >> 0] | 0;
      i6 = HEAP32[i30 >> 2] | 0;
      HEAP32[i30 >> 2] = i6 + 1;
      HEAP8[i6 >> 0] = i2;
      i5 = i5 + -1 | 0;
      i4 = i7;
     }
     if (i2) i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] & 63](i22, 48) | 0; else i6 = 0;
     i2 = i5;
     while (1) {
      i5 = HEAP32[i30 >> 2] | 0;
      HEAP32[i30 >> 2] = i5 + 1;
      if ((i2 | 0) <= 0) break;
      HEAP8[i5 >> 0] = i6;
      i2 = i2 + -1 | 0;
     }
     HEAP8[i5 >> 0] = i25;
    }
    L35 : do if ((i4 | 0) == (i1 | 0)) {
     i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i22 >> 2] | 0) + 28 >> 2] & 63](i22, 48) | 0;
     i7 = HEAP32[i30 >> 2] | 0;
     HEAP32[i30 >> 2] = i7 + 1;
     HEAP8[i7 >> 0] = i6;
    } else {
     i7 = HEAP8[i19 >> 0] | 0;
     i2 = i7 << 24 >> 24 < 0;
     if (!((i2 ? HEAP32[i20 >> 2] | 0 : i7 & 255) | 0)) {
      i6 = -1;
      i5 = 0;
      i7 = 0;
     } else {
      i6 = HEAP8[(i2 ? HEAP32[i10 >> 2] | 0 : i10) >> 0] | 0;
      i5 = 0;
      i7 = 0;
     }
     while (1) {
      if ((i4 | 0) == (i1 | 0)) break L35;
      if ((i7 | 0) == (i6 | 0)) {
       i6 = HEAP32[i30 >> 2] | 0;
       HEAP32[i30 >> 2] = i6 + 1;
       HEAP8[i6 >> 0] = i9;
       i5 = i5 + 1 | 0;
       i6 = HEAP8[i19 >> 0] | 0;
       i2 = i6 << 24 >> 24 < 0;
       if (i5 >>> 0 < (i2 ? HEAP32[i20 >> 2] | 0 : i6 & 255) >>> 0) {
        i6 = HEAP8[(i2 ? HEAP32[i10 >> 2] | 0 : i10) + i5 >> 0] | 0;
        i6 = i6 << 24 >> 24 | 0;
        i6 = (i6 | 0) == 127 ? -1 : i6 | 0;
        i2 = 0;
       } else {
        i6 = i7;
        i2 = 0;
       }
      } else i2 = i7;
      i32 = i4 + -1 | 0;
      i33 = HEAP8[i32 >> 0] | 0;
      i7 = HEAP32[i30 >> 2] | 0;
      HEAP32[i30 >> 2] = i7 + 1;
      HEAP8[i7 >> 0] = i33;
      i7 = i2 + 1 | 0;
      i4 = i32;
     }
    } while (0);
    i2 = HEAP32[i30 >> 2] | 0;
    if ((i3 | 0) != (i2 | 0)) while (1) {
     i2 = i2 + -1 | 0;
     if (i3 >>> 0 >= i2 >>> 0) break L4;
     i33 = HEAP8[i3 >> 0] | 0;
     HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
     HEAP8[i2 >> 0] = i33;
     i3 = i3 + 1 | 0;
    }
    break;
   }
  default:
   {}
  } while (0);
  i8 = i8 + 1 | 0;
 }
 i1 = HEAP8[i13 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 i1 = i2 ? HEAP32[i26 >> 2] | 0 : i1 & 255;
 if (i1 >>> 0 > 1) {
  i33 = i2 ? HEAP32[i27 >> 2] | 0 : i27;
  i3 = i33 + i1 | 0;
  i2 = HEAP32[i30 >> 2] | 0;
  i1 = i33;
  while (1) {
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i3 | 0)) break;
   HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
   i2 = i2 + 1 | 0;
  }
  HEAP32[i30 >> 2] = i2;
 }
 switch ((i31 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[i29 >> 2] = HEAP32[i30 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i29 >> 2] = i28;
 }
 return;
}

function _SDL_IntersectRectAndLine(i6, i21, i22, i23, i24) {
 i6 = i6 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i25 = 0;
 i25 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i25 + 32 | 0;
 i5 = i25 + 24 | 0;
 i4 = i25 + 16 | 0;
 i2 = i25 + 8 | 0;
 i1 = i25;
 if (!i6) {
  HEAP32[i1 >> 2] = 48192;
  _SDL_SetError(59509, i1) | 0;
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (!i21) {
  HEAP32[i2 >> 2] = 48197;
  _SDL_SetError(59509, i2) | 0;
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (!i22) {
  HEAP32[i4 >> 2] = 48200;
  _SDL_SetError(59509, i4) | 0;
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (!i23) {
  HEAP32[i5 >> 2] = 48203;
  _SDL_SetError(59509, i5) | 0;
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (!i24) {
  HEAP32[i3 >> 2] = 48206;
  _SDL_SetError(59509, i3) | 0;
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i3 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i3 | 0) < 1) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i4 = HEAP32[i6 + 12 >> 2] | 0;
 if ((i4 | 0) <= 0) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 i13 = HEAP32[i21 >> 2] | 0;
 i1 = HEAP32[i22 >> 2] | 0;
 i2 = HEAP32[i23 >> 2] | 0;
 i14 = HEAP32[i24 >> 2] | 0;
 i20 = HEAP32[i6 >> 2] | 0;
 i19 = HEAP32[i6 + 4 >> 2] | 0;
 i17 = i3 + i20 | 0;
 i18 = i17 + -1 | 0;
 i15 = i4 + i19 | 0;
 i16 = i15 + -1 | 0;
 i9 = (i13 | 0) < (i20 | 0);
 i4 = (i13 | 0) >= (i17 | 0);
 i8 = i9 | i4;
 i10 = (i2 | 0) < (i20 | 0);
 i11 = (i2 | 0) < (i17 | 0);
 i3 = i11 ^ 1;
 i5 = (i1 | 0) < (i19 | 0);
 i6 = (i1 | 0) >= (i15 | 0);
 i12 = (i14 | 0) < (i19 | 0);
 i7 = (i14 | 0) < (i15 | 0);
 if (i7 & ((i12 | (i6 | (i5 | (i10 | i8 | i3)))) ^ 1)) {
  i24 = 1;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (i9 & i10) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if (!((i7 | i6 ^ 1) & ((i5 & i12 | i4 & i3) ^ 1))) {
  i24 = 0;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((i1 | 0) == (i14 | 0)) {
  if (i8) HEAP32[i21 >> 2] = i9 ? i20 : i18;
  if (!(i10 | i3)) {
   i24 = 1;
   STACKTOP = i25;
   return i24 | 0;
  }
  HEAP32[i23 >> 2] = i10 ? i20 : i18;
  i24 = 1;
  STACKTOP = i25;
  return i24 | 0;
 }
 if ((i13 | 0) == (i2 | 0)) {
  if (i5 | i6) HEAP32[i22 >> 2] = i5 ? i19 : i16;
  if (!(i12 | i7 ^ 1)) {
   i24 = 1;
   STACKTOP = i25;
   return i24 | 0;
  }
  HEAP32[i24 >> 2] = i12 ? i19 : i16;
  i24 = 1;
  STACKTOP = i25;
  return i24 | 0;
 }
 i3 = i5 ? 2 : i6 & 1;
 if (i9) i5 = i3 | 4; else i5 = (i17 | 0) > (i13 | 0) ? i3 : i3 | 8;
 i3 = i12 ? 2 : (i15 | 0) <= (i14 | 0) & 1;
 i3 = i10 ? i3 | 4 : i11 ? i3 : i3 | 8;
 L60 : do if (!(i3 | i5)) {
  i4 = i13;
  i3 = i14;
 } else {
  i7 = i3;
  i12 = 0;
  i8 = 0;
  i4 = i13;
  i3 = i14;
  while (1) {
   i13 = i18 - i4 | 0;
   i14 = i20 - i4 | 0;
   i10 = i16 - i1 | 0;
   i11 = i19 - i1 | 0;
   if (i7 & i5 | 0) {
    i1 = 0;
    break;
   }
   i9 = i5;
   i6 = i12;
   i5 = (i5 | 0) == 0;
   while (1) {
    if (!i5) break;
    do if (!(i7 & 2)) {
     if (i7 & 1 | 0) {
      i7 = ((Math_imul(i2 - i4 | 0, i10) | 0) / (i3 - i1 | 0) | 0) + i4 | 0;
      i3 = i16;
      break;
     }
     if (i7 & 4 | 0) {
      i7 = i20;
      i3 = ((Math_imul(i14, i3 - i1 | 0) | 0) / (i2 - i4 | 0) | 0) + i1 | 0;
      break;
     }
     if (!(i7 & 8)) {
      i7 = i6;
      i3 = i8;
      break;
     }
     i7 = i18;
     i3 = ((Math_imul(i13, i3 - i1 | 0) | 0) / (i2 - i4 | 0) | 0) + i1 | 0;
    } else {
     i7 = ((Math_imul(i2 - i4 | 0, i11) | 0) / (i3 - i1 | 0) | 0) + i4 | 0;
     i3 = i19;
    } while (0);
    i5 = (i19 | 0) > (i3 | 0) ? 2 : (i15 | 0) <= (i3 | 0) & 1;
    if ((i20 | 0) > (i7 | 0)) {
     i9 = 0;
     i6 = i7;
     i8 = i3;
     i2 = i7;
     i7 = i5 | 4;
     i5 = 1;
     continue;
    }
    if ((i17 | 0) <= (i7 | 0)) {
     i9 = 0;
     i6 = i7;
     i8 = i3;
     i2 = i7;
     i7 = i5 | 8;
     i5 = 1;
     continue;
    }
    if (!i5) {
     i2 = i7;
     break L60;
    } else {
     i9 = 0;
     i6 = i7;
     i8 = i3;
     i2 = i7;
     i7 = i5;
     i5 = 1;
    }
   }
   do if (!(i9 & 2)) {
    if (i9 & 1 | 0) {
     i6 = ((Math_imul(i2 - i4 | 0, i10) | 0) / (i3 - i1 | 0) | 0) + i4 | 0;
     i1 = i16;
     break;
    }
    if (i9 & 4 | 0) {
     i6 = i20;
     i1 = ((Math_imul(i14, i3 - i1 | 0) | 0) / (i2 - i4 | 0) | 0) + i1 | 0;
     break;
    }
    if (!(i9 & 8)) {
     i1 = i8;
     break;
    }
    i6 = i18;
    i1 = ((Math_imul(i13, i3 - i1 | 0) | 0) / (i2 - i4 | 0) | 0) + i1 | 0;
   } else {
    i6 = ((Math_imul(i2 - i4 | 0, i11) | 0) / (i3 - i1 | 0) | 0) + i4 | 0;
    i1 = i19;
   } while (0);
   i4 = (i19 | 0) > (i1 | 0) ? 2 : (i15 | 0) <= (i1 | 0) & 1;
   if ((i20 | 0) > (i6 | 0)) i5 = i4 | 4; else i5 = (i17 | 0) > (i6 | 0) ? i4 : i4 | 8;
   if (!(i7 | i5)) {
    i4 = i6;
    break L60;
   } else {
    i12 = i6;
    i8 = i1;
    i4 = i6;
   }
  }
  STACKTOP = i25;
  return i1 | 0;
 } while (0);
 HEAP32[i21 >> 2] = i4;
 HEAP32[i22 >> 2] = i1;
 HEAP32[i23 >> 2] = i2;
 HEAP32[i24 >> 2] = i3;
 i24 = 1;
 STACKTOP = i25;
 return i24 | 0;
}

function _BlitNtoNCopyAlpha(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0;
 i33 = HEAP32[i3 + 24 >> 2] | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i42 = HEAP32[i3 + 16 >> 2] | 0;
 i43 = HEAP32[i3 + 36 >> 2] | 0;
 i2 = HEAP32[i3 + 40 >> 2] | 0;
 i29 = HEAP8[i2 + 9 >> 0] | 0;
 i30 = i29 & 255;
 i1 = HEAP32[i3 + 44 >> 2] | 0;
 i31 = HEAP8[i1 + 9 >> 0] | 0;
 i32 = i31 & 255;
 if (!i4) return;
 i34 = (i33 | 0) == 0;
 i35 = i1 + 28 | 0;
 i36 = i1 + 32 | 0;
 i37 = i1 + 29 | 0;
 i38 = i1 + 33 | 0;
 i39 = i1 + 30 | 0;
 i40 = i1 + 34 | 0;
 i41 = i1 + 31 | 0;
 i17 = i1 + 35 | 0;
 i18 = i2 + 28 | 0;
 i19 = i2 + 12 | 0;
 i20 = i2 + 32 | 0;
 i21 = i2 + 29 | 0;
 i22 = i2 + 16 | 0;
 i23 = i2 + 33 | 0;
 i24 = i2 + 30 | 0;
 i25 = i2 + 20 | 0;
 i26 = i2 + 34 | 0;
 i27 = i2 + 31 | 0;
 i28 = i2 + 24 | 0;
 i14 = i2 + 35 | 0;
 i15 = Math_imul(i33, i32) | 0;
 i16 = Math_imul(i33, i30) | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 while (1) {
  i4 = i4 + -1 | 0;
  if (!i34) {
   i13 = i1 + i15 | 0;
   i12 = i33;
   i11 = i2;
   while (1) {
    switch (i29 << 24 >> 24) {
    case 1:
     {
      i10 = HEAPU8[i11 >> 0] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i10) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i10) >>> (HEAPU8[i26 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i10) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i10) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 2:
     {
      i10 = HEAPU16[i11 >> 1] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i10) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i10) >>> (HEAPU8[i26 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i10) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i10) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    case 3:
     {
      i3 = -1;
      i8 = HEAP8[i11 + ((HEAPU8[i26 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i9 = HEAP8[i11 + ((HEAPU8[i23 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      i10 = HEAP8[i11 + ((HEAPU8[i20 >> 0] | 0) >>> 3 & 255) >> 0] | 0;
      break;
     }
    case 4:
     {
      i10 = HEAP32[i11 >> 2] | 0;
      i3 = HEAP8[(HEAP32[5724 + ((HEAPU8[i27 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i28 >> 2] & i10) >>> (HEAPU8[i14 >> 0] | 0)) >> 0] | 0;
      i8 = HEAP8[(HEAP32[5724 + ((HEAPU8[i24 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i25 >> 2] & i10) >>> (HEAPU8[i26 >> 0] | 0)) >> 0] | 0;
      i9 = HEAP8[(HEAP32[5724 + ((HEAPU8[i21 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i22 >> 2] & i10) >>> (HEAPU8[i23 >> 0] | 0)) >> 0] | 0;
      i10 = HEAP8[(HEAP32[5724 + ((HEAPU8[i18 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i19 >> 2] & i10) >>> (HEAPU8[i20 >> 0] | 0)) >> 0] | 0;
      break;
     }
    default:
     {
      i3 = 0;
      i8 = 0;
      i9 = 0;
      i10 = 0;
     }
    }
    i3 = i3 & 255;
    i5 = i8 & 255;
    i6 = i9 & 255;
    i7 = i10 & 255;
    switch (i31 << 24 >> 24) {
    case 1:
     {
      HEAP8[i1 >> 0] = i6 >>> (HEAPU8[i37 >> 0] | 0) << (HEAPU8[i38 >> 0] | 0) | i7 >>> (HEAPU8[i35 >> 0] | 0) << (HEAPU8[i36 >> 0] | 0) | i5 >>> (HEAPU8[i39 >> 0] | 0) << (HEAPU8[i40 >> 0] | 0) | i3 >>> (HEAPU8[i41 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0);
      break;
     }
    case 2:
     {
      HEAP16[i1 >> 1] = i6 >>> (HEAPU8[i37 >> 0] | 0) << (HEAPU8[i38 >> 0] | 0) | i7 >>> (HEAPU8[i35 >> 0] | 0) << (HEAPU8[i36 >> 0] | 0) | i5 >>> (HEAPU8[i39 >> 0] | 0) << (HEAPU8[i40 >> 0] | 0) | i3 >>> (HEAPU8[i41 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0);
      break;
     }
    case 3:
     {
      HEAP8[i1 + ((HEAPU8[i36 >> 0] | 0) >>> 3 & 255) >> 0] = i10;
      HEAP8[i1 + ((HEAPU8[i38 >> 0] | 0) >>> 3 & 255) >> 0] = i9;
      HEAP8[i1 + ((HEAPU8[i40 >> 0] | 0) >>> 3 & 255) >> 0] = i8;
      break;
     }
    case 4:
     {
      HEAP32[i1 >> 2] = i6 >>> (HEAPU8[i37 >> 0] | 0) << (HEAPU8[i38 >> 0] | 0) | i7 >>> (HEAPU8[i35 >> 0] | 0) << (HEAPU8[i36 >> 0] | 0) | i5 >>> (HEAPU8[i39 >> 0] | 0) << (HEAPU8[i40 >> 0] | 0) | i3 >>> (HEAPU8[i41 >> 0] | 0) << (HEAPU8[i17 >> 0] | 0);
      break;
     }
    default:
     {}
    }
    i12 = i12 + -1 | 0;
    if (!i12) break; else {
     i1 = i1 + i32 | 0;
     i11 = i11 + i30 | 0;
    }
   }
   i2 = i2 + i16 | 0;
   i1 = i13;
  }
  if (!i4) break; else {
   i2 = i2 + i42 | 0;
   i1 = i1 + i43 | 0;
  }
 }
 return;
}

function _png_build_gamma_table(i14, i1) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i5 = i14 + 492 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  if (HEAP32[i14 + 496 >> 2] | 0) i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  _png_warning(i14, 62486);
  _png_destroy_gamma_table(i14);
 }
 if ((i1 | 0) >= 9) {
  if (!(HEAP8[i14 + 435 >> 0] & 2)) i1 = HEAP8[i14 + 519 >> 0] | 0; else {
   i1 = HEAP8[i14 + 516 >> 0] | 0;
   i13 = HEAP8[i14 + 517 >> 0] | 0;
   i1 = (i13 & 255) > (i1 & 255) ? i13 : i1;
   i13 = HEAP8[i14 + 518 >> 0] | 0;
   i1 = (i13 & 255) > (i1 & 255) ? i13 : i1;
  }
  i13 = (i1 + -1 & 255) < 15 ? 16 - i1 << 24 >> 24 : 0;
  i11 = i14 + 216 | 0;
  i10 = HEAP32[i11 >> 2] & 67109888;
  i13 = (i10 | 0) != 0 & (i13 & 255) < 5 ? 5 : i13;
  i13 = ((i13 & 255) < 8 ? i13 : 8) & 255;
  HEAP32[i14 + 484 >> 2] = i13;
  i4 = i14 + 496 | 0;
  i12 = i14 + 488 | 0;
  i2 = HEAP32[i12 >> 2] | 0;
  i1 = (i2 | 0) > 0;
  if (!i10) {
   do if (i1) {
    i1 = HEAP32[i14 + 824 >> 2] | 0;
    if (i1 | 0) {
     d3 = +Math_floor(+(1.0e15 / +(i1 | 0) / +(i2 | 0) + .5));
     if (!(!(d3 >= -2147483648.0) | !(d3 <= 2147483647.0))) {
      i1 = ~~d3;
      break;
     }
    }
    i1 = 0;
   } else i1 = 1e5; while (0);
   _png_build_16bit_table(i14, i4, i13, i1);
  } else {
   if (i1) {
    d3 = +Math_floor(+(+(HEAP32[i14 + 824 >> 2] | 0) * 1.0e-05 * +(i2 | 0) + .5));
    d3 = d3 <= 2147483647.0 & d3 >= -2147483648.0 ? +(~~d3 | 0) * 1.0e-05 : 0.0;
   } else d3 = 1.0;
   i9 = 8 - i13 | 0;
   i8 = 1 << i9;
   i2 = 16 - i13 | 0;
   i10 = _png_calloc(i14, i8 << 2) | 0;
   HEAP32[i4 >> 2] = i10;
   i1 = 0;
   do {
    HEAP32[i10 + (i1 << 2) >> 2] = _png_malloc(i14, 512) | 0;
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < i8 >>> 0);
   i6 = (1 << i2) + -1 | 0;
   i7 = 255 >>> i13;
   i1 = 0;
   i5 = 0;
   do {
    i2 = i5 * 257 | 0;
    i4 = i2 & 65535;
    i2 = (((Math_imul(i6, ~~+Math_floor(+(+Math_pow(+(+(i2 + 128 | 0) / 65535.0), +d3) * 65535.0 + .5)) & 65535) | 0) + 32768 | 0) >>> 0) / 65535 | 0;
    if (i1 >>> 0 <= i2 >>> 0) {
     i2 = i2 + 1 | 0;
     do {
      HEAP16[(HEAP32[i10 + ((i1 & i7) << 2) >> 2] | 0) + (i1 >>> i9 << 1) >> 1] = i4;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) != (i2 | 0));
     i1 = i2;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) != 255);
   i2 = i8 << 8;
   if (i1 >>> 0 < i2 >>> 0) do {
    HEAP16[(HEAP32[i10 + ((i1 & i7) << 2) >> 2] | 0) + (i1 >>> i9 << 1) >> 1] = -1;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i2 | 0));
  }
  if (!(HEAP32[i11 >> 2] & 6291584)) return;
  i2 = i14 + 824 | 0;
  d3 = +Math_floor(+(1.0e10 / +(HEAP32[i2 >> 2] | 0) + .5));
  _png_build_16bit_table(i14, i14 + 512 | 0, i13, d3 <= 2147483647.0 & d3 >= -2147483648.0 ? ~~d3 : 0);
  i1 = HEAP32[i12 >> 2] | 0;
  if ((i1 | 0) > 0) {
   d3 = +Math_floor(+(1.0e10 / +(i1 | 0) + .5));
   i1 = d3 <= 2147483647.0 & d3 >= -2147483648.0 ? ~~d3 : 0;
  } else i1 = HEAP32[i2 >> 2] | 0;
  _png_build_16bit_table(i14, i14 + 508 | 0, i13, i1);
  return;
 }
 i6 = i14 + 488 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if ((i1 | 0) > 0) {
  i2 = HEAP32[i14 + 824 >> 2] | 0;
  if (i2 | 0) {
   d3 = +Math_floor(+(1.0e15 / +(i2 | 0) / +(i1 | 0) + .5));
   if (!(!(d3 >= -2147483648.0) | !(d3 <= 2147483647.0))) {
    i1 = ~~d3;
    break;
   }
  }
  i1 = 0;
 } else i1 = 1e5; while (0);
 i4 = _png_malloc(i14, 256) | 0;
 HEAP32[i5 >> 2] = i4;
 if ((i1 + -95e3 | 0) >>> 0 < 10001) {
  i1 = 0;
  do {
   HEAP8[i4 + i1 >> 0] = i1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 256);
 } else {
  d3 = +(i1 | 0) * 1.0e-05;
  i2 = 0;
  do {
   if ((i2 + -1 | 0) >>> 0 < 254) i1 = ~~+Math_floor(+(+Math_pow(+(+(i2 | 0) / 255.0), +d3) * 255.0 + .5)) & 255; else i1 = i2 & 255;
   HEAP8[i4 + i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 256);
 }
 if (!(HEAP32[i14 + 216 >> 2] & 6291584)) return;
 i5 = i14 + 824 | 0;
 d3 = +Math_floor(+(1.0e10 / +(HEAP32[i5 >> 2] | 0) + .5));
 i1 = d3 <= 2147483647.0 & d3 >= -2147483648.0 ? ~~d3 : 0;
 i4 = _png_malloc(i14, 256) | 0;
 HEAP32[i14 + 504 >> 2] = i4;
 if ((i1 + -95e3 | 0) >>> 0 < 10001) {
  i1 = 0;
  do {
   HEAP8[i4 + i1 >> 0] = i1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 256);
 } else {
  d3 = +(i1 | 0) * 1.0e-05;
  i2 = 0;
  do {
   if ((i2 + -1 | 0) >>> 0 < 254) i1 = ~~+Math_floor(+(+Math_pow(+(+(i2 | 0) / 255.0), +d3) * 255.0 + .5)) & 255; else i1 = i2 & 255;
   HEAP8[i4 + i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 256);
 }
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) > 0) {
  d3 = +Math_floor(+(1.0e10 / +(i1 | 0) + .5));
  i1 = d3 <= 2147483647.0 & d3 >= -2147483648.0 ? ~~d3 : 0;
 } else i1 = HEAP32[i5 >> 2] | 0;
 i4 = _png_malloc(i14, 256) | 0;
 HEAP32[i14 + 500 >> 2] = i4;
 if ((i1 + -95e3 | 0) >>> 0 < 10001) {
  i1 = 0;
  do {
   HEAP8[i4 + i1 >> 0] = i1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 256);
  return;
 }
 d3 = +(i1 | 0) * 1.0e-05;
 i2 = 0;
 do {
  if ((i2 + -1 | 0) >>> 0 < 254) i1 = ~~+Math_floor(+(+Math_pow(+(+(i2 | 0) / 255.0), +d3) * 255.0 + .5)) & 255; else i1 = i2 & 255;
  HEAP8[i4 + i2 >> 0] = i1;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 256);
 return;
}

function _twoway_strstr(i15, i16) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0;
 i4 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 i17 = i19 + 1024 | 0;
 i18 = i19;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 HEAP32[i17 + 12 >> 2] = 0;
 HEAP32[i17 + 16 >> 2] = 0;
 HEAP32[i17 + 20 >> 2] = 0;
 HEAP32[i17 + 24 >> 2] = 0;
 HEAP32[i17 + 28 >> 2] = 0;
 i1 = HEAP8[i16 >> 0] | 0;
 L1 : do if (!(i1 << 24 >> 24)) {
  i5 = 1;
  i1 = -1;
  i14 = 0;
  i2 = 1;
  i3 = -1;
  i4 = 26;
 } else {
  i14 = 0;
  do {
   if (!(HEAP8[i15 + i14 >> 0] | 0)) {
    i1 = 0;
    break L1;
   }
   i13 = i17 + (((i1 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1 << (i1 & 31);
   i14 = i14 + 1 | 0;
   HEAP32[i18 + ((i1 & 255) << 2) >> 2] = i14;
   i1 = HEAP8[i16 + i14 >> 0] | 0;
  } while (i1 << 24 >> 24 != 0);
  i8 = i14 >>> 0 > 1;
  if (i8) {
   i2 = 0;
   i7 = -1;
   i3 = 1;
   L6 : while (1) {
    i4 = 1;
    i1 = i2;
    while (1) {
     i2 = i3;
     L10 : while (1) {
      i6 = 1;
      while (1) {
       i3 = HEAP8[i16 + (i6 + i7) >> 0] | 0;
       i5 = HEAP8[i16 + i2 >> 0] | 0;
       if (i3 << 24 >> 24 != i5 << 24 >> 24) break L10;
       if ((i6 | 0) == (i4 | 0)) break;
       i6 = i6 + 1 | 0;
       i2 = i6 + i1 | 0;
       if (i2 >>> 0 >= i14 >>> 0) {
        i9 = i4;
        i1 = i7;
        break L6;
       }
      }
      i1 = i4 + i1 | 0;
      i2 = i1 + 1 | 0;
      if (i2 >>> 0 >= i14 >>> 0) {
       i9 = i4;
       i1 = i7;
       break L6;
      }
     }
     i4 = i2 - i7 | 0;
     if ((i3 & 255) <= (i5 & 255)) break;
     i3 = i2 + 1 | 0;
     if (i3 >>> 0 >= i14 >>> 0) {
      i9 = i4;
      i1 = i7;
      break L6;
     } else i1 = i2;
    }
    i3 = i1 + 2 | 0;
    if (i3 >>> 0 >= i14 >>> 0) {
     i9 = 1;
     break;
    } else {
     i2 = i1 + 1 | 0;
     i7 = i1;
    }
   }
   if (i8) {
    i4 = 0;
    i8 = -1;
    i5 = 1;
    while (1) {
     i2 = 1;
     i3 = i4;
     while (1) {
      i4 = i5;
      L25 : while (1) {
       i7 = 1;
       while (1) {
        i5 = HEAP8[i16 + (i7 + i8) >> 0] | 0;
        i6 = HEAP8[i16 + i4 >> 0] | 0;
        if (i5 << 24 >> 24 != i6 << 24 >> 24) break L25;
        if ((i7 | 0) == (i2 | 0)) break;
        i7 = i7 + 1 | 0;
        i4 = i7 + i3 | 0;
        if (i4 >>> 0 >= i14 >>> 0) {
         i5 = i9;
         i3 = i8;
         i4 = 26;
         break L1;
        }
       }
       i3 = i2 + i3 | 0;
       i4 = i3 + 1 | 0;
       if (i4 >>> 0 >= i14 >>> 0) {
        i5 = i9;
        i3 = i8;
        i4 = 26;
        break L1;
       }
      }
      i2 = i4 - i8 | 0;
      if ((i5 & 255) >= (i6 & 255)) break;
      i5 = i4 + 1 | 0;
      if (i5 >>> 0 >= i14 >>> 0) {
       i5 = i9;
       i3 = i8;
       i4 = 26;
       break L1;
      } else i3 = i4;
     }
     i5 = i3 + 2 | 0;
     if (i5 >>> 0 >= i14 >>> 0) {
      i5 = i9;
      i2 = 1;
      i4 = 26;
      break;
     } else {
      i4 = i3 + 1 | 0;
      i8 = i3;
     }
    }
   } else {
    i5 = i9;
    i2 = 1;
    i3 = -1;
    i4 = 26;
   }
  } else {
   i5 = 1;
   i1 = -1;
   i2 = 1;
   i3 = -1;
   i4 = 26;
  }
 } while (0);
 L35 : do if ((i4 | 0) == 26) {
  i12 = (i3 + 1 | 0) >>> 0 > (i1 + 1 | 0) >>> 0;
  i2 = i12 ? i2 : i5;
  i12 = i12 ? i3 : i1;
  i13 = i12 + 1 | 0;
  if (!(_memcmp(i16, i16 + i2 | 0, i13) | 0)) i11 = i14 - i2 | 0; else {
   i2 = i14 - i12 + -1 | 0;
   i11 = 0;
   i2 = (i12 >>> 0 > i2 >>> 0 ? i12 : i2) + 1 | 0;
  }
  i7 = i14 | 63;
  i8 = i14 + -1 | 0;
  i9 = (i11 | 0) != 0;
  i10 = i14 - i2 | 0;
  i1 = i15;
  i6 = 0;
  i3 = i15;
  while (1) {
   i4 = i1;
   do if ((i3 - i4 | 0) >>> 0 < i14 >>> 0) {
    i5 = _memchr(i3, 0, i7) | 0;
    if (!i5) {
     i5 = i3 + i7 | 0;
     break;
    } else if ((i5 - i4 | 0) >>> 0 < i14 >>> 0) {
     i1 = 0;
     break L35;
    } else break;
   } else i5 = i3; while (0);
   i3 = HEAP8[i1 + i8 >> 0] | 0;
   L49 : do if (!(1 << (i3 & 31) & HEAP32[i17 + (((i3 & 255) >>> 5 & 255) << 2) >> 2])) {
    i4 = 0;
    i3 = i14;
   } else {
    i3 = i14 - (HEAP32[i18 + ((i3 & 255) << 2) >> 2] | 0) | 0;
    if (i3 | 0) {
     i4 = 0;
     i3 = i9 & (i6 | 0) != 0 & i3 >>> 0 < i2 >>> 0 ? i10 : i3;
     break;
    }
    i3 = i13 >>> 0 > i6 >>> 0 ? i13 : i6;
    i4 = HEAP8[i16 + i3 >> 0] | 0;
    L54 : do if (!(i4 << 24 >> 24)) i3 = i13; else {
     while (1) {
      if (i4 << 24 >> 24 != (HEAP8[i1 + i3 >> 0] | 0)) break;
      i3 = i3 + 1 | 0;
      i4 = HEAP8[i16 + i3 >> 0] | 0;
      if (!(i4 << 24 >> 24)) {
       i3 = i13;
       break L54;
      }
     }
     i4 = 0;
     i3 = i3 - i12 | 0;
     break L49;
    } while (0);
    while (1) {
     if (i3 >>> 0 <= i6 >>> 0) break L35;
     i3 = i3 + -1 | 0;
     if ((HEAP8[i16 + i3 >> 0] | 0) != (HEAP8[i1 + i3 >> 0] | 0)) {
      i4 = i11;
      i3 = i2;
      break;
     }
    }
   } while (0);
   i1 = i1 + i3 | 0;
   i6 = i4;
   i3 = i5;
  }
 } while (0);
 STACKTOP = i19;
 return i1 | 0;
}

function _SDL_VideoInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i7 + 16 | 0;
 i2 = i7 + 8 | 0;
 i4 = i7;
 if (HEAP32[19487] | 0) _SDL_VideoQuit();
 _SDL_TicksInit();
 if ((_SDL_InitSubSystem(16384) | 0) < 0) {
  i6 = -1;
  STACKTOP = i7;
  return i6 | 0;
 }
 if ((_SDL_KeyboardInit() | 0) < 0) {
  i6 = -1;
  STACKTOP = i7;
  return i6 | 0;
 }
 if ((_SDL_MouseInit() | 0) < 0) {
  i6 = -1;
  STACKTOP = i7;
  return i6 | 0;
 }
 if ((_SDL_TouchInit() | 0) < 0) {
  i6 = -1;
  STACKTOP = i7;
  return i6 | 0;
 }
 do if (!i1) {
  i1 = _SDL_getenv(59181) | 0;
  if (!i1) {
   if (FUNCTION_TABLE_i[HEAP32[15264 >> 2] & 7]() | 0) {
    i1 = FUNCTION_TABLE_ii[HEAP32[15268 >> 2] & 255](0) | 0;
    if (i1 | 0) {
     i2 = i1;
     i1 = 0;
     break;
    }
   }
   if (FUNCTION_TABLE_i[HEAP32[16188 >> 2] & 7]() | 0) {
    i1 = FUNCTION_TABLE_ii[HEAP32[16192 >> 2] & 255](0) | 0;
    if (i1 | 0) {
     i2 = i1;
     i1 = 1;
     break;
    }
   }
   i6 = _SDL_SetError(59214, i2) | 0;
   STACKTOP = i7;
   return i6 | 0;
  } else {
   i3 = i1;
   i6 = 10;
  }
 } else {
  i3 = i1;
  i6 = 10;
 } while (0);
 do if ((i6 | 0) == 10) {
  i6 = HEAP32[3814] | 0;
  if (!(_SDL_strncasecmp(i6, i3, _SDL_strlen(i3) | 0) | 0)) if (!(FUNCTION_TABLE_i[HEAP32[15264 >> 2] & 7]() | 0)) i6 = 12; else {
   i1 = 0;
   i2 = 16244;
   i6 = 15;
  } else i6 = 12;
  if ((i6 | 0) == 12) {
   i2 = HEAP32[4045] | 0;
   if (!(_SDL_strncasecmp(i2, i3, _SDL_strlen(i3) | 0) | 0)) if (FUNCTION_TABLE_i[HEAP32[16188 >> 2] & 7]() | 0) {
    i1 = 1;
    i2 = 16248;
    i6 = 15;
   }
  }
  if ((i6 | 0) == 15) {
   i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 255](0) | 0;
   if (i2 | 0) break;
  }
  HEAP32[i4 >> 2] = i3;
  i6 = _SDL_SetError(59197, i4) | 0;
  STACKTOP = i7;
  return i6 | 0;
 } while (0);
 HEAP32[19487] = i2;
 HEAP32[i2 >> 2] = HEAP32[HEAP32[16244 + (i1 << 2) >> 2] >> 2];
 i1 = HEAP32[19487] | 0;
 HEAP32[i1 + 284 >> 2] = 1;
 HEAP32[i1 + 388 >> 2] = 0;
 HEAP32[i1 + 648 >> 2] = 0;
 if (i1 | 0) {
  HEAP32[i1 + 292 >> 2] = 3;
  HEAP32[i1 + 296 >> 2] = 3;
  HEAP32[i1 + 300 >> 2] = 2;
  HEAP32[i1 + 304 >> 2] = 0;
  HEAP32[i1 + 312 >> 2] = 0;
  HEAP32[i1 + 308 >> 2] = 16;
  HEAP32[i1 + 316 >> 2] = 0;
  HEAP32[i1 + 320 >> 2] = 1;
  i4 = i1 + 324 | 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i4 + 12 >> 2] = 0;
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i4 + 20 >> 2] = 0;
  HEAP32[i4 + 24 >> 2] = 0;
  HEAP32[i1 + 384 >> 2] = 1;
  HEAP32[i1 + 352 >> 2] = -1;
  HEAP32[i1 + 356 >> 2] = 2;
  HEAP32[i1 + 360 >> 2] = 0;
  HEAP32[i1 + 368 >> 2] = 4;
  HEAP32[i1 + 364 >> 2] = 0;
  HEAP32[i1 + 380 >> 2] = 0;
  HEAP32[i1 + 376 >> 2] = 1;
  HEAP32[i1 + 372 >> 2] = 0;
 }
 i3 = _SDL_TLSCreate() | 0;
 HEAP32[(HEAP32[19487] | 0) + 660 >> 2] = i3;
 i3 = _SDL_TLSCreate() | 0;
 i4 = HEAP32[19487] | 0;
 HEAP32[i4 + 664 >> 2] = i3;
 if ((FUNCTION_TABLE_ii[HEAP32[i4 + 4 >> 2] & 255](i4) | 0) < 0) {
  _SDL_VideoQuit();
  i6 = -1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = HEAP32[19487] | 0;
 if (!(HEAP32[i1 + 264 >> 2] | 0)) {
  _SDL_VideoQuit();
  i6 = _SDL_SetError(59240, i5) | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 do if (!(HEAP32[i1 + 132 >> 2] | 0)) i6 = 31; else {
  i1 = _SDL_GetHint(60045) | 0;
  if (i1 | 0) if (!(_SDL_strcasecmp(i1, 59282) | 0)) break;
  i1 = _SDL_GetHint(59291) | 0;
  if (i1 | 0) if ((HEAP8[i1 >> 0] | 0) != 48) if (_SDL_strcasecmp(i1, 75216) | 0) {
   i1 = HEAP32[19487] | 0;
   i6 = 31;
  }
 } while (0);
 if ((i6 | 0) == 31) {
  HEAP32[i1 + 132 >> 2] = 38;
  HEAP32[i1 + 136 >> 2] = 27;
  HEAP32[i1 + 140 >> 2] = 56;
 }
 if (!(_SDL_GetHintBoolean(59320, 0) | 0)) {
  i2 = HEAP32[19487] | 0;
  if (i2 | 0) {
   i1 = i2 + 260 | 0;
   if (!(HEAP32[i1 >> 2] | 0)) {
    HEAP32[i1 >> 2] = 1;
    i1 = HEAP32[i2 + 208 >> 2] | 0;
    if (!i1) i6 = 37; else {
     FUNCTION_TABLE_vi[i1 & 511](i2);
     i6 = 37;
    }
   } else i6 = 37;
  }
 } else i6 = 37;
 if ((i6 | 0) == 37) {
  i1 = HEAP32[19487] | 0;
  if (i1 | 0) {
   i2 = HEAP32[i1 + 224 >> 2] | 0;
   if (i2 | 0) if (FUNCTION_TABLE_ii[i2 & 255](i1) | 0) {
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
  }
 }
 _SDL_EventState(771, 1) | 0;
 _SDL_EventState(770, 1) | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = HEAP32[i1 + 272 >> 2] | 0;
 do if (i2) {
  do {
   if (HEAP32[i2 + 48 >> 2] & 512 | 0) {
    i6 = 44;
    break;
   }
   i2 = HEAP32[i2 + 152 >> 2] | 0;
  } while ((i2 | 0) != 0);
  if ((i6 | 0) == 44) {
   i3 = HEAP32[i1 + 228 >> 2] | 0;
   if (!i3) break;
   FUNCTION_TABLE_vii[i3 & 127](i1, i2);
   i1 = HEAP32[19487] | 0;
  }
  if (!i1) {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
 } while (0);
 i2 = HEAP32[i1 + 212 >> 2] | 0;
 if (!i2) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[i2 & 511](i1);
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _mbsrtowcs(i5, i9, i1, i3) {
 i5 = i5 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if (!i3) i8 = 5; else {
  i4 = HEAP32[i3 >> 2] | 0;
  if (!i4) i8 = 5; else if (!i5) {
   i6 = i2;
   i3 = i1;
   i8 = 25;
  } else {
   HEAP32[i3 >> 2] = 0;
   i7 = i1;
   i6 = i2;
   i8 = 43;
  }
 }
 L5 : do if ((i8 | 0) == 5) {
  i3 = (i5 | 0) != 0;
  if (HEAP32[HEAP32[(___pthread_self_441() | 0) + 188 >> 2] >> 2] | 0) if (i3) {
   i3 = i1;
   i8 = 15;
   break;
  } else {
   i3 = i1;
   i8 = 14;
   break;
  }
  if (!i3) {
   i1 = _strlen(i2) | 0;
   i8 = 59;
   break;
  }
  L13 : do if (i1) {
   i3 = i1;
   while (1) {
    i4 = HEAP8[i2 >> 0] | 0;
    if (!(i4 << 24 >> 24)) break;
    i2 = i2 + 1 | 0;
    HEAP32[i5 >> 2] = i4 << 24 >> 24 & 57343;
    i3 = i3 + -1 | 0;
    if (!i3) break L13; else i5 = i5 + 4 | 0;
   }
   HEAP32[i5 >> 2] = 0;
   HEAP32[i9 >> 2] = 0;
   i1 = i1 - i3 | 0;
   i8 = 59;
   break L5;
  } while (0);
  HEAP32[i9 >> 2] = i2;
  i8 = 59;
 } while (0);
 L19 : while (1) {
  L20 : do if ((i8 | 0) == 14) {
   while (1) {
    i4 = HEAP8[i2 >> 0] | 0;
    if (((i4 & 255) + -1 | 0) >>> 0 < 127) if (!(i2 & 3)) {
     i8 = HEAP32[i2 >> 2] | 0;
     i4 = i8 & 255;
     if (!((i8 + -16843009 | i8) & -2139062144)) {
      do {
       i2 = i2 + 4 | 0;
       i3 = i3 + -4 | 0;
       i4 = HEAP32[i2 >> 2] | 0;
      } while (!((i4 + -16843009 | i4) & -2139062144 | 0));
      i4 = i4 & 255;
     }
    }
    i4 = i4 & 255;
    if ((i4 + -1 | 0) >>> 0 >= 127) break;
    i2 = i2 + 1 | 0;
    i3 = i3 + -1 | 0;
   }
   i4 = i4 + -194 | 0;
   if (i4 >>> 0 > 50) i8 = 53; else {
    i4 = HEAP32[27140 + (i4 << 2) >> 2] | 0;
    i6 = i2 + 1 | 0;
    i8 = 25;
    continue L19;
   }
  } else if ((i8 | 0) == 15) {
   L22 : do if (i3) {
    while (1) {
     i4 = HEAP8[i2 >> 0] | 0;
     do if (((i4 & 255) + -1 | 0) >>> 0 < 127) if (i3 >>> 0 > 4 & (i2 & 3 | 0) == 0) {
      while (1) {
       i4 = HEAP32[i2 >> 2] | 0;
       if ((i4 + -16843009 | i4) & -2139062144 | 0) {
        i8 = 38;
        break;
       }
       HEAP32[i5 >> 2] = i4 & 255;
       HEAP32[i5 + 4 >> 2] = HEAPU8[i2 + 1 >> 0];
       HEAP32[i5 + 8 >> 2] = HEAPU8[i2 + 2 >> 0];
       i6 = i2 + 4 | 0;
       i4 = i5 + 16 | 0;
       HEAP32[i5 + 12 >> 2] = HEAPU8[i2 + 3 >> 0];
       i3 = i3 + -4 | 0;
       if (i3 >>> 0 > 4) {
        i5 = i4;
        i2 = i6;
       } else {
        i8 = 37;
        break;
       }
      }
      if ((i8 | 0) == 37) {
       i5 = i4;
       i2 = i6;
       i4 = HEAP8[i6 >> 0] | 0;
       break;
      } else if ((i8 | 0) == 38) {
       i4 = i4 & 255;
       break;
      }
     } while (0);
     i4 = i4 & 255;
     if ((i4 + -1 | 0) >>> 0 >= 127) break;
     i2 = i2 + 1 | 0;
     HEAP32[i5 >> 2] = i4;
     i3 = i3 + -1 | 0;
     if (!i3) break L22; else i5 = i5 + 4 | 0;
    }
    i4 = i4 + -194 | 0;
    if (i4 >>> 0 > 50) {
     i8 = 53;
     break L20;
    }
    i4 = HEAP32[27140 + (i4 << 2) >> 2] | 0;
    i7 = i3;
    i6 = i2 + 1 | 0;
    i8 = 43;
    continue L19;
   } while (0);
   HEAP32[i9 >> 2] = i2;
   i8 = 59;
   continue L19;
  } else if ((i8 | 0) == 25) {
   i8 = (HEAPU8[i6 >> 0] | 0) >>> 3;
   if ((i8 + -16 | i8 + (i4 >> 26)) >>> 0 > 7) {
    i2 = i6;
    i8 = 52;
   } else {
    i2 = i6 + 1 | 0;
    if (i4 & 33554432) {
     if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
      i2 = i6;
      i8 = 52;
      break;
     }
     i2 = i6 + 2 | 0;
     if (i4 & 524288) {
      if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
       i2 = i6;
       i8 = 52;
       break;
      }
      i2 = i6 + 3 | 0;
     }
    }
    i3 = i3 + -1 | 0;
    i8 = 14;
    continue L19;
   }
  } else if ((i8 | 0) == 43) {
   i8 = 0;
   i3 = HEAPU8[i6 >> 0] | 0;
   i2 = i3 >>> 3;
   if ((i2 + -16 | i2 + (i4 >> 26)) >>> 0 > 7) {
    i2 = i6;
    i3 = i7;
    i8 = 52;
   } else {
    i2 = i6 + 1 | 0;
    i3 = i3 + -128 | i4 << 6;
    do if ((i3 | 0) < 0) {
     i4 = (HEAPU8[i2 >> 0] | 0) + -128 | 0;
     if (i4 >>> 0 > 63) {
      i2 = i6 + -1 | 0;
      i1 = i5;
      break L20;
     }
     i2 = i6 + 2 | 0;
     i3 = i4 | i3 << 6;
     if ((i3 | 0) < 0) {
      i4 = (HEAPU8[i2 >> 0] | 0) + -128 | 0;
      if (i4 >>> 0 > 63) {
       i2 = i6 + -1 | 0;
       i1 = i5;
       break L20;
      } else {
       i2 = i6 + 3 | 0;
       i3 = i4 | i3 << 6;
       break;
      }
     }
    } while (0);
    HEAP32[i5 >> 2] = i3;
    i5 = i5 + 4 | 0;
    i3 = i7 + -1 | 0;
    i8 = 15;
    continue L19;
   }
  } else if ((i8 | 0) == 59) return i1 | 0; while (0);
  if ((i8 | 0) == 52) {
   i8 = 0;
   i2 = i2 + -1 | 0;
   if (!i4) i8 = 53; else i1 = i5;
  }
  if ((i8 | 0) == 53) if (!(HEAP8[i2 >> 0] | 0)) {
   if (i5 | 0) {
    HEAP32[i5 >> 2] = 0;
    HEAP32[i9 >> 2] = 0;
   }
   i1 = i1 - i3 | 0;
   i8 = 59;
   continue;
  } else i1 = i5;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  if (!i1) {
   i1 = -1;
   i8 = 59;
   continue;
  }
  HEAP32[i9 >> 2] = i2;
  i1 = -1;
  i8 = 59;
 }
 return 0;
}

function _png_icc_check_header(i8, i9, i10, i2, i6, i5) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i7 = 0, i11 = 0;
 i7 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i3 = i11 + 24 | 0;
 i4 = i11;
 i1 = (HEAPU8[i6 + 1 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0) << 24 | (HEAPU8[i6 + 2 >> 0] | 0) << 8 | (HEAPU8[i6 + 3 >> 0] | 0);
 if ((i1 | 0) != (i2 | 0)) {
  _png_icc_profile_error(i8, i9, i10, i1, 61198);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!((i2 & 3 | 0) == 0 | (HEAPU8[i6 + 8 >> 0] | 0) < 4)) {
  _png_icc_profile_error(i8, i9, i10, i2, 61228);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 i1 = (HEAPU8[i6 + 129 >> 0] | 0) << 16 | (HEAPU8[i6 + 128 >> 0] | 0) << 24 | (HEAPU8[i6 + 130 >> 0] | 0) << 8 | (HEAPU8[i6 + 131 >> 0] | 0);
 if (i1 >>> 0 <= 357913930) if (((i1 * 12 | 0) + 132 | 0) >>> 0 <= i2 >>> 0) {
  i1 = (HEAPU8[i6 + 65 >> 0] | 0) << 16 | (HEAPU8[i6 + 64 >> 0] | 0) << 24 | (HEAPU8[i6 + 66 >> 0] | 0) << 8 | (HEAPU8[i6 + 67 >> 0] | 0);
  if (i1 >>> 0 > 65534) {
   _png_icc_profile_error(i8, i9, i10, i1, 61263);
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  }
  if (i1 >>> 0 > 3) _png_icc_profile_error(i8, 0, i10, i1, 61288);
  i1 = (HEAPU8[i6 + 37 >> 0] | 0) << 16 | (HEAPU8[i6 + 36 >> 0] | 0) << 24 | (HEAPU8[i6 + 38 >> 0] | 0) << 8 | (HEAPU8[i6 + 39 >> 0] | 0);
  if ((i1 | 0) != 1633907568) {
   _png_icc_profile_error(i8, i9, i10, i1, 61317);
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  }
  if (_memcmp(i6 + 68 | 0, 61335, 12) | 0) {
   i2 = _png_safecat(i3, 196, 0, 61180) | 0;
   i2 = _png_safecat(i3, 196, _png_safecat(i3, i2 + 79 | 0, i2, i10) | 0, 61190) | 0;
   _png_safecat(i3, 196, _png_safecat(i3, 196, _png_safecat(i3, 196, i2, _png_format_number(i4, i4 + 24 | 0, 3, 0) | 0) | 0, 61194) | 0, 61347) | 0;
   _png_chunk_report(i8, i3, 1);
  }
  i1 = (HEAPU8[i6 + 17 >> 0] | 0) << 16 | (HEAPU8[i6 + 16 >> 0] | 0) << 24 | (HEAPU8[i6 + 18 >> 0] | 0) << 8 | (HEAPU8[i6 + 19 >> 0] | 0);
  L26 : do if ((i1 | 0) < 1380401696) {
   switch (i1 | 0) {
   case 1196573017:
    break;
   default:
    {
     i7 = 21;
     break L26;
    }
   }
   if (i5 & 2 | 0) {
    _png_icc_profile_error(i8, i9, i10, 1196573017, 61420);
    i10 = 0;
    STACKTOP = i11;
    return i10 | 0;
   }
  } else {
   switch (i1 | 0) {
   case 1380401696:
    break;
   default:
    {
     i7 = 21;
     break L26;
    }
   }
   if (!(i5 & 2)) {
    _png_icc_profile_error(i8, i9, i10, 1380401696, 61373);
    i10 = 0;
    STACKTOP = i11;
    return i10 | 0;
   }
  } while (0);
  if ((i7 | 0) == 21) {
   _png_icc_profile_error(i8, i9, i10, i1, 61462);
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  }
  i1 = (HEAPU8[i6 + 13 >> 0] | 0) << 16 | (HEAPU8[i6 + 12 >> 0] | 0) << 24 | (HEAPU8[i6 + 14 >> 0] | 0) << 8 | (HEAPU8[i6 + 15 >> 0] | 0);
  L39 : do if ((i1 | 0) < 1852662636) {
   if ((i1 | 0) < 1818848875) {
    switch (i1 | 0) {
    case 1633842036:
     break;
    default:
     {
      i7 = 26;
      break L39;
     }
    }
    _png_icc_profile_error(i8, i9, i10, 1633842036, 61494);
    i10 = 0;
    STACKTOP = i11;
    return i10 | 0;
   }
   if ((i1 | 0) >= 1835955314) switch (i1 | 0) {
   case 1835955314:
    break L39;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   switch (i1 | 0) {
   case 1818848875:
    break;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   _png_icc_profile_error(i8, i9, i10, 1818848875, 61532);
   i10 = 0;
   STACKTOP = i11;
   return i10 | 0;
  } else {
   if ((i1 | 0) >= 1935896178) if ((i1 | 0) < 1936744803) switch (i1 | 0) {
   case 1935896178:
    break L39;
   default:
    {
     i7 = 26;
     break L39;
    }
   } else switch (i1 | 0) {
   case 1936744803:
    break L39;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   if ((i1 | 0) >= 1886549106) switch (i1 | 0) {
   case 1886549106:
    break L39;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   switch (i1 | 0) {
   case 1852662636:
    break;
   default:
    {
     i7 = 26;
     break L39;
    }
   }
   _png_icc_profile_error(i8, 0, i10, 1852662636, 61572);
  } while (0);
  if ((i7 | 0) == 26) _png_icc_profile_error(i8, 0, i10, i1, 61612);
  i1 = (HEAPU8[i6 + 21 >> 0] | 0) << 16 | (HEAPU8[i6 + 20 >> 0] | 0) << 24 | (HEAPU8[i6 + 22 >> 0] | 0) << 8 | (HEAPU8[i6 + 23 >> 0] | 0);
  L65 : do if ((i1 | 0) < 1482250784) {
   switch (i1 | 0) {
   case 1281450528:
    {
     i1 = 1;
     break;
    }
   default:
    break L65;
   }
   STACKTOP = i11;
   return i1 | 0;
  } else {
   switch (i1 | 0) {
   case 1482250784:
    {
     i1 = 1;
     break;
    }
   default:
    break L65;
   }
   STACKTOP = i11;
   return i1 | 0;
  } while (0);
  _png_icc_profile_error(i8, i9, i10, i1, 61643);
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 _png_icc_profile_error(i8, i9, i10, i1, 61243);
 i10 = 0;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i11, i12, i13, i14, i15, i16, i1) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i17 = i20;
 i18 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83652) | 0;
 i9 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83660) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 127](i17, i9);
 HEAP32[i16 >> 2] = i14;
 i1 = HEAP8[i11 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 63](i18, i1) | 0;
   i1 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i10;
   i1 = i11 + 1 | 0;
   break;
  }
 default:
  i1 = i11;
 }
 i10 = i13;
 L4 : do if ((i10 - i1 | 0) > 1) if ((HEAP8[i1 >> 0] | 0) == 48) {
  i2 = i1 + 1 | 0;
  switch (HEAP8[i2 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i2 = i1;
    i19 = 10;
    break L4;
   }
  }
  i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 63](i18, 48) | 0;
  i8 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i8 + 4;
  HEAP32[i8 >> 2] = i7;
  i1 = i1 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 63](i18, HEAP8[i2 >> 0] | 0) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i2 + 4;
  HEAP32[i2 >> 2] = i8;
  i2 = i1;
  while (1) {
   if (i2 >>> 0 >= i13 >>> 0) break L4;
   i8 = HEAP8[i2 >> 0] | 0;
   if (!(_isxdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L4;
   i2 = i2 + 1 | 0;
  }
 } else {
  i2 = i1;
  i19 = 10;
 } else {
  i2 = i1;
  i19 = 10;
 } while (0);
 L12 : do if ((i19 | 0) == 10) while (1) {
  i19 = 0;
  if (i2 >>> 0 >= i13 >>> 0) break L12;
  i8 = HEAP8[i2 >> 0] | 0;
  if (!(_isdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L12;
  i2 = i2 + 1 | 0;
  i19 = 10;
 } while (0);
 i7 = i17 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i17 + 4 | 0;
 L18 : do if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 48 >> 2] & 31](i18, i1, i2, HEAP32[i16 >> 2] | 0) | 0;
  i1 = (HEAP32[i16 >> 2] | 0) + (i2 - i1 << 2) | 0;
  HEAP32[i16 >> 2] = i1;
  i3 = i18;
 } else {
  L21 : do if ((i1 | 0) != (i2 | 0)) {
   i3 = i2;
   i4 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L21;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 255](i9) | 0;
  i5 = i1;
  i3 = 0;
  i4 = 0;
  while (1) {
   if (i5 >>> 0 >= i2 >>> 0) break;
   i21 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i17 >> 2] | 0 : i17) + i3 >> 0] | 0;
   if (i21 << 24 >> 24 > 0 & (i4 | 0) == (i21 << 24 >> 24 | 0)) {
    i4 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i4 + 4;
    HEAP32[i4 >> 2] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 44 >> 2] & 63](i18, HEAP8[i5 >> 0] | 0) | 0;
   i21 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i21 + 4;
   HEAP32[i21 >> 2] = i22;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i1 = i14 + (i1 - i11 << 2) | 0;
  i4 = HEAP32[i16 >> 2] | 0;
  if ((i1 | 0) == (i4 | 0)) i3 = i18; else {
   i3 = i4;
   while (1) {
    i3 = i3 + -4 | 0;
    if (i1 >>> 0 >= i3 >>> 0) {
     i3 = i18;
     i1 = i4;
     break L18;
    }
    i22 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i3 >> 2] = i22;
    i1 = i1 + 4 | 0;
   }
  }
 } while (0);
 while (1) {
  if (i2 >>> 0 >= i13 >>> 0) break;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24 == 46) {
   i19 = 29;
   break;
  }
  i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 63](i18, i1) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  i1 = i22 + 4 | 0;
  HEAP32[i16 >> 2] = i1;
  HEAP32[i22 >> 2] = i21;
  i2 = i2 + 1 | 0;
 }
 if ((i19 | 0) == 29) {
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 12 >> 2] & 255](i9) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  i1 = i22 + 4 | 0;
  HEAP32[i16 >> 2] = i1;
  HEAP32[i22 >> 2] = i21;
  i2 = i2 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 48 >> 2] & 31](i18, i2, i13, i1) | 0;
 i22 = (HEAP32[i16 >> 2] | 0) + (i10 - i2 << 2) | 0;
 HEAP32[i16 >> 2] = i22;
 HEAP32[i15 >> 2] = (i12 | 0) == (i13 | 0) ? i22 : i14 + (i12 - i11 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 STACKTOP = i20;
 return;
}

function _png_read_info(i10, i4) {
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = 0;
 if ((i10 | 0) == 0 | (i4 | 0) == 0) return;
 _png_read_sig(i10, i4);
 i5 = i10 + 376 | 0;
 i6 = i10 + 208 | 0;
 i7 = i10 + 435 | 0;
 L4 : while (1) {
  i1 = _png_read_chunk_header(i10) | 0;
  i8 = HEAP32[i5 >> 2] | 0;
  i9 = (i8 | 0) == 1229209940;
  i2 = HEAP32[i6 >> 2] | 0;
  if (i9) {
   if (!(i2 & 1)) {
    i11 = 5;
    break;
   }
   if ((i2 & 2 | 0) == 0 & (HEAP8[i7 >> 0] | 0) == 3) {
    i11 = 7;
    break;
   }
   if (!(i2 & 8)) {
    i3 = 4;
    i11 = 11;
   } else {
    _png_chunk_benign_error(i10, 65694);
    i3 = 4;
    i2 = HEAP32[i6 >> 2] | 0;
    i11 = 11;
   }
  } else if (i2 & 4 | 0) {
   i3 = 8;
   i11 = 11;
  }
  if ((i11 | 0) == 11) {
   i11 = 0;
   HEAP32[i6 >> 2] = i2 | i3;
  }
  L15 : do if ((i8 | 0) < 1229472850) {
   switch (i8 | 0) {
   case 1229278788:
    break;
   default:
    break L15;
   }
   _png_handle_IEND(i10, i4, i1);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1229472850:
    break;
   default:
    break L15;
   }
   _png_handle_IHDR(i10, i4, i1);
   continue L4;
  } while (0);
  i2 = _png_chunk_unknown_handling(i10, i8) | 0;
  if (i2 | 0) {
   _png_handle_unknown(i10, i4, i1, i2);
   if ((i8 | 0) == 1347179589) {
    HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 2;
    continue;
   } else if (i9) {
    i1 = 0;
    i11 = 41;
    break;
   } else continue;
  }
  if ((i8 | 0) == 1347179589) {
   _png_handle_PLTE(i10, i4, i1);
   continue;
  }
  if (i9) {
   i11 = 41;
   break;
  }
  L31 : do if ((i8 | 0) < 1883789683) if ((i8 | 0) < 1766015824) if ((i8 | 0) < 1732332865) if ((i8 | 0) < 1665684045) {
   switch (i8 | 0) {
   case 1649100612:
    break;
   default:
    break L31;
   }
   _png_handle_bKGD(i10, i4, i1);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1665684045:
    break;
   default:
    break L31;
   }
   _png_handle_cHRM(i10, i4, i1);
   continue L4;
  } else if ((i8 | 0) < 1749635924) {
   switch (i8 | 0) {
   case 1732332865:
    break;
   default:
    break L31;
   }
   _png_handle_gAMA(i10, i4, i1);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1749635924:
    break;
   default:
    break L31;
   }
   _png_handle_hIST(i10, i4, i1);
   continue L4;
  } else if ((i8 | 0) < 1866876531) if ((i8 | 0) < 1767135348) {
   switch (i8 | 0) {
   case 1766015824:
    break;
   default:
    break L31;
   }
   _png_handle_iCCP(i10, i4, i1);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1767135348:
    break;
   default:
    break L31;
   }
   _png_handle_iTXt(i10, i4, i1);
   continue L4;
  } else if ((i8 | 0) < 1883455820) {
   switch (i8 | 0) {
   case 1866876531:
    break;
   default:
    break L31;
   }
   _png_handle_oFFs(i10, i4, i1);
   continue L4;
  } else {
   switch (i8 | 0) {
   case 1883455820:
    break;
   default:
    break L31;
   }
   _png_handle_pCAL(i10, i4, i1);
   continue L4;
  } else {
   if ((i8 | 0) < 1934772034) if ((i8 | 0) < 1933787468) if ((i8 | 0) < 1933723988) {
    switch (i8 | 0) {
    case 1883789683:
     break;
    default:
     break L31;
    }
    _png_handle_pHYs(i10, i4, i1);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 1933723988:
     break;
    default:
     break L31;
    }
    _png_handle_sBIT(i10, i4, i1);
    continue L4;
   } else if ((i8 | 0) < 1934642260) {
    switch (i8 | 0) {
    case 1933787468:
     break;
    default:
     break L31;
    }
    _png_handle_sCAL(i10, i4, i1);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 1934642260:
     break;
    default:
     break L31;
    }
    _png_handle_sPLT(i10, i4, i1);
    continue L4;
   }
   if ((i8 | 0) < 1950960965) if ((i8 | 0) < 1950701684) {
    switch (i8 | 0) {
    case 1934772034:
     break;
    default:
     break L31;
    }
    _png_handle_sRGB(i10, i4, i1);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 1950701684:
     break;
    default:
     break L31;
    }
    _png_handle_tEXt(i10, i4, i1);
    continue L4;
   }
   if ((i8 | 0) < 1951551059) {
    switch (i8 | 0) {
    case 1950960965:
     break;
    default:
     break L31;
    }
    _png_handle_tIME(i10, i4, i1);
    continue L4;
   }
   if ((i8 | 0) < 2052348020) {
    switch (i8 | 0) {
    case 1951551059:
     break;
    default:
     break L31;
    }
    _png_handle_tRNS(i10, i4, i1);
    continue L4;
   } else {
    switch (i8 | 0) {
    case 2052348020:
     break;
    default:
     break L31;
    }
    _png_handle_zTXt(i10, i4, i1);
    continue L4;
   }
  } while (0);
  _png_handle_unknown(i10, i4, i1, 0);
 }
 if ((i11 | 0) == 5) _png_chunk_error(i10, 65644); else if ((i11 | 0) == 7) _png_chunk_error(i10, 65669); else if ((i11 | 0) == 41) {
  HEAP32[i10 + 408 >> 2] = i1;
  return;
 }
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i11, i12, i13, i14, i15, i16, i1) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i17 = i20;
 i18 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83620) | 0;
 i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83636) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 127](i17, i10);
 HEAP32[i16 >> 2] = i14;
 i1 = HEAP8[i11 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 63](i18, i1) | 0;
   i2 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i2 + 1;
   HEAP8[i2 >> 0] = i9;
   i2 = i11 + 1 | 0;
   break;
  }
 default:
  i2 = i11;
 }
 i9 = i13;
 L4 : do if ((i9 - i2 | 0) > 1) if ((HEAP8[i2 >> 0] | 0) == 48) {
  i1 = i2 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i1 = i2;
    i19 = 10;
    break L4;
   }
  }
  i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 63](i18, 48) | 0;
  i8 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i8 + 1;
  HEAP8[i8 >> 0] = i7;
  i2 = i2 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 63](i18, HEAP8[i1 >> 0] | 0) | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i1 + 1;
  HEAP8[i1 >> 0] = i8;
  i1 = i2;
  while (1) {
   if (i1 >>> 0 >= i13 >>> 0) break L4;
   i8 = HEAP8[i1 >> 0] | 0;
   if (!(_isxdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L4;
   i1 = i1 + 1 | 0;
  }
 } else {
  i1 = i2;
  i19 = 10;
 } else {
  i1 = i2;
  i19 = 10;
 } while (0);
 L12 : do if ((i19 | 0) == 10) while (1) {
  i19 = 0;
  if (i1 >>> 0 >= i13 >>> 0) break L12;
  i8 = HEAP8[i1 >> 0] | 0;
  if (!(_isdigit_l(i8, __ZNSt3__26__clocEv() | 0) | 0)) break L12;
  i1 = i1 + 1 | 0;
  i19 = 10;
 } while (0);
 i7 = i17 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i17 + 4 | 0;
 L18 : do if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 32 >> 2] & 31](i18, i2, i1, HEAP32[i16 >> 2] | 0) | 0;
  HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + (i1 - i2);
  i3 = i18;
 } else {
  L21 : do if ((i2 | 0) != (i1 | 0)) {
   i3 = i1;
   i4 = i2;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L21;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 255](i10) | 0;
  i5 = i2;
  i4 = 0;
  i3 = 0;
  while (1) {
   if (i5 >>> 0 >= i1 >>> 0) break;
   i21 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i17 >> 2] | 0 : i17) + i3 >> 0] | 0;
   if (i21 << 24 >> 24 > 0 & (i4 | 0) == (i21 << 24 >> 24 | 0)) {
    i4 = HEAP32[i16 >> 2] | 0;
    HEAP32[i16 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i18 >> 2] | 0) + 28 >> 2] & 63](i18, HEAP8[i5 >> 0] | 0) | 0;
   i21 = HEAP32[i16 >> 2] | 0;
   HEAP32[i16 >> 2] = i21 + 1;
   HEAP8[i21 >> 0] = i22;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i3 = i14 + (i2 - i11) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  if ((i3 | 0) == (i2 | 0)) i3 = i18; else while (1) {
   i2 = i2 + -1 | 0;
   if (i3 >>> 0 >= i2 >>> 0) {
    i3 = i18;
    break L18;
   }
   i22 = HEAP8[i3 >> 0] | 0;
   HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
   HEAP8[i2 >> 0] = i22;
   i3 = i3 + 1 | 0;
  }
 } while (0);
 while (1) {
  if (i1 >>> 0 >= i13 >>> 0) break;
  i2 = HEAP8[i1 >> 0] | 0;
  if (i2 << 24 >> 24 == 46) {
   i19 = 29;
   break;
  }
  i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i18, i2) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i22 + 1;
  HEAP8[i22 >> 0] = i21;
  i1 = i1 + 1 | 0;
 }
 if ((i19 | 0) == 29) {
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 255](i10) | 0;
  i22 = HEAP32[i16 >> 2] | 0;
  HEAP32[i16 >> 2] = i22 + 1;
  HEAP8[i22 >> 0] = i21;
  i1 = i1 + 1 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 32 >> 2] & 31](i18, i1, i13, HEAP32[i16 >> 2] | 0) | 0;
 i22 = (HEAP32[i16 >> 2] | 0) + (i9 - i1) | 0;
 HEAP32[i16 >> 2] = i22;
 HEAP32[i15 >> 2] = (i12 | 0) == (i13 | 0) ? i22 : i14 + (i12 - i11) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 STACKTOP = i20;
 return;
}

function ___floatscan(i11, i2, i9) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i12 = 0;
 i5 = 0;
 switch (i2 | 0) {
 case 0:
  {
   i7 = -149;
   i8 = 24;
   i5 = 4;
   break;
  }
 case 1:
  {
   i7 = -1074;
   i8 = 53;
   i5 = 4;
   break;
  }
 case 2:
  {
   i7 = -1074;
   i8 = 53;
   i5 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i5 | 0) == 4) {
  i12 = i11 + 4 | 0;
  i10 = i11 + 100 | 0;
  do {
   i2 = HEAP32[i12 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i12 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i11) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i4 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i2 + 1;
     i3 = HEAPU8[i2 >> 0] | 0;
     break L13;
    } else {
     i3 = ___shgetc(i11) | 0;
     break L13;
    }
   }
  default:
   {
    i3 = i2;
    i4 = 1;
   }
  } while (0);
  i2 = 0;
  do {
   if ((i3 | 32 | 0) != (HEAP8[72411 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i12 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
     HEAP32[i12 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i11) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 8);
  L29 : do switch (i2 | 0) {
  case 8:
   break;
  case 3:
   {
    i5 = 23;
    break;
   }
  default:
   {
    i6 = (i9 | 0) != 0;
    if (i6 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i5 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     do {
      if ((i3 | 32 | 0) != (HEAP8[72420 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i11) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < 3);
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i12 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
       HEAP32[i12 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i11) | 0;
      if ((i2 | 0) == 40) i2 = 1; else {
       if (!(HEAP32[i10 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      while (1) {
       i3 = HEAP32[i12 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i11) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26)) if (!((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26)) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i10 >> 2] | 0) == 0;
      if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      if (!i6) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i11, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      if ((i3 | 0) == 48) {
       i2 = HEAP32[i12 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
        HEAP32[i12 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i11) | 0;
       if ((i2 | 32 | 0) == 120) {
        d1 = +_hexfloat(i11, i8, i7, i4, i9);
        break L4;
       }
       if (!(HEAP32[i10 >> 2] | 0)) i2 = 48; else {
        HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
        i2 = 48;
       }
      } else i2 = i3;
      d1 = +_decfloat(i11, i2, i8, i7, i4, i9);
      break L4;
     }
    default:
     {
      if (HEAP32[i10 >> 2] | 0) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim(i11, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i5 | 0) == 23) {
   i3 = (HEAP32[i10 >> 2] | 0) == 0;
   if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
   if ((i9 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +Math_fround(Math_fround(i4 | 0) * Math_fround(inf));
 } while (0);
 return +d1;
}

function _png_free_data(i7, i8, i9, i10) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 if ((i7 | 0) == 0 | (i8 | 0) == 0) return;
 i5 = i8 + 136 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 do if (!i1) i6 = i8 + 232 | 0; else {
  i3 = i8 + 232 | 0;
  if (!(i9 & 16384 & HEAP32[i3 >> 2])) i6 = i3; else {
   if ((i10 | 0) != -1) {
    _png_free(i7, HEAP32[i1 + (i10 * 28 | 0) + 4 >> 2] | 0);
    HEAP32[(HEAP32[i5 >> 2] | 0) + (i10 * 28 | 0) + 4 >> 2] = 0;
    i6 = i3;
    break;
   }
   i4 = i8 + 128 | 0;
   if ((HEAP32[i4 >> 2] | 0) > 0) {
    i2 = 0;
    do {
     _png_free(i7, HEAP32[i1 + (i2 * 28 | 0) + 4 >> 2] | 0);
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i5 >> 2] | 0;
    } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
   }
   _png_free(i7, i1);
   HEAP32[i5 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   i6 = i3;
  }
 } while (0);
 i1 = HEAP32[i6 >> 2] | 0;
 if (i9 & 8192 & i1) {
  i1 = i8 + 8 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -17;
  i1 = i8 + 156 | 0;
  _png_free(i7, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP16[i8 + 22 >> 1] = 0;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 if (i9 & 256 & i1) {
  i5 = i8 + 256 | 0;
  _png_free(i7, HEAP32[i5 >> 2] | 0);
  i1 = i8 + 260 | 0;
  _png_free(i7, HEAP32[i1 >> 2] | 0);
  HEAP32[i5 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i1 = i8 + 8 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -16385;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 if (i9 & 128 & i1) {
  i1 = i8 + 208 | 0;
  _png_free(i7, HEAP32[i1 >> 2] | 0);
  i4 = i8 + 220 | 0;
  _png_free(i7, HEAP32[i4 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i4 = i8 + 224 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i1 | 0) {
   i3 = i8 + 229 | 0;
   if (HEAP8[i3 >> 0] | 0) {
    i2 = 0;
    do {
     _png_free(i7, HEAP32[i1 + (i2 << 2) >> 2] | 0);
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
    } while ((i2 | 0) < (HEAPU8[i3 >> 0] | 0));
   }
   _png_free(i7, i1);
   HEAP32[i4 >> 2] = 0;
  }
  i1 = i8 + 8 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -1025;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 if (i9 & 16 & i1 | 0) {
  i4 = i8 + 116 | 0;
  _png_free(i7, HEAP32[i4 >> 2] | 0);
  i5 = i8 + 120 | 0;
  _png_free(i7, HEAP32[i5 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  i5 = i8 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -4097;
 }
 i3 = i8 + 244 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 do if (i1 | 0) if (i9 & 32 & HEAP32[i6 >> 2] | 0) {
  if ((i10 | 0) != -1) {
   _png_free(i7, HEAP32[i1 + (i10 << 4) >> 2] | 0);
   _png_free(i7, HEAP32[(HEAP32[i3 >> 2] | 0) + (i10 << 4) + 8 >> 2] | 0);
   i5 = HEAP32[i3 >> 2] | 0;
   i5 = i5 + (i10 << 4) | 0;
   HEAP32[i5 >> 2] = 0;
   HEAP32[i5 + 8 >> 2] = 0;
   break;
  }
  i4 = i8 + 248 | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i2 = 0;
   do {
    _png_free(i7, HEAP32[i1 + (i2 << 4) >> 2] | 0);
    _png_free(i7, HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 4) + 8 >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  _png_free(i7, i1);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  i5 = i8 + 8 | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -8193;
 } while (0);
 i3 = i8 + 236 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 do if (i1 | 0) if (i9 & 512 & HEAP32[i6 >> 2] | 0) {
  if ((i10 | 0) != -1) {
   _png_free(i7, HEAP32[i1 + (i10 * 20 | 0) + 8 >> 2] | 0);
   HEAP32[(HEAP32[i3 >> 2] | 0) + (i10 * 20 | 0) + 8 >> 2] = 0;
   break;
  }
  i4 = i8 + 240 | 0;
  if ((HEAP32[i4 >> 2] | 0) > 0) {
   i2 = 0;
   do {
    _png_free(i7, HEAP32[i1 + (i2 * 20 | 0) + 8 >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) < (HEAP32[i4 >> 2] | 0));
  }
  _png_free(i7, i1);
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
 } while (0);
 i1 = HEAP32[i6 >> 2] | 0;
 if (i9 & 8 & i1) {
  i1 = i8 + 204 | 0;
  _png_free(i7, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  i1 = i8 + 8 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -65;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 if (i9 & 4096 & i1) {
  i1 = i8 + 16 | 0;
  _png_free(i7, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  i1 = i8 + 8 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -9;
  HEAP16[i8 + 20 >> 1] = 0;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 if (i9 & 64 & i1) {
  i5 = i8 + 264 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if (i2) {
   i4 = i8 + 4 | 0;
   if (!(HEAP32[i4 >> 2] | 0)) i1 = i2; else {
    i3 = 0;
    i1 = i2;
    do {
     _png_free(i7, HEAP32[i1 + (i3 << 2) >> 2] | 0);
     i3 = i3 + 1 | 0;
     i1 = HEAP32[i5 >> 2] | 0;
    } while (i3 >>> 0 < (HEAP32[i4 >> 2] | 0) >>> 0);
   }
   _png_free(i7, i1);
   HEAP32[i5 >> 2] = 0;
   i1 = HEAP32[i6 >> 2] | 0;
  }
  i8 = i8 + 8 | 0;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] & -32769;
 }
 HEAP32[i6 >> 2] = i1 & ~((i10 | 0) == -1 ? i9 : i9 & -16929);
 return;
}

function _SDL_SendTouch(i7, i8, i14, i15, i5, f9, f10, f11) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i5 = i5 | 0;
 f9 = Math_fround(f9);
 f10 = Math_fround(f10);
 f11 = Math_fround(f11);
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i17 + 56 | 0;
 i12 = i17;
 i3 = HEAP32[20425] | 0;
 L1 : do if ((i3 | 0) > 0) {
  i2 = HEAP32[20426] | 0;
  i1 = 0;
  while (1) {
   i6 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
   i13 = i6;
   if ((HEAP32[i13 >> 2] | 0) == (i7 | 0) ? (HEAP32[i13 + 4 >> 2] | 0) == (i8 | 0) : 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i3 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i3 | 0)) {
   if (!i6) {
    i16 = -1;
    STACKTOP = i17;
    return i16 | 0;
   }
   i13 = i6 + 8 | 0;
   i2 = HEAP32[i13 >> 2] | 0;
   L11 : do if ((i2 | 0) > 0) {
    i4 = HEAP32[i6 + 16 >> 2] | 0;
    i1 = 0;
    while (1) {
     i3 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
     i18 = i3;
     if ((HEAP32[i18 >> 2] | 0) == (i14 | 0) ? (HEAP32[i18 + 4 >> 2] | 0) == (i15 | 0) : 0) break;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (i2 | 0)) {
      i1 = 0;
      break L11;
     }
    }
    i1 = (i1 | 0) > -1 & (i1 | 0) < (i2 | 0) ? i3 : 0;
   } else i1 = 0; while (0);
   i3 = (i1 | 0) != 0;
   if (!i5) {
    if (!i3) {
     i18 = 0;
     STACKTOP = i17;
     return i18 | 0;
    }
    if ((_SDL_EventState(1793, -1) | 0) << 24 >> 24 == 1) {
     HEAP32[i12 >> 2] = 1793;
     i18 = i12 + 8 | 0;
     HEAP32[i18 >> 2] = i7;
     HEAP32[i18 + 4 >> 2] = i8;
     i18 = i12 + 16 | 0;
     HEAP32[i18 >> 2] = i14;
     HEAP32[i18 + 4 >> 2] = i15;
     HEAP32[i12 + 24 >> 2] = HEAP32[i1 + 8 >> 2];
     HEAP32[i12 + 28 >> 2] = HEAP32[i1 + 12 >> 2];
     HEAPF32[i12 + 32 >> 2] = Math_fround(0.0);
     HEAPF32[i12 + 36 >> 2] = Math_fround(0.0);
     HEAPF32[i12 + 40 >> 2] = f11;
     i1 = (_SDL_PushEvent(i12) | 0) > 0 & 1;
    } else i1 = 0;
    i7 = HEAP32[i13 >> 2] | 0;
    if ((i7 | 0) <= 0) {
     i18 = i1;
     STACKTOP = i17;
     return i18 | 0;
    }
    i5 = i6 + 16 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    i2 = 0;
    while (1) {
     i3 = i6 + (i2 << 2) | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i18 = i4;
     if ((HEAP32[i18 >> 2] | 0) == (i14 | 0) ? (HEAP32[i18 + 4 >> 2] | 0) == (i15 | 0) : 0) break;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) >= (i7 | 0)) {
      i16 = 33;
      break;
     }
    }
    if ((i16 | 0) == 33) {
     STACKTOP = i17;
     return i1 | 0;
    }
    if ((i2 | 0) < 0) {
     i18 = i1;
     STACKTOP = i17;
     return i18 | 0;
    }
    i18 = i7 + -1 | 0;
    HEAP32[i13 >> 2] = i18;
    HEAP32[i3 >> 2] = HEAP32[i6 + (i18 << 2) >> 2];
    HEAP32[(HEAP32[i5 >> 2] | 0) + (i18 << 2) >> 2] = i4;
    i18 = i1;
    STACKTOP = i17;
    return i18 | 0;
   } else {
    if (i3) {
     i18 = 0;
     STACKTOP = i17;
     return i18 | 0;
    }
    i4 = i6 + 12 | 0;
    i3 = i6 + 16 | 0;
    do if ((i2 | 0) == (HEAP32[i4 >> 2] | 0)) {
     i1 = _SDL_realloc(HEAP32[i3 >> 2] | 0, (i2 << 2) + 4 | 0) | 0;
     if (i1 | 0) {
      HEAP32[i3 >> 2] = i1;
      i1 = _SDL_malloc(24) | 0;
      i2 = HEAP32[i4 >> 2] | 0;
      HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] = i1;
      i1 = HEAP32[i3 >> 2] | 0;
      if (HEAP32[i1 + (i2 << 2) >> 2] | 0) {
       HEAP32[i4 >> 2] = i2 + 1;
       i2 = HEAP32[i13 >> 2] | 0;
       i16 = 20;
       break;
      }
     }
     if ((_SDL_Error(0) | 0) < 0) {
      i18 = 0;
      STACKTOP = i17;
      return i18 | 0;
     }
    } else {
     i1 = HEAP32[i3 >> 2] | 0;
     i16 = 20;
    } while (0);
    if ((i16 | 0) == 20) {
     HEAP32[i13 >> 2] = i2 + 1;
     i18 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
     i16 = i18;
     HEAP32[i16 >> 2] = i14;
     HEAP32[i16 + 4 >> 2] = i15;
     HEAPF32[i18 + 8 >> 2] = f9;
     HEAPF32[i18 + 12 >> 2] = f10;
     HEAPF32[i18 + 16 >> 2] = f11;
    }
    if ((_SDL_EventState(1792, -1) | 0) << 24 >> 24 != 1) {
     i18 = 0;
     STACKTOP = i17;
     return i18 | 0;
    }
    HEAP32[i12 >> 2] = 1792;
    i18 = i12 + 8 | 0;
    HEAP32[i18 >> 2] = i7;
    HEAP32[i18 + 4 >> 2] = i8;
    i18 = i12 + 16 | 0;
    HEAP32[i18 >> 2] = i14;
    HEAP32[i18 + 4 >> 2] = i15;
    HEAPF32[i12 + 24 >> 2] = f9;
    HEAPF32[i12 + 28 >> 2] = f10;
    HEAPF32[i12 + 32 >> 2] = Math_fround(0.0);
    HEAPF32[i12 + 36 >> 2] = Math_fround(0.0);
    HEAPF32[i12 + 40 >> 2] = f11;
    i18 = (_SDL_PushEvent(i12) | 0) > 0 & 1;
    STACKTOP = i17;
    return i18 | 0;
   }
  }
 } while (0);
 _SDL_SetError(50648, i4) | 0;
 i18 = -1;
 STACKTOP = i17;
 return i18 | 0;
}

function _SDL_GL_GetAttribute(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i18 = i19 + 88 | 0;
 i17 = i19 + 80 | 0;
 i16 = i19 + 72 | 0;
 i15 = i19 + 64 | 0;
 i14 = i19 + 56 | 0;
 i13 = i19 + 48 | 0;
 i12 = i19 + 40 | 0;
 i11 = i19 + 32 | 0;
 i9 = i19 + 24 | 0;
 i8 = i19 + 16 | 0;
 i7 = i19 + 8 | 0;
 i6 = i19;
 i2 = i19 + 104 | 0;
 i3 = i19 + 100 | 0;
 i4 = i19 + 96 | 0;
 i5 = i19 + 92 | 0;
 HEAP32[i10 >> 2] = 0;
 do switch (i1 | 0) {
 case 0:
  {
   i3 = 3410;
   break;
  }
 case 2:
  {
   i3 = 3412;
   break;
  }
 case 1:
  {
   i3 = 3411;
   break;
  }
 case 3:
  {
   i3 = 3413;
   break;
  }
 case 5:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 320 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 6:
  {
   i3 = 3414;
   break;
  }
 case 7:
  {
   i3 = 3415;
   break;
  }
 case 12:
 case 11:
 case 10:
 case 9:
 case 8:
  {
   HEAP32[i10 >> 2] = 0;
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 13:
  {
   i3 = 32936;
   break;
  }
 case 14:
  {
   i3 = 32937;
   break;
  }
 case 24:
  {
   i3 = 33531;
   break;
  }
 case 4:
  {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i5 >> 2] = 0;
   if ((_SDL_GL_GetAttribute(0, i2) | 0) < 0) i1 = -1; else if ((_SDL_GL_GetAttribute(1, i3) | 0) < 0) i1 = -1; else if ((_SDL_GL_GetAttribute(2, i4) | 0) < 0) i1 = -1; else if ((_SDL_GL_GetAttribute(3, i5) | 0) < 0) i1 = -1; else {
    HEAP32[i10 >> 2] = (HEAP32[i3 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) + (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 >> 2] | 0);
    i1 = 0;
   }
   i18 = i1;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 15:
  {
   HEAP32[i10 >> 2] = (HEAP32[(HEAP32[19487] | 0) + 352 >> 2] | 0) != 0 & 1;
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 16:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 384 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 17:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 356 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 18:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 360 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 19:
  {
   HEAP32[i10 >> 2] = (HEAP32[(HEAP32[19487] | 0) + 368 >> 2] | 0) == 4 & 1;
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 20:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 364 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 21:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 368 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 22:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 372 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 case 23:
  {
   HEAP32[i10 >> 2] = HEAP32[(HEAP32[19487] | 0) + 380 >> 2];
   i18 = 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 default:
  {
   i18 = _SDL_SetError(47214, i6) | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 } while (0);
 i2 = HEAP32[19487] | 0;
 do if (!i2) _SDL_SetError(40203, i7) | 0; else {
  i1 = HEAP32[i2 + 168 >> 2] | 0;
  if (!i1) {
   _SDL_SetError(46488, i9) | 0;
   break;
  }
  if (!(HEAP32[i2 + 388 >> 2] | 0)) {
   _SDL_SetError(46459, i8) | 0;
   break;
  }
  i1 = FUNCTION_TABLE_iii[i1 & 63](i2, 67063) | 0;
  if (i1 | 0) {
   FUNCTION_TABLE_vii[i1 & 127](i3, i10);
   i2 = HEAP32[19487] | 0;
   do if (!i2) _SDL_SetError(40203, i12) | 0; else {
    i1 = HEAP32[i2 + 168 >> 2] | 0;
    if (!i1) {
     _SDL_SetError(46488, i14) | 0;
     break;
    }
    if (!(HEAP32[i2 + 388 >> 2] | 0)) {
     _SDL_SetError(46459, i13) | 0;
     break;
    }
    i1 = FUNCTION_TABLE_iii[i1 & 63](i2, 68954) | 0;
    if (i1 | 0) {
     i1 = FUNCTION_TABLE_i[i1 & 7]() | 0;
     switch (i1 | 0) {
     case 1280:
      {
       i18 = _SDL_SetError(47332, i16) | 0;
       STACKTOP = i19;
       return i18 | 0;
      }
     case 1281:
      {
       i18 = _SDL_SetError(47362, i17) | 0;
       STACKTOP = i19;
       return i18 | 0;
      }
     case 0:
      {
       i18 = 0;
       STACKTOP = i19;
       return i18 | 0;
      }
     default:
      {
       HEAP32[i18 >> 2] = i1;
       i18 = _SDL_SetError(47393, i18) | 0;
       STACKTOP = i19;
       return i18 | 0;
      }
     }
    }
   } while (0);
   i18 = _SDL_SetError(47287, i15) | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 } while (0);
 i18 = _SDL_SetError(47239, i11) | 0;
 STACKTOP = i19;
 return i18 | 0;
}

function _SDL_CreateWindowTexture(i1, i10, i11, i13, i14) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i4 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i3 = i12 + 16 | 0;
 i2 = i12 + 8 | 0;
 i9 = i12 + 20 | 0;
 i1 = HEAP32[19487] | 0;
 L1 : do if (!i1) {
  _SDL_SetError(40203, i12) | 0;
  i4 = 11;
 } else {
  if (i10 | 0) if ((HEAP32[i10 >> 2] | 0) == (i1 + 280 | 0)) {
   i1 = HEAP32[i10 + 140 >> 2] | 0;
   if (!i1) {
    i4 = 11;
    break;
   }
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) if (!(_SDL_strcmp(i2, 59348) | 0)) break;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    if (!i1) {
     i4 = 11;
     break L1;
    }
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) {
    i4 = 11;
    break;
   } else {
    i8 = i1;
    break;
   }
  }
  _SDL_SetError(59973, i2) | 0;
  i4 = 11;
 } while (0);
 do if ((i4 | 0) == 11) {
  i2 = _SDL_GetHint(59291) | 0;
  L16 : do if (!i2) i4 = 21; else if ((HEAP8[i2 >> 0] & -2) << 24 >> 24 == 48) i4 = 21; else if (!(_SDL_strcasecmp(i2, 75222) | 0)) i4 = 21; else if (!(_SDL_strcasecmp(i2, 75216) | 0)) i4 = 21; else if (!(_SDL_strcasecmp(i2, 59282) | 0)) i4 = 21; else if ((_SDL_GetNumRenderDrivers() | 0) > 0) {
   i1 = 0;
   while (1) {
    _SDL_GetRenderDriverInfo(i1, i9) | 0;
    if (!(_SDL_strcasecmp(HEAP32[i9 >> 2] | 0, i2) | 0)) break;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (_SDL_GetNumRenderDrivers() | 0)) {
     i4 = 21;
     break L16;
    }
   }
   i2 = _SDL_CreateRenderer(i10, i1, 0) | 0;
   if (!i2) i4 = 21;
  } else i4 = 21; while (0);
  L27 : do if ((i4 | 0) == 21) {
   L29 : do if ((_SDL_GetNumRenderDrivers() | 0) > 0) {
    i1 = 0;
    while (1) {
     _SDL_GetRenderDriverInfo(i1, i9) | 0;
     if (_SDL_strcmp(HEAP32[i9 >> 2] | 0, 59282) | 0) {
      i2 = _SDL_CreateRenderer(i10, i1, 0) | 0;
      if (i2 | 0) break;
     }
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (_SDL_GetNumRenderDrivers() | 0)) break L29;
    }
    break L27;
   } while (0);
   i14 = _SDL_SetError(59775, i3) | 0;
   STACKTOP = i12;
   return i14 | 0;
  } while (0);
  i1 = _SDL_calloc(1, 20) | 0;
  if (i1 | 0) {
   _SDL_SetWindowData(i10, 59348, i1) | 0;
   HEAP32[i1 >> 2] = i2;
   i8 = i1;
   break;
  }
  _SDL_DestroyRenderer(i2);
  i14 = _SDL_Error(0) | 0;
  STACKTOP = i12;
  return i14 | 0;
 } while (0);
 i6 = i8 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (i1 | 0) {
  _SDL_DestroyTexture(i1);
  HEAP32[i6 >> 2] = 0;
 }
 i7 = i8 + 8 | 0;
 _SDL_free(HEAP32[i7 >> 2] | 0);
 HEAP32[i7 >> 2] = 0;
 if ((_SDL_GetRendererInfo(HEAP32[i8 >> 2] | 0, i9) | 0) < 0) {
  i14 = -1;
  STACKTOP = i12;
  return i14 | 0;
 }
 i1 = HEAP32[i9 + 12 >> 2] | 0;
 HEAP32[i11 >> 2] = i1;
 i5 = HEAP32[i9 + 8 >> 2] | 0;
 L52 : do if (i5) {
  i4 = 0;
  i2 = i1;
  L53 : while (1) {
   L55 : do if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) {
    i3 = i2 >>> 24 & 15;
    if ((i3 + -4 | 0) >>> 0 < 3) switch (i2 >>> 20 & 15) {
    case 8:
    case 7:
    case 4:
    case 3:
     break L55;
    default:
     {}
    }
    if ((i3 + -7 | 0) >>> 0 >= 5) break L53;
    switch (i2 >>> 20 & 15) {
    case 5:
    case 6:
    case 2:
    case 3:
     break;
    default:
     break L53;
    }
   } while (0);
   i2 = i4 + 1 | 0;
   if (i2 >>> 0 >= i5 >>> 0) break L52;
   i4 = i2;
   i2 = HEAP32[i9 + 12 + (i2 << 2) >> 2] | 0;
  }
  HEAP32[i11 >> 2] = i2;
  i1 = i2;
 } while (0);
 i2 = i10 + 24 | 0;
 i3 = i10 + 28 | 0;
 i10 = _SDL_CreateTexture(HEAP32[i8 >> 2] | 0, i1, 1, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i10;
 if (!i10) {
  i14 = -1;
  STACKTOP = i12;
  return i14 | 0;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 L68 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
  if ((i1 | 0) < 1498831189) switch (i1 | 0) {
  case 844715353:
   {
    i1 = 2;
    break L68;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 1498831189:
   {
    i1 = 2;
    break L68;
   }
  default:
   {}
  }
  i1 = (i1 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 HEAP32[i8 + 16 >> 2] = i1;
 i1 = (Math_imul(HEAP32[i2 >> 2] | 0, i1) | 0) + 3 & -4;
 i2 = i8 + 12 | 0;
 HEAP32[i2 >> 2] = i1;
 i1 = _SDL_malloc(Math_imul(i1, HEAP32[i3 >> 2] | 0) | 0) | 0;
 HEAP32[i7 >> 2] = i1;
 if (!i1) {
  i14 = _SDL_Error(0) | 0;
  STACKTOP = i12;
  return i14 | 0;
 } else {
  HEAP32[i13 >> 2] = i1;
  HEAP32[i14 >> 2] = HEAP32[i2 >> 2];
  _SDL_RenderSetViewport(HEAP32[i8 >> 2] | 0, 0) | 0;
  i14 = 0;
  STACKTOP = i12;
  return i14 | 0;
 }
 return 0;
}

function _SDL_RendererEventWatch(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, f11 = f0;
 i5 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i10 + 4 | 0;
 i7 = i10;
 switch (HEAP32[i9 >> 2] | 0) {
 case 512:
  {
   i2 = _SDL_GetWindowFromID(HEAP32[i9 + 8 >> 2] | 0) | 0;
   i5 = i8 + 188 | 0;
   if ((i2 | 0) != (HEAP32[i5 >> 2] | 0)) {
    STACKTOP = i10;
    return 0;
   }
   i1 = HEAP32[i8 + 4 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[i1 & 127](i8, i9);
   switch (HEAP8[i9 + 12 >> 0] | 0) {
   case 6:
    {
     i1 = i8 + 308 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i3 = (i2 | 0) != 0;
     if (i3) _SDL_SetRenderTarget(i8, 0) | 0;
     if (!(HEAP32[i8 + 196 >> 2] | 0)) {
      i4 = HEAP32[i8 + 8 >> 2] | 0;
      if (!i4) _SDL_GetWindowSize(HEAP32[i5 >> 2] | 0, i6, i7); else FUNCTION_TABLE_iiii[i4 & 63](i8, i6, i7) | 0;
      if (!(HEAP32[i1 >> 2] | 0)) {
       HEAP32[i8 + 216 >> 2] = 0;
       HEAP32[i8 + 220 >> 2] = 0;
       HEAP32[i8 + 224 >> 2] = HEAP32[i6 >> 2];
       HEAP32[i8 + 228 >> 2] = HEAP32[i7 >> 2];
       FUNCTION_TABLE_ii[HEAP32[i8 + 48 >> 2] & 255](i8) | 0;
      } else {
       HEAP32[i8 + 232 >> 2] = 0;
       HEAP32[i8 + 236 >> 2] = 0;
       HEAP32[i8 + 240 >> 2] = HEAP32[i6 >> 2];
       HEAP32[i8 + 244 >> 2] = HEAP32[i7 >> 2];
      }
     } else _UpdateLogicalSize(i8) | 0;
     if (!i3) {
      STACKTOP = i10;
      return 0;
     }
     _SDL_SetRenderTarget(i8, i2) | 0;
     STACKTOP = i10;
     return 0;
    }
   case 2:
    {
     HEAP32[i8 + 192 >> 2] = 1;
     STACKTOP = i10;
     return 0;
    }
   case 1:
    {
     if ((_SDL_GetWindowFlags(i2) | 0) & 64 | 0) {
      STACKTOP = i10;
      return 0;
     }
     HEAP32[i8 + 192 >> 2] = 0;
     STACKTOP = i10;
     return 0;
    }
   case 7:
    {
     HEAP32[i8 + 192 >> 2] = 1;
     STACKTOP = i10;
     return 0;
    }
   case 8:
   case 9:
    {
     if ((_SDL_GetWindowFlags(i2) | 0) & 8 | 0) {
      STACKTOP = i10;
      return 0;
     }
     HEAP32[i8 + 192 >> 2] = 0;
     STACKTOP = i10;
     return 0;
    }
   default:
    {
     STACKTOP = i10;
     return 0;
    }
   }
  }
 case 1024:
  {
   i1 = _SDL_GetWindowFromID(HEAP32[i9 + 8 >> 2] | 0) | 0;
   if (!(HEAP32[i8 + 196 >> 2] | 0)) {
    STACKTOP = i10;
    return 0;
   }
   if ((i1 | 0) != (HEAP32[i8 + 188 >> 2] | 0)) {
    STACKTOP = i10;
    return 0;
   }
   i4 = i9 + 20 | 0;
   i7 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i8 + 216 >> 2] | 0) | 0;
   HEAP32[i4 >> 2] = i7;
   i3 = i9 + 24 | 0;
   i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i8 + 220 >> 2] | 0) | 0;
   HEAP32[i3 >> 2] = i1;
   i2 = i8 + 288 | 0;
   HEAP32[i4 >> 2] = ~~Math_fround(Math_fround(i7 | 0) / Math_fround(HEAPF32[i2 >> 2]));
   i4 = i8 + 292 | 0;
   HEAP32[i3 >> 2] = ~~Math_fround(Math_fround(i1 | 0) / Math_fround(HEAPF32[i4 >> 2]));
   i3 = i9 + 28 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if ((i1 | 0) > 0) {
    f11 = Math_fround(i1 | 0);
    i1 = ~~Math_fround(f11 / Math_fround(HEAPF32[i2 >> 2]));
    i1 = (i1 | 0) > 1 ? i1 : 1;
    i5 = 31;
   } else if ((i1 | 0) < 0) {
    f11 = Math_fround(i1 | 0);
    i1 = ~~Math_fround(f11 / Math_fround(HEAPF32[i2 >> 2]));
    i1 = (i1 | 0) < -1 ? i1 : -1;
    i5 = 31;
   }
   if ((i5 | 0) == 31) HEAP32[i3 >> 2] = i1;
   i1 = i9 + 32 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) > 0) {
    f11 = Math_fround(i2 | 0);
    i9 = ~~Math_fround(f11 / Math_fround(HEAPF32[i4 >> 2]));
    HEAP32[i1 >> 2] = (i9 | 0) > 1 ? i9 : 1;
    STACKTOP = i10;
    return 0;
   }
   if ((i2 | 0) >= 0) {
    STACKTOP = i10;
    return 0;
   }
   i9 = ~~Math_fround(Math_fround(i2 | 0) / Math_fround(HEAPF32[i4 >> 2]));
   HEAP32[i1 >> 2] = (i9 | 0) < -1 ? i9 : -1;
   STACKTOP = i10;
   return 0;
  }
 case 1026:
 case 1025:
  {
   i1 = _SDL_GetWindowFromID(HEAP32[i9 + 8 >> 2] | 0) | 0;
   if (!(HEAP32[i8 + 196 >> 2] | 0)) {
    STACKTOP = i10;
    return 0;
   }
   if ((i1 | 0) != (HEAP32[i8 + 188 >> 2] | 0)) {
    STACKTOP = i10;
    return 0;
   }
   i6 = i9 + 20 | 0;
   i5 = (HEAP32[i6 >> 2] | 0) - (HEAP32[i8 + 216 >> 2] | 0) | 0;
   HEAP32[i6 >> 2] = i5;
   i9 = i9 + 24 | 0;
   i7 = (HEAP32[i9 >> 2] | 0) - (HEAP32[i8 + 220 >> 2] | 0) | 0;
   HEAP32[i9 >> 2] = i7;
   HEAP32[i6 >> 2] = ~~Math_fround(Math_fround(i5 | 0) / Math_fround(HEAPF32[i8 + 288 >> 2]));
   HEAP32[i9 >> 2] = ~~Math_fround(Math_fround(i7 | 0) / Math_fround(HEAPF32[i8 + 292 >> 2]));
   STACKTOP = i10;
   return 0;
  }
 default:
  {
   STACKTOP = i10;
   return 0;
  }
 }
 return 0;
}

function _SDL_GameControllerAddMapping(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i17 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i15 = i18 + 136 | 0;
 i8 = i18 + 96 | 0;
 i6 = i18 + 88 | 0;
 i2 = i18 + 80 | 0;
 i1 = i18 + 72 | 0;
 i16 = i18 + 16 | 0;
 i12 = i18;
 i5 = i18 + 120 | 0;
 i4 = i18 + 104 | 0;
 if (!i7) {
  HEAP32[i1 >> 2] = 58469;
  i17 = _SDL_SetError(59509, i1) | 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i1 = _SDL_strchr(i7, 44) | 0;
 do if (i1 | 0) {
  i1 = i1 - i7 | 0;
  i3 = _SDL_malloc(i1 + 1 | 0) | 0;
  if (!i3) {
   _SDL_Error(0) | 0;
   break;
  }
  _SDL_memcpy(i3, i7, i1) | 0;
  HEAP8[i3 + i1 >> 0] = 0;
  i13 = (_SDL_strcasecmp(i3, 58511) | 0) == 0;
  i14 = (_SDL_strcasecmp(i3, 58518) | 0) == 0;
  _SDL_JoystickGetGUIDFromString(i4, i3);
  i11 = i5;
  i9 = i4;
  i10 = i11 + 16 | 0;
  do {
   HEAP8[i11 >> 0] = HEAP8[i9 >> 0] | 0;
   i11 = i11 + 1 | 0;
   i9 = i9 + 1 | 0;
  } while ((i11 | 0) < (i10 | 0));
  _SDL_free(i3);
  i11 = i12;
  i9 = i5;
  i10 = i11 + 16 | 0;
  do {
   HEAP8[i11 >> 0] = HEAP8[i9 >> 0] | 0;
   i11 = i11 + 1 | 0;
   i9 = i9 + 1 | 0;
  } while ((i11 | 0) < (i10 | 0));
  i1 = _SDL_strchr(i7, 44) | 0;
  L10 : do if (!i1) i17 = 11; else {
   i3 = i1 + 1 | 0;
   i2 = _SDL_strchr(i3, 44) | 0;
   if (!i2) i17 = 11; else {
    i1 = i2 - i1 | 0;
    i4 = _SDL_malloc(i1) | 0;
    if (!i4) {
     _SDL_Error(0) | 0;
     i17 = 11;
     break;
    }
    _SDL_memcpy(i4, i3, i1) | 0;
    HEAP8[i4 + (i1 + -1) >> 0] = 0;
    i1 = _SDL_strchr(i7, 44) | 0;
    if (i1 | 0) {
     i1 = _SDL_strchr(i1 + 1 | 0, 44) | 0;
     if (i1 | 0) {
      i2 = _SDL_strdup(i1 + 1 | 0) | 0;
      if (i2 | 0) {
       i1 = HEAP32[20460] | 0;
       L20 : do if (!i1) i17 = 25; else {
        while (1) {
         if (!(_SDL_memcmp(i12, i1, 16) | 0)) break;
         i1 = HEAP32[i1 + 24 >> 2] | 0;
         if (!i1) {
          i17 = 25;
          break L20;
         }
        }
        i8 = i1 + 16 | 0;
        _SDL_free(HEAP32[i8 >> 2] | 0);
        HEAP32[i8 >> 2] = i4;
        i7 = i1 + 20 | 0;
        _SDL_free(HEAP32[i7 >> 2] | 0);
        HEAP32[i7 >> 2] = i2;
        i2 = HEAP32[20465] | 0;
        if (!i2) {
         i17 = 0;
         STACKTOP = i18;
         return i17 | 0;
        }
        i6 = i16 + 8 | 0;
        do {
         i3 = i2 + 12 | 0;
         if (!(_SDL_memcmp(i3, i1, 16) | 0)) {
          HEAP32[i16 >> 2] = 1621;
          HEAP32[i6 >> 2] = HEAP32[HEAP32[i2 >> 2] >> 2];
          _SDL_PushEvent(i16) | 0;
          i4 = HEAP32[i8 >> 2] | 0;
          i5 = HEAP32[i7 >> 2] | 0;
          i11 = i15;
          i9 = i1;
          i10 = i11 + 16 | 0;
          do {
           HEAP8[i11 >> 0] = HEAP8[i9 >> 0] | 0;
           i11 = i11 + 1 | 0;
           i9 = i9 + 1 | 0;
          } while ((i11 | 0) < (i10 | 0));
          _SDL_PrivateLoadButtonMapping(i3, i15, i4, i5);
         }
         i2 = HEAP32[i2 + 1344 >> 2] | 0;
        } while ((i2 | 0) != 0);
        i2 = 1;
       } while (0);
       do if ((i17 | 0) == 25) {
        i1 = _SDL_malloc(28) | 0;
        if (!i1) {
         _SDL_free(i4);
         _SDL_free(i2);
         _SDL_Error(0) | 0;
         break L10;
        } else {
         i11 = i1;
         i9 = i12;
         i10 = i11 + 16 | 0;
         do {
          HEAP8[i11 >> 0] = HEAP8[i9 >> 0] | 0;
          i11 = i11 + 1 | 0;
          i9 = i9 + 1 | 0;
         } while ((i11 | 0) < (i10 | 0));
         HEAP32[i1 + 16 >> 2] = i4;
         HEAP32[i1 + 20 >> 2] = i2;
         HEAP32[i1 + 24 >> 2] = HEAP32[20460];
         HEAP32[20460] = i1;
         i2 = 0;
         break;
        }
       } while (0);
       if (!i1) {
        i17 = -1;
        STACKTOP = i18;
        return i17 | 0;
       }
       if (i2 | 0) {
        i17 = 0;
        STACKTOP = i18;
        return i17 | 0;
       }
       if (i13) HEAP32[20462] = i1;
       if (!i14) {
        i17 = 1;
        STACKTOP = i18;
        return i17 | 0;
       }
       HEAP32[20461] = i1;
       i17 = 1;
       STACKTOP = i18;
       return i17 | 0;
      }
     }
    }
    _SDL_free(i4);
    HEAP32[i8 >> 2] = i7;
    _SDL_SetError(58557, i8) | 0;
   }
  } while (0);
  if ((i17 | 0) == 11) {
   HEAP32[i6 >> 2] = i7;
   _SDL_SetError(58529, i6) | 0;
  }
  i17 = -1;
  STACKTOP = i18;
  return i17 | 0;
 } while (0);
 HEAP32[i2 >> 2] = i7;
 i17 = _SDL_SetError(58483, i2) | 0;
 STACKTOP = i18;
 return i17 | 0;
}

function ___rem_pio2(d2, i13) {
 d2 = +d2;
 i13 = i13 | 0;
 var i1 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, d15 = 0.0;
 i11 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i8 = i14 + 16 | 0;
 i9 = i14;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i1 = HEAP32[tempDoublePtr >> 2] | 0;
 i6 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i10 = _bitshift64Lshr(i1 | 0, i6 | 0, 63) | 0;
 i12 = i6 & 2147483647;
 do if (i12 >>> 0 < 1074752123) if ((i6 & 1048575 | 0) == 598523) i11 = 21; else {
  i1 = (i10 | 0) != 0;
  if (i12 >>> 0 < 1073928573) if (i1) {
   d5 = d2 + 1.5707963267341256;
   d7 = d5 + 6.077100506506192e-11;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + 6.077100506506192e-11;
   i1 = -1;
   break;
  } else {
   d5 = d2 + -1.5707963267341256;
   d7 = d5 + -6.077100506506192e-11;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + -6.077100506506192e-11;
   i1 = 1;
   break;
  } else if (i1) {
   d5 = d2 + 3.1415926534682512;
   d7 = d5 + 1.2154201013012384e-10;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + 1.2154201013012384e-10;
   i1 = -2;
   break;
  } else {
   d5 = d2 + -3.1415926534682512;
   d7 = d5 + -1.2154201013012384e-10;
   HEAPF64[i13 >> 3] = d7;
   HEAPF64[i13 + 8 >> 3] = d5 - d7 + -1.2154201013012384e-10;
   i1 = 2;
   break;
  }
 } else {
  if (i12 >>> 0 < 1075594812) if (i12 >>> 0 < 1075183037) {
   if ((i12 | 0) == 1074977148) {
    i11 = 21;
    break;
   }
   if (!i10) {
    d5 = d2 + -4.712388980202377;
    d7 = d5 + -1.8231301519518578e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + -1.8231301519518578e-10;
    i1 = 3;
    break;
   } else {
    d5 = d2 + 4.712388980202377;
    d7 = d5 + 1.8231301519518578e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + 1.8231301519518578e-10;
    i1 = -3;
    break;
   }
  } else {
   if ((i12 | 0) == 1075388923) {
    i11 = 21;
    break;
   }
   if (!i10) {
    d5 = d2 + -6.2831853069365025;
    d7 = d5 + -2.430840202602477e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + -2.430840202602477e-10;
    i1 = 4;
    break;
   } else {
    d5 = d2 + 6.2831853069365025;
    d7 = d5 + 2.430840202602477e-10;
    HEAPF64[i13 >> 3] = d7;
    HEAPF64[i13 + 8 >> 3] = d5 - d7 + 2.430840202602477e-10;
    i1 = -4;
    break;
   }
  }
  if (i12 >>> 0 < 1094263291) i11 = 21; else {
   if (i12 >>> 0 > 2146435071) {
    d7 = d2 - d2;
    HEAPF64[i13 + 8 >> 3] = d7;
    HEAPF64[i13 >> 3] = d7;
    i1 = 0;
    break;
   }
   HEAP32[tempDoublePtr >> 2] = i1;
   HEAP32[tempDoublePtr + 4 >> 2] = i6 & 1048575 | 1096810496;
   d2 = +HEAPF64[tempDoublePtr >> 3];
   i1 = 0;
   do {
    d7 = +(~~d2 | 0);
    HEAPF64[i8 + (i1 << 3) >> 3] = d7;
    d2 = (d2 - d7) * 16777216.0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 2);
   HEAPF64[i8 + 16 >> 3] = d2;
   if (d2 == 0.0) {
    i1 = 1;
    while (1) if (+HEAPF64[i8 + (i1 << 3) >> 3] == 0.0) i1 = i1 + -1 | 0; else break;
   } else i1 = 2;
   i1 = ___rem_pio2_large(i8, i9, (i12 >>> 20) + -1046 | 0, i1 + 1 | 0, 1) | 0;
   d2 = +HEAPF64[i9 >> 3];
   if (!i10) {
    HEAPF64[i13 >> 3] = d2;
    HEAPF64[i13 + 8 >> 3] = +HEAPF64[i9 + 8 >> 3];
    break;
   } else {
    HEAPF64[i13 >> 3] = -d2;
    HEAPF64[i13 + 8 >> 3] = -+HEAPF64[i9 + 8 >> 3];
    i1 = 0 - i1 | 0;
    break;
   }
  }
 } while (0);
 if ((i11 | 0) == 21) {
  d5 = d2 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
  i1 = ~~d5;
  d3 = d2 - d5 * 1.5707963267341256;
  d4 = d5 * 6.077100506506192e-11;
  d2 = d3 - d4;
  HEAPF64[i13 >> 3] = d2;
  HEAPF64[tempDoublePtr >> 3] = d2;
  i11 = _bitshift64Lshr(HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] | 0, 52) | 0;
  i6 = i12 >>> 20;
  if ((i6 - (i11 & 2047) | 0) > 16) {
   d4 = d5 * 6.077100506303966e-11;
   d7 = d3 - d4;
   d4 = d5 * 2.0222662487959506e-21 - (d3 - d7 - d4);
   d2 = d7 - d4;
   HEAPF64[i13 >> 3] = d2;
   HEAPF64[tempDoublePtr >> 3] = d2;
   i12 = _bitshift64Lshr(HEAP32[tempDoublePtr >> 2] | 0, HEAP32[tempDoublePtr + 4 >> 2] | 0, 52) | 0;
   d15 = d5 * 2.0222662487111665e-21;
   d3 = d7 - d15;
   d5 = d5 * 8.4784276603689e-32 - (d7 - d3 - d15);
   if ((i6 - (i12 & 2047) | 0) > 49) {
    d2 = d3 - d5;
    HEAPF64[i13 >> 3] = d2;
    d4 = d5;
   } else d3 = d7;
  }
  HEAPF64[i13 + 8 >> 3] = d3 - d2 - d4;
 }
 STACKTOP = i14;
 return i1 | 0;
}

function _dollarNormalize(i17, i19) {
 i17 = i17 | 0;
 i19 = i19 | 0;
 var i1 = 0, f2 = f0, f3 = f0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, f8 = f0, f9 = f0, f10 = f0, f11 = f0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i20 = 0, f21 = f0, i22 = 0, f23 = f0, d24 = 0.0, d25 = 0.0, d26 = 0.0;
 i4 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i18 = i20;
 f2 = Math_fround(HEAPF32[i17 >> 2]);
 i15 = !(f2 <= Math_fround(0.0));
 i16 = i17 + 4 | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (i15) i4 = 4; else if ((i1 | 0) > 1) {
  i4 = 1;
  do {
   i15 = i17 + 8 + (i4 << 3) | 0;
   f10 = Math_fround(HEAPF32[i15 >> 2]);
   i1 = i4 + -1 | 0;
   i1 = i17 + 8 + (i1 << 3) | 0;
   f10 = Math_fround(f10 - Math_fround(HEAPF32[i1 >> 2]));
   f11 = Math_fround(HEAPF32[i15 + 4 >> 2]);
   f11 = Math_fround(f11 - Math_fround(HEAPF32[i1 + 4 >> 2]));
   f2 = Math_fround(f2 + Math_fround(+_SDL_sqrt(+Math_fround(Math_fround(f10 * f10) + Math_fround(f11 * f11)))));
   i4 = i4 + 1 | 0;
   i1 = HEAP32[i16 >> 2] | 0;
  } while ((i4 | 0) < (i1 | 0));
  i4 = 4;
 } else i1 = 0;
 if ((i4 | 0) == 4) {
  f11 = Math_fround(f2 / Math_fround(63.0));
  if ((i1 | 0) > 1) {
   f2 = f11;
   i1 = 0;
   i15 = 1;
   f3 = Math_fround(0.0);
   f8 = Math_fround(0.0);
   do {
    i13 = i15 + -1 | 0;
    i13 = i17 + 8 + (i13 << 3) | 0;
    i4 = i13 | 0;
    f9 = Math_fround(HEAPF32[i4 >> 2]);
    i14 = i17 + 8 + (i15 << 3) | 0;
    i12 = i14 | 0;
    f9 = Math_fround(f9 - Math_fround(HEAPF32[i12 >> 2]));
    f9 = Math_fround(f9 * f9);
    i13 = i13 + 4 | 0;
    f10 = Math_fround(HEAPF32[i13 >> 2]);
    i14 = i14 + 4 | 0;
    f10 = Math_fround(f10 - Math_fround(HEAPF32[i14 >> 2]));
    f10 = Math_fround(+_SDL_sqrt(+Math_fround(f9 + Math_fround(f10 * f10))));
    f9 = Math_fround(f2 + f10);
    if (f9 > f11) {
     do {
      f21 = Math_fround(HEAPF32[i4 >> 2]);
      f23 = Math_fround(Math_fround(f11 - f2) / f10);
      f21 = Math_fround(f21 + Math_fround(f23 * Math_fround(Math_fround(HEAPF32[i12 >> 2]) - f21)));
      i22 = i19 + (i1 << 3) | 0;
      HEAPF32[i22 >> 2] = f21;
      f9 = Math_fround(HEAPF32[i13 >> 2]);
      f9 = Math_fround(f9 + Math_fround(f23 * Math_fround(Math_fround(HEAPF32[i14 >> 2]) - f9)));
      HEAPF32[i22 + 4 >> 2] = f9;
      f3 = Math_fround(f3 + f21);
      f8 = Math_fround(f8 + f9);
      i1 = i1 + 1 | 0;
      f2 = Math_fround(f2 - f11);
      f9 = Math_fround(f2 + f10);
     } while (f9 > f11);
     f2 = f9;
    } else f2 = f9;
    i15 = i15 + 1 | 0;
    i4 = HEAP32[i16 >> 2] | 0;
   } while ((i15 | 0) < (i4 | 0));
   if ((i1 | 0) >= 63) {
    i18 = i17 + 8 + (i4 + -1 << 3) | 0;
    i22 = HEAP32[i18 + 4 >> 2] | 0;
    i1 = i19 + 504 | 0;
    HEAP32[i1 >> 2] = HEAP32[i18 >> 2];
    HEAP32[i1 + 4 >> 2] = i22;
    f11 = Math_fround(f3 * Math_fround(.015625));
    f10 = Math_fround(f8 * Math_fround(.015625));
    d5 = +Math_fround(f10 - Math_fround(HEAPF32[i19 + 4 >> 2]));
    d5 = +Math_fround(+_SDL_atan2(d5, +Math_fround(f11 - Math_fround(HEAPF32[i19 >> 2]))));
    d6 = +f11;
    d7 = +f10;
    f2 = f11;
    f3 = f11;
    f8 = f10;
    f9 = f10;
    i1 = 0;
    do {
     i18 = i19 + (i1 << 3) | 0;
     i22 = i18 | 0;
     f21 = Math_fround(HEAPF32[i22 >> 2]);
     i18 = i18 + 4 | 0;
     f23 = Math_fround(HEAPF32[i18 >> 2]);
     d25 = +Math_fround(f21 - f11);
     d26 = +_SDL_cos(d5) * d25;
     d24 = +Math_fround(f23 - f10);
     HEAPF32[i22 >> 2] = Math_fround(d26 - +_SDL_sin(d5) * d24 + d6);
     d25 = +_SDL_sin(d5) * d25;
     f23 = Math_fround(d25 + +_SDL_cos(d5) * d24 + d7);
     HEAPF32[i18 >> 2] = f23;
     f21 = Math_fround(HEAPF32[i22 >> 2]);
     f2 = f21 < f2 ? f21 : f2;
     f3 = f21 > f3 ? f21 : f3;
     f9 = f9 > f23 ? f23 : f9;
     f8 = f8 < f23 ? f23 : f8;
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 64);
    f3 = Math_fround(f3 - f2);
    f2 = Math_fround(f8 - f9);
    i1 = 0;
    do {
     i22 = i19 + (i1 << 3) | 0;
     i18 = i22 | 0;
     HEAPF32[i18 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[i18 >> 2]) - f11) * Math_fround(256.0)) / f3);
     i22 = i22 + 4 | 0;
     HEAPF32[i22 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[i22 >> 2]) - f10) * Math_fround(256.0)) / f2);
     i1 = i1 + 1 | 0;
    } while ((i1 | 0) != 64);
    STACKTOP = i20;
    return;
   }
  } else i1 = 0;
 }
 HEAP32[i18 >> 2] = i1;
 _SDL_SetError(46778, i18) | 0;
 STACKTOP = i20;
 return;
}

function _SDL_UpdateTexture(i13, i5, i11, i12) {
 i13 = i13 | 0;
 i5 = i5 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i16 + 16 | 0;
 i3 = i16 + 8 | 0;
 i2 = i16;
 i15 = i16 + 48 | 0;
 i9 = i16 + 44 | 0;
 i10 = i16 + 40 | 0;
 i1 = i16 + 24 | 0;
 if (i13 | 0) if ((HEAP32[i13 >> 2] | 0) == 85557) {
  if (!i11) {
   HEAP32[i3 >> 2] = 59535;
   i15 = _SDL_SetError(59509, i3) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i12) {
   HEAP32[i4 >> 2] = 59542;
   i15 = _SDL_SetError(59509, i4) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i5) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   i2 = HEAP32[i13 + 12 >> 2] | 0;
   HEAP32[i1 + 8 >> 2] = i2;
   HEAP32[i1 + 12 >> 2] = HEAP32[i13 + 16 >> 2];
   i7 = i1;
  } else {
   i7 = i5;
   i2 = HEAP32[i5 + 8 >> 2] | 0;
  }
  i5 = i7 + 8 | 0;
  if (!i2) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i6 = i7 + 12 | 0;
  i4 = HEAP32[i6 >> 2] | 0;
  if (!i4) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i8 = i13 + 40 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  i14 = HEAP32[i13 + 36 >> 2] | 0;
  if (i1 | 0) {
   do if ((_SDL_SW_UpdateYUVTexture(i1, i7, i11, i12) | 0) < 0) i1 = -1; else {
    HEAP32[i15 >> 2] = 0;
    HEAP32[i15 + 4 >> 2] = 0;
    i2 = HEAP32[i13 + 12 >> 2] | 0;
    i5 = i15 + 8 | 0;
    HEAP32[i5 >> 2] = i2;
    i4 = HEAP32[i13 + 16 >> 2] | 0;
    i6 = i15 + 12 | 0;
    HEAP32[i6 >> 2] = i4;
    if ((HEAP32[i13 + 8 >> 2] | 0) == 1) if ((_SDL_LockTexture(i14, i15, i9, i10) | 0) < 0) {
     i1 = -1;
     break;
    } else {
     _SDL_SW_CopyYUVToRGB(HEAP32[i8 >> 2] | 0, i15, HEAP32[i14 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
     _SDL_UnlockTexture(i14);
     i1 = 0;
     break;
    }
    i3 = i14 + 4 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    L32 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
     if ((i1 | 0) < 1498831189) switch (i1 | 0) {
     case 844715353:
      {
       i1 = 2;
       break L32;
      }
     default:
      {}
     } else switch (i1 | 0) {
     case 1498831189:
      {
       i1 = 2;
       break L32;
      }
     default:
      {}
     }
     i1 = (i1 | 0) == 1431918169 ? 2 : 1;
    } while (0);
    i2 = (Math_imul(i1, i2) | 0) + 3 & -4;
    i1 = _SDL_malloc(Math_imul(i2, i4) | 0) | 0;
    if (!i1) {
     i1 = _SDL_Error(0) | 0;
     break;
    } else {
     _SDL_SW_CopyYUVToRGB(HEAP32[i8 >> 2] | 0, i15, HEAP32[i3 >> 2] | 0, HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, i1, i2) | 0;
     _SDL_UpdateTexture(i14, i15, i1, i2) | 0;
     _SDL_free(i1);
     i1 = 0;
     break;
    }
   } while (0);
   i15 = i1;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i14) {
   i15 = HEAP32[i13 + 32 >> 2] | 0;
   i15 = FUNCTION_TABLE_iiiiii[HEAP32[i15 + 28 >> 2] & 63](i15, i13, i7, i11, i12) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if ((HEAP32[i13 + 8 >> 2] | 0) == 1) if ((_SDL_LockTexture(i14, i7, i15, i9) | 0) < 0) {
   i15 = -1;
   STACKTOP = i16;
   return i15 | 0;
  } else {
   _SDL_ConvertPixels(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, i11, i12, HEAP32[i14 + 4 >> 2] | 0, HEAP32[i15 >> 2] | 0, HEAP32[i9 >> 2] | 0) | 0;
   _SDL_UnlockTexture(i14);
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  i3 = i14 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  L58 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L58;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L58;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  i2 = (Math_imul(i1, i2) | 0) + 3 & -4;
  i1 = _SDL_malloc(Math_imul(i2, i4) | 0) | 0;
  if (!i1) {
   i15 = _SDL_Error(0) | 0;
   STACKTOP = i16;
   return i15 | 0;
  } else {
   _SDL_ConvertPixels(HEAP32[i5 >> 2] | 0, HEAP32[i6 >> 2] | 0, HEAP32[i13 + 4 >> 2] | 0, i11, i12, HEAP32[i3 >> 2] | 0, i1, i2) | 0;
   _SDL_UpdateTexture(i14, i7, i1, i2) | 0;
   _SDL_free(i1);
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 _SDL_SetError(41358, i2) | 0;
 i15 = -1;
 STACKTOP = i16;
 return i15 | 0;
}

function _png_read_IDAT_data(i20, i2, i1) {
 i20 = i20 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 i19 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024);
 i6 = i21;
 i16 = i20 + 224 | 0;
 i17 = i20 + 236 | 0;
 HEAP32[i17 >> 2] = i2;
 i18 = i20 + 240 | 0;
 HEAP32[i18 >> 2] = 0;
 i1 = (i2 | 0) == 0 ? 0 : i1;
 i12 = i20 + 228 | 0;
 i13 = (i2 | 0) != 0;
 i7 = i20 + 408 | 0;
 i8 = i20 + 376 | 0;
 i9 = i20 + 796 | 0;
 i10 = i20 + 788 | 0;
 i11 = i20 + 792 | 0;
 L1 : do if (i13) {
  i3 = i1;
  L2 : while (1) {
   if (!(HEAP32[i12 >> 2] | 0)) {
    i1 = HEAP32[i7 >> 2] | 0;
    while (1) {
     if (i1 | 0) break;
     _png_crc_finish(i20, 0) | 0;
     i1 = _png_read_chunk_header(i20) | 0;
     HEAP32[i7 >> 2] = i1;
     if ((HEAP32[i8 >> 2] | 0) != 1229209940) {
      i19 = 18;
      break L2;
     }
    }
    i2 = HEAP32[i9 >> 2] | 0;
    i2 = i2 >>> 0 > i1 >>> 0 ? i1 : i2;
    i1 = HEAP32[i10 >> 2] | 0;
    if (!i1) i19 = 8; else if ((HEAP32[i11 >> 2] | 0) >>> 0 < i2 >>> 0) {
     HEAP32[i10 >> 2] = 0;
     HEAP32[i11 >> 2] = 0;
     _png_free(i20, i1);
     i19 = 8;
    } else i5 = i1;
    if ((i19 | 0) == 8) {
     i19 = 0;
     i1 = _png_malloc_base(i20, i2) | 0;
     if (!i1) {
      i19 = 24;
      break;
     }
     HEAP32[i10 >> 2] = i1;
     HEAP32[i11 >> 2] = i2;
     i5 = i1;
    }
    _png_read_data(i20, i5, i2);
    _png_calculate_crc(i20, i5, i2);
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i2;
    HEAP32[i16 >> 2] = i5;
    HEAP32[i12 >> 2] = i2;
   }
   HEAP32[i18 >> 2] = i3;
   i1 = _inflate(i16, 0) | 0;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = 0;
   switch (i1 | 0) {
   case 1:
    {
     i14 = i3;
     break L1;
    }
   case 0:
    break;
   default:
    {
     i15 = i1;
     i19 = 30;
     break L1;
    }
   }
   if (!i3) {
    i19 = 38;
    break;
   }
  }
  if ((i19 | 0) == 18) _png_error(i20, 66190); else if ((i19 | 0) == 24) _png_chunk_error(i20, 63656); else if ((i19 | 0) == 38) {
   STACKTOP = i21;
   return;
  }
 } else {
  i3 = i1;
  L23 : while (1) {
   if (!(HEAP32[i12 >> 2] | 0)) {
    i1 = HEAP32[i7 >> 2] | 0;
    while (1) {
     if (i1 | 0) break;
     _png_crc_finish(i20, 0) | 0;
     i1 = _png_read_chunk_header(i20) | 0;
     HEAP32[i7 >> 2] = i1;
     if ((HEAP32[i8 >> 2] | 0) != 1229209940) {
      i19 = 18;
      break L23;
     }
    }
    i2 = HEAP32[i9 >> 2] | 0;
    i2 = i2 >>> 0 > i1 >>> 0 ? i1 : i2;
    i1 = HEAP32[i10 >> 2] | 0;
    if (!i1) i19 = 22; else if ((HEAP32[i11 >> 2] | 0) >>> 0 < i2 >>> 0) {
     HEAP32[i10 >> 2] = 0;
     HEAP32[i11 >> 2] = 0;
     _png_free(i20, i1);
     i19 = 22;
    } else i4 = i1;
    if ((i19 | 0) == 22) {
     i19 = 0;
     i1 = _png_malloc_base(i20, i2) | 0;
     if (!i1) {
      i19 = 24;
      break;
     }
     HEAP32[i10 >> 2] = i1;
     HEAP32[i11 >> 2] = i2;
     i4 = i1;
    }
    _png_read_data(i20, i4, i2);
    _png_calculate_crc(i20, i4, i2);
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) - i2;
    HEAP32[i16 >> 2] = i4;
    HEAP32[i12 >> 2] = i2;
   }
   HEAP32[i17 >> 2] = i6;
   HEAP32[i18 >> 2] = 1024;
   i1 = _inflate(i16, 0) | 0;
   i3 = 1024 - (HEAP32[i18 >> 2] | 0) + i3 | 0;
   HEAP32[i18 >> 2] = 0;
   switch (i1 | 0) {
   case 1:
    {
     i14 = i3;
     break L1;
    }
   case 0:
    break;
   default:
    {
     i15 = i1;
     i19 = 30;
     break L1;
    }
   }
   if (!i3) {
    i19 = 38;
    break;
   }
  }
  if ((i19 | 0) == 18) _png_error(i20, 66190); else if ((i19 | 0) == 24) _png_chunk_error(i20, 63656); else if ((i19 | 0) == 38) {
   STACKTOP = i21;
   return;
  }
 } while (0);
 if ((i19 | 0) == 30) {
  _png_zstream_error(i20, i15);
  i1 = HEAP32[i20 + 248 >> 2] | 0;
  if (i13) _png_chunk_error(i20, i1);
  _png_chunk_benign_error(i20, i1);
  STACKTOP = i21;
  return;
 }
 HEAP32[i17 >> 2] = 0;
 i18 = i20 + 208 | 0;
 HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 8;
 i18 = i20 + 212 | 0;
 HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 8;
 if (!(HEAP32[i12 >> 2] | 0)) {
  if (HEAP32[i7 >> 2] | 0) i19 = 29;
 } else i19 = 29;
 if ((i19 | 0) == 29) _png_chunk_benign_error(i20, 66212);
 if (!i14) {
  STACKTOP = i21;
  return;
 }
 if (i13) _png_error(i20, 66190);
 _png_chunk_benign_error(i20, 66234);
 STACKTOP = i21;
 return;
}

function _SDL_CalculateBlitN(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 i14 = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0;
 i2 = HEAP8[i14 + 8 >> 0] | 0;
 if ((i2 & 255) < 8) {
  i15 = 0;
  return i15 | 0;
 }
 switch (HEAP32[i1 + 68 >> 2] & -28673 | 0) {
 case 0:
  {
   if (i2 << 24 >> 24 == 8) {
    L8 : do if ((HEAP8[i15 + 9 >> 0] | 0) == 4) {
     i1 = HEAP32[i15 + 12 >> 2] | 0;
     if ((i1 | 0) < 1072693248) {
      switch (i1 | 0) {
      case 16711680:
       break;
      default:
       break L8;
      }
      if ((HEAP32[i15 + 16 >> 2] | 0) != 65280) break;
      if ((HEAP32[i15 + 20 >> 2] | 0) == 255) i1 = 306; else break;
      return i1 | 0;
     } else {
      switch (i1 | 0) {
      case 1072693248:
       break;
      default:
       break L8;
      }
      if ((HEAP32[i15 + 16 >> 2] | 0) != 1047552) break;
      if ((HEAP32[i15 + 20 >> 2] | 0) == 1023) i1 = 307; else break;
      return i1 | 0;
     }
    } while (0);
    i15 = 308;
    return i15 | 0;
   }
   i12 = i14 + 24 | 0;
   if (!(HEAP32[i12 >> 2] | 0)) i11 = 1; else i11 = HEAP32[i15 + 24 >> 2] | 0 ? 4 : 2;
   i13 = i15 + 9 | 0;
   i10 = HEAP32[5764 + ((HEAPU8[i13 >> 0] | 0) + -1 << 2) >> 2] | 0;
   i2 = HEAP32[i10 + 12 >> 2] | 0;
   L25 : do if (!i2) i1 = 0; else {
    i3 = i15 + 12 | 0;
    i4 = i15 + 16 | 0;
    i5 = i15 + 20 | 0;
    i6 = i14 + 12 | 0;
    i7 = i14 + 16 | 0;
    i8 = i14 + 20 | 0;
    i9 = i14 + 9 | 0;
    i1 = 0;
    do {
     i16 = HEAP32[i10 + (i1 * 40 | 0) >> 2] | 0;
     if ((i16 | 0) == 0 ? 1 : (HEAP32[i3 >> 2] | 0) == (i16 | 0)) {
      i16 = HEAP32[i10 + (i1 * 40 | 0) + 4 >> 2] | 0;
      if ((i16 | 0) == 0 ? 1 : (HEAP32[i4 >> 2] | 0) == (i16 | 0)) {
       i16 = HEAP32[i10 + (i1 * 40 | 0) + 8 >> 2] | 0;
       if ((i16 | 0) == 0 ? 1 : (HEAP32[i5 >> 2] | 0) == (i16 | 0)) {
        i16 = HEAP32[i10 + (i1 * 40 | 0) + 16 >> 2] | 0;
        if ((i16 | 0) == 0 ? 1 : (HEAP32[i6 >> 2] | 0) == (i16 | 0)) {
         i16 = HEAP32[i10 + (i1 * 40 | 0) + 20 >> 2] | 0;
         if ((i16 | 0) == 0 ? 1 : (HEAP32[i7 >> 2] | 0) == (i16 | 0)) {
          i16 = HEAP32[i10 + (i1 * 40 | 0) + 24 >> 2] | 0;
          if ((i16 | 0) == 0 ? 1 : (HEAP32[i8 >> 2] | 0) == (i16 | 0)) if ((i2 | 0) == (HEAPU8[i9 >> 0] | 0)) if ((HEAP32[i10 + (i1 * 40 | 0) + 36 >> 2] & i11 | 0) == (i11 | 0)) {
           i16 = i10 + (i1 * 40 | 0) + 28 | 0;
           i2 = HEAP32[i16 >> 2] | 0;
           i2 = i2 & (_SDL_HasMMX() | 0) != 0;
           if ((i2 | 0) == (HEAP32[i16 >> 2] | 0)) break L25;
          }
         }
        }
       }
      }
     }
     i1 = i1 + 1 | 0;
     i2 = HEAP32[i10 + (i1 * 40 | 0) + 12 >> 2] | 0;
    } while ((i2 | 0) != 0);
   } while (0);
   i1 = HEAP32[i10 + (i1 * 40 | 0) + 32 >> 2] | 0;
   if ((i1 | 0) != 155) {
    i16 = i1;
    return i16 | 0;
   }
   if ((HEAP32[i15 >> 2] | 0) == 372711428) {
    i16 = 309;
    return i16 | 0;
   }
   if ((HEAP32[i14 >> 2] | 0) == 372711428) {
    i16 = 310;
    return i16 | 0;
   }
   if ((HEAP8[i13 >> 0] | 0) != 4) {
    i16 = (i11 | 0) == 4;
    i16 = i16 ? 304 : 155;
    return i16 | 0;
   }
   if ((HEAP8[i14 + 9 >> 0] | 0) != 4) {
    i16 = (i11 | 0) == 4;
    i16 = i16 ? 304 : 155;
    return i16 | 0;
   }
   if ((HEAP32[i15 + 12 >> 2] | 0) != (HEAP32[i14 + 12 >> 2] | 0)) {
    i16 = (i11 | 0) == 4;
    i16 = i16 ? 304 : 155;
    return i16 | 0;
   }
   if ((HEAP32[i15 + 16 >> 2] | 0) != (HEAP32[i14 + 16 >> 2] | 0)) {
    i16 = (i11 | 0) == 4;
    i16 = i16 ? 304 : 155;
    return i16 | 0;
   }
   if ((HEAP32[i15 + 20 >> 2] | 0) != (HEAP32[i14 + 20 >> 2] | 0)) {
    i16 = (i11 | 0) == 4;
    i16 = i16 ? 304 : 155;
    return i16 | 0;
   }
   if ((i11 | 0) != 4) {
    i16 = 311;
    return i16 | 0;
   }
   i16 = (HEAP32[i15 + 24 >> 2] | 0) == (HEAP32[i12 >> 2] | 0) ? 305 : 304;
   return i16 | 0;
  }
 case 256:
  {
   if ((HEAP8[i15 + 9 >> 0] | 0) == 2) if (HEAP32[i1 + 4 >> 2] | 0) {
    i16 = 312;
    return i16 | 0;
   }
   if ((HEAP8[i14 + 9 >> 0] | 0) == 1) {
    i16 = 313;
    return i16 | 0;
   }
   if (HEAP32[i15 + 24 >> 2] | 0) if (HEAP32[i14 + 24 >> 2] | 0) {
    i16 = 314;
    return i16 | 0;
   }
   i16 = 315;
   return i16 | 0;
  }
 default:
  {
   i16 = 0;
   return i16 | 0;
  }
 }
 return 0;
}

function _GLES2_RenderCopy(i2, i4, i5, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, f14 = f0, f15 = f0, f16 = f0;
 i11 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i10 = i12;
 i6 = i12 + 56 | 0;
 i7 = i12 + 24 | 0;
 i8 = i2 + 320 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i9;
  i11 = 4;
 } else {
  HEAP32[i9 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i2 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i9 >> 2];
   _GLES2_UpdateViewport(i2) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   i11 = 4;
  }
 }
 if ((i11 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 if ((_GLES2_SetupCopy(i2, i4) | 0) < 0) {
  i11 = -1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i6 >> 2] = i1;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i6 + 4 >> 2] = i2;
 f14 = (HEAP32[tempDoublePtr >> 2] = i1, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f14 = Math_fround(Math_fround(HEAPF32[i3 + 8 >> 2]) + f14);
 HEAPF32[i6 + 8 >> 2] = f14;
 HEAP32[i6 + 12 >> 2] = i2;
 HEAP32[i6 + 16 >> 2] = i1;
 f13 = (HEAP32[tempDoublePtr >> 2] = i2, Math_fround(HEAPF32[tempDoublePtr >> 2]));
 f13 = Math_fround(Math_fround(HEAPF32[i3 + 12 >> 2]) + f13);
 HEAPF32[i6 + 20 >> 2] = f13;
 HEAPF32[i6 + 24 >> 2] = f14;
 HEAPF32[i6 + 28 >> 2] = f13;
 i3 = HEAP32[i8 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i6, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i6);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 i2 = HEAP32[i5 >> 2] | 0;
 f15 = Math_fround(i2 | 0);
 f13 = Math_fround(HEAP32[i4 + 12 >> 2] | 0);
 f15 = Math_fround(f15 / f13);
 HEAPF32[i7 >> 2] = f15;
 i3 = HEAP32[i5 + 4 >> 2] | 0;
 f16 = Math_fround(i3 | 0);
 f14 = Math_fround(HEAP32[i4 + 16 >> 2] | 0);
 f16 = Math_fround(f16 / f14);
 HEAPF32[i7 + 4 >> 2] = f16;
 f13 = Math_fround(Math_fround((HEAP32[i5 + 8 >> 2] | 0) + i2 | 0) / f13);
 HEAPF32[i7 + 8 >> 2] = f13;
 HEAPF32[i7 + 12 >> 2] = f16;
 HEAPF32[i7 + 16 >> 2] = f15;
 f14 = Math_fround(Math_fround((HEAP32[i5 + 12 >> 2] | 0) + i3 | 0) / f14);
 HEAPF32[i7 + 20 >> 2] = f14;
 HEAPF32[i7 + 24 >> 2] = f13;
 HEAPF32[i7 + 28 >> 2] = f14;
 i3 = HEAP32[i8 >> 2] | 0;
 i2 = i3 + 280 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 296 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, 32, i7, 35040);
  HEAP32[i1 >> 2] = 32;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, 32, i7);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](1, 2, 5126, 0, 0, 0);
 FUNCTION_TABLE_viii[HEAP32[i9 + 76 >> 2] & 63](5, 0, 4);
 i1 = HEAP32[i8 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i2 = 89710;
 while (1) {
  if (!i2) i11 = 22; else if (!(HEAP8[i2 >> 0] | 0)) i11 = 22; else i3 = i2;
  if ((i11 | 0) == 22) {
   i11 = 0;
   i3 = 39958;
  }
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i10 >> 2] = i3;
  HEAP32[i10 + 4 >> 2] = 40071;
  HEAP32[i10 + 8 >> 2] = 1751;
  HEAP32[i10 + 12 >> 2] = 45671;
  HEAP32[i10 + 16 >> 2] = i2;
  HEAP32[i10 + 20 >> 2] = i1;
  _SDL_SetError(40045, i10) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _png_do_read_interlace(i17, i13, i1, i4) {
 i17 = i17 | 0;
 i13 = i13 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0;
 i3 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i18;
 if (!((i17 | 0) != 0 & (i13 | 0) != 0)) {
  STACKTOP = i18;
  return;
 }
 i12 = HEAP32[i17 >> 2] | 0;
 i15 = HEAP32[18632 + (i1 << 2) >> 2] | 0;
 i16 = Math_imul(i15, i12) | 0;
 i14 = i17 + 11 | 0;
 i2 = HEAP8[i14 >> 0] | 0;
 switch (i2 << 24 >> 24) {
 case 1:
  {
   i1 = i12 + 7 & 7;
   if (!(i4 & 65536)) {
    i1 = i1 ^ 7;
    i2 = i16 + 7 & 7 ^ 7;
    i9 = 0;
    i10 = 7;
    i11 = 1;
   } else {
    i2 = i16 + 7 & 7;
    i9 = 7;
    i10 = 0;
    i11 = -1;
   }
   if (!i12) i3 = 30; else {
    i8 = i13 + ((i12 + -1 | 0) >>> 3) | 0;
    i4 = i13 + ((i16 + -1 | 0) >>> 3) | 0;
    i7 = 0;
    while (1) {
     i6 = (HEAPU8[i8 >> 0] | 0) >>> i1 & 1;
     i3 = 0;
     i5 = i2;
     do {
      HEAP8[i4 >> 0] = 32639 >>> (7 - i5 | 0) & (HEAPU8[i4 >> 0] | 0) | i6 << i5;
      i13 = (i5 | 0) == (i10 | 0);
      i5 = i13 ? i9 : i5 + i11 | 0;
      i4 = i13 ? i4 + -1 | 0 : i4;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) < (i15 | 0));
     i2 = (i1 | 0) == (i10 | 0);
     i7 = i7 + 1 | 0;
     if (i7 >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) {
      i3 = 30;
      break;
     } else {
      i8 = i2 ? i8 + -1 | 0 : i8;
      i1 = i2 ? i9 : i1 + i11 | 0;
      i2 = i5;
     }
    }
   }
   break;
  }
 case 2:
  {
   i1 = (i12 << 1) + 6 & 6;
   if (!(i4 & 65536)) {
    i8 = 2;
    i9 = 6;
    i10 = 0;
    i2 = (i16 << 1) + 6 & 6 ^ 6;
    i1 = i1 ^ 6;
   } else {
    i8 = -2;
    i9 = 0;
    i10 = 6;
    i2 = (i16 << 1) + 6 & 6;
   }
   if (!i12) i3 = 30; else {
    i7 = 0;
    i4 = i13 + ((i16 + -1 | 0) >>> 2) | 0;
    i6 = i13 + ((i12 + -1 | 0) >>> 2) | 0;
    while (1) {
     i5 = (HEAPU8[i6 >> 0] | 0) >>> i1 & 3;
     i3 = 0;
     do {
      HEAP8[i4 >> 0] = 16191 >>> (6 - i2 | 0) & (HEAPU8[i4 >> 0] | 0) | i5 << i2;
      i13 = (i2 | 0) == (i9 | 0);
      i4 = i13 ? i4 + -1 | 0 : i4;
      i2 = i13 ? i10 : i2 + i8 | 0;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) < (i15 | 0));
     i3 = (i1 | 0) == (i9 | 0);
     i7 = i7 + 1 | 0;
     if (i7 >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) {
      i3 = 30;
      break;
     } else {
      i6 = i3 ? i6 + -1 | 0 : i6;
      i1 = i3 ? i10 : i1 + i8 | 0;
     }
    }
   }
   break;
  }
 case 4:
  {
   i1 = i12 & 1;
   if (!(i4 & 65536)) {
    i9 = 4;
    i10 = 4;
    i11 = 0;
    i2 = i16 & 1;
   } else {
    i9 = -4;
    i10 = 0;
    i11 = 4;
    i2 = i16 & 1 ^ 1;
    i1 = i1 ^ 1;
   }
   if (!i12) i3 = 30; else {
    i8 = 0;
    i7 = i13 + ((i16 + -1 | 0) >>> 1) | 0;
    i6 = i13 + ((i12 + -1 | 0) >>> 1) | 0;
    i3 = i2 << 2;
    i5 = i1 << 2;
    while (1) {
     i4 = (HEAPU8[i6 >> 0] | 0) >>> i5 & 15;
     i1 = 0;
     i2 = i7;
     do {
      HEAP8[i2 >> 0] = 3855 >>> (4 - i3 | 0) & (HEAPU8[i2 >> 0] | 0) | i4 << i3;
      i13 = (i3 | 0) == (i10 | 0);
      i2 = i13 ? i2 + -1 | 0 : i2;
      i3 = i13 ? i11 : i3 + i9 | 0;
      i1 = i1 + 1 | 0;
     } while ((i1 | 0) < (i15 | 0));
     i1 = (i5 | 0) == (i10 | 0);
     i8 = i8 + 1 | 0;
     if (i8 >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) {
      i3 = 30;
      break;
     } else {
      i7 = i2;
      i6 = i1 ? i6 + -1 | 0 : i6;
      i5 = i1 ? i11 : i5 + i9 | 0;
     }
    }
   }
   break;
  }
 default:
  {
   i6 = (i2 & 255) >>> 3;
   if (i12) {
    i5 = 0 - i6 | 0;
    i4 = 0;
    i1 = i13 + (Math_imul(i6, i16 + -1 | 0) | 0) | 0;
    i2 = i13 + (Math_imul(i6, i12 + -1 | 0) | 0) | 0;
    while (1) {
     _memcpy(i7 | 0, i2 | 0, i6 | 0) | 0;
     i3 = 0;
     do {
      _memcpy(i1 | 0, i7 | 0, i6 | 0) | 0;
      i1 = i1 + i5 | 0;
      i3 = i3 + 1 | 0;
     } while ((i3 | 0) < (i15 | 0));
     i4 = i4 + 1 | 0;
     if (i4 >>> 0 >= (HEAP32[i17 >> 2] | 0) >>> 0) {
      i3 = 30;
      break;
     } else i2 = i2 + i5 | 0;
    }
   }
  }
 }
 if ((i3 | 0) == 30) i2 = HEAP8[i14 >> 0] | 0;
 HEAP32[i17 >> 2] = i16;
 i1 = i2 & 255;
 if ((i2 & 255) > 7) i1 = Math_imul(i1 >>> 3, i16) | 0; else i1 = ((Math_imul(i16, i1) | 0) + 7 | 0) >>> 3;
 HEAP32[i17 + 4 >> 2] = i1;
 STACKTOP = i18;
 return;
}

function _Color24DitherYV12Mod2X(i25, i26, i7, i2, i3, i5, i6, i29, i1) {
 i25 = i25 | 0;
 i26 = i26 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i29 = i29 | 0;
 i1 = i1 | 0;
 var i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0;
 i4 = (i29 << 1) + i1 | 0;
 i27 = i4 * 3 | 0;
 i28 = (i29 | 0) / 2 | 0;
 i15 = (i4 * 9 | 0) + (i1 * 3 | 0) | 0;
 if ((i6 + 1 | 0) >>> 0 < 3) return;
 i16 = (i29 + 1 | 0) >>> 0 < 3;
 i17 = i27 + 3 | 0;
 i18 = i27 + 4 | 0;
 i19 = i27 + 1 | 0;
 i20 = i27 + 5 | 0;
 i21 = i27 + 2 | 0;
 i22 = i28 << 1;
 i23 = i28 * 12 | 0;
 i24 = i22 + i29 | 0;
 i14 = i5;
 i1 = i5 + (i4 * 6 | 0) | 0;
 i5 = i7;
 i13 = (i6 | 0) / 2 | 0;
 i4 = i7;
 while (1) {
  i13 = i13 + -1 | 0;
  i7 = i4 + i29 | 0;
  if (i16) {
   i6 = i5;
   i5 = i14;
   i4 = i7;
  } else {
   i12 = i2 + i28 | 0;
   i6 = i5 + i22 | 0;
   i4 = i4 + i24 | 0;
   i11 = i28;
   i9 = i3;
   i10 = i14;
   i8 = i1;
   while (1) {
    i11 = i11 + -1 | 0;
    i34 = HEAPU8[i2 >> 0] | 0;
    i33 = (HEAP32[i25 + (i34 << 2) >> 2] | 0) + 256 | 0;
    i32 = HEAPU8[i9 >> 0] | 0;
    i34 = (HEAP32[i25 + ((i34 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i25 + ((i32 | 512) << 2) >> 2] | 0) | 0;
    i32 = (HEAP32[i25 + ((i32 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i30 = HEAPU8[i5 >> 0] | 0;
    i30 = HEAP32[i26 + (i34 + i30 << 2) >> 2] | HEAP32[i26 + (i33 + i30 << 2) >> 2] | HEAP32[i26 + (i32 + i30 << 2) >> 2];
    i31 = i30 & 255;
    HEAP8[i10 + i17 >> 0] = i31;
    HEAP8[i10 + i27 >> 0] = i31;
    HEAP8[i10 + 3 >> 0] = i31;
    HEAP8[i10 >> 0] = i31;
    i31 = i30 >>> 8 & 255;
    HEAP8[i10 + i18 >> 0] = i31;
    HEAP8[i10 + i19 >> 0] = i31;
    HEAP8[i10 + 4 >> 0] = i31;
    HEAP8[i10 + 1 >> 0] = i31;
    i30 = i30 >>> 16 & 255;
    HEAP8[i10 + i20 >> 0] = i30;
    HEAP8[i10 + i21 >> 0] = i30;
    HEAP8[i10 + 5 >> 0] = i30;
    HEAP8[i10 + 2 >> 0] = i30;
    i30 = i10 + 6 | 0;
    i31 = HEAPU8[i5 + 1 >> 0] | 0;
    i31 = HEAP32[i26 + (i34 + i31 << 2) >> 2] | HEAP32[i26 + (i33 + i31 << 2) >> 2] | HEAP32[i26 + (i32 + i31 << 2) >> 2];
    i35 = i31 & 255;
    HEAP8[i30 + i17 >> 0] = i35;
    HEAP8[i30 + i27 >> 0] = i35;
    HEAP8[i10 + 9 >> 0] = i35;
    HEAP8[i30 >> 0] = i35;
    i35 = i31 >>> 8 & 255;
    HEAP8[i30 + i18 >> 0] = i35;
    HEAP8[i30 + i19 >> 0] = i35;
    HEAP8[i10 + 10 >> 0] = i35;
    HEAP8[i10 + 7 >> 0] = i35;
    i31 = i31 >>> 16 & 255;
    HEAP8[i30 + i20 >> 0] = i31;
    HEAP8[i30 + i21 >> 0] = i31;
    HEAP8[i10 + 11 >> 0] = i31;
    HEAP8[i10 + 8 >> 0] = i31;
    i31 = HEAPU8[i7 >> 0] | 0;
    i31 = HEAP32[i26 + (i34 + i31 << 2) >> 2] | HEAP32[i26 + (i33 + i31 << 2) >> 2] | HEAP32[i26 + (i32 + i31 << 2) >> 2];
    i30 = i31 & 255;
    HEAP8[i8 + i17 >> 0] = i30;
    HEAP8[i8 + i27 >> 0] = i30;
    HEAP8[i8 + 3 >> 0] = i30;
    HEAP8[i8 >> 0] = i30;
    i30 = i31 >>> 8 & 255;
    HEAP8[i8 + i18 >> 0] = i30;
    HEAP8[i8 + i19 >> 0] = i30;
    HEAP8[i8 + 4 >> 0] = i30;
    HEAP8[i8 + 1 >> 0] = i30;
    i31 = i31 >>> 16 & 255;
    HEAP8[i8 + i20 >> 0] = i31;
    HEAP8[i8 + i21 >> 0] = i31;
    HEAP8[i8 + 5 >> 0] = i31;
    HEAP8[i8 + 2 >> 0] = i31;
    i31 = i8 + 6 | 0;
    i30 = HEAPU8[i7 + 1 >> 0] | 0;
    i30 = HEAP32[i26 + (i34 + i30 << 2) >> 2] | HEAP32[i26 + (i33 + i30 << 2) >> 2] | HEAP32[i26 + (i32 + i30 << 2) >> 2];
    i32 = i30 & 255;
    HEAP8[i31 + i17 >> 0] = i32;
    HEAP8[i31 + i27 >> 0] = i32;
    HEAP8[i8 + 9 >> 0] = i32;
    HEAP8[i31 >> 0] = i32;
    i32 = i30 >>> 8 & 255;
    HEAP8[i31 + i18 >> 0] = i32;
    HEAP8[i31 + i19 >> 0] = i32;
    HEAP8[i8 + 10 >> 0] = i32;
    HEAP8[i8 + 7 >> 0] = i32;
    i30 = i30 >>> 16 & 255;
    HEAP8[i31 + i20 >> 0] = i30;
    HEAP8[i31 + i21 >> 0] = i30;
    HEAP8[i8 + 11 >> 0] = i30;
    HEAP8[i8 + 8 >> 0] = i30;
    if (!i11) break; else {
     i2 = i2 + 1 | 0;
     i9 = i9 + 1 | 0;
     i10 = i10 + 12 | 0;
     i7 = i7 + 2 | 0;
     i8 = i8 + 12 | 0;
     i5 = i5 + 2 | 0;
    }
   }
   i2 = i12;
   i3 = i3 + i28 | 0;
   i5 = i14 + i23 | 0;
   i1 = i1 + i23 | 0;
  }
  if (!i13) break; else {
   i14 = i5 + i15 | 0;
   i1 = i1 + i15 | 0;
   i5 = i6 + i29 | 0;
  }
 }
 return;
}

function _Blit1to1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i11 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] | 0;
 i8 = HEAP32[i1 + 48 >> 2] | 0;
 i6 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i3 + 7 | 0) / 8 | 0;
 i7 = i3 & 255;
 switch (i7 & 7) {
 case 0:
  {
   i1 = i4;
   i4 = i6;
   while (1) {
    i3 = i9;
    while (1) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 1 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 1 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 2 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 2 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 3 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 3 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 4 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 4 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 5 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 5 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 6 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 6 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 7 >> 0] = HEAP8[i8 + (HEAPU8[i1 + 7 >> 0] | 0) >> 0] | 0;
     i2 = i2 + 8 | 0;
     i1 = i1 + 8 | 0;
     if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
    }
    if (!i4) break; else {
     i1 = i1 + i11 | 0;
     i2 = i2 + i10 | 0;
     i4 = i4 + -1 | 0;
    }
   }
   return;
  }
 case 7:
  {
   while (1) {
    i5 = i9;
    while (1) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 1 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 1 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 2 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 2 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 3 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 3 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 4 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 4 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 5 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 5 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 6 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 6 >> 0] | 0) >> 0] | 0;
     i3 = i2 + 7 | 0;
     i1 = i4 + 7 | 0;
     if ((i5 | 0) <= 1) break;
     HEAP8[i3 >> 0] = HEAP8[i8 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
     i5 = i5 + -1 | 0;
     i4 = i4 + 8 | 0;
     i2 = i2 + 8 | 0;
    }
    if (!i6) break; else {
     i4 = i1 + i11 | 0;
     i2 = i3 + i10 | 0;
     i6 = i6 + -1 | 0;
    }
   }
   return;
  }
 default:
  {
   L5 : while (1) {
    switch (i7 & 7) {
    case 1:
     {
      i5 = i9;
      i3 = 17;
      break;
     }
    case 2:
     {
      i1 = i9;
      i3 = 16;
      break;
     }
    case 6:
     {
      i1 = i9;
      i3 = 12;
      break;
     }
    case 5:
     {
      i1 = i9;
      i3 = 13;
      break;
     }
    case 4:
     {
      i1 = i9;
      i3 = 14;
      break;
     }
    case 3:
     {
      i1 = i9;
      i3 = 15;
      break;
     }
    default:
     {
      i3 = 18;
      break L5;
     }
    }
    while (1) if ((i3 | 0) == 12) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     i4 = i4 + 1 | 0;
     i2 = i2 + 1 | 0;
     i3 = 13;
     continue;
    } else if ((i3 | 0) == 13) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     i4 = i4 + 1 | 0;
     i2 = i2 + 1 | 0;
     i3 = 14;
     continue;
    } else if ((i3 | 0) == 14) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     i4 = i4 + 1 | 0;
     i2 = i2 + 1 | 0;
     i3 = 15;
     continue;
    } else if ((i3 | 0) == 15) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     i4 = i4 + 1 | 0;
     i2 = i2 + 1 | 0;
     i3 = 16;
     continue;
    } else if ((i3 | 0) == 16) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     i5 = i1;
     i4 = i4 + 1 | 0;
     i2 = i2 + 1 | 0;
     i3 = 17;
     continue;
    } else if ((i3 | 0) == 17) {
     HEAP8[i2 >> 0] = HEAP8[i8 + (HEAPU8[i4 >> 0] | 0) >> 0] | 0;
     i3 = i2 + 1 | 0;
     i1 = i4 + 1 | 0;
     if ((i5 | 0) <= 1) break;
     HEAP8[i3 >> 0] = HEAP8[i8 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
     HEAP8[i2 + 2 >> 0] = HEAP8[i8 + (HEAPU8[i4 + 2 >> 0] | 0) >> 0] | 0;
     i1 = i5 + -1 | 0;
     i4 = i4 + 3 | 0;
     i2 = i2 + 3 | 0;
     i3 = 12;
     continue;
    }
    if (!i6) {
     i3 = 20;
     break;
    } else {
     i4 = i1 + i11 | 0;
     i2 = i3 + i10 | 0;
     i6 = i6 + -1 | 0;
    }
   }
   if ((i3 | 0) != 18) if ((i3 | 0) == 20) return;
  }
 }
}

function _SDL_PeepEvents(i13, i14, i2, i11, i12) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i15 + 16 | 0;
 i6 = i15 + 8 | 0;
 i1 = i15;
 if (!(_SDL_AtomicGet(15136) | 0)) {
  if (!i2) {
   i14 = -1;
   STACKTOP = i15;
   return i14 | 0;
  }
  _SDL_SetError(46801, i1) | 0;
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[3783] | 0;
 if (i1 | 0) if (_SDL_LockMutex(i1) | 0) {
  i14 = _SDL_SetError(46869, i3) | 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 L13 : do if (!i2) if ((i14 | 0) > 0) {
  i4 = 0;
  i1 = 0;
  do {
   i3 = i13 + (i4 * 56 | 0) | 0;
   i2 = _SDL_AtomicGet(15140) | 0;
   do if ((i2 | 0) > 65534) {
    HEAP32[i6 >> 2] = i2;
    _SDL_SetError(46837, i6) | 0;
    i2 = 0;
   } else {
    i2 = HEAP32[3789] | 0;
    if (!i2) {
     i2 = _SDL_malloc(80) | 0;
     if (!i2) {
      i2 = 0;
      break;
     }
    } else HEAP32[3789] = HEAP32[i2 + 72 >> 2];
    i5 = i2;
    i7 = i3;
    i8 = i5 + 56 | 0;
    do {
     HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
     i5 = i5 + 4 | 0;
     i7 = i7 + 4 | 0;
    } while ((i5 | 0) < (i8 | 0));
    if ((HEAP32[i3 >> 2] | 0) == 513) {
     i12 = i2 + 56 | 0;
     i11 = HEAP32[i13 + (i4 * 56 | 0) + 8 >> 2] | 0;
     HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i12 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
     HEAP32[i12 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
     HEAP32[i2 + 8 >> 2] = i12;
    }
    i3 = HEAP32[3788] | 0;
    if (!i3) {
     HEAP32[3787] = i2;
     HEAP32[3788] = i2;
     HEAP32[i2 + 68 >> 2] = 0;
    } else {
     HEAP32[i3 + 72 >> 2] = i2;
     HEAP32[i2 + 68 >> 2] = i3;
     HEAP32[3788] = i2;
    }
    HEAP32[i2 + 72 >> 2] = 0;
    i2 = _SDL_AtomicAdd(15140, 1) | 0;
    if ((i2 | 0) < (HEAP32[3786] | 0)) i2 = 1; else {
     HEAP32[3786] = i2 + 1;
     i2 = 1;
    }
   } while (0);
   i1 = i2 + i1 | 0;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i14 | 0));
 } else i1 = 0; else {
  i10 = (i2 | 0) == 2;
  if (i10) {
   i1 = HEAP32[3790] | 0;
   if (i1 | 0) {
    i3 = HEAP32[3791] | 0;
    while (1) {
     i9 = i1 + 12 | 0;
     i2 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i3;
     i3 = i1;
     if (!i2) break; else i1 = i2;
    }
    HEAP32[3791] = i1;
   }
   HEAP32[3790] = 0;
  }
  i2 = HEAP32[3787] | 0;
  if (!i13) {
   i1 = 0;
   while (1) {
    do {
     if (!i2) break L13;
     i14 = i2;
     i2 = HEAP32[i2 + 72 >> 2] | 0;
     i14 = HEAP32[i14 >> 2] | 0;
    } while (i14 >>> 0 < i11 >>> 0 | i14 >>> 0 > i12 >>> 0);
    i1 = i1 + 1 | 0;
   }
  }
  if ((i14 | 0) > 0) {
   i1 = 0;
   while (1) {
    while (1) {
     if (!i2) break L13;
     i6 = i2 + 72 | 0;
     i9 = HEAP32[i6 >> 2] | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if (i3 >>> 0 < i11 >>> 0 | i3 >>> 0 > i12 >>> 0) i2 = i9; else break;
    }
    i5 = i13 + (i1 * 56 | 0) | 0;
    i7 = i2;
    i8 = i5 + 56 | 0;
    do {
     HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
     i5 = i5 + 4 | 0;
     i7 = i7 + 4 | 0;
    } while ((i5 | 0) < (i8 | 0));
    if ((i3 | 0) == 513) {
     i3 = HEAP32[3791] | 0;
     if (!i3) i3 = _SDL_malloc(16) | 0; else HEAP32[3791] = HEAP32[i3 + 12 >> 2];
     i8 = HEAP32[i2 + 8 >> 2] | 0;
     HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i3 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
     HEAP32[i3 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
     HEAP32[i3 + 12 >> 2] = HEAP32[3790];
     HEAP32[3790] = i3;
     HEAP32[i13 + (i1 * 56 | 0) + 8 >> 2] = i3;
    }
    if (i10) {
     i3 = i2 + 68 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4 | 0) HEAP32[i4 + 72 >> 2] = HEAP32[i6 >> 2];
     i5 = HEAP32[i6 >> 2] | 0;
     if (i5 | 0) HEAP32[i5 + 68 >> 2] = i4;
     if ((HEAP32[3787] | 0) == (i2 | 0)) HEAP32[3787] = i5;
     if ((HEAP32[3788] | 0) == (i2 | 0)) HEAP32[3788] = HEAP32[i3 >> 2];
     HEAP32[i6 >> 2] = HEAP32[3789];
     HEAP32[3789] = i2;
     _SDL_AtomicAdd(15140, -1) | 0;
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) < (i14 | 0)) i2 = i9; else break;
   }
  } else i1 = 0;
 } while (0);
 if (!(HEAP32[3783] | 0)) {
  i14 = i1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i14 = i1;
 STACKTOP = i15;
 return i14 | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i21, i9, i25, i26, d5) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i9 = i9 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1008);
 i11 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 896 | 0;
 i4 = i28 + 888 | 0;
 i2 = i28 + 488 | 0;
 i27 = i28 + 480 | 0;
 i12 = i28 + 892 | 0;
 i13 = i28 + 476 | 0;
 i14 = i28 + 472 | 0;
 i22 = i28 + 460 | 0;
 i23 = i28 + 448 | 0;
 i24 = i28 + 436 | 0;
 i8 = i28 + 432 | 0;
 i10 = i28 + 32 | 0;
 i15 = i28 + 24 | 0;
 i16 = i28 + 16 | 0;
 i17 = i28 + 20 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i11 >> 3] = d5;
 i1 = _snprintf(i1, 100, 74645, i11) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i4, i1, 74645, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1 << 2) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i18 = i3;
   i20 = i1;
   i30 = i3;
   i31 = i2;
  }
 } else {
  i18 = i2;
  i20 = i1;
  i30 = 0;
  i31 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i27, i25);
 i7 = __ZNKSt3__26locale9use_facetERNS0_2idE(i27, 83652) | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 31](i7, i6, i6 + i20 | 0, i18) | 0;
 if (!i20) i6 = 0; else i6 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i24 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i9, i6, i27, i12, i13, i14, i22, i23, i24, i8);
 i4 = HEAP32[i8 >> 2] | 0;
 if ((i20 | 0) > (i4 | 0)) {
  i2 = HEAP8[i24 + 8 + 3 >> 0] | 0;
  i3 = HEAP8[i23 + 8 + 3 >> 0] | 0;
  i1 = 1;
  i2 = (i2 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i2 & 255) + (i20 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i24 + 8 + 3 >> 0] | 0;
  i2 = HEAP8[i23 + 8 + 3 >> 0] | 0;
  i1 = 2;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i2 & 255;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i3 + i4 + i2 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1 << 2) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i29 = i1;
  }
 } else {
  i19 = i10;
  i29 = 0;
 }
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i19, i15, i16, HEAP32[i25 + 4 >> 2] | 0, i18, i18 + (i20 << 2) | 0, i7, i6, i12, HEAP32[i13 >> 2] | 0, HEAP32[i14 >> 2] | 0, i22, i23, i24, i4);
 HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i19, i21, i1, i25, i26) | 0;
 if (i29 | 0) _free(i29);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i24);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 __ZNSt3__26localeD2Ev(i27);
 if (i30 | 0) _free(i30);
 if (i31 | 0) _free(i31);
 STACKTOP = i28;
 return i1 | 0;
}

function _SDL_SendWindowEvent(i6, i7, i3, i4) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i8;
 if (!i6) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 L4 : do switch (i7 << 24 >> 24) {
 case 1:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 4)) {
    HEAP32[i1 >> 2] = i2 & -13 | 4;
    _SDL_OnWindowShown(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 2:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 4)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -13 | 8;
    _SDL_OnWindowHidden(i6);
    break L4;
   }
  }
 case 4:
  {
   if ((i3 & -65536 | 0) == 536805376 | (i4 & -65536 | 0) == 536805376) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   if (!(HEAP32[i6 + 48 >> 2] & 1)) {
    HEAP32[i6 + 56 >> 2] = i3;
    HEAP32[i6 + 60 >> 2] = i4;
   }
   i1 = i6 + 16 | 0;
   i2 = i6 + 20 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   HEAP32[i1 >> 2] = i3;
   HEAP32[i2 >> 2] = i4;
   break;
  }
 case 5:
  {
   if (!(HEAP32[i6 + 48 >> 2] & 1)) {
    HEAP32[i6 + 64 >> 2] = i3;
    HEAP32[i6 + 68 >> 2] = i4;
   }
   i1 = i6 + 24 | 0;
   i2 = i6 + 28 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i3 | 0)) if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   HEAP32[i1 >> 2] = i3;
   HEAP32[i2 >> 2] = i4;
   _SDL_OnWindowResized(i6);
   break;
  }
 case 7:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 64)) {
    HEAP32[i1 >> 2] = i2 & -193 | 64;
    _SDL_OnWindowMinimized(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 8:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 128)) {
    HEAP32[i1 >> 2] = i2 & -193 | 128;
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 9:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 192)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -193;
    _SDL_OnWindowRestored(i6);
    break L4;
   }
  }
 case 10:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 1024)) {
    HEAP32[i1 >> 2] = i2 | 1024;
    _SDL_OnWindowEnter(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 11:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 1024)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -1025;
    break L4;
   }
  }
 case 12:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 512)) {
    HEAP32[i1 >> 2] = i2 | 512;
    _SDL_OnWindowFocusGained(i6);
    break L4;
   } else {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  }
 case 13:
  {
   i1 = i6 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (!(i2 & 512)) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   } else {
    HEAP32[i1 >> 2] = i2 & -513;
    _SDL_OnWindowFocusLost(i6);
    break L4;
   }
  }
 default:
  {}
 } while (0);
 if ((_SDL_EventState(512, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i5 >> 2] = 512;
  HEAP8[i5 + 12 >> 0] = i7;
  HEAP32[i5 + 16 >> 2] = i3;
  HEAP32[i5 + 20 >> 2] = i4;
  HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 4 >> 2];
  switch (i7 << 24 >> 24) {
  case 5:
   {
    _SDL_FilterEvents(22, i5);
    break;
   }
  case 6:
   {
    _SDL_FilterEvents(23, i5);
    break;
   }
  case 4:
   {
    _SDL_FilterEvents(24, i5);
    break;
   }
  case 3:
   {
    _SDL_FilterEvents(25, i5);
    break;
   }
  default:
   {}
  }
  i1 = (_SDL_PushEvent(i5) | 0) > 0 & 1;
 } else i1 = 0;
 if (i7 << 24 >> 24 != 14) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (HEAP32[i6 + 148 >> 2] | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (HEAP32[i6 + 152 >> 2] | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SendQuit() | 0;
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (!i2) {
  if (i1) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  }
  if (!i9) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i12 = 0;
   i13 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13 | 0) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i12 = 0;
   i13 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i12 = 0;
  i13 = 0;
  return (tempRet0 = i12, i13) | 0;
 } else {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2 | 0) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13 | 0) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (tempRet0 = i14, i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i14, i15) | 0;
  }
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = tempRet0;
  i4 = i3;
  i3 = 0;
  do {
   i16 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i16 = i5 << 1 | i16 >>> 31 | 0;
   i11 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7 | 0, i8 | 0, i16 | 0, i11 | 0) | 0;
   i14 = tempRet0;
   i15 = ((i14 | 0) < 0 ? -1 : 0) << 1 | 0;
   i12 = i14 >> 31 | i15;
   i3 = i12 & 1;
   i5 = _i64Subtract(i16 | 0, i11 | 0, i12 & i10 | 0, (((i14 | 0) < 0 ? -1 : 0) >> 31 | i15) & i9 | 0) | 0;
   i6 = tempRet0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13 | 0) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i15 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i16 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (tempRet0 = i15, i16) | 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i21, i9, i25, i26, d5) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i9 = i9 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(384);
 i11 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 284 | 0;
 i4 = i28 + 72 | 0;
 i2 = i28 + 184 | 0;
 i27 = i28 + 68 | 0;
 i12 = i28 + 180 | 0;
 i13 = i28 + 177 | 0;
 i14 = i28 + 176 | 0;
 i22 = i28 + 56 | 0;
 i23 = i28 + 44 | 0;
 i24 = i28 + 32 | 0;
 i8 = i28 + 28 | 0;
 i10 = i28 + 76 | 0;
 i15 = i28 + 24 | 0;
 i16 = i28 + 16 | 0;
 i17 = i28 + 20 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i11 >> 3] = d5;
 i1 = _snprintf(i1, 100, 74645, i11) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__26__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i4, i1, 74645, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i18 = i3;
   i20 = i1;
   i30 = i3;
   i31 = i2;
  }
 } else {
  i18 = i2;
  i20 = i1;
  i30 = 0;
  i31 = 0;
 }
 __ZNKSt3__28ios_base6getlocEv(i27, i25);
 i7 = __ZNKSt3__26locale9use_facetERNS0_2idE(i27, 83620) | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] & 31](i7, i6, i6 + i20 | 0, i18) | 0;
 if (!i20) i6 = 0; else i6 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i23 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i24 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i9, i6, i27, i12, i13, i14, i22, i23, i24, i8);
 i4 = HEAP32[i8 >> 2] | 0;
 if ((i20 | 0) > (i4 | 0)) {
  i2 = HEAP8[i24 + 11 >> 0] | 0;
  i3 = HEAP8[i23 + 11 >> 0] | 0;
  i1 = 1;
  i2 = (i2 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i2 & 255) + (i20 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i24 + 11 >> 0] | 0;
  i2 = HEAP8[i23 + 11 >> 0] | 0;
  i1 = 2;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i23 + 4 >> 2] | 0 : i2 & 255;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i24 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i3 + i4 + i2 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i29 = i1;
  }
 } else {
  i19 = i10;
  i29 = 0;
 }
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i19, i15, i16, HEAP32[i25 + 4 >> 2] | 0, i18, i18 + i20 | 0, i7, i6, i12, HEAP8[i13 >> 0] | 0, HEAP8[i14 >> 0] | 0, i22, i23, i24, i4);
 HEAP32[i17 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[i17 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i19, i21, i1, i25, i26) | 0;
 if (i29 | 0) _free(i29);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 __ZNSt3__26localeD2Ev(i27);
 if (i30 | 0) _free(i30);
 if (i31 | 0) _free(i31);
 STACKTOP = i28;
 return i1 | 0;
}

function _SDL_BlendPoint_RGBA(i2, i3, i4, i5, i7, i8, i9, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i6 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i10 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i1 & 255;
 i6 = i1 ^ 255;
 if ((HEAP8[i10 + 9 >> 0] | 0) != 4) {
  i10 = _SDL_Error(4) | 0;
  return i10 | 0;
 }
 switch (i5 | 0) {
 case 1:
  {
   i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i14 = HEAPU8[i10 + 28 >> 0] | 0;
   i11 = HEAP32[i3 >> 2] | 0;
   i13 = HEAPU8[i10 + 32 >> 0] | 0;
   i16 = HEAPU8[i10 + 29 >> 0] | 0;
   i15 = HEAPU8[i10 + 33 >> 0] | 0;
   i12 = HEAPU8[i10 + 30 >> 0] | 0;
   i2 = HEAPU8[i10 + 34 >> 0] | 0;
   i4 = HEAPU8[i10 + 31 >> 0] | 0;
   i5 = HEAPU8[i10 + 35 >> 0] | 0;
   i2 = ((((Math_imul(i6, HEAPU8[(HEAP32[5724 + (i16 << 2) >> 2] | 0) + ((HEAP32[i10 + 16 >> 2] & i11) >>> i15) >> 0] | 0) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0) >>> i16 << i15 | ((((Math_imul(i6, HEAPU8[(HEAP32[5724 + (i14 << 2) >> 2] | 0) + ((HEAP32[i10 + 12 >> 2] & i11) >>> i13) >> 0] | 0) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0) >>> i14 << i13 | ((((Math_imul(i6, HEAPU8[(HEAP32[5724 + (i12 << 2) >> 2] | 0) + ((HEAP32[i10 + 20 >> 2] & i11) >>> i2) >> 0] | 0) | 0) >>> 0) / 255 | 0) + (i9 & 255) | 0) >>> i12 << i2;
   i1 = ((((Math_imul(i6, HEAPU8[(HEAP32[5724 + (i4 << 2) >> 2] | 0) + ((HEAP32[i10 + 24 >> 2] & i11) >>> i5) >> 0] | 0) | 0) >>> 0) / 255 | 0) + i1 | 0) >>> i4 << i5;
   break;
  }
 case 2:
  {
   i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i11 = HEAPU8[i10 + 28 >> 0] | 0;
   i15 = HEAP32[i3 >> 2] | 0;
   i12 = HEAPU8[i10 + 32 >> 0] | 0;
   i5 = HEAPU8[i10 + 29 >> 0] | 0;
   i6 = HEAPU8[i10 + 33 >> 0] | 0;
   i14 = HEAPU8[i10 + 30 >> 0] | 0;
   i2 = HEAPU8[i10 + 34 >> 0] | 0;
   i16 = HEAPU8[i10 + 31 >> 0] | 0;
   i1 = HEAPU8[i10 + 35 >> 0] | 0;
   i7 = (HEAPU8[(HEAP32[5724 + (i11 << 2) >> 2] | 0) + ((HEAP32[i10 + 12 >> 2] & i15) >>> i12) >> 0] | 0) + (i7 & 255) | 0;
   i8 = (HEAPU8[(HEAP32[5724 + (i5 << 2) >> 2] | 0) + ((HEAP32[i10 + 16 >> 2] & i15) >>> i6) >> 0] | 0) + (i8 & 255) | 0;
   i13 = (HEAPU8[(HEAP32[5724 + (i14 << 2) >> 2] | 0) + ((HEAP32[i10 + 20 >> 2] & i15) >>> i2) >> 0] | 0) + (i9 & 255) | 0;
   i2 = (i8 >>> 0 < 255 ? i8 : 255) >>> i5 << i6 | (i7 >>> 0 < 255 ? i7 : 255) >>> i11 << i12 | (i13 >>> 0 < 255 ? i13 : 255) >>> i14 << i2;
   i1 = (HEAPU8[(HEAP32[5724 + (i16 << 2) >> 2] | 0) + ((HEAP32[i10 + 24 >> 2] & i15) >>> i1) >> 0] | 0) >>> i16 << i1;
   break;
  }
 case 4:
  {
   i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i12 = HEAPU8[i10 + 28 >> 0] | 0;
   i15 = HEAP32[i3 >> 2] | 0;
   i13 = HEAPU8[i10 + 32 >> 0] | 0;
   i6 = HEAPU8[i10 + 29 >> 0] | 0;
   i11 = HEAPU8[i10 + 33 >> 0] | 0;
   i14 = HEAPU8[i10 + 30 >> 0] | 0;
   i2 = HEAPU8[i10 + 34 >> 0] | 0;
   i16 = HEAPU8[i10 + 31 >> 0] | 0;
   i1 = HEAPU8[i10 + 35 >> 0] | 0;
   i2 = (((Math_imul(HEAPU8[(HEAP32[5724 + (i6 << 2) >> 2] | 0) + ((HEAP32[i10 + 16 >> 2] & i15) >>> i11) >> 0] | 0, i8 & 255) | 0) >>> 0) / 255 | 0) >>> i6 << i11 | (((Math_imul(HEAPU8[(HEAP32[5724 + (i12 << 2) >> 2] | 0) + ((HEAP32[i10 + 12 >> 2] & i15) >>> i13) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0) >>> i12 << i13 | (((Math_imul(HEAPU8[(HEAP32[5724 + (i14 << 2) >> 2] | 0) + ((HEAP32[i10 + 20 >> 2] & i15) >>> i2) >> 0] | 0, i9 & 255) | 0) >>> 0) / 255 | 0) >>> i14 << i2;
   i1 = (HEAPU8[(HEAP32[5724 + (i16 << 2) >> 2] | 0) + ((HEAP32[i10 + 24 >> 2] & i15) >>> i1) >> 0] | 0) >>> i16 << i1;
   break;
  }
 default:
  {
   i3 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i2 = (i8 & 255) >>> (HEAPU8[i10 + 29 >> 0] | 0) << HEAPU8[i10 + 33 >> 0] | (i7 & 255) >>> (HEAPU8[i10 + 28 >> 0] | 0) << HEAPU8[i10 + 32 >> 0] | (i9 & 255) >>> (HEAPU8[i10 + 30 >> 0] | 0) << HEAPU8[i10 + 34 >> 0];
   i1 = i1 >>> (HEAPU8[i10 + 31 >> 0] | 0) << HEAPU8[i10 + 35 >> 0];
  }
 }
 HEAP32[i3 >> 2] = i2 | i1;
 i16 = 0;
 return i16 | 0;
}

function _Blit4to4CopyAlpha(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i10 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i1 + 20 >> 2] | 0;
 i8 = HEAP32[i1 + 36 >> 2] | 0;
 i4 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i3 + 7 | 0) / 8 | 0;
 i7 = i3 & 255;
 switch (i7 & 7) {
 case 0:
  {
   i1 = i5;
   while (1) {
    i3 = i9;
    while (1) {
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
     HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
     HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
     HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
     HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
     HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 28 >> 2];
     i1 = i1 + 32 | 0;
     i2 = i2 + 32 | 0;
     if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
    }
    if (!i4) break; else {
     i1 = i1 + i8 | 0;
     i2 = i2 + i10 | 0;
     i4 = i4 + -1 | 0;
    }
   }
   return;
  }
 case 7:
  {
   i7 = (i3 | 0) > 8;
   while (1) {
    HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i5 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
    HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
    HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
    HEAP32[i5 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
    HEAP32[i5 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
    HEAP32[i5 + 24 >> 2] = HEAP32[i2 + 24 >> 2];
    i1 = i5 + 28 | 0;
    i3 = i2 + 28 | 0;
    if (i7) {
     i6 = i9;
     while (1) {
      HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
      i1 = i5;
      i5 = i5 + 32 | 0;
      i3 = i2;
      i2 = i2 + 32 | 0;
      HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
      HEAP32[i1 + 36 >> 2] = HEAP32[i3 + 36 >> 2];
      HEAP32[i1 + 40 >> 2] = HEAP32[i3 + 40 >> 2];
      HEAP32[i1 + 44 >> 2] = HEAP32[i3 + 44 >> 2];
      HEAP32[i1 + 48 >> 2] = HEAP32[i3 + 48 >> 2];
      HEAP32[i1 + 52 >> 2] = HEAP32[i3 + 52 >> 2];
      HEAP32[i1 + 56 >> 2] = HEAP32[i3 + 56 >> 2];
      i1 = i1 + 60 | 0;
      i3 = i3 + 60 | 0;
      if ((i6 | 0) <= 2) {
       i2 = i3;
       break;
      } else i6 = i6 + -1 | 0;
     }
    } else i2 = i3;
    if (!i4) break; else {
     i5 = i1 + i8 | 0;
     i2 = i2 + i10 | 0;
     i4 = i4 + -1 | 0;
    }
   }
   return;
  }
 default:
  {
   L5 : while (1) {
    switch (i7 & 7) {
    case 1:
     {
      i6 = i9;
      i3 = 17;
      break;
     }
    case 2:
     {
      i1 = i9;
      i3 = 16;
      break;
     }
    case 6:
     {
      i1 = i9;
      i3 = 12;
      break;
     }
    case 5:
     {
      i1 = i9;
      i3 = 13;
      break;
     }
    case 4:
     {
      i1 = i9;
      i3 = 14;
      break;
     }
    case 3:
     {
      i1 = i9;
      i3 = 15;
      break;
     }
    default:
     {
      i3 = 18;
      break L5;
     }
    }
    while (1) if ((i3 | 0) == 12) {
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     i5 = i5 + 4 | 0;
     i2 = i2 + 4 | 0;
     i3 = 13;
     continue;
    } else if ((i3 | 0) == 13) {
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     i5 = i5 + 4 | 0;
     i2 = i2 + 4 | 0;
     i3 = 14;
     continue;
    } else if ((i3 | 0) == 14) {
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     i5 = i5 + 4 | 0;
     i2 = i2 + 4 | 0;
     i3 = 15;
     continue;
    } else if ((i3 | 0) == 15) {
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     i5 = i5 + 4 | 0;
     i2 = i2 + 4 | 0;
     i3 = 16;
     continue;
    } else if ((i3 | 0) == 16) {
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     i6 = i1;
     i5 = i5 + 4 | 0;
     i2 = i2 + 4 | 0;
     i3 = 17;
     continue;
    } else if ((i3 | 0) == 17) {
     HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
     i1 = i5 + 4 | 0;
     i3 = i2 + 4 | 0;
     if ((i6 | 0) <= 1) break;
     HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
     i1 = i6 + -1 | 0;
     i5 = i5 + 12 | 0;
     i2 = i2 + 12 | 0;
     i3 = 12;
     continue;
    }
    if (!i4) {
     i3 = 20;
     break;
    } else {
     i5 = i1 + i8 | 0;
     i2 = i3 + i10 | 0;
     i4 = i4 + -1 | 0;
    }
   }
   if ((i3 | 0) != 18) if ((i3 | 0) == 20) return;
  }
 }
}

function _SDL_MasksToPixelFormatEnum(i1, i12, i13, i11, i10) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = 0;
 L1 : do switch (i1 | 0) {
 case 4:
  {
   i13 = 304088064;
   return i13 | 0;
  }
 case 8:
  {
   if (!i12) {
    i13 = 318769153;
    return i13 | 0;
   }
   if ((i12 | 0) == 224 & (i13 | 0) == 28 & (i11 | 0) == 3 & (i10 | 0) == 0) {
    i13 = 336660481;
    return i13 | 0;
   }
   break;
  }
 case 12:
  {
   if (!i12) {
    i13 = 353504258;
    return i13 | 0;
   }
   if ((i12 | 0) == 3840 & (i13 | 0) == 240 & (i11 | 0) == 15 & (i10 | 0) == 0) {
    i13 = 353504258;
    return i13 | 0;
   }
   break;
  }
 case 15:
  {
   if (!i12) {
    i13 = 353570562;
    return i13 | 0;
   } else i2 = 9;
   break;
  }
 case 16:
  {
   if (!i12) {
    i13 = 353701890;
    return i13 | 0;
   } else i2 = 9;
   break;
  }
 case 24:
  {
   if ((i12 | 0) < 255) {
    switch (i12 | 0) {
    case 0:
     {
      i1 = 390076419;
      break;
     }
    default:
     {
      i2 = 24;
      break L1;
     }
    }
    return i1 | 0;
   }
   if ((i12 | 0) >= 16711680) {
    switch (i12 | 0) {
    case 16711680:
     {
      i1 = 390076419;
      break;
     }
    default:
     {
      i2 = 24;
      break L1;
     }
    }
    return i1 | 0;
   }
   switch (i12 | 0) {
   case 255:
    break;
   default:
    {
     i2 = 24;
     break L1;
    }
   }
   i13 = 386930691;
   return i13 | 0;
  }
 case 32:
  {
   if (!i12) {
    i13 = 370546692;
    return i13 | 0;
   } else i2 = 24;
   break;
  }
 case 1:
  {
   i13 = 287310080;
   return i13 | 0;
  }
 default:
  {}
 } while (0);
 if ((i2 | 0) == 9) {
  i1 = (i13 | 0) == 992;
  i7 = (i11 | 0) == 31;
  i5 = (i12 | 0) == 31744 & i1 & i7;
  i8 = (i10 | 0) == 0;
  if (i5 & i8) {
   i13 = 353570562;
   return i13 | 0;
  }
  i9 = (i12 | 0) == 31;
  i6 = i9 & i1 & (i11 | 0) == 31744;
  if (i6 & i8) {
   i13 = 357764866;
   return i13 | 0;
  }
  i1 = (i13 | 0) == 240;
  i2 = (i10 | 0) == 61440;
  if ((i12 | 0) == 3840 & i1 & (i11 | 0) == 15 & i2) {
   i13 = 355602434;
   return i13 | 0;
  }
  i3 = (i13 | 0) == 3840;
  i4 = (i10 | 0) == 15;
  if ((i12 | 0) == 61440 & i3 & (i11 | 0) == 240 & i4) {
   i13 = 356651010;
   return i13 | 0;
  }
  if ((i12 | 0) == 15 & i1 & (i11 | 0) == 3840 & i2) {
   i13 = 359796738;
   return i13 | 0;
  }
  if ((i12 | 0) == 240 & i3 & (i11 | 0) == 61440 & i4) {
   i13 = 360845314;
   return i13 | 0;
  }
  i2 = (i10 | 0) == 32768;
  if (i5 & i2) {
   i13 = 355667970;
   return i13 | 0;
  }
  i4 = (i12 | 0) == 63488;
  i3 = (i13 | 0) == 1984;
  i1 = (i10 | 0) == 1;
  if (i4 & i3 & (i11 | 0) == 62 & i1) {
   i13 = 356782082;
   return i13 | 0;
  }
  if (i6 & i2) {
   i13 = 359862274;
   return i13 | 0;
  }
  i2 = (i11 | 0) == 63488;
  if ((i12 | 0) == 62 & i3 & i2 & i1) {
   i13 = 360976386;
   return i13 | 0;
  }
  i1 = (i13 | 0) == 2016;
  if (i4 & i1 & i7 & i8) {
   i13 = 353701890;
   return i13 | 0;
  }
  if (i9 & i1 & i2 & i8) {
   i13 = 357896194;
   return i13 | 0;
  }
 } else if ((i2 | 0) == 24) {
  i1 = (i13 | 0) == 65280;
  i5 = (i12 | 0) == 16711680 & i1 & (i11 | 0) == 255;
  i3 = (i10 | 0) == 0;
  if (i5 & i3) {
   i13 = 370546692;
   return i13 | 0;
  }
  i2 = (i13 | 0) == 16711680;
  i7 = (i12 | 0) == -16777216 & i2 & (i11 | 0) == 65280;
  if (i7 & i3) {
   i13 = 371595268;
   return i13 | 0;
  }
  i6 = (i12 | 0) == 255 & i1 & (i11 | 0) == 16711680;
  if (i6 & i3) {
   i13 = 374740996;
   return i13 | 0;
  }
  i4 = (i12 | 0) == 65280 & i2 & (i11 | 0) == -16777216;
  if (i4 & i3) {
   i13 = 375789572;
   return i13 | 0;
  }
  i2 = (i10 | 0) == -16777216;
  if (i5 & i2) {
   i13 = 372645892;
   return i13 | 0;
  }
  i1 = (i10 | 0) == 255;
  if (i7 & i1) {
   i13 = 373694468;
   return i13 | 0;
  }
  if (i6 & i2) {
   i13 = 376840196;
   return i13 | 0;
  }
  if (i4 & i1) {
   i13 = 377888772;
   return i13 | 0;
  }
  if ((i12 | 0) == 1072693248 & (i13 | 0) == 1047552 & (i11 | 0) == 1023 & (i10 | 0) == -1073741824) {
   i13 = 372711428;
   return i13 | 0;
  }
 }
 i13 = 0;
 return i13 | 0;
}

function _SDL_UpperBlitScaled(i25, i6, i26, i27) {
 i25 = i25 | 0;
 i6 = i6 | 0;
 i26 = i26 | 0;
 i27 = i27 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i7 = 0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0, d21 = 0.0, d22 = 0.0, d23 = 0.0, i24 = 0, i28 = 0, i29 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i1 = i30 + 8 | 0;
 i28 = i30 + 32 | 0;
 i29 = i30 + 16 | 0;
 if (!((i25 | 0) != 0 & (i26 | 0) != 0)) {
  i29 = _SDL_SetError(47751, i30) | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 if (!(HEAP32[i25 + 28 >> 2] | 0)) if (!(HEAP32[i26 + 28 >> 2] | 0)) {
  i4 = (i6 | 0) == 0;
  i15 = i25 + 8 | 0;
  i16 = i25 + 12 | 0;
  i3 = HEAP32[(i4 ? i16 : i6 + 12 | 0) >> 2] | 0;
  i7 = HEAP32[(i4 ? i15 : i6 + 8 | 0) >> 2] | 0;
  i24 = (i27 | 0) == 0;
  i1 = HEAP32[(i24 ? i26 + 12 | 0 : i27 + 12 | 0) >> 2] | 0;
  i2 = HEAP32[(i24 ? i26 + 8 | 0 : i27 + 8 | 0) >> 2] | 0;
  if ((i1 | 0) == (i3 | 0) & (i2 | 0) == (i7 | 0)) {
   i29 = _SDL_UpperBlit(i25, i6, i26, i27) | 0;
   STACKTOP = i30;
   return i29 | 0;
  }
  d8 = +(i2 | 0);
  d10 = +(i7 | 0);
  d22 = d8 / d10;
  d5 = +(i1 | 0);
  d11 = +(i3 | 0);
  d23 = d5 / d11;
  if (i24) {
   d17 = +(i1 + -1 | 0);
   d8 = +(i2 + -1 | 0);
   d9 = 0.0;
   d5 = 0.0;
  } else {
   d21 = +(HEAP32[i27 >> 2] | 0);
   d9 = +(HEAP32[i27 + 4 >> 2] | 0);
   d17 = d5 + d9 + -1.0;
   d8 = d8 + d21 + -1.0;
   d5 = d21;
  }
  if (i4) {
   d21 = +(i3 + -1 | 0);
   d10 = 0.0;
   d14 = d17;
   d11 = +(i7 + -1 | 0);
   d12 = 0.0;
  } else {
   i7 = HEAP32[i6 >> 2] | 0;
   d13 = +(i7 | 0);
   i1 = HEAP32[i6 + 4 >> 2] | 0;
   d21 = +(i1 | 0);
   d12 = d10 + d13 + -1.0;
   d14 = d11 + d21 + -1.0;
   d5 = (i7 | 0) < 0 ? d5 - d22 * d13 : d5;
   d10 = +(((i7 | 0) > 0 ? i7 : 0) | 0);
   i7 = HEAP32[i15 >> 2] | 0;
   d13 = +(i7 | 0);
   i15 = !(d12 >= d13);
   d11 = i15 ? d12 : +(i7 + -1 | 0);
   d13 = i15 ? d8 : d8 - d22 * (d12 - d13 + 1.0);
   d12 = +(((i1 | 0) > 0 ? i1 : 0) | 0);
   d9 = (i1 | 0) < 0 ? d9 - d23 * d21 : d9;
   i1 = HEAP32[i16 >> 2] | 0;
   d8 = +(i1 | 0);
   if (!(d14 >= d8)) {
    d21 = d14;
    d14 = d17;
    d8 = d13;
   } else {
    d21 = +(i1 + -1 | 0);
    d14 = d17 - d23 * (d14 - d8 + 1.0);
    d8 = d13;
   }
  }
  d19 = +(HEAP32[i26 + 36 >> 2] | 0);
  d18 = d5 - d19;
  d13 = d8 - d19;
  d20 = +(HEAP32[i26 + 40 >> 2] | 0);
  d17 = d9 - d20;
  d8 = d14 - d20;
  i3 = d18 < 0.0;
  d10 = i3 ? d10 - d18 / d22 : d10;
  i1 = HEAP32[i26 + 44 >> 2] | 0;
  d5 = +(i1 | 0);
  if (d13 >= d5) {
   d11 = d11 - (d13 - d5 + 1.0) / d22;
   d13 = +(i1 + -1 | 0);
  }
  i2 = d17 < 0.0;
  d9 = i2 ? d12 - d17 / d23 : d12;
  i1 = HEAP32[i26 + 48 >> 2] | 0;
  d5 = +(i1 | 0);
  if (!(d8 >= d5)) d5 = d21; else {
   d5 = d21 - (d8 - d5 + 1.0) / d23;
   d8 = +(i1 + -1 | 0);
  }
  d22 = (i3 ? 0.0 : d18) + d19;
  d23 = (i2 ? 0.0 : d17) + d20;
  HEAP32[i28 >> 2] = ~~+_SDL_floor(d10 + .5);
  HEAP32[i28 + 4 >> 2] = ~~+_SDL_floor(d9 + .5);
  i7 = ~~+_SDL_floor(d11 - d10 + 1.5);
  HEAP32[i28 + 8 >> 2] = i7;
  i6 = ~~+_SDL_floor(d5 - d9 + 1.5);
  HEAP32[i28 + 12 >> 2] = i6;
  HEAP32[i29 >> 2] = ~~+_SDL_floor(d22 + .5);
  HEAP32[i29 + 4 >> 2] = ~~+_SDL_floor(d23 + .5);
  i2 = ~~+_SDL_floor(d13 + d19 - d22 + 1.5);
  i4 = i29 + 8 | 0;
  HEAP32[i4 >> 2] = i2;
  i1 = ~~+_SDL_floor(d8 + d20 - d23 + 1.5);
  i3 = i29 + 12 | 0;
  HEAP32[i3 >> 2] = i1;
  if ((i2 | 0) < 0) {
   HEAP32[i4 >> 2] = 0;
   i2 = 0;
  }
  if ((i1 | 0) < 0) {
   HEAP32[i3 >> 2] = 0;
   i1 = 0;
  }
  if (!i24) {
   HEAP32[i27 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i27 + 4 >> 2] = HEAP32[i29 + 4 >> 2];
   HEAP32[i27 + 8 >> 2] = HEAP32[i29 + 8 >> 2];
   HEAP32[i27 + 12 >> 2] = HEAP32[i29 + 12 >> 2];
  }
  if ((i2 | 0) == 0 | (i1 | 0) == 0 | (i7 | 0) < 1 | (i6 | 0) < 1) {
   i29 = 0;
   STACKTOP = i30;
   return i29 | 0;
  }
  i29 = _SDL_LowerBlitScaled(i25, i28, i26, i29) | 0;
  STACKTOP = i30;
  return i29 | 0;
 }
 i29 = _SDL_SetError(47644, i1) | 0;
 STACKTOP = i30;
 return i29 | 0;
}

function _Blit1to2Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i12 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 48 >> 2] | 0;
 i11 = HEAP32[i1 + 56 >> 2] | 0;
 i8 = (HEAP32[i1 + 36 >> 2] | 0) / 2 | 0;
 i5 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i2 + 7 | 0) / 8 | 0;
 i7 = i2 & 255;
 if (!(i7 & 7)) {
  i1 = i4;
  while (1) {
   i4 = i9;
   i2 = i1;
   while (1) {
    i1 = HEAPU8[i3 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 1 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 2 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 2 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 3 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 6 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 4 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 8 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 5 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 10 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 6 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 12 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i1 = HEAPU8[i3 + 7 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP16[i2 + 14 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
    i3 = i3 + 8 | 0;
    i2 = i2 + 16 | 0;
    if ((i4 | 0) <= 1) break; else i4 = i4 + -1 | 0;
   }
   if (!i5) break; else {
    i3 = i3 + i12 | 0;
    i1 = i2 + (i8 << 1) | 0;
    i5 = i5 + -1 | 0;
   }
  }
  return;
 }
 L35 : while (1) {
  switch (i7 & 7) {
  case 1:
   {
    i6 = i9;
    i1 = 44;
    break;
   }
  case 7:
   {
    i2 = i9;
    i1 = 26;
    break;
   }
  case 6:
   {
    i2 = i9;
    i1 = 29;
    break;
   }
  case 5:
   {
    i2 = i9;
    i1 = 32;
    break;
   }
  case 4:
   {
    i2 = i9;
    i1 = 35;
    break;
   }
  case 3:
   {
    i2 = i9;
    i1 = 38;
    break;
   }
  case 2:
   {
    i2 = i9;
    i1 = 41;
    break;
   }
  default:
   {
    i1 = 47;
    break L35;
   }
  }
  while (1) if ((i1 | 0) == 26) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i4 = i4 + 2 | 0;
   i3 = i3 + 1 | 0;
   i1 = 29;
   continue;
  } else if ((i1 | 0) == 29) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i4 = i4 + 2 | 0;
   i3 = i3 + 1 | 0;
   i1 = 32;
   continue;
  } else if ((i1 | 0) == 32) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i4 = i4 + 2 | 0;
   i3 = i3 + 1 | 0;
   i1 = 35;
   continue;
  } else if ((i1 | 0) == 35) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i4 = i4 + 2 | 0;
   i3 = i3 + 1 | 0;
   i1 = 38;
   continue;
  } else if ((i1 | 0) == 38) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i4 = i4 + 2 | 0;
   i3 = i3 + 1 | 0;
   i1 = 41;
   continue;
  } else if ((i1 | 0) == 41) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i6 = i2;
   i3 = i3 + 1 | 0;
   i4 = i4 + 2 | 0;
   i1 = 44;
   continue;
  } else if ((i1 | 0) == 44) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i4 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i1 = i3 + 1 | 0;
   i2 = i4 + 2 | 0;
   if ((i6 | 0) <= 1) break;
   i1 = HEAPU8[i1 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP16[i2 >> 1] = HEAP16[i10 + (i1 << 1) >> 1] | 0;
   i2 = i6 + -1 | 0;
   i4 = i4 + 4 | 0;
   i3 = i3 + 2 | 0;
   i1 = 26;
   continue;
  }
  if (!i5) {
   i1 = 49;
   break;
  } else {
   i3 = i1 + i12 | 0;
   i4 = i2 + (i8 << 1) | 0;
   i5 = i5 + -1 | 0;
  }
 }
 if ((i1 | 0) != 47) if ((i1 | 0) == 49) return;
}

function _GLES2_RenderReadPixels(i3, i7, i17, i18, i19) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0;
 i2 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i20;
 i4 = i20 + 28 | 0;
 i5 = i20 + 24 | 0;
 i8 = i3 + 320 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = i3 + 308 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if (!i1) i16 = 376840196; else i16 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i9;
  i2 = 6;
 } else {
  HEAP32[i9 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i3 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i9 >> 2];
   _GLES2_UpdateViewport(i3) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   i2 = 6;
  }
 }
 if ((i2 | 0) == 6) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i15 = i7 + 8 | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 i6 = (i16 | 0) == 0 | (i16 & -268435456 | 0) == 268435456;
 L13 : do if (i6) i2 = i16 & 255; else {
  if ((i16 | 0) < 1498831189) switch (i16 | 0) {
  case 844715353:
   {
    i2 = 2;
    break L13;
   }
  default:
   {}
  } else switch (i16 | 0) {
  case 1498831189:
   {
    i2 = 2;
    break L13;
   }
  default:
   {}
  }
  i2 = (i16 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 i12 = Math_imul(i2, i1) | 0;
 i13 = i7 + 12 | 0;
 i14 = _SDL_malloc(Math_imul(HEAP32[i13 >> 2] | 0, i12) | 0) | 0;
 if (!i14) {
  i19 = _SDL_Error(0) | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 _SDL_GetRendererOutputSize(i3, i4, i5) | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  i2 = HEAP32[i13 >> 2] | 0;
  i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i7 + 4 >> 2] | 0) - i2 | 0;
 } else {
  i1 = HEAP32[i7 + 4 >> 2] | 0;
  i2 = HEAP32[i13 >> 2] | 0;
 }
 FUNCTION_TABLE_viiiiiii[HEAP32[i9 + 140 >> 2] & 7](HEAP32[i7 >> 2] | 0, i1, HEAP32[i15 >> 2] | 0, i2, 6408, 5121, i14);
 i1 = HEAP32[i8 >> 2] | 0;
 if (HEAP32[i1 + 4 >> 2] | 0) {
  i3 = i1 + 108 | 0;
  i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
  if (i2 | 0) {
   while (1) {
    switch (i2 | 0) {
    case 1280:
     {
      i1 = 40029;
      break;
     }
    case 1281:
     {
      i1 = 40012;
      break;
     }
    case 1282:
     {
      i1 = 39991;
      break;
     }
    case 1285:
     {
      i1 = 39974;
      break;
     }
    default:
     i1 = 39966;
    }
    HEAP32[i11 >> 2] = 40335;
    HEAP32[i11 + 4 >> 2] = 40071;
    HEAP32[i11 + 8 >> 2] = 1847;
    HEAP32[i11 + 12 >> 2] = 40350;
    HEAP32[i11 + 16 >> 2] = i1;
    HEAP32[i11 + 20 >> 2] = i2;
    _SDL_SetError(40045, i11) | 0;
    i2 = FUNCTION_TABLE_i[HEAP32[i3 >> 2] & 7]() | 0;
    if (!i2) {
     i1 = -1;
     break;
    }
   }
   STACKTOP = i20;
   return i1 | 0;
  }
 }
 if (!(HEAP32[i10 >> 2] | 0)) {
  i2 = HEAP32[i15 >> 2] | 0;
  L43 : do if (i6) i1 = i16 & 255; else {
   if ((i16 | 0) < 1498831189) switch (i16 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L43;
    }
   default:
    {}
   } else switch (i16 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L43;
    }
   default:
    {}
   }
   i1 = (i16 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  i5 = Math_imul(i1, i2) | 0;
  i2 = HEAP32[i13 >> 2] | 0;
  i1 = i5;
  i6 = STACKTOP;
  STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
  if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
  if ((i2 + 1 | 0) >>> 0 >= 3) {
   i4 = 0 - i12 | 0;
   i3 = (i2 | 0) / 2 | 0;
   i1 = i14 + (Math_imul(i2 + -1 | 0, i12) | 0) | 0;
   i2 = i14;
   while (1) {
    i3 = i3 + -1 | 0;
    _SDL_memcpy(i6, i2, i5) | 0;
    _SDL_memcpy(i2, i1, i5) | 0;
    _SDL_memcpy(i1, i6, i5) | 0;
    if (!i3) break; else {
     i1 = i1 + i4 | 0;
     i2 = i2 + i12 | 0;
    }
   }
  }
 }
 i19 = _SDL_ConvertPixels(HEAP32[i15 >> 2] | 0, HEAP32[i13 >> 2] | 0, i16, i14, i12, i17, i18, i19) | 0;
 _SDL_free(i14);
 STACKTOP = i20;
 return i19 | 0;
}

function _Blit1to3Key(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i10 = HEAP32[i2 + 16 >> 2] | 0;
 i11 = HEAP32[i2 + 36 >> 2] | 0;
 i7 = HEAP32[i2 + 48 >> 2] | 0;
 i8 = HEAP32[i2 + 56 >> 2] | 0;
 if (!i3) return;
 i9 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 255;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i6 & 7) {
  case 0:
   {
    i5 = i9;
    i1 = 4;
    break;
   }
  case 7:
   {
    i5 = i9;
    i1 = 7;
    break;
   }
  case 6:
   {
    i5 = i9;
    i1 = 10;
    break;
   }
  case 5:
   {
    i5 = i9;
    i1 = 13;
    break;
   }
  case 4:
   {
    i5 = i9;
    i1 = 16;
    break;
   }
  case 3:
   {
    i5 = i9;
    i1 = 19;
    break;
   }
  case 2:
   {
    i5 = i9;
    i1 = 22;
    break;
   }
  case 1:
   {
    i5 = i9;
    i1 = 25;
    break;
   }
  default:
   {
    i1 = 28;
    break L4;
   }
  }
  while (1) if ((i1 | 0) == 4) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i12 = i1 << 2;
    i1 = i12 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i1 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 7;
   continue;
  } else if ((i1 | 0) == 7) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 10;
   continue;
  } else if ((i1 | 0) == 10) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 13;
   continue;
  } else if ((i1 | 0) == 13) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 16;
   continue;
  } else if ((i1 | 0) == 16) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 19;
   continue;
  } else if ((i1 | 0) == 19) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 22;
   continue;
  } else if ((i1 | 0) == 22) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i4 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   i1 = 25;
   continue;
  } else if ((i1 | 0) == 25) {
   i1 = HEAPU8[i4 >> 0] | 0;
   if ((i8 | 0) != (i1 | 0)) {
    i1 = i1 << 2;
    i12 = i1 | 1;
    HEAP8[i2 >> 0] = HEAP8[i7 + i1 >> 0] | 0;
    HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
    HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   }
   i1 = i4 + 1 | 0;
   i2 = i2 + 3 | 0;
   if ((i5 | 0) > 1) {
    i5 = i5 + -1 | 0;
    i4 = i1;
    i1 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i1 = 30;
   break;
  } else {
   i4 = i1 + i10 | 0;
   i2 = i2 + i11 | 0;
  }
 }
 if ((i1 | 0) != 28) if ((i1 | 0) == 30) return;
}

function __ZN15SpriteComponent4playEPKc(i10, i7) {
 i10 = i10 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = i7;
 i9 = i10 + 72 | 0;
 i6 = i10 + 76 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (!i1) {
  i3 = i6;
  i4 = i6;
 } else {
  i4 = i10 + 76 | 0;
  i2 = i1;
  while (1) {
   i3 = HEAP32[i2 + 16 >> 2] | 0;
   if (i3 >>> 0 > i7 >>> 0) {
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i5 = 6;
     break;
    } else {
     i4 = i2;
     i2 = i3;
    }
   } else {
    if (i3 >>> 0 >= i7 >>> 0) {
     i5 = 10;
     break;
    }
    i4 = i2 + 4 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i5 = 9;
     break;
    } else i2 = i3;
   }
  }
  if ((i5 | 0) == 6) {
   i3 = i2;
   i4 = i2;
   break;
  } else if ((i5 | 0) == 9) {
   i3 = i2;
   break;
  } else if ((i5 | 0) == 10) {
   i3 = i2;
   break;
  }
 } while (0);
 i2 = HEAP32[i4 >> 2] | 0;
 if (!i2) {
  i2 = __Znwj(32) | 0;
  HEAP32[i2 + 16 >> 2] = i8;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = i3;
  HEAP32[i4 >> 2] = i2;
  i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  if (!i1) i1 = i2; else {
   HEAP32[i9 >> 2] = i1;
   i1 = HEAP32[i4 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i10 + 76 >> 2] | 0, i1);
  i1 = i10 + 80 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 HEAP32[i10 + 60 >> 2] = HEAP32[i2 + 24 >> 2];
 do if (!i1) {
  i3 = i6;
  i4 = i6;
 } else {
  i4 = i10 + 76 | 0;
  i2 = i1;
  while (1) {
   i3 = HEAP32[i2 + 16 >> 2] | 0;
   if (i3 >>> 0 > i7 >>> 0) {
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i5 = 21;
     break;
    } else {
     i4 = i2;
     i2 = i3;
    }
   } else {
    if (i3 >>> 0 >= i7 >>> 0) {
     i5 = 25;
     break;
    }
    i4 = i2 + 4 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i5 = 24;
     break;
    } else i2 = i3;
   }
  }
  if ((i5 | 0) == 21) {
   i3 = i2;
   i4 = i2;
   break;
  } else if ((i5 | 0) == 24) {
   i3 = i2;
   break;
  } else if ((i5 | 0) == 25) {
   i3 = i2;
   break;
  }
 } while (0);
 i2 = HEAP32[i4 >> 2] | 0;
 if (!i2) {
  i2 = __Znwj(32) | 0;
  HEAP32[i2 + 16 >> 2] = i8;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = i3;
  HEAP32[i4 >> 2] = i2;
  i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  if (!i1) i1 = i2; else {
   HEAP32[i9 >> 2] = i1;
   i1 = HEAP32[i4 >> 2] | 0;
  }
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i10 + 76 >> 2] | 0, i1);
  i1 = i10 + 80 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 HEAP32[i10 + 64 >> 2] = HEAP32[i2 + 28 >> 2];
 do if (!i1) {
  i4 = i6;
  i3 = i6;
 } else {
  i3 = i10 + 76 | 0;
  while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   if (i2 >>> 0 > i7 >>> 0) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i5 = 36;
     break;
    } else {
     i3 = i1;
     i1 = i2;
    }
   } else {
    if (i2 >>> 0 >= i7 >>> 0) {
     i5 = 40;
     break;
    }
    i3 = i1 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i5 = 39;
     break;
    } else i1 = i2;
   }
  }
  if ((i5 | 0) == 36) {
   i4 = i1;
   i3 = i1;
   break;
  } else if ((i5 | 0) == 39) {
   i4 = i1;
   break;
  } else if ((i5 | 0) == 40) {
   i4 = i1;
   break;
  }
 } while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 | 0) {
  i9 = i1;
  i9 = i9 + 20 | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  i10 = i10 + 68 | 0;
  HEAP32[i10 >> 2] = i9;
  return;
 }
 i2 = __Znwj(32) | 0;
 HEAP32[i2 + 16 >> 2] = i8;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = i4;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
 if (!i1) i1 = i2; else {
  HEAP32[i9 >> 2] = i1;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i10 + 76 >> 2] | 0, i1);
 i9 = i10 + 80 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 i9 = i2;
 i9 = i9 + 20 | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 i10 = i10 + 68 | 0;
 HEAP32[i10 >> 2] = i9;
 return;
}

function _Blit1to4Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i12 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 48 >> 2] | 0;
 i11 = HEAP32[i1 + 56 >> 2] | 0;
 i8 = (HEAP32[i1 + 36 >> 2] | 0) / 4 | 0;
 i5 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i2 + 7 | 0) / 8 | 0;
 i7 = i2 & 255;
 if (!(i7 & 7)) {
  i1 = i4;
  while (1) {
   i4 = i9;
   i2 = i1;
   while (1) {
    i1 = HEAPU8[i3 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 1 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 2 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 8 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 3 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 12 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 4 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 16 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 5 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 20 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 6 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 24 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i1 = HEAPU8[i3 + 7 >> 0] | 0;
    if ((i11 | 0) != (i1 | 0)) HEAP32[i2 + 28 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
    i3 = i3 + 8 | 0;
    i2 = i2 + 32 | 0;
    if ((i4 | 0) <= 1) break; else i4 = i4 + -1 | 0;
   }
   if (!i5) break; else {
    i3 = i3 + i12 | 0;
    i1 = i2 + (i8 << 2) | 0;
    i5 = i5 + -1 | 0;
   }
  }
  return;
 }
 L35 : while (1) {
  switch (i7 & 7) {
  case 1:
   {
    i6 = i9;
    i1 = 44;
    break;
   }
  case 7:
   {
    i2 = i9;
    i1 = 26;
    break;
   }
  case 6:
   {
    i2 = i9;
    i1 = 29;
    break;
   }
  case 5:
   {
    i2 = i9;
    i1 = 32;
    break;
   }
  case 4:
   {
    i2 = i9;
    i1 = 35;
    break;
   }
  case 3:
   {
    i2 = i9;
    i1 = 38;
    break;
   }
  case 2:
   {
    i2 = i9;
    i1 = 41;
    break;
   }
  default:
   {
    i1 = 47;
    break L35;
   }
  }
  while (1) if ((i1 | 0) == 26) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = 29;
   continue;
  } else if ((i1 | 0) == 29) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = 32;
   continue;
  } else if ((i1 | 0) == 32) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = 35;
   continue;
  } else if ((i1 | 0) == 35) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = 38;
   continue;
  } else if ((i1 | 0) == 38) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = 41;
   continue;
  } else if ((i1 | 0) == 41) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i6 = i2;
   i3 = i3 + 1 | 0;
   i4 = i4 + 4 | 0;
   i1 = 44;
   continue;
  } else if ((i1 | 0) == 44) {
   i1 = HEAPU8[i3 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i1 = i3 + 1 | 0;
   i2 = i4 + 4 | 0;
   if ((i6 | 0) <= 1) break;
   i1 = HEAPU8[i1 >> 0] | 0;
   if ((i11 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = HEAP32[i10 + (i1 << 2) >> 2];
   i2 = i6 + -1 | 0;
   i4 = i4 + 8 | 0;
   i3 = i3 + 2 | 0;
   i1 = 26;
   continue;
  }
  if (!i5) {
   i1 = 49;
   break;
  } else {
   i3 = i1 + i12 | 0;
   i4 = i2 + (i8 << 2) | 0;
   i5 = i5 + -1 | 0;
  }
 }
 if ((i1 | 0) != 47) if ((i1 | 0) == 49) return;
}

function _SDL_Blit_RGB888_RGB888_Modulate_Blend(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i16 + 52 >> 2] | 0;
 i24 = HEAPU8[i16 + 60 >> 0] | 0;
 i25 = HEAPU8[i16 + 61 >> 0] | 0;
 i17 = HEAPU8[i16 + 62 >> 0] | 0;
 i1 = HEAP8[i16 + 63 >> 0] | 0;
 i18 = i16 + 28 | 0;
 i23 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i23 + -1;
 if (!i23) return;
 i19 = i16 + 20 | 0;
 i20 = i16 + 24 | 0;
 i21 = i16 + 12 | 0;
 i22 = i16 + 32 | 0;
 i23 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i13 = i2 & 112;
 i12 = i14 ^ 255;
 i2 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i10 = i2;
 i11 = i1;
 while (1) {
  i9 = HEAP32[i20 >> 2] | 0;
  i3 = i9 + -1 | 0;
  L6 : do if (i9 | 0) if (i23) {
   i9 = i3;
   while (1) {
    i5 = HEAP32[i2 >> 2] | 0;
    i7 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } else {
   i9 = i3;
   while (1) {
    i5 = HEAP32[i2 >> 2] | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i7 = ((Math_imul(i5 >>> 16 & 255, i24) | 0) >>> 0) / 255 | 0;
    i6 = ((Math_imul(i5 >>> 8 & 255, i25) | 0) >>> 0) / 255 | 0;
    i5 = ((Math_imul(i5 & 255, i17) | 0) >>> 0) / 255 | 0;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } while (0);
  i2 = i10 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i11 + (HEAP32[i22 >> 2] | 0) | 0;
  i11 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i11 + -1;
  if (!i11) break; else {
   i10 = i2;
   i11 = i1;
  }
 }
 HEAP32[i16 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate_Blend(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i16 + 52 >> 2] | 0;
 i24 = HEAPU8[i16 + 60 >> 0] | 0;
 i25 = HEAPU8[i16 + 61 >> 0] | 0;
 i17 = HEAPU8[i16 + 62 >> 0] | 0;
 i1 = HEAP8[i16 + 63 >> 0] | 0;
 i18 = i16 + 28 | 0;
 i23 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i23 + -1;
 if (!i23) return;
 i19 = i16 + 20 | 0;
 i20 = i16 + 24 | 0;
 i21 = i16 + 12 | 0;
 i22 = i16 + 32 | 0;
 i23 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i13 = i2 & 112;
 i12 = i14 ^ 255;
 i2 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i10 = i2;
 i11 = i1;
 while (1) {
  i9 = HEAP32[i20 >> 2] | 0;
  i3 = i9 + -1 | 0;
  L6 : do if (i9 | 0) if (i23) {
   i9 = i3;
   while (1) {
    i5 = HEAP32[i2 >> 2] | 0;
    i7 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    i3 = HEAP32[i1 >> 2] | 0;
    i8 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } else {
   i9 = i3;
   while (1) {
    i5 = HEAP32[i2 >> 2] | 0;
    i3 = HEAP32[i1 >> 2] | 0;
    i8 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    i7 = ((Math_imul(i5 >>> 16 & 255, i24) | 0) >>> 0) / 255 | 0;
    i6 = ((Math_imul(i5 >>> 8 & 255, i25) | 0) >>> 0) / 255 | 0;
    i5 = ((Math_imul(i5 & 255, i17) | 0) >>> 0) / 255 | 0;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } while (0);
  i2 = i10 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i11 + (HEAP32[i22 >> 2] | 0) | 0;
  i11 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i11 + -1;
  if (!i11) break; else {
   i10 = i2;
   i11 = i1;
  }
 }
 HEAP32[i16 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Modulate_Blend(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i16 + 52 >> 2] | 0;
 i24 = HEAPU8[i16 + 60 >> 0] | 0;
 i25 = HEAPU8[i16 + 61 >> 0] | 0;
 i17 = HEAPU8[i16 + 62 >> 0] | 0;
 i1 = HEAP8[i16 + 63 >> 0] | 0;
 i18 = i16 + 28 | 0;
 i23 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i23 + -1;
 if (!i23) return;
 i19 = i16 + 20 | 0;
 i20 = i16 + 24 | 0;
 i21 = i16 + 12 | 0;
 i22 = i16 + 32 | 0;
 i23 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i13 = i2 & 112;
 i12 = i14 ^ 255;
 i2 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i10 = i2;
 i11 = i1;
 while (1) {
  i9 = HEAP32[i20 >> 2] | 0;
  i3 = i9 + -1 | 0;
  L6 : do if (i9 | 0) if (i23) {
   i9 = i3;
   while (1) {
    i7 = HEAP32[i2 >> 2] | 0;
    i5 = i7 >>> 16 & 255;
    i6 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } else {
   i9 = i3;
   while (1) {
    i5 = HEAP32[i2 >> 2] | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i7 = ((Math_imul(i5 & 255, i24) | 0) >>> 0) / 255 | 0;
    i6 = ((Math_imul(i5 >>> 8 & 255, i25) | 0) >>> 0) / 255 | 0;
    i5 = ((Math_imul(i5 >>> 16 & 255, i17) | 0) >>> 0) / 255 | 0;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } while (0);
  i2 = i10 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i11 + (HEAP32[i22 >> 2] | 0) | 0;
  i11 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i11 + -1;
  if (!i11) break; else {
   i10 = i2;
   i11 = i1;
  }
 }
 HEAP32[i16 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate_Blend(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i2 = HEAP32[i16 + 52 >> 2] | 0;
 i24 = HEAPU8[i16 + 60 >> 0] | 0;
 i25 = HEAPU8[i16 + 61 >> 0] | 0;
 i17 = HEAPU8[i16 + 62 >> 0] | 0;
 i1 = HEAP8[i16 + 63 >> 0] | 0;
 i18 = i16 + 28 | 0;
 i23 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i23 + -1;
 if (!i23) return;
 i19 = i16 + 20 | 0;
 i20 = i16 + 24 | 0;
 i21 = i16 + 12 | 0;
 i22 = i16 + 32 | 0;
 i23 = (i2 & 1 | 0) == 0;
 i14 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i15 = (i2 & 48 | 0) != 0 & (i14 | 0) != 255;
 i13 = i2 & 112;
 i12 = i14 ^ 255;
 i2 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i10 = i2;
 i11 = i1;
 while (1) {
  i9 = HEAP32[i20 >> 2] | 0;
  i3 = i9 + -1 | 0;
  L6 : do if (i9 | 0) if (i23) {
   i9 = i3;
   while (1) {
    i7 = HEAP32[i2 >> 2] | 0;
    i5 = i7 >>> 16 & 255;
    i6 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    i3 = HEAP32[i1 >> 2] | 0;
    i8 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } else {
   i9 = i3;
   while (1) {
    i5 = HEAP32[i2 >> 2] | 0;
    i3 = HEAP32[i1 >> 2] | 0;
    i8 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    i7 = ((Math_imul(i5 & 255, i24) | 0) >>> 0) / 255 | 0;
    i6 = ((Math_imul(i5 >>> 8 & 255, i25) | 0) >>> 0) / 255 | 0;
    i5 = ((Math_imul(i5 >>> 16 & 255, i17) | 0) >>> 0) / 255 | 0;
    if (i15) {
     i5 = ((Math_imul(i5, i14) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i14) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i14) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i5 = i5 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i6 + (((Math_imul(i4, i12) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i7 + (((Math_imul(i3, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i7 + i3 | 0;
      i4 = i6 + i4 | 0;
      i5 = i5 + i8 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i6, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i7, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i5 = i8;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i9) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i9 = i9 + -1 | 0;
    }
   }
  } while (0);
  i2 = i10 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i11 + (HEAP32[i22 >> 2] | 0) | 0;
  i11 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i11 + -1;
  if (!i11) break; else {
   i10 = i2;
   i11 = i1;
  }
 }
 HEAP32[i16 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _try_realloc_chunk(i12, i9) {
 i12 = i12 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i12 + 4 | 0;
 i11 = HEAP32[i10 >> 2] | 0;
 i1 = i11 & -8;
 i6 = i12 + i1 | 0;
 if (!(i11 & 3)) {
  if (i9 >>> 0 < 256) {
   i12 = 0;
   return i12 | 0;
  }
  if (i1 >>> 0 >= (i9 + 4 | 0) >>> 0) if ((i1 - i9 | 0) >>> 0 <= HEAP32[20608] << 1 >>> 0) return i12 | 0;
  i12 = 0;
  return i12 | 0;
 }
 if (i1 >>> 0 >= i9 >>> 0) {
  i1 = i1 - i9 | 0;
  if (i1 >>> 0 <= 15) return i12 | 0;
  i8 = i12 + i9 | 0;
  HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
  HEAP32[i8 + 4 >> 2] = i1 | 3;
  i11 = i6 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i8, i1);
  return i12 | 0;
 }
 if ((HEAP32[20494] | 0) == (i6 | 0)) {
  i8 = (HEAP32[20491] | 0) + i1 | 0;
  i1 = i8 - i9 | 0;
  i2 = i12 + i9 | 0;
  if (i8 >>> 0 <= i9 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
  HEAP32[i2 + 4 >> 2] = i1 | 1;
  HEAP32[20494] = i2;
  HEAP32[20491] = i1;
  return i12 | 0;
 }
 if ((HEAP32[20493] | 0) == (i6 | 0)) {
  i2 = (HEAP32[20490] | 0) + i1 | 0;
  if (i2 >>> 0 < i9 >>> 0) {
   i12 = 0;
   return i12 | 0;
  }
  i1 = i2 - i9 | 0;
  if (i1 >>> 0 > 15) {
   i8 = i12 + i9 | 0;
   i2 = i12 + i2 | 0;
   HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
   HEAP32[i8 + 4 >> 2] = i1 | 1;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i8;
  } else {
   HEAP32[i10 >> 2] = i11 & 1 | i2 | 2;
   i2 = i12 + i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[20490] = i1;
  HEAP32[20493] = i2;
  return i12 | 0;
 }
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if (i2 & 2 | 0) {
  i12 = 0;
  return i12 | 0;
 }
 i7 = (i2 & -8) + i1 | 0;
 if (i7 >>> 0 < i9 >>> 0) {
  i12 = 0;
  return i12 | 0;
 }
 i8 = i7 - i9 | 0;
 i3 = i2 >>> 3;
 do if (i2 >>> 0 < 256) {
  i2 = HEAP32[i6 + 8 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP32[20488] = HEAP32[20488] & ~(1 << i3);
   break;
  } else {
   HEAP32[i2 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i2;
   break;
  }
 } else {
  i5 = HEAP32[i6 + 24 >> 2] | 0;
  i1 = HEAP32[i6 + 12 >> 2] | 0;
  do if ((i1 | 0) == (i6 | 0)) {
   i3 = i6 + 16 | 0;
   i2 = i3 + 4 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i1 = HEAP32[i3 >> 2] | 0;
    if (!i1) {
     i3 = 0;
     break;
    } else i4 = i3;
   } else i4 = i2;
   while (1) {
    i3 = i1 + 20 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 | 0) {
     i1 = i2;
     i4 = i3;
     continue;
    }
    i2 = i1 + 16 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) break; else {
     i1 = i3;
     i4 = i2;
    }
   }
   HEAP32[i4 >> 2] = 0;
   i3 = i1;
  } else {
   i3 = HEAP32[i6 + 8 >> 2] | 0;
   HEAP32[i3 + 12 >> 2] = i1;
   HEAP32[i1 + 8 >> 2] = i3;
   i3 = i1;
  } while (0);
  if (i5 | 0) {
   i1 = HEAP32[i6 + 28 >> 2] | 0;
   i2 = 82256 + (i1 << 2) | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) {
    HEAP32[i2 >> 2] = i3;
    if (!i3) {
     HEAP32[20489] = HEAP32[20489] & ~(1 << i1);
     break;
    }
   } else {
    HEAP32[i5 + 16 + (((HEAP32[i5 + 16 >> 2] | 0) != (i6 | 0) & 1) << 2) >> 2] = i3;
    if (!i3) break;
   }
   HEAP32[i3 + 24 >> 2] = i5;
   i1 = i6 + 16 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 | 0) {
    HEAP32[i3 + 16 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i3;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (i1 | 0) {
    HEAP32[i3 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i3;
   }
  }
 } while (0);
 if (i8 >>> 0 < 16) {
  HEAP32[i10 >> 2] = i7 | i11 & 1 | 2;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  return i12 | 0;
 } else {
  i6 = i12 + i9 | 0;
  HEAP32[i10 >> 2] = i11 & 1 | i9 | 2;
  HEAP32[i6 + 4 >> 2] = i8 | 3;
  i11 = i12 + i7 + 4 | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | 1;
  _dispose_chunk(i6, i8);
  return i12 | 0;
 }
 return 0;
}

function _Blit2to2Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = ~HEAP32[(HEAP32[i1 + 40 >> 2] | 0) + 24 >> 2];
 i11 = (HEAP32[i1 + 16 >> 2] | 0) / 2 | 0;
 i12 = (HEAP32[i1 + 36 >> 2] | 0) / 2 | 0;
 i8 = HEAP32[i1 + 56 >> 2] & i10;
 i5 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i2 + 7 | 0) / 8 | 0;
 i7 = i2 & 255;
 if (!(i7 & 7)) {
  i1 = i4;
  while (1) {
   i4 = i9;
   i2 = i1;
   while (1) {
    i1 = HEAP16[i3 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
    i1 = HEAP16[i3 + 2 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 2 >> 1] = i1;
    i1 = HEAP16[i3 + 4 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 4 >> 1] = i1;
    i1 = HEAP16[i3 + 6 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 6 >> 1] = i1;
    i1 = HEAP16[i3 + 8 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 8 >> 1] = i1;
    i1 = HEAP16[i3 + 10 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 10 >> 1] = i1;
    i1 = HEAP16[i3 + 12 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 12 >> 1] = i1;
    i1 = HEAP16[i3 + 14 >> 1] | 0;
    if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 + 14 >> 1] = i1;
    i2 = i2 + 16 | 0;
    i3 = i3 + 16 | 0;
    if ((i4 | 0) <= 1) break; else i4 = i4 + -1 | 0;
   }
   if (!i5) break; else {
    i3 = i3 + (i11 << 1) | 0;
    i1 = i2 + (i12 << 1) | 0;
    i5 = i5 + -1 | 0;
   }
  }
  return;
 } else i2 = i4;
 L35 : while (1) {
  switch (i7 & 7) {
  case 1:
   {
    i6 = i9;
    i1 = 44;
    break;
   }
  case 7:
   {
    i4 = i9;
    i1 = 26;
    break;
   }
  case 6:
   {
    i4 = i9;
    i1 = 29;
    break;
   }
  case 5:
   {
    i4 = i9;
    i1 = 32;
    break;
   }
  case 4:
   {
    i4 = i9;
    i1 = 35;
    break;
   }
  case 3:
   {
    i4 = i9;
    i1 = 38;
    break;
   }
  case 2:
   {
    i4 = i9;
    i1 = 41;
    break;
   }
  default:
   {
    i1 = 47;
    break L35;
   }
  }
  while (1) if ((i1 | 0) == 26) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i3 = i3 + 2 | 0;
   i2 = i2 + 2 | 0;
   i1 = 29;
   continue;
  } else if ((i1 | 0) == 29) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i3 = i3 + 2 | 0;
   i2 = i2 + 2 | 0;
   i1 = 32;
   continue;
  } else if ((i1 | 0) == 32) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i3 = i3 + 2 | 0;
   i2 = i2 + 2 | 0;
   i1 = 35;
   continue;
  } else if ((i1 | 0) == 35) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i3 = i3 + 2 | 0;
   i2 = i2 + 2 | 0;
   i1 = 38;
   continue;
  } else if ((i1 | 0) == 38) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i2 = i2 + 2 | 0;
   i3 = i3 + 2 | 0;
   i1 = 41;
   continue;
  } else if ((i1 | 0) == 41) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i6 = i4;
   i2 = i2 + 2 | 0;
   i3 = i3 + 2 | 0;
   i1 = 44;
   continue;
  } else if ((i1 | 0) == 44) {
   i1 = HEAP16[i3 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i2 >> 1] = i1;
   i4 = i2 + 2 | 0;
   i1 = i3 + 2 | 0;
   if ((i6 | 0) <= 1) break;
   i1 = HEAP16[i1 >> 1] | 0;
   if ((i1 & 65535 & i10 | 0) != (i8 | 0)) HEAP16[i4 >> 1] = i1;
   i4 = i6 + -1 | 0;
   i3 = i3 + 4 | 0;
   i2 = i2 + 4 | 0;
   i1 = 26;
   continue;
  }
  if (!i5) {
   i1 = 49;
   break;
  } else {
   i3 = i1 + (i11 << 1) | 0;
   i2 = i4 + (i12 << 1) | 0;
   i5 = i5 + -1 | 0;
  }
 }
 if ((i1 | 0) != 47) if ((i1 | 0) == 49) return;
}

function _SDL_SW_CreateYUVTexture(i9, i10, i11) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0, d13 = 0.0;
 i5 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i12;
 L1 : do if ((i9 | 0) < 1431918169) if ((i9 | 0) < 844715353) switch (i9 | 0) {
 case 842094169:
  break L1;
 default:
  {
   i5 = 2;
   break L1;
  }
 } else switch (i9 | 0) {
 case 844715353:
  break L1;
 default:
  {
   i5 = 2;
   break L1;
  }
 } else {
  if ((i9 | 0) < 1448433993) switch (i9 | 0) {
  case 1431918169:
   break L1;
  default:
   {
    i5 = 2;
    break L1;
   }
  }
  if ((i9 | 0) < 1498831189) switch (i9 | 0) {
  case 1448433993:
   break L1;
  default:
   {
    i5 = 2;
    break L1;
   }
  } else switch (i9 | 0) {
  case 1498831189:
   break L1;
  default:
   {
    i5 = 2;
    break L1;
   }
  }
 } while (0);
 if ((i5 | 0) == 2) {
  _SDL_SetError(59950, i1) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i1 = _SDL_calloc(1, 64) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 HEAP32[i1 >> 2] = i9;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = i10;
 HEAP32[i1 + 12 >> 2] = i11;
 i8 = i10 << 1;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = _SDL_malloc(Math_imul(i8, i11) | 0) | 0;
 i3 = i1 + 20 | 0;
 HEAP32[i3 >> 2] = _SDL_malloc(4096) | 0;
 i4 = _SDL_malloc(9216) | 0;
 i5 = i1 + 24 | 0;
 HEAP32[i5 >> 2] = i4;
 i2 = HEAP32[i2 >> 2] | 0;
 if (i2 | 0) {
  i7 = HEAP32[i3 >> 2] | 0;
  if (!((i4 | 0) == 0 | (i7 | 0) == 0)) {
   i4 = i7 + 1024 | 0;
   i5 = i7 + 2048 | 0;
   i6 = i7 + 3072 | 0;
   i3 = 0;
   do {
    d13 = +(i3 + -128 | 0);
    HEAP32[i7 + (i3 << 2) >> 2] = ~~(d13 * 1.4013377926421404);
    HEAP32[i4 + (i3 << 2) >> 2] = ~~(d13 * -.7136038186157518);
    HEAP32[i5 + (i3 << 2) >> 2] = ~~(d13 * -.34441087613293053);
    HEAP32[i6 + (i3 << 2) >> 2] = ~~(d13 * 1.7734138972809665);
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) != 256);
   L27 : do if ((i9 | 0) < 1431918169) if ((i9 | 0) < 844715353) {
    switch (i9 | 0) {
    case 842094169:
     {
      i5 = 11;
      break L27;
     }
    default:
     {}
    }
    STACKTOP = i12;
    return i1 | 0;
   } else {
    switch (i9 | 0) {
    case 844715353:
     {
      i5 = 12;
      break L27;
     }
    default:
     {}
    }
    STACKTOP = i12;
    return i1 | 0;
   } else {
    if ((i9 | 0) < 1448433993) {
     switch (i9 | 0) {
     case 1431918169:
      {
       i5 = 12;
       break L27;
      }
     default:
      {}
     }
     STACKTOP = i12;
     return i1 | 0;
    }
    if ((i9 | 0) < 1498831189) {
     switch (i9 | 0) {
     case 1448433993:
      {
       i5 = 11;
       break L27;
      }
     default:
      {}
     }
     STACKTOP = i12;
     return i1 | 0;
    } else {
     switch (i9 | 0) {
     case 1498831189:
      {
       i5 = 12;
       break L27;
      }
     default:
      {}
     }
     STACKTOP = i12;
     return i1 | 0;
    }
   } while (0);
   if ((i5 | 0) == 11) {
    i4 = i10 & 65535;
    HEAP16[i1 + 36 >> 1] = i4;
    i3 = i10 >>> 1 & 32767;
    HEAP16[i1 + 38 >> 1] = i3;
    HEAP16[i1 + 40 >> 1] = (i4 & 65535) >>> 1;
    i4 = i1 + 44 | 0;
    HEAP32[i4 >> 2] = i2;
    i2 = i2 + (Math_imul(i10 & 65535, i11) | 0) | 0;
    HEAP32[i1 + 48 >> 2] = i2;
    i2 = i2 + ((Math_imul(i3, i11) | 0) / 2 | 0) | 0;
    i3 = 2;
   } else if ((i5 | 0) == 12) {
    HEAP16[i1 + 36 >> 1] = i8;
    i4 = i1 + 44 | 0;
    i3 = 0;
   }
   HEAP32[i4 + (i3 << 2) >> 2] = i2;
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 _SDL_free(i2);
 _SDL_free(HEAP32[i3 >> 2] | 0);
 _SDL_free(HEAP32[i5 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 56 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 60 >> 2] | 0);
 _SDL_free(i1);
 _SDL_Error(0) | 0;
 i11 = 0;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i19, i3, i23, i24, i25) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(480);
 i10 = i27 + 468 | 0;
 i26 = i27 + 464 | 0;
 i15 = i27 + 472 | 0;
 i16 = i27 + 460 | 0;
 i17 = i27 + 456 | 0;
 i20 = i27 + 444 | 0;
 i21 = i27 + 432 | 0;
 i22 = i27 + 420 | 0;
 i6 = i27 + 416 | 0;
 i8 = i27 + 16 | 0;
 i11 = i27 + 8 | 0;
 i12 = i27 + 4 | 0;
 i13 = i27;
 __ZNKSt3__28ios_base6getlocEv(i26, i23);
 i14 = __ZNKSt3__26locale9use_facetERNS0_2idE(i26, 83652) | 0;
 i2 = i25 + 8 + 3 | 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i1 = i9 << 24 >> 24 < 0;
 i4 = i25 + 4 | 0;
 if (!((i1 ? HEAP32[i4 >> 2] | 0 : i9 & 255) | 0)) i9 = 0; else {
  i9 = HEAP32[(i1 ? HEAP32[i25 >> 2] | 0 : i25) >> 2] | 0;
  i9 = (i9 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 44 >> 2] & 63](i14, 45) | 0);
 };
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i9, i26, i15, i16, i17, i20, i21, i22, i6);
 i5 = HEAP8[i2 >> 0] | 0;
 i7 = i5 << 24 >> 24 < 0;
 i5 = i7 ? HEAP32[i4 >> 2] | 0 : i5 & 255;
 i4 = HEAP32[i6 >> 2] | 0;
 if ((i5 | 0) > (i4 | 0)) {
  i2 = HEAP8[i22 + 8 + 3 >> 0] | 0;
  i3 = HEAP8[i21 + 8 + 3 >> 0] | 0;
  i1 = 1;
  i2 = (i2 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i2 & 255) + (i5 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i22 + 8 + 3 >> 0] | 0;
  i2 = HEAP8[i21 + 8 + 3 >> 0] | 0;
  i1 = 2;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i2 & 255;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i3 + i4 + i2 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1 << 2) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i28 = i1;
  }
 } else {
  i18 = i8;
  i28 = 0;
 }
 i25 = i7 ? HEAP32[i25 >> 2] | 0 : i25;
 __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i18, i11, i12, HEAP32[i23 + 4 >> 2] | 0, i25, i25 + (i5 << 2) | 0, i14, i9, i15, HEAP32[i16 >> 2] | 0, HEAP32[i17 >> 2] | 0, i20, i21, i22, i4);
 HEAP32[i13 >> 2] = HEAP32[i19 >> 2];
 i25 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i18, i25, i1, i23, i24) | 0;
 if (i28 | 0) _free(i28);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__26localeD2Ev(i26);
 STACKTOP = i27;
 return i1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i14, i15, i6, i13) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i14 + 8 >> 2] | 0, i13) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i14, i15, i6); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i14 >> 2] | 0, i13) | 0)) {
   i12 = HEAP32[i2 + 12 >> 2] | 0;
   i5 = i2 + 16 + (i12 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2 + 16 | 0, i14, i15, i6, i13);
   i1 = i2 + 24 | 0;
   if ((i12 | 0) <= 1) break;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   if (!(i2 & 2)) {
    i4 = i14 + 36 | 0;
    if ((HEAP32[i4 >> 2] | 0) != 1) {
     if (!(i2 & 1)) {
      i2 = i14 + 54 | 0;
      while (1) {
       if (HEAP8[i2 >> 0] | 0) break L1;
       if ((HEAP32[i4 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i14, i15, i6, i13);
       i1 = i1 + 8 | 0;
       if (i1 >>> 0 >= i5 >>> 0) break L1;
      }
     }
     i2 = i14 + 24 | 0;
     i3 = i14 + 54 | 0;
     while (1) {
      if (HEAP8[i3 >> 0] | 0) break L1;
      if ((HEAP32[i4 >> 2] | 0) == 1) if ((HEAP32[i2 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i14, i15, i6, i13);
      i1 = i1 + 8 | 0;
      if (i1 >>> 0 >= i5 >>> 0) break L1;
     }
    }
   }
   i2 = i14 + 54 | 0;
   while (1) {
    if (HEAP8[i2 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i14, i15, i6, i13);
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i5 >>> 0) break L1;
   }
  }
  if ((HEAP32[i14 + 16 >> 2] | 0) != (i15 | 0)) {
   i11 = i14 + 20 | 0;
   if ((HEAP32[i11 >> 2] | 0) != (i15 | 0)) {
    HEAP32[i14 + 32 >> 2] = i6;
    i12 = i14 + 44 | 0;
    if ((HEAP32[i12 >> 2] | 0) == 4) break;
    i5 = i2 + 16 + (HEAP32[i2 + 12 >> 2] << 3) | 0;
    i6 = i14 + 52 | 0;
    i7 = i14 + 53 | 0;
    i9 = i14 + 54 | 0;
    i8 = i2 + 8 | 0;
    i10 = i14 + 24 | 0;
    i1 = 0;
    i3 = i2 + 16 | 0;
    i4 = 0;
    L32 : while (1) {
     if (i3 >>> 0 >= i5 >>> 0) {
      i2 = 18;
      break;
     }
     HEAP8[i6 >> 0] = 0;
     HEAP8[i7 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i3, i14, i15, i15, 1, i13);
     if (HEAP8[i9 >> 0] | 0) {
      i2 = 18;
      break;
     }
     do if (!(HEAP8[i7 >> 0] | 0)) i2 = i4; else {
      if (!(HEAP8[i6 >> 0] | 0)) if (!(HEAP32[i8 >> 2] & 1)) {
       i1 = 1;
       i2 = 18;
       break L32;
      } else {
       i1 = 1;
       i2 = i4;
       break;
      }
      if ((HEAP32[i10 >> 2] | 0) == 1) {
       i2 = 23;
       break L32;
      }
      if (!(HEAP32[i8 >> 2] & 2)) {
       i2 = 23;
       break L32;
      } else {
       i1 = 1;
       i2 = 1;
      }
     } while (0);
     i3 = i3 + 8 | 0;
     i4 = i2;
    }
    do if ((i2 | 0) == 18) {
     if (!i4) {
      HEAP32[i11 >> 2] = i15;
      i15 = i14 + 40 | 0;
      HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
      if ((HEAP32[i14 + 36 >> 2] | 0) == 1) if ((HEAP32[i10 >> 2] | 0) == 2) {
       HEAP8[i9 >> 0] = 1;
       if (i1) {
        i2 = 23;
        break;
       } else {
        i1 = 4;
        break;
       }
      }
     }
     if (i1) i2 = 23; else i1 = 4;
    } while (0);
    if ((i2 | 0) == 23) i1 = 3;
    HEAP32[i12 >> 2] = i1;
    break;
   }
  }
  if ((i6 | 0) == 1) HEAP32[i14 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i19, i3, i23, i24, i25) {
 i1 = i1 | 0;
 i19 = i19 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i25 = i25 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i10 = i27 + 56 | 0;
 i26 = i27 + 52 | 0;
 i15 = i27 + 164 | 0;
 i16 = i27 + 161 | 0;
 i17 = i27 + 160 | 0;
 i20 = i27 + 40 | 0;
 i21 = i27 + 28 | 0;
 i22 = i27 + 16 | 0;
 i6 = i27 + 12 | 0;
 i8 = i27 + 60 | 0;
 i11 = i27 + 8 | 0;
 i12 = i27 + 4 | 0;
 i13 = i27;
 __ZNKSt3__28ios_base6getlocEv(i26, i23);
 i14 = __ZNKSt3__26locale9use_facetERNS0_2idE(i26, 83620) | 0;
 i2 = i25 + 11 | 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i1 = i9 << 24 >> 24 < 0;
 i4 = i25 + 4 | 0;
 if (!((i1 ? HEAP32[i4 >> 2] | 0 : i9 & 255) | 0)) i9 = 0; else {
  i9 = HEAP8[(i1 ? HEAP32[i25 >> 2] | 0 : i25) >> 0] | 0;
  i9 = i9 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 63](i14, 45) | 0) << 24 >> 24;
 };
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i20 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i21 >> 2] = 0;
 HEAP32[i21 + 4 >> 2] = 0;
 HEAP32[i21 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i21 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i22 >> 2] = 0;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i22 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i3, i9, i26, i15, i16, i17, i20, i21, i22, i6);
 i5 = HEAP8[i2 >> 0] | 0;
 i7 = i5 << 24 >> 24 < 0;
 i5 = i7 ? HEAP32[i4 >> 2] | 0 : i5 & 255;
 i4 = HEAP32[i6 >> 2] | 0;
 if ((i5 | 0) > (i4 | 0)) {
  i2 = HEAP8[i22 + 11 >> 0] | 0;
  i3 = HEAP8[i21 + 11 >> 0] | 0;
  i1 = 1;
  i2 = (i2 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i2 & 255) + (i5 - i4 << 1) | 0;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i3 & 255;
 } else {
  i3 = HEAP8[i22 + 11 >> 0] | 0;
  i2 = HEAP8[i21 + 11 >> 0] | 0;
  i1 = 2;
  i2 = i2 << 24 >> 24 < 0 ? HEAP32[i21 + 4 >> 2] | 0 : i2 & 255;
  i3 = i3 << 24 >> 24 < 0 ? HEAP32[i22 + 4 >> 2] | 0 : i3 & 255;
 }
 i1 = i3 + i4 + i2 + i1 | 0;
 if (i1 >>> 0 > 100) {
  i1 = _malloc(i1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i28 = i1;
  }
 } else {
  i18 = i8;
  i28 = 0;
 }
 i25 = i7 ? HEAP32[i25 >> 2] | 0 : i25;
 __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i18, i11, i12, HEAP32[i23 + 4 >> 2] | 0, i25, i25 + i5 | 0, i14, i9, i15, HEAP8[i16 >> 0] | 0, HEAP8[i17 >> 0] | 0, i20, i21, i22, i4);
 HEAP32[i13 >> 2] = HEAP32[i19 >> 2];
 i25 = HEAP32[i11 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i18, i25, i1, i23, i24) | 0;
 if (i28 | 0) _free(i28);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__26localeD2Ev(i26);
 STACKTOP = i27;
 return i1 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i18 = i15 + 28 | 0;
 i21 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i21 + -1;
 if (!i21) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i16 = i15 + 32 | 0;
 i17 = (i1 & 48 | 0) == 0;
 i14 = i1 & 112;
 i2 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i12 = i2;
 i13 = i1;
 while (1) {
  i11 = HEAP32[i20 >> 2] | 0;
  i3 = i11 + -1 | 0;
  L6 : do if (i11 | 0) {
   if (i17) {
    i11 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i10 = i6 >>> 24;
     i9 = i6 >>> 16 & 255;
     i8 = i6 >>> 8 & 255;
     i6 = i6 & 255;
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = i7 >>> 16 & 255;
     i4 = i7 >>> 8 & 255;
     i5 = i7 & 255;
     i7 = i7 >>> 24;
     switch (i14 & 127) {
     case 16:
      {
       i22 = i6 ^ 255;
       i7 = (((Math_imul(i22, i7) | 0) >>> 0) / 255 | 0) + i6 | 0;
       i5 = i8 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i9 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i10 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i10 + i3 | 0;
       i4 = i9 + i4 | 0;
       i5 = i8 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i9, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i10, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i7 << 24;
     if (!i11) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i11 = i11 + -1 | 0;
     }
    }
   } else i11 = i3;
   while (1) {
    i10 = HEAP32[i2 >> 2] | 0;
    i9 = i10 >>> 24;
    i7 = i10 >>> 16 & 255;
    i6 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    if ((i10 | 0) != 255) {
     i6 = ((Math_imul(i6, i10) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i10) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i10) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i22 = i10 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i5 = i6 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i7 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i9 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i9 + i3 | 0;
      i4 = i7 + i4 | 0;
      i5 = i6 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i7, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i8 << 24;
    if (!i11) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i11 = i11 + -1 | 0;
    }
   }
  } while (0);
  i2 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i16 >> 2] | 0) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i22 + -1;
  if (!i22) break; else {
   i12 = i2;
   i13 = i1;
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i18 = i15 + 28 | 0;
 i21 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i21 + -1;
 if (!i21) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i16 = i15 + 32 | 0;
 i17 = (i1 & 48 | 0) == 0;
 i14 = i1 & 112;
 i2 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i12 = i2;
 i13 = i1;
 while (1) {
  i11 = HEAP32[i20 >> 2] | 0;
  i3 = i11 + -1 | 0;
  L6 : do if (i11 | 0) {
   if (i17) {
    i11 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i8 = i6 >>> 24;
     i9 = i6 >>> 16 & 255;
     i10 = i6 >>> 8 & 255;
     i6 = i6 & 255;
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = i7 >>> 16 & 255;
     i4 = i7 >>> 8 & 255;
     i5 = i7 & 255;
     i7 = i7 >>> 24;
     switch (i14 & 127) {
     case 16:
      {
       i22 = i6 ^ 255;
       i7 = (((Math_imul(i22, i7) | 0) >>> 0) / 255 | 0) + i6 | 0;
       i5 = i8 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i9 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i10 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i10 + i3 | 0;
       i4 = i9 + i4 | 0;
       i5 = i8 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i9, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i10, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i7 << 24;
     if (!i11) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i11 = i11 + -1 | 0;
     }
    }
   } else i11 = i3;
   while (1) {
    i10 = HEAP32[i2 >> 2] | 0;
    i6 = i10 >>> 24;
    i7 = i10 >>> 16 & 255;
    i9 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    if ((i10 | 0) != 255) {
     i6 = ((Math_imul(i6, i10) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i10) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i10) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i22 = i10 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i5 = i6 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i7 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i9 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i9 + i3 | 0;
      i4 = i7 + i4 | 0;
      i5 = i6 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i7, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i8 << 24;
    if (!i11) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i11 = i11 + -1 | 0;
    }
   }
  } while (0);
  i2 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i16 >> 2] | 0) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i22 + -1;
  if (!i22) break; else {
   i12 = i2;
   i13 = i1;
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i18 = i15 + 28 | 0;
 i21 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i21 + -1;
 if (!i21) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i16 = i15 + 32 | 0;
 i17 = (i1 & 48 | 0) == 0;
 i14 = i1 & 112;
 i2 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i12 = i2;
 i13 = i1;
 while (1) {
  i11 = HEAP32[i20 >> 2] | 0;
  i3 = i11 + -1 | 0;
  L6 : do if (i11 | 0) {
   if (i17) {
    i11 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i10 = i6 >>> 16 & 255;
     i9 = i6 >>> 8 & 255;
     i8 = i6 & 255;
     i6 = i6 >>> 24;
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = i7 >>> 16 & 255;
     i4 = i7 >>> 8 & 255;
     i5 = i7 & 255;
     i7 = i7 >>> 24;
     switch (i14 & 127) {
     case 16:
      {
       i22 = i6 ^ 255;
       i7 = (((Math_imul(i22, i7) | 0) >>> 0) / 255 | 0) + i6 | 0;
       i5 = i8 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i9 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i10 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i10 + i3 | 0;
       i4 = i9 + i4 | 0;
       i5 = i8 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i9, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i10, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i7 << 24;
     if (!i11) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i11 = i11 + -1 | 0;
     }
    }
   } else i11 = i3;
   while (1) {
    i10 = HEAP32[i2 >> 2] | 0;
    i9 = i10 >>> 16 & 255;
    i7 = i10 >>> 8 & 255;
    i6 = i10 & 255;
    i10 = i10 >>> 24;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    if ((i10 | 0) != 255) {
     i6 = ((Math_imul(i6, i10) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i10) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i10) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i22 = i10 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i5 = i6 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i7 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i9 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i9 + i3 | 0;
      i4 = i7 + i4 | 0;
      i5 = i6 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i7, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i8 << 24;
    if (!i11) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i11 = i11 + -1 | 0;
    }
   }
  } while (0);
  i2 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i16 >> 2] | 0) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i22 + -1;
  if (!i22) break; else {
   i12 = i2;
   i13 = i1;
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i18 = i15 + 28 | 0;
 i21 = HEAP32[i18 >> 2] | 0;
 HEAP32[i18 >> 2] = i21 + -1;
 if (!i21) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i16 = i15 + 32 | 0;
 i17 = (i1 & 48 | 0) == 0;
 i14 = i1 & 112;
 i2 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i12 = i2;
 i13 = i1;
 while (1) {
  i11 = HEAP32[i20 >> 2] | 0;
  i3 = i11 + -1 | 0;
  L6 : do if (i11 | 0) {
   if (i17) {
    i11 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i8 = i6 >>> 16 & 255;
     i9 = i6 >>> 8 & 255;
     i10 = i6 & 255;
     i6 = i6 >>> 24;
     i7 = HEAP32[i1 >> 2] | 0;
     i3 = i7 >>> 16 & 255;
     i4 = i7 >>> 8 & 255;
     i5 = i7 & 255;
     i7 = i7 >>> 24;
     switch (i14 & 127) {
     case 16:
      {
       i22 = i6 ^ 255;
       i7 = (((Math_imul(i22, i7) | 0) >>> 0) / 255 | 0) + i6 | 0;
       i5 = i8 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i9 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i10 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i10 + i3 | 0;
       i4 = i9 + i4 | 0;
       i5 = i8 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i9, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i10, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i7 << 24;
     if (!i11) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i11 = i11 + -1 | 0;
     }
    }
   } else i11 = i3;
   while (1) {
    i10 = HEAP32[i2 >> 2] | 0;
    i6 = i10 >>> 16 & 255;
    i7 = i10 >>> 8 & 255;
    i9 = i10 & 255;
    i10 = i10 >>> 24;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i8 >>> 16 & 255;
    i4 = i8 >>> 8 & 255;
    i5 = i8 & 255;
    i8 = i8 >>> 24;
    if ((i10 | 0) != 255) {
     i6 = ((Math_imul(i6, i10) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i10) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i10) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i22 = i10 ^ 255;
      i8 = (((Math_imul(i22, i8) | 0) >>> 0) / 255 | 0) + i10 | 0;
      i5 = i6 + (((Math_imul(i22, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i7 + (((Math_imul(i4, i22) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i9 + (((Math_imul(i3, i22) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i9 + i3 | 0;
      i4 = i7 + i4 | 0;
      i5 = i6 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i7, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5 | i8 << 24;
    if (!i11) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i11 = i11 + -1 | 0;
    }
   }
  } while (0);
  i2 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i16 >> 2] | 0) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i22 + -1;
  if (!i22) break; else {
   i12 = i2;
   i13 = i1;
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _Blit1to3(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i9 = HEAP32[i2 + 16 >> 2] | 0;
 i10 = HEAP32[i2 + 36 >> 2] | 0;
 i7 = HEAP32[i2 + 48 >> 2] | 0;
 if (!i3) return;
 i8 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 255;
 i5 = HEAP32[i2 + 20 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i6 & 7) {
  case 0:
   {
    i4 = i8;
    i2 = i5;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i8;
    i2 = i5;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i8;
    i2 = i5;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i8;
    i2 = i5;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i8;
    i2 = i5;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i8;
    i2 = i5;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i8;
    i2 = i5;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i8;
    i2 = i5;
    i5 = 11;
    break;
   }
  default:
   {
    i5 = 12;
    break L4;
   }
  }
  while (1) if ((i5 | 0) == 4) {
   i12 = (HEAPU8[i1 >> 0] | 0) << 2;
   i11 = i12 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i11 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i2 = i2 + 3 | 0;
   i1 = i1 + 1 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i11 = (HEAPU8[i1 >> 0] | 0) << 2;
   i12 = i11 | 1;
   HEAP8[i2 >> 0] = HEAP8[i7 + i11 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i1 = i1 + 1 | 0;
   i2 = i2 + 3 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i5 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i5 = 14;
   break;
  } else {
   i5 = i2 + i10 | 0;
   i1 = i1 + i9 | 0;
  }
 }
 if ((i5 | 0) != 12) if ((i5 | 0) == 14) return;
}

function _UpdateLogicalSize(i12) {
 i12 = i12 | 0;
 var f1 = f0, i2 = 0, f3 = f0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i14 + 32 | 0;
 i11 = i14 + 24 | 0;
 i5 = i14 + 16 | 0;
 i4 = i14 + 8 | 0;
 i6 = i14 + 60 | 0;
 i7 = i14 + 56 | 0;
 i8 = i14 + 40 | 0;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i7 >> 2] = 1;
 i9 = i12 + 196 | 0;
 if (!(HEAP32[i9 >> 2] | 0)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i10 = i12 + 200 | 0;
 if (!(HEAP32[i10 >> 2] | 0)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if ((HEAP32[i12 >> 2] | 0) != 85556) {
  _SDL_SetError(41341, i14) | 0;
  i13 = -1;
  STACKTOP = i14;
  return i13 | 0;
 }
 i2 = HEAP32[i12 + 308 >> 2] | 0;
 L11 : do if (!i2) {
  i2 = HEAP32[i12 + 8 >> 2] | 0;
  do if (!i2) {
   i2 = HEAP32[i12 + 188 >> 2] | 0;
   if (!i2) {
    i2 = _SDL_SetError(41374, i5) | 0;
    break;
   } else {
    _SDL_GetWindowSize(i2, i6, i7);
    break L11;
   }
  } else i2 = FUNCTION_TABLE_iiii[i2 & 63](i12, i6, i7) | 0; while (0);
  if ((i2 | 0) < 0) {
   i13 = -1;
   STACKTOP = i14;
   return i13 | 0;
  }
 } else {
  if ((HEAP32[i2 >> 2] | 0) == 85557) {
   HEAP32[i6 >> 2] = HEAP32[i2 + 12 >> 2];
   HEAP32[i7 >> 2] = HEAP32[i2 + 16 >> 2];
   break;
  }
  _SDL_SetError(41358, i4) | 0;
  i13 = -1;
  STACKTOP = i14;
  return i13 | 0;
 } while (0);
 f1 = Math_fround(HEAP32[i9 >> 2] | 0);
 f1 = Math_fround(f1 / Math_fround(HEAP32[i10 >> 2] | 0));
 f3 = Math_fround(HEAP32[i6 >> 2] | 0);
 f3 = Math_fround(f3 / Math_fround(HEAP32[i7 >> 2] | 0));
 if ((HEAP32[i12 >> 2] | 0) == 85556) {
  HEAPF32[i12 + 288 >> 2] = Math_fround(1.0);
  HEAPF32[i12 + 292 >> 2] = Math_fround(1.0);
 } else _SDL_SetError(41341, i11) | 0;
 do if (!(HEAP32[i12 + 212 >> 2] | 0)) {
  if (+_SDL_fabs(+Math_fround(f1 - f3)) < .0001) {
   f1 = Math_fround(HEAP32[i6 >> 2] | 0);
   f1 = Math_fround(f1 / Math_fround(HEAP32[i9 >> 2] | 0));
   _SDL_RenderSetViewport(i12, 0) | 0;
   break;
  }
  if (f1 > f3) {
   i11 = HEAP32[i6 >> 2] | 0;
   f1 = Math_fround(i11 | 0);
   f1 = Math_fround(f1 / Math_fround(HEAP32[i9 >> 2] | 0));
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = i11;
   i11 = ~~+_SDL_ceil(+Math_fround(f1 * Math_fround(HEAP32[i10 >> 2] | 0)));
   HEAP32[i8 + 12 >> 2] = i11;
   HEAP32[i8 + 4 >> 2] = ((HEAP32[i7 >> 2] | 0) - i11 | 0) / 2 | 0;
   _SDL_RenderSetViewport(i12, i8) | 0;
   break;
  } else {
   i11 = HEAP32[i7 >> 2] | 0;
   f1 = Math_fround(i11 | 0);
   f1 = Math_fround(f1 / Math_fround(HEAP32[i10 >> 2] | 0));
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 12 >> 2] = i11;
   i11 = ~~+_SDL_ceil(+Math_fround(f1 * Math_fround(HEAP32[i9 >> 2] | 0)));
   HEAP32[i8 + 8 >> 2] = i11;
   HEAP32[i8 >> 2] = ((HEAP32[i6 >> 2] | 0) - i11 | 0) / 2 | 0;
   _SDL_RenderSetViewport(i12, i8) | 0;
   break;
  }
 } else {
  i11 = f1 > f3;
  f1 = Math_fround(((i11 ? HEAP32[i6 >> 2] | 0 : HEAP32[i7 >> 2] | 0) | 0) / (HEAP32[(i11 ? i9 : i10) >> 2] | 0) | 0 | 0);
  i11 = ~~+_SDL_ceil(+Math_fround(f1 * Math_fround(HEAP32[i9 >> 2] | 0)));
  HEAP32[i8 + 8 >> 2] = i11;
  HEAP32[i8 >> 2] = ((HEAP32[i6 >> 2] | 0) - i11 | 0) / 2 | 0;
  i11 = ~~+_SDL_ceil(+Math_fround(f1 * Math_fround(HEAP32[i10 >> 2] | 0)));
  HEAP32[i8 + 12 >> 2] = i11;
  HEAP32[i8 + 4 >> 2] = ((HEAP32[i7 >> 2] | 0) - i11 | 0) / 2 | 0;
  _SDL_RenderSetViewport(i12, i8) | 0;
 } while (0);
 if ((HEAP32[i12 >> 2] | 0) == 85556) {
  HEAPF32[i12 + 288 >> 2] = f1;
  HEAPF32[i12 + 292 >> 2] = f1;
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 } else {
  _SDL_SetError(41341, i13) | 0;
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 return 0;
}

function _Blit565to565SurfaceAlpha(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP8[i1 + 63 >> 0] | 0;
 if (i2 << 24 >> 24 == -128) {
  _Blit16to16SurfaceAlpha128(i1, -2082);
  return;
 }
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i12 = HEAP32[i1 + 16 >> 2] >> 1;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] >> 1;
 i9 = (i2 & 255) >>> 3;
 i4 = i10 + -1 | 0;
 if (!i10) return;
 i10 = (i3 + 3 | 0) / 4 | 0;
 i8 = i3 & 255;
 if (!(i8 & 3)) {
  i1 = i5;
  i2 = i6;
  while (1) {
   i3 = i10;
   while (1) {
    i8 = HEAPU16[i1 >> 1] | 0;
    i6 = HEAPU16[i2 >> 1] | 0;
    i6 = (i6 << 16 | i6) & 132184095;
    i6 = ((Math_imul(((i8 << 16 | i8) & 132184095) - i6 | 0, i9) | 0) >>> 5) + i6 & 132184095;
    i8 = i2 + 2 | 0;
    HEAP16[i2 >> 1] = i6 >>> 16 | i6;
    i6 = HEAPU16[i1 + 2 >> 1] | 0;
    i7 = HEAPU16[i8 >> 1] | 0;
    i7 = (i7 << 16 | i7) & 132184095;
    i7 = ((Math_imul(((i6 << 16 | i6) & 132184095) - i7 | 0, i9) | 0) >>> 5) + i7 & 132184095;
    i6 = i2 + 4 | 0;
    HEAP16[i8 >> 1] = i7 >>> 16 | i7;
    i8 = HEAPU16[i1 + 4 >> 1] | 0;
    i7 = HEAPU16[i6 >> 1] | 0;
    i7 = (i7 << 16 | i7) & 132184095;
    i7 = ((Math_imul(((i8 << 16 | i8) & 132184095) - i7 | 0, i9) | 0) >>> 5) + i7 & 132184095;
    i8 = i2 + 6 | 0;
    HEAP16[i6 >> 1] = i7 >>> 16 | i7;
    i6 = i1;
    i1 = i1 + 8 | 0;
    i6 = HEAPU16[i6 + 6 >> 1] | 0;
    i7 = HEAPU16[i8 >> 1] | 0;
    i7 = (i7 << 16 | i7) & 132184095;
    i7 = ((Math_imul(((i6 << 16 | i6) & 132184095) - i7 | 0, i9) | 0) >>> 5) + i7 & 132184095;
    i2 = i2 + 8 | 0;
    HEAP16[i8 >> 1] = i7 >>> 16 | i7;
    if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
   }
   if (!i4) break; else {
    i1 = i1 + (i12 << 1) | 0;
    i2 = i2 + (i11 << 1) | 0;
    i4 = i4 + -1 | 0;
   }
  }
  return;
 } else i1 = i6;
 L15 : while (1) {
  switch (i8 & 3) {
  case 1:
   {
    i6 = i10;
    i3 = i1;
    i7 = 12;
    break;
   }
  case 3:
   {
    i2 = i10;
    i7 = 10;
    break;
   }
  case 2:
   {
    i2 = i10;
    i7 = 11;
    break;
   }
  default:
   {
    i7 = 13;
    break L15;
   }
  }
  while (1) if ((i7 | 0) == 10) {
   i3 = HEAPU16[i5 >> 1] | 0;
   i6 = HEAPU16[i1 >> 1] | 0;
   i6 = (i6 << 16 | i6) & 132184095;
   i6 = ((Math_imul(((i3 << 16 | i3) & 132184095) - i6 | 0, i9) | 0) >>> 5) + i6 & 132184095;
   HEAP16[i1 >> 1] = i6 >>> 16 | i6;
   i5 = i5 + 2 | 0;
   i1 = i1 + 2 | 0;
   i7 = 11;
   continue;
  } else if ((i7 | 0) == 11) {
   i3 = HEAPU16[i5 >> 1] | 0;
   i6 = HEAPU16[i1 >> 1] | 0;
   i6 = (i6 << 16 | i6) & 132184095;
   i6 = ((Math_imul(((i3 << 16 | i3) & 132184095) - i6 | 0, i9) | 0) >>> 5) + i6 & 132184095;
   HEAP16[i1 >> 1] = i6 >>> 16 | i6;
   i6 = i2;
   i5 = i5 + 2 | 0;
   i3 = i1 + 2 | 0;
   i7 = 12;
   continue;
  } else if ((i7 | 0) == 12) {
   i1 = i5 + 2 | 0;
   i2 = HEAPU16[i5 >> 1] | 0;
   i7 = HEAPU16[i3 >> 1] | 0;
   i7 = (i7 << 16 | i7) & 132184095;
   i7 = ((Math_imul(((i2 << 16 | i2) & 132184095) - i7 | 0, i9) | 0) >>> 5) + i7 & 132184095;
   i2 = i3 + 2 | 0;
   HEAP16[i3 >> 1] = i7 >>> 16 | i7;
   if ((i6 | 0) <= 1) break;
   i7 = HEAPU16[i1 >> 1] | 0;
   i1 = HEAPU16[i2 >> 1] | 0;
   i1 = (i1 << 16 | i1) & 132184095;
   i1 = ((Math_imul(((i7 << 16 | i7) & 132184095) - i1 | 0, i9) | 0) >>> 5) + i1 & 132184095;
   HEAP16[i2 >> 1] = i1 >>> 16 | i1;
   i2 = i6 + -1 | 0;
   i5 = i5 + 4 | 0;
   i1 = i3 + 4 | 0;
   i7 = 10;
   continue;
  }
  if (!i4) {
   i7 = 15;
   break;
  } else {
   i5 = i1 + (i12 << 1) | 0;
   i1 = i2 + (i11 << 1) | 0;
   i4 = i4 + -1 | 0;
  }
 }
 if ((i7 | 0) != 13) if ((i7 | 0) == 15) return;
}

function _Blit555to555SurfaceAlpha(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP8[i1 + 63 >> 0] | 0;
 if (i2 << 24 >> 24 == -128) {
  _Blit16to16SurfaceAlpha128(i1, -1058);
  return;
 }
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i10 = HEAP32[i1 + 28 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 i12 = HEAP32[i1 + 16 >> 2] >> 1;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] >> 1;
 i9 = (i2 & 255) >>> 3;
 i4 = i10 + -1 | 0;
 if (!i10) return;
 i10 = (i3 + 3 | 0) / 4 | 0;
 i8 = i3 & 255;
 if (!(i8 & 3)) {
  i1 = i5;
  i2 = i6;
  while (1) {
   i3 = i10;
   while (1) {
    i8 = HEAPU16[i1 >> 1] | 0;
    i6 = HEAPU16[i2 >> 1] | 0;
    i6 = (i6 << 16 | i6) & 65043487;
    i6 = ((Math_imul(((i8 << 16 | i8) & 65043487) - i6 | 0, i9) | 0) >>> 5) + i6 & 65043487;
    i8 = i2 + 2 | 0;
    HEAP16[i2 >> 1] = i6 >>> 16 | i6;
    i6 = HEAPU16[i1 + 2 >> 1] | 0;
    i7 = HEAPU16[i8 >> 1] | 0;
    i7 = (i7 << 16 | i7) & 65043487;
    i7 = ((Math_imul(((i6 << 16 | i6) & 65043487) - i7 | 0, i9) | 0) >>> 5) + i7 & 65043487;
    i6 = i2 + 4 | 0;
    HEAP16[i8 >> 1] = i7 >>> 16 | i7;
    i8 = HEAPU16[i1 + 4 >> 1] | 0;
    i7 = HEAPU16[i6 >> 1] | 0;
    i7 = (i7 << 16 | i7) & 65043487;
    i7 = ((Math_imul(((i8 << 16 | i8) & 65043487) - i7 | 0, i9) | 0) >>> 5) + i7 & 65043487;
    i8 = i2 + 6 | 0;
    HEAP16[i6 >> 1] = i7 >>> 16 | i7;
    i6 = i1;
    i1 = i1 + 8 | 0;
    i6 = HEAPU16[i6 + 6 >> 1] | 0;
    i7 = HEAPU16[i8 >> 1] | 0;
    i7 = (i7 << 16 | i7) & 65043487;
    i7 = ((Math_imul(((i6 << 16 | i6) & 65043487) - i7 | 0, i9) | 0) >>> 5) + i7 & 65043487;
    i2 = i2 + 8 | 0;
    HEAP16[i8 >> 1] = i7 >>> 16 | i7;
    if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
   }
   if (!i4) break; else {
    i1 = i1 + (i12 << 1) | 0;
    i2 = i2 + (i11 << 1) | 0;
    i4 = i4 + -1 | 0;
   }
  }
  return;
 } else i1 = i6;
 L15 : while (1) {
  switch (i8 & 3) {
  case 1:
   {
    i6 = i10;
    i3 = i1;
    i7 = 12;
    break;
   }
  case 3:
   {
    i2 = i10;
    i7 = 10;
    break;
   }
  case 2:
   {
    i2 = i10;
    i7 = 11;
    break;
   }
  default:
   {
    i7 = 13;
    break L15;
   }
  }
  while (1) if ((i7 | 0) == 10) {
   i3 = HEAPU16[i5 >> 1] | 0;
   i6 = HEAPU16[i1 >> 1] | 0;
   i6 = (i6 << 16 | i6) & 65043487;
   i6 = ((Math_imul(((i3 << 16 | i3) & 65043487) - i6 | 0, i9) | 0) >>> 5) + i6 & 65043487;
   HEAP16[i1 >> 1] = i6 >>> 16 | i6;
   i5 = i5 + 2 | 0;
   i1 = i1 + 2 | 0;
   i7 = 11;
   continue;
  } else if ((i7 | 0) == 11) {
   i3 = HEAPU16[i5 >> 1] | 0;
   i6 = HEAPU16[i1 >> 1] | 0;
   i6 = (i6 << 16 | i6) & 65043487;
   i6 = ((Math_imul(((i3 << 16 | i3) & 65043487) - i6 | 0, i9) | 0) >>> 5) + i6 & 65043487;
   HEAP16[i1 >> 1] = i6 >>> 16 | i6;
   i6 = i2;
   i5 = i5 + 2 | 0;
   i3 = i1 + 2 | 0;
   i7 = 12;
   continue;
  } else if ((i7 | 0) == 12) {
   i1 = i5 + 2 | 0;
   i2 = HEAPU16[i5 >> 1] | 0;
   i7 = HEAPU16[i3 >> 1] | 0;
   i7 = (i7 << 16 | i7) & 65043487;
   i7 = ((Math_imul(((i2 << 16 | i2) & 65043487) - i7 | 0, i9) | 0) >>> 5) + i7 & 65043487;
   i2 = i3 + 2 | 0;
   HEAP16[i3 >> 1] = i7 >>> 16 | i7;
   if ((i6 | 0) <= 1) break;
   i7 = HEAPU16[i1 >> 1] | 0;
   i1 = HEAPU16[i2 >> 1] | 0;
   i1 = (i1 << 16 | i1) & 65043487;
   i1 = ((Math_imul(((i7 << 16 | i7) & 65043487) - i1 | 0, i9) | 0) >>> 5) + i1 & 65043487;
   HEAP16[i2 >> 1] = i1 >>> 16 | i1;
   i2 = i6 + -1 | 0;
   i5 = i5 + 4 | 0;
   i1 = i3 + 4 | 0;
   i7 = 10;
   continue;
  }
  if (!i4) {
   i7 = 15;
   break;
  } else {
   i5 = i1 + (i12 << 1) | 0;
   i1 = i2 + (i11 << 1) | 0;
   i4 = i4 + -1 | 0;
  }
 }
 if ((i7 | 0) != 13) if ((i7 | 0) == 15) return;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i31 = HEAPU8[i19 + 60 >> 0] | 0;
 i32 = HEAPU8[i19 + 61 >> 0] | 0;
 i20 = HEAPU8[i19 + 62 >> 0] | 0;
 i21 = HEAPU8[i19 + 63 >> 0] | 0;
 i22 = i19 + 28 | 0;
 i30 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i24 = i19 + 24 | 0;
 i3 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i30 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i30) return;
 i26 = i19 + 20 | 0;
 i27 = i19 + 32 | 0;
 i28 = (i1 & 1 | 0) == 0;
 i29 = (i1 & 2 | 0) == 0;
 i30 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i26 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i9 = i13 >>> 24;
    i11 = i13 >>> 16 & 255;
    i10 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i28) {
     i9 = ((Math_imul(i9, i31) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i32) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i20) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i21) | 0) >>> 0) / 255 | 0;
    i13 = i29 ? i13 : i33;
    if (i30 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i33, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i23 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i31 = HEAPU8[i19 + 60 >> 0] | 0;
 i32 = HEAPU8[i19 + 61 >> 0] | 0;
 i20 = HEAPU8[i19 + 62 >> 0] | 0;
 i21 = HEAPU8[i19 + 63 >> 0] | 0;
 i22 = i19 + 28 | 0;
 i30 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i24 = i19 + 24 | 0;
 i3 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i30 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i30) return;
 i26 = i19 + 20 | 0;
 i27 = i19 + 32 | 0;
 i28 = (i1 & 1 | 0) == 0;
 i29 = (i1 & 2 | 0) == 0;
 i30 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i26 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i10 = i13 >>> 24;
    i11 = i13 >>> 16 & 255;
    i9 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i28) {
     i9 = ((Math_imul(i9, i31) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i32) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i20) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i21) | 0) >>> 0) / 255 | 0;
    i13 = i29 ? i13 : i33;
    if (i30 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i33, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i23 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i31 = HEAPU8[i19 + 60 >> 0] | 0;
 i32 = HEAPU8[i19 + 61 >> 0] | 0;
 i20 = HEAPU8[i19 + 62 >> 0] | 0;
 i21 = HEAPU8[i19 + 63 >> 0] | 0;
 i22 = i19 + 28 | 0;
 i30 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i24 = i19 + 24 | 0;
 i3 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i30 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i30) return;
 i26 = i19 + 20 | 0;
 i27 = i19 + 32 | 0;
 i28 = (i1 & 1 | 0) == 0;
 i29 = (i1 & 2 | 0) == 0;
 i30 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i26 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i9 = i13 >>> 16 & 255;
    i11 = i13 >>> 8 & 255;
    i10 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i28) {
     i9 = ((Math_imul(i9, i31) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i32) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i20) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i21) | 0) >>> 0) / 255 | 0;
    i13 = i29 ? i13 : i33;
    if (i30 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i33, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i23 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i31 = HEAPU8[i19 + 60 >> 0] | 0;
 i32 = HEAPU8[i19 + 61 >> 0] | 0;
 i20 = HEAPU8[i19 + 62 >> 0] | 0;
 i21 = HEAPU8[i19 + 63 >> 0] | 0;
 i22 = i19 + 28 | 0;
 i30 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i30 | 0) | 0;
 i24 = i19 + 24 | 0;
 i3 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i30 + -1 | 0;
 HEAP32[i22 >> 2] = i2;
 if (!i30) return;
 i26 = i19 + 20 | 0;
 i27 = i19 + 32 | 0;
 i28 = (i1 & 1 | 0) == 0;
 i29 = (i1 & 2 | 0) == 0;
 i30 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i26 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i10 = i13 >>> 16 & 255;
    i11 = i13 >>> 8 & 255;
    i9 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (!i28) {
     i9 = ((Math_imul(i9, i31) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i32) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i20) | 0) >>> 0) / 255 | 0;
    }
    i33 = ((Math_imul(i13, i21) | 0) >>> 0) / 255 | 0;
    i13 = i29 ? i13 : i33;
    if (i30 & i13 >>> 0 < 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i33 = 255 - i13 | 0;
      i12 = (((Math_imul(i33, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i33, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i33, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i33, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i23 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _BlitRGBtoRGBPixelAlpha(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i11 = HEAP32[i2 + 16 >> 2] >> 2;
 i9 = HEAP32[i2 + 36 >> 2] >> 2;
 if (!i3) return;
 i10 = (i1 + 3 | 0) / 4 | 0;
 i8 = i1 & 255;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i8 & 3) {
  case 0:
   {
    i6 = i10;
    i5 = i1;
    i7 = 4;
    break;
   }
  case 3:
   {
    i6 = i10;
    i5 = i1;
    i7 = 8;
    break;
   }
  case 2:
   {
    i6 = i10;
    i5 = i1;
    i7 = 12;
    break;
   }
  case 1:
   {
    i6 = i10;
    i5 = i1;
    i4 = i2;
    i7 = 16;
    break;
   }
  default:
   {
    i7 = 20;
    break L4;
   }
  }
  while (1) if ((i7 | 0) == 4) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 24;
   switch ((i4 & 255) << 24 >> 24) {
   case 0:
    break;
   case -1:
    {
     i7 = 6;
     break;
    }
   default:
    {
     i12 = HEAP32[i2 >> 2] | 0;
     i7 = i12 & 16711935;
     i13 = i12 & 65280;
     i1 = ((Math_imul((i1 & 65280) - i13 | 0, i4) | 0) >>> 8) + i13 & 65280 | ((Math_imul(i12 >>> 24, i4 ^ 255) | 0) >>> 8) + i4 << 24 | ((Math_imul((i1 & 16711935) - i7 | 0, i4) | 0) >>> 8) + i7 & 16711935;
     i7 = 6;
    }
   }
   if ((i7 | 0) == 6) HEAP32[i2 >> 2] = i1;
   i5 = i5 + 4 | 0;
   i2 = i2 + 4 | 0;
   i7 = 8;
   continue;
  } else if ((i7 | 0) == 8) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 24;
   switch ((i4 & 255) << 24 >> 24) {
   case 0:
    break;
   case -1:
    {
     i7 = 10;
     break;
    }
   default:
    {
     i13 = HEAP32[i2 >> 2] | 0;
     i7 = i13 & 16711935;
     i12 = i13 & 65280;
     i1 = ((Math_imul((i1 & 65280) - i12 | 0, i4) | 0) >>> 8) + i12 & 65280 | ((Math_imul(i13 >>> 24, i4 ^ 255) | 0) >>> 8) + i4 << 24 | ((Math_imul((i1 & 16711935) - i7 | 0, i4) | 0) >>> 8) + i7 & 16711935;
     i7 = 10;
    }
   }
   if ((i7 | 0) == 10) HEAP32[i2 >> 2] = i1;
   i5 = i5 + 4 | 0;
   i2 = i2 + 4 | 0;
   i7 = 12;
   continue;
  } else if ((i7 | 0) == 12) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 24;
   switch ((i4 & 255) << 24 >> 24) {
   case 0:
    break;
   case -1:
    {
     i7 = 14;
     break;
    }
   default:
    {
     i13 = HEAP32[i2 >> 2] | 0;
     i7 = i13 & 16711935;
     i12 = i13 & 65280;
     i1 = ((Math_imul((i1 & 65280) - i12 | 0, i4) | 0) >>> 8) + i12 & 65280 | ((Math_imul(i13 >>> 24, i4 ^ 255) | 0) >>> 8) + i4 << 24 | ((Math_imul((i1 & 16711935) - i7 | 0, i4) | 0) >>> 8) + i7 & 16711935;
     i7 = 14;
    }
   }
   if ((i7 | 0) == 14) HEAP32[i2 >> 2] = i1;
   i5 = i5 + 4 | 0;
   i4 = i2 + 4 | 0;
   i7 = 16;
   continue;
  } else if ((i7 | 0) == 16) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = i1 >>> 24;
   switch ((i2 & 255) << 24 >> 24) {
   case 0:
    break;
   case -1:
    {
     i7 = 18;
     break;
    }
   default:
    {
     i13 = HEAP32[i4 >> 2] | 0;
     i7 = i13 & 16711935;
     i12 = i13 & 65280;
     i1 = ((Math_imul((i1 & 65280) - i12 | 0, i2) | 0) >>> 8) + i12 & 65280 | ((Math_imul(i13 >>> 24, i2 ^ 255) | 0) >>> 8) + i2 << 24 | ((Math_imul((i1 & 16711935) - i7 | 0, i2) | 0) >>> 8) + i7 & 16711935;
     i7 = 18;
    }
   }
   if ((i7 | 0) == 18) HEAP32[i4 >> 2] = i1;
   i1 = i5 + 4 | 0;
   i2 = i4 + 4 | 0;
   if ((i6 | 0) > 1) {
    i6 = i6 + -1 | 0;
    i5 = i1;
    i7 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i7 = 22;
   break;
  } else {
   i1 = i1 + (i11 << 2) | 0;
   i2 = i2 + (i9 << 2) | 0;
  }
 }
 if ((i7 | 0) != 20) if ((i7 | 0) == 22) return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i15, i17, i2, i3, i18, i13) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i18 = i18 | 0;
 i13 = i13 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i14 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(576);
 i8 = i21 + 424 | 0;
 i11 = i21;
 i7 = i21 + 24 | 0;
 i20 = i21 + 16 | 0;
 i10 = i21 + 12 | 0;
 i16 = i21 + 8 | 0;
 i4 = i21 + 564 | 0;
 i22 = i21 + 4 | 0;
 i9 = i21 + 464 | 0;
 HEAP32[i20 >> 2] = i7;
 i19 = i20 + 4 | 0;
 HEAP32[i19 >> 2] = 372;
 __ZNKSt3__28ios_base6getlocEv(i16, i3);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i16, 83652) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i22 >> 2] = HEAP32[i17 >> 2];
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i22 >> 2];
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i15, i8, i2, i16, i6, i18, i4, i1, i20, i10, i7 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, 74539, 74549, i8) | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i2 = HEAP32[i20 >> 2] | 0;
  i1 = i6 - i2 | 0;
  if ((i1 | 0) > 392) {
   i1 = _malloc((i1 >>> 2) + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i5 = i1;
    i12 = i1;
   }
  } else {
   i5 = i9;
   i12 = 0;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i5 = i8 + 40 | 0;
  i7 = i8;
  i4 = i2;
  i3 = i1;
  i1 = i6;
  while (1) {
   if (i4 >>> 0 >= i1 >>> 0) break;
   i2 = HEAP32[i4 >> 2] | 0;
   i1 = i8;
   while (1) {
    if ((i1 | 0) == (i5 | 0)) {
     i1 = i5;
     break;
    }
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
    i1 = i1 + 4 | 0;
   }
   HEAP8[i3 >> 0] = HEAP8[74539 + (i1 - i7 >> 2) >> 0] | 0;
   i4 = i4 + 4 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
  HEAP8[i3 >> 0] = 0;
  HEAP32[i11 >> 2] = i13;
  if ((_sscanf(i9, 74440, i11) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if (i12 | 0) _free(i12);
 }
 i1 = HEAP32[i15 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i1 = HEAP32[i17 >> 2] | 0;
 do if (!i1) i14 = 32; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i17 >> 2] = 0;
   i14 = 32;
   break;
  } else if (i3) break; else {
   i14 = 34;
   break;
  }
 } while (0);
 if ((i14 | 0) == 32) if (i3) i14 = 34;
 if ((i14 | 0) == 34) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 i2 = HEAP32[i15 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i16);
 i1 = HEAP32[i20 >> 2] | 0;
 HEAP32[i20 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 511](i1);
 STACKTOP = i21;
 return i2 | 0;
}

function _SDL_SW_UpdateYUVTexture(i7, i15, i17, i16) {
 i7 = i7 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i2 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 L1 : do if ((i1 | 0) < 1431918169) if ((i1 | 0) < 844715353) {
  switch (i1 | 0) {
  case 842094169:
   break L1;
  default:
   {}
  }
  return 0;
 } else {
  switch (i1 | 0) {
  case 844715353:
   {
    i2 = 15;
    break L1;
   }
  default:
   {}
  }
  return 0;
 } else {
  if ((i1 | 0) < 1448433993) {
   switch (i1 | 0) {
   case 1431918169:
    {
     i2 = 15;
     break L1;
    }
   default:
    {}
   }
   return 0;
  }
  if ((i1 | 0) < 1498831189) {
   switch (i1 | 0) {
   case 1448433993:
    break L1;
   default:
    {}
   }
   return 0;
  } else {
   switch (i1 | 0) {
   case 1498831189:
    {
     i2 = 15;
     break L1;
    }
   default:
    {}
   }
   return 0;
  }
 } while (0);
 if ((i2 | 0) == 15) {
  i6 = i7 + 36 | 0;
  i4 = HEAP32[i15 + 8 >> 2] << 1;
  i5 = i15 + 12 | 0;
  if ((HEAP32[i5 >> 2] | 0) <= 0) return 0;
  i2 = (HEAP32[i7 + 44 >> 2] | 0) + (Math_imul(HEAP32[i15 + 4 >> 2] | 0, HEAPU16[i6 >> 1] | 0) | 0) | 0;
  i3 = 0;
  i2 = i2 + (HEAP32[i15 >> 2] << 1) | 0;
  i1 = i17;
  while (1) {
   _SDL_memcpy(i2, i1, i4) | 0;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (HEAP32[i5 >> 2] | 0)) break; else {
    i2 = i2 + (HEAPU16[i6 >> 1] | 0) | 0;
    i1 = i1 + i16 | 0;
   }
  }
  return 0;
 }
 i3 = HEAP32[i15 >> 2] | 0;
 i12 = i15 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (!(i3 | i1)) {
  i1 = HEAP32[i15 + 8 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i7 + 8 >> 2] | 0)) {
   i2 = HEAP32[i15 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i7 + 12 >> 2] | 0)) {
    i16 = Math_imul(i2, i1) | 0;
    _SDL_memcpy(HEAP32[i7 + 16 >> 2] | 0, i17, ((i16 | 0) / 2 | 0) + i16 | 0) | 0;
    return 0;
   } else i1 = 0;
  } else i1 = 0;
 }
 i11 = i7 + 16 | 0;
 i13 = i7 + 8 | 0;
 i10 = i15 + 8 | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 i14 = i15 + 12 | 0;
 if ((HEAP32[i14 >> 2] | 0) <= 0) return 0;
 i4 = 0;
 i1 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i13 >> 2] | 0, i1) | 0) + i3 | 0;
 i2 = i17;
 while (1) {
  _SDL_memcpy(i1, i2, i5) | 0;
  i3 = HEAP32[i13 >> 2] | 0;
  i4 = i4 + 1 | 0;
  i6 = HEAP32[i14 >> 2] | 0;
  if ((i4 | 0) >= (i6 | 0)) break; else {
   i1 = i1 + i3 | 0;
   i2 = i2 + i16 | 0;
  }
 }
 i7 = i7 + 12 | 0;
 i5 = (HEAP32[i10 >> 2] | 0) / 2 | 0;
 if ((i6 | 0) <= 1) return 0;
 i1 = (HEAP32[i11 >> 2] | 0) + (Math_imul(i3, HEAP32[i7 >> 2] | 0) | 0) | 0;
 i3 = (Math_imul((HEAP32[i12 >> 2] | 0) / 2 | 0, i3) | 0) / 2 | 0;
 i4 = (i16 | 0) / 2 | 0;
 i2 = 0;
 i3 = i1 + (i3 + ((HEAP32[i15 >> 2] | 0) / 2 | 0)) | 0;
 i1 = i17 + (Math_imul(i6, i16) | 0) | 0;
 while (1) {
  _SDL_memcpy(i3, i1, i5) | 0;
  i8 = HEAP32[i13 >> 2] | 0;
  i2 = i2 + 1 | 0;
  i9 = HEAP32[i14 >> 2] | 0;
  if ((i2 | 0) >= ((i9 | 0) / 2 | 0 | 0)) break; else {
   i3 = i3 + ((i8 | 0) / 2 | 0) | 0;
   i1 = i1 + i4 | 0;
  }
 }
 i6 = Math_imul(i9, i16) | 0;
 i1 = Math_imul(i8, HEAP32[i7 >> 2] | 0) | 0;
 i5 = (HEAP32[i10 >> 2] | 0) / 2 | 0;
 if ((i9 | 0) <= 1) return 0;
 i2 = (Math_imul((HEAP32[i12 >> 2] | 0) / 2 | 0, i8) | 0) / 2 | 0;
 i4 = (i16 | 0) / 2 | 0;
 i3 = 0;
 i2 = (HEAP32[i11 >> 2] | 0) + i1 + ((i1 | 0) / 4 | 0) + (i2 + ((HEAP32[i15 >> 2] | 0) / 2 | 0)) | 0;
 i1 = i17 + i6 + ((i6 | 0) / 4 | 0) | 0;
 while (1) {
  _SDL_memcpy(i2, i1, i5) | 0;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) >= ((HEAP32[i14 >> 2] | 0) / 2 | 0 | 0)) break; else {
   i2 = i2 + ((HEAP32[i13 >> 2] | 0) / 2 | 0) | 0;
   i1 = i1 + i4 | 0;
  }
 }
 return 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i15, i17, i2, i3, i18, i13) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i18 = i18 | 0;
 i13 = i13 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i16 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i14 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i8 = i21 + 24 | 0;
 i11 = i21;
 i7 = i21 + 140 | 0;
 i20 = i21 + 16 | 0;
 i10 = i21 + 12 | 0;
 i16 = i21 + 8 | 0;
 i4 = i21 + 136 | 0;
 i22 = i21 + 4 | 0;
 i9 = i21 + 36 | 0;
 HEAP32[i20 >> 2] = i7;
 i19 = i20 + 4 | 0;
 HEAP32[i19 >> 2] = 372;
 __ZNKSt3__28ios_base6getlocEv(i16, i3);
 i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i16, 83620) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i22 >> 2] = HEAP32[i17 >> 2];
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i22 >> 2];
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i15, i8, i2, i16, i6, i18, i4, i1, i20, i10, i7 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 31](i1, 74429, 74439, i8) | 0;
  i6 = HEAP32[i10 >> 2] | 0;
  i2 = HEAP32[i20 >> 2] | 0;
  i1 = i6 - i2 | 0;
  if ((i1 | 0) > 98) {
   i1 = _malloc(i1 + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i5 = i1;
    i12 = i1;
   }
  } else {
   i5 = i9;
   i12 = 0;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i5 = i8 + 10 | 0;
  i7 = i8;
  i4 = i2;
  i3 = i1;
  i1 = i6;
  while (1) {
   if (i4 >>> 0 >= i1 >>> 0) break;
   i2 = HEAP8[i4 >> 0] | 0;
   i1 = i8;
   while (1) {
    if ((i1 | 0) == (i5 | 0)) {
     i1 = i5;
     break;
    }
    if ((HEAP8[i1 >> 0] | 0) == i2 << 24 >> 24) break;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i3 >> 0] = HEAP8[74429 + (i1 - i7) >> 0] | 0;
   i4 = i4 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
  HEAP8[i3 >> 0] = 0;
  HEAP32[i11 >> 2] = i13;
  if ((_sscanf(i9, 74440, i11) | 0) != 1) __ZNSt3__221__throw_runtime_errorEPKc(0);
  if (i12 | 0) _free(i12);
 }
 i1 = HEAP32[i15 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i15 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i15 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i1 = HEAP32[i17 >> 2] | 0;
 do if (!i1) i14 = 32; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i17 >> 2] = 0;
   i14 = 32;
   break;
  } else if (i3) break; else {
   i14 = 34;
   break;
  }
 } while (0);
 if ((i14 | 0) == 32) if (i3) i14 = 34;
 if ((i14 | 0) == 34) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 i2 = HEAP32[i15 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i16);
 i1 = HEAP32[i20 >> 2] | 0;
 HEAP32[i20 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i19 >> 2] & 511](i1);
 STACKTOP = i21;
 return i2 | 0;
}

function _png_handle_iTXt(i13, i9, i8) {
 i13 = i13 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i12 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i14 + 28 | 0;
 i11 = i14;
 i1 = i13 + 756 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 switch (i2 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i13, i8) | 0;
   STACKTOP = i14;
   return;
  }
 default:
  i12 = 3;
 }
 if ((i12 | 0) == 3) {
  i7 = i2 + -1 | 0;
  HEAP32[i1 >> 2] = i7;
  if ((i7 | 0) == 1) {
   _png_crc_finish(i13, i8) | 0;
   _png_chunk_benign_error(i13, 63619);
   STACKTOP = i14;
   return;
  }
 }
 i2 = i13 + 208 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i13, 63643);
 if (i1 & 4 | 0) HEAP32[i2 >> 2] = i1 | 8;
 i3 = i8 + 1 | 0;
 i7 = i13 + 788 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) i12 = 12; else {
  i2 = i13 + 792 | 0;
  if ((HEAP32[i2 >> 2] | 0) >>> 0 < i3 >>> 0) {
   HEAP32[i7 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   _png_free(i13, i1);
   i12 = 12;
  } else i6 = i1;
 }
 do if ((i12 | 0) == 12) {
  i1 = _png_malloc_base(i13, i3) | 0;
  if (i1 | 0) {
   HEAP32[i7 >> 2] = i1;
   HEAP32[i13 + 792 >> 2] = i3;
   i6 = i1;
   break;
  }
  _png_chunk_warning(i13, 63656);
  _png_crc_finish(i13, i8) | 0;
  _png_chunk_benign_error(i13, 63690);
  STACKTOP = i14;
  return;
 } while (0);
 _png_read_data(i13, i6, i8);
 _png_calculate_crc(i13, i6, i8);
 if (_png_crc_finish(i13, 0) | 0) {
  STACKTOP = i14;
  return;
 }
 L28 : do if (!i8) i1 = 63755; else {
  i1 = 0;
  do {
   if (!(HEAP8[i6 + i1 >> 0] | 0)) break;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i8 >>> 0);
  if ((i1 + -1 | 0) >>> 0 > 78) i1 = 63755; else if ((i1 + 5 | 0) >>> 0 > i8 >>> 0) i1 = 63724; else {
   i2 = HEAP8[i6 + (i1 + 1) >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 0:
    break;
   case 1:
    {
     if (HEAP8[i6 + (i1 + 2) >> 0] | 0) {
      i1 = 63734;
      break L28;
     }
     break;
    }
   default:
    {
     i1 = 63734;
     break L28;
    }
   }
   i5 = i2 << 24 >> 24 != 0;
   HEAP32[i10 >> 2] = 0;
   i4 = i1 + 3 | 0;
   L38 : do if (i4 >>> 0 < i8 >>> 0) {
    i1 = i4;
    do {
     if (!(HEAP8[i6 + i1 >> 0] | 0)) break L38;
     i1 = i1 + 1 | 0;
    } while (i1 >>> 0 < i8 >>> 0);
   } else i1 = i4; while (0);
   i3 = i1 + 1 | 0;
   L43 : do if (i3 >>> 0 < i8 >>> 0) {
    i1 = i3;
    do {
     if (!(HEAP8[i6 + i1 >> 0] | 0)) break L43;
     i1 = i1 + 1 | 0;
    } while (i1 >>> 0 < i8 >>> 0);
   } else i1 = i3; while (0);
   i2 = i1 + 1 | 0;
   do if (i5 | i2 >>> 0 > i8 >>> 0) if (i5 & i2 >>> 0 < i8 >>> 0) {
    HEAP32[i10 >> 2] = -1;
    if ((_png_decompress_chunk(i13, i8, i2, i10) | 0) == 1) {
     i1 = HEAP32[i7 >> 2] | 0;
     i12 = 35;
     break;
    } else {
     i1 = HEAP32[i13 + 248 >> 2] | 0;
     if (!i1) {
      i1 = i6;
      i12 = 35;
      break;
     } else break;
    }
   } else i1 = 63724; else {
    HEAP32[i10 >> 2] = i8 - i2;
    i1 = i6;
    i12 = 35;
   } while (0);
   if ((i12 | 0) == 35) {
    HEAP8[i1 + ((HEAP32[i10 >> 2] | 0) + i2) >> 0] = 0;
    HEAP32[i11 >> 2] = i5 ? 2 : 1;
    HEAP32[i11 + 4 >> 2] = i1;
    HEAP32[i11 + 20 >> 2] = i1 + i4;
    HEAP32[i11 + 24 >> 2] = i1 + i3;
    HEAP32[i11 + 8 >> 2] = i1 + i2;
    HEAP32[i11 + 12 >> 2] = 0;
    HEAP32[i11 + 16 >> 2] = HEAP32[i10 >> 2];
    if (!(_png_set_text_2(i13, i9, i11, 1) | 0)) {
     STACKTOP = i14;
     return;
    } else i1 = 63704;
   }
  }
 } while (0);
 _png_chunk_benign_error(i13, i1);
 STACKTOP = i14;
 return;
}

function _SDL_SetRenderTarget(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i9 + 16 | 0;
 i3 = i9 + 8 | 0;
 i2 = i9;
 if (i8 | 0) {
  i7 = HEAP32[i8 + 44 >> 2] | 0;
  if (i7 | 0) if (HEAP32[i8 + 108 >> 2] & 8 | 0) {
   i6 = i8 + 308 | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   if ((i5 | 0) == (i1 | 0)) {
    i8 = 0;
    STACKTOP = i9;
    return i8 | 0;
   }
   do if (!i1) {
    i3 = 0;
    i2 = 0;
   } else {
    if ((HEAP32[i1 >> 2] | 0) != 85557) {
     _SDL_SetError(41358, i2) | 0;
     i8 = -1;
     STACKTOP = i9;
     return i8 | 0;
    }
    if ((HEAP32[i1 + 32 >> 2] | 0) != (i8 | 0)) {
     i8 = _SDL_SetError(59393, i3) | 0;
     STACKTOP = i9;
     return i8 | 0;
    }
    if ((HEAP32[i1 + 8 >> 2] | 0) == 2) {
     i2 = HEAP32[i1 + 36 >> 2] | 0;
     i1 = (i2 | 0) == 0 ? i1 : i2;
     i2 = (i1 | 0) != 0;
     if (i5 | 0) {
      i3 = i1;
      break;
     }
     i4 = i8 + 232 | 0;
     i5 = i8 + 216 | 0;
     HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
     i4 = i8 + 264 | 0;
     i5 = i8 + 248 | 0;
     HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i4 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
     HEAP32[i4 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
     HEAP32[i4 + 12 >> 2] = HEAP32[i5 + 12 >> 2];
     HEAP32[i8 + 284 >> 2] = HEAP32[i8 + 280 >> 2];
     i4 = i8 + 288 | 0;
     i5 = HEAP32[i4 + 4 >> 2] | 0;
     i3 = i8 + 296 | 0;
     HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i3 + 4 >> 2] = i5;
     HEAP32[i8 + 204 >> 2] = HEAP32[i8 + 196 >> 2];
     HEAP32[i8 + 208 >> 2] = HEAP32[i8 + 200 >> 2];
     i3 = i1;
     break;
    } else {
     i8 = _SDL_SetError(59436, i4) | 0;
     STACKTOP = i9;
     return i8 | 0;
    }
   } while (0);
   HEAP32[i6 >> 2] = i3;
   if ((FUNCTION_TABLE_iii[i7 & 63](i8, i3) | 0) < 0) {
    i8 = -1;
    STACKTOP = i9;
    return i8 | 0;
   }
   i1 = i8 + 216 | 0;
   if (i2) {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i8 + 220 >> 2] = 0;
    i2 = i3 + 12 | 0;
    HEAP32[i8 + 224 >> 2] = HEAP32[i2 >> 2];
    i1 = i3 + 16 | 0;
    HEAP32[i8 + 228 >> 2] = HEAP32[i1 >> 2];
    _SDL_memset(i8 + 248 | 0, 0, 16) | 0;
    HEAPF32[i8 + 288 >> 2] = Math_fround(1.0);
    HEAPF32[i8 + 292 >> 2] = Math_fround(1.0);
    i3 = 0;
   } else {
    i3 = i8 + 232 | 0;
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
    HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
    i3 = i8 + 248 | 0;
    i7 = i8 + 264 | 0;
    HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
    HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
    i3 = HEAP32[i8 + 284 >> 2] | 0;
    i7 = i8 + 296 | 0;
    i2 = HEAP32[i7 + 4 >> 2] | 0;
    i1 = i8 + 288 | 0;
    HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
    HEAP32[i1 + 4 >> 2] = i2;
    i1 = i8 + 208 | 0;
    i2 = i8 + 204 | 0;
   }
   i7 = HEAP32[i2 >> 2] | 0;
   HEAP32[i8 + 280 >> 2] = i3;
   HEAP32[i8 + 196 >> 2] = i7;
   HEAP32[i8 + 200 >> 2] = HEAP32[i1 >> 2];
   if ((FUNCTION_TABLE_ii[HEAP32[i8 + 48 >> 2] & 255](i8) | 0) < 0) {
    i8 = -1;
    STACKTOP = i9;
    return i8 | 0;
   }
   i8 = (FUNCTION_TABLE_ii[HEAP32[i8 + 52 >> 2] & 255](i8) | 0) >> 31;
   STACKTOP = i9;
   return i8 | 0;
  }
 }
 i8 = _SDL_Error(4) | 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_UnRLESurface(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i13;
 i2 = HEAP32[i5 >> 2] | 0;
 if (!(i2 & 2)) {
  STACKTOP = i13;
  return;
 }
 HEAP32[i5 >> 2] = i2 & -3;
 i12 = i5 + 52 | 0;
 L4 : do if ((i1 | 0) != 0 & (i2 & 1 | 0) == 0) {
  i1 = HEAP32[i12 >> 2] | 0;
  if (HEAP32[i1 + 68 >> 2] & 8192 | 0) {
   i1 = i5 + 12 | 0;
   i11 = _SDL_malloc(Math_imul(HEAP32[i5 + 16 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
   HEAP32[i5 + 20 >> 2] = i11;
   if (i11 | 0) {
    _SDL_FillRect(i5, 0, HEAP32[(HEAP32[i12 >> 2] | 0) + 72 >> 2] | 0) | 0;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
    HEAP32[i3 + 12 >> 2] = HEAP32[i1 >> 2];
    _SDL_RLEBlit(i5, i3, i5, i3) | 0;
    break;
   }
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
   STACKTOP = i13;
   return;
  }
  i11 = HEAP32[i5 + 4 >> 2] | 0;
  i6 = HEAP32[i1 + 12 >> 2] | 0;
  i7 = HEAP32[i5 + 8 >> 2] | 0;
  i4 = (HEAP8[i6 >> 0] | 0) == 2;
  i9 = i4 ? 26 : 25;
  i10 = i4 ? 27 : 25;
  i1 = i5 + 12 | 0;
  i8 = i5 + 16 | 0;
  i2 = _SDL_malloc(Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
  i3 = i5 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  if (!i2) {
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 2;
   STACKTOP = i13;
   return;
  }
  _SDL_memset(i2, 0, Math_imul(HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i1 = i6 + 28 | 0;
  if (i4) i5 = i2; else {
   i5 = i2;
   while (1) {
    i2 = 0;
    while (1) {
     i14 = HEAP16[i1 + 2 >> 1] | 0;
     i3 = i14 & 65535;
     i4 = i1 + 4 | 0;
     i1 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
     if (!(i14 << 16 >> 16)) if (!i1) break L4; else {
      i2 = i1;
      i1 = i4;
     } else {
      i2 = i1 + i3 | 0;
      i1 = i4 + (FUNCTION_TABLE_iiiiii[i9 & 63](i5 + (i1 << 2) | 0, i4, i3, i6, i11) | 0) | 0;
     }
     if ((i2 | 0) >= (i7 | 0)) {
      i2 = 0;
      break;
     }
    }
    do {
     i3 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
     i14 = HEAP16[i1 + 2 >> 1] | 0;
     i4 = i14 & 65535;
     i1 = i1 + 4 | 0;
     if (!(i14 << 16 >> 16)) i2 = i3; else {
      i2 = i3 + i4 | 0;
      i1 = i1 + (FUNCTION_TABLE_iiiiii[i10 & 63](i5 + (i3 << 2) | 0, i1, i4, i6, i11) | 0) | 0;
     }
    } while ((i2 | 0) < (i7 | 0));
    i5 = i5 + (HEAP32[i8 >> 2] >> 2 << 2) | 0;
   }
  }
  while (1) {
   i2 = 0;
   do {
    i14 = HEAP8[i1 + 1 >> 0] | 0;
    i3 = i14 & 255;
    i4 = i1 + 2 | 0;
    i1 = i2 + (HEAPU8[i1 >> 0] | 0) | 0;
    if (!(i14 << 24 >> 24)) if (!i1) break L4; else {
     i2 = i1;
     i1 = i4;
    } else {
     i2 = i1 + i3 | 0;
     i1 = i4 + (FUNCTION_TABLE_iiiiii[i9 & 63](i5 + (i1 << 2) | 0, i4, i3, i6, i11) | 0) | 0;
    }
   } while ((i2 | 0) < (i7 | 0));
   i2 = 0;
   i1 = i1 + (i1 & 2) | 0;
   do {
    i3 = i2 + (HEAPU16[i1 >> 1] | 0) | 0;
    i14 = HEAP16[i1 + 2 >> 1] | 0;
    i4 = i14 & 65535;
    i1 = i1 + 4 | 0;
    if (!(i14 << 16 >> 16)) i2 = i3; else {
     i2 = i3 + i4 | 0;
     i1 = i1 + (FUNCTION_TABLE_iiiiii[i10 & 63](i5 + (i3 << 2) | 0, i1, i4, i6, i11) | 0) | 0;
    }
   } while ((i2 | 0) < (i7 | 0));
   i5 = i5 + (HEAP32[i8 >> 2] >> 2 << 2) | 0;
  }
 } while (0);
 i14 = HEAP32[i12 >> 2] | 0;
 i11 = i14 + 68 | 0;
 HEAP32[i11 >> 2] = HEAP32[i11 >> 2] & -24577;
 _SDL_free(HEAP32[i14 + 12 >> 2] | 0);
 HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = 0;
 STACKTOP = i13;
 return;
}

function _png_set_text_2(i15, i3, i17, i18) {
 i15 = i15 | 0;
 i3 = i3 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i19 = 0;
 i19 = 0;
 if ((i17 | 0) == 0 | ((i15 | 0) == 0 | (i3 | 0) == 0 | (i18 | 0) < 1)) {
  i19 = 0;
  return i19 | 0;
 }
 i5 = i3 + 132 | 0;
 i16 = i3 + 128 | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 do if (((HEAP32[i5 >> 2] | 0) - i1 | 0) < (i18 | 0)) {
  i2 = i1 + i18 | 0;
  i2 = (i2 | 0) < 2147483639 ? i2 + 8 & -8 : 2147483647;
  if ((2147483647 - i1 | 0) >= (i18 | 0)) {
   i4 = i3 + 136 | 0;
   i1 = _png_realloc_array(i15, HEAP32[i4 >> 2] | 0, i1, i2 - i1 | 0, 28) | 0;
   if (i1 | 0) {
    _png_free(i15, HEAP32[i4 >> 2] | 0);
    HEAP32[i4 >> 2] = i1;
    i14 = i3 + 232 | 0;
    HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 16384;
    HEAP32[i5 >> 2] = i2;
    break;
   }
  }
  _png_chunk_report(i15, 63767, 1);
  i19 = 1;
  return i19 | 0;
 } while (0);
 if ((i18 | 0) <= 0) {
  i19 = 0;
  return i19 | 0;
 }
 i11 = i3 + 136 | 0;
 i10 = 0;
 L15 : while (1) {
  i12 = HEAP32[i11 >> 2] | 0;
  i13 = HEAP32[i16 >> 2] | 0;
  i14 = i12 + (i13 * 28 | 0) | 0;
  i7 = i17 + (i10 * 28 | 0) + 4 | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  do if (i1 | 0) {
   i8 = i17 + (i10 * 28 | 0) | 0;
   i4 = HEAP32[i8 >> 2] | 0;
   if ((i4 + 1 | 0) >>> 0 > 3) {
    _png_chunk_report(i15, 63788, 1);
    break;
   }
   i6 = _strlen(i1) | 0;
   if ((i4 | 0) < 1) {
    i2 = 0;
    i3 = 0;
   } else {
    i1 = HEAP32[i17 + (i10 * 28 | 0) + 20 >> 2] | 0;
    if (!i1) i3 = 0; else i3 = _strlen(i1) | 0;
    i1 = HEAP32[i17 + (i10 * 28 | 0) + 24 >> 2] | 0;
    if (!i1) i2 = 0; else i2 = _strlen(i1) | 0;
   }
   i9 = i17 + (i10 * 28 | 0) + 8 | 0;
   i1 = HEAP32[i9 >> 2] | 0;
   if (!i1) i19 = 19; else if (!(HEAP8[i1 >> 0] | 0)) i19 = 19; else {
    i5 = _strlen(i1) | 0;
    HEAP32[i14 >> 2] = i4;
   }
   if ((i19 | 0) == 19) {
    i19 = 0;
    HEAP32[i14 >> 2] = (i4 | 0) > 0 ? 1 : -1;
    i5 = 0;
   }
   i4 = _png_malloc_base(i15, i6 + 4 + i3 + i2 + i5 | 0) | 0;
   i1 = i12 + (i13 * 28 | 0) + 4 | 0;
   HEAP32[i1 >> 2] = i4;
   if (!i4) break L15;
   _memcpy(i4 | 0, HEAP32[i7 >> 2] | 0, i6 | 0) | 0;
   HEAP8[(HEAP32[i1 >> 2] | 0) + i6 >> 0] = 0;
   if ((HEAP32[i8 >> 2] | 0) > 0) {
    i6 = (HEAP32[i1 >> 2] | 0) + i6 + 1 | 0;
    i1 = i12 + (i13 * 28 | 0) | 0;
    i7 = i1 + 20 | 0;
    HEAP32[i7 >> 2] = i6;
    i8 = i17 + (i10 * 28 | 0) | 0;
    _memcpy(i6 | 0, HEAP32[i8 + 20 >> 2] | 0, i3 | 0) | 0;
    HEAP8[(HEAP32[i7 >> 2] | 0) + i3 >> 0] = 0;
    i7 = (HEAP32[i7 >> 2] | 0) + i3 + 1 | 0;
    i1 = i1 + 24 | 0;
    HEAP32[i1 >> 2] = i7;
    _memcpy(i7 | 0, HEAP32[i8 + 24 >> 2] | 0, i2 | 0) | 0;
    HEAP8[(HEAP32[i1 >> 2] | 0) + i2 >> 0] = 0;
   } else {
    i2 = i12 + (i13 * 28 | 0) | 0;
    HEAP32[i2 + 20 >> 2] = 0;
    HEAP32[i2 + 24 >> 2] = 0;
    i2 = i6;
   }
   i1 = (HEAP32[i1 >> 2] | 0) + i2 + 1 | 0;
   i2 = i12 + (i13 * 28 | 0) + 8 | 0;
   HEAP32[i2 >> 2] = i1;
   if (i5) {
    _memcpy(i1 | 0, HEAP32[i9 >> 2] | 0, i5 | 0) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
   }
   HEAP8[i1 + i5 >> 0] = 0;
   i9 = (HEAP32[i14 >> 2] | 0) > 0;
   i14 = i12 + (i13 * 28 | 0) | 0;
   HEAP32[i14 + 12 >> 2] = i9 ? 0 : i5;
   HEAP32[i14 + 16 >> 2] = i9 ? i5 : 0;
   HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 1;
  } while (0);
  i10 = i10 + 1 | 0;
  if ((i10 | 0) >= (i18 | 0)) {
   i1 = 0;
   i19 = 30;
   break;
  }
 }
 if ((i19 | 0) == 30) return i1 | 0;
 _png_chunk_report(i15, 63826, 1);
 i19 = 1;
 return i19 | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i2, i12, i13, i14, i3) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0;
 i15 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 if (!(i3 & 4)) i2 = i10; else {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((i2 - i1 | 0) > 2) if ((HEAP8[i1 >> 0] | 0) == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69) if ((HEAP8[i1 + 2 >> 0] | 0) == -65) HEAP32[i11 >> 2] = i1 + 3;
 }
 i9 = i12;
 L9 : while (1) {
  i1 = HEAP32[i11 >> 2] | 0;
  i3 = i1 >>> 0 < i10 >>> 0;
  if (!i3) {
   i15 = 41;
   break;
  }
  i8 = HEAP32[i13 >> 2] | 0;
  if (i8 >>> 0 >= i12 >>> 0) {
   i15 = 41;
   break;
  }
  i5 = HEAP8[i1 >> 0] | 0;
  i7 = i5 & 255;
  if (i7 >>> 0 > i14 >>> 0) {
   i1 = 2;
   break;
  }
  do if (i5 << 24 >> 24 > -1) {
   HEAP16[i8 >> 1] = i5 & 255;
   i3 = 1;
  } else {
   if ((i5 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i5 & 255) < 224) {
    if ((i2 - i1 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i3 = HEAPU8[i1 + 1 >> 0] | 0;
    if ((i3 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i3 = i3 & 63 | i7 << 6 & 1984;
    if (i3 >>> 0 > i14 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i8 >> 1] = i3;
    i3 = 2;
    break;
   }
   if ((i5 & 255) < 240) {
    if ((i2 - i1 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i4 = HEAP8[i1 + 1 >> 0] | 0;
    i3 = HEAP8[i1 + 2 >> 0] | 0;
    switch (i5 << 24 >> 24) {
    case -32:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i3 = (i4 & 63) << 6 | i7 << 12 | i3 & 63;
    if ((i3 & 65535) >>> 0 > i14 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i8 >> 1] = i3;
    i3 = 3;
    break;
   }
   if ((i5 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i1 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i4 = HEAP8[i1 + 1 >> 0] | 0;
   i3 = HEAP8[i1 + 2 >> 0] | 0;
   i1 = HEAP8[i1 + 3 >> 0] | 0;
   switch (i5 << 24 >> 24) {
   case -16:
    {
     if ((i4 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if ((i4 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i4 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i6 = i3 & 255;
   if ((i6 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i1 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   if ((i9 - i8 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i5 = i7 & 7;
   i3 = i4 & 255;
   i4 = i6 << 6;
   i1 = i1 & 63;
   if ((i3 << 12 & 258048 | i5 << 18 | i4 & 4032 | i1) >>> 0 > i14 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP16[i8 >> 1] = i3 << 2 & 60 | i6 >>> 4 & 3 | ((i3 >>> 4 & 3 | i5 << 2) << 6) + 16320 | 55296;
   i3 = i8 + 2 | 0;
   HEAP32[i13 >> 2] = i3;
   HEAP16[i3 >> 1] = i1 | i4 & 960 | 56320;
   i3 = 4;
   i1 = HEAP32[i11 >> 2] | 0;
  } while (0);
  HEAP32[i11 >> 2] = i1 + i3;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 2;
 }
 if ((i15 | 0) == 41) i1 = i3 & 1;
 return i1 | 0;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i6 = HEAP32[tempDoublePtr >> 2] | 0;
 i8 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i6 | 0, i8 | 0, 52) | 0;
 i3 = i3 & 2047;
 i9 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 i9 = i9 & 2047;
 i13 = i8 & -2147483648;
 i5 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i7 = tempRet0;
 L1 : do if ((i5 | 0) == 0 & (i7 | 0) == 0) i14 = 3; else {
  i4 = ___DOUBLE_BITS_273(d1) | 0;
  i2 = tempRet0 & 2147483647;
  if ((i3 | 0) == 2047 | (i2 >>> 0 > 2146435072 | (i2 | 0) == 2146435072 & i4 >>> 0 > 0)) i14 = 3; else {
   i2 = _bitshift64Shl(i6 | 0, i8 | 0, 1) | 0;
   i4 = tempRet0;
   if (!(i4 >>> 0 > i7 >>> 0 | (i4 | 0) == (i7 | 0) & i2 >>> 0 > i5 >>> 0)) return +((i2 | 0) == (i5 | 0) & (i4 | 0) == (i7 | 0) ? d12 * 0.0 : d12);
   if (!i3) {
    i2 = _bitshift64Shl(i6 | 0, i8 | 0, 12) | 0;
    i4 = tempRet0;
    if ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295) {
     i3 = 0;
     do {
      i3 = i3 + -1 | 0;
      i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
      i4 = tempRet0;
     } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i2 >>> 0 > 4294967295);
    } else i3 = 0;
    i6 = _bitshift64Shl(i6 | 0, i8 | 0, 1 - i3 | 0) | 0;
    i5 = tempRet0;
   } else i5 = i8 & 1048575 | 1048576;
   if (!i9) {
    i4 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
    i7 = tempRet0;
    if ((i7 | 0) > -1 | (i7 | 0) == -1 & i4 >>> 0 > 4294967295) {
     i2 = 0;
     do {
      i2 = i2 + -1 | 0;
      i4 = _bitshift64Shl(i4 | 0, i7 | 0, 1) | 0;
      i7 = tempRet0;
     } while ((i7 | 0) > -1 | (i7 | 0) == -1 & i4 >>> 0 > 4294967295);
    } else i2 = 0;
    i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i2 | 0) | 0;
    i9 = i2;
    i8 = tempRet0;
   } else i8 = i11 & 1048575 | 1048576;
   i4 = _i64Subtract(i6 | 0, i5 | 0, i10 | 0, i8 | 0) | 0;
   i2 = tempRet0;
   i7 = (i2 | 0) > -1 | (i2 | 0) == -1 & i4 >>> 0 > 4294967295;
   L23 : do if ((i3 | 0) > (i9 | 0)) {
    while (1) {
     if (i7) {
      if ((i4 | 0) == 0 & (i2 | 0) == 0) break;
     } else {
      i4 = i6;
      i2 = i5;
     }
     i6 = _bitshift64Shl(i4 | 0, i2 | 0, 1) | 0;
     i5 = tempRet0;
     i3 = i3 + -1 | 0;
     i4 = _i64Subtract(i6 | 0, i5 | 0, i10 | 0, i8 | 0) | 0;
     i2 = tempRet0;
     i7 = (i2 | 0) > -1 | (i2 | 0) == -1 & i4 >>> 0 > 4294967295;
     if ((i3 | 0) <= (i9 | 0)) break L23;
    }
    d1 = d12 * 0.0;
    break L1;
   } while (0);
   if (i7) {
    if ((i4 | 0) == 0 & (i2 | 0) == 0) {
     d1 = d12 * 0.0;
     break;
    }
   } else {
    i2 = i5;
    i4 = i6;
   }
   if (i2 >>> 0 < 1048576 | (i2 | 0) == 1048576 & i4 >>> 0 < 0) do {
    i4 = _bitshift64Shl(i4 | 0, i2 | 0, 1) | 0;
    i2 = tempRet0;
    i3 = i3 + -1 | 0;
   } while (i2 >>> 0 < 1048576 | (i2 | 0) == 1048576 & i4 >>> 0 < 0);
   if ((i3 | 0) > 0) {
    i11 = _i64Add(i4 | 0, i2 | 0, 0, -1048576) | 0;
    i2 = tempRet0;
    i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
    i2 = i2 | tempRet0;
    i3 = i11 | i3;
   } else {
    i3 = _bitshift64Lshr(i4 | 0, i2 | 0, 1 - i3 | 0) | 0;
    i2 = tempRet0;
   }
   HEAP32[tempDoublePtr >> 2] = i3;
   HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function _BlitARGBto565PixelAlpha(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i11 = HEAP32[i2 + 16 >> 2] >> 2;
 i9 = HEAP32[i2 + 36 >> 2] >> 1;
 if (!i3) return;
 i10 = (i1 + 3 | 0) / 4 | 0;
 i8 = i1 & 255;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i8 & 3) {
  case 0:
   {
    i6 = i10;
    i5 = i1;
    i7 = 4;
    break;
   }
  case 3:
   {
    i6 = i10;
    i5 = i1;
    i7 = 9;
    break;
   }
  case 2:
   {
    i6 = i10;
    i5 = i1;
    i7 = 14;
    break;
   }
  case 1:
   {
    i6 = i10;
    i5 = i1;
    i4 = i2;
    i7 = 19;
    break;
   }
  default:
   {
    i7 = 24;
    break L4;
   }
  }
  while (1) if ((i7 | 0) == 4) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 27;
   switch (i4 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 8 & 63488 | i1 >>> 5 & 2016 | i1 >>> 3 & 31;
     i7 = 7;
     break;
    }
   default:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i1 = ((Math_imul((i1 << 11 & 132120576 | i1 >>> 8 & 63488 | i1 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 132184095;
     i1 = i1 >>> 16 | i1;
     i7 = 7;
    }
   }
   if ((i7 | 0) == 7) HEAP16[i2 >> 1] = i1;
   i5 = i5 + 4 | 0;
   i2 = i2 + 2 | 0;
   i7 = 9;
   continue;
  } else if ((i7 | 0) == 9) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 27;
   switch (i4 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 8 & 63488 | i1 >>> 5 & 2016 | i1 >>> 3 & 31;
     i7 = 12;
     break;
    }
   default:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i1 = ((Math_imul((i1 << 11 & 132120576 | i1 >>> 8 & 63488 | i1 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 132184095;
     i1 = i1 >>> 16 | i1;
     i7 = 12;
    }
   }
   if ((i7 | 0) == 12) HEAP16[i2 >> 1] = i1;
   i5 = i5 + 4 | 0;
   i2 = i2 + 2 | 0;
   i7 = 14;
   continue;
  } else if ((i7 | 0) == 14) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 27;
   switch (i4 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 8 & 63488 | i1 >>> 5 & 2016 | i1 >>> 3 & 31;
     i7 = 17;
     break;
    }
   default:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i1 = ((Math_imul((i1 << 11 & 132120576 | i1 >>> 8 & 63488 | i1 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 132184095;
     i1 = i1 >>> 16 | i1;
     i7 = 17;
    }
   }
   if ((i7 | 0) == 17) HEAP16[i2 >> 1] = i1;
   i5 = i5 + 4 | 0;
   i4 = i2 + 2 | 0;
   i7 = 19;
   continue;
  } else if ((i7 | 0) == 19) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = i1 >>> 27;
   switch (i2 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 8 & 63488 | i1 >>> 5 & 2016 | i1 >>> 3 & 31;
     i7 = 22;
     break;
    }
   default:
    {
     i7 = HEAPU16[i4 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 132184095;
     i1 = ((Math_imul((i1 << 11 & 132120576 | i1 >>> 8 & 63488 | i1 >>> 3 & 31) - i7 | 0, i2) | 0) >>> 5) + i7 & 132184095;
     i1 = i1 >>> 16 | i1;
     i7 = 22;
    }
   }
   if ((i7 | 0) == 22) HEAP16[i4 >> 1] = i1;
   i1 = i5 + 4 | 0;
   i2 = i4 + 2 | 0;
   if ((i6 | 0) > 1) {
    i6 = i6 + -1 | 0;
    i5 = i1;
    i7 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i7 = 26;
   break;
  } else {
   i1 = i1 + (i11 << 2) | 0;
   i2 = i2 + (i9 << 1) | 0;
  }
 }
 if ((i7 | 0) != 24) if ((i7 | 0) == 26) return;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i9 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i9 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i9 = i12 & 255;
    i12 = i12 >>> 24;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i9 = i12 & 255;
    i12 = i12 >>> 24;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i10 = i12 & 255;
    i12 = i12 >>> 24;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i30 = HEAPU8[i18 + 60 >> 0] | 0;
 i31 = HEAPU8[i18 + 61 >> 0] | 0;
 i19 = HEAPU8[i18 + 62 >> 0] | 0;
 i20 = HEAPU8[i18 + 63 >> 0] | 0;
 i21 = i18 + 28 | 0;
 i29 = HEAP32[i21 >> 2] | 0;
 i22 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i23 = i18 + 24 | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i29 + -1 | 0;
 HEAP32[i21 >> 2] = i2;
 if (!i29) return;
 i25 = i18 + 20 | 0;
 i26 = i18 + 32 | 0;
 i27 = (i1 & 1 | 0) == 0;
 i28 = (i1 & 2 | 0) == 0;
 i29 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i25 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i10 = i12 & 255;
    i12 = i12 >>> 24;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (!i27) {
     i10 = ((Math_imul(i10, i30) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i31) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
    }
    i32 = ((Math_imul(i12, i20) | 0) >>> 0) / 255 | 0;
    i12 = i28 ? i12 : i32;
    if (i29 & i12 >>> 0 < 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i32 = 255 - i12 | 0;
      i8 = i9 + (((Math_imul(i32, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i32, i7) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i32, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i24 | 0;
    }
   }
   i1 = HEAP32[i21 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i26 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i21 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i22 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i23 >> 2] | 0;
 }
 HEAP32[i25 >> 2] = i3;
 return;
}

function _BlitARGBto555PixelAlpha(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i11 = HEAP32[i2 + 16 >> 2] >> 2;
 i9 = HEAP32[i2 + 36 >> 2] >> 1;
 if (!i3) return;
 i10 = (i1 + 3 | 0) / 4 | 0;
 i8 = i1 & 255;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i8 & 3) {
  case 0:
   {
    i6 = i10;
    i5 = i1;
    i7 = 4;
    break;
   }
  case 3:
   {
    i6 = i10;
    i5 = i1;
    i7 = 9;
    break;
   }
  case 2:
   {
    i6 = i10;
    i5 = i1;
    i7 = 14;
    break;
   }
  case 1:
   {
    i6 = i10;
    i5 = i1;
    i4 = i2;
    i7 = 19;
    break;
   }
  default:
   {
    i7 = 24;
    break L4;
   }
  }
  while (1) if ((i7 | 0) == 4) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 27;
   switch (i4 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 9 & 31744 | i1 >>> 6 & 992 | i1 >>> 3 & 31;
     i7 = 7;
     break;
    }
   default:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 65043487;
     i1 = ((Math_imul((i1 << 10 & 65011712 | i1 >>> 9 & 31744 | i1 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 65043487;
     i1 = i1 >>> 16 | i1;
     i7 = 7;
    }
   }
   if ((i7 | 0) == 7) HEAP16[i2 >> 1] = i1;
   i5 = i5 + 4 | 0;
   i2 = i2 + 2 | 0;
   i7 = 9;
   continue;
  } else if ((i7 | 0) == 9) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 27;
   switch (i4 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 9 & 31744 | i1 >>> 6 & 992 | i1 >>> 3 & 31;
     i7 = 12;
     break;
    }
   default:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 65043487;
     i1 = ((Math_imul((i1 << 10 & 65011712 | i1 >>> 9 & 31744 | i1 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 65043487;
     i1 = i1 >>> 16 | i1;
     i7 = 12;
    }
   }
   if ((i7 | 0) == 12) HEAP16[i2 >> 1] = i1;
   i5 = i5 + 4 | 0;
   i2 = i2 + 2 | 0;
   i7 = 14;
   continue;
  } else if ((i7 | 0) == 14) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i4 = i1 >>> 27;
   switch (i4 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 9 & 31744 | i1 >>> 6 & 992 | i1 >>> 3 & 31;
     i7 = 17;
     break;
    }
   default:
    {
     i7 = HEAPU16[i2 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 65043487;
     i1 = ((Math_imul((i1 << 10 & 65011712 | i1 >>> 9 & 31744 | i1 >>> 3 & 31) - i7 | 0, i4) | 0) >>> 5) + i7 & 65043487;
     i1 = i1 >>> 16 | i1;
     i7 = 17;
    }
   }
   if ((i7 | 0) == 17) HEAP16[i2 >> 1] = i1;
   i5 = i5 + 4 | 0;
   i4 = i2 + 2 | 0;
   i7 = 19;
   continue;
  } else if ((i7 | 0) == 19) {
   i7 = 0;
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = i1 >>> 27;
   switch (i2 & 31) {
   case 0:
    break;
   case 31:
    {
     i1 = i1 >>> 9 & 31744 | i1 >>> 6 & 992 | i1 >>> 3 & 31;
     i7 = 22;
     break;
    }
   default:
    {
     i7 = HEAPU16[i4 >> 1] | 0;
     i7 = (i7 << 16 | i7) & 65043487;
     i1 = ((Math_imul((i1 << 10 & 65011712 | i1 >>> 9 & 31744 | i1 >>> 3 & 31) - i7 | 0, i2) | 0) >>> 5) + i7 & 65043487;
     i1 = i1 >>> 16 | i1;
     i7 = 22;
    }
   }
   if ((i7 | 0) == 22) HEAP16[i4 >> 1] = i1;
   i1 = i5 + 4 | 0;
   i2 = i4 + 2 | 0;
   if ((i6 | 0) > 1) {
    i6 = i6 + -1 | 0;
    i5 = i1;
    i7 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i7 = 26;
   break;
  } else {
   i1 = i1 + (i11 << 2) | 0;
   i2 = i2 + (i9 << 1) | 0;
  }
 }
 if ((i7 | 0) != 24) if ((i7 | 0) == 26) return;
}

function __ZN15PaintController4drawEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, f25 = f0;
 i23 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i16 = i24;
 i4 = i3 + 12 | 0;
 i12 = HEAP32[i4 >> 2] | 0;
 i5 = i3 + 16 | 0;
 i13 = HEAP32[i5 >> 2] | 0;
 _SDL_GetMouseState(i4, i5) | 0;
 if (!((HEAP8[i3 + 8 >> 0] | 0) != 0 & (HEAP32[21388] | 0) < 50)) {
  i23 = HEAP32[19464] | 0;
  _SDL_SetRenderTarget(i23, 0) | 0;
  STACKTOP = i24;
  return;
 }
 i17 = i3 + 24 | 0;
 i19 = 92 - (HEAP32[i17 >> 2] << 1) | 0;
 i18 = i3 + 48 | 0;
 _SDL_SetTextureAlphaMod(HEAP32[i18 >> 2] | 0, (i19 | 0) < 0 ? 3 : i19 & 255) | 0;
 i19 = i3 + 44 | 0;
 i22 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i4 >> 2] | 0) - ~~Math_fround(HEAPF32[i22 + 8 >> 2]) | 0;
 i1 = (HEAP32[i3 + 20 >> 2] | 0) + 12 | 0;
 i21 = (i1 | 0) / -2 | 0;
 HEAP32[i16 >> 2] = i20 + (HEAP32[21387] | 0) + i21;
 i20 = i16 + 4 | 0;
 i22 = (HEAP32[i5 >> 2] | 0) - ~~Math_fround(HEAPF32[i22 + 12 >> 2]) | 0;
 HEAP32[i20 >> 2] = i22 + (HEAP32[21388] | 0) + i21;
 i21 = i16 + 8 | 0;
 HEAP32[i21 >> 2] = i1;
 i22 = i16 + 12 | 0;
 HEAP32[i22 >> 2] = i1;
 i1 = i3 + 11 | 0;
 i2 = HEAP32[i3 + 40 >> 2] | 0;
 if (!(HEAP8[i1 >> 0] | 0)) {
  i1 = HEAP32[i2 + 80 >> 2] | 0;
  if (i1 | 0) {
   i15 = i1 + -1 + (HEAP32[i2 + 76 >> 2] | 0) | 0;
   _SDL_SetRenderTarget(HEAP32[19464] | 0, HEAP32[(HEAP32[(HEAP32[i2 + 64 >> 2] | 0) + (i15 >>> 10 << 2) >> 2] | 0) + ((i15 & 1023) << 2) >> 2] | 0) | 0;
  }
 } else {
  __ZN15CanvasComponent9newCanvasEv(i2);
  HEAP8[i1 >> 0] = 0;
 }
 _SDL_SetRenderDrawColor(HEAP32[19464] | 0, 0, 0, 0, 0) | 0;
 i14 = i3 + 32 | 0;
 i15 = i3 + 33 | 0;
 _SDL_SetTextureColorMod(HEAP32[i18 >> 2] | 0, HEAP8[i14 >> 0] | 0, HEAP8[i15 >> 0] | 0, HEAP8[i3 + 34 >> 0] | 0) | 0;
 _SDL_RenderCopy(HEAP32[19464] | 0, HEAP32[i18 >> 2] | 0, 0, i16) | 0;
 i4 = (HEAP32[i4 >> 2] | 0) - i12 | 0;
 i5 = (HEAP32[i5 >> 2] | 0) - i13 | 0;
 d8 = +(((i5 | 0) > -1 ? i5 : 0 - i5 | 0) + ((i4 | 0) > -1 ? i4 : 0 - i4 | 0) | 0) * .5;
 d9 = +(i4 | 0) / d8;
 d10 = +(i5 | 0) / d8;
 if (d8 > 0.0) {
  d11 = d8 * .5;
  d7 = +(i12 | 0);
  d6 = +(i13 | 0);
  i2 = 0;
  do {
   i1 = ~~(+(92 - (HEAP32[i17 >> 2] << 1) | 0) - d11);
   i1 = (i1 | 0) < 0 ? 3 : i1;
   if ((HEAPU8[i14 >> 0] | 0) > 80) {
    if ((i1 | 0) > 15) i23 = 12;
   } else if ((i1 | 0) > 15 & (HEAPU8[i15 >> 0] | 0) > 80) i23 = 12;
   if ((i23 | 0) == 12) {
    i23 = 0;
    i1 = i1 + 25 | 0;
   }
   _SDL_SetTextureAlphaMod(HEAP32[i18 >> 2] | 0, i1 & 255) | 0;
   d7 = d9 + d7;
   d6 = d10 + d6;
   f25 = Math_fround(~~d7 | 0);
   i13 = HEAP32[i19 >> 2] | 0;
   f25 = Math_fround(f25 - Math_fround(HEAPF32[i13 + 8 >> 2]));
   f25 = Math_fround(f25 - Math_fround((HEAP32[i21 >> 2] | 0) / 2 | 0 | 0));
   HEAP32[i16 >> 2] = ~~Math_fround(f25 + Math_fround(HEAP32[21387] | 0));
   f25 = Math_fround(~~d6 | 0);
   f25 = Math_fround(f25 - Math_fround(HEAPF32[i13 + 12 >> 2]));
   f25 = Math_fround(f25 - Math_fround((HEAP32[i22 >> 2] | 0) / 2 | 0 | 0));
   HEAP32[i20 >> 2] = ~~Math_fround(f25 + Math_fround(HEAP32[21388] | 0));
   _SDL_RenderCopy(HEAP32[19464] | 0, HEAP32[i18 >> 2] | 0, 0, i16) | 0;
   i2 = i2 + 1 | 0;
  } while (d8 > +(i2 | 0));
 }
 i23 = HEAP32[19464] | 0;
 _SDL_SetRenderTarget(i23, 0) | 0;
 STACKTOP = i24;
 return;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate_Blend_Scale(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i2 = HEAP32[i21 + 52 >> 2] | 0;
 i30 = HEAPU8[i21 + 60 >> 0] | 0;
 i31 = HEAPU8[i21 + 61 >> 0] | 0;
 i22 = HEAPU8[i21 + 62 >> 0] | 0;
 i1 = HEAP8[i21 + 63 >> 0] | 0;
 i23 = i21 + 28 | 0;
 i29 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i21 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i25 = i21 + 24 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i26 = (HEAP32[i21 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i29 + -1 | 0;
 HEAP32[i23 >> 2] = i3;
 if (!i29) return;
 i27 = i21 + 20 | 0;
 i28 = i21 + 32 | 0;
 i29 = (i2 & 1 | 0) == 0;
 i19 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i20 = (i2 & 48 | 0) != 0 & (i19 | 0) != 255;
 i18 = i2 & 112;
 i16 = i19 ^ 255;
 i17 = i21 + 12 | 0;
 i2 = HEAP32[i27 >> 2] | 0;
 i5 = 0;
 i6 = 0;
 i15 = i2;
 i1 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i14 = ~i5;
   i14 = i5 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i5 = i5 + -65536 - (i14 & -65536) | 0;
   i14 = i6 + 1 + (i14 >>> 16) | 0;
  } else i14 = i6;
  if (i4) {
   i1 = 0;
   i3 = 65536;
   i6 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i3 | 0) > 65535) {
     i13 = ~i3;
     i13 = i3 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i6 = i6 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i21 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i14) | 0) + (i6 << 2) | 0;
     i3 = i3 + -65536 - (i13 & -65536) | 0;
    }
    i11 = HEAP32[i1 >> 2] | 0;
    i9 = i11 >>> 16 & 255;
    i12 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i13 = HEAP32[i2 >> 2] | 0;
    i7 = i13 >>> 16 & 255;
    i8 = i13 >>> 8 & 255;
    i10 = i13 & 255;
    i13 = i13 >>> 24;
    if (!i29) {
     i9 = ((Math_imul(i9, i30) | 0) >>> 0) / 255 | 0;
     i12 = ((Math_imul(i12, i31) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i22) | 0) >>> 0) / 255 | 0;
    }
    if (i20) {
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i12 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i19) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i13 = (((Math_imul(i13, i16) | 0) >>> 0) / 255 | 0) + i19 | 0;
      i10 = i11 + (((Math_imul(i10, i16) | 0) >>> 0) / 255 | 0) | 0;
      i8 = i12 + (((Math_imul(i8, i16) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i9 + (((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i7 = i9 + i7 | 0;
      i8 = i12 + i8 | 0;
      i10 = i11 + i10 | 0;
      i10 = i10 >>> 0 < 255 ? i10 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    case 64:
     {
      i10 = ((Math_imul(i11, i10) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i8 << 8 | i7 << 16 | i10 | i13 << 24;
    if (!i4) break; else {
     i2 = i2 + 4 | 0;
     i3 = i3 + i26 | 0;
    }
   }
   i1 = HEAP32[i23 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i28 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i23 >> 2] = i2;
  if (!i1) break;
  i5 = i5 + i24 | 0;
  i6 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i4 = HEAP32[i25 >> 2] | 0;
 }
 HEAP32[i27 >> 2] = i3;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate_Blend_Scale(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0;
 i2 = HEAP32[i21 + 52 >> 2] | 0;
 i30 = HEAPU8[i21 + 60 >> 0] | 0;
 i31 = HEAPU8[i21 + 61 >> 0] | 0;
 i22 = HEAPU8[i21 + 62 >> 0] | 0;
 i1 = HEAP8[i21 + 63 >> 0] | 0;
 i23 = i21 + 28 | 0;
 i29 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i21 + 8 >> 2] << 16 | 0) / (i29 | 0) | 0;
 i25 = i21 + 24 | 0;
 i4 = HEAP32[i25 >> 2] | 0;
 i26 = (HEAP32[i21 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i29 + -1 | 0;
 HEAP32[i23 >> 2] = i3;
 if (!i29) return;
 i27 = i21 + 20 | 0;
 i28 = i21 + 32 | 0;
 i29 = (i2 & 1 | 0) == 0;
 i19 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i20 = (i2 & 48 | 0) != 0 & (i19 | 0) != 255;
 i18 = i2 & 112;
 i16 = i19 ^ 255;
 i17 = i21 + 12 | 0;
 i2 = HEAP32[i27 >> 2] | 0;
 i5 = 0;
 i6 = 0;
 i15 = i2;
 i1 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i14 = ~i5;
   i14 = i5 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i5 = i5 + -65536 - (i14 & -65536) | 0;
   i14 = i6 + 1 + (i14 >>> 16) | 0;
  } else i14 = i6;
  if (i4) {
   i1 = 0;
   i3 = 65536;
   i6 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i3 | 0) > 65535) {
     i13 = ~i3;
     i13 = i3 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i6 = i6 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i21 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i14) | 0) + (i6 << 2) | 0;
     i3 = i3 + -65536 - (i13 & -65536) | 0;
    }
    i9 = HEAP32[i1 >> 2] | 0;
    i11 = i9 >>> 16 & 255;
    i12 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i13 = HEAP32[i2 >> 2] | 0;
    i7 = i13 >>> 16 & 255;
    i8 = i13 >>> 8 & 255;
    i10 = i13 & 255;
    i13 = i13 >>> 24;
    if (!i29) {
     i9 = ((Math_imul(i9, i30) | 0) >>> 0) / 255 | 0;
     i12 = ((Math_imul(i12, i31) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i22) | 0) >>> 0) / 255 | 0;
    }
    if (i20) {
     i9 = ((Math_imul(i9, i19) | 0) >>> 0) / 255 | 0;
     i12 = ((Math_imul(i12, i19) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i19) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i13 = (((Math_imul(i13, i16) | 0) >>> 0) / 255 | 0) + i19 | 0;
      i10 = i11 + (((Math_imul(i10, i16) | 0) >>> 0) / 255 | 0) | 0;
      i8 = i12 + (((Math_imul(i8, i16) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i9 + (((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i7 = i9 + i7 | 0;
      i8 = i12 + i8 | 0;
      i10 = i11 + i10 | 0;
      i10 = i10 >>> 0 < 255 ? i10 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    case 64:
     {
      i10 = ((Math_imul(i11, i10) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i9, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i8 << 8 | i7 << 16 | i10 | i13 << 24;
    if (!i4) break; else {
     i2 = i2 + 4 | 0;
     i3 = i3 + i26 | 0;
    }
   }
   i1 = HEAP32[i23 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i28 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i23 >> 2] = i2;
  if (!i1) break;
  i5 = i5 + i24 | 0;
  i6 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i4 = HEAP32[i25 >> 2] | 0;
 }
 HEAP32[i27 >> 2] = i3;
 return;
}

function _adler32(i1, i4, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i7 = 0;
 i2 = i1 >>> 16;
 i1 = i1 & 65535;
 if ((i3 | 0) == 1) {
  i8 = i1 + (HEAPU8[i4 >> 0] | 0) | 0;
  i8 = i8 >>> 0 > 65520 ? i8 + -65521 | 0 : i8;
  i7 = i8 + i2 | 0;
  i8 = (i7 >>> 0 > 65520 ? i7 + 15 | 0 : i7) << 16 | i8;
  return i8 | 0;
 }
 if (!i4) {
  i8 = 1;
  return i8 | 0;
 }
 if (i3 >>> 0 < 16) {
  if (i3) while (1) {
   i3 = i3 + -1 | 0;
   i1 = i1 + (HEAPU8[i4 >> 0] | 0) | 0;
   i2 = i1 + i2 | 0;
   if (!i3) break; else i4 = i4 + 1 | 0;
  }
  i8 = ((i2 >>> 0) % 65521 | 0) << 16 | (i1 >>> 0 > 65520 ? i1 + -65521 | 0 : i1);
  return i8 | 0;
 }
 if (i3 >>> 0 > 5551) {
  do {
   i3 = i3 + -5552 | 0;
   i5 = 347;
   i6 = i4;
   while (1) {
    i22 = i1 + (HEAPU8[i6 >> 0] | 0) | 0;
    i21 = i22 + (HEAPU8[i6 + 1 >> 0] | 0) | 0;
    i20 = i21 + (HEAPU8[i6 + 2 >> 0] | 0) | 0;
    i19 = i20 + (HEAPU8[i6 + 3 >> 0] | 0) | 0;
    i18 = i19 + (HEAPU8[i6 + 4 >> 0] | 0) | 0;
    i17 = i18 + (HEAPU8[i6 + 5 >> 0] | 0) | 0;
    i16 = i17 + (HEAPU8[i6 + 6 >> 0] | 0) | 0;
    i15 = i16 + (HEAPU8[i6 + 7 >> 0] | 0) | 0;
    i14 = i15 + (HEAPU8[i6 + 8 >> 0] | 0) | 0;
    i13 = i14 + (HEAPU8[i6 + 9 >> 0] | 0) | 0;
    i12 = i13 + (HEAPU8[i6 + 10 >> 0] | 0) | 0;
    i11 = i12 + (HEAPU8[i6 + 11 >> 0] | 0) | 0;
    i10 = i11 + (HEAPU8[i6 + 12 >> 0] | 0) | 0;
    i9 = i10 + (HEAPU8[i6 + 13 >> 0] | 0) | 0;
    i8 = i9 + (HEAPU8[i6 + 14 >> 0] | 0) | 0;
    i1 = i8 + (HEAPU8[i6 + 15 >> 0] | 0) | 0;
    i2 = i22 + i2 + i21 + i20 + i19 + i18 + i17 + i16 + i15 + i14 + i13 + i12 + i11 + i10 + i9 + i8 + i1 | 0;
    i5 = i5 + -1 | 0;
    if (!i5) break; else i6 = i6 + 16 | 0;
   }
   i4 = i4 + 5552 | 0;
   i1 = (i1 >>> 0) % 65521 | 0;
   i2 = (i2 >>> 0) % 65521 | 0;
  } while (i3 >>> 0 > 5551);
  if (i3) if (i3 >>> 0 > 15) i7 = 14; else i7 = 17;
 } else i7 = 14;
 if ((i7 | 0) == 14) {
  i6 = i3 + -16 | 0;
  i7 = i6 & -16;
  i8 = i7 + 16 | 0;
  i5 = i4;
  while (1) {
   i3 = i3 + -16 | 0;
   i23 = i1 + (HEAPU8[i5 >> 0] | 0) | 0;
   i9 = i23 + (HEAPU8[i5 + 1 >> 0] | 0) | 0;
   i10 = i9 + (HEAPU8[i5 + 2 >> 0] | 0) | 0;
   i11 = i10 + (HEAPU8[i5 + 3 >> 0] | 0) | 0;
   i12 = i11 + (HEAPU8[i5 + 4 >> 0] | 0) | 0;
   i13 = i12 + (HEAPU8[i5 + 5 >> 0] | 0) | 0;
   i14 = i13 + (HEAPU8[i5 + 6 >> 0] | 0) | 0;
   i15 = i14 + (HEAPU8[i5 + 7 >> 0] | 0) | 0;
   i16 = i15 + (HEAPU8[i5 + 8 >> 0] | 0) | 0;
   i17 = i16 + (HEAPU8[i5 + 9 >> 0] | 0) | 0;
   i18 = i17 + (HEAPU8[i5 + 10 >> 0] | 0) | 0;
   i19 = i18 + (HEAPU8[i5 + 11 >> 0] | 0) | 0;
   i20 = i19 + (HEAPU8[i5 + 12 >> 0] | 0) | 0;
   i21 = i20 + (HEAPU8[i5 + 13 >> 0] | 0) | 0;
   i22 = i21 + (HEAPU8[i5 + 14 >> 0] | 0) | 0;
   i1 = i22 + (HEAPU8[i5 + 15 >> 0] | 0) | 0;
   i2 = i23 + i2 + i9 + i10 + i11 + i12 + i13 + i14 + i15 + i16 + i17 + i18 + i19 + i20 + i21 + i22 + i1 | 0;
   if (i3 >>> 0 <= 15) break; else i5 = i5 + 16 | 0;
  }
  i3 = i6 - i7 | 0;
  if (!i3) i7 = 18; else {
   i4 = i4 + i8 | 0;
   i7 = 17;
  }
 }
 if ((i7 | 0) == 17) while (1) {
  i3 = i3 + -1 | 0;
  i1 = i1 + (HEAPU8[i4 >> 0] | 0) | 0;
  i2 = i1 + i2 | 0;
  if (!i3) {
   i7 = 18;
   break;
  } else {
   i4 = i4 + 1 | 0;
   i7 = 17;
  }
 }
 if ((i7 | 0) == 18) {
  i2 = (i2 >>> 0) % 65521 | 0;
  i1 = (i1 >>> 0) % 65521 | 0;
 }
 i23 = i2 << 16 | i1;
 return i23 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i9 = i6 >>> 24;
     i8 = i6 >>> 16 & 255;
     i7 = i6 >>> 8 & 255;
     i5 = HEAP32[i1 >> 2] | 0;
     i3 = i5 >>> 16 & 255;
     i4 = i5 >>> 8 & 255;
     i5 = i5 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 & 255 ^ 255;
       i5 = i7 + (((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i3, i6) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i6 = i9 >>> 24;
    i8 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i5 = HEAP32[i1 >> 2] | 0;
    i3 = i5 >>> 16 & 255;
    i4 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i3, i9) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i9 = i6 >>> 24;
     i8 = i6 >>> 16 & 255;
     i7 = i6 >>> 8 & 255;
     i3 = HEAP32[i1 >> 2] | 0;
     i5 = i3 >>> 16 & 255;
     i4 = i3 >>> 8 & 255;
     i3 = i3 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 & 255 ^ 255;
       i5 = i7 + (((Math_imul(i5, i6) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i6 = i9 >>> 24;
    i8 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i3 = HEAP32[i1 >> 2] | 0;
    i5 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i7 = i6 >>> 24;
     i8 = i6 >>> 16 & 255;
     i9 = i6 >>> 8 & 255;
     i5 = HEAP32[i1 >> 2] | 0;
     i3 = i5 >>> 16 & 255;
     i4 = i5 >>> 8 & 255;
     i5 = i5 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 & 255 ^ 255;
       i5 = i7 + (((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i3, i6) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i7 = i9 >>> 24;
    i8 = i9 >>> 16 & 255;
    i6 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i5 = HEAP32[i1 >> 2] | 0;
    i3 = i5 >>> 16 & 255;
    i4 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i3, i9) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i7 = i6 >>> 24;
     i8 = i6 >>> 16 & 255;
     i9 = i6 >>> 8 & 255;
     i3 = HEAP32[i1 >> 2] | 0;
     i5 = i3 >>> 16 & 255;
     i4 = i3 >>> 8 & 255;
     i3 = i3 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 & 255 ^ 255;
       i5 = i7 + (((Math_imul(i5, i6) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i7 = i9 >>> 24;
    i8 = i9 >>> 16 & 255;
    i6 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i3 = HEAP32[i1 >> 2] | 0;
    i5 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i9 = i6 >>> 16 & 255;
     i8 = i6 >>> 8 & 255;
     i7 = i6 & 255;
     i5 = HEAP32[i1 >> 2] | 0;
     i3 = i5 >>> 16 & 255;
     i4 = i5 >>> 8 & 255;
     i5 = i5 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 >>> 24 ^ 255;
       i5 = i7 + (((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i3, i6) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i6 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i7 = i9 & 255;
    i9 = i9 >>> 24;
    i5 = HEAP32[i1 >> 2] | 0;
    i3 = i5 >>> 16 & 255;
    i4 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i3, i9) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i9 = i6 >>> 16 & 255;
     i8 = i6 >>> 8 & 255;
     i7 = i6 & 255;
     i3 = HEAP32[i1 >> 2] | 0;
     i5 = i3 >>> 16 & 255;
     i4 = i3 >>> 8 & 255;
     i3 = i3 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 >>> 24 ^ 255;
       i5 = i7 + (((Math_imul(i5, i6) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i6 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i7 = i9 & 255;
    i9 = i9 >>> 24;
    i3 = HEAP32[i1 >> 2] | 0;
    i5 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i7 = i6 >>> 16 & 255;
     i8 = i6 >>> 8 & 255;
     i9 = i6 & 255;
     i5 = HEAP32[i1 >> 2] | 0;
     i3 = i5 >>> 16 & 255;
     i4 = i5 >>> 8 & 255;
     i5 = i5 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 >>> 24 ^ 255;
       i5 = i7 + (((Math_imul(i6, i5) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i3, i6) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i7 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i6 = i9 & 255;
    i9 = i9 >>> 24;
    i5 = HEAP32[i1 >> 2] | 0;
    i3 = i5 >>> 16 & 255;
    i4 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i9, i5) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i3, i9) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i5;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i17 = i14 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i15 = i14 + 32 | 0;
 i16 = (i1 & 48 | 0) == 0;
 i13 = i1 & 112;
 i2 = HEAP32[i14 >> 2] | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i11 = i2;
 i12 = i1;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i3 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i16) {
    i10 = i3;
    while (1) {
     i6 = HEAP32[i2 >> 2] | 0;
     i7 = i6 >>> 16 & 255;
     i8 = i6 >>> 8 & 255;
     i9 = i6 & 255;
     i3 = HEAP32[i1 >> 2] | 0;
     i5 = i3 >>> 16 & 255;
     i4 = i3 >>> 8 & 255;
     i3 = i3 & 255;
     switch (i13 & 127) {
     case 16:
      {
       i6 = i6 >>> 24 ^ 255;
       i5 = i7 + (((Math_imul(i5, i6) | 0) >>> 0) / 255 | 0) | 0;
       i4 = i8 + (((Math_imul(i4, i6) | 0) >>> 0) / 255 | 0) | 0;
       i3 = i9 + (((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0) | 0;
       break;
      }
     case 32:
      {
       i3 = i9 + i3 | 0;
       i4 = i8 + i4 | 0;
       i5 = i7 + i5 | 0;
       i5 = i5 >>> 0 < 255 ? i5 : 255;
       i4 = i4 >>> 0 < 255 ? i4 : 255;
       i3 = i3 >>> 0 < 255 ? i3 : 255;
       break;
      }
     case 64:
      {
       i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
       i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
       i3 = ((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0;
       break;
      }
     default:
      {}
     }
     HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
     if (!i10) break L6; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
      i10 = i10 + -1 | 0;
     }
    }
   } else i10 = i3;
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i7 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i6 = i9 & 255;
    i9 = i9 >>> 24;
    i3 = HEAP32[i1 >> 2] | 0;
    i5 = i3 >>> 16 & 255;
    i4 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if ((i9 | 0) != 255) {
     i6 = ((Math_imul(i6, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i9 = i9 ^ 255;
      i5 = i7 + (((Math_imul(i5, i9) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i8 + (((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i6 + (((Math_imul(i9, i3) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i6 + i3 | 0;
      i4 = i8 + i4 | 0;
      i5 = i7 + i5 | 0;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i5 = ((Math_imul(i7, i5) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i8, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i6, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 | i5 << 16;
    if (!i10) break L6; else {
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
     i10 = i10 + -1 | 0;
    }
   }
  } while (0);
  i2 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i12 + (HEAP32[i15 >> 2] | 0) | 0;
  i12 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i12 + -1;
  if (!i12) break; else {
   i11 = i2;
   i12 = i1;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i2, i11, i12, i13, i14, i10, i1) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i15 = i16;
 i9 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83652) | 0;
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83660) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 127](i15, i5);
 i7 = i15 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i15 + 4 | 0;
 if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, i2, i12, i13) | 0;
  i1 = i13 + (i12 - i2 << 2) | 0;
  HEAP32[i10 >> 2] = i1;
 } else {
  HEAP32[i10 >> 2] = i13;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 63](i9, i1) | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i6;
    i1 = i2 + 1 | 0;
    break;
   }
  default:
   i1 = i2;
  }
  L7 : do if ((i12 - i1 | 0) > 1) if ((HEAP8[i1 >> 0] | 0) == 48) {
   i3 = i1 + 1 | 0;
   switch (HEAP8[i3 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 63](i9, 48) | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i4 + 4;
   HEAP32[i4 >> 2] = i6;
   i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 63](i9, HEAP8[i3 >> 0] | 0) | 0;
   i6 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i6 + 4;
   HEAP32[i6 >> 2] = i4;
   i1 = i1 + 2 | 0;
  } while (0);
  L12 : do if ((i1 | 0) != (i12 | 0)) {
   i3 = i12;
   i4 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L12;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 255](i5) | 0;
  i5 = i1;
  i3 = 0;
  i4 = 0;
  while (1) {
   if (i5 >>> 0 >= i12 >>> 0) break;
   i17 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i15 >> 2] | 0 : i15) + i3 >> 0] | 0;
   if (i17 << 24 >> 24 != 0 & (i4 | 0) == (i17 << 24 >> 24 | 0)) {
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 4;
    HEAP32[i4 >> 2] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 44 >> 2] & 63](i9, HEAP8[i5 >> 0] | 0) | 0;
   i17 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i17 + 4;
   HEAP32[i17 >> 2] = i18;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i1 = i13 + (i1 - i2 << 2) | 0;
  i3 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   while (1) {
    i3 = i3 + -4 | 0;
    if (i1 >>> 0 >= i3 >>> 0) break;
    i18 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i3 >> 2] = i18;
    i1 = i1 + 4 | 0;
   }
   i1 = HEAP32[i10 >> 2] | 0;
  }
 }
 HEAP32[i14 >> 2] = (i11 | 0) == (i12 | 0) ? i1 : i13 + (i11 - i2 << 2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
 STACKTOP = i16;
 return;
}

function _png_handle_sPLT(i10, i11, i7) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i5 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i13;
 i1 = i10 + 756 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 switch (i2 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i10, i7) | 0;
   STACKTOP = i13;
   return;
  }
 default:
  i5 = 3;
 }
 if ((i5 | 0) == 3) {
  i9 = i2 + -1 | 0;
  HEAP32[i1 >> 2] = i9;
  if ((i9 | 0) == 1) {
   _png_warning(i10, 64708);
   _png_crc_finish(i10, i7) | 0;
   STACKTOP = i13;
   return;
  }
 }
 i1 = HEAP32[i10 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i10, 63643);
 if (i1 & 4 | 0) {
  _png_crc_finish(i10, i7) | 0;
  _png_chunk_benign_error(i10, 64026);
  STACKTOP = i13;
  return;
 }
 i3 = i7 + 1 | 0;
 i4 = i10 + 788 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) i5 = 12; else {
  i2 = i10 + 792 | 0;
  if ((HEAP32[i2 >> 2] | 0) >>> 0 < i3 >>> 0) {
   HEAP32[i4 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   _png_free(i10, i1);
   i5 = 12;
  }
 }
 do if ((i5 | 0) == 12) {
  i1 = _png_malloc_base(i10, i3) | 0;
  if (i1 | 0) {
   HEAP32[i4 >> 2] = i1;
   HEAP32[i10 + 792 >> 2] = i3;
   break;
  }
  _png_crc_finish(i10, i7) | 0;
  _png_chunk_benign_error(i10, 63690);
  STACKTOP = i13;
  return;
 } while (0);
 _png_read_data(i10, i1, i7);
 _png_calculate_crc(i10, i1, i7);
 if (_png_crc_finish(i10, 0) | 0) {
  STACKTOP = i13;
  return;
 }
 i3 = i1 + i7 | 0;
 HEAP8[i3 >> 0] = 0;
 i2 = i1;
 while (1) {
  i4 = i2 + 1 | 0;
  if (!(HEAP8[i2 >> 0] | 0)) break; else i2 = i4;
 }
 if (i4 >>> 0 > (i3 + -2 | 0) >>> 0) {
  _png_warning(i10, 64741);
  STACKTOP = i13;
  return;
 }
 i6 = i2 + 2 | 0;
 i9 = HEAP8[i4 >> 0] | 0;
 HEAP8[i12 + 4 >> 0] = i9;
 i9 = i9 << 24 >> 24 == 8;
 i4 = i9 ? 6 : 10;
 i3 = i1 - i6 + i7 | 0;
 if ((i3 >>> 0) % (i4 >>> 0) | 0 | 0) {
  _png_warning(i10, 64762);
  STACKTOP = i13;
  return;
 }
 i2 = (i3 >>> 0) / (i4 >>> 0) | 0;
 if (i2 >>> 0 > 429496729) {
  _png_warning(i10, 64788);
  STACKTOP = i13;
  return;
 }
 i8 = i12 + 12 | 0;
 HEAP32[i8 >> 2] = i2;
 i5 = _png_malloc_warn(i10, i2 * 10 | 0) | 0;
 i7 = i12 + 8 | 0;
 HEAP32[i7 >> 2] = i5;
 if (!i5) {
  _png_warning(i10, 64808);
  STACKTOP = i13;
  return;
 }
 L48 : do if (i4 >>> 0 <= i3 >>> 0) {
  i2 = 0;
  i4 = i6;
  i6 = i5;
  while (1) {
   i3 = i6 + (i2 * 10 | 0) | 0;
   if (i9) {
    HEAP16[i3 >> 1] = HEAPU8[i4 >> 0] | 0;
    i5 = i6 + (i2 * 10 | 0) | 0;
    HEAP16[i5 + 2 >> 1] = HEAPU8[i4 + 1 >> 0] | 0;
    HEAP16[i5 + 4 >> 1] = HEAPU8[i4 + 2 >> 0] | 0;
    i5 = i4 + 4 | 0;
    i3 = HEAPU8[i4 + 3 >> 0] | 0;
   } else {
    HEAP16[i3 >> 1] = HEAPU8[i4 >> 0] << 8 | HEAPU8[i4 + 1 >> 0];
    i5 = i6 + (i2 * 10 | 0) | 0;
    HEAP16[i5 + 2 >> 1] = HEAPU8[i4 + 2 >> 0] << 8 | HEAPU8[i4 + 3 >> 0];
    HEAP16[i5 + 4 >> 1] = HEAPU8[i4 + 4 >> 0] << 8 | HEAPU8[i4 + 5 >> 0];
    i5 = i4 + 8 | 0;
    i3 = (HEAPU8[i4 + 6 >> 0] << 8 | HEAPU8[i4 + 7 >> 0]) & 65535;
   }
   i6 = i6 + (i2 * 10 | 0) | 0;
   HEAP16[i6 + 6 >> 1] = i3;
   HEAP16[i6 + 8 >> 1] = HEAPU8[i5 >> 0] << 8 | HEAPU8[i5 + 1 >> 0];
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (HEAP32[i8 >> 2] | 0)) break L48;
   i4 = i5 + 2 | 0;
   i6 = HEAP32[i7 >> 2] | 0;
  }
 } while (0);
 HEAP32[i12 >> 2] = i1;
 _png_set_sPLT(i10, i11, i12, 1);
 _png_free(i10, HEAP32[i7 >> 2] | 0);
 STACKTOP = i13;
 return;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i2, i11, i12, i13, i14, i10, i1) {
 i2 = i2 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i15 = i16;
 i9 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83620) | 0;
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83636) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 127](i15, i5);
 i7 = i15 + 11 | 0;
 i6 = HEAP8[i7 >> 0] | 0;
 i8 = i15 + 4 | 0;
 if (!((i6 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i6 & 255) | 0)) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 32 >> 2] & 31](i9, i2, i12, i13) | 0;
  i1 = i13 + (i12 - i2) | 0;
  HEAP32[i10 >> 2] = i1;
 } else {
  HEAP32[i10 >> 2] = i13;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 63](i9, i1) | 0;
    i1 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i6;
    i1 = i2 + 1 | 0;
    break;
   }
  default:
   i1 = i2;
  }
  L7 : do if ((i12 - i1 | 0) > 1) if ((HEAP8[i1 >> 0] | 0) == 48) {
   i3 = i1 + 1 | 0;
   switch (HEAP8[i3 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 63](i9, 48) | 0;
   i4 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i6;
   i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 63](i9, HEAP8[i3 >> 0] | 0) | 0;
   i6 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i6 + 1;
   HEAP8[i6 >> 0] = i4;
   i1 = i1 + 2 | 0;
  } while (0);
  L12 : do if ((i1 | 0) != (i12 | 0)) {
   i3 = i12;
   i4 = i1;
   while (1) {
    i3 = i3 + -1 | 0;
    if (i4 >>> 0 >= i3 >>> 0) break L12;
    i6 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i6;
    i4 = i4 + 1 | 0;
   }
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 255](i5) | 0;
  i5 = i1;
  i3 = 0;
  i4 = 0;
  while (1) {
   if (i5 >>> 0 >= i12 >>> 0) break;
   i17 = HEAP8[((HEAP8[i7 >> 0] | 0) < 0 ? HEAP32[i15 >> 2] | 0 : i15) + i3 >> 0] | 0;
   if (i17 << 24 >> 24 != 0 & (i4 | 0) == (i17 << 24 >> 24 | 0)) {
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i6;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i3 + (i3 >>> 0 < ((i4 << 24 >> 24 < 0 ? HEAP32[i8 >> 2] | 0 : i4 & 255) + -1 | 0) >>> 0 & 1) | 0;
    i4 = 0;
   }
   i18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 63](i9, HEAP8[i5 >> 0] | 0) | 0;
   i17 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i17 + 1;
   HEAP8[i17 >> 0] = i18;
   i5 = i5 + 1 | 0;
   i4 = i4 + 1 | 0;
  }
  i1 = i13 + (i1 - i2) | 0;
  i3 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   while (1) {
    i3 = i3 + -1 | 0;
    if (i1 >>> 0 >= i3 >>> 0) break;
    i18 = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i18;
    i1 = i1 + 1 | 0;
   }
   i1 = HEAP32[i10 >> 2] | 0;
  }
 }
 HEAP32[i14 >> 2] = (i11 | 0) == (i12 | 0) ? i1 : i13 + (i11 - i2) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i15);
 STACKTOP = i16;
 return;
}

function _SDL_UpperBlit(i11, i4, i12, i1) {
 i11 = i11 | 0;
 i4 = i4 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i14 + 8 | 0;
 i2 = i14 + 32 | 0;
 i13 = i14 + 16 | 0;
 if (!((i11 | 0) != 0 & (i12 | 0) != 0)) {
  i13 = _SDL_SetError(47607, i14) | 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(HEAP32[i11 + 28 >> 2] | 0)) if (!(HEAP32[i12 + 28 >> 2] | 0)) {
  if (!i1) {
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
   i10 = i2;
  } else i10 = i1;
  if (!i4) {
   i9 = 0;
   i1 = 0;
   i4 = HEAP32[i11 + 12 >> 2] | 0;
   i5 = HEAP32[i11 + 8 >> 2] | 0;
   i6 = i10;
  } else {
   i1 = HEAP32[i4 >> 2] | 0;
   i2 = HEAP32[i4 + 8 >> 2] | 0;
   if ((i1 | 0) < 0) {
    HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) - i1;
    i5 = 0;
    i2 = i2 + i1 | 0;
   } else i5 = i1;
   i6 = (HEAP32[i11 + 8 >> 2] | 0) - i5 | 0;
   i1 = HEAP32[i4 + 4 >> 2] | 0;
   i3 = HEAP32[i4 + 12 >> 2] | 0;
   i4 = i10 + 4 | 0;
   if ((i1 | 0) < 0) {
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) - i1;
    i3 = i3 + i1 | 0;
    i1 = 0;
   }
   i4 = (HEAP32[i11 + 12 >> 2] | 0) - i1 | 0;
   i9 = i5;
   i4 = (i4 | 0) < (i3 | 0) ? i4 : i3;
   i5 = (i6 | 0) < (i2 | 0) ? i6 : i2;
   i6 = i10;
  }
  i8 = i12 + 36 | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  i7 = i2 - i3 | 0;
  if ((i7 | 0) > 0) {
   HEAP32[i6 >> 2] = i2;
   i9 = i7 + i9 | 0;
   i5 = i5 - i7 | 0;
   i3 = i2;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  i8 = i3 + i5 - i2 - (HEAP32[i12 + 44 >> 2] | 0) | 0;
  i8 = i5 - ((i8 | 0) > 0 ? i8 : 0) | 0;
  i7 = i12 + 40 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i5 = i10 + 4 | 0;
  i3 = HEAP32[i5 >> 2] | 0;
  i6 = i2 - i3 | 0;
  if ((i6 | 0) > 0) {
   HEAP32[i5 >> 2] = i2;
   i1 = i6 + i1 | 0;
   i4 = i4 - i6 | 0;
   i3 = i2;
   i2 = HEAP32[i7 >> 2] | 0;
  }
  i2 = i3 + i4 - i2 - (HEAP32[i12 + 48 >> 2] | 0) | 0;
  i2 = i4 - ((i2 | 0) > 0 ? i2 : 0) | 0;
  i6 = i11 + 52 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  i4 = i3 + 68 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if (i5 & 512 | 0) {
   HEAP32[i4 >> 2] = i5 & -513;
   _SDL_InvalidateMap(i3);
  }
  if (!((i8 | 0) > 0 & (i2 | 0) > 0)) {
   HEAP32[i10 + 12 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  HEAP32[i13 >> 2] = i9;
  HEAP32[i13 + 4 >> 2] = i1;
  HEAP32[i10 + 8 >> 2] = i8;
  HEAP32[i13 + 8 >> 2] = i8;
  HEAP32[i10 + 12 >> 2] = i2;
  HEAP32[i13 + 12 >> 2] = i2;
  i1 = HEAP32[i6 >> 2] | 0;
  do if ((HEAP32[i1 >> 2] | 0) == (i12 | 0)) {
   i2 = HEAP32[(HEAP32[i12 + 4 >> 2] | 0) + 4 >> 2] | 0;
   if (i2 | 0) if ((HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
    i2 = 27;
    break;
   }
   i2 = HEAP32[(HEAP32[i11 + 4 >> 2] | 0) + 4 >> 2] | 0;
   if (!i2) i2 = 29; else if ((HEAP32[i1 + 84 >> 2] | 0) == (HEAP32[i2 + 8 >> 2] | 0)) i2 = 29; else i2 = 27;
  } else i2 = 27; while (0);
  if ((i2 | 0) == 27) if ((_SDL_MapSurface(i11, i12) | 0) < 0) i1 = -1; else {
   i1 = HEAP32[i6 >> 2] | 0;
   i2 = 29;
  }
  if ((i2 | 0) == 29) i1 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i11, i13, i12, i10) | 0;
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 i13 = _SDL_SetError(47644, i3) | 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _SDL_PixelFormatEnumToMasks(i5, i1, i6, i7, i8, i9) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i11 + 16 | 0;
 i3 = i11 + 8 | 0;
 i2 = i11;
 L1 : do if ((i5 | 0) == 0 | (i5 & -268435456 | 0) == 268435456) {
  HEAP32[i1 >> 2] = (i5 & 255) >>> 0 < 3 ? i5 >>> 8 & 255 : i5 << 3 & 2040;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  L3 : do if ((i5 | 0) < 390076419) {
   switch (i5 | 0) {
   case 386930691:
    break;
   default:
    break L3;
   }
   HEAP32[i6 >> 2] = 255;
   HEAP32[i7 >> 2] = 65280;
   HEAP32[i8 >> 2] = 16711680;
   i1 = 1;
   break L1;
  } else {
   switch (i5 | 0) {
   case 390076419:
    break;
   default:
    break L3;
   }
   HEAP32[i6 >> 2] = 16711680;
   HEAP32[i7 >> 2] = 65280;
   HEAP32[i8 >> 2] = 255;
   i1 = 1;
   break L1;
  } while (0);
  if (((i5 >>> 24 & 15) + -4 | 0) >>> 0 < 3) {
   switch (i5 >>> 16 & 15) {
   case 1:
    {
     i1 = 3;
     i2 = 28;
     i3 = 224;
     i4 = 0;
     break;
    }
   case 2:
    {
     i1 = 15;
     i2 = 240;
     i3 = 3840;
     i4 = 61440;
     break;
    }
   case 3:
    {
     i1 = 31;
     i2 = 992;
     i3 = 31744;
     i4 = 32768;
     break;
    }
   case 4:
    {
     i1 = 1;
     i2 = 62;
     i3 = 1984;
     i4 = 63488;
     break;
    }
   case 5:
    {
     i1 = 31;
     i2 = 2016;
     i3 = 63488;
     i4 = 0;
     break;
    }
   case 6:
    {
     i1 = 255;
     i2 = 65280;
     i3 = 16711680;
     i4 = -16777216;
     break;
    }
   case 7:
    {
     i1 = 1023;
     i2 = 1047552;
     i3 = 1072693248;
     i4 = -1073741824;
     break;
    }
   case 8:
    {
     i1 = 3;
     i2 = 4092;
     i3 = 4190208;
     i4 = -4194304;
     break;
    }
   default:
    {
     _SDL_SetError(47710, i3) | 0;
     i1 = 0;
     break L1;
    }
   }
   switch (i5 >>> 20 & 15) {
   case 1:
    {
     HEAP32[i6 >> 2] = i3;
     HEAP32[i7 >> 2] = i2;
     HEAP32[i8 >> 2] = i1;
     i1 = 1;
     break L1;
    }
   case 2:
    {
     HEAP32[i6 >> 2] = i4;
     HEAP32[i7 >> 2] = i3;
     HEAP32[i8 >> 2] = i2;
     i1 = 1;
     break L1;
    }
   case 3:
    {
     HEAP32[i9 >> 2] = i4;
     HEAP32[i6 >> 2] = i3;
     HEAP32[i7 >> 2] = i2;
     HEAP32[i8 >> 2] = i1;
     i1 = 1;
     break L1;
    }
   case 4:
    {
     HEAP32[i6 >> 2] = i4;
     HEAP32[i7 >> 2] = i3;
     HEAP32[i8 >> 2] = i2;
     HEAP32[i9 >> 2] = i1;
     i1 = 1;
     break L1;
    }
   case 5:
    {
     HEAP32[i8 >> 2] = i3;
     HEAP32[i7 >> 2] = i2;
     HEAP32[i6 >> 2] = i1;
     i1 = 1;
     break L1;
    }
   case 6:
    {
     HEAP32[i8 >> 2] = i4;
     HEAP32[i7 >> 2] = i3;
     HEAP32[i6 >> 2] = i2;
     i1 = 1;
     break L1;
    }
   case 8:
    {
     HEAP32[i8 >> 2] = i4;
     HEAP32[i7 >> 2] = i3;
     HEAP32[i6 >> 2] = i2;
     HEAP32[i9 >> 2] = i1;
     i1 = 1;
     break L1;
    }
   case 7:
    {
     HEAP32[i9 >> 2] = i4;
     HEAP32[i8 >> 2] = i3;
     HEAP32[i7 >> 2] = i2;
     HEAP32[i6 >> 2] = i1;
     i1 = 1;
     break L1;
    }
   default:
    {
     _SDL_SetError(47710, i10) | 0;
     i1 = 0;
     break L1;
    }
   }
  } else i1 = 1;
 } else {
  _SDL_SetError(41302, i2) | 0;
  i1 = 0;
 } while (0);
 STACKTOP = i11;
 return i1 | 0;
}

function _Blit1to2(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i11 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] | 0;
 i8 = HEAP32[i1 + 48 >> 2] | 0;
 i5 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i3 + 7 | 0) / 8 | 0;
 i7 = i3 & 255;
 if (!(i7 & 7)) {
  i1 = i4;
  i4 = i5;
  while (1) {
   i3 = i9;
   while (1) {
    HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i1 >> 0] | 0) << 1) >> 1] | 0;
    HEAP16[i2 + 2 >> 1] = HEAP16[i8 + ((HEAPU8[i1 + 1 >> 0] | 0) << 1) >> 1] | 0;
    HEAP16[i2 + 4 >> 1] = HEAP16[i8 + ((HEAPU8[i1 + 2 >> 0] | 0) << 1) >> 1] | 0;
    HEAP16[i2 + 6 >> 1] = HEAP16[i8 + ((HEAPU8[i1 + 3 >> 0] | 0) << 1) >> 1] | 0;
    HEAP16[i2 + 8 >> 1] = HEAP16[i8 + ((HEAPU8[i1 + 4 >> 0] | 0) << 1) >> 1] | 0;
    HEAP16[i2 + 10 >> 1] = HEAP16[i8 + ((HEAPU8[i1 + 5 >> 0] | 0) << 1) >> 1] | 0;
    HEAP16[i2 + 12 >> 1] = HEAP16[i8 + ((HEAPU8[i1 + 6 >> 0] | 0) << 1) >> 1] | 0;
    i7 = i1;
    i1 = i1 + 8 | 0;
    HEAP16[i2 + 14 >> 1] = HEAP16[i8 + ((HEAPU8[i7 + 7 >> 0] | 0) << 1) >> 1] | 0;
    i2 = i2 + 16 | 0;
    if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
   }
   if (!i4) break; else {
    i1 = i1 + i11 | 0;
    i2 = i2 + i10 | 0;
    i4 = i4 + -1 | 0;
   }
  }
  return;
 }
 L11 : while (1) {
  switch (i7 & 7) {
  case 1:
   {
    i6 = i9;
    i3 = 14;
    break;
   }
  case 7:
   {
    i1 = i9;
    i3 = 8;
    break;
   }
  case 6:
   {
    i1 = i9;
    i3 = 9;
    break;
   }
  case 5:
   {
    i1 = i9;
    i3 = 10;
    break;
   }
  case 4:
   {
    i1 = i9;
    i3 = 11;
    break;
   }
  case 3:
   {
    i1 = i9;
    i3 = 12;
    break;
   }
  case 2:
   {
    i1 = i9;
    i3 = 13;
    break;
   }
  default:
   {
    i3 = 15;
    break L11;
   }
  }
  while (1) if ((i3 | 0) == 8) {
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 + 2 | 0;
   i3 = 9;
   continue;
  } else if ((i3 | 0) == 9) {
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 + 2 | 0;
   i3 = 10;
   continue;
  } else if ((i3 | 0) == 10) {
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 + 2 | 0;
   i3 = 11;
   continue;
  } else if ((i3 | 0) == 11) {
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 + 2 | 0;
   i3 = 12;
   continue;
  } else if ((i3 | 0) == 12) {
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 + 2 | 0;
   i3 = 13;
   continue;
  } else if ((i3 | 0) == 13) {
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i6 = i1;
   i4 = i4 + 1 | 0;
   i2 = i2 + 2 | 0;
   i3 = 14;
   continue;
  } else if ((i3 | 0) == 14) {
   i1 = i4 + 1 | 0;
   HEAP16[i2 >> 1] = HEAP16[i8 + ((HEAPU8[i4 >> 0] | 0) << 1) >> 1] | 0;
   i3 = i2 + 2 | 0;
   if ((i6 | 0) <= 1) break;
   HEAP16[i3 >> 1] = HEAP16[i8 + ((HEAPU8[i1 >> 0] | 0) << 1) >> 1] | 0;
   i1 = i6 + -1 | 0;
   i4 = i4 + 2 | 0;
   i2 = i2 + 4 | 0;
   i3 = 8;
   continue;
  }
  if (!i5) {
   i3 = 17;
   break;
  } else {
   i4 = i1 + i11 | 0;
   i2 = i3 + i10 | 0;
   i5 = i5 + -1 | 0;
  }
 }
 if ((i3 | 0) != 15) if ((i3 | 0) == 17) return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i12, i14, i6, i2, i15, i8) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0;
 i11 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(432);
 i3 = i18 + 424 | 0;
 i1 = i18 + 24 | 0;
 i17 = i18 + 16 | 0;
 i7 = i18 + 8 | 0;
 i13 = i18;
 i4 = i18 + 428 | 0;
 i9 = i18 + 4 | 0;
 HEAP32[i17 >> 2] = i1;
 i16 = i17 + 4 | 0;
 HEAP32[i16 >> 2] = 372;
 __ZNKSt3__28ios_base6getlocEv(i13, i2);
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i13, 83652) | 0;
 HEAP8[i4 >> 0] = 0;
 i10 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = i10;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
 i9 = i10;
 if (__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i12, i3, i6, i13, i2, i15, i4, i5, i17, i7, i1 + 400 | 0) | 0) {
  i1 = i8 + 8 + 3 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP32[i3 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i3);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP32[i3 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8, i3);
   HEAP8[i1 >> 0] = 0;
  }
  if (HEAP8[i4 >> 0] | 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i8, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 63](i5, 45) | 0);
  i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 44 >> 2] & 63](i5, 48) | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = i2 + -4 | 0;
  i1 = HEAP32[i17 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i3 >>> 0) break;
   if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) break;
   i1 = i1 + 4 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_(i8, i1, i2) | 0;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i12 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i10) i11 = 25; else {
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 255](i9) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i14 >> 2] = 0;
   i11 = 25;
   break;
  } else if (i2) break; else {
   i11 = 27;
   break;
  }
 } while (0);
 if ((i11 | 0) == 25) if (i2) i11 = 27;
 if ((i11 | 0) == 27) HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
 i2 = HEAP32[i12 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i13);
 i1 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 511](i1);
 STACKTOP = i18;
 return i2 | 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i12, i14, i6, i2, i15, i8) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0;
 i11 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i3 = i18 + 24 | 0;
 i1 = i18 + 32 | 0;
 i17 = i18 + 16 | 0;
 i7 = i18 + 8 | 0;
 i13 = i18;
 i4 = i18 + 28 | 0;
 i9 = i18 + 4 | 0;
 HEAP32[i17 >> 2] = i1;
 i16 = i17 + 4 | 0;
 HEAP32[i16 >> 2] = 372;
 __ZNKSt3__28ios_base6getlocEv(i13, i2);
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i13, 83620) | 0;
 HEAP8[i4 >> 0] = 0;
 i10 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = i10;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i3 >> 2] = HEAP32[i9 >> 2];
 i9 = i10;
 if (__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i12, i3, i6, i13, i2, i15, i4, i5, i17, i7, i1 + 100 | 0) | 0) {
  i1 = i8 + 11 | 0;
  if ((HEAP8[i1 >> 0] | 0) < 0) {
   i6 = HEAP32[i8 >> 2] | 0;
   HEAP8[i3 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i6, i3);
   HEAP32[i8 + 4 >> 2] = 0;
  } else {
   HEAP8[i3 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i8, i3);
   HEAP8[i1 >> 0] = 0;
  }
  if (HEAP8[i4 >> 0] | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 45) | 0);
  i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 48) | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = i2 + -1 | 0;
  i1 = HEAP32[i17 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i3 >>> 0) break;
   if ((HEAP8[i1 >> 0] | 0) != i4 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_(i8, i1, i2) | 0;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i12 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i10) i11 = 25; else {
  i1 = HEAP32[i9 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i9 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 36 >> 2] & 255](i9) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i14 >> 2] = 0;
   i11 = 25;
   break;
  } else if (i2) break; else {
   i11 = 27;
   break;
  }
 } while (0);
 if ((i11 | 0) == 25) if (i2) i11 = 27;
 if ((i11 | 0) == 27) HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
 i2 = HEAP32[i12 >> 2] | 0;
 __ZNSt3__26localeD2Ev(i13);
 i1 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i16 >> 2] & 511](i1);
 STACKTOP = i18;
 return i2 | 0;
}

function ___get_locale(i12, i1) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i10 = i13 + 8 | 0;
 i11 = i13;
 do if (!(HEAP8[i1 >> 0] | 0)) {
  i1 = _getenv(72424) | 0;
  if (i1 | 0) if (HEAP8[i1 >> 0] | 0) break;
  i1 = _getenv(72431 + (i12 * 12 | 0) | 0) | 0;
  if (i1 | 0) if (HEAP8[i1 >> 0] | 0) break;
  i1 = _getenv(72503) | 0;
  if (i1 | 0) if (HEAP8[i1 >> 0] | 0) break;
  i1 = 72508;
 } while (0);
 i2 = 0;
 L13 : do {
  switch (HEAP8[i1 + i2 >> 0] | 0) {
  case 47:
  case 0:
   break L13;
  default:
   {}
  }
  i2 = i2 + 1 | 0;
 } while (i2 >>> 0 < 15);
 i3 = HEAP8[i1 >> 0] | 0;
 if (i3 << 24 >> 24 == 46) {
  i1 = 72508;
  i9 = 15;
 } else if (!(HEAP8[i1 + i2 >> 0] | 0)) if (i3 << 24 >> 24 == 67) i9 = 15; else {
  i8 = i1;
  i9 = 16;
 } else {
  i1 = 72508;
  i9 = 15;
 }
 if ((i9 | 0) == 15) if (!(HEAP8[i1 + 1 >> 0] | 0)) i9 = 18; else {
  i8 = i1;
  i9 = 16;
 }
 L22 : do if ((i9 | 0) == 16) if (!(_strcmp(i8, 72508) | 0)) {
  i1 = i8;
  i9 = 18;
 } else if (!(_strcmp(i8, 72516) | 0)) {
  i1 = i8;
  i9 = 18;
 } else {
  i1 = HEAP32[20636] | 0;
  if (i1 | 0) do {
   if (!(_strcmp(i8, i1 + 8 | 0) | 0)) break L22;
   i1 = HEAP32[i1 + 24 >> 2] | 0;
  } while ((i1 | 0) != 0);
  ___lock(82548);
  i1 = HEAP32[20636] | 0;
  L32 : do if (i1 | 0) {
   while (1) {
    if (!(_strcmp(i8, i1 + 8 | 0) | 0)) break;
    i1 = HEAP32[i1 + 24 >> 2] | 0;
    if (!i1) break L32;
   }
   ___unlock(82548);
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[20614] | 0)) {
   i1 = _getenv(72522) | 0;
   if (!i1) i9 = 41; else if (!(HEAP8[i1 >> 0] | 0)) i9 = 41; else {
    i6 = 254 - i2 | 0;
    i7 = i2 + 1 | 0;
    while (1) {
     i5 = ___strchrnul(i1, 58) | 0;
     i3 = HEAP8[i5 >> 0] | 0;
     i4 = i5 - i1 + ((i3 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if (i4 >>> 0 < i6 >>> 0) {
      _memcpy(i10 | 0, i1 | 0, i4 | 0) | 0;
      i3 = i10 + i4 | 0;
      HEAP8[i3 >> 0] = 47;
      _memcpy(i3 + 1 | 0, i8 | 0, i2 | 0) | 0;
      HEAP8[i10 + (i7 + i4) >> 0] = 0;
      i3 = ___map_file(i10 | 0, i11 | 0) | 0;
      if (i3 | 0) break;
      i1 = HEAP8[i5 >> 0] | 0;
     } else i1 = i3;
     i1 = i5 + (i1 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[i1 >> 0] | 0)) {
      i9 = 41;
      break L39;
     }
    }
    i1 = _malloc(28) | 0;
    if (!i1) {
     ___munmap(i3, HEAP32[i11 >> 2] | 0) | 0;
     i9 = 41;
     break;
    } else {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i1 + 4 >> 2] = HEAP32[i11 >> 2];
     i11 = i1 + 8 | 0;
     _memcpy(i11 | 0, i8 | 0, i2 | 0) | 0;
     HEAP8[i11 + i2 >> 0] = 0;
     HEAP32[i1 + 24 >> 2] = HEAP32[20636];
     HEAP32[20636] = i1;
     break;
    }
   }
  } else i9 = 41; while (0);
  if ((i9 | 0) == 41) {
   i1 = _malloc(28) | 0;
   if (i1) {
    HEAP32[i1 >> 2] = HEAP32[6767];
    HEAP32[i1 + 4 >> 2] = HEAP32[6768];
    i11 = i1 + 8 | 0;
    _memcpy(i11 | 0, i8 | 0, i2 | 0) | 0;
    HEAP8[i11 + i2 >> 0] = 0;
    HEAP32[i1 + 24 >> 2] = HEAP32[20636];
    HEAP32[20636] = i1;
   }
  }
  ___unlock(82548);
  i1 = (i12 | 0) == 0 & (i1 | 0) == 0 ? 27068 : i1;
 } while (0);
 do if ((i9 | 0) == 18) {
  if (!i12) if ((HEAP8[i1 + 1 >> 0] | 0) == 46) {
   i1 = 27068;
   break;
  }
  i1 = 0;
 } while (0);
 STACKTOP = i13;
 return i1 | 0;
}

function _GLES2_CacheShader(i1, i12, i2) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i14 = i18 + 24 | 0;
 i17 = i18 + 16 | 0;
 i11 = i18 + 8 | 0;
 i13 = i18 + 32 | 0;
 i15 = i18 + 28 | 0;
 i16 = HEAP32[i1 + 320 >> 2] | 0;
 HEAP32[i13 >> 2] = 0;
 i9 = _GLES2_GetShader(i12, i2) | 0;
 if (!i9) {
  _SDL_SetError(41733, i18) | 0;
  i17 = 0;
  STACKTOP = i18;
  return i17 | 0;
 }
 i10 = HEAP32[i9 >> 2] | 0;
 if ((i10 | 0) > 0) {
  i7 = HEAP32[i16 + 240 >> 2] | 0;
  i8 = i16 + 244 | 0;
  if ((i7 | 0) > 0) {
   i6 = 0;
   do {
    i5 = HEAP32[i9 + 4 + (i6 << 2) >> 2] | 0;
    if (!i5) i5 = 0; else {
     i3 = HEAP32[i5 + 4 >> 2] | 0;
     i4 = HEAP32[i8 >> 2] | 0;
     i2 = 0;
     do {
      i1 = (i3 | 0) == (HEAP32[i4 + (i2 << 2) >> 2] | 0) ? i5 : 0;
      i2 = i2 + 1 | 0;
     } while ((i1 | 0) == 0 & (i2 | 0) < (i7 | 0));
     i5 = i1;
    }
    i6 = i6 + 1 | 0;
    i1 = (i5 | 0) == 0;
   } while (i1 & (i6 | 0) < (i10 | 0));
   if (!i1) {
    i3 = i16 + 252 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    L16 : do if (i1 | 0) {
     while (1) {
      if ((HEAP32[i1 + 8 >> 2] | 0) == (i5 | 0)) break;
      i1 = HEAP32[i1 + 24 >> 2] | 0;
      if (!i1) break L16;
     }
     STACKTOP = i18;
     return i1 | 0;
    } while (0);
    i4 = _SDL_calloc(1, 28) | 0;
    if (!i4) {
     _SDL_Error(0) | 0;
     i17 = 0;
     STACKTOP = i18;
     return i17 | 0;
    }
    HEAP32[i4 + 4 >> 2] = i12;
    HEAP32[i4 + 8 >> 2] = i5;
    i1 = FUNCTION_TABLE_ii[HEAP32[i16 + 52 >> 2] & 255](HEAP32[i5 >> 2] | 0) | 0;
    HEAP32[i4 >> 2] = i1;
    i2 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i2 | 0) == -1) {
     FUNCTION_TABLE_viiii[HEAP32[i16 + 152 >> 2] & 63](i1, 1, i5 + 12 | 0, 0);
     FUNCTION_TABLE_vi[HEAP32[i16 + 44 >> 2] & 511](HEAP32[i4 >> 2] | 0);
     i1 = i16 + 124 | 0;
     FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 63](HEAP32[i4 >> 2] | 0, 35713, i13);
     if (!(HEAP32[i13 >> 2] | 0)) {
      HEAP32[i15 >> 2] = 0;
      FUNCTION_TABLE_viii[HEAP32[i1 >> 2] & 63](HEAP32[i4 >> 2] | 0, 35716, i15);
      i3 = HEAP32[i15 >> 2] | 0;
      if ((i3 | 0) > 0) {
       i1 = i3;
       i2 = STACKTOP;
       STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
       if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
       FUNCTION_TABLE_viiii[HEAP32[i16 + 120 >> 2] & 63](HEAP32[i4 >> 2] | 0, i3, i15, i2);
       HEAP32[i17 >> 2] = i2;
       _SDL_SetError(41854, i17) | 0;
      } else _SDL_SetError(41884, i14) | 0;
      FUNCTION_TABLE_vi[HEAP32[i16 + 60 >> 2] & 511](HEAP32[i4 >> 2] | 0);
      _SDL_free(i4);
      i17 = 0;
      STACKTOP = i18;
      return i17 | 0;
     }
    } else {
     FUNCTION_TABLE_viiiii[HEAP32[i16 + 148 >> 2] & 7](1, i4, i2, HEAP32[i5 + 12 >> 2] | 0, HEAP32[i5 + 8 >> 2] | 0);
     HEAP32[i13 >> 2] = 1;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    if (i1 | 0) {
     HEAP32[i4 + 24 >> 2] = i1;
     HEAP32[i1 + 20 >> 2] = i4;
    }
    HEAP32[i3 >> 2] = i4;
    i17 = i16 + 248 | 0;
    HEAP32[i17 >> 2] = (HEAP32[i17 >> 2] | 0) + 1;
    i17 = i4;
    STACKTOP = i18;
    return i17 | 0;
   }
  }
 }
 _SDL_SetError(41792, i11) | 0;
 i17 = 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _SDL_CalculateBlit(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i13 + 8 | 0;
 i8 = i13;
 i12 = HEAP32[i3 + 52 >> 2] | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if (HEAP32[i3 >> 2] & 2 | 0) _SDL_UnRLESurface(i3, 1);
 HEAP32[i12 + 8 >> 2] = 11;
 i9 = i3 + 4 | 0;
 HEAP32[i12 + 56 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i12 + 28 >> 2] = HEAP32[i3 + 16 >> 2];
 i10 = i1 + 4 | 0;
 HEAP32[i12 + 60 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 48 >> 2] = HEAP32[i1 + 16 >> 2];
 i5 = i12 + 68 | 0;
 if (HEAP32[i5 >> 2] & 4096 | 0) if (!(_SDL_RLESurface(i3) | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (!(HEAP32[i12 + 4 >> 2] | 0)) i4 = 7; else if (!(HEAP32[i5 >> 2] & -4097)) i1 = 287; else i4 = 7;
 L10 : do if ((i4 | 0) == 7) {
  i1 = HEAP32[i9 >> 2] | 0;
  if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) {
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) if (((i2 >>> 24 & 15) + -1 | 0) >>> 0 < 3) i1 = _SDL_CalculateBlit0(i3) | 0; else i4 = 11; else i4 = 11;
  } else i4 = 11;
  do if ((i4 | 0) == 11) {
   if ((HEAP8[i1 + 9 >> 0] | 0) == 1) {
    i1 = HEAP32[i1 >> 2] | 0;
    if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) if (((i1 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
     i1 = _SDL_CalculateBlit1(i3) | 0;
     break;
    }
   }
   if (!(HEAP32[i5 >> 2] & 16)) {
    i1 = _SDL_CalculateBlitN(i3) | 0;
    break;
   } else {
    i1 = _SDL_CalculateBlitA(i3) | 0;
    break;
   }
  } while (0);
  if (!i1) {
   i6 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
   i7 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   do if ((HEAP32[795] | 0) == -1) {
    i1 = _SDL_getenv(40510) | 0;
    HEAP32[795] = 0;
    if (i1 | 0) {
     HEAP32[i8 >> 2] = 3180;
     _SDL_sscanf(i1, 40532, i8) | 0;
     break;
    }
    if (_SDL_HasMMX() | 0) HEAP32[795] = HEAP32[795] | 1;
    if (_SDL_Has3DNow() | 0) HEAP32[795] = HEAP32[795] | 2;
    if (_SDL_HasSSE() | 0) HEAP32[795] = HEAP32[795] | 4;
    if (_SDL_HasSSE2() | 0) HEAP32[795] = HEAP32[795] | 8;
    if (_SDL_HasAltiVec() | 0) HEAP32[795] = HEAP32[795] | 16;
   } while (0);
   if (29) {
    i4 = HEAP32[795] | 0;
    i3 = i2 & 883;
    i2 = 0;
    i1 = 29;
    do {
     if ((HEAP32[3184 + (i2 * 20 | 0) >> 2] | 0) == (i6 | 0)) if ((HEAP32[3184 + (i2 * 20 | 0) + 4 >> 2] | 0) == (i7 | 0)) if ((HEAP32[3184 + (i2 * 20 | 0) + 8 >> 2] & i3 | 0) == (i3 | 0)) {
      i8 = HEAP32[3184 + (i2 * 20 | 0) + 12 >> 2] | 0;
      if ((i8 & i4 | 0) == (i8 | 0)) break L10;
     }
     i2 = i2 + 1 | 0;
     i1 = HEAP32[3184 + (i2 * 20 | 0) + 16 >> 2] | 0;
    } while ((i1 | 0) != 0);
   }
   i2 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
   i1 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
   if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) if (((i2 >>> 24 & 15) + -1 | 0) >>> 0 >= 3) if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) if (((i1 >>> 24 & 15) + -1 | 0) >>> 0 >= 3) {
    HEAP32[i12 + 12 >> 2] = 286;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   HEAP32[i12 + 12 >> 2] = 0;
   _SDL_InvalidateMap(i12);
   i12 = _SDL_SetError(40535, i11) | 0;
   STACKTOP = i13;
   return i12 | 0;
  }
 } while (0);
 HEAP32[i12 + 12 >> 2] = i1;
 i12 = 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _png_read_start_row(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 _png_init_read_transformations(i7);
 i6 = i7 + 432 | 0;
 if (!(HEAP8[i6 >> 0] | 0)) {
  i5 = HEAP32[i7 + 348 >> 2] | 0;
  i3 = i7 + 216 | 0;
  i4 = i3;
  i1 = HEAP32[i7 + 352 >> 2] | 0;
  i2 = i5;
  i3 = HEAP32[i3 >> 2] | 0;
 } else {
  i4 = i7 + 216 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i7 + 352 >> 2] | 0;
  i5 = HEAP32[i7 + 348 >> 2] | 0;
  i8 = HEAPU8[i7 + 433 >> 0] | 0;
  i2 = HEAPU8[65860 + i8 >> 0] | 0;
  i1 = (i3 & 2 | 0) == 0 ? (i1 + 7 | 0) >>> 3 : i1;
  i2 = ((i5 + -1 + i2 - (HEAPU8[65867 + i8 >> 0] | 0) | 0) >>> 0) / (i2 >>> 0) | 0;
 }
 HEAP32[i7 + 356 >> 2] = i1;
 HEAP32[i7 + 368 >> 2] = i2;
 i1 = HEAPU8[i7 + 438 >> 0] | 0;
 if (i3 & 4) i1 = (HEAPU8[i7 + 436 >> 0] | 0) < 8 ? 8 : i1;
 i3 = HEAP32[i4 >> 2] | 0;
 i2 = (i3 & 4096 | 0) == 0;
 L8 : do if (!i2) switch (HEAP8[i7 + 435 >> 0] | 0) {
 case 3:
  {
   i1 = (HEAP16[i7 + 428 >> 1] | 0) == 0 ? 24 : 32;
   break L8;
  }
 case 0:
  {
   i1 = (i1 >>> 0 > 8 ? i1 : 8) << ((HEAP16[i7 + 428 >> 1] | 0) != 0 & 1);
   break L8;
  }
 case 2:
  {
   if (!(HEAP16[i7 + 428 >> 1] | 0)) break L8;
   i1 = (i1 << 2 >>> 0) / 3 | 0;
   break L8;
  }
 default:
  break L8;
 } while (0);
 do if (i3 & 512) if (i2) {
  i3 = i3 & -513;
  HEAP32[i4 >> 2] = i3;
  break;
 } else {
  i1 = i1 << ((HEAPU8[i7 + 436 >> 0] | 0) < 16 & 1);
  break;
 } while (0);
 i2 = (i3 & 32768 | 0) == 0;
 L22 : do if (!i2) switch (HEAP8[i7 + 435 >> 0] | 0) {
 case 0:
  {
   i1 = (i1 | 0) < 9 ? 16 : 32;
   break L22;
  }
 case 3:
 case 2:
  {
   i1 = (i1 | 0) < 33 ? 32 : 64;
   break L22;
  }
 default:
  break L22;
 } while (0);
 do if (i3 & 16384) {
  if (i2 & ((i3 & 4096 | 0) == 0 | (HEAP16[i7 + 428 >> 1] | 0) == 0)) {
   i2 = HEAP8[i7 + 435 >> 0] | 0;
   if (i2 << 24 >> 24 != 4) {
    i2 = i2 << 24 >> 24 == 6;
    if ((i1 | 0) < 9) {
     i1 = i2 ? 32 : 24;
     break;
    } else {
     i1 = i2 ? 64 : 48;
     break;
    }
   }
  }
  i1 = (i1 | 0) < 17 ? 32 : 64;
 } while (0);
 if (i3 & 1048576) {
  i8 = Math_imul(HEAPU8[i7 + 205 >> 0] | 0, HEAPU8[i7 + 204 >> 0] | 0) | 0;
  i1 = (i8 | 0) > (i1 | 0) ? i8 : i1;
 }
 HEAP8[i7 + 442 >> 0] = i1;
 HEAP8[i7 + 443 >> 0] = 0;
 i2 = i5 + 7 & -8;
 i3 = Math_imul(i2, i1 >>> 3) | 0;
 i2 = (Math_imul(i2, i1) | 0) >>> 3;
 i2 = (i1 + 7 >> 3) + 49 + ((i1 | 0) > 7 ? i3 : i2) | 0;
 i3 = i7 + 784 | 0;
 if (i2 >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  i4 = i7 + 728 | 0;
  _png_free(i7, HEAP32[i4 >> 2] | 0);
  i5 = i7 + 804 | 0;
  _png_free(i7, HEAP32[i5 >> 2] | 0);
  if (!(HEAP8[i6 >> 0] | 0)) i1 = _png_malloc(i7, i2) | 0; else i1 = _png_calloc(i7, i2) | 0;
  HEAP32[i4 >> 2] = i1;
  i8 = _png_malloc(i7, i2) | 0;
  HEAP32[i5 >> 2] = i8;
  i6 = (HEAP32[i4 >> 2] | 0) + 32 | 0;
  HEAP32[i7 + 384 >> 2] = i6 + (0 - (i6 & 15)) + -1;
  i8 = i8 + 32 | 0;
  HEAP32[i7 + 380 >> 2] = i8 + (0 - (i8 & 15)) + -1;
  HEAP32[i3 >> 2] = i2;
 }
 i1 = HEAP32[i7 + 364 >> 2] | 0;
 if ((i1 | 0) == -1) _png_error(i7, 65874);
 _memset(HEAP32[i7 + 380 >> 2] | 0, 0, i1 + 1 | 0) | 0;
 i1 = i7 + 788 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  HEAP32[i7 + 792 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  _png_free(i7, i2);
 }
 if (!(_png_inflate_claim(i7, 1229209940) | 0)) {
  i8 = i7 + 212 | 0;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 64;
  return;
 } else _png_error(i7, HEAP32[i7 + 248 >> 2] | 0);
}

function _Blit1to4(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i3 = HEAP32[i1 + 24 >> 2] | 0;
 i9 = HEAP32[i1 + 28 >> 2] | 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i11 = HEAP32[i1 + 16 >> 2] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = (HEAP32[i1 + 36 >> 2] | 0) / 4 | 0;
 i8 = HEAP32[i1 + 48 >> 2] | 0;
 i5 = i9 + -1 | 0;
 if (!i9) return;
 i9 = (i3 + 7 | 0) / 8 | 0;
 i7 = i3 & 255;
 if (!(i7 & 7)) {
  i1 = i4;
  i4 = i5;
  while (1) {
   i3 = i9;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i1 >> 0] | 0) << 2) >> 2];
    HEAP32[i2 + 4 >> 2] = HEAP32[i8 + ((HEAPU8[i1 + 1 >> 0] | 0) << 2) >> 2];
    HEAP32[i2 + 8 >> 2] = HEAP32[i8 + ((HEAPU8[i1 + 2 >> 0] | 0) << 2) >> 2];
    HEAP32[i2 + 12 >> 2] = HEAP32[i8 + ((HEAPU8[i1 + 3 >> 0] | 0) << 2) >> 2];
    HEAP32[i2 + 16 >> 2] = HEAP32[i8 + ((HEAPU8[i1 + 4 >> 0] | 0) << 2) >> 2];
    HEAP32[i2 + 20 >> 2] = HEAP32[i8 + ((HEAPU8[i1 + 5 >> 0] | 0) << 2) >> 2];
    HEAP32[i2 + 24 >> 2] = HEAP32[i8 + ((HEAPU8[i1 + 6 >> 0] | 0) << 2) >> 2];
    i6 = i1;
    i1 = i1 + 8 | 0;
    i7 = i2;
    i2 = i2 + 32 | 0;
    HEAP32[i7 + 28 >> 2] = HEAP32[i8 + ((HEAPU8[i6 + 7 >> 0] | 0) << 2) >> 2];
    if ((i3 | 0) <= 1) break; else i3 = i3 + -1 | 0;
   }
   if (!i4) break; else {
    i1 = i1 + i11 | 0;
    i2 = i2 + (i10 << 2) | 0;
    i4 = i4 + -1 | 0;
   }
  }
  return;
 }
 L11 : while (1) {
  switch (i7 & 7) {
  case 1:
   {
    i6 = i9;
    i3 = 14;
    break;
   }
  case 7:
   {
    i1 = i9;
    i3 = 8;
    break;
   }
  case 6:
   {
    i1 = i9;
    i3 = 9;
    break;
   }
  case 5:
   {
    i1 = i9;
    i3 = 10;
    break;
   }
  case 4:
   {
    i1 = i9;
    i3 = 11;
    break;
   }
  case 3:
   {
    i1 = i9;
    i3 = 12;
    break;
   }
  case 2:
   {
    i1 = i9;
    i3 = 13;
    break;
   }
  default:
   {
    i3 = 15;
    break L11;
   }
  }
  while (1) if ((i3 | 0) == 8) {
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   i3 = 9;
   continue;
  } else if ((i3 | 0) == 9) {
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   i3 = 10;
   continue;
  } else if ((i3 | 0) == 10) {
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   i3 = 11;
   continue;
  } else if ((i3 | 0) == 11) {
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   i3 = 12;
   continue;
  } else if ((i3 | 0) == 12) {
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   i3 = 13;
   continue;
  } else if ((i3 | 0) == 13) {
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   i6 = i1;
   i4 = i4 + 1 | 0;
   i2 = i2 + 4 | 0;
   i3 = 14;
   continue;
  } else if ((i3 | 0) == 14) {
   i1 = i4 + 1 | 0;
   i3 = i2 + 4 | 0;
   HEAP32[i2 >> 2] = HEAP32[i8 + ((HEAPU8[i4 >> 0] | 0) << 2) >> 2];
   if ((i6 | 0) <= 1) break;
   HEAP32[i3 >> 2] = HEAP32[i8 + ((HEAPU8[i1 >> 0] | 0) << 2) >> 2];
   i1 = i6 + -1 | 0;
   i4 = i4 + 2 | 0;
   i2 = i2 + 8 | 0;
   i3 = 8;
   continue;
  }
  if (!i5) {
   i3 = 17;
   break;
  } else {
   i4 = i1 + i11 | 0;
   i2 = i3 + (i10 << 2) | 0;
   i5 = i5 + -1 | 0;
  }
 }
 if ((i3 | 0) != 15) if ((i3 | 0) == 17) return;
}

function _SDL_Blit_BGR888_RGB888_Modulate_Blend_Scale(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = HEAP32[i20 + 52 >> 2] | 0;
 i29 = HEAPU8[i20 + 60 >> 0] | 0;
 i30 = HEAPU8[i20 + 61 >> 0] | 0;
 i21 = HEAPU8[i20 + 62 >> 0] | 0;
 i1 = HEAP8[i20 + 63 >> 0] | 0;
 i22 = i20 + 28 | 0;
 i28 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i20 + 8 >> 2] << 16 | 0) / (i28 | 0) | 0;
 i24 = i20 + 24 | 0;
 i4 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i20 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i28 + -1 | 0;
 HEAP32[i22 >> 2] = i3;
 if (!i28) return;
 i26 = i20 + 20 | 0;
 i27 = i20 + 32 | 0;
 i28 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i17 = i2 & 112;
 i15 = i18 ^ 255;
 i16 = i20 + 12 | 0;
 i2 = HEAP32[i26 >> 2] | 0;
 i5 = 0;
 i6 = 0;
 i14 = i2;
 i1 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i13 = ~i5;
   i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i5 = i5 + -65536 - (i13 & -65536) | 0;
   i13 = i6 + 1 + (i13 >>> 16) | 0;
  } else i13 = i6;
  if (i4) {
   i1 = 0;
   i3 = 65536;
   i6 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i3 | 0) > 65535) {
     i12 = ~i3;
     i12 = i3 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i20 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i13) | 0) + (i6 << 2) | 0;
     i3 = i3 + -65536 - (i12 & -65536) | 0;
    }
    i10 = HEAP32[i1 >> 2] | 0;
    i9 = i10 >>> 16 & 255;
    i11 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i12 = HEAP32[i2 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    if (!i28) {
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i30) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i9 = i9 + (((Math_imul(i12, i15) | 0) >>> 0) / 255 | 0) | 0;
      i8 = i11 + (((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i10 + (((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i7 = i10 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i9 + i12 | 0;
      i9 = i9 >>> 0 < 255 ? i9 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i10, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i12;
    }
    HEAP32[i2 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i4) break; else {
     i2 = i2 + 4 | 0;
     i3 = i3 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i14 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i5 = i5 + i23 | 0;
  i6 = i13;
  i14 = i3;
  i1 = i2;
  i2 = i3;
  i4 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _SDL_Blit_RGB888_RGB888_Modulate_Blend_Scale(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = HEAP32[i20 + 52 >> 2] | 0;
 i29 = HEAPU8[i20 + 60 >> 0] | 0;
 i30 = HEAPU8[i20 + 61 >> 0] | 0;
 i21 = HEAPU8[i20 + 62 >> 0] | 0;
 i1 = HEAP8[i20 + 63 >> 0] | 0;
 i22 = i20 + 28 | 0;
 i28 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i20 + 8 >> 2] << 16 | 0) / (i28 | 0) | 0;
 i24 = i20 + 24 | 0;
 i4 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i20 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i28 + -1 | 0;
 HEAP32[i22 >> 2] = i3;
 if (!i28) return;
 i26 = i20 + 20 | 0;
 i27 = i20 + 32 | 0;
 i28 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i17 = i2 & 112;
 i15 = i18 ^ 255;
 i16 = i20 + 12 | 0;
 i2 = HEAP32[i26 >> 2] | 0;
 i5 = 0;
 i6 = 0;
 i14 = i2;
 i1 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i13 = ~i5;
   i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i5 = i5 + -65536 - (i13 & -65536) | 0;
   i13 = i6 + 1 + (i13 >>> 16) | 0;
  } else i13 = i6;
  if (i4) {
   i1 = 0;
   i3 = 65536;
   i6 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i3 | 0) > 65535) {
     i12 = ~i3;
     i12 = i3 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i20 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i13) | 0) + (i6 << 2) | 0;
     i3 = i3 + -65536 - (i12 & -65536) | 0;
    }
    i9 = HEAP32[i1 >> 2] | 0;
    i10 = i9 >>> 16 & 255;
    i11 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i12 = HEAP32[i2 >> 2] | 0;
    i7 = i12 >>> 16 & 255;
    i8 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    if (!i28) {
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i30) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i9 = i9 + (((Math_imul(i12, i15) | 0) >>> 0) / 255 | 0) | 0;
      i8 = i11 + (((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i10 + (((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i7 = i10 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i9 + i12 | 0;
      i9 = i9 >>> 0 < 255 ? i9 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i10, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i12;
    }
    HEAP32[i2 >> 2] = i8 << 8 | i7 << 16 | i9;
    if (!i4) break; else {
     i2 = i2 + 4 | 0;
     i3 = i3 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i14 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i5 = i5 + i23 | 0;
  i6 = i13;
  i14 = i3;
  i1 = i2;
  i2 = i3;
  i4 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate_Blend_Scale(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = HEAP32[i20 + 52 >> 2] | 0;
 i29 = HEAPU8[i20 + 60 >> 0] | 0;
 i30 = HEAPU8[i20 + 61 >> 0] | 0;
 i21 = HEAPU8[i20 + 62 >> 0] | 0;
 i1 = HEAP8[i20 + 63 >> 0] | 0;
 i22 = i20 + 28 | 0;
 i28 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i20 + 8 >> 2] << 16 | 0) / (i28 | 0) | 0;
 i24 = i20 + 24 | 0;
 i4 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i20 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i28 + -1 | 0;
 HEAP32[i22 >> 2] = i3;
 if (!i28) return;
 i26 = i20 + 20 | 0;
 i27 = i20 + 32 | 0;
 i28 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i17 = i2 & 112;
 i15 = i18 ^ 255;
 i16 = i20 + 12 | 0;
 i2 = HEAP32[i26 >> 2] | 0;
 i5 = 0;
 i6 = 0;
 i14 = i2;
 i1 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i13 = ~i5;
   i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i5 = i5 + -65536 - (i13 & -65536) | 0;
   i13 = i6 + 1 + (i13 >>> 16) | 0;
  } else i13 = i6;
  if (i4) {
   i1 = 0;
   i3 = 65536;
   i6 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i3 | 0) > 65535) {
     i12 = ~i3;
     i12 = i3 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i20 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i13) | 0) + (i6 << 2) | 0;
     i3 = i3 + -65536 - (i12 & -65536) | 0;
    }
    i10 = HEAP32[i1 >> 2] | 0;
    i9 = i10 >>> 16 & 255;
    i11 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i7 = HEAP32[i2 >> 2] | 0;
    i12 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i28) {
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i30) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i9 = i9 + (((Math_imul(i12, i15) | 0) >>> 0) / 255 | 0) | 0;
      i8 = i11 + (((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i10 + (((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i7 = i10 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i9 + i12 | 0;
      i9 = i9 >>> 0 < 255 ? i9 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i10, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i12;
    }
    HEAP32[i2 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i4) break; else {
     i2 = i2 + 4 | 0;
     i3 = i3 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i14 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i5 = i5 + i23 | 0;
  i6 = i13;
  i14 = i3;
  i1 = i2;
  i2 = i3;
  i4 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate_Blend_Scale(i20) {
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i2 = HEAP32[i20 + 52 >> 2] | 0;
 i29 = HEAPU8[i20 + 60 >> 0] | 0;
 i30 = HEAPU8[i20 + 61 >> 0] | 0;
 i21 = HEAPU8[i20 + 62 >> 0] | 0;
 i1 = HEAP8[i20 + 63 >> 0] | 0;
 i22 = i20 + 28 | 0;
 i28 = HEAP32[i22 >> 2] | 0;
 i23 = (HEAP32[i20 + 8 >> 2] << 16 | 0) / (i28 | 0) | 0;
 i24 = i20 + 24 | 0;
 i4 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i20 + 4 >> 2] << 16 | 0) / (i4 | 0) | 0;
 i3 = i28 + -1 | 0;
 HEAP32[i22 >> 2] = i3;
 if (!i28) return;
 i26 = i20 + 20 | 0;
 i27 = i20 + 32 | 0;
 i28 = (i2 & 1 | 0) == 0;
 i18 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i19 = (i2 & 48 | 0) != 0 & (i18 | 0) != 255;
 i17 = i2 & 112;
 i15 = i18 ^ 255;
 i16 = i20 + 12 | 0;
 i2 = HEAP32[i26 >> 2] | 0;
 i5 = 0;
 i6 = 0;
 i14 = i2;
 i1 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i13 = ~i5;
   i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i5 = i5 + -65536 - (i13 & -65536) | 0;
   i13 = i6 + 1 + (i13 >>> 16) | 0;
  } else i13 = i6;
  if (i4) {
   i1 = 0;
   i3 = 65536;
   i6 = -1;
   while (1) {
    i4 = i4 + -1 | 0;
    if ((i3 | 0) > 65535) {
     i12 = ~i3;
     i12 = i3 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i20 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i13) | 0) + (i6 << 2) | 0;
     i3 = i3 + -65536 - (i12 & -65536) | 0;
    }
    i9 = HEAP32[i1 >> 2] | 0;
    i10 = i9 >>> 16 & 255;
    i11 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i7 = HEAP32[i2 >> 2] | 0;
    i12 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    if (!i28) {
     i10 = ((Math_imul(i10, i29) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i30) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i21) | 0) >>> 0) / 255 | 0;
    }
    if (i19) {
     i10 = ((Math_imul(i10, i18) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i18) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i18) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i9 = i9 + (((Math_imul(i12, i15) | 0) >>> 0) / 255 | 0) | 0;
      i8 = i11 + (((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i10 + (((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i7 = i10 + i7 | 0;
      i8 = i11 + i8 | 0;
      i9 = i9 + i12 | 0;
      i9 = i9 >>> 0 < 255 ? i9 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    case 64:
     {
      i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i11, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i10, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i9 = i12;
    }
    HEAP32[i2 >> 2] = i8 << 8 | i7 | i9 << 16;
    if (!i4) break; else {
     i2 = i2 + 4 | 0;
     i3 = i3 + i25 | 0;
    }
   }
   i1 = HEAP32[i22 >> 2] | 0;
  }
  i3 = i14 + (HEAP32[i27 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i22 >> 2] = i2;
  if (!i1) break;
  i5 = i5 + i23 | 0;
  i6 = i13;
  i14 = i3;
  i1 = i2;
  i2 = i3;
  i4 = HEAP32[i24 >> 2] | 0;
 }
 HEAP32[i26 >> 2] = i3;
 return;
}
function _SDL_PrivateSendMouseButton(i14, i11, i15, i12, i2) {
 i14 = i14 | 0;
 i11 = i11 | 0;
 i15 = i15 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i16 = 0;
 i8 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i16;
 i3 = HEAP32[19509] | 0;
 switch (i15 << 24 >> 24) {
 case 1:
  {
   i1 = i3 | 1 << (i12 & 255) + -1;
   if (!i14) {
    i9 = 1025;
    i10 = 0;
    i5 = 1;
   } else {
    _SDL_UpdateMouseFocus(i14, HEAP32[19503] | 0, HEAP32[19504] | 0) | 0;
    i9 = 1025;
    i3 = HEAP32[19509] | 0;
    i10 = 1;
    i5 = 1;
   }
   break;
  }
 case 0:
  {
   i1 = i3 & ~(1 << (i12 & 255) + -1);
   i9 = 1026;
   i10 = (i14 | 0) != 0;
   i5 = 0;
   break;
  }
 default:
  {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 if ((i1 | 0) == (i3 | 0)) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 HEAP32[19509] = i1;
 do if ((i2 | 0) < 0) {
  i7 = i12 & 255;
  if ((HEAP32[19512] | 0) <= (i7 | 0)) {
   i3 = i7 + 1 | 0;
   i2 = _SDL_realloc(HEAP32[19513] | 0, i3 << 4) | 0;
   if (!i2) {
    i2 = 1;
    break;
   }
   HEAP32[19513] = i2;
   i1 = HEAP32[19512] | 0;
   if ((i1 | 0) <= (i7 | 0)) {
    _SDL_memset(i2 + (i1 << 4) | 0, 0, 16) | 0;
    if ((i1 | 0) < (i7 | 0)) do {
     i1 = i1 + 1 | 0;
     _SDL_memset((HEAP32[19513] | 0) + (i1 << 4) | 0, 0, 16) | 0;
    } while ((i1 | 0) != (i7 | 0));
   }
   HEAP32[19512] = i3;
  }
  i2 = HEAP32[19513] | 0;
  i4 = i2 + (i7 << 4) | 0;
  if (!i4) i2 = 1; else {
   do if (i5) {
    i5 = _SDL_GetTicks() | 0;
    i6 = i2 + (i7 << 4) + 8 | 0;
    if (((HEAP32[i6 >> 2] | 0) - i5 + 500 | 0) < 1) {
     i1 = i4;
     i8 = 20;
    } else if ((_SDL_abs((HEAP32[19503] | 0) - (HEAP32[i4 >> 2] | 0) | 0) | 0) > 1) {
     i1 = i4;
     i8 = 20;
    } else {
     i3 = i2 + (i7 << 4) + 4 | 0;
     if ((_SDL_abs((HEAP32[19504] | 0) - (HEAP32[i3 >> 2] | 0) | 0) | 0) > 1) {
      i1 = i4;
      i8 = 20;
     } else {
      i2 = i2 + (i7 << 4) + 12 | 0;
      i1 = HEAP8[i2 >> 0] | 0;
      HEAP32[i6 >> 2] = i5;
      HEAP32[i4 >> 2] = HEAP32[19503];
      HEAP32[i3 >> 2] = HEAP32[19504];
      if (i1 << 24 >> 24 == -1) {
       i1 = -1;
       break;
      }
     }
    }
    if ((i8 | 0) == 20) {
     i8 = i2 + (i7 << 4) | 0;
     i2 = i8 + 12 | 0;
     HEAP8[i2 >> 0] = 0;
     HEAP32[i6 >> 2] = i5;
     HEAP32[i1 >> 2] = HEAP32[19503];
     HEAP32[i8 + 4 >> 2] = HEAP32[19504];
     i1 = 0;
    }
    i1 = i1 + 1 << 24 >> 24;
    HEAP8[i2 >> 0] = i1;
   } else i1 = HEAP8[i2 + (i7 << 4) + 12 >> 0] | 0; while (0);
   i2 = i1 & 255;
  }
 } while (0);
 if ((_SDL_EventState(i9, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i13 >> 2] = i9;
  i1 = HEAP32[19502] | 0;
  if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
  HEAP32[i13 + 8 >> 2] = i1;
  HEAP32[i13 + 12 >> 2] = i11;
  HEAP8[i13 + 17 >> 0] = i15;
  HEAP8[i13 + 16 >> 0] = i12;
  HEAP8[i13 + 18 >> 0] = (i2 | 0) < 255 ? i2 : 255;
  HEAP32[i13 + 20 >> 2] = HEAP32[19503];
  HEAP32[i13 + 24 >> 2] = HEAP32[19504];
  i1 = (_SDL_PushEvent(i13) | 0) > 0 & 1;
 } else i1 = 0;
 if (!(i15 << 24 >> 24 == 0 & i10)) {
  i15 = i1;
  STACKTOP = i16;
  return i15 | 0;
 }
 _SDL_UpdateMouseFocus(i14, HEAP32[19503] | 0, HEAP32[19504] | 0) | 0;
 i15 = i1;
 STACKTOP = i16;
 return i15 | 0;
}

function _SDLgfx_rotozoomSurfaceSizeTrig(i4, i5, d1, i14, i15, i6, i9) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 d1 = +d1;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 var i2 = 0, d3 = 0.0, d7 = 0.0, d8 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0;
 d13 = d1 / 90.0;
 i2 = ~~d13;
 if (d13 == +(i2 | 0)) {
  i2 = (i2 | 0) % 4 | 0;
  i2 = (i2 | 0) < 0 ? i2 + 4 | 0 : i2;
  if (!(i2 & 1)) {
   HEAP32[i14 >> 2] = i4;
   HEAP32[i15 >> 2] = i5;
   HEAPF64[i6 >> 3] = (i2 | 0) == 0 ? 1.0 : -1.0;
   HEAPF64[i9 >> 3] = 0.0;
   return;
  } else {
   HEAP32[i14 >> 2] = i5;
   HEAP32[i15 >> 2] = i4;
   HEAPF64[i6 >> 3] = 0.0;
   HEAPF64[i9 >> 3] = (i2 | 0) == 1 ? -1.0 : 1.0;
   return;
  }
 }
 d13 = d1 * -.017453292519943295;
 HEAPF64[i9 >> 3] = +_SDL_sin(d13);
 d13 = +_SDL_cos(d13);
 HEAPF64[i6 >> 3] = d13;
 d12 = +((i4 | 0) / 2 | 0 | 0);
 d7 = +((i5 | 0) / 2 | 0 | 0);
 d8 = d13 * d12;
 d13 = d13 * d7;
 d10 = +HEAPF64[i9 >> 3];
 d12 = d10 * d12;
 d7 = d10 * d7;
 d10 = d8 + d7;
 d3 = +_SDL_fabs(d10);
 d11 = d8 - d7;
 i9 = d3 > +_SDL_fabs(d11);
 d3 = +_SDL_fabs(i9 ? d10 : d11);
 d1 = d7 - d8;
 if (d3 > +_SDL_fabs(d1)) {
  d3 = +_SDL_fabs(d10);
  i9 = d3 > +_SDL_fabs(d11);
  d3 = i9 ? d10 : d11;
 } else d3 = d1;
 d3 = +_SDL_fabs(d3);
 d7 = -d8 - d7;
 if (d3 > +_SDL_fabs(d7)) {
  d8 = +_SDL_fabs(d10);
  i9 = d8 > +_SDL_fabs(d11);
  d8 = +_SDL_fabs(i9 ? d10 : d11);
  if (d8 > +_SDL_fabs(d1)) {
   d3 = +_SDL_fabs(d10);
   i9 = d3 > +_SDL_fabs(d11);
   d3 = i9 ? d10 : d11;
  } else d3 = d1;
 } else d3 = d7;
 if ((~~+_SDL_ceil(+_SDL_fabs(d3)) | 0) > 1) {
  d8 = +_SDL_fabs(d10);
  i9 = d8 > +_SDL_fabs(d11);
  d8 = +_SDL_fabs(i9 ? d10 : d11);
  if (d8 > +_SDL_fabs(d1)) {
   d3 = +_SDL_fabs(d10);
   i9 = d3 > +_SDL_fabs(d11);
   d3 = i9 ? d10 : d11;
  } else d3 = d1;
  d8 = +_SDL_fabs(d3);
  if (d8 > +_SDL_fabs(d7)) {
   d8 = +_SDL_fabs(d10);
   i9 = d8 > +_SDL_fabs(d11);
   d8 = +_SDL_fabs(i9 ? d10 : d11);
   if (d8 > +_SDL_fabs(d1)) {
    d1 = +_SDL_fabs(d10);
    i9 = d1 > +_SDL_fabs(d11);
    d1 = i9 ? d10 : d11;
   }
  } else d1 = d7;
  i4 = ~~+_SDL_ceil(+_SDL_fabs(d1)) << 1;
 } else i4 = 2;
 d7 = d13 + d12;
 d11 = +_SDL_fabs(d7);
 d8 = d12 - d13;
 i9 = d11 > +_SDL_fabs(d8);
 d11 = +_SDL_fabs(i9 ? d7 : d8);
 d10 = d13 - d12;
 if (d11 > +_SDL_fabs(d10)) {
  d1 = +_SDL_fabs(d7);
  i9 = d1 > +_SDL_fabs(d8);
  d1 = i9 ? d7 : d8;
 } else d1 = d10;
 d11 = +_SDL_fabs(d1);
 d1 = -d12 - d13;
 if (d11 > +_SDL_fabs(d1)) {
  d13 = +_SDL_fabs(d7);
  i9 = d13 > +_SDL_fabs(d8);
  d13 = +_SDL_fabs(i9 ? d7 : d8);
  if (d13 > +_SDL_fabs(d10)) {
   d3 = +_SDL_fabs(d7);
   i9 = d3 > +_SDL_fabs(d8);
   d3 = i9 ? d7 : d8;
  } else d3 = d10;
 } else d3 = d1;
 if ((~~+_SDL_ceil(+_SDL_fabs(d3)) | 0) > 1) {
  d13 = +_SDL_fabs(d7);
  i9 = d13 > +_SDL_fabs(d8);
  d13 = +_SDL_fabs(i9 ? d7 : d8);
  if (d13 > +_SDL_fabs(d10)) {
   d3 = +_SDL_fabs(d7);
   i9 = d3 > +_SDL_fabs(d8);
   d3 = i9 ? d7 : d8;
  } else d3 = d10;
  d13 = +_SDL_fabs(d3);
  if (d13 > +_SDL_fabs(d1)) {
   d13 = +_SDL_fabs(d7);
   i9 = d13 > +_SDL_fabs(d8);
   d13 = +_SDL_fabs(i9 ? d7 : d8);
   if (d13 > +_SDL_fabs(d10)) {
    d1 = +_SDL_fabs(d7);
    i9 = d1 > +_SDL_fabs(d8);
    d1 = i9 ? d7 : d8;
   } else d1 = d10;
  }
  i2 = ~~+_SDL_ceil(+_SDL_fabs(d1)) << 1;
 } else i2 = 2;
 HEAP32[i14 >> 2] = i4;
 HEAP32[i15 >> 2] = i2;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i8, i9, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (!i2) i6 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  } else if (i3) {
   i4 = i2;
   i6 = 16;
   break;
  } else {
   i1 = 6;
   i6 = 38;
   break;
  }
 } while (0);
 if ((i6 | 0) == 14) if (i3) {
  i1 = 6;
  i6 = 38;
 } else {
  i4 = 0;
  i6 = 16;
 }
 L22 : do if ((i6 | 0) == 16) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] & 63](i5, i1, 0) | 0) << 24 >> 24 == 37) {
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   }
   i1 = HEAP32[i7 >> 2] | 0;
   do if (!i1) i2 = 1; else {
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i7 >> 2] = 0;
     i2 = 1;
     break;
    } else {
     i2 = (HEAP32[i7 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (i4 | 0) {
    i1 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[i8 >> 2] = 0;
     break;
    } else if (i2) break L22; else {
     i1 = 2;
     i6 = 38;
     break L22;
    }
   } while (0);
   if (i2) {
    i1 = 2;
    i6 = 38;
   }
  } else {
   i1 = 4;
   i6 = 38;
  }
 } while (0);
 if ((i6 | 0) == 38) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | i1;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i8, i9, i5) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (!i1) i3 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (!i2) i6 = 14; else {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  } else if (i3) {
   i4 = i2;
   i6 = 16;
   break;
  } else {
   i1 = 6;
   i6 = 38;
   break;
  }
 } while (0);
 if ((i6 | 0) == 14) if (i3) {
  i1 = 6;
  i6 = 38;
 } else {
  i4 = 0;
  i6 = 16;
 }
 L22 : do if ((i6 | 0) == 16) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 63](i5, i1 & 255, 0) | 0) << 24 >> 24 == 37) {
   i1 = HEAP32[i7 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   }
   i1 = HEAP32[i7 >> 2] | 0;
   do if (!i1) i2 = 1; else {
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i7 >> 2] = 0;
     i2 = 1;
     break;
    } else {
     i2 = (HEAP32[i7 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (i4 | 0) {
    i1 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 255](i4) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[i8 >> 2] = 0;
     break;
    } else if (i2) break L22; else {
     i1 = 2;
     i6 = 38;
     break L22;
    }
   } while (0);
   if (i2) {
    i1 = 2;
    i6 = 38;
   }
  } else {
   i1 = 4;
   i6 = 38;
  }
 } while (0);
 if ((i6 | 0) == 38) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | i1;
 return;
}

function _IMG_LoadTyped_RW(i8, i9, i6) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i10 + 16 | 0;
 i3 = i10 + 24 | 0;
 i4 = i10 + 20 | 0;
 if (!i8) {
  _SDL_SetError(39632, i10) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 FUNCTION_TABLE_iiiii[HEAP32[i8 + 4 >> 2] & 31](i8, 0, 0, 1) | 0;
 if ((tempRet0 | 0) < 0) {
  _SDL_SetError(39658, i10 + 8 | 0) | 0;
  if (!i9) {
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  }
  FUNCTION_TABLE_ii[HEAP32[i8 + 16 >> 2] & 255](i8) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 do if ((HEAP32[i8 + 20 >> 2] | 0) == 2) {
  i2 = _emscripten_get_preloaded_image_data_from_FILE(HEAP32[i8 + 28 >> 2] | 0, i3 | 0, i4 | 0) | 0;
  if (!i2) break;
  i1 = _SDL_CreateRGBSurface(0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, 32, 255, 65280, 16711680, -16777216) | 0;
  if (i1 | 0) _memcpy(HEAP32[i1 + 20 >> 2] | 0, i2 | 0, Math_imul(HEAP32[i3 >> 2] << 2, HEAP32[i4 >> 2] | 0) | 0) | 0;
  _free(i2);
  if (i9 | 0) FUNCTION_TABLE_ii[HEAP32[i8 + 16 >> 2] & 255](i8) | 0;
  i9 = i1;
  STACKTOP = i10;
  return i9 | 0;
 } while (0);
 L25 : do if (!i6) if (!(_IMG_isCUR(i8) | 0)) if (!(_IMG_isICO(i8) | 0)) if (!(_IMG_isBMP(i8) | 0)) if (!(_IMG_isGIF(i8) | 0)) if (!(_IMG_isJPG(i8) | 0)) if (!(_IMG_isLBM(i8) | 0)) if (!(_IMG_isPCX(i8) | 0)) if (!(_IMG_isPNG(i8) | 0)) if (!(_IMG_isPNM(i8) | 0)) if (!(_IMG_isTIF(i8) | 0)) if (!(_IMG_isXCF(i8) | 0)) if (!(_IMG_isXPM(i8) | 0)) if (!(_IMG_isXV(i8) | 0)) if (!(_IMG_isWEBP(i8) | 0)) i2 = 25; else {
  i1 = 14;
  i2 = 22;
 } else {
  i1 = 13;
  i2 = 22;
 } else {
  i1 = 12;
  i2 = 22;
 } else {
  i1 = 11;
  i2 = 22;
 } else {
  i1 = 10;
  i2 = 22;
 } else {
  i1 = 9;
  i2 = 22;
 } else {
  i1 = 8;
  i2 = 22;
 } else {
  i1 = 7;
  i2 = 22;
 } else {
  i1 = 6;
  i2 = 22;
 } else {
  i1 = 5;
  i2 = 22;
 } else {
  i1 = 4;
  i2 = 22;
 } else {
  i1 = 3;
  i2 = 22;
 } else {
  i1 = 2;
  i2 = 22;
 } else {
  i1 = 1;
  i2 = 22;
 } else {
  i1 = 0;
  while (1) {
   L42 : do if (!i1) {
    i3 = HEAP8[i6 >> 0] | 0;
    if (!(i3 << 24 >> 24)) i2 = 39689; else {
     i2 = 39689;
     i5 = i6;
     do {
      i4 = HEAP8[i2 >> 0] | 0;
      if (!(i4 << 24 >> 24)) break L42;
      i3 = _toupper(i3 & 255) | 0;
      if ((i3 | 0) != (_toupper(i4 & 255) | 0)) break L42;
      i5 = i5 + 1 | 0;
      i2 = i2 + 1 | 0;
      i3 = HEAP8[i5 >> 0] | 0;
     } while (i3 << 24 >> 24 != 0);
    }
    if (!(HEAP8[i2 >> 0] | 0)) {
     i1 = 0;
     i2 = 22;
     break L25;
    }
   } else if (FUNCTION_TABLE_ii[HEAP32[2912 + (i1 * 12 | 0) + 4 >> 2] & 255](i8) | 0) {
    i2 = 22;
    break L25;
   } while (0);
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= 15) {
    i2 = 25;
    break;
   }
  }
 } while (0);
 if ((i2 | 0) == 22) {
  i1 = FUNCTION_TABLE_ii[HEAP32[2912 + (i1 * 12 | 0) + 8 >> 2] & 255](i8) | 0;
  if (!i9) {
   i9 = i1;
   STACKTOP = i10;
   return i9 | 0;
  }
  FUNCTION_TABLE_ii[HEAP32[i8 + 16 >> 2] & 255](i8) | 0;
  i9 = i1;
  STACKTOP = i10;
  return i9 | 0;
 } else if ((i2 | 0) == 25) {
  if (i9 | 0) FUNCTION_TABLE_ii[HEAP32[i8 + 16 >> 2] & 255](i8) | 0;
  _SDL_SetError(39693, i7) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i1, i5, i7, i8, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0;
 i6 = 0;
 i4 = i2 + 8 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i5 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i7 >> 2] | 0;
  do if (!i2) i6 = 15; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[i7 >> 2] = 0;
    i6 = 15;
    break;
   } else if (i3) {
    i3 = i2;
    break;
   } else {
    i3 = i2;
    break L1;
   }
  } while (0);
  if ((i6 | 0) == 15) {
   i6 = 0;
   if (i3) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if ((i1 & 255) << 24 >> 24 <= -1) break;
  if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i3 >> 0] | 0) | 0;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i3) i6 = 38; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i6 = 38;
   break;
  } else if (i2) break; else {
   i6 = 40;
   break;
  }
 } while (0);
 if ((i6 | 0) == 38) if (i2) i6 = 40;
 if ((i6 | 0) == 40) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 return;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i7, i8, i3, i2, i9, i10, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i3;
 if (!(i4 & 2)) i5 = 4; else if ((i2 - i3 | 0) < 3) i1 = 1; else {
  HEAP32[i9 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = -17;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 }
 L4 : do if ((i5 | 0) == 4) {
  i6 = i7;
  i1 = HEAP32[i8 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i7 >>> 0) {
    i1 = 0;
    break L4;
   }
   i3 = HEAP16[i1 >> 1] | 0;
   i5 = i3 & 65535;
   if (i5 >>> 0 > i10 >>> 0) {
    i1 = 2;
    break L4;
   }
   do if ((i3 & 65535) < 128) {
    i1 = HEAP32[i9 >> 2] | 0;
    if ((i2 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i9 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if ((i3 & 65535) < 2048) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i2 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 6 | 192;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) < 55296) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) >= 56320) {
     if ((i3 & 65535) < 57344) {
      i1 = 2;
      break L4;
     }
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i6 - i1 | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i1 = i1 + 2 | 0;
    i3 = HEAPU16[i1 >> 1] | 0;
    if ((i3 & 64512 | 0) != 56320) {
     i1 = 2;
     break L4;
    }
    if ((i2 - (HEAP32[i9 >> 2] | 0) | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i4 = i5 & 960;
    if (((i4 << 10) + 65536 | i5 << 10 & 64512 | i3 & 1023) >>> 0 > i10 >>> 0) {
     i1 = 2;
     break L4;
    }
    HEAP32[i8 >> 2] = i1;
    i1 = (i4 >>> 6) + 1 | 0;
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i1 >>> 2 | 240;
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 >>> 2 & 15 | i1 << 4 & 48 | 128;
    i4 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 << 4 & 48 | i3 >>> 6 & 15 | 128;
    i5 = HEAP32[i9 >> 2] | 0;
    HEAP32[i9 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i3 & 63 | 128;
   } while (0);
   i1 = (HEAP32[i8 >> 2] | 0) + 2 | 0;
   HEAP32[i8 >> 2] = i1;
  }
 } while (0);
 return i1 | 0;
}

function __ZN15PaintController6updateEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = 0;
 if (!(HEAP8[i5 + 10 >> 0] | 0)) return;
 if (!((_SDL_GetMouseState(0, 0) | 0) & 1)) {
  if ((_SDL_GetMouseState(0, 0) | 0) & 4 | 0) HEAP8[i5 + 9 >> 0] = 1;
 } else HEAP8[i5 + 8 >> 0] = 1;
 _SDL_GetMouseState(0, 0) | 0;
 if (!(_SDL_GetMouseState(0, 0) | 0)) {
  i1 = i5 + 8 | 0;
  if (HEAP8[i1 >> 0] | 0) HEAP8[i5 + 11 >> 0] = 1;
  HEAP8[i1 >> 0] = 0;
 }
 i3 = i5 + 84 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i4 = (HEAP8[i4 + (_SDL_GetScancodeFromKey(114) | 0) >> 0] | 0) == 0;
 i1 = HEAP32[i3 >> 2] | 0;
 do if (i4) {
  if (HEAP8[i1 + (_SDL_GetScancodeFromKey(103) | 0) >> 0] | 0) {
   i4 = HEAP32[i3 >> 2] | 0;
   i4 = (HEAP8[i4 + (_SDL_GetScancodeFromKey(1073741905) | 0) >> 0] | 0) == 0;
   i2 = i5 + 33 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   if (i4) {
    if (i1 << 24 >> 24 == -1) break;
   } else if (!(i1 << 24 >> 24)) i1 = 0; else {
    HEAP8[i2 >> 0] = i1 + -1 << 24 >> 24;
    break;
   }
   HEAP8[i2 >> 0] = i1 + 1 << 24 >> 24;
  }
 } else {
  i4 = (HEAP8[i1 + (_SDL_GetScancodeFromKey(1073741905) | 0) >> 0] | 0) == 0;
  i2 = i5 + 32 | 0;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i4) {
   if (i1 << 24 >> 24 == -1) break;
  } else if (!(i1 << 24 >> 24)) i1 = 0; else {
   HEAP8[i2 >> 0] = i1 + -1 << 24 >> 24;
   break;
  }
  HEAP8[i2 >> 0] = i1 + 1 << 24 >> 24;
 } while (0);
 i4 = HEAP32[i3 >> 2] | 0;
 do if (HEAP8[i4 + (_SDL_GetScancodeFromKey(98) | 0) >> 0] | 0) {
  i4 = HEAP32[i3 >> 2] | 0;
  i4 = (HEAP8[i4 + (_SDL_GetScancodeFromKey(1073741905) | 0) >> 0] | 0) == 0;
  i2 = i5 + 34 | 0;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i4) {
   if (i1 << 24 >> 24 == -1) break;
  } else if (!(i1 << 24 >> 24)) i1 = 0; else {
   HEAP8[i2 >> 0] = i1 + -1 << 24 >> 24;
   break;
  }
  HEAP8[i2 >> 0] = i1 + 1 << 24 >> 24;
 } while (0);
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = i5 + 20 | 0;
 if (!(HEAP8[i4 + (_SDL_GetScancodeFromKey(1073741906) | 0) >> 0] | 0)) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i5 + 24 >> 2] = 0;
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) < 28) {
   i7 = i5 + 24 | 0;
   i4 = (HEAP32[i7 >> 2] | 0) + 1 | 0;
   HEAP32[i7 >> 2] = i4;
   if (((i4 | 0) % 4 | 0 | 0) > 1) HEAP32[i1 >> 2] = i2 + 1;
  }
 }
 if (HEAP8[i5 + 8 >> 0] | 0) return;
 i7 = HEAP32[i3 >> 2] | 0;
 if (!(HEAP8[i7 + (_SDL_GetScancodeFromKey(122) | 0) >> 0] | 0)) return;
 i7 = _SDL_GetTicks() | 0;
 i4 = i5 + 28 | 0;
 if ((i7 - (HEAP32[i4 >> 2] | 0) | 0) >>> 0 <= 300) return;
 i1 = HEAP32[i5 + 40 >> 2] | 0;
 i2 = i1 + 80 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP8[i1 + 52 >> 0] | 0)) {
  if (i3 | 0) i6 = 39;
 } else if (i3 >>> 0 > 1) i6 = 39;
 if ((i6 | 0) == 39) {
  i6 = i1 + 76 | 0;
  i5 = i3 + -1 + (HEAP32[i6 >> 2] | 0) | 0;
  i7 = i1 + 64 | 0;
  _SDL_DestroyTexture(HEAP32[(HEAP32[(HEAP32[i7 >> 2] | 0) + (i5 >>> 10 << 2) >> 2] | 0) + ((i5 & 1023) << 2) >> 2] | 0);
  i5 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i5 + -1;
  i1 = i1 + 68 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i7 = i2 - (HEAP32[i7 >> 2] | 0) | 0;
  if ((1 - i5 - (HEAP32[i6 >> 2] | 0) + ((i7 | 0) == 0 ? 0 : (i7 << 8) + -1 | 0) | 0) >>> 0 > 2047) {
   __ZdlPv(HEAP32[i2 + -4 >> 2] | 0);
   HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + -4;
  }
 }
 HEAP32[i4 >> 2] = _SDL_GetTicks() | 0;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i5, i7, i8, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i6 = 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (!i1) i3 = 1; else {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i5 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  i2 = HEAP32[i7 >> 2] | 0;
  do if (!i2) i6 = 15; else {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 255](i2) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[i7 >> 2] = 0;
    i6 = 15;
    break;
   } else if (i3) {
    i3 = i2;
    break;
   } else {
    i3 = i2;
    break L1;
   }
  } while (0);
  if ((i6 | 0) == 15) {
   i6 = 0;
   if (i3) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 63](i4, 8192, i1) | 0)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 255](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i3 >> 2] | 0) | 0;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (!i1) i2 = 1; else {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!i3) i6 = 37; else {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 255](i3) | 0; else i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   i6 = 37;
   break;
  } else if (i2) break; else {
   i6 = 39;
   break;
  }
 } while (0);
 if ((i6 | 0) == 37) if (i2) i6 = 39;
 if ((i6 | 0) == 39) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 return;
}

function _SDL_RenderCopy(i10, i11, i3, i8) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 var f1 = f0, f2 = f0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, f16 = f0, f17 = f0;
 i9 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i7 = i15 + 24 | 0;
 i6 = i15 + 16 | 0;
 i5 = i15 + 8 | 0;
 i4 = i15;
 i12 = i15 + 64 | 0;
 i13 = i15 + 48 | 0;
 i14 = i15 + 32 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 + 8 >> 2] = 0;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i13 + 12 >> 2] = 0;
 if (i10 | 0) if ((HEAP32[i10 >> 2] | 0) == 85556) {
  if (i11 | 0) if ((HEAP32[i11 >> 2] | 0) == 85557) {
   if ((HEAP32[i11 + 32 >> 2] | 0) != (i10 | 0)) {
    i14 = _SDL_SetError(59393, i6) | 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   if (HEAP32[i10 + 192 >> 2] | 0) {
    i14 = 0;
    STACKTOP = i15;
    return i14 | 0;
   }
   HEAP32[i12 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = HEAP32[i11 + 12 >> 2];
   HEAP32[i12 + 12 >> 2] = HEAP32[i11 + 16 >> 2];
   if (!i3) i9 = 14; else {
    if (!(_SDL_IntersectRect(i3, i12, i12) | 0)) {
     i14 = 0;
     STACKTOP = i15;
     return i14 | 0;
    }
    if ((HEAP32[i10 >> 2] | 0) == 85556) i9 = 14; else {
     _SDL_SetError(41341, i7) | 0;
     i4 = i13 + 4 | 0;
     i3 = i13;
    }
   }
   if ((i9 | 0) == 14) {
    f16 = Math_fround(HEAP32[i10 + 216 >> 2] | 0);
    f1 = Math_fround(HEAPF32[i10 + 288 >> 2]);
    HEAP32[i13 >> 2] = ~~Math_fround(f16 / f1);
    f16 = Math_fround(HEAP32[i10 + 220 >> 2] | 0);
    f2 = Math_fround(HEAPF32[i10 + 292 >> 2]);
    i4 = i13 + 4 | 0;
    HEAP32[i4 >> 2] = ~~Math_fround(f16 / f2);
    HEAP32[i13 + 8 >> 2] = ~~Math_fround(Math_fround(HEAP32[i10 + 224 >> 2] | 0) / f1);
    HEAP32[i13 + 12 >> 2] = ~~Math_fround(Math_fround(HEAP32[i10 + 228 >> 2] | 0) / f2);
    i3 = i13;
   }
   HEAP32[i3 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   do if (!i8) {
    f2 = Math_fround(0.0);
    f1 = Math_fround(0.0);
   } else if (!(_SDL_HasIntersection(i8, i13) | 0)) {
    i14 = 0;
    STACKTOP = i15;
    return i14 | 0;
   } else {
    HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i13 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    HEAP32[i13 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
    HEAP32[i13 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
    f2 = Math_fround(HEAP32[i3 >> 2] | 0);
    f1 = Math_fround(HEAP32[i4 >> 2] | 0);
    break;
   } while (0);
   i9 = HEAP32[i11 + 36 >> 2] | 0;
   f17 = Math_fround(HEAPF32[i10 + 288 >> 2]);
   HEAPF32[i14 >> 2] = Math_fround(f17 * f2);
   f16 = Math_fround(HEAPF32[i10 + 292 >> 2]);
   HEAPF32[i14 + 4 >> 2] = Math_fround(f16 * f1);
   HEAPF32[i14 + 8 >> 2] = Math_fround(f17 * Math_fround(HEAP32[i13 + 8 >> 2] | 0));
   HEAPF32[i14 + 12 >> 2] = Math_fround(f16 * Math_fround(HEAP32[i13 + 12 >> 2] | 0));
   i14 = FUNCTION_TABLE_iiiii[HEAP32[i10 + 72 >> 2] & 31](i10, (i9 | 0) == 0 ? i11 : i9, i12, i14) | 0;
   STACKTOP = i15;
   return i14 | 0;
  }
  _SDL_SetError(41358, i5) | 0;
  i14 = -1;
  STACKTOP = i15;
  return i14 | 0;
 }
 _SDL_SetError(41341, i4) | 0;
 i14 = -1;
 STACKTOP = i15;
 return i14 | 0;
}

function _SDL_RenderCopyEx(i12, i13, i5, i9, d14, i11, i15) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 d14 = +d14;
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, f4 = f0, i6 = 0, i7 = 0, f8 = f0, i10 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, d20 = 0.0, f21 = f0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i7 = i19 + 32 | 0;
 i6 = i19 + 24 | 0;
 i3 = i19 + 16 | 0;
 i2 = i19 + 8 | 0;
 i1 = i19;
 i16 = i19 + 64 | 0;
 i17 = i19 + 48 | 0;
 i18 = i19 + 40 | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i16 + 12 >> 2] = 0;
 if (!i15) {
  d20 = d14 / 360.0;
  if (d20 == +(~~d20 | 0)) {
   i18 = _SDL_RenderCopy(i12, i13, i5, i9) | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
 }
 if (i12 | 0) if ((HEAP32[i12 >> 2] | 0) == 85556) {
  if (i13 | 0) if ((HEAP32[i13 >> 2] | 0) == 85557) {
   if ((HEAP32[i13 + 32 >> 2] | 0) != (i12 | 0)) {
    i18 = _SDL_SetError(59393, i3) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
   i10 = i12 + 76 | 0;
   if (!(HEAP32[i10 >> 2] | 0)) {
    i18 = _SDL_SetError(60461, i6) | 0;
    STACKTOP = i19;
    return i18 | 0;
   }
   if (HEAP32[i12 + 192 >> 2] | 0) {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
   HEAP32[i16 >> 2] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
   HEAP32[i16 + 8 >> 2] = HEAP32[i13 + 12 >> 2];
   HEAP32[i16 + 12 >> 2] = HEAP32[i13 + 16 >> 2];
   if (i5 | 0) if (!(_SDL_IntersectRect(i5, i16, i16) | 0)) {
    i18 = 0;
    STACKTOP = i19;
    return i18 | 0;
   }
   do if (!i9) if ((HEAP32[i12 >> 2] | 0) == 85556) {
    f8 = Math_fround(HEAPF32[i12 + 288 >> 2]);
    f4 = Math_fround(HEAPF32[i12 + 292 >> 2]);
    i5 = ~~Math_fround(Math_fround(HEAP32[i12 + 224 >> 2] | 0) / f8);
    f8 = Math_fround(0.0);
    i6 = ~~Math_fround(Math_fround(HEAP32[i12 + 228 >> 2] | 0) / f4);
    f4 = Math_fround(0.0);
    break;
   } else {
    _SDL_SetError(41341, i7) | 0;
    f8 = Math_fround(0.0);
    i5 = 0;
    i6 = 0;
    f4 = Math_fround(0.0);
    break;
   } else {
    f8 = Math_fround(HEAP32[i9 >> 2] | 0);
    i5 = HEAP32[i9 + 8 >> 2] | 0;
    i6 = HEAP32[i9 + 12 >> 2] | 0;
    f4 = Math_fround(HEAP32[i9 + 4 >> 2] | 0);
   } while (0);
   i3 = HEAP32[i13 + 36 >> 2] | 0;
   if (!i11) {
    i2 = (i5 | 0) / 2 | 0;
    i1 = (i6 | 0) / 2 | 0;
   } else {
    i2 = HEAP32[i11 >> 2] | 0;
    i1 = HEAP32[i11 + 4 >> 2] | 0;
   }
   f21 = Math_fround(HEAPF32[i12 + 288 >> 2]);
   HEAPF32[i17 >> 2] = Math_fround(f8 * f21);
   f8 = Math_fround(HEAPF32[i12 + 292 >> 2]);
   HEAPF32[i17 + 4 >> 2] = Math_fround(f4 * f8);
   HEAPF32[i17 + 8 >> 2] = Math_fround(f21 * Math_fround(i5 | 0));
   HEAPF32[i17 + 12 >> 2] = Math_fround(f8 * Math_fround(i6 | 0));
   HEAPF32[i18 >> 2] = Math_fround(f21 * Math_fround(i2 | 0));
   HEAPF32[i18 + 4 >> 2] = Math_fround(f8 * Math_fround(i1 | 0));
   i18 = FUNCTION_TABLE_iiiiidii[HEAP32[i10 >> 2] & 3](i12, (i3 | 0) == 0 ? i13 : i3, i16, i17, d14, i18, i15) | 0;
   STACKTOP = i19;
   return i18 | 0;
  }
  _SDL_SetError(41358, i2) | 0;
  i18 = -1;
  STACKTOP = i19;
  return i18 | 0;
 }
 _SDL_SetError(41341, i1) | 0;
 i18 = -1;
 STACKTOP = i19;
 return i18 | 0;
}

function _SDL_EGL_ChooseConfig(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 800 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(800);
 i8 = i13 + 536 | 0;
 i9 = i13 + 532 | 0;
 i10 = i13 + 528 | 0;
 i11 = i13 + 16 | 0;
 HEAP32[i9 >> 2] = 0;
 i12 = i4 + 676 | 0;
 i5 = HEAP32[i12 >> 2] | 0;
 if (!i5) {
  i12 = -1;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i8 >> 2] = 12324;
 HEAP32[i8 + 4 >> 2] = HEAP32[i4 + 292 >> 2];
 HEAP32[i8 + 8 >> 2] = 12323;
 HEAP32[i8 + 12 >> 2] = HEAP32[i4 + 296 >> 2];
 HEAP32[i8 + 16 >> 2] = 12322;
 HEAP32[i8 + 20 >> 2] = HEAP32[i4 + 300 >> 2];
 i1 = HEAP32[i4 + 304 >> 2] | 0;
 if (!i1) i1 = 6; else {
  HEAP32[i8 + 24 >> 2] = 12321;
  HEAP32[i8 + 28 >> 2] = i1;
  i1 = 8;
 }
 i2 = HEAP32[i4 + 312 >> 2] | 0;
 i3 = i1 | 1;
 if (!i2) i2 = i1; else {
  HEAP32[i8 + (i1 << 2) >> 2] = 12320;
  HEAP32[i8 + (i3 << 2) >> 2] = i2;
  i2 = i3 + 1 | 0;
 }
 HEAP32[i8 + (i2 << 2) >> 2] = 12325;
 i1 = i2 + 2 | 0;
 HEAP32[i8 + (i2 + 1 << 2) >> 2] = HEAP32[i4 + 308 >> 2];
 i3 = HEAP32[i4 + 316 >> 2] | 0;
 if (i3) {
  HEAP32[i8 + (i1 << 2) >> 2] = 12326;
  HEAP32[i8 + (i2 + 3 << 2) >> 2] = i3;
  i1 = i2 + 4 | 0;
 }
 i2 = HEAP32[i4 + 344 >> 2] | 0;
 if (i2) {
  HEAP32[i8 + (i1 << 2) >> 2] = 12338;
  HEAP32[i8 + (i1 + 1 << 2) >> 2] = i2;
  i1 = i1 + 2 | 0;
 }
 i2 = HEAP32[i4 + 348 >> 2] | 0;
 if (!i2) i2 = i1; else {
  HEAP32[i8 + (i1 << 2) >> 2] = 12337;
  HEAP32[i8 + (i1 + 1 << 2) >> 2] = i2;
  i2 = i1 + 2 | 0;
 }
 if (HEAP32[i4 + 380 >> 2] | 0) {
  i12 = _SDL_SetError(50689, i13) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i8 + (i2 << 2) >> 2] = 12352;
 if ((HEAP32[i4 + 368 >> 2] | 0) == 4) {
  i1 = (HEAP32[i4 + 356 >> 2] | 0) > 1 ? 4 : 1;
  FUNCTION_TABLE_ii[HEAP32[i5 + 84 >> 2] & 255](12448) | 0;
 } else {
  FUNCTION_TABLE_ii[HEAP32[i5 + 84 >> 2] & 255](12450) | 0;
  i1 = 8;
 }
 HEAP32[i8 + (i2 + 1 << 2) >> 2] = i1;
 HEAP32[i8 + (i2 + 2 << 2) >> 2] = 12344;
 i7 = HEAP32[i12 >> 2] | 0;
 i7 = (FUNCTION_TABLE_iiiiii[HEAP32[i7 + 36 >> 2] & 63](HEAP32[i7 + 8 >> 2] | 0, i8, i11, 128, i9) | 0) == 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (i7 | (i1 | 0) == 0) {
  i12 = _SDL_SetError(50750, i13 + 8 | 0) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((i1 | 0) > 0) {
  i1 = -1;
  i7 = 0;
 } else {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 do {
  i6 = i11 + (i7 << 2) | 0;
  i5 = 0;
  i2 = 0;
  do {
   i3 = HEAP32[i8 + (i5 << 2) >> 2] | 0;
   if ((i3 | 0) == 12344) break;
   i4 = i8 + ((i5 | 1) << 2) | 0;
   if ((i3 + -12321 | 0) >>> 0 < 6 & (HEAP32[i4 >> 2] | 0) != -1) {
    i14 = HEAP32[i12 >> 2] | 0;
    FUNCTION_TABLE_iiiii[HEAP32[i14 + 72 >> 2] & 31](HEAP32[i14 + 8 >> 2] | 0, HEAP32[i6 >> 2] | 0, i3, i10) | 0;
    i2 = (HEAP32[i10 >> 2] | 0) + i2 - (HEAP32[i4 >> 2] | 0) | 0;
   }
   i5 = i5 + 2 | 0;
  } while (i5 >>> 0 < 63);
  if ((i1 | 0) == -1 | (i2 | 0) < (i1 | 0)) {
   HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] = HEAP32[i6 >> 2];
   i1 = i2;
  }
  i7 = i7 + 1 | 0;
 } while (i2 | 0 ? (i7 | 0) < (HEAP32[i9 >> 2] | 0) : 0);
 i1 = 0;
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i2, i12, i13, i14, i3) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i15 = 0;
 i15 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i2;
 if (!(i3 & 4)) i2 = i10; else {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((i2 - i1 | 0) > 2) if ((HEAP8[i1 >> 0] | 0) == -17) if ((HEAP8[i1 + 1 >> 0] | 0) == -69) if ((HEAP8[i1 + 2 >> 0] | 0) == -65) HEAP32[i11 >> 2] = i1 + 3;
 }
 L9 : while (1) {
  i8 = HEAP32[i11 >> 2] | 0;
  i1 = i8 >>> 0 < i10 >>> 0;
  if (!i1) {
   i15 = 36;
   break;
  }
  i9 = HEAP32[i13 >> 2] | 0;
  if (i9 >>> 0 >= i12 >>> 0) {
   i15 = 36;
   break;
  }
  i6 = HEAP8[i8 >> 0] | 0;
  i1 = i6 & 255;
  do if (i6 << 24 >> 24 > -1) if (i1 >>> 0 > i14 >>> 0) {
   i1 = 2;
   break L9;
  } else i3 = 1; else {
   if ((i6 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i6 & 255) < 224) {
    if ((i2 - i8 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i3 = HEAPU8[i8 + 1 >> 0] | 0;
    if ((i3 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i3 & 63 | i1 << 6 & 1984;
    if (i1 >>> 0 > i14 >>> 0) {
     i1 = 2;
     break L9;
    } else {
     i3 = 2;
     break;
    }
   }
   if ((i6 & 255) < 240) {
    if ((i2 - i8 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i4 = HEAP8[i8 + 1 >> 0] | 0;
    i3 = HEAP8[i8 + 2 >> 0] | 0;
    switch (i6 << 24 >> 24) {
    case -32:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i4 & 63) << 6 | i1 << 12 & 61440 | i3 & 63;
    if (i1 >>> 0 > i14 >>> 0) {
     i1 = 2;
     break L9;
    } else {
     i3 = 3;
     break;
    }
   }
   if ((i6 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i8 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i7 = HEAP8[i8 + 1 >> 0] | 0;
   i3 = HEAP8[i8 + 2 >> 0] | 0;
   i5 = HEAP8[i8 + 3 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case -16:
    {
     if ((i7 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if ((i7 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i7 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i4 = i3 & 255;
   if ((i4 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i3 = i5 & 255;
   if ((i3 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = (i7 & 63) << 12 | i1 << 18 & 1835008 | i4 << 6 & 4032 | i3 & 63;
   if (i1 >>> 0 > i14 >>> 0) {
    i1 = 2;
    break L9;
   } else i3 = 4;
  } while (0);
  HEAP32[i9 >> 2] = i1;
  HEAP32[i11 >> 2] = i8 + i3;
  HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 }
 if ((i15 | 0) == 36) i1 = i1 & 1;
 return i1 | 0;
}

function _GLES2_UpdateViewport(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i8 = i10;
 i6 = i10 + 32 | 0;
 i1 = i10 + 24 | 0;
 i7 = i3 + 320 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((HEAP32[19486] | 0) != (HEAP32[i2 >> 2] | 0)) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i5 = i3 + 308 | 0;
 if (!(HEAP32[i5 >> 2] | 0)) {
  _SDL_GL_GetDrawableSize(HEAP32[i3 + 188 >> 2] | 0, i6, i1);
  i4 = HEAP32[i3 + 228 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[i2 + 188 >> 2] & 63](HEAP32[i3 + 216 >> 2] | 0, (HEAP32[i1 >> 2] | 0) - (HEAP32[i3 + 220 >> 2] | 0) - i4 | 0, HEAP32[i3 + 224 >> 2] | 0, i4);
 } else FUNCTION_TABLE_viiii[HEAP32[i2 + 188 >> 2] & 63](HEAP32[i3 + 216 >> 2] | 0, HEAP32[i3 + 220 >> 2] | 0, HEAP32[i3 + 224 >> 2] | 0, HEAP32[i3 + 228 >> 2] | 0);
 if (HEAP32[i2 + 268 >> 2] | 0) {
  i4 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i3 + 224 >> 2] | 0;
  if (i2 | 0) {
   i1 = HEAP32[i3 + 228 >> 2] | 0;
   if (i1 | 0) {
    HEAPF32[i6 >> 2] = Math_fround(Math_fround(2.0) / Math_fround(i2 | 0));
    i3 = i6 + 4 | 0;
    HEAP32[i3 >> 2] = 0;
    HEAP32[i3 + 4 >> 2] = 0;
    HEAP32[i3 + 8 >> 2] = 0;
    HEAP32[i3 + 12 >> 2] = 0;
    i5 = (HEAP32[i5 >> 2] | 0) != 0;
    f11 = Math_fround(i1 | 0);
    HEAPF32[i6 + 20 >> 2] = Math_fround((i5 ? Math_fround(2.0) : Math_fround(-2.0)) / f11);
    i1 = i6 + 24 | 0;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = 0;
    HEAP32[i1 + 20 >> 2] = 0;
    HEAPF32[i6 + 48 >> 2] = Math_fround(-1.0);
    HEAPF32[i6 + 52 >> 2] = i5 ? Math_fround(-1.0) : Math_fround(1.0);
    HEAPF32[i6 + 56 >> 2] = Math_fround(0.0);
    HEAPF32[i6 + 60 >> 2] = Math_fround(1.0);
    i1 = i4 + 268 | 0;
    if (_SDL_memcmp((HEAP32[i1 >> 2] | 0) + 88 | 0, i6, 64) | 0) {
     FUNCTION_TABLE_viiii[HEAP32[i4 + 176 >> 2] & 63](HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] | 0, 1, 0, i6);
     _SDL_memcpy((HEAP32[i1 >> 2] | 0) + 88 | 0, i6, 64) | 0;
    }
   }
  }
 }
 i1 = HEAP32[i7 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 } else i2 = 89710;
 while (1) {
  if (!i2) i9 = 15; else if (!(HEAP8[i2 >> 0] | 0)) i9 = 15; else i3 = i2;
  if ((i9 | 0) == 15) {
   i9 = 0;
   i3 = 39958;
  }
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i8 >> 2] = i3;
  HEAP32[i8 + 4 >> 2] = 40071;
  HEAP32[i8 + 8 >> 2] = 399;
  HEAP32[i8 + 12 >> 2] = 45893;
  HEAP32[i8 + 16 >> 2] = i2;
  HEAP32[i8 + 20 >> 2] = i1;
  _SDL_SetError(40045, i8) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i10;
 return i1 | 0;
}

function _png_read_transform_info(i8, i9) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = HEAP32[i8 + 216 >> 2] | 0;
 do if (i7 & 4096 | 0) {
  i2 = i9 + 25 | 0;
  i3 = HEAP8[i2 >> 0] | 0;
  i1 = HEAP16[i8 + 428 >> 1] | 0;
  if (i3 << 24 >> 24 == 3) {
   HEAP8[i2 >> 0] = i1 << 16 >> 16 ? 6 : 2;
   HEAP8[i9 + 24 >> 0] = 8;
   HEAP16[i9 + 22 >> 1] = 0;
   if (HEAP32[i8 + 416 >> 2] | 0) break;
   _png_error(i8, 65827);
  }
  if (!((i7 & 33554432 | 0) == 0 | i1 << 16 >> 16 == 0)) HEAP8[i2 >> 0] = i3 | 4;
  i1 = i9 + 24 | 0;
  if ((HEAPU8[i1 >> 0] | 0) < 8) HEAP8[i1 >> 0] = 8;
  HEAP16[i9 + 22 >> 1] = 0;
 } while (0);
 if (i7 & 128 | 0) {
  i6 = i9 + 170 | 0;
  i5 = i8 + 452 | 0;
  HEAP16[i6 >> 1] = HEAP16[i5 >> 1] | 0;
  HEAP16[i6 + 2 >> 1] = HEAP16[i5 + 2 >> 1] | 0;
  HEAP16[i6 + 4 >> 1] = HEAP16[i5 + 4 >> 1] | 0;
  HEAP16[i6 + 6 >> 1] = HEAP16[i5 + 6 >> 1] | 0;
  HEAP16[i6 + 8 >> 1] = HEAP16[i5 + 8 >> 1] | 0;
 }
 HEAP32[i9 + 40 >> 2] = HEAP32[i8 + 824 >> 2];
 i6 = i9 + 24 | 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (i1 << 24 >> 24 == 16) {
  if (!(i7 & 67108864)) i1 = 16; else {
   HEAP8[i6 >> 0] = 8;
   i1 = 8;
  }
  if (i7 & 1024) {
   HEAP8[i6 >> 0] = 8;
   i1 = 8;
  }
 }
 if (i7 & 16384 | 0) {
  i5 = i9 + 25 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] | 2;
 }
 if (i7 & 6291456 | 0) {
  i5 = i9 + 25 | 0;
  HEAP8[i5 >> 0] = HEAP8[i5 >> 0] & -3;
 }
 L30 : do if (i7 & 64 | 0) {
  i2 = i9 + 25 | 0;
  switch (HEAP8[i2 >> 0] | 0) {
  case 6:
  case 2:
   break;
  default:
   break L30;
  }
  if ((HEAP32[i8 + 612 >> 2] | 0) != 0 & i1 << 24 >> 24 == 8) HEAP8[i2 >> 0] = 3;
 } while (0);
 if ((i7 & 512 | 0) != 0 & i1 << 24 >> 24 == 8) if ((HEAP8[i9 + 25 >> 0] | 0) == 3) i1 = 8; else {
  HEAP8[i6 >> 0] = 16;
  i1 = 16;
 }
 if ((i7 & 4 | 0) != 0 & (i1 & 255) < 8) {
  HEAP8[i6 >> 0] = 8;
  i4 = 8;
 } else i4 = i1;
 i3 = i9 + 25 | 0;
 i1 = HEAP8[i3 >> 0] | 0;
 i2 = i1 << 24 >> 24 == 3 ? 1 : i1 & 2 | 1;
 i5 = i9 + 29 | 0;
 HEAP8[i5 >> 0] = i2;
 if (i7 & 262144) {
  i1 = i1 & -5;
  HEAP8[i3 >> 0] = i1;
  HEAP16[i9 + 22 >> 1] = 0;
 }
 if (i1 & 4) {
  i2 = i2 + 1 << 24 >> 24;
  HEAP8[i5 >> 0] = i2;
 }
 L48 : do if (!(i7 & 32768)) i3 = i2; else {
  switch (i1 << 24 >> 24) {
  case 0:
  case 2:
   break;
  default:
   {
    i3 = i2;
    break L48;
   }
  }
  i2 = i2 + 1 << 24 >> 24;
  HEAP8[i5 >> 0] = i2;
  if (!(i7 & 16777216)) i3 = i2; else {
   HEAP8[i3 >> 0] = i1 | 4;
   i3 = i2;
  }
 } while (0);
 if (!(i7 & 1048576)) {
  i2 = i3;
  i1 = i4;
 } else {
  i1 = HEAP8[i8 + 204 >> 0] | 0;
  if ((i4 & 255) < (i1 & 255)) HEAP8[i6 >> 0] = i1; else i1 = i4;
  i2 = HEAP8[i8 + 205 >> 0] | 0;
  if ((i3 & 255) < (i2 & 255)) HEAP8[i5 >> 0] = i2; else i2 = i3;
 }
 i1 = Math_imul(i1 & 255, i2 & 255) | 0;
 HEAP8[i9 + 30 >> 0] = i1;
 i1 = i1 & 255;
 i2 = HEAP32[i9 >> 2] | 0;
 if (i1 >>> 0 > 7) {
  i7 = Math_imul(i1 >>> 3, i2) | 0;
  i9 = i9 + 12 | 0;
  HEAP32[i9 >> 2] = i7;
  i9 = i8 + 404 | 0;
  HEAP32[i9 >> 2] = i7;
  return;
 } else {
  i7 = ((Math_imul(i1, i2) | 0) + 7 | 0) >>> 3;
  i9 = i9 + 12 | 0;
  HEAP32[i9 >> 2] = i7;
  i9 = i8 + 404 | 0;
  HEAP32[i9 >> 2] = i7;
  return;
 }
}

function _Blit_RGB565_32(i2, i7) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i10 = HEAP32[i2 + 16 >> 2] | 0;
 i8 = (HEAP32[i2 + 36 >> 2] | 0) / 4 | 0;
 if (!i3) return;
 i9 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 255;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i6 & 7) {
  case 0:
   {
    i4 = i9;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i9;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i9;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i9;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i9;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i9;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i9;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i9;
    i5 = 11;
    break;
   }
  default:
   {
    i5 = 12;
    break L4;
   }
  }
  while (1) if ((i5 | 0) == 4) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   i2 = i2 + 4 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i5 = i2 + 4 | 0;
   HEAP32[i2 >> 2] = (HEAP32[i7 + (((HEAPU8[i1 + 1 >> 0] | 0) << 1 | 1) << 2) >> 2] | 0) + (HEAP32[i7 + ((HEAPU8[i1 >> 0] | 0) << 1 << 2) >> 2] | 0);
   i1 = i1 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i2 = i5;
    i5 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i5 = 14;
   break;
  } else {
   i1 = i1 + i10 | 0;
   i2 = i5 + (i8 << 2) | 0;
  }
 }
 if ((i5 | 0) != 12) if ((i5 | 0) == 14) return;
}

function _main(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 i2 = __Znwj(8) | 0;
 __ZN4GameC2EPKciiiib(i2, 38530, 805240832, 805240832, 1366, 640, 0);
 HEAP32[19364] = i2;
 i2 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 38543, 100) | 0;
 __ZNKSt3__28ios_base6getlocEv(i3, i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 83620) | 0;
 i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i4, 10) | 0;
 __ZNSt3__26localeD2Ev(i3);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i2, i4) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
 i2 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i2, 38644, 18) | 0;
 __ZNKSt3__28ios_base6getlocEv(i3, i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 83620) | 0;
 i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i4, 10) | 0;
 __ZNSt3__26localeD2Ev(i3);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i2, i4) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i2, 38663, 32) | 0;
 __ZNKSt3__28ios_base6getlocEv(i3, 82748 + (HEAP32[(HEAP32[20687] | 0) + -12 >> 2] | 0) | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 83620) | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, 10) | 0;
 __ZNSt3__26localeD2Ev(i3);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(82748, i2) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(82748) | 0;
 i2 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 38696, 75) | 0;
 __ZNKSt3__28ios_base6getlocEv(i3, i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 83620) | 0;
 i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 63](i4, 10) | 0;
 __ZNSt3__26localeD2Ev(i3);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i2, i4) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i2, 38772, 79) | 0;
 __ZNKSt3__28ios_base6getlocEv(i3, 82748 + (HEAP32[(HEAP32[20687] | 0) + -12 >> 2] | 0) | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i3, 83620) | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, 10) | 0;
 __ZNSt3__26localeD2Ev(i3);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(82748, i2) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(82748) | 0;
 __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 38852, 81) | 0;
 _emscripten_set_main_loop(2, 0, 1);
 STACKTOP = i1;
 return 0;
}

function __ZN7Manager7refreshEv(i13) {
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0, i16 = 0;
 i10 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i16 + 12 | 0;
 i11 = i16 + 8 | 0;
 i14 = i16 + 4 | 0;
 i15 = i16;
 i8 = 0;
 do {
  i9 = i13 + 12 + (i8 * 12 | 0) | 0;
  i1 = HEAP32[i9 >> 2] | 0;
  i9 = i9 + 4 | 0;
  i2 = HEAP32[i9 >> 2] | 0;
  L3 : do if ((i1 | 0) == (i2 | 0)) {
   i3 = i1;
   i10 = 26;
  } else {
   i4 = 1 << i8;
   do {
    i3 = HEAP32[i1 >> 2] | 0;
    if (!(HEAP8[i3 + 4 >> 0] | 0)) {
     i3 = i1;
     i10 = 26;
     break L3;
    }
    if (!(HEAP32[i3 + 152 >> 2] & i4)) {
     i3 = i1;
     i10 = 26;
     break L3;
    }
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) != (i2 | 0));
  } while (0);
  if ((i10 | 0) == 26) {
   i10 = 0;
   if ((i3 | 0) != (i2 | 0)) {
    i1 = i3 + 4 | 0;
    if ((i1 | 0) == (i2 | 0)) i1 = i3; else {
     i7 = 1 << i8;
     i6 = i1;
     i1 = i3;
     do {
      i4 = HEAP32[i6 >> 2] | 0;
      i5 = i4;
      if (HEAP8[i4 + 4 >> 0] | 0) if (HEAP32[i4 + 152 >> 2] & i7) {
       HEAP32[i3 >> 2] = i5;
       i3 = i3 + 4 | 0;
       i1 = i3;
      }
      i6 = i6 + 4 | 0;
     } while ((i6 | 0) != (i2 | 0));
     i2 = HEAP32[i9 >> 2] | 0;
    }
    if ((i2 | 0) != (i1 | 0)) HEAP32[i9 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
   }
  }
  i8 = i8 + 1 | 0;
 } while ((i8 | 0) != 32);
 i2 = HEAP32[i13 >> 2] | 0;
 i9 = i13 + 4 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 i1 = i8;
 L25 : do if ((i2 | 0) == (i8 | 0)) i10 = 5; else while (1) {
  if (!(HEAP8[(HEAP32[i2 >> 2] | 0) + 4 >> 0] | 0)) {
   i10 = 5;
   break L25;
  }
  i2 = i2 + 4 | 0;
  if ((i2 | 0) == (i8 | 0)) {
   i2 = i8;
   break;
  }
 } while (0);
 if ((i10 | 0) == 5) if ((i2 | 0) == (i8 | 0)) i2 = i8; else {
  i3 = i2 + 4 | 0;
  if ((i3 | 0) != (i8 | 0)) {
   i1 = i2;
   do {
    i4 = HEAP32[i3 >> 2] | 0;
    if (HEAP8[i4 + 4 >> 0] | 0) {
     HEAP32[i3 >> 2] = 0;
     i7 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = i4;
     if (i7 | 0) {
      i5 = i7 + 8 | 0;
      i2 = HEAP32[i5 >> 2] | 0;
      if (i2 | 0) {
       i6 = i7 + 12 | 0;
       i4 = HEAP32[i6 >> 2] | 0;
       if ((i4 | 0) != (i2 | 0)) {
        do {
         i10 = i4 + -4 | 0;
         HEAP32[i6 >> 2] = i10;
         i4 = HEAP32[i10 >> 2] | 0;
         HEAP32[i10 >> 2] = 0;
         if (i4 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 511](i4);
         i4 = HEAP32[i6 >> 2] | 0;
        } while ((i4 | 0) != (i2 | 0));
        i2 = HEAP32[i5 >> 2] | 0;
       }
       __ZdlPv(i2);
      }
      __ZdlPv(i7);
     }
     i2 = i1 + 4 | 0;
     i1 = i2;
    }
    i3 = i3 + 4 | 0;
   } while ((i3 | 0) != (i8 | 0));
   i1 = HEAP32[i9 >> 2] | 0;
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i12 >> 2] = HEAP32[i15 >> 2];
 __ZNSt3__26vectorINS_10unique_ptrI6EntityNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE5eraseENS_11__wrap_iterIPKS5_EESC_(i13, i11, i12) | 0;
 STACKTOP = i16;
 return;
}

function _SDL_DrawLine1(i15, i18, i2, i8, i4, i19, i9) {
 i15 = i15 | 0;
 i18 = i18 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i9 = i9 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0;
 if ((i4 | 0) == (i2 | 0)) {
  i1 = (HEAP32[i15 + 20 >> 2] | 0) + (Math_imul((HEAP32[i15 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i15 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0, i4) | 0) | 0;
  if ((i18 | 0) > (i8 | 0)) {
   i3 = i1 + i8 | 0;
   i1 = (i9 | 0) != 0;
   i3 = i1 ? i3 : i3 + 1 | 0;
   i2 = i18 - i8 | 0;
  } else {
   i3 = i1 + i18 | 0;
   i2 = i8 - i18 | 0;
   i1 = (i9 | 0) != 0;
  }
  _SDL_memset(i3, i19, i2 + (i1 & 1) | 0) | 0;
  return;
 }
 if ((i18 | 0) == (i8 | 0)) {
  i5 = (HEAP32[i15 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i15 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  i1 = HEAP32[i15 + 20 >> 2] | 0;
  if ((i4 | 0) < (i2 | 0)) {
   i1 = i1 + (Math_imul(i5, i4) | 0) + i18 | 0;
   i3 = (i9 | 0) != 0;
   i1 = i3 ? i1 : i1 + i5 | 0;
   i4 = 0 - i4 | 0;
  } else {
   i1 = i1 + (Math_imul(i5, i2) | 0) + i18 | 0;
   i3 = (i9 | 0) != 0;
   i2 = 0 - i2 | 0;
  }
  i2 = i4 + i2 + (i3 & 1) | 0;
  if (!i2) return;
  i3 = i19 & 255;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP8[i1 >> 0] = i3;
   if (!i2) break; else i1 = i1 + i5 | 0;
  }
  return;
 }
 i17 = i18 - i8 | 0;
 i3 = i2 - i4 | 0;
 if ((((i17 | 0) < 0 ? 0 - i17 | 0 : i17) | 0) == (((i3 | 0) < 0 ? 0 - i3 | 0 : i3) | 0)) {
  i5 = (HEAP32[i15 + 16 >> 2] | 0) / (HEAPU8[(HEAP32[i15 + 4 >> 2] | 0) + 9 >> 0] | 0 | 0) | 0;
  i1 = HEAP32[i15 + 20 >> 2] | 0;
  if ((i4 | 0) < (i2 | 0)) {
   i1 = i1 + (Math_imul(i5, i4) | 0) + i8 | 0;
   i4 = i5 + ((i8 | 0) > (i18 | 0) ? -1 : 1) | 0;
   i2 = i3;
   i1 = (i9 | 0) == 0 ? i1 + i4 | 0 : i1;
  } else {
   i1 = i1 + (Math_imul(i5, i2) | 0) + i18 | 0;
   i2 = i4 - i2 | 0;
   i4 = i5 + ((i18 | 0) > (i8 | 0) ? -1 : 1) | 0;
  }
  i2 = i2 + ((i9 | 0) != 0 & 1) | 0;
  if (!i2) return;
  i3 = i19 & 255;
  while (1) {
   i2 = i2 + -1 | 0;
   HEAP8[i1 >> 0] = i3;
   if (!i2) break; else i1 = i1 + i4 | 0;
  }
  return;
 } else {
  i1 = i8 - i18 | 0;
  i1 = (i1 | 0) < 0 ? 0 - i1 | 0 : i1;
  i3 = i4 - i2 | 0;
  i3 = (i3 | 0) < 0 ? 0 - i3 | 0 : i3;
  if ((i1 | 0) < (i3 | 0)) {
   i16 = i1 << 1;
   i7 = 1;
   i6 = 0;
   i5 = i1 - i3 | 0;
   i17 = i16;
   i16 = i16 - i3 | 0;
   i1 = i3;
  } else {
   i16 = i3 << 1;
   i7 = 0;
   i6 = 1;
   i5 = i3 - i1 | 0;
   i17 = i16;
   i16 = i16 - i1 | 0;
  }
  i14 = i5 << 1;
  i13 = (i18 | 0) > (i8 | 0);
  i12 = i13 ? 0 - i6 | 0 : i6;
  i13 = i13 ? -1 : 1;
  i10 = (i4 | 0) < (i2 | 0);
  i11 = i10 ? 0 - i7 | 0 : i7;
  i10 = i10 ? -1 : 1;
  i9 = i1 + ((i9 | 0) != 0 & 1) | 0;
  if ((i9 | 0) <= 0) return;
  i7 = i19 & 255;
  i8 = i15 + 20 | 0;
  i6 = i15 + 16 | 0;
  i4 = i18;
  i5 = 0;
  i1 = i16;
  while (1) {
   HEAP8[(HEAP32[i8 >> 2] | 0) + (Math_imul(HEAP32[i6 >> 2] | 0, i2) | 0) + i4 >> 0] = i7;
   i3 = (i1 | 0) < 0;
   i5 = i5 + 1 | 0;
   if ((i5 | 0) >= (i9 | 0)) break; else {
    i2 = i2 + (i3 ? i11 : i10) | 0;
    i4 = (i3 ? i12 : i13) + i4 | 0;
    i1 = (i3 ? i17 : i14) + i1 | 0;
   }
  }
  return;
 }
}

function _SDL_Blit_RGBA8888_ARGB8888_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i25 = i19 + 28 | 0;
 i24 = HEAP32[i25 >> 2] | 0;
 i26 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i20 = i19 + 24 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i25 >> 2] = i2;
 if (!i24) return;
 i22 = i19 + 20 | 0;
 i23 = i19 + 32 | 0;
 i24 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i22 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i9 = i13 >>> 24;
    i11 = i13 >>> 16 & 255;
    i10 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (i24 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i27, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i6, i27) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i21 | 0;
    }
   }
   i1 = HEAP32[i25 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i23 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i25 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i26 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i20 >> 2] | 0;
 }
 HEAP32[i22 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i25 = i19 + 28 | 0;
 i24 = HEAP32[i25 >> 2] | 0;
 i26 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i20 = i19 + 24 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i25 >> 2] = i2;
 if (!i24) return;
 i22 = i19 + 20 | 0;
 i23 = i19 + 32 | 0;
 i24 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i22 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i10 = i13 >>> 24;
    i11 = i13 >>> 16 & 255;
    i9 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (i24 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i27, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i6, i27) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i21 | 0;
    }
   }
   i1 = HEAP32[i25 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i23 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i25 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i26 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i20 >> 2] | 0;
 }
 HEAP32[i22 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i25 = i19 + 28 | 0;
 i24 = HEAP32[i25 >> 2] | 0;
 i26 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i20 = i19 + 24 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i25 >> 2] = i2;
 if (!i24) return;
 i22 = i19 + 20 | 0;
 i23 = i19 + 32 | 0;
 i24 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i22 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i9 = i13 >>> 16 & 255;
    i11 = i13 >>> 8 & 255;
    i10 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (i24 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i27, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i6, i27) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i21 | 0;
    }
   }
   i1 = HEAP32[i25 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i23 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i25 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i26 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i20 >> 2] | 0;
 }
 HEAP32[i22 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i25 = i19 + 28 | 0;
 i24 = HEAP32[i25 >> 2] | 0;
 i26 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i24 | 0) | 0;
 i20 = i19 + 24 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i25 >> 2] = i2;
 if (!i24) return;
 i22 = i19 + 20 | 0;
 i23 = i19 + 32 | 0;
 i24 = (i1 & 48 | 0) != 0;
 i18 = i1 & 112;
 i17 = i19 + 12 | 0;
 i15 = HEAP32[i22 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i16 = i15;
 i1 = i2;
 i2 = i15;
 while (1) {
  if ((i4 | 0) > 65535) {
   i15 = ~i4;
   i15 = i4 + 65536 + ((i15 | 0) > -131072 ? i15 : -131072) | 0;
   i14 = i4 + -65536 - (i15 & -65536) | 0;
   i15 = i5 + 1 + (i15 >>> 16) | 0;
  } else {
   i14 = i4;
   i15 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i13 = ~i4;
     i13 = i4 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
     i5 = i5 + 1 + (i13 >>> 16) | 0;
     i1 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i17 >> 2] | 0, i15) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i13 & -65536) | 0;
    }
    i13 = HEAP32[i1 >> 2] | 0;
    i10 = i13 >>> 16 & 255;
    i11 = i13 >>> 8 & 255;
    i9 = i13 & 255;
    i13 = i13 >>> 24;
    i12 = HEAP32[i2 >> 2] | 0;
    i6 = i12 >>> 16 & 255;
    i7 = i12 >>> 8 & 255;
    i8 = i12 & 255;
    i12 = i12 >>> 24;
    if (i24 & (i13 | 0) != 255) {
     i9 = ((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i13) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0;
    }
    switch (i18 & 127) {
    case 16:
     {
      i27 = i13 ^ 255;
      i12 = (((Math_imul(i27, i12) | 0) >>> 0) / 255 | 0) + i13 | 0;
      i8 = i10 + (((Math_imul(i27, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i27) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i9 + (((Math_imul(i6, i27) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i9 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i10 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i10, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i9, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8 | i12 << 24;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i21 | 0;
    }
   }
   i1 = HEAP32[i25 >> 2] | 0;
  }
  i3 = i16 + (HEAP32[i23 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i25 >> 2] = i2;
  if (!i1) break;
  i4 = i14 + i26 | 0;
  i5 = i15;
  i16 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i20 >> 2] | 0;
 }
 HEAP32[i22 >> 2] = i3;
 return;
}

function _png_create_png_struct(i7, i4, i5, i6, i1, i2, i3) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056);
 i9 = 4;
 i11 = _malloc(40) | 0;
 HEAP32[i11 >> 2] = 0;
 i10 = i12 + 156 | 0;
 i8 = i12;
 _memset(i10 | 0, 0, 900) | 0;
 HEAP32[i10 + 748 >> 2] = 1e6;
 HEAP32[i10 + 752 >> 2] = 1e6;
 HEAP32[i10 + 756 >> 2] = 1e3;
 HEAP32[i10 + 760 >> 2] = 8e6;
 __THREW__ = 0;
 invoke_viiii(12, i10 | 0, i1 | 0, i2 | 0, i3 | 0);
 i1 = __THREW__;
 __THREW__ = 0;
 if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
  i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i11 | 0, i9 | 0) | 0;
  if (!i2) _longjmp(i1 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else i2 = -1;
 if ((i2 | 0) == 1) i1 = tempRet0; else {
  __THREW__ = 0;
  invoke_viiii(13, i10 | 0, i4 | 0, i5 | 0, i6 | 0);
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i11 | 0, i9 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) i1 = tempRet0; else {
   i11 = _saveSetjmp(i8, 1, i11 | 0, i9 | 0) | 0;
   i9 = tempRet0;
   __THREW__ = 0;
   i1 = __THREW__;
   __THREW__ = 0;
   if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
    i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i11 | 0, i9 | 0) | 0;
    if (!i2) _longjmp(i1 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i2 = -1;
   if ((i2 | 0) == 1) i1 = tempRet0; else i1 = 0;
  }
 }
 while (1) {
  if (i1 | 0) {
   i1 = 0;
   i2 = 11;
   break;
  }
  i4 = i10 + 160 | 0;
  HEAP32[i4 >> 2] = i8;
  i5 = i10 + 164 | 0;
  HEAP32[i5 >> 2] = 0;
  i6 = i10 + 156 | 0;
  HEAP32[i6 >> 2] = 39;
  __THREW__ = 0;
  i1 = invoke_iii(43, i10 | 0, i7 | 0) | 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i3 = _testSetjmp(HEAP32[i2 >> 2] | 0, i11 | 0, i9 | 0) | 0;
   if (!i3) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i3 = -1;
  if ((i3 | 0) == 1) {
   i1 = tempRet0;
   continue;
  }
  if (!i1) {
   i1 = 0;
   i2 = 11;
   break;
  }
  __THREW__ = 0;
  i3 = invoke_iii(44, i10 | 0, 900) | 0;
  i1 = __THREW__;
  __THREW__ = 0;
  if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
   i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i11 | 0, i9 | 0) | 0;
   if (!i2) _longjmp(i1 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i2 = -1;
  if ((i2 | 0) == 1) i1 = tempRet0; else {
   i2 = 9;
   break;
  }
 }
 if ((i2 | 0) == 9) {
  if (!i3) {
   i10 = 0;
   _free(i11 | 0);
   STACKTOP = i12;
   return i10 | 0;
  }
  HEAP32[i10 + 256 >> 2] = 59;
  HEAP32[i10 + 260 >> 2] = 57;
  HEAP32[i10 + 264 >> 2] = i3;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  _memcpy(i3 | 0, i10 | 0, 900) | 0;
  i10 = i3;
  _free(i11 | 0);
  STACKTOP = i12;
  return i10 | 0;
 } else if ((i2 | 0) == 11) {
  _free(i11 | 0);
  STACKTOP = i12;
  return i1 | 0;
 }
 return 0;
}

function _SDL_Blit_BGR888_ARGB8888_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i24 = i19 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i20 = i19 + 24 | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i24 >> 2] = i23 + -1;
 if (!i23) return;
 i22 = i19 + 20 | 0;
 i23 = i19 + 32 | 0;
 i18 = i1 & 112;
 i16 = i19 + 12 | 0;
 i17 = (i18 & 127) == 16;
 i1 = HEAP32[i22 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i15 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i14 = ~i3;
   i14 = i3 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i3 = i3 + -65536 - (i14 & -65536) | 0;
   i4 = i4 + 1 + (i14 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  L9 : do if (i2 | 0) {
   if (i17) {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    while (1) {
     if ((i5 | 0) > 65535) {
      i14 = ~i5;
      i14 = i5 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
      i6 = i6 + 1 + (i14 >>> 16) | 0;
      i2 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
      i5 = i5 + -65536 - (i14 & -65536) | 0;
     }
     i14 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i14 & 65280 | i14 << 16 | i14 >>> 16 & 255 | -16777216;
     if (!i7) break L9; else {
      i1 = i1 + 4 | 0;
      i5 = i5 + i21 | 0;
      i7 = i7 + -1 | 0;
     }
    }
   } else {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
   }
   while (1) {
    if ((i5 | 0) > 65535) {
     i14 = ~i5;
     i14 = i5 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
     i6 = i6 + 1 + (i14 >>> 16) | 0;
     i2 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i14 & -65536) | 0;
    }
    i13 = HEAP32[i2 >> 2] | 0;
    i10 = i13 >>> 16 & 255;
    i12 = i13 >>> 8 & 255;
    i13 = i13 & 255;
    i14 = HEAP32[i1 >> 2] | 0;
    i8 = i14 >>> 16 & 255;
    i9 = i14 >>> 8 & 255;
    i11 = i14 & 255;
    i14 = i14 & -16777216;
    switch (i18 & 127) {
    case 64:
     {
      i11 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
      i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i8, i13) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i8 = i8 + i13 | 0;
      i9 = i9 + i12 | 0;
      i11 = i10 + i11 | 0;
      i11 = i11 >>> 0 < 255 ? i11 : 255;
      i9 = i9 >>> 0 < 255 ? i9 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i9 << 8 | i8 << 16 | i11 | i14;
    if (!i7) break L9; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i21 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } while (0);
  i1 = i15 + (HEAP32[i23 >> 2] | 0) | 0;
  i15 = HEAP32[i24 >> 2] | 0;
  HEAP32[i24 >> 2] = i15 + -1;
  if (!i15) break;
  i3 = i3 + i25 | 0;
  i15 = i1;
  i2 = HEAP32[i20 >> 2] | 0;
 }
 HEAP32[i22 >> 2] = i1;
 return;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i13, i10, i11, i12, i1) {
 i13 = i13 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0;
 i14 = 0;
 i9 = i10;
 if (!(i1 & 4)) {
  i2 = 0;
  i1 = i13;
 } else if ((i9 - i13 | 0) > 2) if ((HEAP8[i13 >> 0] | 0) == -17) if ((HEAP8[i13 + 1 >> 0] | 0) == -69) {
  i2 = 0;
  i1 = (HEAP8[i13 + 2 >> 0] | 0) == -65 ? i13 + 3 | 0 : i13;
 } else {
  i2 = 0;
  i1 = i13;
 } else {
  i2 = 0;
  i1 = i13;
 } else {
  i2 = 0;
  i1 = i13;
 }
 L6 : while (1) {
  if (!(i2 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
   i14 = 33;
   break;
  }
  i7 = HEAP8[i1 >> 0] | 0;
  i8 = i7 & 255;
  if (i8 >>> 0 > i12 >>> 0) {
   i14 = 33;
   break;
  }
  do if (i7 << 24 >> 24 > -1) i1 = i1 + 1 | 0; else {
   if ((i7 & 255) < 194) {
    i14 = 33;
    break L6;
   }
   if ((i7 & 255) < 224) {
    if ((i9 - i1 | 0) < 2) {
     i14 = 33;
     break L6;
    }
    i3 = HEAPU8[i1 + 1 >> 0] | 0;
    if ((i3 & 192 | 0) != 128) {
     i14 = 33;
     break L6;
    }
    if ((i3 & 63 | i8 << 6 & 1984) >>> 0 > i12 >>> 0) {
     i14 = 33;
     break L6;
    } else {
     i1 = i1 + 2 | 0;
     break;
    }
   }
   if ((i7 & 255) < 240) {
    i3 = i1;
    if ((i9 - i3 | 0) < 3) {
     i14 = 33;
     break L6;
    }
    i5 = HEAP8[i1 + 1 >> 0] | 0;
    i4 = HEAP8[i1 + 2 >> 0] | 0;
    switch (i7 << 24 >> 24) {
    case -32:
     {
      if ((i5 & -32) << 24 >> 24 != -96) {
       i1 = i3;
       break L6;
      }
      break;
     }
    case -19:
     {
      if ((i5 & -32) << 24 >> 24 != -128) {
       i1 = i3;
       break L6;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i1 = i3;
      break L6;
     }
    }
    i3 = i4 & 255;
    if ((i3 & 192 | 0) != 128) {
     i14 = 33;
     break L6;
    }
    if (((i5 & 63) << 6 | i8 << 12 & 61440 | i3 & 63) >>> 0 > i12 >>> 0) {
     i14 = 33;
     break L6;
    } else {
     i1 = i1 + 3 | 0;
     break;
    }
   }
   if ((i7 & 255) >= 245) {
    i14 = 33;
    break L6;
   }
   i3 = i1;
   if ((i11 - i2 | 0) >>> 0 < 2 | (i9 - i3 | 0) < 4) {
    i14 = 33;
    break L6;
   }
   i6 = HEAP8[i1 + 1 >> 0] | 0;
   i4 = HEAP8[i1 + 2 >> 0] | 0;
   i5 = HEAP8[i1 + 3 >> 0] | 0;
   switch (i7 << 24 >> 24) {
   case -16:
    {
     if ((i6 + 112 & 255) >= 48) {
      i1 = i3;
      break L6;
     }
     break;
    }
   case -12:
    {
     if ((i6 & -16) << 24 >> 24 != -128) {
      i1 = i3;
      break L6;
     }
     break;
    }
   default:
    if ((i6 & -64) << 24 >> 24 != -128) {
     i1 = i3;
     break L6;
    }
   }
   i4 = i4 & 255;
   if ((i4 & 192 | 0) != 128) {
    i14 = 33;
    break L6;
   }
   i3 = i5 & 255;
   if ((i3 & 192 | 0) != 128) {
    i14 = 33;
    break L6;
   }
   if (((i6 & 63) << 12 | i8 << 18 & 1835008 | i4 << 6 & 4032 | i3 & 63) >>> 0 > i12 >>> 0) {
    i14 = 33;
    break L6;
   } else {
    i2 = i2 + 1 | 0;
    i1 = i1 + 4 | 0;
   }
  } while (0);
  i2 = i2 + 1 | 0;
 }
 return i1 - i13 | 0;
}

function _SDL_EnclosePoints(i13, i14, i3, i15) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0, i18 = 0;
 i7 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i16 + 8 | 0;
 i1 = i16;
 if (!i13) {
  HEAP32[i1 >> 2] = 47095;
  _SDL_SetError(59509, i1) | 0;
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((i14 | 0) < 1) {
  HEAP32[i2 >> 2] = 47102;
  _SDL_SetError(59509, i2) | 0;
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if (!i3) {
  if (!i15) {
   i15 = 1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i5 = HEAP32[i13 >> 2] | 0;
  i1 = HEAP32[i13 + 4 >> 2] | 0;
  if ((i14 | 0) > 1) {
   i6 = 1;
   i2 = i1;
   i4 = i1;
   i3 = i5;
   i1 = i5;
   do {
    i12 = i13 + (i6 << 3) | 0;
    i11 = HEAP32[i12 >> 2] | 0;
    i12 = HEAP32[i12 + 4 >> 2] | 0;
    i10 = (i11 | 0) < (i1 | 0);
    i3 = i10 ? i3 : (i11 | 0) > (i3 | 0) ? i11 : i3;
    i1 = i10 ? i11 : i1;
    i11 = (i12 | 0) < (i2 | 0);
    i4 = i11 ? i4 : (i12 | 0) > (i4 | 0) ? i12 : i4;
    i2 = i11 ? i12 : i2;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i14 | 0));
   i7 = 18;
  } else {
   i2 = i1;
   i4 = i1;
   i3 = i5;
   i1 = i5;
  }
 } else {
  i11 = HEAP32[i3 >> 2] | 0;
  i12 = HEAP32[i3 + 4 >> 2] | 0;
  i7 = HEAP32[i3 + 8 >> 2] | 0;
  i10 = i7 + i11 | 0;
  i8 = HEAP32[i3 + 12 >> 2] | 0;
  i9 = i8 + i12 | 0;
  if (!((i7 | 0) > 0 & (i8 | 0) > 0)) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
  if (!i15) {
   i1 = 0;
   while (1) {
    i15 = i13 + (i1 << 3) | 0;
    i8 = HEAP32[i15 >> 2] | 0;
    i15 = HEAP32[i15 + 4 >> 2] | 0;
    if ((i15 | 0) < (i9 | 0) & (((i8 | 0) >= (i10 | 0) | (i8 | 0) < (i11 | 0) | (i15 | 0) < (i12 | 0)) ^ 1)) {
     i1 = 1;
     i7 = 20;
     break;
    }
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i14 | 0)) {
     i1 = 0;
     i7 = 20;
     break;
    }
   }
   if ((i7 | 0) == 20) {
    STACKTOP = i16;
    return i1 | 0;
   }
  } else {
   i3 = 0;
   i6 = 0;
   i8 = 0;
   i4 = 0;
   i1 = 0;
   i2 = 0;
  }
  do {
   i5 = i13 + (i8 << 3) | 0;
   i7 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[i5 + 4 >> 2] | 0;
   if ((i5 | 0) < (i9 | 0) & (((i7 | 0) >= (i10 | 0) | (i7 | 0) < (i11 | 0) | (i5 | 0) < (i12 | 0)) ^ 1)) if (!i6) {
    i6 = 1;
    i4 = i5;
    i2 = i5;
    i1 = i7;
    i3 = i7;
   } else {
    i17 = (i7 | 0) < (i1 | 0);
    i18 = (i5 | 0) < (i2 | 0);
    i4 = i18 ? i4 : (i5 | 0) > (i4 | 0) ? i5 : i4;
    i2 = i18 ? i5 : i2;
    i1 = i17 ? i7 : i1;
    i3 = i17 ? i3 : (i7 | 0) > (i3 | 0) ? i7 : i3;
   }
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) != (i14 | 0));
  if (!i6) {
   i18 = 0;
   STACKTOP = i16;
   return i18 | 0;
  } else i7 = 18;
 }
 if ((i7 | 0) == 18) if (!i15) {
  i18 = 1;
  STACKTOP = i16;
  return i18 | 0;
 }
 HEAP32[i15 >> 2] = i1;
 HEAP32[i15 + 4 >> 2] = i2;
 HEAP32[i15 + 8 >> 2] = i3 + 1 - i1;
 HEAP32[i15 + 12 >> 2] = i4 + 1 - i2;
 i18 = 1;
 STACKTOP = i16;
 return i18 | 0;
}

function _SDL_Blit_BGR888_RGB888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i23 = i18 + 28 | 0;
 i22 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i22 | 0) | 0;
 i19 = i18 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i23 >> 2] = i22 + -1;
 if (!i22) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i17 = i1 & 112;
 i15 = i18 + 12 | 0;
 i16 = (i17 & 127) == 16;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i14 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i13 = ~i3;
   i13 = i3 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i3 = i3 + -65536 - (i13 & -65536) | 0;
   i4 = i4 + 1 + (i13 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  L9 : do if (i2 | 0) {
   if (i16) {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    while (1) {
     if ((i5 | 0) > 65535) {
      i13 = ~i5;
      i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
      i6 = i6 + 1 + (i13 >>> 16) | 0;
      i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
      i5 = i5 + -65536 - (i13 & -65536) | 0;
     }
     i13 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i13 & 65280 | i13 << 16 & 16711680 | i13 >>> 16 & 255;
     if (!i7) break L9; else {
      i1 = i1 + 4 | 0;
      i5 = i5 + i20 | 0;
      i7 = i7 + -1 | 0;
     }
    }
   } else {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    i13 = i7;
   }
   while (1) {
    if ((i5 | 0) > 65535) {
     i12 = ~i5;
     i12 = i5 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i10 = HEAP32[i1 >> 2] | 0;
    i7 = i10 >>> 16 & 255;
    i8 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    switch (i17 & 127) {
    case 64:
     {
      i10 = ((Math_imul(i9, i10) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i7 = i7 + i12 | 0;
      i8 = i8 + i11 | 0;
      i10 = i9 + i10 | 0;
      i10 = i10 >>> 0 < 255 ? i10 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i8 << 8 | i7 << 16 | i10;
    if (!i13) break L9; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i20 | 0;
     i13 = i13 + -1 | 0;
    }
   }
  } while (0);
  i1 = i14 + (HEAP32[i22 >> 2] | 0) | 0;
  i14 = HEAP32[i23 >> 2] | 0;
  HEAP32[i23 >> 2] = i14 + -1;
  if (!i14) break;
  i3 = i3 + i24 | 0;
  i14 = i1;
  i2 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i1;
 return;
}

function _GLES2_RenderDrawLines(i1, i8, i7) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, f13 = f0, f14 = f0;
 i11 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i12;
 i9 = i1 + 320 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 if ((_GLES2_SetDrawingState(i1) | 0) < 0) {
  i11 = -1;
  STACKTOP = i12;
  return i11 | 0;
 }
 i4 = i7 << 3;
 i1 = i4;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
 if ((i7 | 0) > 0) {
  i1 = 0;
  do {
   i3 = i8 + (i1 << 3) | 0;
   f14 = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + Math_fround(.5));
   f13 = Math_fround(Math_fround(HEAPF32[i3 + 4 >> 2]) + Math_fround(.5));
   i3 = i1 << 1;
   HEAPF32[i5 + (i3 << 2) >> 2] = f14;
   HEAPF32[i5 + ((i3 | 1) << 2) >> 2] = f13;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i7 | 0));
 }
 i3 = HEAP32[i9 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < i4 >>> 0) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, i4, i5, 35040);
  HEAP32[i1 >> 2] = i4;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, i4, i5);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 i2 = i6 + 76 | 0;
 FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 63](3, 0, i7);
 if ((i7 | 0) == 2) {
  i1 = 1;
  i11 = 12;
 } else {
  f14 = Math_fround(HEAPF32[i8 >> 2]);
  i1 = i7 + -1 | 0;
  if (f14 != Math_fround(HEAPF32[i8 + (i1 << 3) >> 2])) i11 = 12; else {
   f14 = Math_fround(HEAPF32[i8 + 4 >> 2]);
   if (f14 != Math_fround(HEAPF32[i8 + (i1 << 3) + 4 >> 2])) i11 = 12;
  }
 }
 if ((i11 | 0) == 12) FUNCTION_TABLE_viii[HEAP32[i2 >> 2] & 63](0, i1, 1);
 i1 = HEAP32[i9 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 } else i2 = 89710;
 while (1) {
  if (!i2) i11 = 17; else if (!(HEAP8[i2 >> 0] | 0)) i11 = 17; else i3 = i2;
  if ((i11 | 0) == 17) {
   i11 = 0;
   i3 = 39958;
  }
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i10 >> 2] = i3;
  HEAP32[i10 + 4 >> 2] = 40071;
  HEAP32[i10 + 8 >> 2] = 1514;
  HEAP32[i10 + 12 >> 2] = 45826;
  HEAP32[i10 + 16 >> 2] = i2;
  HEAP32[i10 + 20 >> 2] = i1;
  _SDL_SetError(40045, i10) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _SDL_Blit_RGB888_BGR888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i23 = i18 + 28 | 0;
 i22 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i22 | 0) | 0;
 i19 = i18 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i23 >> 2] = i22 + -1;
 if (!i22) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i17 = i1 & 112;
 i15 = i18 + 12 | 0;
 i16 = (i17 & 127) == 16;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i14 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i13 = ~i3;
   i13 = i3 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i3 = i3 + -65536 - (i13 & -65536) | 0;
   i4 = i4 + 1 + (i13 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  L9 : do if (i2 | 0) {
   if (i16) {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    while (1) {
     if ((i5 | 0) > 65535) {
      i13 = ~i5;
      i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
      i6 = i6 + 1 + (i13 >>> 16) | 0;
      i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
      i5 = i5 + -65536 - (i13 & -65536) | 0;
     }
     i13 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i13 & 65280 | i13 >>> 16 & 255 | i13 << 16 & 16711680;
     if (!i7) break L9; else {
      i1 = i1 + 4 | 0;
      i5 = i5 + i20 | 0;
      i7 = i7 + -1 | 0;
     }
    }
   } else {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    i13 = i7;
   }
   while (1) {
    if ((i5 | 0) > 65535) {
     i12 = ~i5;
     i12 = i5 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i12 & -65536) | 0;
    }
    i9 = HEAP32[i2 >> 2] | 0;
    i12 = i9 >>> 16 & 255;
    i11 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i7 = HEAP32[i1 >> 2] | 0;
    i10 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    switch (i17 & 127) {
    case 64:
     {
      i10 = ((Math_imul(i10, i9) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i12, i7) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i7 = i12 + i7 | 0;
      i8 = i8 + i11 | 0;
      i10 = i10 + i9 | 0;
      i10 = i10 >>> 0 < 255 ? i10 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i8 << 8 | i7 | i10 << 16;
    if (!i13) break L9; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i20 | 0;
     i13 = i13 + -1 | 0;
    }
   }
  } while (0);
  i1 = i14 + (HEAP32[i22 >> 2] | 0) | 0;
  i14 = HEAP32[i23 >> 2] | 0;
  HEAP32[i23 >> 2] = i14 + -1;
  if (!i14) break;
  i3 = i3 + i24 | 0;
  i14 = i1;
  i2 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i1;
 return;
}

function _SDL_PrivateSendMouseMotion(i8, i12, i6, i7, i1) {
 i8 = i8 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i13 = i14;
 i9 = i14 + 56 | 0;
 if (HEAP32[19511] | 0) {
  HEAP32[i13 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  _SDL_GetWindowSize(i8, i13, i9);
  i4 = (HEAP32[i13 >> 2] | 0) / 2 | 0;
  HEAP32[i13 >> 2] = i4;
  i5 = (HEAP32[i9 >> 2] | 0) / 2 | 0;
  HEAP32[i9 >> 2] = i5;
  if ((i4 | 0) == (i7 | 0) & (i5 | 0) == (i1 | 0)) {
   HEAP32[19507] = i7;
   HEAP32[19508] = i1;
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i3 = (i8 | 0) == 0 ? HEAP32[19502] | 0 : i8;
  do if (i3 | 0) {
   i2 = HEAP32[19496] | 0;
   if (i2 | 0) {
    FUNCTION_TABLE_viii[i2 & 63](i3, i4, i5);
    break;
   }
   i2 = HEAP32[19501] | 0;
   if (_SDL_UpdateMouseFocus(i3, i4, i5) | 0) _SDL_PrivateSendMouseMotion(i3, i2, 0, i4, i5) | 0;
  } while (0);
 }
 i11 = (i6 | 0) != 0;
 i2 = HEAP32[19507] | 0;
 if (i11) {
  i6 = i1;
  i10 = i7;
  i1 = (HEAP32[19508] | 0) + i1 | 0;
  i7 = i2 + i7 | 0;
 } else {
  i6 = i1 - (HEAP32[19508] | 0) | 0;
  i10 = i7 - i2 | 0;
 }
 if (!(i6 | i10)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 i2 = HEAP32[19510] | 0;
 if (!i2) {
  HEAP32[19503] = i7;
  i3 = i1;
 } else {
  HEAP32[19503] = (HEAP32[19503] | 0) + i10;
  i3 = (HEAP32[19504] | 0) + i6 | 0;
 }
 HEAP32[19504] = i3;
 if (i8) if (!(HEAP32[i8 + 48 >> 2] & 16384)) {
  HEAP32[i13 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  _SDL_GetWindowSize(HEAP32[19502] | 0, i13, i9);
  i8 = HEAP32[i13 >> 2] | 0;
  i2 = i8 + -1 | 0;
  HEAP32[i13 >> 2] = i2;
  i4 = HEAP32[i9 >> 2] | 0;
  i5 = i4 + -1 | 0;
  HEAP32[i9 >> 2] = i5;
  i3 = HEAP32[19503] | 0;
  i9 = (i3 | 0) < (i8 | 0);
  i2 = i9 ? i3 : i2;
  i3 = (i2 | 0) < 0;
  if (i3 | i9 ^ 1) HEAP32[19503] = i3 ? 0 : i2;
  i2 = HEAP32[19504] | 0;
  i9 = (i2 | 0) >= (i4 | 0);
  i2 = i9 ? i5 : i2;
  i3 = (i2 | 0) < 0;
  if (i9 | i3) HEAP32[19504] = i3 ? 0 : i2;
  i2 = HEAP32[19510] | 0;
 }
 HEAP32[19505] = (HEAP32[19505] | 0) + i10;
 HEAP32[19506] = (HEAP32[19506] | 0) + i6;
 if ((HEAP32[19517] | 0) != 0 & (i2 | 0) == 0) {
  i2 = HEAP32[19494] | 0;
  if (i2 | 0) {
   i3 = HEAP32[19516] | 0;
   if (i3 | 0) FUNCTION_TABLE_vi[i2 & 511](i3);
  }
 }
 if ((_SDL_EventState(1024, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i13 >> 2] = 1024;
  i2 = HEAP32[19502] | 0;
  if (!i2) i2 = 0; else i2 = HEAP32[i2 + 4 >> 2] | 0;
  HEAP32[i13 + 8 >> 2] = i2;
  HEAP32[i13 + 12 >> 2] = i12;
  HEAP32[i13 + 16 >> 2] = HEAP32[19509];
  HEAP32[i13 + 20 >> 2] = HEAP32[19503];
  HEAP32[i13 + 24 >> 2] = HEAP32[19504];
  HEAP32[i13 + 28 >> 2] = i10;
  HEAP32[i13 + 32 >> 2] = i6;
  i2 = (_SDL_PushEvent(i13) | 0) > 0 & 1;
 } else i2 = 0;
 if (i11) {
  HEAP32[19507] = HEAP32[19503];
  i1 = HEAP32[19504] | 0;
 } else HEAP32[19507] = i7;
 HEAP32[19508] = i1;
 i13 = i2;
 STACKTOP = i14;
 return i13 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Blend_Scale(i19) {
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i19 + 52 >> 2] | 0;
 i24 = i19 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i19 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i20 = i19 + 24 | 0;
 i2 = HEAP32[i20 >> 2] | 0;
 i21 = (HEAP32[i19 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i24 >> 2] = i23 + -1;
 if (!i23) return;
 i22 = i19 + 20 | 0;
 i23 = i19 + 32 | 0;
 i18 = i1 & 112;
 i16 = i19 + 12 | 0;
 i17 = (i18 & 127) == 16;
 i1 = HEAP32[i22 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i15 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i14 = ~i3;
   i14 = i3 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i3 = i3 + -65536 - (i14 & -65536) | 0;
   i4 = i4 + 1 + (i14 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  L9 : do if (i2 | 0) {
   if (i17) {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    while (1) {
     if ((i5 | 0) > 65535) {
      i14 = ~i5;
      i14 = i5 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
      i6 = i6 + 1 + (i14 >>> 16) | 0;
      i2 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
      i5 = i5 + -65536 - (i14 & -65536) | 0;
     }
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] | -16777216;
     if (!i7) break L9; else {
      i1 = i1 + 4 | 0;
      i5 = i5 + i21 | 0;
      i7 = i7 + -1 | 0;
     }
    }
   } else {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
   }
   while (1) {
    if ((i5 | 0) > 65535) {
     i14 = ~i5;
     i14 = i5 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
     i6 = i6 + 1 + (i14 >>> 16) | 0;
     i2 = (HEAP32[i19 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i14 & -65536) | 0;
    }
    i10 = HEAP32[i2 >> 2] | 0;
    i13 = i10 >>> 16 & 255;
    i12 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    i14 = HEAP32[i1 >> 2] | 0;
    i8 = i14 >>> 16 & 255;
    i9 = i14 >>> 8 & 255;
    i11 = i14 & 255;
    i14 = i14 & -16777216;
    switch (i18 & 127) {
    case 64:
     {
      i11 = ((Math_imul(i11, i10) | 0) >>> 0) / 255 | 0;
      i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i8, i13) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i8 = i8 + i13 | 0;
      i9 = i9 + i12 | 0;
      i11 = i11 + i10 | 0;
      i11 = i11 >>> 0 < 255 ? i11 : 255;
      i9 = i9 >>> 0 < 255 ? i9 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i9 << 8 | i8 << 16 | i11 | i14;
    if (!i7) break L9; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i21 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } while (0);
  i1 = i15 + (HEAP32[i23 >> 2] | 0) | 0;
  i15 = HEAP32[i24 >> 2] | 0;
  HEAP32[i24 >> 2] = i15 + -1;
  if (!i15) break;
  i3 = i3 + i25 | 0;
  i15 = i1;
  i2 = HEAP32[i20 >> 2] | 0;
 }
 HEAP32[i22 >> 2] = i1;
 return;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i13, i10, i11, i12, i1) {
 i13 = i13 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i14 = 0;
 i14 = 0;
 i9 = i10;
 if (!(i1 & 4)) {
  i8 = 0;
  i1 = i13;
 } else if ((i9 - i13 | 0) > 2) if ((HEAP8[i13 >> 0] | 0) == -17) if ((HEAP8[i13 + 1 >> 0] | 0) == -69) {
  i8 = 0;
  i1 = (HEAP8[i13 + 2 >> 0] | 0) == -65 ? i13 + 3 | 0 : i13;
 } else {
  i8 = 0;
  i1 = i13;
 } else {
  i8 = 0;
  i1 = i13;
 } else {
  i8 = 0;
  i1 = i13;
 }
 L6 : while (1) {
  if (!(i8 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
   i14 = 34;
   break;
  }
  i6 = HEAP8[i1 >> 0] | 0;
  i7 = i6 & 255;
  do if (i6 << 24 >> 24 > -1) {
   if (i7 >>> 0 > i12 >>> 0) {
    i14 = 34;
    break L6;
   }
   i1 = i1 + 1 | 0;
  } else {
   if ((i6 & 255) < 194) {
    i14 = 34;
    break L6;
   }
   if ((i6 & 255) < 224) {
    if ((i9 - i1 | 0) < 2) {
     i14 = 34;
     break L6;
    }
    i2 = HEAPU8[i1 + 1 >> 0] | 0;
    if ((i2 & 192 | 0) != 128) {
     i14 = 34;
     break L6;
    }
    if ((i2 & 63 | i7 << 6 & 1984) >>> 0 > i12 >>> 0) {
     i14 = 34;
     break L6;
    }
    i1 = i1 + 2 | 0;
    break;
   }
   if ((i6 & 255) < 240) {
    i2 = i1;
    if ((i9 - i2 | 0) < 3) {
     i14 = 34;
     break L6;
    }
    i4 = HEAP8[i1 + 1 >> 0] | 0;
    i3 = HEAP8[i1 + 2 >> 0] | 0;
    switch (i6 << 24 >> 24) {
    case -32:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = i2;
       break L6;
      }
      break;
     }
    case -19:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = i2;
       break L6;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = i2;
      break L6;
     }
    }
    i2 = i3 & 255;
    if ((i2 & 192 | 0) != 128) {
     i14 = 34;
     break L6;
    }
    if (((i4 & 63) << 6 | i7 << 12 & 61440 | i2 & 63) >>> 0 > i12 >>> 0) {
     i14 = 34;
     break L6;
    } else {
     i1 = i1 + 3 | 0;
     break;
    }
   }
   if ((i6 & 255) >= 245) {
    i14 = 34;
    break L6;
   }
   i2 = i1;
   if ((i9 - i2 | 0) < 4) {
    i14 = 34;
    break L6;
   }
   i5 = HEAP8[i1 + 1 >> 0] | 0;
   i3 = HEAP8[i1 + 2 >> 0] | 0;
   i4 = HEAP8[i1 + 3 >> 0] | 0;
   switch (i6 << 24 >> 24) {
   case -16:
    {
     if ((i5 + 112 & 255) >= 48) {
      i1 = i2;
      break L6;
     }
     break;
    }
   case -12:
    {
     if ((i5 & -16) << 24 >> 24 != -128) {
      i1 = i2;
      break L6;
     }
     break;
    }
   default:
    if ((i5 & -64) << 24 >> 24 != -128) {
     i1 = i2;
     break L6;
    }
   }
   i3 = i3 & 255;
   if ((i3 & 192 | 0) != 128) {
    i14 = 34;
    break L6;
   }
   i2 = i4 & 255;
   if ((i2 & 192 | 0) != 128) {
    i14 = 34;
    break L6;
   }
   if (((i5 & 63) << 12 | i7 << 18 & 1835008 | i3 << 6 & 4032 | i2 & 63) >>> 0 > i12 >>> 0) {
    i14 = 34;
    break L6;
   } else i1 = i1 + 4 | 0;
  } while (0);
  i8 = i8 + 1 | 0;
 }
 return i1 - i13 | 0;
}

function _png_do_strip_channel(i6, i8, i1) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = i6 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i5 = i8 + i3 | 0;
 i7 = i6 + 10 | 0;
 switch (HEAP8[i7 >> 0] | 0) {
 case 2:
  {
   switch (HEAP8[i6 + 9 >> 0] | 0) {
   case 8:
    {
     i4 = (i1 | 0) == 0;
     i2 = i8 + 1 | 0;
     i1 = i4 ? i2 : i8;
     i2 = i4 ? i8 + 2 | 0 : i2;
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = ((i8 + (i3 + -1 - i2) | 0) >>> 1) + 1 | 0;
      i3 = i1;
      while (1) {
       HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
       i2 = i2 + 2 | 0;
       if (i2 >>> 0 >= i5 >>> 0) break; else i3 = i3 + 1 | 0;
      }
      i1 = i1 + i4 | 0;
      i2 = 8;
     } else i2 = 8;
     break;
    }
   case 16:
    {
     i4 = (i1 | 0) == 0;
     i2 = i8 + 2 | 0;
     i1 = i4 ? i2 : i8;
     i2 = i4 ? i8 + 4 | 0 : i2;
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = ((i8 + (i3 + -1 - i2) | 0) >>> 2 << 1) + 2 | 0;
      i3 = i1;
      while (1) {
       HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
       HEAP8[i3 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
       i2 = i2 + 4 | 0;
       if (i2 >>> 0 >= i5 >>> 0) break; else i3 = i3 + 2 | 0;
      }
      i1 = i1 + i4 | 0;
      i2 = 16;
     } else i2 = 16;
     break;
    }
   default:
    return;
   }
   HEAP8[i6 + 11 >> 0] = i2;
   HEAP8[i7 >> 0] = 1;
   i2 = i6 + 8 | 0;
   if ((HEAP8[i2 >> 0] | 0) == 4) HEAP8[i2 >> 0] = 0;
   break;
  }
 case 4:
  {
   switch (HEAP8[i6 + 9 >> 0] | 0) {
   case 8:
    {
     i2 = (i1 | 0) == 0;
     i1 = i2 ? i8 + 3 | 0 : i8;
     i2 = i2 ? i8 + 4 | 0 : i8 + 1 | 0;
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = (((i8 + (i3 + -1 - i2) | 0) >>> 2) * 3 | 0) + 3 | 0;
      i3 = i1;
      while (1) {
       HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
       HEAP8[i3 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
       HEAP8[i3 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
       i2 = i2 + 4 | 0;
       if (i2 >>> 0 >= i5 >>> 0) break; else i3 = i3 + 3 | 0;
      }
      i1 = i1 + i4 | 0;
      i2 = 24;
     } else i2 = 24;
     break;
    }
   case 16:
    {
     i2 = (i1 | 0) == 0;
     i1 = i2 ? i8 + 6 | 0 : i8;
     i2 = i2 ? i8 + 8 | 0 : i8 + 2 | 0;
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = (((i8 + (i3 + -1 - i2) | 0) >>> 3) * 6 | 0) + 6 | 0;
      i3 = i1;
      while (1) {
       HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
       HEAP8[i3 + 1 >> 0] = HEAP8[i2 + 1 >> 0] | 0;
       HEAP8[i3 + 2 >> 0] = HEAP8[i2 + 2 >> 0] | 0;
       HEAP8[i3 + 3 >> 0] = HEAP8[i2 + 3 >> 0] | 0;
       HEAP8[i3 + 4 >> 0] = HEAP8[i2 + 4 >> 0] | 0;
       HEAP8[i3 + 5 >> 0] = HEAP8[i2 + 5 >> 0] | 0;
       i2 = i2 + 8 | 0;
       if (i2 >>> 0 >= i5 >>> 0) break; else i3 = i3 + 6 | 0;
      }
      i1 = i1 + i4 | 0;
      i2 = 48;
     } else i2 = 48;
     break;
    }
   default:
    return;
   }
   HEAP8[i6 + 11 >> 0] = i2;
   HEAP8[i7 >> 0] = 3;
   i2 = i6 + 8 | 0;
   if ((HEAP8[i2 >> 0] | 0) == 6) HEAP8[i2 >> 0] = 2;
   break;
  }
 default:
  return;
 }
 HEAP32[i9 >> 2] = i1 - i8;
 return;
}

function _Blit16to16SurfaceAlpha128(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i19 = HEAP32[i1 + 24 >> 2] | 0;
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 i20 = HEAP32[i1 + 16 >> 2] >> 1;
 i11 = HEAP32[i1 + 36 >> 2] >> 1;
 if (!i3) return;
 i12 = ~i10;
 i13 = i19 + -1 | 0;
 i14 = i10 & 65535;
 i15 = i14 << 16 | i14;
 i16 = ~i15;
 i17 = i20 + -1 | 0;
 i18 = i14 ^ 65535;
 i5 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 while (1) {
  i3 = i3 + -1 | 0;
  i1 = i5;
  i4 = i2;
  if (!((i1 ^ i4) & 2)) {
   if (!(i1 & 2)) {
    i4 = i19;
    i1 = i5;
   } else {
    i1 = HEAP16[i2 >> 1] | 0;
    i4 = HEAP16[i5 >> 1] | 0;
    HEAP16[i2 >> 1] = (((i4 & i10 & 65535) + (i1 & i10 & 65535) | 0) >>> 1) + (i1 & i12 & i4 & 65535);
    i4 = i13;
    i1 = i5 + 2 | 0;
    i2 = i2 + 2 | 0;
   }
   if ((i4 | 0) > 1) {
    i7 = ~i4;
    i7 = i4 + 2 + ((i7 | 0) > -4 ? i7 : -4) & -2;
    i8 = i2 + 4 | 0;
    i6 = i4 + -2 | 0;
    i5 = i1;
    while (1) {
     i21 = HEAP32[i5 >> 2] | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = ((i9 & i15) >>> 1) + ((i21 & i15) >>> 1) + (i21 & i16 & i9);
     if ((i4 | 0) > 3) {
      i4 = i4 + -2 | 0;
      i2 = i2 + 4 | 0;
      i5 = i5 + 4 | 0;
     } else break;
    }
    i4 = i6 - i7 | 0;
    i1 = i1 + 4 + (i7 << 1) | 0;
    i2 = i8 + (i7 << 1) | 0;
   }
   if (i4) {
    i9 = HEAP16[i2 >> 1] | 0;
    i21 = HEAP16[i1 >> 1] | 0;
    HEAP16[i2 >> 1] = (((i21 & i10 & 65535) + (i9 & i10 & 65535) | 0) >>> 1) + (i9 & i12 & i21 & 65535);
    i1 = i1 + 2 | 0;
    i2 = i2 + 2 | 0;
   }
   i1 = i1 + (i20 << 1) | 0;
  } else {
   if (!(i4 & 2)) {
    i6 = i19;
    i4 = i5;
   } else {
    i4 = HEAP16[i2 >> 1] | 0;
    i6 = HEAP16[i5 >> 1] | 0;
    HEAP16[i2 >> 1] = (((i6 & i10 & 65535) + (i4 & i10 & 65535) | 0) >>> 1) + (i4 & i12 & i6 & 65535);
    i6 = i13;
    i4 = i5 + 2 | 0;
    i2 = i2 + 2 | 0;
   }
   i1 = i4 + 2 | 0;
   i5 = HEAP32[i4 + -2 >> 2] | 0;
   if ((i6 | 0) > 1) {
    i9 = ~i6;
    i9 = i6 + 2 + ((i9 | 0) > -4 ? i9 : -4) & -2;
    i8 = i4 + 6 | 0;
    i7 = i6 + -2 | 0;
    i4 = i6;
    i6 = i2;
    while (1) {
     i21 = i5;
     i5 = HEAP32[i1 >> 2] | 0;
     i22 = HEAP32[i6 >> 2] | 0;
     i21 = i5 << 16 | i21 >>> 16;
     HEAP32[i6 >> 2] = ((i21 & i15) >>> 1) + ((i22 & i15) >>> 1) + (i22 & i16 & i21);
     if ((i4 | 0) <= 3) break; else {
      i4 = i4 + -2 | 0;
      i6 = i6 + 4 | 0;
      i1 = i1 + 4 | 0;
     }
    }
    i4 = i7 - i9 | 0;
    i1 = i8 + (i9 << 1) | 0;
    i2 = i2 + 4 + (i9 << 1) | 0;
   } else i4 = i6;
   if (i4) {
    i22 = HEAP16[i2 >> 1] | 0;
    i21 = i5 >>> 16;
    HEAP16[i2 >> 1] = (((i21 & i14) + (i22 & i10 & 65535) | 0) >>> 1) + (i21 & i18 & (i22 & 65535));
    i1 = i1 + 2 | 0;
    i2 = i2 + 2 | 0;
   }
   i1 = i1 + (i17 << 1) | 0;
  }
  if (!i3) break; else {
   i5 = i1;
   i2 = i2 + (i11 << 1) | 0;
  }
 }
 return;
}

function _GLES2_SetDrawingState(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, f11 = f0, f12 = f0, f13 = f0, f14 = f0;
 i5 = 0;
 i1 = i4 + 320 | 0;
 i10 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i4 + 316 >> 2] | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i2 | 0)) {
  i1 = i10;
  i5 = 4;
 } else {
  HEAP32[i10 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i4 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i10 >> 2];
   _GLES2_UpdateViewport(i4) | 0;
   i1 = HEAP32[i1 >> 2] | 0;
   i5 = 4;
  }
 }
 if ((i5 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i1 = i10 + 8 | 0;
 if ((HEAP32[i1 >> 2] | 0) != (i3 | 0)) {
  switch (i3 | 0) {
  case 4:
   {
    FUNCTION_TABLE_vi[HEAP32[i10 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i10 + 32 >> 2] & 63](0, 768, 0, 1);
    break;
   }
  case 1:
   {
    FUNCTION_TABLE_vi[HEAP32[i10 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i10 + 32 >> 2] & 63](770, 771, 1, 771);
    break;
   }
  case 2:
   {
    FUNCTION_TABLE_vi[HEAP32[i10 + 80 >> 2] & 511](3042);
    FUNCTION_TABLE_viiii[HEAP32[i10 + 32 >> 2] & 63](770, 1, 0, 1);
    break;
   }
  default:
   FUNCTION_TABLE_vi[HEAP32[i10 + 68 >> 2] & 511](3042);
  }
  HEAP32[i1 >> 2] = i3;
 }
 i1 = i10 + 12 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  FUNCTION_TABLE_vi[HEAP32[i10 + 72 >> 2] & 511](1);
  HEAP32[i1 >> 2] = 0;
 }
 if ((_GLES2_SelectProgram(i4, 0, i3) | 0) < 0) {
  i10 = -1;
  return i10 | 0;
 }
 i8 = HEAP8[i4 + 313 >> 0] | 0;
 i9 = HEAP8[i4 + 315 >> 0] | 0;
 i1 = HEAP32[i4 + 308 >> 2] | 0;
 L25 : do if (!i1) i5 = 20; else {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if ((i1 | 0) < 372645892) switch (i1 | 0) {
  case 370546692:
   break;
  default:
   {
    i5 = 20;
    break L25;
   }
  } else switch (i1 | 0) {
  case 372645892:
   break;
  default:
   {
    i5 = 20;
    break L25;
   }
  }
  i1 = i4 + 312 | 0;
  i2 = i4 + 314 | 0;
 } while (0);
 if ((i5 | 0) == 20) {
  i1 = i4 + 314 | 0;
  i2 = i4 + 312 | 0;
 }
 i7 = HEAP8[i1 >> 0] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i2 = HEAP32[i10 + 268 >> 2] | 0;
 i3 = i2 + 80 | 0;
 i4 = i2 + 81 | 0;
 i5 = i2 + 82 | 0;
 i6 = i2 + 83 | 0;
 if (((HEAPU8[i4 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i5 >> 0] | 0) << 8 | (HEAPU8[i6 >> 0] | 0) | 0) == ((i8 & 255) << 16 | i9 & 255 | (i7 & 255) << 8 | (i1 & 255) << 24 | 0)) {
  i10 = 0;
  return i10 | 0;
 }
 f14 = Math_fround(Math_fround(i1 & 255) * Math_fround(.00392156886));
 f13 = Math_fround(Math_fround(i8 & 255) * Math_fround(.00392156886));
 f12 = Math_fround(Math_fround(i7 & 255) * Math_fround(.00392156886));
 f11 = Math_fround(Math_fround(i9 & 255) * Math_fround(.00392156886));
 FUNCTION_TABLE_viffff[HEAP32[i10 + 172 >> 2] & 3](HEAP32[i2 + 28 >> 2] | 0, f14, f13, f12, f11);
 HEAP8[i3 >> 0] = i1;
 HEAP8[i4 >> 0] = i8;
 HEAP8[i5 >> 0] = i7;
 HEAP8[i6 >> 0] = i9;
 i10 = 0;
 return i10 | 0;
}

function __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i18, i1, i8, i9, i10, i2) {
 i18 = i18 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i7 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i13 = i17 + 168 | 0;
 i14 = i17 + 40 | 0;
 i15 = i17 + 36 | 0;
 i16 = i17 + 32 | 0;
 i11 = i17;
 i6 = i17 + 24 | 0;
 i12 = i17 + 16 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 HEAP32[i11 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i11 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 >> 2] = 34296;
 i4 = HEAP8[i2 + 8 + 3 >> 0] | 0;
 i5 = i4 << 24 >> 24 < 0;
 i1 = i5 ? HEAP32[i2 >> 2] | 0 : i2;
 i4 = i1 + ((i5 ? HEAP32[i2 + 4 >> 2] | 0 : i4 & 255) << 2) | 0;
 i5 = i14 + 32 | 0;
 i2 = i1;
 i1 = 0;
 while (1) {
  if (!((i1 | 0) != 2 & i2 >>> 0 < i4 >>> 0)) break;
  HEAP32[i16 >> 2] = i2;
  i3 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] & 31](i6, i13, i2, i4, i16, i14, i5, i15) | 0;
  if ((i3 | 0) == 2 ? 1 : (HEAP32[i16 >> 2] | 0) == (i2 | 0)) {
   i7 = 7;
   break;
  } else i1 = i14;
  while (1) {
   if (i1 >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i11, HEAP8[i1 >> 0] | 0);
   i1 = i1 + 1 | 0;
  }
  i2 = HEAP32[i16 >> 2] | 0;
  i1 = i3;
 }
 if ((i7 | 0) == 7) __ZNSt3__221__throw_runtime_errorEPKc(0);
 __ZNSt3__26locale5facetD2Ev(i6);
 i3 = (HEAP8[i11 + 11 >> 0] | 0) < 0 ? HEAP32[i11 >> 2] | 0 : i11;
 i2 = _catgets((i8 | 0) == -1 ? -1 : i8 << 1, i9, i10, i3) | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i18 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 HEAP32[i12 + 4 >> 2] = 0;
 HEAP32[i12 >> 2] = 34344;
 i4 = i3 + (_strlen(i2) | 0) | 0;
 i5 = i4;
 i6 = i14 + 128 | 0;
 i2 = i3;
 i1 = 0;
 while (1) {
  if (!((i1 | 0) != 2 & i2 >>> 0 < i4 >>> 0)) {
   i7 = 21;
   break;
  }
  HEAP32[i16 >> 2] = i2;
  i3 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] & 31](i12, i13, i2, (i5 - i2 | 0) > 32 ? i2 + 32 | 0 : i4, i16, i14, i6, i15) | 0;
  if ((i3 | 0) == 2 ? 1 : (HEAP32[i16 >> 2] | 0) == (i2 | 0)) {
   i7 = 17;
   break;
  } else i1 = i14;
  while (1) {
   if (i1 >>> 0 >= (HEAP32[i15 >> 2] | 0) >>> 0) break;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i18, HEAP32[i1 >> 2] | 0);
   i1 = i1 + 4 | 0;
  }
  i2 = HEAP32[i16 >> 2] | 0;
  i1 = i3;
 }
 if ((i7 | 0) == 17) __ZNSt3__221__throw_runtime_errorEPKc(0); else if ((i7 | 0) == 21) {
  __ZNSt3__26locale5facetD2Ev(i12);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  STACKTOP = i17;
  return;
 }
}

function _SDL_GetClosestDisplayModeForDisplay(i13, i14, i20) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i20 = i20 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0;
 i17 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!((i14 | 0) != 0 & (i20 | 0) != 0)) {
  _SDL_SetError(46983, i21) | 0;
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 if (!i1) i1 = HEAP32[i13 + 16 >> 2] | 0;
 i19 = i14 + 12 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 if (!i2) i2 = HEAP32[i13 + 28 >> 2] | 0;
 i15 = i14 + 4 | 0;
 i10 = i13 + 8 | 0;
 i11 = i13 + 12 | 0;
 i12 = i1 >>> 8 & 255;
 i16 = i14 + 8 | 0;
 i18 = 0;
 i9 = 0;
 i3 = HEAP32[i10 >> 2] | 0;
 while (1) {
  if (!i3) {
   i3 = HEAP32[19487] | 0;
   i4 = HEAP32[i3 + 24 >> 2] | 0;
   if (!i4) i8 = 0; else {
    FUNCTION_TABLE_vii[i4 & 127](i3, i13);
    _SDL_qsort(HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, 20, 26);
    i8 = HEAP32[i10 >> 2] | 0;
   }
  } else i8 = i3;
  if ((i9 | 0) >= (i8 | 0)) break;
  i7 = HEAP32[i11 >> 2] | 0;
  i4 = i7 + (i9 * 20 | 0) | 0;
  i3 = i4 | 0;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  i5 = (i4 | 0) == 0;
  if (!i5) if ((i4 | 0) < (HEAP32[i15 >> 2] | 0)) break;
  i6 = HEAP32[i7 + (i9 * 20 | 0) + 8 >> 2] | 0;
  if (!i6) i17 = 18; else if ((i6 | 0) < (HEAP32[i16 >> 2] | 0)) if (i5) i3 = i18; else if ((i4 | 0) == (HEAP32[i15 >> 2] | 0)) break; else i3 = i18; else i17 = 18;
  do if ((i17 | 0) == 18) {
   i17 = 0;
   if (i18) if ((i4 | 0) >= (HEAP32[i18 + 4 >> 2] | 0)) if ((i6 | 0) >= (HEAP32[i18 + 8 >> 2] | 0)) {
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i18 >> 2] | 0)) {
     i7 = HEAP32[i7 + (i9 * 20 | 0) + 12 >> 2] | 0;
     i3 = ((i7 | 0) < (i2 | 0) ? 1 : (i7 | 0) == (HEAP32[i18 + 12 >> 2] | 0)) ? i18 : i3;
     break;
    }
    if ((i4 | 0) != (i1 | 0)) {
     if ((i4 >>> 8 & 255) >>> 0 < i12 >>> 0) {
      i3 = i18;
      break;
     }
     if ((i4 ^ i1) & 251658240 | 0) {
      i3 = i18;
      break;
     }
    }
   }
  } while (0);
  i18 = i3;
  i9 = i9 + 1 | 0;
  i3 = i8;
 }
 if (!i18) {
  i20 = 0;
  STACKTOP = i21;
  return i20 | 0;
 }
 i1 = HEAP32[i18 >> 2] | 0;
 if (!i1) i5 = HEAP32[i14 >> 2] | 0; else i5 = i1;
 HEAP32[i20 >> 2] = i5;
 i2 = HEAP32[i18 + 4 >> 2] | 0;
 if (!i2) i17 = 33; else {
  i1 = i18 + 8 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) i17 = 33; else i4 = i2;
 }
 if ((i17 | 0) == 33) {
  i4 = HEAP32[i15 >> 2] | 0;
  i1 = i16;
 }
 HEAP32[i20 + 4 >> 2] = i4;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = i20 + 8 | 0;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[i18 + 12 >> 2] | 0;
 if (!i1) i1 = HEAP32[i19 >> 2] | 0;
 HEAP32[i20 + 12 >> 2] = i1;
 HEAP32[i20 + 16 >> 2] = HEAP32[i18 + 16 >> 2];
 if (!i5) HEAP32[i20 >> 2] = 370546692;
 if (!i4) HEAP32[i20 + 4 >> 2] = 640;
 if (i2 | 0) {
  STACKTOP = i21;
  return i20 | 0;
 }
 HEAP32[i3 >> 2] = 480;
 STACKTOP = i21;
 return i20 | 0;
}

function _SDL_Blit_RGB888_RGB888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i23 = i18 + 28 | 0;
 i22 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i22 | 0) | 0;
 i19 = i18 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i23 >> 2] = i22 + -1;
 if (!i22) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i17 = i1 & 112;
 i15 = i18 + 12 | 0;
 i16 = (i17 & 127) == 16;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i14 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i13 = ~i3;
   i13 = i3 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i3 = i3 + -65536 - (i13 & -65536) | 0;
   i4 = i4 + 1 + (i13 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  L9 : do if (i2 | 0) {
   if (i16) {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    while (1) {
     if ((i5 | 0) > 65535) {
      i13 = ~i5;
      i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
      i6 = i6 + 1 + (i13 >>> 16) | 0;
      i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
      i5 = i5 + -65536 - (i13 & -65536) | 0;
     }
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i7) break L9; else {
      i1 = i1 + 4 | 0;
      i5 = i5 + i20 | 0;
      i7 = i7 + -1 | 0;
     }
    }
   } else {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    i13 = i7;
   }
   while (1) {
    if ((i5 | 0) > 65535) {
     i12 = ~i5;
     i12 = i5 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i12 & -65536) | 0;
    }
    i9 = HEAP32[i2 >> 2] | 0;
    i12 = i9 >>> 16 & 255;
    i11 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i10 = HEAP32[i1 >> 2] | 0;
    i7 = i10 >>> 16 & 255;
    i8 = i10 >>> 8 & 255;
    i10 = i10 & 255;
    switch (i17 & 127) {
    case 64:
     {
      i10 = ((Math_imul(i10, i9) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i7 = i7 + i12 | 0;
      i8 = i8 + i11 | 0;
      i10 = i10 + i9 | 0;
      i10 = i10 >>> 0 < 255 ? i10 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i8 << 8 | i7 << 16 | i10;
    if (!i13) break L9; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i20 | 0;
     i13 = i13 + -1 | 0;
    }
   }
  } while (0);
  i1 = i14 + (HEAP32[i22 >> 2] | 0) | 0;
  i14 = HEAP32[i23 >> 2] | 0;
  HEAP32[i23 >> 2] = i14 + -1;
  if (!i14) break;
  i3 = i3 + i24 | 0;
  i14 = i1;
  i2 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i23 = i18 + 28 | 0;
 i22 = HEAP32[i23 >> 2] | 0;
 i24 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i22 | 0) | 0;
 i19 = i18 + 24 | 0;
 i2 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i23 >> 2] = i22 + -1;
 if (!i22) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i17 = i1 & 112;
 i15 = i18 + 12 | 0;
 i16 = (i17 & 127) == 16;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i14 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i13 = ~i3;
   i13 = i3 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
   i3 = i3 + -65536 - (i13 & -65536) | 0;
   i4 = i4 + 1 + (i13 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  L9 : do if (i2 | 0) {
   if (i16) {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    while (1) {
     if ((i5 | 0) > 65535) {
      i13 = ~i5;
      i13 = i5 + 65536 + ((i13 | 0) > -131072 ? i13 : -131072) | 0;
      i6 = i6 + 1 + (i13 >>> 16) | 0;
      i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
      i5 = i5 + -65536 - (i13 & -65536) | 0;
     }
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i7) break L9; else {
      i1 = i1 + 4 | 0;
      i5 = i5 + i20 | 0;
      i7 = i7 + -1 | 0;
     }
    }
   } else {
    i2 = 0;
    i5 = 65536;
    i6 = -1;
    i13 = i7;
   }
   while (1) {
    if ((i5 | 0) > 65535) {
     i12 = ~i5;
     i12 = i5 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i6 = i6 + 1 + (i12 >>> 16) | 0;
     i2 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i15 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i2 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i7 = HEAP32[i1 >> 2] | 0;
    i10 = i7 >>> 16 & 255;
    i8 = i7 >>> 8 & 255;
    i7 = i7 & 255;
    switch (i17 & 127) {
    case 64:
     {
      i10 = ((Math_imul(i10, i9) | 0) >>> 0) / 255 | 0;
      i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i7 = i7 + i12 | 0;
      i8 = i8 + i11 | 0;
      i10 = i10 + i9 | 0;
      i10 = i10 >>> 0 < 255 ? i10 : 255;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i8 << 8 | i7 | i10 << 16;
    if (!i13) break L9; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i20 | 0;
     i13 = i13 + -1 | 0;
    }
   }
  } while (0);
  i1 = i14 + (HEAP32[i22 >> 2] | 0) | 0;
  i14 = HEAP32[i23 >> 2] | 0;
  HEAP32[i23 >> 2] = i14 + -1;
  if (!i14) break;
  i3 = i3 + i24 | 0;
  i14 = i1;
  i2 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i1;
 return;
}

function _SDL_AudioInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i9 + 8 | 0;
 i6 = i9;
 if (_SDL_WasInit(16) | 0) _SDL_AudioQuit();
 _SDL_memset(81720, 0, 120) | 0;
 _SDL_memset(81876, 0, 64) | 0;
 L4 : do if (!i1) {
  i1 = _SDL_getenv(59018) | 0;
  i2 = (i1 | 0) == 0;
  if (i2) {
   i5 = 0;
   i3 = 0;
   while (1) {
    if ((i3 | 0) == 3) {
     i3 = i5;
     i8 = 14;
     break L4;
    }
    while (1) {
     i4 = HEAP32[16228 + (i3 << 2) >> 2] | 0;
     if (!(HEAP32[i4 + 12 >> 2] | 0)) break;
     i3 = i3 + 1 | 0;
     if ((i3 | 0) == 3) {
      i3 = i5;
      i8 = 14;
      break L4;
     }
    }
    _SDL_memset(81720, 0, 120) | 0;
    HEAP32[20430] = HEAP32[i4 >> 2];
    HEAP32[20431] = HEAP32[i4 + 4 >> 2];
    if (!(FUNCTION_TABLE_ii[HEAP32[i4 + 8 >> 2] & 255](81728) | 0)) {
     i5 = 1;
     i3 = i3 + 1 | 0;
    } else break;
   }
  } else i8 = 5;
 } else i8 = 5; while (0);
 L12 : do if ((i8 | 0) == 5) {
  i4 = 0;
  i2 = 0;
  while (1) {
   if ((i2 | 0) == 3) {
    i3 = i4;
    i2 = 0;
    i8 = 14;
    break L12;
   }
   while (1) {
    i3 = HEAP32[16228 + (i2 << 2) >> 2] | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    if (!(_SDL_strncasecmp(i5, i1, _SDL_strlen(i1) | 0) | 0)) break;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == 3) {
     i3 = i4;
     i2 = 0;
     i8 = 14;
     break L12;
    }
   }
   _SDL_memset(81720, 0, 120) | 0;
   HEAP32[20430] = HEAP32[i3 >> 2];
   HEAP32[20431] = HEAP32[i3 + 4 >> 2];
   if (!(FUNCTION_TABLE_ii[HEAP32[i3 + 8 >> 2] & 255](81728) | 0)) {
    i4 = 1;
    i2 = i2 + 1 | 0;
   } else break;
  }
 } while (0);
 if ((i8 | 0) == 14) {
  do if (!i3) if (i2) {
   _SDL_SetError(59066, i7) | 0;
   break;
  } else {
   HEAP32[i6 >> 2] = i1;
   _SDL_SetError(59034, i6) | 0;
   break;
  } while (0);
  _SDL_memset(81720, 0, 120) | 0;
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[20453] = _SDL_CreateMutex() | 0;
 if (HEAP32[20448] | 0) {
  if (!(HEAP32[20443] | 0)) HEAP32[20443] = 334;
  if (!(HEAP32[20444] | 0)) HEAP32[20444] = 334;
 }
 i1 = HEAP32[20432] | 0;
 if (!i1) {
  HEAP32[20432] = 4;
  i1 = 4;
 }
 if (!(HEAP32[20433] | 0)) HEAP32[20433] = 28;
 if (!(HEAP32[20434] | 0)) HEAP32[20434] = 335;
 if (!(HEAP32[20435] | 0)) HEAP32[20435] = 336;
 if (!(HEAP32[20436] | 0)) HEAP32[20436] = 337;
 if (!(HEAP32[20437] | 0)) HEAP32[20437] = 122;
 if (!(HEAP32[20438] | 0)) HEAP32[20438] = 123;
 if (!(HEAP32[20439] | 0)) HEAP32[20439] = 56;
 if (!(HEAP32[20440] | 0)) HEAP32[20440] = 338;
 if (!(HEAP32[20441] | 0)) HEAP32[20441] = 339;
 if (!(HEAP32[20442] | 0)) HEAP32[20442] = 340;
 if (!(HEAP32[20443] | 0)) HEAP32[20443] = 341;
 if (!(HEAP32[20444] | 0)) HEAP32[20444] = 342;
 if (!(HEAP32[20445] | 0)) HEAP32[20445] = 343;
 if (!(HEAP32[20446] | 0)) HEAP32[20446] = 5;
 FUNCTION_TABLE_v[i1 & 15]();
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i9 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i6, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i9 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i12, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i6, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 24;
    i11 = i12 >>> 16 & 255;
    i10 = i12 >>> 8 & 255;
    i12 = i12 & 255;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i12, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i9 = i12 & 255;
    i12 = i12 >>> 24;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i6, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i10 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i9 = i12 & 255;
    i12 = i12 >>> 24;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i12, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i10 = i12 & 255;
    i12 = i12 >>> 24;
    i8 = HEAP32[i2 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i12, i8) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i6, i12) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 << 16 | i8;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Blend_Scale(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i1 = HEAP32[i18 + 52 >> 2] | 0;
 i24 = i18 + 28 | 0;
 i23 = HEAP32[i24 >> 2] | 0;
 i25 = (HEAP32[i18 + 8 >> 2] << 16 | 0) / (i23 | 0) | 0;
 i19 = i18 + 24 | 0;
 i3 = HEAP32[i19 >> 2] | 0;
 i20 = (HEAP32[i18 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 i2 = i23 + -1 | 0;
 HEAP32[i24 >> 2] = i2;
 if (!i23) return;
 i21 = i18 + 20 | 0;
 i22 = i18 + 32 | 0;
 i23 = (i1 & 48 | 0) != 0;
 i17 = i1 & 112;
 i16 = i18 + 12 | 0;
 i14 = HEAP32[i21 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i15 = i14;
 i1 = i2;
 i2 = i14;
 while (1) {
  if ((i4 | 0) > 65535) {
   i14 = ~i4;
   i14 = i4 + 65536 + ((i14 | 0) > -131072 ? i14 : -131072) | 0;
   i13 = i4 + -65536 - (i14 & -65536) | 0;
   i14 = i5 + 1 + (i14 >>> 16) | 0;
  } else {
   i13 = i4;
   i14 = i5;
  }
  if (i3) {
   i1 = 0;
   i4 = 65536;
   i5 = -1;
   while (1) {
    i3 = i3 + -1 | 0;
    if ((i4 | 0) > 65535) {
     i12 = ~i4;
     i12 = i4 + 65536 + ((i12 | 0) > -131072 ? i12 : -131072) | 0;
     i5 = i5 + 1 + (i12 >>> 16) | 0;
     i1 = (HEAP32[i18 >> 2] | 0) + (Math_imul(HEAP32[i16 >> 2] | 0, i14) | 0) + (i5 << 2) | 0;
     i4 = i4 + -65536 - (i12 & -65536) | 0;
    }
    i12 = HEAP32[i1 >> 2] | 0;
    i9 = i12 >>> 16 & 255;
    i11 = i12 >>> 8 & 255;
    i10 = i12 & 255;
    i12 = i12 >>> 24;
    i6 = HEAP32[i2 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    if (i23 & (i12 | 0) != 255) {
     i10 = ((Math_imul(i10, i12) | 0) >>> 0) / 255 | 0;
     i11 = ((Math_imul(i11, i12) | 0) >>> 0) / 255 | 0;
     i9 = ((Math_imul(i9, i12) | 0) >>> 0) / 255 | 0;
    }
    switch (i17 & 127) {
    case 16:
     {
      i12 = i12 ^ 255;
      i8 = i9 + (((Math_imul(i8, i12) | 0) >>> 0) / 255 | 0) | 0;
      i7 = i11 + (((Math_imul(i7, i12) | 0) >>> 0) / 255 | 0) | 0;
      i6 = i10 + (((Math_imul(i12, i6) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i6 = i10 + i6 | 0;
      i7 = i11 + i7 | 0;
      i8 = i9 + i8 | 0;
      i8 = i8 >>> 0 < 255 ? i8 : 255;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      break;
     }
    case 64:
     {
      i8 = ((Math_imul(i9, i8) | 0) >>> 0) / 255 | 0;
      i7 = ((Math_imul(i11, i7) | 0) >>> 0) / 255 | 0;
      i6 = ((Math_imul(i10, i6) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i2 >> 2] = i7 << 8 | i6 | i8 << 16;
    if (!i3) break; else {
     i2 = i2 + 4 | 0;
     i4 = i4 + i20 | 0;
    }
   }
   i1 = HEAP32[i24 >> 2] | 0;
  }
  i3 = i15 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i24 >> 2] = i2;
  if (!i1) break;
  i4 = i13 + i25 | 0;
  i5 = i14;
  i15 = i3;
  i1 = i2;
  i2 = i3;
  i3 = HEAP32[i19 >> 2] | 0;
 }
 HEAP32[i21 >> 2] = i3;
 return;
}

function _HandleAudioProcess(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = (HEAPU16[i14 + 8 >> 1] | 0) >>> 3 & 31;
 if (!(_SDL_AtomicGet(i14 + 136 | 0) | 0)) return;
 if (_SDL_AtomicGet(i14 + 140 | 0) | 0) return;
 i12 = i14 + 28 | 0;
 i13 = i14 + 180 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i1 = HEAP32[i2 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i14 + 16 >> 2] | 0;
   HEAP32[i2 + 4 >> 2] = i1;
   i1 = _SDL_malloc(i1) | 0;
   i2 = HEAP32[i13 >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
  }
  FUNCTION_TABLE_viii[HEAP32[i14 + 20 >> 2] & 63](HEAP32[i14 + 24 >> 2] | 0, i1, HEAP32[i2 + 4 >> 2] | 0);
  i1 = HEAP32[i13 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
 } else {
  i1 = HEAP32[i2 + 8 >> 2] | 0;
  if (!i1) {
   i1 = i14 + 48 | 0;
   i8 = i1;
   i1 = HEAP32[i1 >> 2] | 0;
  } else {
   i1 = Math_imul(Math_imul(i1, HEAPU8[i14 + 10 >> 0] | 0) | 0, (HEAPU16[i14 + 32 >> 1] | 0) >>> 3 & 31) | 0;
   i8 = i14 + 48 | 0;
   HEAP32[i8 >> 2] = i1;
  }
  i9 = i14 + 20 | 0;
  i10 = i14 + 24 | 0;
  i11 = i14 + 44 | 0;
  FUNCTION_TABLE_viii[HEAP32[i9 >> 2] & 63](HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, i1);
  _SDL_ConvertAudio(i12) | 0;
  i6 = i14 + 52 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  i7 = i14 + 16 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) i2 = HEAP32[i11 >> 2] | 0; else {
   i3 = HEAP32[i13 >> 2] | 0;
   if (!(HEAP32[i3 >> 2] | 0)) {
    i5 = (i2 >>> 0 > i1 >>> 0 ? i2 : i1) << 1;
    HEAP32[i3 + 4 >> 2] = i5;
    i5 = _SDL_malloc(i5) | 0;
    i3 = HEAP32[i13 >> 2] | 0;
    HEAP32[i3 >> 2] = i5;
   }
   while (1) {
    i2 = HEAP32[i3 + 12 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
    i4 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i1 + i2 | 0) >>> 0 > i4 >>> 0) {
     i5 = HEAP32[i3 + 16 >> 2] | 0;
     if (i2 >>> 0 > i5 >>> 0) {
      i3 = HEAP32[i3 >> 2] | 0;
      _SDL_memmove(i3, i3 + i5 | 0, i4 - i5 | 0) | 0;
      i3 = HEAP32[i13 >> 2] | 0;
      i1 = HEAP32[i6 >> 2] | 0;
      i2 = (HEAP32[i3 + 12 >> 2] | 0) - (HEAP32[i3 + 16 >> 2] | 0) | 0;
     } else i2 = 0;
     HEAP32[i3 + 12 >> 2] = i2;
     HEAP32[i3 + 16 >> 2] = 0;
    }
    _SDL_memcpy((HEAP32[i3 >> 2] | 0) + i2 | 0, HEAP32[i11 >> 2] | 0, i1) | 0;
    i2 = HEAP32[i13 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i5 = (HEAP32[i3 >> 2] | 0) + (HEAP32[i6 >> 2] | 0) | 0;
    HEAP32[i3 >> 2] = i5;
    i3 = i2 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    i1 = HEAP32[i7 >> 2] | 0;
    if ((i5 - i4 | 0) >>> 0 >= i1 >>> 0) break;
    FUNCTION_TABLE_viii[HEAP32[i9 >> 2] & 63](HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0);
    _SDL_ConvertAudio(i12) | 0;
    i3 = HEAP32[i13 >> 2] | 0;
   }
   i2 = (HEAP32[i2 >> 2] | 0) + i4 | 0;
   HEAP32[i3 >> 2] = i4 + i1;
  }
 }
 if (!i2) return;
 _emscripten_asm_const_iii(15, i2 | 0, ((i1 | 0) / (i15 | 0) | 0 | 0) / (HEAPU8[i14 + 10 >> 0] | 0 | 0) | 0 | 0) | 0;
 return;
}

function _GLES2_DestroyRenderer(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i10 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i13;
 i8 = i11 + 320 | 0;
 i12 = HEAP32[i8 >> 2] | 0;
 if (!i12) {
  _SDL_free(i11);
  STACKTOP = i13;
  return;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i12;
  i10 = 5;
 } else {
  HEAP32[i12 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i11 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i12 >> 2];
   _GLES2_UpdateViewport(i11) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   i10 = 5;
  }
 }
 if ((i10 | 0) == 5) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i1 = HEAP32[i12 + 252 >> 2] | 0;
 if (i1 | 0) {
  i2 = i12 + 60 | 0;
  do {
   FUNCTION_TABLE_vi[HEAP32[i2 >> 2] & 511](HEAP32[i1 >> 2] | 0);
   i7 = i1;
   i1 = HEAP32[i1 + 24 >> 2] | 0;
   _SDL_free(i7);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i12 + 260 >> 2] | 0;
 if (i1 | 0) {
  i2 = i12 + 56 | 0;
  do {
   FUNCTION_TABLE_vi[HEAP32[i2 >> 2] & 511](HEAP32[i1 >> 2] | 0);
   i7 = i1;
   i1 = HEAP32[i1 + 156 >> 2] | 0;
   _SDL_free(i7);
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i12 >> 2] | 0;
 if (i1 | 0) {
  i7 = i12 + 232 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  if (i2) {
   i6 = i12 + 204 | 0;
   do {
    i1 = i2;
    i2 = HEAP32[i2 + 12 >> 2] | 0;
    FUNCTION_TABLE_vii[HEAP32[i6 >> 2] & 127](1, i1 + 8 | 0);
    i1 = HEAP32[i8 >> 2] | 0;
    L29 : do if (HEAP32[i1 + 4 >> 2] | 0) {
     i5 = i1 + 108 | 0;
     i1 = FUNCTION_TABLE_i[HEAP32[i5 >> 2] & 7]() | 0;
     if (i1 | 0) {
      i3 = 89710;
      while (1) {
       if (!i3) i10 = 21; else if (!(HEAP8[i3 >> 0] | 0)) i10 = 21; else i4 = i3;
       if ((i10 | 0) == 21) {
        i10 = 0;
        i4 = 39958;
       }
       switch (i1 | 0) {
       case 1280:
        {
         i3 = 40029;
         break;
        }
       case 1281:
        {
         i3 = 40012;
         break;
        }
       case 1282:
        {
         i3 = 39991;
         break;
        }
       case 1285:
        {
         i3 = 39974;
         break;
        }
       default:
        i3 = 39966;
       }
       HEAP32[i9 >> 2] = i4;
       HEAP32[i9 + 4 >> 2] = 40071;
       HEAP32[i9 + 8 >> 2] = 464;
       HEAP32[i9 + 12 >> 2] = 46529;
       HEAP32[i9 + 16 >> 2] = i3;
       HEAP32[i9 + 20 >> 2] = i1;
       _SDL_SetError(40045, i9) | 0;
       i1 = FUNCTION_TABLE_i[HEAP32[i5 >> 2] & 7]() | 0;
       if (!i1) break L29; else i3 = i4;
      }
     }
    } while (0);
    _SDL_free(HEAP32[i7 >> 2] | 0);
    HEAP32[i7 >> 2] = i2;
   } while ((i2 | 0) != 0);
   i1 = HEAP32[i12 >> 2] | 0;
  }
  _SDL_GL_DeleteContext(i1);
 }
 _SDL_free(HEAP32[i12 + 244 >> 2] | 0);
 _SDL_free(i12);
 _SDL_free(i11);
 STACKTOP = i13;
 return;
}

function _png_do_check_palette_indexes(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = HEAP16[i2 + 420 >> 1] | 0;
 i4 = HEAP8[i1 + 9 >> 0] | 0;
 if (i7 << 16 >> 16 == 0 | (1 << (i4 & 255) | 0) <= (i7 & 65535 | 0)) return;
 i5 = (Math_imul(HEAP32[i1 >> 2] | 0, 0 - (HEAPU8[i1 + 11 >> 0] | 0) | 0) | 0) & 7;
 i7 = HEAP32[i2 + 384 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 i3 = i7 + i1 | 0;
 switch (i4 << 24 >> 24) {
 case 1:
  {
   if ((i1 | 0) <= 0) return;
   i2 = i2 + 424 | 0;
   if ((HEAPU8[i3 >> 0] | 0) >>> i5 | 0) HEAP32[i2 >> 2] = 1;
   i1 = i3 + -1 | 0;
   if (i1 >>> 0 <= i7 >>> 0) return;
   do {
    if (HEAP8[i1 >> 0] | 0) HEAP32[i2 >> 2] = 1;
    i1 = i1 + -1 | 0;
   } while (i1 >>> 0 > i7 >>> 0);
   return;
  }
 case 2:
  {
   if ((i1 | 0) <= 0) return;
   i6 = i2 + 424 | 0;
   i9 = (HEAPU8[i3 >> 0] | 0) >>> i5;
   i5 = i9 & 3;
   i1 = HEAP32[i6 >> 2] | 0;
   i8 = (i5 | 0) > (i1 | 0);
   i1 = i8 ? i5 : i1;
   i5 = i9 >>> 2 & 3;
   i2 = (i5 | 0) > (i1 | 0);
   i1 = i2 ? i5 : i1;
   i5 = i9 >>> 4 & 3;
   i4 = (i5 | 0) > (i1 | 0);
   i1 = i4 ? i5 : i1;
   i9 = i9 >>> 6;
   i5 = (i9 | 0) > (i1 | 0);
   i1 = i5 ? i9 : i1;
   if (i8 | i2 | i4 | i5) HEAP32[i6 >> 2] = i1;
   i2 = i3 + -1 | 0;
   if (i2 >>> 0 <= i7 >>> 0) return;
   do {
    i3 = HEAP8[i2 >> 0] | 0;
    i4 = i3 & 3;
    if ((i1 | 0) < (i4 | 0)) {
     HEAP32[i6 >> 2] = i4;
     i3 = HEAP8[i2 >> 0] | 0;
     i1 = i4;
    }
    i4 = (i3 & 255) >>> 2 & 3;
    if ((i4 | 0) > (i1 | 0)) {
     HEAP32[i6 >> 2] = i4;
     i3 = HEAP8[i2 >> 0] | 0;
     i1 = i4;
    }
    i4 = (i3 & 255) >>> 4 & 3;
    if ((i4 | 0) > (i1 | 0)) {
     HEAP32[i6 >> 2] = i4;
     i3 = HEAP8[i2 >> 0] | 0;
     i1 = i4;
    }
    i3 = (i3 & 255) >>> 6;
    if ((i3 | 0) > (i1 | 0)) {
     HEAP32[i6 >> 2] = i3;
     i1 = i3;
    }
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > i7 >>> 0);
   return;
  }
 case 4:
  {
   if ((i1 | 0) <= 0) return;
   i6 = i2 + 424 | 0;
   i5 = (HEAPU8[i3 >> 0] | 0) >>> i5;
   i9 = i5 & 15;
   i1 = HEAP32[i6 >> 2] | 0;
   i8 = (i9 | 0) > (i1 | 0);
   i1 = i8 ? i9 : i1;
   i5 = i5 >>> 4;
   i9 = (i5 | 0) > (i1 | 0);
   i1 = i9 ? i5 : i1;
   if (i8 | i9) HEAP32[i6 >> 2] = i1;
   i2 = i3 + -1 | 0;
   if (i2 >>> 0 <= i7 >>> 0) return;
   do {
    i3 = HEAP8[i2 >> 0] | 0;
    i4 = i3 & 15;
    if ((i1 | 0) < (i4 | 0)) {
     HEAP32[i6 >> 2] = i4;
     i3 = HEAP8[i2 >> 0] | 0;
     i1 = i4;
    }
    i3 = (i3 & 255) >>> 4;
    if ((i3 | 0) > (i1 | 0)) {
     HEAP32[i6 >> 2] = i3;
     i1 = i3;
    }
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > i7 >>> 0);
   return;
  }
 case 8:
  {
   if ((i1 | 0) <= 0) return;
   i4 = i2 + 424 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   while (1) {
    i1 = HEAPU8[i3 >> 0] | 0;
    if ((i2 | 0) < (i1 | 0)) HEAP32[i4 >> 2] = i1; else i1 = i2;
    i3 = i3 + -1 | 0;
    if (i3 >>> 0 <= i7 >>> 0) break; else i2 = i1;
   }
   return;
  }
 default:
  return;
 }
}

function _GLES2_RenderFillRects(i1, i13, i14) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, f20 = f0, f21 = f0, f22 = f0, f23 = f0;
 i18 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i17 = i19;
 i15 = i19 + 24 | 0;
 i16 = i1 + 320 | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 if ((_GLES2_SetDrawingState(i1) | 0) < 0) {
  i18 = -1;
  STACKTOP = i19;
  return i18 | 0;
 }
 if ((i14 | 0) > 0) {
  i12 = i15 + 4 | 0;
  i6 = i15 + 8 | 0;
  i7 = i15 + 12 | 0;
  i8 = i15 + 16 | 0;
  i9 = i15 + 20 | 0;
  i10 = i15 + 24 | 0;
  i11 = i15 + 28 | 0;
  i4 = i2 + 76 | 0;
  i3 = 0;
  do {
   i5 = i13 + (i3 << 4) | 0;
   f22 = Math_fround(HEAPF32[i5 >> 2]);
   f21 = Math_fround(f22 + Math_fround(HEAPF32[i5 + 8 >> 2]));
   f23 = Math_fround(HEAPF32[i5 + 4 >> 2]);
   f20 = Math_fround(f23 + Math_fround(HEAPF32[i5 + 12 >> 2]));
   HEAPF32[i15 >> 2] = f22;
   HEAPF32[i12 >> 2] = f23;
   HEAPF32[i6 >> 2] = f21;
   HEAPF32[i7 >> 2] = f23;
   HEAPF32[i8 >> 2] = f22;
   HEAPF32[i9 >> 2] = f20;
   HEAPF32[i10 >> 2] = f21;
   HEAPF32[i11 >> 2] = f20;
   i5 = HEAP32[i16 >> 2] | 0;
   i2 = i5 + 276 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    FUNCTION_TABLE_vii[HEAP32[i5 + 216 >> 2] & 127](1, i2);
    i1 = HEAP32[i2 >> 2] | 0;
   }
   FUNCTION_TABLE_vii[HEAP32[i5 + 220 >> 2] & 127](34962, i1);
   i1 = i5 + 292 | 0;
   if ((HEAP32[i1 >> 2] | 0) >>> 0 < 32) {
    FUNCTION_TABLE_viiii[HEAP32[i5 + 224 >> 2] & 63](34962, 32, i15, 35040);
    HEAP32[i1 >> 2] = 32;
   } else FUNCTION_TABLE_viiii[HEAP32[i5 + 228 >> 2] & 63](34962, 0, 32, i15);
   FUNCTION_TABLE_viiiiii[HEAP32[i5 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
   FUNCTION_TABLE_viii[HEAP32[i4 >> 2] & 63](5, 0, 4);
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i14 | 0));
 }
 i1 = HEAP32[i16 >> 2] | 0;
 if (!(HEAP32[i1 + 4 >> 2] | 0)) {
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 }
 i4 = i1 + 108 | 0;
 i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
 if (!i1) {
  i18 = 0;
  STACKTOP = i19;
  return i18 | 0;
 } else i2 = 89710;
 while (1) {
  if (!i2) i18 = 14; else if (!(HEAP8[i2 >> 0] | 0)) i18 = 14; else i3 = i2;
  if ((i18 | 0) == 14) {
   i18 = 0;
   i3 = 39958;
  }
  switch (i1 | 0) {
  case 1280:
   {
    i2 = 40029;
    break;
   }
  case 1281:
   {
    i2 = 40012;
    break;
   }
  case 1282:
   {
    i2 = 39991;
    break;
   }
  case 1285:
   {
    i2 = 39974;
    break;
   }
  default:
   i2 = 39966;
  }
  HEAP32[i17 >> 2] = i3;
  HEAP32[i17 + 4 >> 2] = 40071;
  HEAP32[i17 + 8 >> 2] = 1549;
  HEAP32[i17 + 12 >> 2] = 45760;
  HEAP32[i17 + 16 >> 2] = i2;
  HEAP32[i17 + 20 >> 2] = i1;
  _SDL_SetError(40045, i17) | 0;
  i1 = FUNCTION_TABLE_i[HEAP32[i4 >> 2] & 7]() | 0;
  if (!i1) {
   i1 = -1;
   break;
  } else i2 = i3;
 }
 STACKTOP = i19;
 return i1 | 0;
}

function _png_handle_cHRM(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i2 = i7 + 32 | 0;
 i6 = i7;
 i3 = HEAP32[i4 + 208 >> 2] | 0;
 if (!(i3 & 1)) _png_chunk_error(i4, 63643);
 if (i3 & 6 | 0) {
  _png_crc_finish(i4, i1) | 0;
  _png_chunk_benign_error(i4, 64026);
  STACKTOP = i7;
  return;
 }
 if ((i1 | 0) != 32) {
  _png_crc_finish(i4, i1) | 0;
  _png_chunk_benign_error(i4, 63990);
  STACKTOP = i7;
  return;
 }
 _png_read_data(i4, i2, 32);
 _png_calculate_crc(i4, i2, 32);
 if (_png_crc_finish(i4, 0) | 0) {
  STACKTOP = i7;
  return;
 }
 i11 = (HEAPU8[i2 + 1 >> 0] | 0) << 16 | (HEAPU8[i2 >> 0] | 0) << 24 | (HEAPU8[i2 + 2 >> 0] | 0) << 8 | (HEAPU8[i2 + 3 >> 0] | 0);
 i1 = i6 + 24 | 0;
 HEAP32[i1 >> 2] = (i11 | 0) > -1 ? i11 : -1;
 i11 = (HEAPU8[i2 + 5 >> 0] | 0) << 16 | (HEAPU8[i2 + 4 >> 0] | 0) << 24 | (HEAPU8[i2 + 6 >> 0] | 0) << 8 | (HEAPU8[i2 + 7 >> 0] | 0);
 i3 = i6 + 28 | 0;
 HEAP32[i3 >> 2] = (i11 | 0) > -1 ? i11 : -1;
 i11 = (HEAPU8[i2 + 9 >> 0] | 0) << 16 | (HEAPU8[i2 + 8 >> 0] | 0) << 24 | (HEAPU8[i2 + 10 >> 0] | 0) << 8 | (HEAPU8[i2 + 11 >> 0] | 0);
 HEAP32[i6 >> 2] = (i11 | 0) > -1 ? i11 : -1;
 i11 = (HEAPU8[i2 + 12 >> 0] | 0) << 24;
 i10 = (HEAPU8[i2 + 13 >> 0] | 0) << 16 | i11 | (HEAPU8[i2 + 14 >> 0] | 0) << 8 | (HEAPU8[i2 + 15 >> 0] | 0);
 HEAP32[i6 + 4 >> 2] = (i10 | 0) > -1 ? i10 : -1;
 i10 = (HEAPU8[i2 + 16 >> 0] | 0) << 24;
 i9 = (HEAPU8[i2 + 17 >> 0] | 0) << 16 | i10 | (HEAPU8[i2 + 18 >> 0] | 0) << 8 | (HEAPU8[i2 + 19 >> 0] | 0);
 HEAP32[i6 + 8 >> 2] = (i9 | 0) > -1 ? i9 : -1;
 i9 = (HEAPU8[i2 + 20 >> 0] | 0) << 24;
 i8 = (HEAPU8[i2 + 21 >> 0] | 0) << 16 | i9 | (HEAPU8[i2 + 22 >> 0] | 0) << 8 | (HEAPU8[i2 + 23 >> 0] | 0);
 HEAP32[i6 + 12 >> 2] = (i8 | 0) > -1 ? i8 : -1;
 i8 = (HEAPU8[i2 + 24 >> 0] | 0) << 24;
 i12 = (HEAPU8[i2 + 25 >> 0] | 0) << 16 | i8 | (HEAPU8[i2 + 26 >> 0] | 0) << 8 | (HEAPU8[i2 + 27 >> 0] | 0);
 HEAP32[i6 + 16 >> 2] = (i12 | 0) > -1 ? i12 : -1;
 i12 = (HEAPU8[i2 + 28 >> 0] | 0) << 24;
 i2 = (HEAPU8[i2 + 29 >> 0] | 0) << 16 | i12 | (HEAPU8[i2 + 30 >> 0] | 0) << 8 | (HEAPU8[i2 + 31 >> 0] | 0);
 HEAP32[i6 + 20 >> 2] = (i2 | 0) > -1 ? i2 : -1;
 if ((i12 | (i11 | i10 | i9 | i8) | 0) < 0 | ((HEAP32[i1 >> 2] | 0) == -1 | (HEAP32[i3 >> 2] | 0) == -1 | (HEAP32[i6 >> 2] | 0) == -1)) {
  _png_chunk_benign_error(i4, 64962);
  STACKTOP = i7;
  return;
 }
 i1 = i4 + 898 | 0;
 i2 = HEAPU16[i1 >> 1] | 0;
 if (i2 & 32768 | 0) {
  STACKTOP = i7;
  return;
 }
 if (!(i2 & 16)) {
  HEAP16[i1 >> 1] = i2 | 16;
  _png_colorspace_set_chromaticities(i4, i4 + 824 | 0, i6, 1) | 0;
  _png_colorspace_sync(i4, i5);
  STACKTOP = i7;
  return;
 } else {
  HEAP16[i1 >> 1] = i2 | 32768;
  _png_colorspace_sync(i4, i5);
  _png_chunk_benign_error(i4, 63980);
  STACKTOP = i7;
  return;
 }
}

function _Color32DitherYV12Mod2X(i22, i23, i6, i2, i3, i4, i5, i26, i1) {
 i22 = i22 | 0;
 i23 = i23 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i26 = i26 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i24 = (i26 << 1) + i1 | 0;
 i25 = (i26 | 0) / 2 | 0;
 i16 = (i24 * 3 | 0) + i1 | 0;
 if ((i5 + 1 | 0) >>> 0 < 3) return;
 i17 = (i26 + 1 | 0) >>> 0 < 3;
 i18 = i24 + 1 | 0;
 i19 = i25 << 1;
 i20 = i25 << 2;
 i21 = i19 + i26 | 0;
 i15 = i4;
 i1 = i4 + (i24 << 1 << 2) | 0;
 i13 = i6;
 i14 = (i5 | 0) / 2 | 0;
 i4 = i6;
 while (1) {
  i14 = i14 + -1 | 0;
  i7 = i4 + i26 | 0;
  if (i17) {
   i6 = i13;
   i5 = i15;
   i4 = i7;
  } else {
   i12 = i2 + i25 | 0;
   i6 = i13 + i19 | 0;
   i4 = i4 + i21 | 0;
   i11 = i25;
   i9 = i3;
   i10 = i15;
   i8 = i1;
   i5 = i13;
   while (1) {
    i11 = i11 + -1 | 0;
    i30 = HEAPU8[i2 >> 0] | 0;
    i29 = (HEAP32[i22 + (i30 << 2) >> 2] | 0) + 256 | 0;
    i28 = HEAPU8[i9 >> 0] | 0;
    i30 = (HEAP32[i22 + ((i30 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i22 + ((i28 | 512) << 2) >> 2] | 0) | 0;
    i28 = (HEAP32[i22 + ((i28 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i13 = HEAPU8[i5 >> 0] | 0;
    i13 = HEAP32[i23 + (i30 + i13 << 2) >> 2] | HEAP32[i23 + (i29 + i13 << 2) >> 2] | HEAP32[i23 + (i28 + i13 << 2) >> 2];
    HEAP32[i10 + (i18 << 2) >> 2] = i13;
    HEAP32[i10 + (i24 << 2) >> 2] = i13;
    HEAP32[i10 + 4 >> 2] = i13;
    HEAP32[i10 >> 2] = i13;
    i13 = i10 + 8 | 0;
    i27 = HEAPU8[i5 + 1 >> 0] | 0;
    i27 = HEAP32[i23 + (i30 + i27 << 2) >> 2] | HEAP32[i23 + (i29 + i27 << 2) >> 2] | HEAP32[i23 + (i28 + i27 << 2) >> 2];
    HEAP32[i13 + (i18 << 2) >> 2] = i27;
    HEAP32[i13 + (i24 << 2) >> 2] = i27;
    HEAP32[i10 + 12 >> 2] = i27;
    HEAP32[i13 >> 2] = i27;
    i13 = HEAPU8[i7 >> 0] | 0;
    i13 = HEAP32[i23 + (i30 + i13 << 2) >> 2] | HEAP32[i23 + (i29 + i13 << 2) >> 2] | HEAP32[i23 + (i28 + i13 << 2) >> 2];
    HEAP32[i8 + (i18 << 2) >> 2] = i13;
    HEAP32[i8 + (i24 << 2) >> 2] = i13;
    HEAP32[i8 + 4 >> 2] = i13;
    HEAP32[i8 >> 2] = i13;
    i13 = i8 + 8 | 0;
    i27 = HEAPU8[i7 + 1 >> 0] | 0;
    i27 = HEAP32[i23 + (i30 + i27 << 2) >> 2] | HEAP32[i23 + (i29 + i27 << 2) >> 2] | HEAP32[i23 + (i28 + i27 << 2) >> 2];
    HEAP32[i13 + (i18 << 2) >> 2] = i27;
    HEAP32[i13 + (i24 << 2) >> 2] = i27;
    HEAP32[i8 + 12 >> 2] = i27;
    HEAP32[i13 >> 2] = i27;
    if (!i11) break; else {
     i2 = i2 + 1 | 0;
     i9 = i9 + 1 | 0;
     i10 = i10 + 16 | 0;
     i7 = i7 + 2 | 0;
     i8 = i8 + 16 | 0;
     i5 = i5 + 2 | 0;
    }
   }
   i2 = i12;
   i3 = i3 + i25 | 0;
   i5 = i15 + (i20 << 2) | 0;
   i1 = i1 + (i20 << 2) | 0;
  }
  if (!i14) break; else {
   i15 = i5 + (i16 << 2) | 0;
   i1 = i1 + (i16 << 2) | 0;
   i13 = i6 + i26 | 0;
  }
 }
 return;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i26 = HEAPU8[i15 + 60 >> 0] | 0;
 i27 = HEAPU8[i15 + 61 >> 0] | 0;
 i16 = HEAPU8[i15 + 62 >> 0] | 0;
 i17 = HEAPU8[i15 + 63 >> 0] | 0;
 i18 = i15 + 28 | 0;
 i25 = HEAP32[i18 >> 2] | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i18 >> 2] = i2;
 if (!i25) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i22 = i15 + 32 | 0;
 i23 = (i1 & 1 | 0) == 0;
 i24 = (i1 & 2 | 0) == 0;
 i25 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 i12 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i13 = i1;
 i3 = i12;
 while (1) {
  i4 = HEAP32[i20 >> 2] | 0;
  if (!i4) i3 = i2; else {
   while (1) {
    i4 = i4 + -1 | 0;
    i11 = HEAP32[i3 >> 2] | 0;
    i10 = i11 >>> 24;
    i8 = i11 >>> 16 & 255;
    i7 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i9 = HEAP32[i1 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i5 = i9 >>> 8 & 255;
    i6 = i9 & 255;
    i9 = i9 >>> 24;
    if (!i23) {
     i7 = ((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i26) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i11, i17) | 0) >>> 0) / 255 | 0;
    i11 = i24 ? i11 : i28;
    if (i25 & i11 >>> 0 < 255) {
     i7 = ((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i28 = 255 - i11 | 0;
      i9 = (((Math_imul(i28, i9) | 0) >>> 0) / 255 | 0) + i11 | 0;
      i6 = i7 + (((Math_imul(i28, i6) | 0) >>> 0) / 255 | 0) | 0;
      i5 = i8 + (((Math_imul(i28, i5) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i10 + (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i2 = i10 + i2 | 0;
      i5 = i8 + i5 | 0;
      i6 = i7 + i6 | 0;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i7, i6) | 0) >>> 0) / 255 | 0;
      i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i10, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i5 << 8 | i2 << 16 | i6 | i9 << 24;
    if (!i4) break; else {
     i1 = i1 + 4 | 0;
     i3 = i3 + 4 | 0;
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
  }
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i18 >> 2] = i2;
  if (!i3) break; else {
   i13 = i1;
   i3 = i4;
   i12 = i4;
  }
 }
 HEAP32[i15 >> 2] = i4;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i26 = HEAPU8[i15 + 60 >> 0] | 0;
 i27 = HEAPU8[i15 + 61 >> 0] | 0;
 i16 = HEAPU8[i15 + 62 >> 0] | 0;
 i17 = HEAPU8[i15 + 63 >> 0] | 0;
 i18 = i15 + 28 | 0;
 i25 = HEAP32[i18 >> 2] | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i18 >> 2] = i2;
 if (!i25) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i22 = i15 + 32 | 0;
 i23 = (i1 & 1 | 0) == 0;
 i24 = (i1 & 2 | 0) == 0;
 i25 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 i12 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i13 = i1;
 i3 = i12;
 while (1) {
  i4 = HEAP32[i20 >> 2] | 0;
  if (!i4) i3 = i2; else {
   while (1) {
    i4 = i4 + -1 | 0;
    i11 = HEAP32[i3 >> 2] | 0;
    i7 = i11 >>> 24;
    i8 = i11 >>> 16 & 255;
    i10 = i11 >>> 8 & 255;
    i11 = i11 & 255;
    i9 = HEAP32[i1 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i5 = i9 >>> 8 & 255;
    i6 = i9 & 255;
    i9 = i9 >>> 24;
    if (!i23) {
     i7 = ((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i26) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i11, i17) | 0) >>> 0) / 255 | 0;
    i11 = i24 ? i11 : i28;
    if (i25 & i11 >>> 0 < 255) {
     i7 = ((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i28 = 255 - i11 | 0;
      i9 = (((Math_imul(i28, i9) | 0) >>> 0) / 255 | 0) + i11 | 0;
      i6 = i7 + (((Math_imul(i28, i6) | 0) >>> 0) / 255 | 0) | 0;
      i5 = i8 + (((Math_imul(i28, i5) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i10 + (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i2 = i10 + i2 | 0;
      i5 = i8 + i5 | 0;
      i6 = i7 + i6 | 0;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i7, i6) | 0) >>> 0) / 255 | 0;
      i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i10, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i5 << 8 | i2 << 16 | i6 | i9 << 24;
    if (!i4) break; else {
     i1 = i1 + 4 | 0;
     i3 = i3 + 4 | 0;
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
  }
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i18 >> 2] = i2;
  if (!i3) break; else {
   i13 = i1;
   i3 = i4;
   i12 = i4;
  }
 }
 HEAP32[i15 >> 2] = i4;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i26 = HEAPU8[i15 + 60 >> 0] | 0;
 i27 = HEAPU8[i15 + 61 >> 0] | 0;
 i16 = HEAPU8[i15 + 62 >> 0] | 0;
 i17 = HEAPU8[i15 + 63 >> 0] | 0;
 i18 = i15 + 28 | 0;
 i25 = HEAP32[i18 >> 2] | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i18 >> 2] = i2;
 if (!i25) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i22 = i15 + 32 | 0;
 i23 = (i1 & 1 | 0) == 0;
 i24 = (i1 & 2 | 0) == 0;
 i25 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 i12 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i13 = i1;
 i3 = i12;
 while (1) {
  i4 = HEAP32[i20 >> 2] | 0;
  if (!i4) i3 = i2; else {
   while (1) {
    i4 = i4 + -1 | 0;
    i11 = HEAP32[i3 >> 2] | 0;
    i10 = i11 >>> 16 & 255;
    i8 = i11 >>> 8 & 255;
    i7 = i11 & 255;
    i11 = i11 >>> 24;
    i9 = HEAP32[i1 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i5 = i9 >>> 8 & 255;
    i6 = i9 & 255;
    i9 = i9 >>> 24;
    if (!i23) {
     i7 = ((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i26) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i11, i17) | 0) >>> 0) / 255 | 0;
    i11 = i24 ? i11 : i28;
    if (i25 & i11 >>> 0 < 255) {
     i7 = ((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i28 = 255 - i11 | 0;
      i9 = (((Math_imul(i28, i9) | 0) >>> 0) / 255 | 0) + i11 | 0;
      i6 = i7 + (((Math_imul(i28, i6) | 0) >>> 0) / 255 | 0) | 0;
      i5 = i8 + (((Math_imul(i28, i5) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i10 + (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i2 = i10 + i2 | 0;
      i5 = i8 + i5 | 0;
      i6 = i7 + i6 | 0;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i7, i6) | 0) >>> 0) / 255 | 0;
      i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i10, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i5 << 8 | i2 << 16 | i6 | i9 << 24;
    if (!i4) break; else {
     i1 = i1 + 4 | 0;
     i3 = i3 + 4 | 0;
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
  }
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i18 >> 2] = i2;
  if (!i3) break; else {
   i13 = i1;
   i3 = i4;
   i12 = i4;
  }
 }
 HEAP32[i15 >> 2] = i4;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i26 = HEAPU8[i15 + 60 >> 0] | 0;
 i27 = HEAPU8[i15 + 61 >> 0] | 0;
 i16 = HEAPU8[i15 + 62 >> 0] | 0;
 i17 = HEAPU8[i15 + 63 >> 0] | 0;
 i18 = i15 + 28 | 0;
 i25 = HEAP32[i18 >> 2] | 0;
 i2 = i25 + -1 | 0;
 HEAP32[i18 >> 2] = i2;
 if (!i25) return;
 i19 = i15 + 20 | 0;
 i20 = i15 + 24 | 0;
 i21 = i15 + 12 | 0;
 i22 = i15 + 32 | 0;
 i23 = (i1 & 1 | 0) == 0;
 i24 = (i1 & 2 | 0) == 0;
 i25 = (i1 & 48 | 0) != 0;
 i14 = i1 & 112;
 i12 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 i13 = i1;
 i3 = i12;
 while (1) {
  i4 = HEAP32[i20 >> 2] | 0;
  if (!i4) i3 = i2; else {
   while (1) {
    i4 = i4 + -1 | 0;
    i11 = HEAP32[i3 >> 2] | 0;
    i7 = i11 >>> 16 & 255;
    i8 = i11 >>> 8 & 255;
    i10 = i11 & 255;
    i11 = i11 >>> 24;
    i9 = HEAP32[i1 >> 2] | 0;
    i2 = i9 >>> 16 & 255;
    i5 = i9 >>> 8 & 255;
    i6 = i9 & 255;
    i9 = i9 >>> 24;
    if (!i23) {
     i7 = ((Math_imul(i7, i16) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i27) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i26) | 0) >>> 0) / 255 | 0;
    }
    i28 = ((Math_imul(i11, i17) | 0) >>> 0) / 255 | 0;
    i11 = i24 ? i11 : i28;
    if (i25 & i11 >>> 0 < 255) {
     i7 = ((Math_imul(i7, i11) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i11) | 0) >>> 0) / 255 | 0;
     i10 = ((Math_imul(i10, i11) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i28 = 255 - i11 | 0;
      i9 = (((Math_imul(i28, i9) | 0) >>> 0) / 255 | 0) + i11 | 0;
      i6 = i7 + (((Math_imul(i28, i6) | 0) >>> 0) / 255 | 0) | 0;
      i5 = i8 + (((Math_imul(i28, i5) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i10 + (((Math_imul(i28, i2) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i2 = i10 + i2 | 0;
      i5 = i8 + i5 | 0;
      i6 = i7 + i6 | 0;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i7, i6) | 0) >>> 0) / 255 | 0;
      i5 = ((Math_imul(i8, i5) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i10, i2) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i1 >> 2] = i5 << 8 | i2 << 16 | i6 | i9 << 24;
    if (!i4) break; else {
     i1 = i1 + 4 | 0;
     i3 = i3 + 4 | 0;
    }
   }
   i3 = HEAP32[i18 >> 2] | 0;
  }
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i22 >> 2] | 0) | 0;
  i2 = i3 + -1 | 0;
  HEAP32[i18 >> 2] = i2;
  if (!i3) break; else {
   i13 = i1;
   i3 = i4;
   i12 = i4;
  }
 }
 HEAP32[i15 >> 2] = i4;
 HEAP32[i19 >> 2] = i1;
 return;
}

function _png_xy_from_XYZ(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i4 = i11 + 4 | 0;
 i9 = (HEAP32[i4 >> 2] | 0) + i1 + (HEAP32[i11 + 8 >> 2] | 0) | 0;
 if (!i9) {
  i12 = 1;
  return i12 | 0;
 }
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i9 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i12 >> 2] = i1;
 i3 = i12 + 4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i9 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i3 >> 2] = i1;
 i6 = HEAP32[i11 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i5 = i11 + 12 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i8 = i11 + 16 | 0;
 i4 = (HEAP32[i8 >> 2] | 0) + i1 + (HEAP32[i11 + 20 >> 2] | 0) | 0;
 i3 = i12 + 8 | 0;
 if (!i4) {
  i12 = 1;
  return i12 | 0;
 }
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i4 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i3 >> 2] = i1;
 i3 = i12 + 12 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i4 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i3 >> 2] = i1;
 i10 = i4 + i9 | 0;
 i9 = (HEAP32[i5 >> 2] | 0) + i6 | 0;
 i8 = (HEAP32[i8 >> 2] | 0) + i7 | 0;
 i6 = i11 + 24 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i11 + 28 | 0;
 i4 = (HEAP32[i7 >> 2] | 0) + i1 + (HEAP32[i11 + 32 >> 2] | 0) | 0;
 i3 = i12 + 16 | 0;
 if (!i4) {
  i12 = 1;
  return i12 | 0;
 }
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i4 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i3 >> 2] = i1;
 i3 = i12 + 20 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i4 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i3 >> 2] = i1;
 i5 = i10 + i4 | 0;
 i1 = i9 + (HEAP32[i6 >> 2] | 0) | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 i4 = i12 + 24 | 0;
 if (!i5) {
  i12 = 1;
  return i12 | 0;
 }
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i5 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i4 >> 2] = i1;
 i1 = i8 + i3 | 0;
 i3 = i12 + 28 | 0;
 if (!i1) i1 = 0; else {
  d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / +(i5 | 0) + .5));
  if (d2 <= 2147483647.0 & d2 >= -2147483648.0) i1 = ~~d2; else {
   i12 = 1;
   return i12 | 0;
  }
 }
 HEAP32[i3 >> 2] = i1;
 i12 = 0;
 return i12 | 0;
}

function _png_do_gray_to_rgb(i7, i3) {
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i4 = i7 + 9 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 if ((i1 & 255) <= 7) return;
 i5 = i7 + 8 | 0;
 i2 = HEAP8[i5 >> 0] | 0;
 if (i2 & 2) return;
 L7 : do switch (i2 << 24 >> 24) {
 case 0:
  {
   if (i1 << 24 >> 24 == 8) {
    i1 = i3 + i6 + -1 | 0;
    if (!i6) break L7;
    i3 = i1 + (i6 << 1) | 0;
    i2 = 0;
    while (1) {
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     HEAP8[i3 + -1 >> 0] = HEAP8[i1 >> 0] | 0;
     HEAP8[i3 + -2 >> 0] = HEAP8[i1 >> 0] | 0;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i6 | 0)) break; else {
      i3 = i3 + -3 | 0;
      i1 = i1 + -1 | 0;
     }
    }
   } else {
    i1 = i3 + (i6 << 1) + -1 | 0;
    if (!i6) break L7;
    i3 = i1 + (i6 << 2) | 0;
    i2 = 0;
    while (1) {
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     i8 = i1 + -1 | 0;
     HEAP8[i3 + -1 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i3 + -2 >> 0] = HEAP8[i1 >> 0] | 0;
     HEAP8[i3 + -3 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i3 + -4 >> 0] = HEAP8[i1 >> 0] | 0;
     HEAP8[i3 + -5 >> 0] = HEAP8[i8 >> 0] | 0;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i6 | 0)) break; else {
      i3 = i3 + -6 | 0;
      i1 = i1 + -2 | 0;
     }
    }
   }
   break;
  }
 case 4:
  {
   if (i1 << 24 >> 24 == 8) {
    i2 = i6 << 1;
    i1 = i3 + i2 + -1 | 0;
    if (!i6) break L7;
    i3 = i1 + i2 | 0;
    i2 = 0;
    while (1) {
     i8 = i1 + -1 | 0;
     HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
     HEAP8[i3 + -1 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i3 + -2 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i3 + -3 >> 0] = HEAP8[i8 >> 0] | 0;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i6 | 0)) break; else {
      i3 = i3 + -4 | 0;
      i1 = i1 + -2 | 0;
     }
    }
   } else {
    i2 = i6 << 2;
    i1 = i3 + i2 + -1 | 0;
    if (!i6) break L7;
    i3 = i1;
    i1 = i1 + i2 | 0;
    i2 = 0;
    while (1) {
     HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
     i9 = i3 + -2 | 0;
     HEAP8[i1 + -1 >> 0] = HEAP8[i3 + -1 >> 0] | 0;
     HEAP8[i1 + -2 >> 0] = HEAP8[i9 >> 0] | 0;
     i8 = i3 + -3 | 0;
     HEAP8[i1 + -3 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i1 + -4 >> 0] = HEAP8[i9 >> 0] | 0;
     HEAP8[i1 + -5 >> 0] = HEAP8[i8 >> 0] | 0;
     HEAP8[i1 + -6 >> 0] = HEAP8[i9 >> 0] | 0;
     HEAP8[i1 + -7 >> 0] = HEAP8[i8 >> 0] | 0;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i6 | 0)) break; else {
      i3 = i3 + -4 | 0;
      i1 = i1 + -8 | 0;
     }
    }
   }
   break;
  }
 default:
  {}
 } while (0);
 i9 = i7 + 10 | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 HEAP8[i9 >> 0] = (i1 & 255) + 2;
 HEAP8[i5 >> 0] = HEAP8[i5 >> 0] | 2;
 i1 = Math_imul(HEAPU8[i4 >> 0] | 0, i1 + 2 & 255) | 0;
 HEAP8[i7 + 11 >> 0] = i1;
 i1 = i1 & 255;
 if (i1 >>> 0 > 7) i1 = Math_imul(i1 >>> 3, i6) | 0; else i1 = ((Math_imul(i1, i6) | 0) + 7 | 0) >>> 3;
 HEAP32[i7 + 4 >> 2] = i1;
 return;
}

function _crc32(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (!i3) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = ~i1;
 L4 : do if (i2) {
  while (1) {
   if (!(i3 & 3)) break;
   i1 = HEAP32[18876 + ((i1 & 255 ^ (HEAPU8[i3 >> 0] | 0)) << 2) >> 2] ^ i1 >>> 8;
   i2 = i2 + -1 | 0;
   if (!i2) break L4; else i3 = i3 + 1 | 0;
  }
  if (i2 >>> 0 > 31) {
   i5 = i2 + -32 | 0;
   i6 = i5 & -32;
   i4 = i3 + (i6 + 32) | 0;
   while (1) {
    i7 = HEAP32[i3 >> 2] ^ i1;
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 4 >> 2];
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 8 >> 2];
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 12 >> 2];
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 16 >> 2];
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 20 >> 2];
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 24 >> 2];
    i7 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2] ^ HEAP32[i3 + 28 >> 2];
    i1 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2];
    i2 = i2 + -32 | 0;
    if (i2 >>> 0 <= 31) break; else i3 = i3 + 32 | 0;
   }
   i3 = i4;
   i2 = i5 - i6 | 0;
  }
  if (i2 >>> 0 > 3) {
   i6 = i2 + -4 | 0;
   i5 = i6 >>> 2;
   i4 = i3;
   while (1) {
    i7 = HEAP32[i4 >> 2] ^ i1;
    i1 = HEAP32[20924 + ((i7 >>> 8 & 255) << 2) >> 2] ^ HEAP32[21948 + ((i7 & 255) << 2) >> 2] ^ HEAP32[19900 + ((i7 >>> 16 & 255) << 2) >> 2] ^ HEAP32[18876 + (i7 >>> 24 << 2) >> 2];
    i2 = i2 + -4 | 0;
    if (i2 >>> 0 <= 3) break; else i4 = i4 + 4 | 0;
   }
   i3 = i3 + (i5 + 1 << 2) | 0;
   i2 = i6 & 3;
  }
  if (i2) while (1) {
   i1 = HEAP32[18876 + ((i1 & 255 ^ (HEAPU8[i3 >> 0] | 0)) << 2) >> 2] ^ i1 >>> 8;
   i2 = i2 + -1 | 0;
   if (!i2) break; else i3 = i3 + 1 | 0;
  }
 } while (0);
 i7 = ~i1;
 return i7 | 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i4, i6, i9, i7, i10, i1, i2, i8, i12, i13, i11, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 L1 : do if (i4 << 24 >> 24 == i1 << 24 >> 24) if (!(HEAP8[i6 >> 0] | 0)) i1 = -1; else {
  HEAP8[i6 >> 0] = 0;
  i9 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = 46;
  i10 = HEAP8[i8 + 11 >> 0] | 0;
  if (!((i10 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i10 & 255) | 0)) i1 = 0; else {
   i1 = HEAP32[i13 >> 2] | 0;
   if ((i1 - i12 | 0) < 160) {
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    i1 = 0;
   } else i1 = 0;
  }
 } else {
  if (i4 << 24 >> 24 == i2 << 24 >> 24) {
   i3 = HEAP8[i8 + 11 >> 0] | 0;
   if ((i3 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i3 & 255) | 0) {
    if (!(HEAP8[i6 >> 0] | 0)) {
     i1 = -1;
     break;
    }
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i1 - i12 | 0) >= 160) {
     i1 = 0;
     break;
    }
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    HEAP32[i11 >> 2] = 0;
    i1 = 0;
    break;
   }
  }
  i3 = i5 + 32 | 0;
  i2 = 0;
  while (1) {
   i1 = i5 + i2 | 0;
   if ((i2 | 0) == 32) {
    i1 = i3;
    break;
   }
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break; else i2 = i2 + 1 | 0;
  }
  i2 = i1 - i5 | 0;
  if ((i2 | 0) > 31) i1 = -1; else {
   i3 = HEAP8[73125 + i2 >> 0] | 0;
   switch (i2 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0)) if ((HEAP8[i1 + -1 >> 0] & 95) != (HEAP8[i9 >> 0] & 127)) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i9 >> 0] = 80;
     i1 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   default:
    {
     i1 = i3 & 95;
     if ((i1 | 0) == (HEAP8[i9 >> 0] | 0)) {
      HEAP8[i9 >> 0] = i1 | 128;
      if (HEAP8[i6 >> 0] | 0) {
       HEAP8[i6 >> 0] = 0;
       i9 = HEAP8[i8 + 11 >> 0] | 0;
       if ((i9 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i9 & 255) | 0) {
        i1 = HEAP32[i13 >> 2] | 0;
        if ((i1 - i12 | 0) < 160) {
         i12 = HEAP32[i11 >> 2] | 0;
         HEAP32[i13 >> 2] = i1 + 4;
         HEAP32[i1 >> 2] = i12;
        }
       }
      }
     }
     i13 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i13 + 1;
     HEAP8[i13 >> 0] = i3;
     if ((i2 | 0) > 21) {
      i1 = 0;
      break L1;
     }
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     i1 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function _SDL_GetError() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i14 = i16 + 24 | 0;
 i13 = i16 + 16 | 0;
 i12 = i16 + 8 | 0;
 i11 = i16;
 i8 = i16 + 32 | 0;
 HEAP8[85558] = 0;
 if (!(HEAP32[19002] | 0)) {
  STACKTOP = i16;
  return 85558;
 }
 i3 = HEAP8[76012] | 0;
 L4 : do if (!(i3 << 24 >> 24)) {
  i2 = 85558;
  i1 = 1023;
 } else {
  i9 = i8 + 1 | 0;
  i10 = i8 + 30 | 0;
  i4 = 0;
  i2 = 85558;
  i5 = 76012;
  i1 = 1023;
  while (1) {
   while (1) {
    if (i3 << 24 >> 24 == 37) break;
    i5 = i5 + 1 | 0;
    i6 = i2 + 1 | 0;
    HEAP8[i2 >> 0] = i3;
    i7 = i1 + -1 | 0;
    i3 = HEAP8[i5 >> 0] | 0;
    if (!((i1 | 0) > 1 & i3 << 24 >> 24 != 0)) {
     i2 = i6;
     i1 = i7;
     break L4;
    } else {
     i2 = i6;
     i1 = i7;
    }
   }
   HEAP8[i8 >> 0] = 37;
   i7 = i9;
   i3 = i5 + 1 | 0;
   while (1) {
    i6 = HEAP8[i3 >> 0] | 0;
    if (!(i6 << 24 >> 24 == 46 | (i6 + -48 & 255) < 10)) {
     i15 = 9;
     break;
    }
    i3 = i3 + 1 | 0;
    i5 = i7 + 1 | 0;
    HEAP8[i7 >> 0] = i6;
    if (i7 >>> 0 < i10 >>> 0) i7 = i5; else {
     i6 = i3;
     break;
    }
   }
   if ((i15 | 0) == 9) {
    i15 = 0;
    HEAP8[i7 >> 0] = i6;
    i5 = i7 + 1 | 0;
    i6 = i3 + 1 | 0;
   }
   HEAP8[i5 >> 0] = 0;
   switch (HEAP8[i7 >> 0] | 0) {
   case 37:
    {
     HEAP8[i2 >> 0] = 37;
     i2 = i2 + 1 | 0;
     i1 = i1 + -1 | 0;
     break;
    }
   case 88:
   case 120:
   case 111:
   case 117:
   case 100:
   case 105:
   case 99:
    {
     HEAP32[i11 >> 2] = HEAP32[76144 + (i4 << 7) >> 2];
     i7 = _SDL_snprintf(i2, i1, i8, i11) | 0;
     i5 = (i7 | 0) > 0;
     i4 = i4 + 1 | 0;
     i2 = i5 ? i2 + i7 | 0 : i2;
     i1 = i1 - (i5 ? i7 : 0) | 0;
     break;
    }
   case 102:
    {
     HEAPF64[i12 >> 3] = +HEAPF64[76144 + (i4 << 7) >> 3];
     i7 = _SDL_snprintf(i2, i1, i8, i12) | 0;
     i5 = (i7 | 0) > 0;
     i4 = i4 + 1 | 0;
     i2 = i5 ? i2 + i7 | 0 : i2;
     i1 = i1 - (i5 ? i7 : 0) | 0;
     break;
    }
   case 112:
    {
     HEAP32[i13 >> 2] = HEAP32[76144 + (i4 << 7) >> 2];
     i7 = _SDL_snprintf(i2, i1, i8, i13) | 0;
     i5 = (i7 | 0) > 0;
     i4 = i4 + 1 | 0;
     i2 = i5 ? i2 + i7 | 0 : i2;
     i1 = i1 - (i5 ? i7 : 0) | 0;
     break;
    }
   case 115:
    {
     HEAP32[i14 >> 2] = 76144 + (i4 << 7);
     i7 = _SDL_snprintf(i2, i1, i8, i14) | 0;
     i5 = (i7 | 0) > 0;
     i4 = i4 + 1 | 0;
     i2 = i5 ? i2 + i7 | 0 : i2;
     i1 = i1 - (i5 ? i7 : 0) | 0;
     break;
    }
   default:
    {}
   }
   i3 = HEAP8[i6 >> 0] | 0;
   if (!((i1 | 0) > 0 & i3 << 24 >> 24 != 0)) break L4; else i5 = i6;
  }
 } while (0);
 HEAP8[((i1 | 0) < 0 ? i2 + (i1 + -1) | 0 : i2) >> 0] = 0;
 STACKTOP = i16;
 return 85558;
}

function _SDL_GetWindowDisplayIndex(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i13 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i12 = i14 + 16 | 0;
 i1 = i14 + 8 | 0;
 i10 = i14 + 40 | 0;
 i11 = i14 + 24 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i14) | 0;
  i13 = -1;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (i7 | 0) if ((HEAP32[i7 >> 2] | 0) == (i2 + 280 | 0)) {
  i5 = HEAP32[i7 + 16 >> 2] | 0;
  i1 = i5 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i13 = 7;
    break;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 805240832:
   {
    i13 = 7;
    break;
   }
  default:
   {}
  }
  if ((i13 | 0) == 7) {
   i13 = i5 & 65535;
   i13 = (i13 | 0) >= (HEAP32[i2 + 264 >> 2] | 0) ? 0 : i13;
   STACKTOP = i14;
   return i13 | 0;
  }
  i6 = HEAP32[i7 + 20 >> 2] | 0;
  i1 = i6 & -65536;
  if ((i1 | 0) < 805240832) switch (i1 | 0) {
  case 536805376:
   {
    i13 = 11;
    break;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 805240832:
   {
    i13 = 11;
    break;
   }
  default:
   {}
  }
  if ((i13 | 0) == 11) {
   i13 = i6 & 65535;
   i13 = (i13 | 0) >= (HEAP32[i2 + 264 >> 2] | 0) ? 0 : i13;
   STACKTOP = i14;
   return i13 | 0;
  }
  i3 = HEAP32[i2 + 264 >> 2] | 0;
  i4 = (i3 | 0) > 0;
  L22 : do if (i4) {
   i2 = HEAP32[i2 + 268 >> 2] | 0;
   i1 = 0;
   while (1) {
    if ((HEAP32[i2 + (i1 * 68 | 0) + 56 >> 2] | 0) == (i7 | 0)) break;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) >= (i3 | 0)) break L22;
   }
   STACKTOP = i14;
   return i1 | 0;
  } while (0);
  HEAP32[i10 >> 2] = ((HEAP32[i7 + 24 >> 2] | 0) / 2 | 0) + i5;
  i9 = i10 + 4 | 0;
  HEAP32[i9 >> 2] = ((HEAP32[i7 + 28 >> 2] | 0) / 2 | 0) + i6;
  if (i4) {
   i4 = i11 + 8 | 0;
   i5 = i11 + 4 | 0;
   i6 = i11 + 12 | 0;
   i2 = 2147483647;
   i1 = -1;
   i3 = 0;
   while (1) {
    _SDL_GetDisplayBounds(i3, i11) | 0;
    if (_SDL_EnclosePoints(i10, 1, i11, 0) | 0) {
     i1 = i3;
     i13 = 20;
     break;
    }
    i7 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i11 >> 2] | 0) + ((HEAP32[i4 >> 2] | 0) / -2 | 0) | 0;
    i8 = (HEAP32[i9 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) + ((HEAP32[i6 >> 2] | 0) / -2 | 0) | 0;
    i7 = (Math_imul(i8, i8) | 0) + (Math_imul(i7, i7) | 0) | 0;
    i8 = (i7 | 0) < (i2 | 0);
    i1 = i8 ? i3 : i1;
    i3 = i3 + 1 | 0;
    if ((i3 | 0) >= (HEAP32[(HEAP32[19487] | 0) + 264 >> 2] | 0)) break; else i2 = i8 ? i7 : i2;
   }
   if ((i13 | 0) == 20) {
    STACKTOP = i14;
    return i1 | 0;
   }
   if ((i1 | 0) >= 0) {
    i13 = i1;
    STACKTOP = i14;
    return i13 | 0;
   }
  } else i1 = -1;
  _SDL_SetError(47068, i12) | 0;
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 _SDL_SetError(59973, i1) | 0;
 i13 = -1;
 STACKTOP = i14;
 return i13 | 0;
}

function _Blit_RGB888_RGB565(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i9 = (HEAP32[i2 + 16 >> 2] | 0) / 4 | 0;
 i7 = (HEAP32[i2 + 36 >> 2] | 0) / 2 | 0;
 if (!i3) return;
 i8 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 255;
 i5 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i6 & 7) {
  case 0:
   {
    i4 = i8;
    i2 = i5;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i8;
    i2 = i5;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i8;
    i2 = i5;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i8;
    i2 = i5;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i8;
    i2 = i5;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i8;
    i2 = i5;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i8;
    i2 = i5;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i8;
    i2 = i5;
    i5 = 11;
    break;
   }
  default:
   {
    i5 = 12;
    break L4;
   }
  }
  while (1) if ((i5 | 0) == 4) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 8 & 63488 | i10 >>> 5 & 2016 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i5 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i5 = 14;
   break;
  } else {
   i5 = i2 + (i9 << 2) | 0;
   i1 = i1 + (i7 << 1) | 0;
  }
 }
 if ((i5 | 0) != 12) if ((i5 | 0) == 14) return;
}

function _Blit_RGB888_RGB555(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i9 = (HEAP32[i2 + 16 >> 2] | 0) / 4 | 0;
 i7 = (HEAP32[i2 + 36 >> 2] | 0) / 2 | 0;
 if (!i3) return;
 i8 = (i1 + 7 | 0) / 8 | 0;
 i6 = i1 & 255;
 i5 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i2 + 20 >> 2] | 0;
 L4 : while (1) {
  i3 = i3 + -1 | 0;
  switch (i6 & 7) {
  case 0:
   {
    i4 = i8;
    i2 = i5;
    i5 = 4;
    break;
   }
  case 7:
   {
    i4 = i8;
    i2 = i5;
    i5 = 5;
    break;
   }
  case 6:
   {
    i4 = i8;
    i2 = i5;
    i5 = 6;
    break;
   }
  case 5:
   {
    i4 = i8;
    i2 = i5;
    i5 = 7;
    break;
   }
  case 4:
   {
    i4 = i8;
    i2 = i5;
    i5 = 8;
    break;
   }
  case 3:
   {
    i4 = i8;
    i2 = i5;
    i5 = 9;
    break;
   }
  case 2:
   {
    i4 = i8;
    i2 = i5;
    i5 = 10;
    break;
   }
  case 1:
   {
    i4 = i8;
    i2 = i5;
    i5 = 11;
    break;
   }
  default:
   {
    i5 = 12;
    break L4;
   }
  }
  while (1) if ((i5 | 0) == 4) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 5;
   continue;
  } else if ((i5 | 0) == 5) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 6;
   continue;
  } else if ((i5 | 0) == 6) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 7;
   continue;
  } else if ((i5 | 0) == 7) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 8;
   continue;
  } else if ((i5 | 0) == 8) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 9;
   continue;
  } else if ((i5 | 0) == 9) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 10;
   continue;
  } else if ((i5 | 0) == 10) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   i5 = 11;
   continue;
  } else if ((i5 | 0) == 11) {
   i10 = HEAP32[i2 >> 2] | 0;
   HEAP16[i1 >> 1] = i10 >>> 9 & 31744 | i10 >>> 6 & 992 | i10 >>> 3 & 31;
   i2 = i2 + 4 | 0;
   i1 = i1 + 2 | 0;
   if ((i4 | 0) > 1) {
    i4 = i4 + -1 | 0;
    i5 = 4;
    continue;
   } else break;
  }
  if (!i3) {
   i5 = 14;
   break;
  } else {
   i5 = i2 + (i9 << 2) | 0;
   i1 = i1 + (i7 << 1) | 0;
  }
 }
 if ((i5 | 0) != 12) if ((i5 | 0) == 14) return;
}

function _png_format_number(i22, i2, i16, i17) {
 i22 = i22 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i18 = 0;
 i9 = i2 + -1 | 0;
 HEAP8[i9 >> 0] = 0;
 if (i9 >>> 0 <= i22 >>> 0) {
  i22 = i9;
  return i22 | 0;
 }
 i10 = (i16 | 0) == 5;
 i8 = 0;
 i5 = 1;
 i7 = 0;
 i2 = i17;
 i4 = i9;
 L4 : while (1) {
  L6 : do switch (i16 | 0) {
  case 2:
   {
    i19 = 1;
    i20 = 0;
    i21 = i17;
    i11 = i9;
    i18 = 5;
    break L4;
   }
  case 5:
   {
    if (!((i2 | 0) != 0 | (i7 | 0) < (i5 | 0))) {
     i1 = i4;
     i18 = 22;
     break L4;
    }
    i3 = (i2 >>> 0) % 10 | 0;
    i5 = i4 + -1 | 0;
    if (!(i8 | i3)) i6 = 0; else {
     HEAP8[i5 >> 0] = HEAP8[60660 + i3 >> 0] | 0;
     i6 = 1;
     i4 = i5;
    }
    i3 = i7;
    i2 = (i2 >>> 0) / 10 | 0;
    i5 = i6;
    i6 = 5;
    break;
   }
  default:
   {
    i6 = i5;
    i3 = i7;
    while (1) {
     if (!((i2 | 0) != 0 | (i3 | 0) < (i6 | 0))) {
      i1 = i4;
      i18 = 22;
      break L4;
     }
     switch (i16 | 0) {
     case 3:
      {
       i13 = i6;
       i18 = 14;
       break;
      }
     case 4:
      {
       i13 = 2;
       i18 = 14;
       break;
      }
     case 1:
      {
       i14 = i4 + -1 | 0;
       HEAP8[i14 >> 0] = HEAP8[60660 + ((i2 >>> 0) % 10 | 0) >> 0] | 0;
       i12 = (i2 >>> 0) / 10 | 0;
       i15 = i6;
       break;
      }
     default:
      {
       i2 = 0;
       i5 = i8;
       break L6;
      }
     }
     if ((i18 | 0) == 14) {
      i18 = 0;
      i14 = i4 + -1 | 0;
      HEAP8[i14 >> 0] = HEAP8[60660 + (i2 & 15) >> 0] | 0;
      i12 = i2 >>> 4;
      i15 = i13;
     }
     if (i14 >>> 0 > i22 >>> 0) {
      i6 = i15;
      i3 = i3 + 1 | 0;
      i2 = i12;
      i4 = i14;
     } else {
      i1 = i14;
      i18 = 22;
      break L4;
     }
    }
   }
  } while (0);
  i3 = i3 + 1 | 0;
  do if (i10 & (i3 | 0) == 5 & i4 >>> 0 > i22 >>> 0) {
   if (i5 | 0) {
    i4 = i4 + -1 | 0;
    HEAP8[i4 >> 0] = 46;
    i3 = 5;
    break;
   }
   if (!i2) {
    i4 = i4 + -1 | 0;
    HEAP8[i4 >> 0] = 48;
    i5 = 0;
    i3 = 5;
    i2 = 0;
   } else {
    i5 = 0;
    i3 = 5;
   }
  } while (0);
  if (i4 >>> 0 > i22 >>> 0) {
   i8 = i5;
   i5 = i6;
   i7 = i3;
  } else {
   i1 = i4;
   i18 = 22;
   break;
  }
 }
 if ((i18 | 0) == 5) {
  while (1) {
   if (!((i21 | 0) != 0 | (i20 | 0) < (i19 | 0))) {
    i1 = i11;
    i18 = 22;
    break;
   }
   i1 = i11 + -1 | 0;
   HEAP8[i1 >> 0] = HEAP8[60660 + ((i21 >>> 0) % 10 | 0) >> 0] | 0;
   if (i1 >>> 0 > i22 >>> 0) {
    i19 = 2;
    i20 = i20 + 1 | 0;
    i21 = (i21 >>> 0) / 10 | 0;
    i11 = i1;
   } else {
    i18 = 22;
    break;
   }
  }
  if ((i18 | 0) == 22) return i1 | 0;
 } else if ((i18 | 0) == 22) return i1 | 0;
 return 0;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i21 = HEAPU8[i11 + 60 >> 0] | 0;
 i22 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = HEAPU8[i11 + 63 >> 0] | 0;
 i14 = i11 + 28 | 0;
 i20 = HEAP32[i14 >> 2] | 0;
 i15 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i20 | 0) | 0;
 i16 = i11 + 24 | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 i17 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i14 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i11 + 20 | 0;
 i19 = i11 + 32 | 0;
 i20 = (i1 & 1 | 0) == 0;
 i9 = (i1 & 2 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i20) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i23 = ~i5;
     i23 = i5 + 65536 + ((i23 | 0) > -131072 ? i23 : -131072) | 0;
     i6 = i6 + 1 + (i23 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i23 & -65536) | 0;
    }
    i23 = HEAP32[i2 >> 2] | 0;
    i25 = i23 >>> 24;
    i24 = ((Math_imul(i25, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i23 & 65280 | (i9 ? i25 : i24) << 24 | i23 >>> 16 & 255 | i23 << 16 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i25 = ~i5;
     i25 = i5 + 65536 + ((i25 | 0) > -131072 ? i25 : -131072) | 0;
     i6 = i6 + 1 + (i25 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i25 & -65536) | 0;
    }
    i24 = HEAP32[i2 >> 2] | 0;
    i26 = i24 >>> 24;
    i25 = ((Math_imul(i24 & 255, i21) | 0) >>> 0) / 255 | 0;
    i27 = ((Math_imul(i24 >>> 8 & 255, i22) | 0) >>> 0) / 255 | 0;
    i24 = ((Math_imul(i24 >>> 16 & 255, i12) | 0) >>> 0) / 255 | 0;
    i23 = ((Math_imul(i26, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i27 << 8 | (i9 ? i26 : i23) << 24 | i24 | i25 << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i19 >> 2] | 0) | 0;
  i27 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i27 + -1;
  if (!i27) break;
  i3 = i3 + i15 | 0;
  i8 = i1;
  i2 = HEAP32[i16 >> 2] | 0;
 }
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i21 = HEAPU8[i11 + 60 >> 0] | 0;
 i22 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = HEAPU8[i11 + 63 >> 0] | 0;
 i14 = i11 + 28 | 0;
 i20 = HEAP32[i14 >> 2] | 0;
 i15 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i20 | 0) | 0;
 i16 = i11 + 24 | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 i17 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i14 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i11 + 20 | 0;
 i19 = i11 + 32 | 0;
 i20 = (i1 & 1 | 0) == 0;
 i9 = (i1 & 2 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i20) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i23 = ~i5;
     i23 = i5 + 65536 + ((i23 | 0) > -131072 ? i23 : -131072) | 0;
     i6 = i6 + 1 + (i23 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i23 & -65536) | 0;
    }
    i23 = HEAP32[i2 >> 2] | 0;
    i25 = i23 >>> 24;
    i24 = ((Math_imul(i25, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i23 & 65280 | (i9 ? i25 : i24) << 24 | i23 & 255 | i23 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i25 = ~i5;
     i25 = i5 + 65536 + ((i25 | 0) > -131072 ? i25 : -131072) | 0;
     i6 = i6 + 1 + (i25 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i25 & -65536) | 0;
    }
    i24 = HEAP32[i2 >> 2] | 0;
    i26 = i24 >>> 24;
    i25 = ((Math_imul(i24 >>> 16 & 255, i21) | 0) >>> 0) / 255 | 0;
    i27 = ((Math_imul(i24 >>> 8 & 255, i22) | 0) >>> 0) / 255 | 0;
    i24 = ((Math_imul(i24 & 255, i12) | 0) >>> 0) / 255 | 0;
    i23 = ((Math_imul(i26, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i27 << 8 | (i9 ? i26 : i23) << 24 | i24 | i25 << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i19 >> 2] | 0) | 0;
  i27 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i27 + -1;
  if (!i27) break;
  i3 = i3 + i15 | 0;
  i8 = i1;
  i2 = HEAP32[i16 >> 2] | 0;
 }
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i21 = HEAPU8[i11 + 60 >> 0] | 0;
 i22 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = HEAPU8[i11 + 63 >> 0] | 0;
 i14 = i11 + 28 | 0;
 i20 = HEAP32[i14 >> 2] | 0;
 i15 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i20 | 0) | 0;
 i16 = i11 + 24 | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 i17 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i14 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i11 + 20 | 0;
 i19 = i11 + 32 | 0;
 i20 = (i1 & 1 | 0) == 0;
 i9 = (i1 & 2 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i20) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i23 = ~i5;
     i23 = i5 + 65536 + ((i23 | 0) > -131072 ? i23 : -131072) | 0;
     i6 = i6 + 1 + (i23 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i23 & -65536) | 0;
    }
    i23 = HEAP32[i2 >> 2] | 0;
    i24 = i23 >>> 8;
    i25 = ((Math_imul(i23 & 255, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i24 & 65280 | (i9 ? i23 : i25) << 24 | i24 & 255 | i23 >>> 24 << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i25 = ~i5;
     i25 = i5 + 65536 + ((i25 | 0) > -131072 ? i25 : -131072) | 0;
     i6 = i6 + 1 + (i25 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i25 & -65536) | 0;
    }
    i26 = HEAP32[i2 >> 2] | 0;
    i25 = ((Math_imul(i26 >>> 24, i21) | 0) >>> 0) / 255 | 0;
    i27 = ((Math_imul(i26 >>> 16 & 255, i22) | 0) >>> 0) / 255 | 0;
    i24 = ((Math_imul(i26 >>> 8 & 255, i12) | 0) >>> 0) / 255 | 0;
    i23 = ((Math_imul(i26 & 255, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i27 << 8 | (i9 ? i26 : i23) << 24 | i24 | i25 << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i19 >> 2] | 0) | 0;
  i27 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i27 + -1;
  if (!i27) break;
  i3 = i3 + i15 | 0;
  i8 = i1;
  i2 = HEAP32[i16 >> 2] | 0;
 }
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SW_RenderFillRects(i9, i8, i10) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, f3 = f0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = 0;
 i11 = STACKTOP;
 i5 = i9 + 320 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i1) {
  i2 = i6 + 4 | 0;
  i12 = HEAP32[i2 >> 2] | 0;
  HEAP32[i6 >> 2] = i12;
  i1 = i12;
  if (!i12) {
   i1 = _SDL_GetWindowSurface(HEAP32[i9 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i2 >> 2] = i1;
    HEAP32[i6 >> 2] = i1;
    i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
    if (!i2) break L1;
    _SDL_SetClipRect(i2, i9 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i9 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i9 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i6 >> 2] | 0;
  }
  if (!i1) {
   i12 = -1;
   STACKTOP = i11;
   return i12 | 0;
  }
 } while (0);
 i2 = i10 << 4;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
 i2 = HEAP32[i9 + 216 >> 2] | 0;
 if (!i2) if (!(HEAP32[i9 + 220 >> 2] | 0)) {
  if ((i10 | 0) > 0) {
   i2 = 0;
   do {
    i12 = i5 + (i2 << 4) | 0;
    i6 = i8 + (i2 << 4) | 0;
    HEAP32[i12 >> 2] = ~~Math_fround(HEAPF32[i6 >> 2]);
    HEAP32[i12 + 4 >> 2] = ~~Math_fround(HEAPF32[i6 + 4 >> 2]);
    i13 = ~~Math_fround(HEAPF32[i6 + 8 >> 2]);
    HEAP32[i12 + 8 >> 2] = (i13 | 0) > 1 ? i13 : 1;
    i6 = ~~Math_fround(HEAPF32[i6 + 12 >> 2]);
    HEAP32[i12 + 12 >> 2] = (i6 | 0) > 1 ? i6 : 1;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i10 | 0));
  }
 } else i7 = 14; else i7 = 14;
 if ((i7 | 0) == 14) if ((i10 | 0) > 0) {
  f3 = Math_fround(i2 | 0);
  f4 = Math_fround(HEAP32[i9 + 220 >> 2] | 0);
  i2 = 0;
  do {
   i13 = i5 + (i2 << 4) | 0;
   i12 = i8 + (i2 << 4) | 0;
   HEAP32[i13 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i12 >> 2]) + f3);
   HEAP32[i13 + 4 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i12 + 4 >> 2]) + f4);
   i7 = ~~Math_fround(HEAPF32[i12 + 8 >> 2]);
   HEAP32[i13 + 8 >> 2] = (i7 | 0) > 1 ? i7 : 1;
   i12 = ~~Math_fround(HEAPF32[i12 + 12 >> 2]);
   HEAP32[i13 + 12 >> 2] = (i12 | 0) > 1 ? i12 : 1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i10 | 0));
 }
 i2 = HEAP32[i9 + 316 >> 2] | 0;
 if (!i2) {
  i13 = _SDL_FillRects(i1, i5, i10, _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, HEAP8[i9 + 312 >> 0] | 0, HEAP8[i9 + 313 >> 0] | 0, HEAP8[i9 + 314 >> 0] | 0, HEAP8[i9 + 315 >> 0] | 0) | 0) | 0;
  STACKTOP = i11;
  return i13 | 0;
 } else {
  i13 = _SDL_BlendFillRects(i1, i5, i10, i2, HEAP8[i9 + 312 >> 0] | 0, HEAP8[i9 + 313 >> 0] | 0, HEAP8[i9 + 314 >> 0] | 0, HEAP8[i9 + 315 >> 0] | 0) | 0;
  STACKTOP = i11;
  return i13 | 0;
 }
 return 0;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i21 = HEAPU8[i11 + 60 >> 0] | 0;
 i22 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = HEAPU8[i11 + 63 >> 0] | 0;
 i14 = i11 + 28 | 0;
 i20 = HEAP32[i14 >> 2] | 0;
 i15 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i20 | 0) | 0;
 i16 = i11 + 24 | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 i17 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i14 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i11 + 20 | 0;
 i19 = i11 + 32 | 0;
 i20 = (i1 & 1 | 0) == 0;
 i9 = (i1 & 2 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i20) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i23 = ~i5;
     i23 = i5 + 65536 + ((i23 | 0) > -131072 ? i23 : -131072) | 0;
     i6 = i6 + 1 + (i23 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i23 & -65536) | 0;
    }
    i23 = HEAP32[i2 >> 2] | 0;
    i24 = ((Math_imul(i23 & 255, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i23 >>> 8 & 65280 | (i9 ? i23 : i24) << 24 | i23 >>> 24 | i23 << 8 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i24 = ~i5;
     i24 = i5 + 65536 + ((i24 | 0) > -131072 ? i24 : -131072) | 0;
     i6 = i6 + 1 + (i24 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i24 & -65536) | 0;
    }
    i26 = HEAP32[i2 >> 2] | 0;
    i24 = ((Math_imul(i26 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0;
    i27 = ((Math_imul(i26 >>> 16 & 255, i22) | 0) >>> 0) / 255 | 0;
    i23 = ((Math_imul(i26 >>> 24, i12) | 0) >>> 0) / 255 | 0;
    i25 = ((Math_imul(i26 & 255, i13) | 0) >>> 0) / 255 | 0;
    HEAP32[i1 >> 2] = i27 << 8 | (i9 ? i26 : i25) << 24 | i23 | i24 << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i17 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i19 >> 2] | 0) | 0;
  i27 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i27 + -1;
  if (!i27) break;
  i3 = i3 + i15 | 0;
  i8 = i1;
  i2 = HEAP32[i16 >> 2] | 0;
 }
 HEAP32[i18 >> 2] = i1;
 return;
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = (i1 | 0) == (i6 | 0);
 HEAP8[i1 + 12 >> 0] = i8 & 1;
 if (i8) return;
 while (1) {
  i7 = i1 + 8 | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i5 = i2 + 12 | 0;
  if (HEAP8[i5 >> 0] | 0) {
   i4 = 23;
   break;
  }
  i8 = i2 + 8 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) == (i2 | 0)) {
   i4 = HEAP32[i3 + 4 >> 2] | 0;
   if (!i4) {
    i4 = 7;
    break;
   }
   i4 = i4 + 12 | 0;
   if (!(HEAP8[i4 >> 0] | 0)) i1 = i4; else {
    i4 = 7;
    break;
   }
  } else {
   if (!i4) {
    i4 = 16;
    break;
   }
   i4 = i4 + 12 | 0;
   if (!(HEAP8[i4 >> 0] | 0)) i1 = i4; else {
    i4 = 16;
    break;
   }
  }
  HEAP8[i5 >> 0] = 1;
  i8 = (i3 | 0) == (i6 | 0);
  HEAP8[i3 + 12 >> 0] = i8 & 1;
  HEAP8[i1 >> 0] = 1;
  if (i8) {
   i4 = 23;
   break;
  } else i1 = i3;
 }
 if ((i4 | 0) == 7) {
  if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
   i1 = i2;
   i4 = i3;
  } else {
   i7 = i2 + 4 | 0;
   i4 = HEAP32[i7 >> 2] | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i7 >> 2] = i1;
   if (!i1) i1 = i3; else {
    HEAP32[i1 + 8 >> 2] = i2;
    i1 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i4 + 8 >> 2] = i1;
   i1 = HEAP32[i8 >> 2] | 0;
   HEAP32[((HEAP32[i1 >> 2] | 0) == (i2 | 0) ? i1 : i1 + 4 | 0) >> 2] = i4;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i8 >> 2] = i4;
   i1 = i4;
   i4 = HEAP32[i4 + 8 >> 2] | 0;
  }
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i4 + 12 >> 0] = 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i2 = i1 + 4 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  HEAP32[i4 >> 2] = i3;
  if (i3 | 0) HEAP32[i3 + 8 >> 2] = i4;
  i8 = i4 + 8 | 0;
  HEAP32[i1 + 8 >> 2] = HEAP32[i8 >> 2];
  i7 = HEAP32[i8 >> 2] | 0;
  HEAP32[((HEAP32[i7 >> 2] | 0) == (i4 | 0) ? i7 : i7 + 4 | 0) >> 2] = i1;
  HEAP32[i2 >> 2] = i4;
  HEAP32[i8 >> 2] = i1;
  return;
 } else if ((i4 | 0) == 16) {
  if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
   i5 = i1 + 4 | 0;
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i2 >> 2] = i4;
   if (i4) {
    HEAP32[i4 + 8 >> 2] = i2;
    i3 = HEAP32[i8 >> 2] | 0;
   }
   HEAP32[i7 >> 2] = i3;
   i3 = HEAP32[i8 >> 2] | 0;
   HEAP32[((HEAP32[i3 >> 2] | 0) == (i2 | 0) ? i3 : i3 + 4 | 0) >> 2] = i1;
   HEAP32[i5 >> 2] = i2;
   HEAP32[i8 >> 2] = i1;
   i2 = i1;
   i3 = HEAP32[i1 + 8 >> 2] | 0;
  }
  HEAP8[i2 + 12 >> 0] = 1;
  HEAP8[i3 + 12 >> 0] = 0;
  i8 = i3 + 4 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i8 >> 2] = i2;
  if (i2 | 0) HEAP32[i2 + 8 >> 2] = i3;
  i8 = i3 + 8 | 0;
  HEAP32[i1 + 8 >> 2] = HEAP32[i8 >> 2];
  i7 = HEAP32[i8 >> 2] | 0;
  HEAP32[((HEAP32[i7 >> 2] | 0) == (i3 | 0) ? i7 : i7 + 4 | 0) >> 2] = i1;
  HEAP32[i1 >> 2] = i3;
  HEAP32[i8 >> 2] = i1;
  return;
 } else if ((i4 | 0) == 23) return;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb(i11, i15) {
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i16 + 16 | 0;
 i14 = i16 + 8 | 0;
 i8 = i16 + 4 | 0;
 i9 = i16;
 i3 = i11 + 52 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i12 = i11 + 32 | 0;
  i2 = 0;
  while (1) {
   if ((i2 | 0) >= (i1 | 0)) {
    i10 = 9;
    break;
   }
   i3 = _getc(HEAP32[i12 >> 2] | 0) | 0;
   if ((i3 | 0) == -1) {
    i10 = 8;
    break;
   }
   HEAP8[i13 + i2 >> 0] = i3;
   i2 = i2 + 1 | 0;
  }
  if ((i10 | 0) == 8) i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((i10 | 0) == 9) {
   do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
    i5 = i11 + 40 | 0;
    i6 = i11 + 36 | 0;
    i7 = i14 + 1 | 0;
    L11 : while (1) {
     i17 = HEAP32[i5 >> 2] | 0;
     i3 = i17;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i18 = HEAP32[i6 >> 2] | 0;
     i4 = i13 + i1 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 31](i18, i17, i13, i4, i8, i14, i7, i9) | 0) {
     case 3:
      {
       i10 = 16;
       break L11;
      }
     case 2:
      {
       i10 = 18;
       break L11;
      }
     case 1:
      break;
     default:
      break L11;
     }
     i18 = HEAP32[i5 >> 2] | 0;
     HEAP32[i18 >> 2] = i2;
     HEAP32[i18 + 4 >> 2] = i3;
     if ((i1 | 0) == 8) {
      i10 = 18;
      break;
     }
     i2 = _getc(HEAP32[i12 >> 2] | 0) | 0;
     if ((i2 | 0) == -1) {
      i10 = 18;
      break;
     }
     HEAP8[i4 >> 0] = i2;
     i1 = i1 + 1 | 0;
    }
    if ((i10 | 0) == 16) HEAP8[i14 >> 0] = HEAP8[i13 >> 0] | 0; else if ((i10 | 0) == 18) {
     i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    i10 = 19;
   } else {
    HEAP8[i14 >> 0] = HEAP8[i13 >> 0] | 0;
    i10 = 19;
   } while (0);
   L21 : do if ((i10 | 0) == 19) {
    L23 : do if (i15) HEAP32[i11 + 48 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0; else {
     do {
      if ((i1 | 0) <= 0) break L23;
      i1 = i1 + -1 | 0;
      i18 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i13 + i1 >> 0] | 0) | 0;
     } while ((_ungetc(i18, HEAP32[i12 >> 2] | 0) | 0) != -1);
     i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i14 >> 0] | 0) | 0;
   } while (0);
  }
 } else {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   HEAP32[i2 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP8[i3 >> 0] = 0;
  }
 }
 STACKTOP = i16;
 return i1 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i8 = i9 >>> 24;
    i7 = i9 >>> 16 & 255;
    i4 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i3 = HEAP32[i5 >> 2] | 0;
    i1 = i3 >>> 16 & 255;
    i2 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 << 16 | i3;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i8 = i9 >>> 24;
    i7 = i9 >>> 16 & 255;
    i4 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i1 = HEAP32[i5 >> 2] | 0;
    i3 = i1 >>> 16 & 255;
    i2 = i1 >>> 8 & 255;
    i1 = i1 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 | i3 << 16;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i4 = i9 >>> 24;
    i7 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i3 = HEAP32[i5 >> 2] | 0;
    i1 = i3 >>> 16 & 255;
    i2 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 << 16 | i3;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i4 = i9 >>> 24;
    i7 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i1 = HEAP32[i5 >> 2] | 0;
    i3 = i1 >>> 16 & 255;
    i2 = i1 >>> 8 & 255;
    i1 = i1 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 | i3 << 16;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i8 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i4 = i9 & 255;
    i9 = i9 >>> 24;
    i3 = HEAP32[i5 >> 2] | 0;
    i1 = i3 >>> 16 & 255;
    i2 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 << 16 | i3;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i8 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i4 = i9 & 255;
    i9 = i9 >>> 24;
    i1 = HEAP32[i5 >> 2] | 0;
    i3 = i1 >>> 16 & 255;
    i2 = i1 >>> 8 & 255;
    i1 = i1 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 | i3 << 16;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i4 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i8 = i9 & 255;
    i9 = i9 >>> 24;
    i3 = HEAP32[i5 >> 2] | 0;
    i1 = i3 >>> 16 & 255;
    i2 = i3 >>> 8 & 255;
    i3 = i3 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 << 16 | i3;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate_Blend(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i25 = HEAPU8[i14 + 60 >> 0] | 0;
 i26 = HEAPU8[i14 + 61 >> 0] | 0;
 i15 = HEAPU8[i14 + 62 >> 0] | 0;
 i16 = HEAPU8[i14 + 63 >> 0] | 0;
 i17 = i14 + 28 | 0;
 i24 = HEAP32[i17 >> 2] | 0;
 i2 = i24 + -1 | 0;
 HEAP32[i17 >> 2] = i2;
 if (!i24) return;
 i18 = i14 + 20 | 0;
 i19 = i14 + 24 | 0;
 i20 = i14 + 12 | 0;
 i21 = i14 + 32 | 0;
 i22 = (i1 & 1 | 0) == 0;
 i23 = (i1 & 2 | 0) == 0;
 i24 = (i1 & 48 | 0) != 0;
 i13 = i1 & 112;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i18 >> 2] | 0;
 i5 = i12;
 i6 = i11;
 while (1) {
  i1 = HEAP32[i19 >> 2] | 0;
  if (!i1) i1 = i2; else {
   i10 = i1;
   while (1) {
    i10 = i10 + -1 | 0;
    i9 = HEAP32[i6 >> 2] | 0;
    i4 = i9 >>> 16 & 255;
    i7 = i9 >>> 8 & 255;
    i8 = i9 & 255;
    i9 = i9 >>> 24;
    i1 = HEAP32[i5 >> 2] | 0;
    i3 = i1 >>> 16 & 255;
    i2 = i1 >>> 8 & 255;
    i1 = i1 & 255;
    if (!i22) {
     i4 = ((Math_imul(i4, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    i27 = ((Math_imul(i9, i16) | 0) >>> 0) / 255 | 0;
    i9 = i23 ? i9 : i27;
    if (i24 & i9 >>> 0 < 255) {
     i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i9) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i9) | 0) >>> 0) / 255 | 0;
    }
    switch (i13 & 127) {
    case 16:
     {
      i27 = 255 - i9 | 0;
      i3 = i4 + (((Math_imul(i27, i3) | 0) >>> 0) / 255 | 0) | 0;
      i2 = i7 + (((Math_imul(i27, i2) | 0) >>> 0) / 255 | 0) | 0;
      i1 = i8 + (((Math_imul(i27, i1) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i1 = i8 + i1 | 0;
      i2 = i7 + i2 | 0;
      i3 = i4 + i3 | 0;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      i2 = i2 >>> 0 < 255 ? i2 : 255;
      i1 = i1 >>> 0 < 255 ? i1 : 255;
      break;
     }
    case 64:
     {
      i3 = ((Math_imul(i4, i3) | 0) >>> 0) / 255 | 0;
      i2 = ((Math_imul(i7, i2) | 0) >>> 0) / 255 | 0;
      i1 = ((Math_imul(i8, i1) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     {}
    }
    HEAP32[i5 >> 2] = i2 << 8 | i1 | i3 << 16;
    if (!i10) break; else {
     i5 = i5 + 4 | 0;
     i6 = i6 + 4 | 0;
    }
   }
   i1 = HEAP32[i17 >> 2] | 0;
  }
  i3 = i11 + (HEAP32[i20 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i21 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i17 >> 2] = i2;
  if (!i1) break; else {
   i5 = i4;
   i6 = i3;
   i11 = i3;
   i12 = i4;
  }
 }
 HEAP32[i14 >> 2] = i3;
 HEAP32[i18 >> 2] = i4;
 return;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb(i11, i15) {
 i11 = i11 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i16 + 16 | 0;
 i14 = i16 + 8 | 0;
 i8 = i16 + 4 | 0;
 i9 = i16;
 i3 = i11 + 52 | 0;
 if (!(HEAP8[i3 >> 0] | 0)) {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i12 = i11 + 32 | 0;
  i2 = 0;
  while (1) {
   if ((i2 | 0) >= (i1 | 0)) {
    i10 = 9;
    break;
   }
   i3 = _getc(HEAP32[i12 >> 2] | 0) | 0;
   if ((i3 | 0) == -1) {
    i10 = 8;
    break;
   }
   HEAP8[i13 + i2 >> 0] = i3;
   i2 = i2 + 1 | 0;
  }
  if ((i10 | 0) == 8) i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((i10 | 0) == 9) {
   do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
    i5 = i11 + 40 | 0;
    i6 = i11 + 36 | 0;
    i7 = i14 + 4 | 0;
    L11 : while (1) {
     i17 = HEAP32[i5 >> 2] | 0;
     i3 = i17;
     i2 = HEAP32[i3 >> 2] | 0;
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     i18 = HEAP32[i6 >> 2] | 0;
     i4 = i13 + i1 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i18 >> 2] | 0) + 16 >> 2] & 31](i18, i17, i13, i4, i8, i14, i7, i9) | 0) {
     case 3:
      {
       i10 = 16;
       break L11;
      }
     case 2:
      {
       i10 = 18;
       break L11;
      }
     case 1:
      break;
     default:
      break L11;
     }
     i18 = HEAP32[i5 >> 2] | 0;
     HEAP32[i18 >> 2] = i2;
     HEAP32[i18 + 4 >> 2] = i3;
     if ((i1 | 0) == 8) {
      i10 = 18;
      break;
     }
     i2 = _getc(HEAP32[i12 >> 2] | 0) | 0;
     if ((i2 | 0) == -1) {
      i10 = 18;
      break;
     }
     HEAP8[i4 >> 0] = i2;
     i1 = i1 + 1 | 0;
    }
    if ((i10 | 0) == 16) HEAP32[i14 >> 2] = HEAP8[i13 >> 0]; else if ((i10 | 0) == 18) {
     i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    i10 = 19;
   } else {
    HEAP32[i14 >> 2] = HEAP8[i13 >> 0];
    i10 = 19;
   } while (0);
   L21 : do if ((i10 | 0) == 19) {
    L23 : do if (i15) HEAP32[i11 + 48 >> 2] = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0; else {
     do {
      if ((i1 | 0) <= 0) break L23;
      i1 = i1 + -1 | 0;
      i18 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[i13 + i1 >> 0] | 0) | 0;
     } while ((_ungetc(i18, HEAP32[i12 >> 2] | 0) | 0) != -1);
     i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i14 >> 2] | 0) | 0;
   } while (0);
  }
 } else {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   HEAP32[i2 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP8[i3 >> 0] = 0;
  }
 }
 STACKTOP = i16;
 return i1 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate_Blend(i17) {
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i2 = HEAP32[i17 + 52 >> 2] | 0;
 i25 = HEAPU8[i17 + 60 >> 0] | 0;
 i26 = HEAPU8[i17 + 61 >> 0] | 0;
 i18 = HEAPU8[i17 + 62 >> 0] | 0;
 i1 = HEAP8[i17 + 63 >> 0] | 0;
 i19 = i17 + 28 | 0;
 i24 = HEAP32[i19 >> 2] | 0;
 i3 = i24 + -1 | 0;
 HEAP32[i19 >> 2] = i3;
 if (!i24) return;
 i20 = i17 + 20 | 0;
 i21 = i17 + 24 | 0;
 i22 = i17 + 12 | 0;
 i23 = i17 + 32 | 0;
 i24 = (i2 & 1 | 0) == 0;
 i15 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i16 = (i2 & 48 | 0) != 0 & (i15 | 0) != 255;
 i14 = i2 & 112;
 i13 = i15 ^ 255;
 i11 = HEAP32[i17 >> 2] | 0;
 i12 = HEAP32[i20 >> 2] | 0;
 i1 = i12;
 i5 = i11;
 while (1) {
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2) {
   while (1) {
    i2 = i2 + -1 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    i8 = i6 >>> 16 & 255;
    i7 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    i9 = HEAP32[i1 >> 2] | 0;
    i3 = i9 >>> 16 & 255;
    i4 = i9 >>> 8 & 255;
    i10 = i9 & 255;
    i9 = i9 >>> 24;
    if (!i24) {
     i6 = ((Math_imul(i6, i18) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    if (i16) {
     i6 = ((Math_imul(i6, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i9 = (((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0) + i15 | 0;
      i6 = i6 + (((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i7 + (((Math_imul(i4, i13) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i8 + (((Math_imul(i3, i13) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i8 + i3 | 0;
      i4 = i7 + i4 | 0;
      i6 = i6 + i10 | 0;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i6, i10) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i7, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i8, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i6 = i10;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i6 | i9 << 24;
    if (!i2) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + 4 | 0;
    }
   }
   i3 = HEAP32[i19 >> 2] | 0;
  }
  i2 = i11 + (HEAP32[i22 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i23 >> 2] | 0) | 0;
  i1 = i3 + -1 | 0;
  HEAP32[i19 >> 2] = i1;
  if (!i3) break; else {
   i3 = i1;
   i1 = i4;
   i5 = i2;
   i11 = i2;
   i12 = i4;
  }
 }
 HEAP32[i17 >> 2] = i2;
 HEAP32[i20 >> 2] = i4;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate_Blend(i17) {
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i2 = HEAP32[i17 + 52 >> 2] | 0;
 i25 = HEAPU8[i17 + 60 >> 0] | 0;
 i26 = HEAPU8[i17 + 61 >> 0] | 0;
 i18 = HEAPU8[i17 + 62 >> 0] | 0;
 i1 = HEAP8[i17 + 63 >> 0] | 0;
 i19 = i17 + 28 | 0;
 i24 = HEAP32[i19 >> 2] | 0;
 i3 = i24 + -1 | 0;
 HEAP32[i19 >> 2] = i3;
 if (!i24) return;
 i20 = i17 + 20 | 0;
 i21 = i17 + 24 | 0;
 i22 = i17 + 12 | 0;
 i23 = i17 + 32 | 0;
 i24 = (i2 & 1 | 0) == 0;
 i15 = (i2 & 2 | 0) == 0 ? 255 : i1 & 255;
 i16 = (i2 & 48 | 0) != 0 & (i15 | 0) != 255;
 i14 = i2 & 112;
 i13 = i15 ^ 255;
 i11 = HEAP32[i17 >> 2] | 0;
 i12 = HEAP32[i20 >> 2] | 0;
 i1 = i12;
 i5 = i11;
 while (1) {
  i2 = HEAP32[i21 >> 2] | 0;
  if (i2) {
   while (1) {
    i2 = i2 + -1 | 0;
    i8 = HEAP32[i5 >> 2] | 0;
    i6 = i8 >>> 16 & 255;
    i7 = i8 >>> 8 & 255;
    i8 = i8 & 255;
    i9 = HEAP32[i1 >> 2] | 0;
    i3 = i9 >>> 16 & 255;
    i4 = i9 >>> 8 & 255;
    i10 = i9 & 255;
    i9 = i9 >>> 24;
    if (!i24) {
     i6 = ((Math_imul(i6, i18) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i26) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i25) | 0) >>> 0) / 255 | 0;
    }
    if (i16) {
     i6 = ((Math_imul(i6, i15) | 0) >>> 0) / 255 | 0;
     i7 = ((Math_imul(i7, i15) | 0) >>> 0) / 255 | 0;
     i8 = ((Math_imul(i8, i15) | 0) >>> 0) / 255 | 0;
    }
    switch (i14 & 127) {
    case 16:
     {
      i9 = (((Math_imul(i9, i13) | 0) >>> 0) / 255 | 0) + i15 | 0;
      i6 = i6 + (((Math_imul(i10, i13) | 0) >>> 0) / 255 | 0) | 0;
      i4 = i7 + (((Math_imul(i4, i13) | 0) >>> 0) / 255 | 0) | 0;
      i3 = i8 + (((Math_imul(i3, i13) | 0) >>> 0) / 255 | 0) | 0;
      break;
     }
    case 32:
     {
      i3 = i8 + i3 | 0;
      i4 = i7 + i4 | 0;
      i6 = i6 + i10 | 0;
      i6 = i6 >>> 0 < 255 ? i6 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      i3 = i3 >>> 0 < 255 ? i3 : 255;
      break;
     }
    case 64:
     {
      i6 = ((Math_imul(i6, i10) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i7, i4) | 0) >>> 0) / 255 | 0;
      i3 = ((Math_imul(i8, i3) | 0) >>> 0) / 255 | 0;
      break;
     }
    default:
     i6 = i10;
    }
    HEAP32[i1 >> 2] = i4 << 8 | i3 << 16 | i6 | i9 << 24;
    if (!i2) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + 4 | 0;
    }
   }
   i3 = HEAP32[i19 >> 2] | 0;
  }
  i2 = i11 + (HEAP32[i22 >> 2] | 0) | 0;
  i4 = i12 + (HEAP32[i23 >> 2] | 0) | 0;
  i1 = i3 + -1 | 0;
  HEAP32[i19 >> 2] = i1;
  if (!i3) break; else {
   i3 = i1;
   i1 = i4;
   i5 = i2;
   i11 = i2;
   i12 = i4;
  }
 }
 HEAP32[i17 >> 2] = i2;
 HEAP32[i20 >> 2] = i4;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i3, i8, i1, i14, i11, i4, i9, i12) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i13 = i15;
 i2 = i1;
 while (1) {
  if ((i2 | 0) == (i14 | 0)) {
   i2 = i14;
   break;
  }
  if (!(HEAP8[i2 >> 0] | 0)) break;
  i2 = i2 + 1 | 0;
 }
 HEAP32[i12 >> 2] = i4;
 HEAP32[i11 >> 2] = i1;
 i7 = i9;
 i10 = i3 + 8 | 0;
 i3 = i4;
 while (1) {
  if ((i3 | 0) == (i9 | 0) | (i1 | 0) == (i14 | 0)) {
   i3 = 32;
   break;
  }
  i5 = i8;
  i4 = HEAP32[i5 + 4 >> 2] | 0;
  i6 = i13;
  HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i6 + 4 >> 2] = i4;
  i6 = i2;
  i4 = ___uselocale(HEAP32[i10 >> 2] | 0) | 0;
  i5 = _mbsnrtowcs(i3, i11, i6 - i1 | 0, i7 - i3 >> 2, i8) | 0;
  if (i4 | 0) ___uselocale(i4) | 0;
  if ((i5 | 0) == -1) {
   i2 = i3;
   i3 = 10;
   break;
  }
  i3 = (HEAP32[i12 >> 2] | 0) + (i5 << 2) | 0;
  HEAP32[i12 >> 2] = i3;
  if ((i3 | 0) == (i9 | 0)) {
   i3 = 29;
   break;
  }
  i1 = HEAP32[i11 >> 2] | 0;
  if ((i2 | 0) == (i14 | 0)) i2 = i14; else {
   i2 = ___uselocale(HEAP32[i10 >> 2] | 0) | 0;
   i1 = _mbrtowc(i3, i1, 1, i8) | 0;
   if (i2 | 0) ___uselocale(i2) | 0;
   if (i1 | 0) {
    i1 = 2;
    i3 = 28;
    break;
   }
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 4;
   i1 = (HEAP32[i11 >> 2] | 0) + 1 | 0;
   HEAP32[i11 >> 2] = i1;
   i2 = i1;
   while (1) {
    if ((i2 | 0) == (i14 | 0)) {
     i2 = i14;
     break;
    }
    if (!(HEAP8[i2 >> 0] | 0)) break;
    i2 = i2 + 1 | 0;
   }
   i3 = HEAP32[i12 >> 2] | 0;
  }
 }
 do if ((i3 | 0) == 10) {
  L28 : while (1) {
   HEAP32[i12 >> 2] = i2;
   if ((i1 | 0) == (HEAP32[i11 >> 2] | 0)) {
    i3 = 18;
    break;
   }
   i3 = ___uselocale(HEAP32[i10 >> 2] | 0) | 0;
   i2 = _mbrtowc(i2, i1, i6 - i1 | 0, i13) | 0;
   if (i3 | 0) ___uselocale(i3) | 0;
   switch (i2 | 0) {
   case -1:
    {
     i3 = 15;
     break L28;
    }
   case -2:
    {
     i3 = 16;
     break L28;
    }
   case 0:
    {
     i2 = 1;
     break;
    }
   default:
    {}
   }
   i1 = i1 + i2 | 0;
   i2 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
   i3 = 10;
  }
  if ((i3 | 0) == 15) {
   HEAP32[i11 >> 2] = i1;
   i1 = 2;
   i3 = 28;
   break;
  } else if ((i3 | 0) == 16) {
   HEAP32[i11 >> 2] = i1;
   i1 = 1;
   i3 = 28;
   break;
  } else if ((i3 | 0) == 18) {
   HEAP32[i11 >> 2] = i1;
   i1 = (i1 | 0) != (i14 | 0) & 1;
   i3 = 28;
   break;
  }
 } else if ((i3 | 0) == 29) {
  i1 = HEAP32[i11 >> 2] | 0;
  i3 = 32;
 } while (0);
 if ((i3 | 0) != 28) if ((i3 | 0) == 32) i1 = (i1 | 0) != (i14 | 0) & 1;
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i4, i7, i1, i10, i12, i2, i8, i13) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i9 = 0, i11 = 0, i14 = 0, i15 = 0, i16 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i14 = i15;
 i9 = i15 + 8 | 0;
 i3 = i1;
 while (1) {
  if ((i3 | 0) == (i10 | 0)) {
   i3 = i10;
   break;
  }
  if (!(HEAP32[i3 >> 2] | 0)) break;
  i3 = i3 + 4 | 0;
 }
 HEAP32[i13 >> 2] = i2;
 HEAP32[i12 >> 2] = i1;
 i6 = i8;
 i11 = i4 + 8 | 0;
 L6 : while (1) {
  if ((i2 | 0) == (i8 | 0) | (i1 | 0) == (i10 | 0)) {
   i3 = 35;
   break;
  }
  i16 = i7;
  i5 = HEAP32[i16 + 4 >> 2] | 0;
  i4 = i14;
  HEAP32[i4 >> 2] = HEAP32[i16 >> 2];
  HEAP32[i4 + 4 >> 2] = i5;
  i4 = ___uselocale(HEAP32[i11 >> 2] | 0) | 0;
  i5 = _wcsnrtombs(i2, i12, i3 - i1 >> 2, i6 - i2 | 0, i7) | 0;
  if (i4 | 0) ___uselocale(i4) | 0;
  switch (i5 | 0) {
  case -1:
   {
    i3 = 10;
    break L6;
   }
  case 0:
   {
    i1 = 1;
    i3 = 32;
    break L6;
   }
  default:
   {}
  }
  i2 = (HEAP32[i13 >> 2] | 0) + i5 | 0;
  HEAP32[i13 >> 2] = i2;
  if ((i2 | 0) == (i8 | 0)) {
   i3 = 33;
   break;
  }
  if ((i3 | 0) == (i10 | 0)) {
   i3 = i10;
   i1 = HEAP32[i12 >> 2] | 0;
  } else {
   i2 = ___uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i1 = _wcrtomb(i9, 0, i7) | 0;
   if (i2 | 0) ___uselocale(i2) | 0;
   if ((i1 | 0) == -1) {
    i1 = 2;
    i3 = 31;
    break;
   }
   if (i1 >>> 0 > (i6 - (HEAP32[i13 >> 2] | 0) | 0) >>> 0) {
    i1 = 1;
    i3 = 31;
    break;
   } else i2 = i9;
   while (1) {
    if (!i1) break;
    i5 = HEAP8[i2 >> 0] | 0;
    i16 = HEAP32[i13 >> 2] | 0;
    HEAP32[i13 >> 2] = i16 + 1;
    HEAP8[i16 >> 0] = i5;
    i2 = i2 + 1 | 0;
    i1 = i1 + -1 | 0;
   }
   i1 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
   HEAP32[i12 >> 2] = i1;
   i3 = i1;
   while (1) {
    if ((i3 | 0) == (i10 | 0)) {
     i3 = i10;
     break;
    }
    if (!(HEAP32[i3 >> 2] | 0)) break;
    i3 = i3 + 4 | 0;
   }
   i2 = HEAP32[i13 >> 2] | 0;
  }
 }
 if ((i3 | 0) == 10) {
  HEAP32[i13 >> 2] = i2;
  while (1) {
   if ((i1 | 0) == (HEAP32[i12 >> 2] | 0)) break;
   i16 = HEAP32[i1 >> 2] | 0;
   i3 = ___uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i2 = _wcrtomb(i2, i16, i14) | 0;
   if (i3 | 0) ___uselocale(i3) | 0;
   if ((i2 | 0) == -1) break;
   i2 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
   HEAP32[i13 >> 2] = i2;
   i1 = i1 + 4 | 0;
  }
  HEAP32[i12 >> 2] = i1;
  i1 = 2;
  i3 = 32;
 } else if ((i3 | 0) == 31) i3 = 32; else if ((i3 | 0) == 33) {
  i1 = HEAP32[i12 >> 2] | 0;
  i3 = 35;
 }
 if ((i3 | 0) != 32) if ((i3 | 0) == 35) i1 = (i1 | 0) != (i10 | 0) & 1;
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i4, i6, i9, i7, i10, i1, i2, i8, i12, i13, i11, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 L1 : do if ((i4 | 0) == (i1 | 0)) if (!(HEAP8[i6 >> 0] | 0)) i1 = -1; else {
  HEAP8[i6 >> 0] = 0;
  i9 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = 46;
  i10 = HEAP8[i8 + 11 >> 0] | 0;
  if (!((i10 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i10 & 255) | 0)) i1 = 0; else {
   i1 = HEAP32[i13 >> 2] | 0;
   if ((i1 - i12 | 0) < 160) {
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    i1 = 0;
   } else i1 = 0;
  }
 } else {
  if ((i4 | 0) == (i2 | 0)) {
   i3 = HEAP8[i8 + 11 >> 0] | 0;
   if ((i3 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i3 & 255) | 0) {
    if (!(HEAP8[i6 >> 0] | 0)) {
     i1 = -1;
     break;
    }
    i1 = HEAP32[i13 >> 2] | 0;
    if ((i1 - i12 | 0) >= 160) {
     i1 = 0;
     break;
    }
    i12 = HEAP32[i11 >> 2] | 0;
    HEAP32[i13 >> 2] = i1 + 4;
    HEAP32[i1 >> 2] = i12;
    HEAP32[i11 >> 2] = 0;
    i1 = 0;
    break;
   }
  }
  i3 = i5 + 128 | 0;
  i2 = 0;
  while (1) {
   i1 = i5 + (i2 << 2) | 0;
   if ((i2 | 0) == 32) {
    i1 = i3;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) break; else i2 = i2 + 1 | 0;
  }
  i2 = i1 - i5 | 0;
  i1 = i2 >> 2;
  if ((i2 | 0) > 124) i1 = -1; else {
   i3 = HEAP8[73125 + i1 >> 0] | 0;
   switch (i1 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0)) if ((HEAP8[i1 + -1 >> 0] & 95) != (HEAP8[i9 >> 0] & 127)) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i9 >> 0] = 80;
     break;
    }
   default:
    {
     i1 = i3 & 95;
     if ((i1 | 0) == (HEAP8[i9 >> 0] | 0)) {
      HEAP8[i9 >> 0] = i1 | 128;
      if (HEAP8[i6 >> 0] | 0) {
       HEAP8[i6 >> 0] = 0;
       i9 = HEAP8[i8 + 11 >> 0] | 0;
       if ((i9 << 24 >> 24 < 0 ? HEAP32[i8 + 4 >> 2] | 0 : i9 & 255) | 0) {
        i1 = HEAP32[i13 >> 2] | 0;
        if ((i1 - i12 | 0) < 160) {
         i12 = HEAP32[i11 >> 2] | 0;
         HEAP32[i13 >> 2] = i1 + 4;
         HEAP32[i1 >> 2] = i12;
        }
       }
      }
     }
    }
   }
   i13 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i13 + 1;
   HEAP8[i13 >> 0] = i3;
   if ((i2 | 0) > 84) i1 = 0; else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    i1 = 0;
   }
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[76944] | 0)) if (___cxa_guard_acquire(76944) | 0) {
  i2 = 84844;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 85132);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84844, 32788) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84856, 32820) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84868, 32856) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84880, 32880) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84892, 32904) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84904, 32920) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84916, 32940) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84928, 32960) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84940, 32988) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84952, 33028) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84964, 33060) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84976, 33096) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84988, 33132) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85e3, 33148) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85012, 33164) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85024, 33180) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85036, 32904) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85048, 33196) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85060, 33212) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85072, 33228) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85084, 33244) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85096, 33260) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85108, 33276) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85120, 33292) | 0;
 return;
}

function __ZNSt3__2L11init_monthsEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[76864] | 0)) if (___cxa_guard_acquire(76864) | 0) {
  i2 = 84032;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 84320);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84032, 73649) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84044, 73657) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84056, 73666) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84068, 73672) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84080, 73678) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84092, 73682) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84104, 73687) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84116, 73692) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84128, 73699) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84140, 73709) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84152, 73717) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84164, 73726) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84176, 73735) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84188, 73739) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84200, 73743) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84212, 73747) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84224, 73678) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84236, 73751) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84248, 73755) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84260, 73759) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84272, 73763) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84284, 73767) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84296, 73771) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84308, 73775) | 0;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i24, i18, i19, d8) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i13 = i21 + 300 | 0;
 i7 = i21 + 48 | 0;
 i6 = i21 + 32 | 0;
 i3 = i21 + 24 | 0;
 i2 = i21 + 8 | 0;
 i5 = i21;
 i10 = i21 + 304 | 0;
 i9 = i21 + 296 | 0;
 i11 = i21 + 68 | 0;
 i16 = i21 + 64 | 0;
 i14 = i21 + 60 | 0;
 i15 = i21 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 73374, HEAP32[i18 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i23 = i1;
   i20 = i1;
  }
 } else {
  i12 = i1;
  i23 = 0;
  i20 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i20 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i20, i2, i18) | 0;
 do if ((i20 | 0) == (i10 | 0)) {
  i17 = i11;
  i22 = 1;
  i25 = 0;
 } else {
  i1 = _malloc(i12 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i22 = 0;
   i25 = i1;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv(i13, i18);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i20, i3, i2, i17, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i24 >> 2];
 i20 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i17, i20, i1, i18, i19) | 0;
 HEAP32[i24 >> 2] = i1;
 if (!i22) _free(i25);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i24, i18, i19, d8) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(336);
 i13 = i21 + 300 | 0;
 i7 = i21 + 48 | 0;
 i6 = i21 + 32 | 0;
 i3 = i21 + 24 | 0;
 i2 = i21 + 8 | 0;
 i5 = i21;
 i10 = i21 + 304 | 0;
 i9 = i21 + 296 | 0;
 i11 = i21 + 68 | 0;
 i16 = i21 + 64 | 0;
 i14 = i21 + 60 | 0;
 i15 = i21 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 89710, HEAP32[i18 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i18 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i23 = i1;
   i20 = i1;
  }
 } else {
  i12 = i1;
  i23 = 0;
  i20 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i20 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i20, i2, i18) | 0;
 do if ((i20 | 0) == (i10 | 0)) {
  i17 = i11;
  i22 = 1;
  i25 = 0;
 } else {
  i1 = _malloc(i12 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i22 = 0;
   i25 = i1;
   break;
  }
 } while (0);
 __ZNKSt3__28ios_base6getlocEv(i13, i18);
 __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i20, i3, i2, i17, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i24 >> 2];
 i20 = HEAP32[i16 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i1 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i17, i20, i1, i18, i19) | 0;
 HEAP32[i24 >> 2] = i1;
 if (!i22) _free(i25);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function _SDL_GL_SetAttribute(i1, i6) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i7 + 24 | 0;
 i4 = i7 + 16 | 0;
 i3 = i7 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 L1 : do if (!i2) i1 = _SDL_SetError(40203, i7) | 0; else do switch (i1 | 0) {
 case 0:
  {
   HEAP32[i2 + 292 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 1:
  {
   HEAP32[i2 + 296 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 2:
  {
   HEAP32[i2 + 300 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 3:
  {
   HEAP32[i2 + 304 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 5:
  {
   HEAP32[i2 + 320 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 4:
  {
   HEAP32[i2 + 312 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 6:
  {
   HEAP32[i2 + 308 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 7:
  {
   HEAP32[i2 + 316 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 8:
  {
   HEAP32[i2 + 324 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 9:
  {
   HEAP32[i2 + 328 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 10:
  {
   HEAP32[i2 + 332 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 11:
  {
   HEAP32[i2 + 336 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 12:
  {
   HEAP32[i2 + 340 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 13:
  {
   HEAP32[i2 + 344 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 14:
  {
   HEAP32[i2 + 348 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 15:
  {
   HEAP32[i2 + 352 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 16:
  {
   HEAP32[i2 + 384 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 17:
  {
   HEAP32[i2 + 356 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 18:
  {
   HEAP32[i2 + 360 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 19:
  {
   i1 = i2 + 368 | 0;
   if (!i6) {
    HEAP32[i1 >> 2] = 0;
    i1 = 0;
    break L1;
   } else {
    HEAP32[i1 >> 2] = 4;
    i1 = 0;
    break L1;
   }
  }
 case 20:
  if (i6 >>> 0 > 15) {
   HEAP32[i3 >> 2] = i6;
   i1 = _SDL_SetError(47149, i3) | 0;
   break L1;
  } else {
   HEAP32[i2 + 364 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 21:
  switch (i6 | 0) {
  case 0:
  case 1:
  case 2:
  case 4:
   {
    HEAP32[i2 + 368 >> 2] = i6;
    i1 = 0;
    break L1;
   }
  default:
   {
    HEAP32[i4 >> 2] = i6;
    i1 = _SDL_SetError(47180, i4) | 0;
    break L1;
   }
  }
 case 22:
  {
   HEAP32[i2 + 372 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 23:
  {
   HEAP32[i2 + 380 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 case 24:
  {
   HEAP32[i2 + 376 >> 2] = i6;
   i1 = 0;
   break L1;
  }
 default:
  {
   i1 = _SDL_SetError(47214, i5) | 0;
   break L1;
  }
 } while (0); while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__28ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[6868] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(83252, i1, 83308);
 HEAP32[20643] = 31660;
 HEAP32[20645] = 31680;
 HEAP32[20644] = 0;
 __ZNSt3__28ios_base4initEPv(82580, 83252);
 HEAP32[20663] = 0;
 HEAP32[20664] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(83316, i1, 83372);
 HEAP32[20665] = 31708;
 HEAP32[20667] = 31728;
 HEAP32[20666] = 0;
 __ZNSt3__28ios_base4initEPv(82668, 83316);
 HEAP32[20685] = 0;
 HEAP32[20686] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i1 = HEAP32[6900] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(83380, i1, 83428);
 HEAP32[20687] = 31756;
 HEAP32[20688] = 31776;
 __ZNSt3__28ios_base4initEPv(82752, 83380);
 HEAP32[20706] = 0;
 HEAP32[20707] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(83436, i1, 83484);
 HEAP32[20708] = 31804;
 HEAP32[20709] = 31824;
 __ZNSt3__28ios_base4initEPv(82836, 83436);
 HEAP32[20727] = 0;
 HEAP32[20728] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i1 = HEAP32[6836] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(83492, i1, 83540);
 HEAP32[20729] = 31756;
 HEAP32[20730] = 31776;
 __ZNSt3__28ios_base4initEPv(82920, 83492);
 HEAP32[20748] = 0;
 HEAP32[20749] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i2 = HEAP32[82916 + (HEAP32[(HEAP32[20729] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[20771] = 31756;
 HEAP32[20772] = 31776;
 __ZNSt3__28ios_base4initEPv(83088, i2);
 HEAP32[20790] = 0;
 HEAP32[20791] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(83548, i1, 83596);
 HEAP32[20750] = 31804;
 HEAP32[20751] = 31824;
 __ZNSt3__28ios_base4initEPv(83004, 83548);
 HEAP32[20769] = 0;
 HEAP32[20770] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i1 = HEAP32[83e3 + (HEAP32[(HEAP32[20750] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[20792] = 31804;
 HEAP32[20793] = 31824;
 __ZNSt3__28ios_base4initEPv(83172, i1);
 HEAP32[20811] = 0;
 HEAP32[20812] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[82572 + (HEAP32[(HEAP32[20643] | 0) + -12 >> 2] | 0) + 72 >> 2] = 82748;
 HEAP32[82660 + (HEAP32[(HEAP32[20665] | 0) + -12 >> 2] | 0) + 72 >> 2] = 82832;
 i1 = 82916 + (HEAP32[(HEAP32[20729] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 i1 = 83e3 + (HEAP32[(HEAP32[20750] | 0) + -12 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[82916 + (HEAP32[(HEAP32[20729] | 0) + -12 >> 2] | 0) + 72 >> 2] = 82748;
 HEAP32[83e3 + (HEAP32[(HEAP32[20750] | 0) + -12 >> 2] | 0) + 72 >> 2] = 82832;
 return;
}

function _SDL_DestroyWindow(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i6 + 16 | 0;
 i2 = i6 + 8 | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i6) | 0;
  STACKTOP = i6;
  return;
 }
 if (i5 | 0) if ((HEAP32[i5 >> 2] | 0) == (i1 + 280 | 0)) {
  HEAP32[i5 + 120 >> 2] = 1;
  if (HEAP32[i5 + 48 >> 2] & 4 | 0) {
   i1 = i5 + 116 | 0;
   HEAP32[i1 >> 2] = 1;
   _SDL_UpdateFullscreenMode(i5, 0) | 0;
   i2 = HEAP32[19487] | 0;
   i3 = HEAP32[i2 + 84 >> 2] | 0;
   if (i3 | 0) FUNCTION_TABLE_vii[i3 & 127](i2, i5);
   HEAP32[i1 >> 2] = 0;
   _SDL_SendWindowEvent(i5, 2, 0, 0) | 0;
  }
  if ((_SDL_GetKeyboardFocus() | 0) == (i5 | 0)) _SDL_SetKeyboardFocus(0);
  if ((_SDL_GetMouseFocus() | 0) == (i5 | 0)) _SDL_SetMouseFocus(0);
  i3 = i5 + 48 | 0;
  if (HEAP32[i3 >> 2] & 2 | 0) if ((HEAP32[(HEAP32[19487] | 0) + 652 >> 2] | 0) == (i5 | 0)) _SDL_GL_MakeCurrent(i5, 0) | 0;
  i1 = HEAP32[i5 + 108 >> 2] | 0;
  if (i1 | 0) {
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -5;
   _SDL_FreeSurface(i1);
  }
  i1 = HEAP32[19487] | 0;
  i2 = HEAP32[i1 + 140 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vii[i2 & 127](i1, i5);
   i1 = HEAP32[19487] | 0;
  }
  i2 = HEAP32[i1 + 128 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[i2 & 127](i1, i5);
  do if (HEAP32[i3 >> 2] & 2 | 0) {
   i3 = HEAP32[19487] | 0;
   if (!i3) {
    _SDL_SetError(40203, i4) | 0;
    break;
   }
   i1 = i3 + 388 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) > 0) {
    HEAP32[i1 >> 2] = i2 + -1;
    if ((i2 | 0) == 1) {
     i1 = HEAP32[i3 + 172 >> 2] | 0;
     if (i1 | 0) FUNCTION_TABLE_vi[i1 & 511](i3);
    }
   }
  } while (0);
  i1 = _SDL_GetWindowDisplayIndex(i5) | 0;
  if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[19487] | 0) + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
  i1 = i1 + 56 | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) HEAP32[i1 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  _SDL_free(HEAP32[i5 + 8 >> 2] | 0);
  _SDL_FreeSurface(HEAP32[i5 + 12 >> 2] | 0);
  _SDL_free(HEAP32[i5 + 100 >> 2] | 0);
  i2 = i5 + 140 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 | 0) do {
   HEAP32[i2 >> 2] = HEAP32[i1 + 8 >> 2];
   _SDL_free(HEAP32[i1 >> 2] | 0);
   _SDL_free(i1);
   i1 = HEAP32[i2 >> 2] | 0;
  } while ((i1 | 0) != 0);
  i2 = HEAP32[i5 + 152 >> 2] | 0;
  i1 = i5 + 148 | 0;
  if (i2 | 0) HEAP32[i2 + 148 >> 2] = HEAP32[i1 >> 2];
  i4 = HEAP32[i1 >> 2] | 0;
  HEAP32[((i4 | 0) == 0 ? (HEAP32[19487] | 0) + 272 | 0 : i4 + 152 | 0) >> 2] = i2;
  _SDL_free(i5);
  STACKTOP = i6;
  return;
 }
 _SDL_SetError(59973, i2) | 0;
 STACKTOP = i6;
 return;
}

function _png_handle_pCAL(i12, i13, i6) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = 0;
 i1 = HEAP32[i12 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i12, 63643);
 if (i1 & 4 | 0) {
  _png_crc_finish(i12, i6) | 0;
  _png_chunk_benign_error(i12, 64026);
  return;
 }
 if (i13 | 0) if (HEAP32[i13 + 8 >> 2] & 1024 | 0) {
  _png_crc_finish(i12, i6) | 0;
  _png_chunk_benign_error(i12, 63980);
  return;
 }
 i3 = i6 + 1 | 0;
 i4 = i12 + 788 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) i5 = 11; else {
  i2 = i12 + 792 | 0;
  if ((HEAP32[i2 >> 2] | 0) >>> 0 < i3 >>> 0) {
   HEAP32[i4 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   _png_free(i12, i1);
   i5 = 11;
  }
 }
 do if ((i5 | 0) == 11) {
  i1 = _png_malloc_base(i12, i3) | 0;
  if (i1 | 0) {
   HEAP32[i4 >> 2] = i1;
   HEAP32[i12 + 792 >> 2] = i3;
   break;
  }
  _png_crc_finish(i12, i6) | 0;
  _png_chunk_benign_error(i12, 63690);
  return;
 } while (0);
 _png_read_data(i12, i1, i6);
 _png_calculate_crc(i12, i1, i6);
 if (_png_crc_finish(i12, 0) | 0) return;
 i11 = i1 + i6 | 0;
 HEAP8[i11 >> 0] = 0;
 i3 = i1;
 while (1) {
  i2 = i3 + 1 | 0;
  if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i2;
 }
 if (i11 >>> 0 <= (i3 + 12 | 0) >>> 0) {
  _png_chunk_benign_error(i12, 63990);
  return;
 }
 i9 = HEAPU8[i3 + 2 >> 0] << 16 | HEAPU8[i2 >> 0] << 24 | HEAPU8[i3 + 3 >> 0] << 8 | HEAPU8[i3 + 4 >> 0];
 i10 = HEAPU8[i3 + 6 >> 0] << 16 | HEAPU8[i3 + 5 >> 0] << 24 | HEAPU8[i3 + 7 >> 0] << 8 | HEAPU8[i3 + 8 >> 0];
 i2 = HEAP8[i3 + 9 >> 0] | 0;
 i4 = HEAP8[i3 + 10 >> 0] | 0;
 i7 = i3 + 11 | 0;
 i8 = i2 & 255;
 if (i2 << 24 >> 24 != 0 | i4 << 24 >> 24 == 2) if ((i2 + -1 & 255) > 1 | i4 << 24 >> 24 == 3) if (i2 << 24 >> 24 != 3 | i4 << 24 >> 24 == 4) {
  if ((i2 & 255) > 3) {
   _png_chunk_benign_error(i12, 64254);
   i2 = i7;
  } else i2 = i7;
  while (1) if (!(HEAP8[i2 >> 0] | 0)) break; else i2 = i2 + 1 | 0;
  i5 = i4 & 255;
  i6 = _png_malloc_warn(i12, i5 << 2) | 0;
  if (!i6) {
   _png_chunk_benign_error(i12, 63690);
   return;
  }
  L46 : do if (i4 << 24 >> 24) {
   i3 = 0;
   L47 : while (1) {
    i2 = i2 + 1 | 0;
    HEAP32[i6 + (i3 << 2) >> 2] = i2;
    if (i2 >>> 0 > i11 >>> 0) break;
    while (1) {
     if (!(HEAP8[i2 >> 0] | 0)) break;
     i2 = i2 + 1 | 0;
     if (i2 >>> 0 > i11 >>> 0) break L47;
    }
    i3 = i3 + 1 | 0;
    if ((i3 | 0) >= (i5 | 0)) break L46;
   }
   _png_free(i12, i6);
   _png_chunk_benign_error(i12, 64281);
   return;
  } while (0);
  _png_set_pCAL(i12, i13, i1, i9, i10, i8, i5, i7, i6);
  _png_free(i12, i6);
  return;
 }
 _png_chunk_benign_error(i12, 64230);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_(i14, i1, i11) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i15 + 12 | 0;
 i8 = i15;
 i2 = i14 + 8 | 0;
 i13 = i2 + 3 | 0;
 i5 = HEAP8[i13 >> 0] | 0;
 i3 = i5 << 24 >> 24 < 0;
 if (i3) {
  i10 = HEAP32[i14 + 4 >> 2] | 0;
  i4 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i10 = i5 & 255;
  i4 = 1;
 }
 i9 = i11 - i1 >> 2;
 do if (i9 | 0) {
  if (i3) {
   i3 = HEAP32[i14 >> 2] | 0;
   i2 = HEAP32[i14 + 4 >> 2] | 0;
  } else {
   i3 = i14;
   i2 = i5 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_(i1, i3, i3 + (i2 << 2) | 0) | 0) {
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   if (i9 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i8);
   do if (i9 >>> 0 < 2) {
    HEAP8[i8 + 8 + 3 >> 0] = i9;
    i6 = i1;
    i7 = i8;
   } else {
    i2 = i9 + 4 & -4;
    if (i2 >>> 0 > 1073741823) _abort(); else {
     i7 = __Znwj(i2 << 2) | 0;
     HEAP32[i8 >> 2] = i7;
     HEAP32[i8 + 8 >> 2] = i2 | -2147483648;
     HEAP32[i8 + 4 >> 2] = i9;
     i6 = i1;
     break;
    }
   } while (0);
   while (1) {
    if ((i6 | 0) == (i11 | 0)) break;
    __ZNSt3__211char_traitsIwE6assignERwRKw(i7, i6);
    i6 = i6 + 4 | 0;
    i7 = i7 + 4 | 0;
   }
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i7, i12);
   i13 = HEAP8[i8 + 8 + 3 >> 0] | 0;
   i12 = i13 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj(i14, i12 ? HEAP32[i8 >> 2] | 0 : i8, i12 ? HEAP32[i8 + 4 >> 2] | 0 : i13 & 255) | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
   break;
  }
  if ((i4 - i10 | 0) >>> 0 < i9 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i14, i4, i10 + i9 - i4 | 0, i10, i10, 0, 0);
  if ((HEAP8[i13 >> 0] | 0) < 0) i2 = HEAP32[i14 >> 2] | 0; else i2 = i14;
  i2 = i2 + (i10 << 2) | 0;
  while (1) {
   if ((i1 | 0) == (i11 | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i2, i1);
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
  HEAP32[i12 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i2, i12);
  i1 = i10 + i9 | 0;
  if ((HEAP8[i13 >> 0] | 0) < 0) {
   HEAP32[i14 + 4 >> 2] = i1;
   break;
  } else {
   HEAP8[i13 >> 0] = i1;
   break;
  }
 } while (0);
 STACKTOP = i15;
 return i14 | 0;
}

function _SDL_CalculateBlitA(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] | 0;
 switch (HEAP32[i1 + 68 >> 2] & -28673 | 0) {
 case 16:
  switch (HEAP8[i4 + 9 >> 0] | 0) {
  case 2:
   {
    if ((HEAP8[i5 + 9 >> 0] | 0) != 4) {
     i5 = 292;
     return i5 | 0;
    }
    if ((HEAP32[i5 + 24 >> 2] | 0) != -16777216) {
     i5 = 292;
     return i5 | 0;
    }
    if ((HEAP32[i5 + 16 >> 2] | 0) != 65280) {
     i5 = 292;
     return i5 | 0;
    }
    if ((HEAP32[i5 + 12 >> 2] | 0) == 255) {
     if ((HEAP32[i4 + 12 >> 2] | 0) != 31) i2 = 8;
    } else i2 = 8;
    if ((i2 | 0) == 8) {
     if ((HEAP32[i5 + 20 >> 2] | 0) != 255) {
      i5 = 292;
      return i5 | 0;
     }
     if ((HEAP32[i4 + 20 >> 2] | 0) != 31) {
      i5 = 292;
      return i5 | 0;
     }
    }
    i5 = HEAP32[i4 + 16 >> 2] | 0;
    i5 = (i5 | 0) == 2016 ? 294 : (i5 | 0) == 992 ? 293 : 292;
    return i5 | 0;
   }
  case 4:
   {
    if ((HEAP32[i5 + 12 >> 2] | 0) == (HEAP32[i4 + 12 >> 2] | 0)) if ((HEAP32[i5 + 16 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0)) if ((HEAP32[i5 + 20 >> 2] | 0) == (HEAP32[i4 + 20 >> 2] | 0)) if ((HEAP8[i5 + 9 >> 0] | 0) == 4) if ((HEAP32[i5 + 24 >> 2] | 0) == -16777216) {
     i5 = 301;
     return i5 | 0;
    }
    i5 = 292;
    return i5 | 0;
   }
  case 1:
   {
    i5 = 300;
    return i5 | 0;
   }
  default:
   {
    i5 = 292;
    return i5 | 0;
   }
  }
 case 18:
  {
   if (HEAP32[i5 + 24 >> 2] | 0) {
    i5 = 0;
    return i5 | 0;
   }
   switch (HEAP8[i4 + 9 >> 0] | 0) {
   case 2:
    {
     if (!(HEAP32[i1 + 4 >> 2] | 0)) {
      i5 = 295;
      return i5 | 0;
     }
     i5 = HEAP32[i4 + 16 >> 2] | 0;
     i5 = (i5 | 0) == 2016 ? 297 : (i5 | 0) == 992 ? 296 : 295;
     return i5 | 0;
    }
   case 4:
    {
     i1 = HEAP32[i5 + 12 >> 2] | 0;
     if ((i1 | 0) == (HEAP32[i4 + 12 >> 2] | 0)) {
      i2 = HEAP32[i5 + 16 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) {
       i3 = HEAP32[i5 + 20 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i4 + 20 >> 2] | 0)) if ((HEAP8[i5 + 9 >> 0] | 0) == 4) if ((i2 | i1 | i3 | 0) == 16777215) {
        i5 = 303;
        return i5 | 0;
       }
      }
     }
     i5 = 295;
     return i5 | 0;
    }
   case 1:
    {
     i5 = 302;
     return i5 | 0;
    }
   default:
    {
     i5 = 295;
     return i5 | 0;
    }
   }
  }
 case 274:
  {
   if (HEAP32[i5 + 24 >> 2] | 0) {
    i5 = 0;
    return i5 | 0;
   }
   i5 = (HEAP8[i4 + 9 >> 0] | 0) == 1 ? 299 : 298;
   return i5 | 0;
  }
 default:
  {
   i5 = 0;
   return i5 | 0;
  }
 }
 return 0;
}

function _Color24DitherYV12Mod1X(i16, i17, i6, i1, i2, i3, i5, i23, i4) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i23 = i23 | 0;
 i4 = i4 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i24 = (i23 | 0) / 2 | 0;
 i18 = ((i4 << 1) + i23 | 0) * 3 | 0;
 if ((i5 + 1 | 0) >>> 0 < 3) return;
 i19 = (i23 + 1 | 0) >>> 0 < 3;
 i20 = i24 << 1;
 i21 = i24 * 6 | 0;
 i22 = i20 + i23 | 0;
 i15 = i3;
 i3 = i3 + (i23 * 3 | 0) + (i4 * 3 | 0) | 0;
 i13 = i6;
 i14 = (i5 | 0) / 2 | 0;
 i4 = i6;
 while (1) {
  i14 = i14 + -1 | 0;
  i7 = i4 + i23 | 0;
  if (i19) {
   i6 = i13;
   i5 = i15;
   i4 = i7;
  } else {
   i12 = i1 + i24 | 0;
   i6 = i13 + i20 | 0;
   i4 = i4 + i22 | 0;
   i11 = i24;
   i9 = i2;
   i10 = i15;
   i8 = i3;
   i5 = i13;
   while (1) {
    i11 = i11 + -1 | 0;
    i27 = HEAPU8[i1 >> 0] | 0;
    i26 = (HEAP32[i16 + (i27 << 2) >> 2] | 0) + 256 | 0;
    i25 = HEAPU8[i9 >> 0] | 0;
    i27 = (HEAP32[i16 + ((i27 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i16 + ((i25 | 512) << 2) >> 2] | 0) | 0;
    i25 = (HEAP32[i16 + ((i25 | 768) << 2) >> 2] | 0) + 1792 | 0;
    i13 = HEAPU8[i5 >> 0] | 0;
    i13 = HEAP32[i17 + (i27 + i13 << 2) >> 2] | HEAP32[i17 + (i26 + i13 << 2) >> 2] | HEAP32[i17 + (i25 + i13 << 2) >> 2];
    HEAP8[i10 >> 0] = i13;
    HEAP8[i10 + 1 >> 0] = i13 >>> 8;
    HEAP8[i10 + 2 >> 0] = i13 >>> 16;
    i13 = HEAPU8[i5 + 1 >> 0] | 0;
    i13 = HEAP32[i17 + (i27 + i13 << 2) >> 2] | HEAP32[i17 + (i26 + i13 << 2) >> 2] | HEAP32[i17 + (i25 + i13 << 2) >> 2];
    HEAP8[i10 + 3 >> 0] = i13;
    HEAP8[i10 + 4 >> 0] = i13 >>> 8;
    HEAP8[i10 + 5 >> 0] = i13 >>> 16;
    i13 = HEAPU8[i7 >> 0] | 0;
    i13 = HEAP32[i17 + (i27 + i13 << 2) >> 2] | HEAP32[i17 + (i26 + i13 << 2) >> 2] | HEAP32[i17 + (i25 + i13 << 2) >> 2];
    HEAP8[i8 >> 0] = i13;
    HEAP8[i8 + 1 >> 0] = i13 >>> 8;
    HEAP8[i8 + 2 >> 0] = i13 >>> 16;
    i13 = HEAPU8[i7 + 1 >> 0] | 0;
    i13 = HEAP32[i17 + (i27 + i13 << 2) >> 2] | HEAP32[i17 + (i26 + i13 << 2) >> 2] | HEAP32[i17 + (i25 + i13 << 2) >> 2];
    HEAP8[i8 + 3 >> 0] = i13;
    HEAP8[i8 + 4 >> 0] = i13 >>> 8;
    HEAP8[i8 + 5 >> 0] = i13 >>> 16;
    if (!i11) break; else {
     i1 = i1 + 1 | 0;
     i9 = i9 + 1 | 0;
     i10 = i10 + 6 | 0;
     i7 = i7 + 2 | 0;
     i8 = i8 + 6 | 0;
     i5 = i5 + 2 | 0;
    }
   }
   i1 = i12;
   i2 = i2 + i24 | 0;
   i5 = i15 + i21 | 0;
   i3 = i3 + i21 | 0;
  }
  if (!i14) break; else {
   i15 = i5 + i18 | 0;
   i3 = i3 + i18 | 0;
   i13 = i6 + i23 | 0;
  }
 }
 return;
}

function _png_icc_set_sRGB(i22, i23, i24, i1) {
 i22 = i22 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i21 = 0;
 if ((HEAP8[i22 + 644 >> 0] & 48) == 48) return;
 i5 = (HEAPU8[i24 + 85 >> 0] | 0) << 16 | (HEAPU8[i24 + 84 >> 0] | 0) << 24 | (HEAPU8[i24 + 86 >> 0] | 0) << 8 | (HEAPU8[i24 + 87 >> 0] | 0);
 i6 = i24 + 88 | 0;
 i7 = i24 + 89 | 0;
 i8 = i24 + 90 | 0;
 i9 = i24 + 91 | 0;
 i10 = i24 + 92 | 0;
 i11 = i24 + 93 | 0;
 i12 = i24 + 94 | 0;
 i13 = i24 + 95 | 0;
 i14 = i24 + 96 | 0;
 i15 = i24 + 97 | 0;
 i16 = i24 + 98 | 0;
 i17 = i24 + 99 | 0;
 i18 = i24 + 1 | 0;
 i19 = i24 + 2 | 0;
 i20 = i24 + 3 | 0;
 i25 = i24 + 64 | 0;
 i26 = i24 + 65 | 0;
 i27 = i24 + 66 | 0;
 i28 = i24 + 67 | 0;
 i2 = 65536;
 i3 = 0;
 i4 = 0;
 while (1) {
  if ((i5 | 0) == (HEAP32[18408 + (i4 << 5) + 12 >> 2] | 0)) if (((HEAPU8[i7 >> 0] | 0) << 16 | (HEAPU8[i6 >> 0] | 0) << 24 | (HEAPU8[i8 >> 0] | 0) << 8 | (HEAPU8[i9 >> 0] | 0) | 0) == (HEAP32[18408 + (i4 << 5) + 16 >> 2] | 0)) if (((HEAPU8[i11 >> 0] | 0) << 16 | (HEAPU8[i10 >> 0] | 0) << 24 | (HEAPU8[i12 >> 0] | 0) << 8 | (HEAPU8[i13 >> 0] | 0) | 0) == (HEAP32[18408 + (i4 << 5) + 20 >> 2] | 0)) if (((HEAPU8[i15 >> 0] | 0) << 16 | (HEAPU8[i14 >> 0] | 0) << 24 | (HEAPU8[i16 >> 0] | 0) << 8 | (HEAPU8[i17 >> 0] | 0) | 0) == (HEAP32[18408 + (i4 << 5) + 24 >> 2] | 0)) {
   if (!i3) {
    i2 = (HEAPU8[i26 >> 0] | 0) << 16 | (HEAPU8[i25 >> 0] | 0) << 24 | (HEAPU8[i27 >> 0] | 0) << 8 | (HEAPU8[i28 >> 0] | 0);
    i3 = (HEAPU8[i18 >> 0] | 0) << 16 | (HEAPU8[i24 >> 0] | 0) << 24 | (HEAPU8[i19 >> 0] | 0) << 8 | (HEAPU8[i20 >> 0] | 0);
   }
   if ((i3 | 0) == (HEAP32[18408 + (i4 << 5) + 8 >> 2] | 0)) if ((i2 | 0) == (HEAPU16[18408 + (i4 << 5) + 30 >> 1] | 0 | 0)) break;
  }
  i4 = i4 + 1 | 0;
  if (i4 >>> 0 >= 7) {
   i21 = 22;
   break;
  }
 }
 if ((i21 | 0) == 22) return;
 if (!i1) i1 = _adler32(_adler32(0, 0, 0) | 0, i24, i3) | 0;
 if ((i1 | 0) == (HEAP32[18408 + (i4 << 5) >> 2] | 0)) {
  i24 = _crc32(_crc32(0, 0, 0) | 0, i24, i3) | 0;
  if ((i24 | 0) == (HEAP32[18408 + (i4 << 5) + 4 >> 2] | 0)) {
   if ((i4 + -5 | 0) >>> 0 < 2) _png_chunk_report(i22, 61745, 2); else if ((i4 + -4 | 0) >>> 0 < 3) _png_chunk_report(i22, 61774, 0);
   _png_colorspace_set_sRGB(i22, i23, (HEAPU8[i26 >> 0] | 0) << 16 | (HEAPU8[i25 >> 0] | 0) << 24 | (HEAPU8[i27 >> 0] | 0) << 8 | (HEAPU8[i28 >> 0] | 0)) | 0;
   return;
  }
 }
 _png_chunk_report(i22, 61817, 0);
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = HEAP32[i11 + 52 >> 2] | 0;
 i20 = HEAPU8[i11 + 60 >> 0] | 0;
 i21 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i1 = HEAP8[i11 + 63 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i19 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i19 | 0) | 0;
 i15 = i11 + 24 | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 HEAP32[i13 >> 2] = i19 + -1;
 if (!i19) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i19 = (i2 & 1 | 0) == 0;
 i9 = (i2 & 2 | 0) == 0 ? -16777216 : (i1 & 255) << 24;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i2 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i2 | 0) > 65535) {
   i7 = ~i2;
   i7 = i2 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i2 = i2 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i3 + -1 | 0;
  if (i3 | 0) if (i19) {
   i3 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i22 = ~i5;
     i22 = i5 + 65536 + ((i22 | 0) > -131072 ? i22 : -131072) | 0;
     i6 = i6 + 1 + (i22 >>> 16) | 0;
     i3 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i22 & -65536) | 0;
    }
    i22 = HEAP32[i3 >> 2] | 0;
    HEAP32[i1 >> 2] = i22 & 65280 | i9 | i22 >>> 16 & 255 | i22 << 16 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i3 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i22 = ~i5;
     i22 = i5 + 65536 + ((i22 | 0) > -131072 ? i22 : -131072) | 0;
     i6 = i6 + 1 + (i22 >>> 16) | 0;
     i3 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i22 & -65536) | 0;
    }
    i22 = HEAP32[i3 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i22 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | i9 | (((Math_imul(i22 >>> 16 & 255, i12) | 0) >>> 0) / 255 | 0) | (((Math_imul(i22 & 255, i20) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i22 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i22 + -1;
  if (!i22) break;
  i2 = i2 + i14 | 0;
  i8 = i1;
  i3 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i21, i22, i23, d8) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i13 = i17 + 72 | 0;
 i7 = i17 + 48 | 0;
 i6 = i17 + 32 | 0;
 i3 = i17 + 24 | 0;
 i2 = i17 + 8 | 0;
 i5 = i17;
 i10 = i17 + 134 | 0;
 i9 = i17 + 68 | 0;
 i11 = i17 + 76 | 0;
 i16 = i17 + 64 | 0;
 i14 = i17 + 60 | 0;
 i15 = i17 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 73374, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i20 = i1;
   i24 = i1;
  }
 } else {
  i12 = i1;
  i20 = 0;
  i24 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i24 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i2, i22) | 0;
 if ((i24 | 0) == (i10 | 0)) {
  i18 = i11;
  i19 = 0;
 } else {
  i1 = _malloc(i12 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i19 = i1;
  }
 }
 __ZNKSt3__28ios_base6getlocEv(i13, i22);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i24, i3, i2, i18, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i16 >> 2] | 0;
 i24 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i24 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i18, i21, i24, i22, i23) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i17;
 return i24 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i21, i22, i23, d8) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i23 = i23 | 0;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176);
 i13 = i17 + 72 | 0;
 i7 = i17 + 48 | 0;
 i6 = i17 + 32 | 0;
 i3 = i17 + 24 | 0;
 i2 = i17 + 8 | 0;
 i5 = i17;
 i10 = i17 + 134 | 0;
 i9 = i17 + 68 | 0;
 i11 = i17 + 76 | 0;
 i16 = i17 + 64 | 0;
 i14 = i17 + 60 | 0;
 i15 = i17 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 89710, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = i10;
 i1 = __ZNSt3__26__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d8;
  i1 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__26__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i22 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d8;
   i2 = __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i9, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i12 = i2;
   i20 = i1;
   i24 = i1;
  }
 } else {
  i12 = i1;
  i20 = 0;
  i24 = HEAP32[i9 >> 2] | 0;
 }
 i2 = i24 + i12 | 0;
 i3 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i24, i2, i22) | 0;
 if ((i24 | 0) == (i10 | 0)) {
  i18 = i11;
  i19 = 0;
 } else {
  i1 = _malloc(i12 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i19 = i1;
  }
 }
 __ZNKSt3__28ios_base6getlocEv(i13, i22);
 __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i24, i3, i2, i18, i16, i14, i13);
 __ZNSt3__26localeD2Ev(i13);
 HEAP32[i15 >> 2] = HEAP32[i21 >> 2];
 i21 = HEAP32[i16 >> 2] | 0;
 i24 = HEAP32[i14 >> 2] | 0;
 HEAP32[i13 >> 2] = HEAP32[i15 >> 2];
 i24 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i13, i18, i21, i24, i22, i23) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i17;
 return i24 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i2 = HEAP32[i11 + 52 >> 2] | 0;
 i20 = HEAPU8[i11 + 60 >> 0] | 0;
 i21 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i1 = HEAP8[i11 + 63 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i19 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i19 | 0) | 0;
 i15 = i11 + 24 | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i3 | 0) | 0;
 HEAP32[i13 >> 2] = i19 + -1;
 if (!i19) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i19 = (i2 & 1 | 0) == 0;
 i9 = (i2 & 2 | 0) == 0 ? -16777216 : (i1 & 255) << 24;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i2 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i2 | 0) > 65535) {
   i7 = ~i2;
   i7 = i2 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i2 = i2 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i3 + -1 | 0;
  if (i3 | 0) if (i19) {
   i3 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i22 = ~i5;
     i22 = i5 + 65536 + ((i22 | 0) > -131072 ? i22 : -131072) | 0;
     i6 = i6 + 1 + (i22 >>> 16) | 0;
     i3 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i22 & -65536) | 0;
    }
    i22 = HEAP32[i3 >> 2] | 0;
    HEAP32[i1 >> 2] = i22 & 65280 | i9 | i22 & 255 | i22 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i3 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i22 = ~i5;
     i22 = i5 + 65536 + ((i22 | 0) > -131072 ? i22 : -131072) | 0;
     i6 = i6 + 1 + (i22 >>> 16) | 0;
     i3 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i22 & -65536) | 0;
    }
    i22 = HEAP32[i3 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i22 >>> 8 & 255, i21) | 0) >>> 0) / 255 | 0) << 8 | i9 | (((Math_imul(i22 & 255, i12) | 0) >>> 0) / 255 | 0) | (((Math_imul(i22 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i22 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i22 + -1;
  if (!i22) break;
  i2 = i2 + i14 | 0;
  i8 = i1;
  i3 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_(i13, i1, i11) {
 i13 = i13 | 0;
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i1;
 i12 = i14 + 12 | 0;
 i7 = i14;
 i9 = i13 + 11 | 0;
 i4 = HEAP8[i9 >> 0] | 0;
 i2 = i4 << 24 >> 24 < 0;
 if (i2) {
  i8 = HEAP32[i13 + 4 >> 2] | 0;
  i5 = (HEAP32[i13 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i8 = i4 & 255;
  i5 = 10;
 }
 i10 = i11 - i6 | 0;
 do if (i10 | 0) {
  if (i2) {
   i3 = HEAP32[i13 >> 2] | 0;
   i2 = HEAP32[i13 + 4 >> 2] | 0;
  } else {
   i3 = i13;
   i2 = i4 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_(i1, i3, i3 + i2 | 0) | 0) {
   HEAP32[i7 >> 2] = 0;
   HEAP32[i7 + 4 >> 2] = 0;
   HEAP32[i7 + 8 >> 2] = 0;
   if (i10 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i7);
   if (i10 >>> 0 < 11) {
    HEAP8[i7 + 11 >> 0] = i10;
    i3 = i7;
   } else {
    i9 = i10 + 16 & -16;
    i3 = __Znwj(i9) | 0;
    HEAP32[i7 >> 2] = i3;
    HEAP32[i7 + 8 >> 2] = i9 | -2147483648;
    HEAP32[i7 + 4 >> 2] = i10;
   }
   i2 = i3;
   while (1) {
    if ((i1 | 0) == (i11 | 0)) break;
    __ZNSt3__211char_traitsIcE6assignERcRKc(i2, i1);
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
   }
   HEAP8[i12 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i3 + i10 | 0, i12);
   i12 = HEAP8[i7 + 11 >> 0] | 0;
   i11 = i12 << 24 >> 24 < 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i13, i11 ? HEAP32[i7 >> 2] | 0 : i7, i11 ? HEAP32[i7 + 4 >> 2] | 0 : i12 & 255) | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
   break;
  }
  if ((i5 - i8 | 0) >>> 0 < i10 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i13, i5, i8 + i10 - i5 | 0, i8, i8, 0, 0);
  if ((HEAP8[i9 >> 0] | 0) < 0) i4 = HEAP32[i13 >> 2] | 0; else i4 = i13;
  i3 = i11 + (i8 - i6) | 0;
  i2 = i4 + i8 | 0;
  while (1) {
   if ((i1 | 0) == (i11 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc(i2, i1);
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  }
  HEAP8[i12 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i4 + i3 | 0, i12);
  i1 = i8 + i10 | 0;
  if ((HEAP8[i9 >> 0] | 0) < 0) {
   HEAP32[i13 + 4 >> 2] = i1;
   break;
  } else {
   HEAP8[i9 >> 0] = i1;
   break;
  }
 } while (0);
 STACKTOP = i14;
 return i13 | 0;
}

function _SDL_SendTouchMotion(i8, i9, i10, i11, f12, f13, f14) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 f12 = Math_fround(f12);
 f13 = Math_fround(f13);
 f14 = Math_fround(f14);
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, f5 = f0, f6 = f0, i7 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i16 + 56 | 0;
 i15 = i16;
 i4 = HEAP32[20425] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i2 = HEAP32[20426] | 0;
  i1 = 0;
  while (1) {
   i3 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
   i17 = i3;
   if ((HEAP32[i17 >> 2] | 0) == (i8 | 0) ? (HEAP32[i17 + 4 >> 2] | 0) == (i9 | 0) : 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i4 | 0)) {
   if (!i3) {
    i17 = -1;
    STACKTOP = i16;
    return i17 | 0;
   }
   i4 = HEAP32[i3 + 8 >> 2] | 0;
   L11 : do if ((i4 | 0) > 0) {
    i2 = HEAP32[i3 + 16 >> 2] | 0;
    i1 = 0;
    while (1) {
     i7 = HEAP32[i2 + (i1 << 2) >> 2] | 0;
     i17 = i7;
     if ((HEAP32[i17 >> 2] | 0) == (i10 | 0) ? (HEAP32[i17 + 4 >> 2] | 0) == (i11 | 0) : 0) break;
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= (i4 | 0)) break L11;
    }
    if (!((i1 | 0) >= (i4 | 0) | (i1 | 0) < 0 | (i7 | 0) == 0)) {
     i2 = i7 + 8 | 0;
     f5 = Math_fround(f12 - Math_fround(HEAPF32[i2 >> 2]));
     i3 = i7 + 12 | 0;
     f6 = Math_fround(f13 - Math_fround(HEAPF32[i3 >> 2]));
     i1 = i7 + 16 | 0;
     if (!(f5 != Math_fround(0.0) | f6 != Math_fround(0.0) | Math_fround(f14 - Math_fround(HEAPF32[i1 >> 2])) != Math_fround(0.0))) {
      i17 = 0;
      STACKTOP = i16;
      return i17 | 0;
     }
     HEAPF32[i2 >> 2] = f12;
     HEAPF32[i3 >> 2] = f13;
     HEAPF32[i1 >> 2] = f14;
     if ((_SDL_EventState(1794, -1) | 0) << 24 >> 24 != 1) {
      i17 = 0;
      STACKTOP = i16;
      return i17 | 0;
     }
     HEAP32[i15 >> 2] = 1794;
     i17 = i15 + 8 | 0;
     HEAP32[i17 >> 2] = i8;
     HEAP32[i17 + 4 >> 2] = i9;
     i17 = i15 + 16 | 0;
     HEAP32[i17 >> 2] = i10;
     HEAP32[i17 + 4 >> 2] = i11;
     HEAPF32[i15 + 24 >> 2] = f12;
     HEAPF32[i15 + 28 >> 2] = f13;
     HEAPF32[i15 + 32 >> 2] = f5;
     HEAPF32[i15 + 36 >> 2] = f6;
     HEAPF32[i15 + 40 >> 2] = f14;
     i17 = (_SDL_PushEvent(i15) | 0) > 0 & 1;
     STACKTOP = i16;
     return i17 | 0;
    }
   } while (0);
   i17 = _SDL_SendTouch(i8, i9, i10, i11, 1, f12, f13, f14) | 0;
   STACKTOP = i16;
   return i17 | 0;
  }
 } while (0);
 _SDL_SetError(50648, i7) | 0;
 i17 = -1;
 STACKTOP = i16;
 return i17 | 0;
}

function _atan2(d1, d8) {
 d1 = +d1;
 d8 = +d8;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 HEAPF64[tempDoublePtr >> 3] = d8;
 i5 = HEAP32[tempDoublePtr >> 2] | 0;
 i2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i9 = i2 & 2147483647;
 if (!(i9 >>> 0 > 2146435072 | (i9 | 0) == 2146435072 & i5 >>> 0 > 0)) {
  HEAPF64[tempDoublePtr >> 3] = d1;
  i4 = HEAP32[tempDoublePtr >> 2] | 0;
  i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
  i9 = i3 & 2147483647;
  if (!(i9 >>> 0 > 2146435072 | (i9 | 0) == 2146435072 & i4 >>> 0 > 0)) {
   if (!(i2 + -1072693248 | i5)) {
    d8 = +_atan(d1);
    return +d8;
   }
   i6 = _bitshift64Lshr(i4 | 0, i3 | 0, 63) | 0;
   i7 = _bitshift64Lshr(i5 | 0, i2 | 0, 62) | 0;
   i7 = i7 & 2;
   i9 = i7 | i6;
   i2 = i2 & 2147483647;
   i3 = i3 & 2147483647;
   if (!(i3 | i4)) switch (i9 & 3) {
   case 2:
    {
     d8 = 3.141592653589793;
     return +d8;
    }
   case 3:
    {
     d8 = -3.141592653589793;
     return +d8;
    }
   case 1:
   case 0:
    {
     d8 = d1;
     return +d8;
    }
   default:
    {}
   }
   if (!(i2 | i5)) {
    d8 = i6 | 0 ? -1.5707963267948966 : 1.5707963267948966;
    return +d8;
   }
   if ((i2 | 0) != 2146435072) {
    if ((i3 | 0) == 2146435072 | (i2 + 67108864 | 0) >>> 0 < i3 >>> 0) {
     d8 = i6 | 0 ? -1.5707963267948966 : 1.5707963267948966;
     return +d8;
    }
    if ((i7 | 0) != 0 & (i3 + 67108864 | 0) >>> 0 < i2 >>> 0) d1 = 0.0; else d1 = +_atan(+Math_abs(+(d1 / d8)));
    switch (i9 & 3) {
    case 1:
     {
      d8 = -d1;
      return +d8;
     }
    case 2:
     {
      d8 = 3.141592653589793 - (d1 + -1.2246467991473532e-16);
      return +d8;
     }
    case 0:
     {
      d8 = d1;
      return +d8;
     }
    default:
     {
      d8 = d1 + -1.2246467991473532e-16 + -3.141592653589793;
      return +d8;
     }
    }
   }
   i2 = i9 & 255;
   if ((i3 | 0) == 2146435072) switch (i2 & 3) {
   case 1:
    {
     d8 = -.7853981633974483;
     return +d8;
    }
   case 2:
    {
     d8 = 2.356194490192345;
     return +d8;
    }
   case 3:
    {
     d8 = -2.356194490192345;
     return +d8;
    }
   case 0:
    {
     d8 = .7853981633974483;
     return +d8;
    }
   default:
    {}
   } else switch (i2 & 3) {
   case 1:
    {
     d8 = -0.0;
     return +d8;
    }
   case 2:
    {
     d8 = 3.141592653589793;
     return +d8;
    }
   case 3:
    {
     d8 = -3.141592653589793;
     return +d8;
    }
   case 0:
    {
     d8 = 0.0;
     return +d8;
    }
   default:
    {}
   }
  }
 }
 d8 = d1 + d8;
 return +d8;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i22 = HEAP32[i2 >> 2] | 0;
    i21 = i22 >>> 8;
    HEAP32[i1 >> 2] = i22 >>> 24 << 16 | i21 & 65280 | i21 & 255;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i22 = ~i5;
     i22 = i5 + 65536 + ((i22 | 0) > -131072 ? i22 : -131072) | 0;
     i6 = i6 + 1 + (i22 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i22 & -65536) | 0;
    }
    i22 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i22 >>> 24, i12) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i22 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i22 >>> 8 & 255, i19) | 0) >>> 0) / 255 | 0);
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i22 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i22 + -1;
  if (!i22) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _png_handle_bKGD(i9, i10, i5) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0;
 i8 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i12 + 10 | 0;
 i11 = i12;
 i1 = HEAP32[i9 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i9, 63643);
 if (!(i1 & 4)) {
  i2 = i9 + 435 | 0;
  i3 = HEAP8[i2 >> 0] | 0;
  i4 = i3 << 24 >> 24 == 3;
  if (!((i1 & 2 | 0) == 0 & i4)) {
   i6 = (i10 | 0) != 0;
   if (i6) if (HEAP32[i10 + 8 >> 2] & 32 | 0) {
    _png_crc_finish(i9, i5) | 0;
    _png_chunk_benign_error(i9, 63980);
    STACKTOP = i12;
    return;
   }
   if (((i4 ? 1 : (i3 << 1 & 4 | 2) & 255) | 0) != (i5 | 0)) {
    _png_crc_finish(i9, i5) | 0;
    _png_chunk_benign_error(i9, 63990);
    STACKTOP = i12;
    return;
   }
   _png_read_data(i9, i7, i5);
   _png_calculate_crc(i9, i7, i5);
   if (_png_crc_finish(i9, 0) | 0) {
    STACKTOP = i12;
    return;
   }
   i2 = HEAP8[i2 >> 0] | 0;
   do if (i2 << 24 >> 24 == 3) {
    i1 = HEAP8[i7 >> 0] | 0;
    HEAP8[i11 >> 0] = i1;
    do if (i6) {
     i2 = HEAP16[i10 + 20 >> 1] | 0;
     if (!(i2 << 16 >> 16)) i8 = 18; else {
      i1 = i1 & 255;
      if (i1 >>> 0 < (i2 & 65535) >>> 0) {
       i7 = HEAP32[i9 + 416 >> 2] | 0;
       i7 = i7 + (i1 * 3 | 0) | 0;
       HEAP16[i11 + 2 >> 1] = HEAPU8[i7 >> 0] | 0;
       HEAP16[i11 + 4 >> 1] = HEAPU8[i7 + 1 >> 0] | 0;
       HEAP16[i11 + 6 >> 1] = HEAPU8[i7 + 2 >> 0] | 0;
       break;
      }
      _png_chunk_benign_error(i9, 64617);
      STACKTOP = i12;
      return;
     }
    } else i8 = 18; while (0);
    if ((i8 | 0) == 18) {
     HEAP16[i11 + 6 >> 1] = 0;
     HEAP16[i11 + 4 >> 1] = 0;
     HEAP16[i11 + 2 >> 1] = 0;
    }
    HEAP16[i11 + 8 >> 1] = 0;
   } else {
    HEAP8[i11 >> 0] = 0;
    i1 = (HEAPU8[i7 >> 0] << 8 | HEAPU8[i7 + 1 >> 0]) & 65535;
    if (!(i2 & 2)) {
     HEAP16[i11 + 8 >> 1] = i1;
     HEAP16[i11 + 6 >> 1] = i1;
     HEAP16[i11 + 4 >> 1] = i1;
     HEAP16[i11 + 2 >> 1] = i1;
     break;
    } else {
     HEAP16[i11 + 2 >> 1] = i1;
     HEAP16[i11 + 4 >> 1] = HEAPU8[i7 + 2 >> 0] << 8 | HEAPU8[i7 + 3 >> 0];
     HEAP16[i11 + 6 >> 1] = HEAPU8[i7 + 4 >> 0] << 8 | HEAPU8[i7 + 5 >> 0];
     HEAP16[i11 + 8 >> 1] = 0;
     break;
    }
   } while (0);
   _png_set_bKGD(i9, i10, i11);
   STACKTOP = i12;
   return;
  }
 }
 _png_crc_finish(i9, i5) | 0;
 _png_chunk_benign_error(i9, 64026);
 STACKTOP = i12;
 return;
}

function __ZN15SpriteComponentC2EPKcb(i8, i9, i1) {
 i8 = i8 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i8 >> 2] = 2836;
 HEAP32[i8 + 8 >> 2] = 0;
 __ZN8Vector2dC2Ev(i8 + 48 | 0);
 HEAP8[i8 + 56 >> 0] = i1 & 1;
 HEAP8[i8 + 57 >> 0] = 0;
 HEAP32[i8 + 60 >> 2] = 0;
 HEAP32[i8 + 64 >> 2] = 100;
 HEAP32[i8 + 68 >> 2] = 0;
 i5 = i8 + 72 | 0;
 i6 = i8 + 76 | 0;
 HEAP32[i6 >> 2] = 0;
 i7 = i8 + 80 | 0;
 HEAP32[i7 >> 2] = 0;
 i3 = i8 + 76 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 + 84 >> 2] = 0;
 i1 = __Znwj(32) | 0;
 HEAP32[i1 + 16 >> 2] = 39248;
 HEAP32[i1 + 20 >> 2] = 1;
 HEAP32[i1 + 24 >> 2] = 10;
 HEAP32[i1 + 28 >> 2] = 100;
 if (!(HEAP32[i3 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = i3;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i5 >> 2] = i1;
  __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(i1, i1);
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 } else __ZdlPv(i1);
 i1 = __Znwj(32) | 0;
 HEAP32[i1 + 16 >> 2] = 39243;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 1;
 HEAP32[i1 + 28 >> 2] = 1;
 i2 = HEAP32[i3 >> 2] | 0;
 do if (!i2) {
  i4 = i3;
  i2 = i3;
 } else {
  i4 = i6;
  while (1) {
   i3 = HEAP32[i2 + 16 >> 2] | 0;
   if (i3 >>> 0 > 39243 >>> 0) {
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i3 = 8;
     break;
    }
   } else {
    if (i3 >>> 0 >= 39243 >>> 0) {
     i3 = 12;
     break;
    }
    i4 = i2 + 4 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    if (!i3) {
     i3 = 11;
     break;
    } else i2 = i4;
   }
   i4 = i2;
   i2 = i3;
  }
  if ((i3 | 0) == 8) {
   i4 = i2;
   break;
  } else if ((i3 | 0) == 11) break; else if ((i3 | 0) == 12) break;
 } while (0);
 if (HEAP32[i4 >> 2] | 0) {
  __ZdlPv(i1);
  __ZN15SpriteComponent4playEPKc(i8, 39243);
  i7 = __ZN14TextureManager11LoadTextureEPKcb(i9, 1) | 0;
  i9 = i8 + 12 | 0;
  HEAP32[i9 >> 2] = i7;
  i9 = i8 + 24 | 0;
  HEAP32[i9 >> 2] = 0;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = i1;
 i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 if (i2) {
  HEAP32[i5 >> 2] = i2;
  i1 = HEAP32[i4 >> 2] | 0;
 }
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i6 >> 2] | 0, i1);
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 __ZN15SpriteComponent4playEPKc(i8, 39243);
 i7 = __ZN14TextureManager11LoadTextureEPKcb(i9, 1) | 0;
 i9 = i8 + 12 | 0;
 HEAP32[i9 >> 2] = i7;
 i9 = i8 + 24 | 0;
 HEAP32[i9 >> 2] = 0;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 << 8 & 16711680 | i21 >>> 8 & 65280 | i21 >>> 24;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i21 >>> 8 & 255, i12) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i21 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 24, i19) | 0) >>> 0) / 255 | 0);
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 << 16 & 16711680 | i21 & 65280 | i21 >>> 16 & 255;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i21 & 255, i12) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0);
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 << 16 & 16711680 | i21 & 65280 | i21 >>> 16 & 255;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i21 & 255, i12) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0);
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 >>> 24 | i21 >>> 8 & 65280 | i21 << 8 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i21 >>> 24, i12) | 0) >>> 0) / 255 | 0 | (((Math_imul(i21 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 8 & 255, i19) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 >>> 16 & 255 | i21 & 65280 | i21 << 16 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i21 >>> 16 & 255, i12) | 0) >>> 0) / 255 | 0 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 & 255, i19) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 >>> 16 & 255 | i21 & 65280 | i21 << 16 & 16711680;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i21 >>> 16 & 255, i12) | 0) >>> 0) / 255 | 0 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 & 255, i19) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _GLES2_RenderClear(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, f17 = f0, f18 = f0, f19 = f0, f20 = f0;
 i15 = 0;
 i1 = i14 + 320 | 0;
 i16 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i2 | 0)) {
  i1 = i16;
  i15 = 4;
 } else {
  HEAP32[i16 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i14 + 188 >> 2] | 0, i2) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i16 >> 2];
   _GLES2_UpdateViewport(i14) | 0;
   i1 = HEAP32[i1 >> 2] | 0;
   i15 = 4;
  }
 }
 if ((i15 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 i4 = i16 + 272 | 0;
 i5 = i16 + 273 | 0;
 i6 = i16 + 274 | 0;
 i7 = i16 + 275 | 0;
 i8 = i14 + 312 | 0;
 i1 = HEAP8[i8 >> 0] | 0;
 i9 = i14 + 313 | 0;
 i10 = HEAP8[i9 >> 0] | 0;
 i11 = i14 + 314 | 0;
 i3 = HEAP8[i11 >> 0] | 0;
 i12 = i14 + 315 | 0;
 i13 = HEAP8[i12 >> 0] | 0;
 if (((HEAPU8[i5 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i6 >> 0] | 0) << 8 | (HEAPU8[i7 >> 0] | 0) | 0) != ((i10 & 255) << 16 | (i1 & 255) << 24 | (i3 & 255) << 8 | i13 & 255 | 0)) {
  i2 = HEAP32[i14 + 308 >> 2] | 0;
  L12 : do if (!i2) i15 = 10; else {
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if ((i2 | 0) < 372645892) switch (i2 | 0) {
   case 370546692:
    {
     i2 = i3;
     break L12;
    }
   default:
    {
     i15 = 10;
     break L12;
    }
   } else switch (i2 | 0) {
   case 372645892:
    {
     i2 = i3;
     break L12;
    }
   default:
    {
     i15 = 10;
     break L12;
    }
   }
  } while (0);
  if ((i15 | 0) == 10) {
   i2 = i1;
   i1 = i3;
  }
  f20 = Math_fround(Math_fround(i2 & 255) * Math_fround(.00392156886));
  f19 = Math_fround(Math_fround(i10 & 255) * Math_fround(.00392156886));
  f18 = Math_fround(Math_fround(i1 & 255) * Math_fround(.00392156886));
  f17 = Math_fround(Math_fround(i13 & 255) * Math_fround(.00392156886));
  FUNCTION_TABLE_vffff[HEAP32[i16 + 40 >> 2] & 3](f20, f19, f18, f17);
  HEAP8[i4 >> 0] = HEAP8[i8 >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[i9 >> 0] | 0;
  HEAP8[i6 >> 0] = HEAP8[i11 >> 0] | 0;
  HEAP8[i7 >> 0] = HEAP8[i12 >> 0] | 0;
 }
 i1 = i14 + 280 | 0;
 if (HEAP32[i1 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[i16 + 68 >> 2] & 511](3089);
 FUNCTION_TABLE_vi[HEAP32[i16 + 36 >> 2] & 511](16384);
 if (!(HEAP32[i1 >> 2] | 0)) return 0;
 FUNCTION_TABLE_vi[HEAP32[i16 + 80 >> 2] & 511](3089);
 return 0;
}

function _Color24DitherYUY2Mod2X(i20, i21, i6, i3, i4, i5, i9, i2, i1) {
 i20 = i20 | 0;
 i21 = i21 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0;
 i13 = ((i2 << 1) + i1 | 0) * 3 | 0;
 i14 = (i2 | 0) / 2 | 0;
 if (!i9) return;
 i15 = i13 + 3 | 0;
 i16 = i13 + 4 | 0;
 i17 = i13 + 1 | 0;
 i18 = i13 + 5 | 0;
 i19 = i13 + 2 | 0;
 if ((i2 + 1 | 0) >>> 0 < 3) return;
 i11 = i14 << 2;
 i12 = i14 * 12 | 0;
 i10 = i6;
 while (1) {
  i9 = i9 + -1 | 0;
  i2 = i3;
  i3 = i3 + i11 | 0;
  i1 = i14;
  i6 = i4;
  i7 = i5;
  i8 = i10;
  i10 = i10 + i11 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i26 = HEAPU8[i2 >> 0] | 0;
   i25 = (HEAP32[i20 + (i26 << 2) >> 2] | 0) + 256 | 0;
   i24 = HEAPU8[i6 >> 0] | 0;
   i26 = (HEAP32[i20 + ((i26 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i20 + ((i24 | 512) << 2) >> 2] | 0) | 0;
   i24 = (HEAP32[i20 + ((i24 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i23 = HEAPU8[i8 >> 0] | 0;
   i23 = HEAP32[i21 + (i26 + i23 << 2) >> 2] | HEAP32[i21 + (i25 + i23 << 2) >> 2] | HEAP32[i21 + (i24 + i23 << 2) >> 2];
   i22 = i23 & 255;
   HEAP8[i7 + i15 >> 0] = i22;
   HEAP8[i7 + i13 >> 0] = i22;
   HEAP8[i7 + 3 >> 0] = i22;
   HEAP8[i7 >> 0] = i22;
   i22 = i23 >>> 8 & 255;
   HEAP8[i7 + i16 >> 0] = i22;
   HEAP8[i7 + i17 >> 0] = i22;
   HEAP8[i7 + 4 >> 0] = i22;
   HEAP8[i7 + 1 >> 0] = i22;
   i23 = i23 >>> 16 & 255;
   HEAP8[i7 + i18 >> 0] = i23;
   HEAP8[i7 + i19 >> 0] = i23;
   HEAP8[i7 + 5 >> 0] = i23;
   HEAP8[i7 + 2 >> 0] = i23;
   i23 = i7 + 6 | 0;
   i22 = HEAPU8[i8 + 2 >> 0] | 0;
   i22 = HEAP32[i21 + (i26 + i22 << 2) >> 2] | HEAP32[i21 + (i25 + i22 << 2) >> 2] | HEAP32[i21 + (i24 + i22 << 2) >> 2];
   i24 = i22 & 255;
   HEAP8[i23 + i15 >> 0] = i24;
   HEAP8[i23 + i13 >> 0] = i24;
   HEAP8[i7 + 9 >> 0] = i24;
   HEAP8[i23 >> 0] = i24;
   i24 = i22 >>> 8 & 255;
   HEAP8[i23 + i16 >> 0] = i24;
   HEAP8[i23 + i17 >> 0] = i24;
   HEAP8[i7 + 10 >> 0] = i24;
   HEAP8[i7 + 7 >> 0] = i24;
   i22 = i22 >>> 16 & 255;
   HEAP8[i23 + i18 >> 0] = i22;
   HEAP8[i23 + i19 >> 0] = i22;
   HEAP8[i7 + 11 >> 0] = i22;
   HEAP8[i7 + 8 >> 0] = i22;
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i6 = i6 + 4 | 0;
    i7 = i7 + 12 | 0;
    i8 = i8 + 4 | 0;
   }
  }
  if (!i9) break; else {
   i4 = i4 + i11 | 0;
   i5 = i5 + i12 + i13 | 0;
  }
 }
 return;
}

function _SDL_Blit_RGBA8888_RGB888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = i21 >>> 8 & 65535 | i21 >>> 24 << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i21 >>> 8 & 255, i12) | 0) >>> 0) / 255 | 0 | (((Math_imul(i21 >>> 16 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 24, i19) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_InitFormat(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i9 + 16 | 0;
 i3 = i9 + 12 | 0;
 i5 = i9 + 8 | 0;
 i6 = i9 + 4 | 0;
 i7 = i9;
 if (!(_SDL_PixelFormatEnumToMasks(i1, i2, i3, i5, i6, i7) | 0)) {
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 }
 _SDL_memset(i8, 0, 44) | 0;
 HEAP32[i8 >> 2] = i1;
 i1 = HEAP32[i2 >> 2] | 0;
 HEAP8[i8 + 8 >> 0] = i1;
 HEAP8[i8 + 9 >> 0] = (i1 + 7 | 0) / 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i8 + 12 >> 2] = i1;
 i3 = i8 + 32 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 28 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i1 | 0) {
  if (!(i1 & 1)) {
   i2 = 0;
   do {
    i2 = i2 + 1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while (!(i1 & 1 | 0));
   HEAP8[i3 >> 0] = i2;
  }
  if (i1 & 1 | 0) {
   i2 = 8;
   do {
    i2 = i2 + -1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while ((i1 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i2;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 + 16 >> 2] = i1;
 i3 = i8 + 33 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 29 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i1 | 0) {
  if (!(i1 & 1)) {
   i2 = 0;
   do {
    i2 = i2 + 1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while (!(i1 & 1 | 0));
   HEAP8[i3 >> 0] = i2;
  }
  if (i1 & 1 | 0) {
   i2 = 8;
   do {
    i2 = i2 + -1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while ((i1 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i2;
  }
 }
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i8 + 20 >> 2] = i1;
 i3 = i8 + 34 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 30 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i1 | 0) {
  if (!(i1 & 1)) {
   i2 = 0;
   do {
    i2 = i2 + 1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while (!(i1 & 1 | 0));
   HEAP8[i3 >> 0] = i2;
  }
  if (i1 & 1 | 0) {
   i2 = 8;
   do {
    i2 = i2 + -1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while ((i1 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i2;
  }
 }
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i8 + 24 >> 2] = i1;
 i3 = i8 + 35 | 0;
 HEAP8[i3 >> 0] = 0;
 i4 = i8 + 31 | 0;
 HEAP8[i4 >> 0] = 8;
 if (i1 | 0) {
  if (!(i1 & 1)) {
   i2 = 0;
   do {
    i2 = i2 + 1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while (!(i1 & 1 | 0));
   HEAP8[i3 >> 0] = i2;
  }
  if (i1 & 1 | 0) {
   i2 = 8;
   do {
    i2 = i2 + -1 << 24 >> 24;
    i1 = i1 >>> 1;
   } while ((i1 & 1 | 0) != 0);
   HEAP8[i4 >> 0] = i2;
  }
 }
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 36 >> 2] = 1;
 HEAP32[i8 + 40 >> 2] = 0;
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _png_handle_sCAL(i6, i7, i8) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0;
 i5 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i11 + 4 | 0;
 i10 = i11;
 i1 = HEAP32[i6 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i6, 63643);
 if (i1 & 4 | 0) {
  _png_crc_finish(i6, i8) | 0;
  _png_chunk_benign_error(i6, 64026);
  STACKTOP = i11;
  return;
 }
 if (i7 | 0) if (HEAP32[i7 + 8 >> 2] & 16384 | 0) {
  _png_crc_finish(i6, i8) | 0;
  _png_chunk_benign_error(i6, 63980);
  STACKTOP = i11;
  return;
 }
 if (i8 >>> 0 < 4) {
  _png_crc_finish(i6, i8) | 0;
  _png_chunk_benign_error(i6, 63990);
  STACKTOP = i11;
  return;
 }
 i3 = i8 + 1 | 0;
 i4 = i6 + 788 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) i5 = 13; else {
  i2 = i6 + 792 | 0;
  if ((HEAP32[i2 >> 2] | 0) >>> 0 < i3 >>> 0) {
   HEAP32[i4 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   _png_free(i6, i1);
   i5 = 13;
  }
 }
 do if ((i5 | 0) == 13) {
  i1 = _png_malloc_base(i6, i3) | 0;
  if (i1 | 0) {
   HEAP32[i4 >> 2] = i1;
   HEAP32[i6 + 792 >> 2] = i3;
   break;
  }
  _png_chunk_benign_error(i6, 63690);
  _png_crc_finish(i6, i8) | 0;
  STACKTOP = i11;
  return;
 } while (0);
 _png_read_data(i6, i1, i8);
 _png_calculate_crc(i6, i1, i8);
 HEAP8[i1 + i8 >> 0] = 0;
 if (_png_crc_finish(i6, 0) | 0) {
  STACKTOP = i11;
  return;
 }
 if (((HEAP8[i1 >> 0] | 0) + -1 & 255) >= 2) {
  _png_chunk_benign_error(i6, 64039);
  STACKTOP = i11;
  return;
 }
 HEAP32[i9 >> 2] = 1;
 HEAP32[i10 >> 2] = 0;
 if (_png_check_fp_number(i1, i8, i10, i9) | 0) {
  i2 = HEAP32[i9 >> 2] | 0;
  if (i2 >>> 0 < i8 >>> 0) {
   i3 = i2 + 1 | 0;
   HEAP32[i9 >> 2] = i3;
   if (!(HEAP8[i1 + i2 >> 0] | 0)) {
    if ((HEAP32[i10 >> 2] & 392 | 0) != 264) {
     _png_chunk_benign_error(i6, 64069);
     STACKTOP = i11;
     return;
    }
    HEAP32[i10 >> 2] = 0;
    i5 = (_png_check_fp_number(i1, i8, i10, i9) | 0) != 0;
    if (!(i5 & (HEAP32[i9 >> 2] | 0) == (i8 | 0))) {
     _png_chunk_benign_error(i6, 64088);
     STACKTOP = i11;
     return;
    }
    if ((HEAP32[i10 >> 2] & 392 | 0) == 264) {
     _png_set_sCAL_s(i6, i7, HEAPU8[i1 >> 0] | 0, i1 + 1 | 0, i1 + i3 | 0);
     STACKTOP = i11;
     return;
    } else {
     _png_chunk_benign_error(i6, 64106);
     STACKTOP = i11;
     return;
    }
   }
  }
 }
 _png_chunk_benign_error(i6, 64052);
 STACKTOP = i11;
 return;
}

function _SDL_JoystickUpdate() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i10 = i17;
 i1 = HEAP32[20486] | 0;
 if (!i1) {
  STACKTOP = i17;
  return;
 }
 i11 = i10 + 8 | 0;
 i12 = i10 + 12 | 0;
 i13 = i10 + 13 | 0;
 i14 = i10 + 8 | 0;
 i15 = i10 + 12 | 0;
 i16 = i10 + 13 | 0;
 do {
  i8 = i1;
  i1 = HEAP32[i1 + 60 >> 2] | 0;
  HEAP32[20487] = i8;
  _SDL_SYS_JoystickUpdate(i8);
  i9 = i8 + 52 | 0;
  if (HEAP32[i9 >> 2] | 0) {
   i3 = i8 + 8 | 0;
   if ((HEAP32[i3 >> 2] | 0) > 0) {
    i4 = i8 + 16 | 0;
    i2 = 0;
    do {
     _SDL_PrivateJoystickAxis(i8, i2 & 255, HEAP16[(HEAP32[i4 >> 2] | 0) + (i2 << 1) >> 1] | 0) | 0;
     i2 = i2 + 1 | 0;
    } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
   }
   i6 = i8 + 36 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if ((i2 | 0) > 0) {
    i7 = i8 + 40 | 0;
    i5 = 0;
    do {
     i3 = i5 & 255;
     HEAP32[i10 >> 2] = 1540;
     i4 = i5 & 255;
     if ((i2 | 0) > (i4 | 0)) if (HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] | 0) {
      if (!(HEAP32[20468] | 0)) _SDL_WasInit(32) | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] = 0;
      if ((_SDL_EventState(HEAP32[i10 >> 2] | 0, -1) | 0) << 24 >> 24 == 1) {
       HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
       HEAP8[i15 >> 0] = i3;
       HEAP8[i16 >> 0] = 0;
       _SDL_PushEvent(i10) | 0;
      }
     }
     i5 = i5 + 1 | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while ((i5 | 0) < (i2 | 0));
   }
   i6 = i8 + 20 | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   if ((i2 | 0) > 0) {
    i7 = i8 + 24 | 0;
    i5 = 0;
    do {
     i3 = i5 & 255;
     i4 = i5 & 255;
     if ((i2 | 0) > (i4 | 0)) if (HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] | 0) {
      if (!(HEAP32[20468] | 0)) _SDL_WasInit(32) | 0;
      HEAP8[(HEAP32[i7 >> 2] | 0) + i4 >> 0] = 0;
      if ((_SDL_EventState(1538, -1) | 0) << 24 >> 24 == 1) {
       HEAP32[i10 >> 2] = 1538;
       HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
       HEAP8[i12 >> 0] = i3;
       HEAP8[i13 >> 0] = 0;
       _SDL_PushEvent(i10) | 0;
      }
     }
     i5 = i5 + 1 | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    } while ((i5 | 0) < (i2 | 0));
   }
   HEAP32[i9 >> 2] = 0;
  }
  HEAP32[20487] = 0;
  if ((HEAP32[i8 + 48 >> 2] | 0) < 1) _SDL_JoystickClose(i8);
 } while ((i1 | 0) != 0);
 STACKTOP = i17;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i21 >>> 16 & 255, i12) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 & 255, i19) | 0) >>> 0) / 255 | 0);
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _png_handle_zTXt(i9, i5, i6) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i10 = 0;
 i3 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i10 + 28 | 0;
 i8 = i10;
 i1 = i9 + 756 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 switch (i2 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i9, i6) | 0;
   STACKTOP = i10;
   return;
  }
 default:
  i3 = 3;
 }
 if ((i3 | 0) == 3) {
  i4 = i2 + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if ((i4 | 0) == 1) {
   _png_crc_finish(i9, i6) | 0;
   _png_chunk_benign_error(i9, 63619);
   STACKTOP = i10;
   return;
  }
 }
 i2 = i9 + 208 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i9, 63643);
 if (i1 & 4 | 0) HEAP32[i2 >> 2] = i1 | 8;
 i4 = i9 + 788 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) i3 = 12; else {
  i2 = i9 + 792 | 0;
  if ((HEAP32[i2 >> 2] | 0) >>> 0 < i6 >>> 0) {
   HEAP32[i4 >> 2] = 0;
   HEAP32[i2 >> 2] = 0;
   _png_free(i9, i1);
   i3 = 12;
  }
 }
 do if ((i3 | 0) == 12) {
  i1 = _png_malloc_base(i9, i6) | 0;
  if (i1 | 0) {
   HEAP32[i4 >> 2] = i1;
   HEAP32[i9 + 792 >> 2] = i6;
   break;
  }
  _png_crc_finish(i9, i6) | 0;
  _png_chunk_benign_error(i9, 63690);
  STACKTOP = i10;
  return;
 } while (0);
 _png_read_data(i9, i1, i6);
 _png_calculate_crc(i9, i1, i6);
 if (_png_crc_finish(i9, 0) | 0) {
  STACKTOP = i10;
  return;
 }
 do if (!i6) i1 = 63755; else {
  i2 = 0;
  do {
   if (!(HEAP8[i1 + i2 >> 0] | 0)) break;
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < i6 >>> 0);
  if ((i2 + -1 | 0) >>> 0 > 78) i1 = 63755; else if ((i2 + 3 | 0) >>> 0 > i6 >>> 0) i1 = 63724; else if (!(HEAP8[i1 + (i2 + 1) >> 0] | 0)) {
   HEAP32[i7 >> 2] = -1;
   i1 = i2 + 2 | 0;
   if ((_png_decompress_chunk(i9, i6, i1, i7) | 0) == 1) {
    i6 = HEAP32[i4 >> 2] | 0;
    i7 = HEAP32[i7 >> 2] | 0;
    HEAP8[i6 + (i7 + i1) >> 0] = 0;
    HEAP32[i8 >> 2] = 0;
    HEAP32[i8 + 4 >> 2] = i6;
    HEAP32[i8 + 8 >> 2] = i6 + i2 + 2;
    HEAP32[i8 + 12 >> 2] = i7;
    HEAP32[i8 + 16 >> 2] = 0;
    HEAP32[i8 + 20 >> 2] = 0;
    HEAP32[i8 + 24 >> 2] = 0;
    if (_png_set_text_2(i9, i5, i8, 1) | 0) {
     i1 = 63704;
     break;
    }
    STACKTOP = i10;
    return;
   } else {
    i1 = HEAP32[i9 + 248 >> 2] | 0;
    if (i1 | 0) break;
    STACKTOP = i10;
    return;
   }
  } else i1 = 63913;
 } while (0);
 _png_chunk_benign_error(i9, i1);
 STACKTOP = i10;
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = (((Math_imul(i21 >>> 16 & 255, i12) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 & 255, i19) | 0) >>> 0) / 255 | 0);
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i21 & 255, i12) | 0) >>> 0) / 255 | 0 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_RGB888_Modulate_Scale(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i1 = HEAP32[i11 + 52 >> 2] | 0;
 i19 = HEAPU8[i11 + 60 >> 0] | 0;
 i20 = HEAPU8[i11 + 61 >> 0] | 0;
 i12 = HEAPU8[i11 + 62 >> 0] | 0;
 i13 = i11 + 28 | 0;
 i18 = HEAP32[i13 >> 2] | 0;
 i14 = (HEAP32[i11 + 8 >> 2] << 16 | 0) / (i18 | 0) | 0;
 i15 = i11 + 24 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i11 + 4 >> 2] << 16 | 0) / (i2 | 0) | 0;
 HEAP32[i13 >> 2] = i18 + -1;
 if (!i18) return;
 i17 = i11 + 20 | 0;
 i18 = i11 + 32 | 0;
 i9 = (i1 & 1 | 0) == 0;
 i10 = i11 + 12 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 i3 = 0;
 i4 = 0;
 i8 = i1;
 while (1) {
  if ((i3 | 0) > 65535) {
   i7 = ~i3;
   i7 = i3 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i3 = i3 + -65536 - (i7 & -65536) | 0;
   i4 = i4 + 1 + (i7 >>> 16) | 0;
  }
  i7 = i2 + -1 | 0;
  if (i2 | 0) if (i9) {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  } else {
   i2 = 0;
   i5 = 65536;
   i6 = -1;
   while (1) {
    if ((i5 | 0) > 65535) {
     i21 = ~i5;
     i21 = i5 + 65536 + ((i21 | 0) > -131072 ? i21 : -131072) | 0;
     i6 = i6 + 1 + (i21 >>> 16) | 0;
     i2 = (HEAP32[i11 >> 2] | 0) + (Math_imul(HEAP32[i10 >> 2] | 0, i4) | 0) + (i6 << 2) | 0;
     i5 = i5 + -65536 - (i21 & -65536) | 0;
    }
    i21 = HEAP32[i2 >> 2] | 0;
    HEAP32[i1 >> 2] = ((Math_imul(i21 & 255, i12) | 0) >>> 0) / 255 | 0 | (((Math_imul(i21 >>> 8 & 255, i20) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i21 >>> 16 & 255, i19) | 0) >>> 0) / 255 | 0) << 16;
    if (!i7) break; else {
     i1 = i1 + 4 | 0;
     i5 = i5 + i16 | 0;
     i7 = i7 + -1 | 0;
    }
   }
  }
  i1 = i8 + (HEAP32[i18 >> 2] | 0) | 0;
  i21 = HEAP32[i13 >> 2] | 0;
  HEAP32[i13 >> 2] = i21 + -1;
  if (!i21) break;
  i3 = i3 + i14 | 0;
  i8 = i1;
  i2 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i17 >> 2] = i1;
 return;
}

function _SDL_PrivateLoadButtonMapping(i6, i1, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i10 = i11 + 8 | 0;
 i9 = i11;
 i7 = i11 + 32 | 0;
 i8 = i11 + 12 | 0;
 i4 = i6;
 i2 = i4 + 16 | 0;
 do {
  HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
  i4 = i4 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i4 | 0) < (i2 | 0));
 HEAP32[i6 + 16 >> 2] = i3;
 HEAP32[i6 + 196 >> 2] = -1;
 HEAP32[i6 + 204 >> 2] = -1;
 HEAP32[i6 + 212 >> 2] = -1;
 HEAP32[i6 + 220 >> 2] = -1;
 HEAP32[i6 + 228 >> 2] = -1;
 HEAP32[i6 + 236 >> 2] = -1;
 HEAP32[i6 + 244 >> 2] = -1;
 HEAP32[i6 + 252 >> 2] = -1;
 HEAP32[i6 + 260 >> 2] = -1;
 HEAP32[i6 + 268 >> 2] = -1;
 HEAP32[i6 + 276 >> 2] = -1;
 HEAP32[i6 + 284 >> 2] = -1;
 HEAP32[i6 + 292 >> 2] = -1;
 HEAP32[i6 + 300 >> 2] = -1;
 _memset(i6 + 20 | 0, -1, 172) | 0;
 i1 = 0;
 do {
  HEAP32[i6 + 308 + (i1 << 2) >> 2] = -1;
  HEAP32[i6 + 500 + (i1 << 2) >> 2] = -1;
  HEAP32[i6 + 692 + (i1 << 2) >> 2] = -1;
  HEAP32[i6 + 884 + (i1 << 2) >> 2] = -1;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 48);
 _memset(i6 + 1076 | 0, -1, 256) | 0;
 _SDL_memset(i7, 0, 20) | 0;
 _SDL_memset(i8, 0, 20) | 0;
 L4 : do if (i5 | 0) {
  i1 = 0;
  i2 = 1;
  L5 : while (1) {
   i3 = HEAP8[i5 >> 0] | 0;
   L7 : do switch (i3 << 24 >> 24) {
   case 0:
    break L4;
   case 58:
    {
     i1 = 0;
     i2 = 0;
     break;
    }
   case 32:
    break;
   case 44:
    {
     _SDL_PrivateGameControllerParseButton(i7, i8, i6);
     _SDL_memset(i7, 0, 20) | 0;
     _SDL_memset(i8, 0, 20) | 0;
     i1 = 0;
     i2 = 1;
     break;
    }
   default:
    {
     i4 = i1 >>> 0 > 19;
     if (!i2) {
      if (i4) {
       i1 = 11;
       break L5;
      }
      HEAP8[i8 + i1 >> 0] = i3;
      i1 = i1 + 1 | 0;
      i2 = 0;
      break L7;
     } else {
      if (i4) {
       i1 = 8;
       break L5;
      }
      HEAP8[i7 + i1 >> 0] = i3;
      i1 = i1 + 1 | 0;
      break L7;
     }
    }
   } while (0);
   i5 = i5 + 1 | 0;
  }
  if ((i1 | 0) == 8) {
   HEAP32[i9 >> 2] = i7;
   _SDL_SetError(58575, i9) | 0;
   STACKTOP = i11;
   return;
  } else if ((i1 | 0) == 11) {
   HEAP32[i10 >> 2] = i8;
   _SDL_SetError(58601, i10) | 0;
   STACKTOP = i11;
   return;
  }
 } while (0);
 _SDL_PrivateGameControllerParseButton(i7, i8, i6);
 STACKTOP = i11;
 return;
}

function _SW_RenderDrawPoints(i9, i8, i10) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, f3 = f0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0;
 i7 = 0;
 i11 = STACKTOP;
 i5 = i9 + 320 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i1) {
  i2 = i6 + 4 | 0;
  i12 = HEAP32[i2 >> 2] | 0;
  HEAP32[i6 >> 2] = i12;
  i1 = i12;
  if (!i12) {
   i1 = _SDL_GetWindowSurface(HEAP32[i9 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i2 >> 2] = i1;
    HEAP32[i6 >> 2] = i1;
    i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
    if (!i2) break L1;
    _SDL_SetClipRect(i2, i9 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i9 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i9 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i6 >> 2] | 0;
  }
  if (!i1) {
   i12 = -1;
   STACKTOP = i11;
   return i12 | 0;
  }
 } while (0);
 i2 = i10 << 3;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
 i2 = HEAP32[i9 + 216 >> 2] | 0;
 if (!i2) if (!(HEAP32[i9 + 220 >> 2] | 0)) {
  if ((i10 | 0) > 0) {
   i2 = 0;
   do {
    i12 = i5 + (i2 << 3) | 0;
    i6 = i8 + (i2 << 3) | 0;
    HEAP32[i12 >> 2] = ~~Math_fround(HEAPF32[i6 >> 2]);
    HEAP32[i12 + 4 >> 2] = ~~Math_fround(HEAPF32[i6 + 4 >> 2]);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i10 | 0));
  }
 } else i7 = 14; else i7 = 14;
 if ((i7 | 0) == 14) if ((i10 | 0) > 0) {
  f3 = Math_fround(i2 | 0);
  f4 = Math_fround(HEAP32[i9 + 220 >> 2] | 0);
  i2 = 0;
  do {
   i12 = i5 + (i2 << 3) | 0;
   i7 = i8 + (i2 << 3) | 0;
   HEAP32[i12 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f3);
   HEAP32[i12 + 4 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i7 + 4 >> 2]) + f4);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i10 | 0));
 }
 i2 = HEAP32[i9 + 316 >> 2] | 0;
 if (!i2) {
  i12 = _SDL_DrawPoints(i1, i5, i10, _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, HEAP8[i9 + 312 >> 0] | 0, HEAP8[i9 + 313 >> 0] | 0, HEAP8[i9 + 314 >> 0] | 0, HEAP8[i9 + 315 >> 0] | 0) | 0) | 0;
  STACKTOP = i11;
  return i12 | 0;
 } else {
  i12 = _SDL_BlendPoints(i1, i5, i10, i2, HEAP8[i9 + 312 >> 0] | 0, HEAP8[i9 + 313 >> 0] | 0, HEAP8[i9 + 314 >> 0] | 0, HEAP8[i9 + 315 >> 0] | 0) | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 return 0;
}

function _SW_RenderDrawLines(i9, i8, i10) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, f3 = f0, f4 = f0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0;
 i7 = 0;
 i11 = STACKTOP;
 i5 = i9 + 320 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i1) {
  i2 = i6 + 4 | 0;
  i12 = HEAP32[i2 >> 2] | 0;
  HEAP32[i6 >> 2] = i12;
  i1 = i12;
  if (!i12) {
   i1 = _SDL_GetWindowSurface(HEAP32[i9 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i2 >> 2] = i1;
    HEAP32[i6 >> 2] = i1;
    i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
    if (!i2) break L1;
    _SDL_SetClipRect(i2, i9 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i9 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i9 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i6 >> 2] | 0;
  }
  if (!i1) {
   i12 = -1;
   STACKTOP = i11;
   return i12 | 0;
  }
 } while (0);
 i2 = i10 << 3;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i2 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i2 | 0) + 15 & -16 | 0);
 i2 = HEAP32[i9 + 216 >> 2] | 0;
 if (!i2) if (!(HEAP32[i9 + 220 >> 2] | 0)) {
  if ((i10 | 0) > 0) {
   i2 = 0;
   do {
    i12 = i5 + (i2 << 3) | 0;
    i6 = i8 + (i2 << 3) | 0;
    HEAP32[i12 >> 2] = ~~Math_fround(HEAPF32[i6 >> 2]);
    HEAP32[i12 + 4 >> 2] = ~~Math_fround(HEAPF32[i6 + 4 >> 2]);
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i10 | 0));
  }
 } else i7 = 14; else i7 = 14;
 if ((i7 | 0) == 14) if ((i10 | 0) > 0) {
  f3 = Math_fround(i2 | 0);
  f4 = Math_fround(HEAP32[i9 + 220 >> 2] | 0);
  i2 = 0;
  do {
   i12 = i5 + (i2 << 3) | 0;
   i7 = i8 + (i2 << 3) | 0;
   HEAP32[i12 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i7 >> 2]) + f3);
   HEAP32[i12 + 4 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i7 + 4 >> 2]) + f4);
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i10 | 0));
 }
 i2 = HEAP32[i9 + 316 >> 2] | 0;
 if (!i2) {
  i12 = _SDL_DrawLines(i1, i5, i10, _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, HEAP8[i9 + 312 >> 0] | 0, HEAP8[i9 + 313 >> 0] | 0, HEAP8[i9 + 314 >> 0] | 0, HEAP8[i9 + 315 >> 0] | 0) | 0) | 0;
  STACKTOP = i11;
  return i12 | 0;
 } else {
  i12 = _SDL_BlendLines(i1, i5, i10, i2, HEAP8[i9 + 312 >> 0] | 0, HEAP8[i9 + 313 >> 0] | 0, HEAP8[i9 + 314 >> 0] | 0, HEAP8[i9 + 315 >> 0] | 0) | 0;
  STACKTOP = i11;
  return i12 | 0;
 }
 return 0;
}

function _png_decompress_chunk(i11, i3, i9, i8) {
 i11 = i11 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i10 = i12;
 i2 = HEAP32[i11 + 760 >> 2] | 0;
 switch (i2 | 0) {
 case -1:
 case 0:
  {
   i2 = -1;
   i1 = i9 + 1 | 0;
   break;
  }
 default:
  {
   i1 = i9 + 1 | 0;
   if (i2 >>> 0 < i1 >>> 0) {
    _png_zstream_error(i11, -4);
    i11 = -4;
    STACKTOP = i12;
    return i11 | 0;
   }
  }
 }
 i1 = i2 - i1 | 0;
 if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) HEAP32[i8 >> 2] = i1;
 i5 = i11 + 376 | 0;
 i1 = _png_inflate_claim(i11, HEAP32[i5 >> 2] | 0) | 0;
 switch (i1 | 0) {
 case 0:
  {
   i7 = i3 - i9 | 0;
   HEAP32[i10 >> 2] = i7;
   i6 = i11 + 788 | 0;
   i1 = _png_inflate(i11, HEAP32[i5 >> 2] | 0, (HEAP32[i6 >> 2] | 0) + i9 | 0, i10, 0, i8) | 0;
   L12 : do switch (i1 | 0) {
   case 1:
    {
     if (_inflateReset(i11 + 224 | 0) | 0) {
      _png_zstream_error(i11, 1);
      i1 = -7;
      break L12;
     }
     i2 = HEAP32[i8 >> 2] | 0;
     i3 = i9 + 1 + i2 | 0;
     i4 = _png_malloc_base(i11, i3) | 0;
     if (!i4) {
      _png_zstream_error(i11, -4);
      i1 = -4;
      break L12;
     }
     i1 = _png_inflate(i11, HEAP32[i5 >> 2] | 0, (HEAP32[i6 >> 2] | 0) + i9 | 0, i10, i4 + i9 | 0, i8) | 0;
     switch (i1 | 0) {
     case 1:
      {
       if ((i2 | 0) == (HEAP32[i8 >> 2] | 0)) {
        HEAP8[i4 + (i2 + i9) >> 0] = 0;
        i2 = HEAP32[i6 >> 2] | 0;
        if (i9 | 0) _memcpy(i4 | 0, i2 | 0, i9 | 0) | 0;
        HEAP32[i6 >> 2] = i4;
        HEAP32[i11 + 792 >> 2] = i3;
        i1 = 1;
       } else {
        i2 = i4;
        i1 = -7;
       }
       break;
      }
     case 0:
      {
       i2 = i4;
       i1 = -7;
       break;
      }
     default:
      i2 = i4;
     }
     _png_free(i11, i2);
     if (!((i1 | 0) != 1 ? 1 : (i7 | 0) == (HEAP32[i10 >> 2] | 0))) {
      _png_chunk_benign_error(i11, 63852);
      i1 = 1;
     }
     break;
    }
   case 0:
    {
     i1 = -7;
     break;
    }
   default:
    {}
   } while (0);
   HEAP32[i11 + 220 >> 2] = 0;
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  }
 case 1:
  {
   i11 = -7;
   STACKTOP = i12;
   return i11 | 0;
  }
 default:
  {
   i11 = i1;
   STACKTOP = i12;
   return i11 | 0;
  }
 }
 return 0;
}

function _Emscripten_HandleTouch(i2, i10, i1) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, f5 = f0, f6 = f0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i13 = i16 + 8 | 0;
 i14 = i16;
 if ((_SDL_AddTouch(1, 0, 89710) | 0) < 0) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 _emscripten_get_element_css_size(0, i13 | 0, i14 | 0) | 0;
 if ((HEAP32[i10 >> 2] | 0) <= 0) {
  i15 = 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i15 = (i2 | 0) == 22;
 i11 = i1 + 28 | 0;
 i12 = i1 + 32 | 0;
 i9 = i1 + 4 | 0;
 i8 = (i2 | 0) == 24;
 i7 = 0;
 i1 = 0;
 do {
  do if (HEAP32[i10 + 20 + (i7 * 52 | 0) + 28 >> 2] | 0) {
   i2 = i10 + 20 + (i7 * 52 | 0) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   i4 = ((i3 | 0) < 0) << 31 >> 31;
   f5 = Math_fround(+(HEAP32[i2 + 44 >> 2] | 0) / +HEAPF64[i13 >> 3]);
   f6 = Math_fround(+(HEAP32[i2 + 48 >> 2] | 0) / +HEAPF64[i14 >> 3]);
   i2 = HEAP32[i11 >> 2] | 0;
   if (i15) {
    if (!i2) {
     HEAP32[i11 >> 2] = 1;
     i2 = i12;
     HEAP32[i2 >> 2] = i3;
     HEAP32[i2 + 4 >> 2] = i4;
     _SDL_SendMouseMotion(HEAP32[i9 >> 2] | 0, -1, 0, ~~f5, ~~f6) | 0;
     _SDL_SendMouseButton(HEAP32[i9 >> 2] | 0, -1, 1, 1) | 0;
    }
    _SDL_SendTouch(1, 0, i3, i4, 1, f5, f6, Math_fround(1.0)) | 0;
    if (i1 | 0) break;
    i1 = (_SDL_EventState(1792, -1) | 0) << 24 >> 24 == 1 & 1;
    break;
   }
   i2 = (i2 | 0) != 0;
   if (i8) {
    if (i2) {
     i2 = i12;
     if ((HEAP32[i2 >> 2] | 0) == (i3 | 0) ? (HEAP32[i2 + 4 >> 2] | 0) == (i4 | 0) : 0) _SDL_SendMouseMotion(HEAP32[i9 >> 2] | 0, -1, 0, ~~f5, ~~f6) | 0;
    }
    _SDL_SendTouchMotion(1, 0, i3, i4, f5, f6, Math_fround(1.0)) | 0;
    if (i1 | 0) break;
    i1 = (_SDL_EventState(1794, -1) | 0) << 24 >> 24 == 1 & 1;
    break;
   } else {
    if (i2) {
     i2 = i12;
     if ((HEAP32[i2 >> 2] | 0) == (i3 | 0) ? (HEAP32[i2 + 4 >> 2] | 0) == (i4 | 0) : 0) {
      _SDL_SendMouseButton(HEAP32[i9 >> 2] | 0, -1, 0, 1) | 0;
      HEAP32[i11 >> 2] = 0;
     }
    }
    _SDL_SendTouch(1, 0, i3, i4, 0, f5, f6, Math_fround(1.0)) | 0;
    if (i1 | 0) break;
    i1 = (_SDL_EventState(1793, -1) | 0) << 24 >> 24 == 1 & 1;
    break;
   }
  } while (0);
  i7 = i7 + 1 | 0;
 } while ((i7 | 0) < (HEAP32[i10 >> 2] | 0));
 STACKTOP = i16;
 return i1 | 0;
}

function __ZN15CanvasComponentD2Ev(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = 0;
 HEAP32[i6 >> 2] = 2892;
 i13 = i6 + 60 | 0;
 i9 = i6 + 80 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if (i1 | 0) {
  i3 = i6 + 76 | 0;
  i4 = i6 + 64 | 0;
  i5 = i6 + 68 | 0;
  do {
   i10 = i1 + -1 + (HEAP32[i3 >> 2] | 0) | 0;
   _SDL_DestroyTexture(HEAP32[(HEAP32[(HEAP32[i4 >> 2] | 0) + (i10 >>> 10 << 2) >> 2] | 0) + ((i10 & 1023) << 2) >> 2] | 0);
   i10 = HEAP32[i9 >> 2] | 0;
   i1 = i10 + -1 | 0;
   HEAP32[i9 >> 2] = i1;
   i2 = HEAP32[i5 >> 2] | 0;
   i11 = i2 - (HEAP32[i4 >> 2] | 0) | 0;
   if ((1 - i10 - (HEAP32[i3 >> 2] | 0) + ((i11 | 0) == 0 ? 0 : (i11 << 8) + -1 | 0) | 0) >>> 0 > 2047) {
    __ZdlPv(HEAP32[i2 + -4 >> 2] | 0);
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -4;
    i1 = HEAP32[i9 >> 2] | 0;
   }
  } while ((i1 | 0) != 0);
 }
 i1 = HEAP32[i6 + 56 >> 2] | 0;
 if (i1 | 0) _SDL_DestroyTexture(i1);
 i10 = i6 + 64 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i8 = i6 + 76 | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i4 = i1 + (i2 >>> 10 << 2) | 0;
 i11 = i6 + 68 | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i5 = i3;
 i6 = i1;
 if ((i3 | 0) == (i1 | 0)) {
  i7 = 0;
  i2 = 0;
 } else {
  i7 = (HEAP32[i9 >> 2] | 0) + i2 | 0;
  i7 = (HEAP32[i1 + (i7 >>> 10 << 2) >> 2] | 0) + ((i7 & 1023) << 2) | 0;
  i2 = (HEAP32[i4 >> 2] | 0) + ((i2 & 1023) << 2) | 0;
 }
 L15 : while (1) {
  do {
   if ((i7 | 0) == (i2 | 0)) break L15;
   i2 = i2 + 4 | 0;
  } while ((i2 - (HEAP32[i4 >> 2] | 0) | 0) != 4096);
  i2 = i4 + 4 | 0;
  i4 = i2;
  i2 = HEAP32[i2 >> 2] | 0;
 }
 HEAP32[i9 >> 2] = 0;
 i2 = i5 - i6 >> 2;
 if (i2 >>> 0 > 2) do {
  __ZdlPv(HEAP32[i1 >> 2] | 0);
  i1 = (HEAP32[i10 >> 2] | 0) + 4 | 0;
  HEAP32[i10 >> 2] = i1;
  i3 = HEAP32[i11 >> 2] | 0;
  i2 = i3 - i1 >> 2;
 } while (i2 >>> 0 > 2);
 switch (i2 | 0) {
 case 1:
  {
   i2 = 512;
   i12 = 20;
   break;
  }
 case 2:
  {
   i2 = 1024;
   i12 = 20;
   break;
  }
 default:
  {}
 }
 if ((i12 | 0) == 20) HEAP32[i8 >> 2] = i2;
 if ((i1 | 0) != (i3 | 0)) {
  do {
   __ZdlPv(HEAP32[i1 >> 2] | 0);
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i3 | 0));
  i1 = HEAP32[i10 >> 2] | 0;
  i2 = HEAP32[i11 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i11 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 }
 i1 = HEAP32[i13 >> 2] | 0;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function _SDL_SetRelativeMouseMode(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = 0;
 i4 = _SDL_GetKeyboardFocus() | 0;
 if ((HEAP32[19510] | 0) == (i5 | 0)) return 0;
 i7 = (i5 | 0) != 0;
 do if (i7 & (i4 | 0) != 0) {
  i1 = HEAP32[19502] | 0;
  do if ((i1 | 0) != (i4 | 0)) {
   if (i1 | 0) _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
   HEAP32[19502] = i4;
   _SDL_SendWindowEvent(i4, 10, 0, 0) | 0;
   i1 = (HEAP32[19502] | 0) == 0 ? HEAP32[19515] | 0 : HEAP32[19516] | 0;
   i2 = HEAP32[19493] | 0;
   i3 = (i2 | 0) == 0;
   if ((i1 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
    if (i3) break;
    FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
    break;
   } else {
    if (i3) break;
    FUNCTION_TABLE_ii[i2 & 255](0) | 0;
    break;
   }
  } while (0);
  i2 = (HEAP32[i4 + 24 >> 2] | 0) / 2 | 0;
  i3 = (HEAP32[i4 + 28 >> 2] | 0) / 2 | 0;
  i1 = HEAP32[19496] | 0;
  if (i1 | 0) {
   FUNCTION_TABLE_viii[i1 & 63](i4, i2, i3);
   break;
  }
  i1 = HEAP32[19501] | 0;
  if (_SDL_UpdateMouseFocus(i4, i2, i3) | 0) _SDL_PrivateSendMouseMotion(i4, i1, 0, i2, i3) | 0;
 } while (0);
 do if (i7 | (HEAP32[19511] | 0) == 0) {
  if (i7) {
   if (!(HEAP32[19498] | 0)) {
    i1 = 1;
    i6 = 20;
    break;
   }
   if (_SDL_GetHintBoolean(60275, 0) | 0) {
    i1 = 1;
    i6 = 20;
    break;
   }
  }
  if (i7 & (FUNCTION_TABLE_ii[HEAP32[77992 >> 2] & 255](i5) | 0) < 0) {
   i1 = 1;
   i6 = 20;
  }
 } else {
  i1 = 0;
  i6 = 20;
 } while (0);
 if ((i6 | 0) == 20) HEAP32[19511] = i1;
 HEAP32[19510] = i5;
 i1 = HEAP32[19502] | 0;
 do if (i1 | 0) {
  _SDL_UpdateWindowGrab(i1);
  if (!i7) {
   i2 = HEAP32[19502] | 0;
   i3 = HEAP32[19503] | 0;
   i4 = HEAP32[19504] | 0;
   if (i2 | 0) {
    i1 = HEAP32[19496] | 0;
    if (i1 | 0) {
     FUNCTION_TABLE_viii[i1 & 63](i2, i3, i4);
     break;
    }
    i1 = HEAP32[19501] | 0;
    if (_SDL_UpdateMouseFocus(i2, i3, i4) | 0) _SDL_PrivateSendMouseMotion(i2, i1, 0, i3, i4) | 0;
   }
  }
 } while (0);
 _SDL_FlushEvent(1024);
 i1 = (HEAP32[19502] | 0) == 0 ? HEAP32[19515] | 0 : HEAP32[19516] | 0;
 i2 = HEAP32[19493] | 0;
 i3 = (i2 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
  if (i3) return 0;
  FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
  return 0;
 } else {
  if (i3) return 0;
  FUNCTION_TABLE_ii[i2 & 255](0) | 0;
  return 0;
 }
 return 0;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i14, i6, i15, i2, i3, i11) {
 i14 = i14 | 0;
 i6 = i6 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i16 + 12 | 0;
 i13 = i16;
 i1 = HEAP32[i14 >> 2] | 0;
 L1 : do if (!i1) i1 = 0; else {
  i17 = i6;
  i4 = i2 - i17 >> 2;
  i7 = i3 + 12 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i4 = (i5 | 0) > (i4 | 0) ? i5 - i4 | 0 : 0;
  i5 = i15;
  i17 = i5 - i17 | 0;
  i3 = i17 >> 2;
  if ((i17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, i6, i3) | 0) != (i3 | 0)) {
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  do if ((i4 | 0) > 0) {
   HEAP32[i13 >> 2] = 0;
   HEAP32[i13 + 4 >> 2] = 0;
   HEAP32[i13 + 8 >> 2] = 0;
   if (i4 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i13);
   do if (i4 >>> 0 < 2) {
    i9 = i13 + 8 + 3 | 0;
    HEAP8[i9 >> 0] = i4;
    i8 = i13;
    i10 = i13;
   } else {
    i3 = i4 + 4 & -4;
    if (i3 >>> 0 > 1073741823) _abort(); else {
     i8 = __Znwj(i3 << 2) | 0;
     HEAP32[i13 >> 2] = i8;
     i9 = i13 + 8 | 0;
     HEAP32[i9 >> 2] = i3 | -2147483648;
     HEAP32[i13 + 4 >> 2] = i4;
     i9 = i9 + 3 | 0;
     i10 = i13;
     break;
    }
   } while (0);
   __ZNSt3__211char_traitsIwE6assignEPwjw(i8, i4, i11) | 0;
   HEAP32[i12 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw(i8 + (i4 << 2) | 0, i12);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, (HEAP8[i9 >> 0] | 0) < 0 ? HEAP32[i13 >> 2] | 0 : i10, i4) | 0) == (i4 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
    break;
   } else {
    HEAP32[i14 >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i13);
    i1 = 0;
    break L1;
   }
  } while (0);
  i17 = i2 - i5 | 0;
  i2 = i17 >> 2;
  if ((i17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 63](i1, i15, i2) | 0) != (i2 | 0)) {
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  HEAP32[i7 >> 2] = 0;
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i7, i8, i3, i2, i9, i10, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = 0;
 HEAP32[i8 >> 2] = i1;
 HEAP32[i9 >> 2] = i3;
 i6 = i2;
 if (!(i4 & 2)) i5 = 4; else if ((i6 - i3 | 0) < 3) i1 = 1; else {
  HEAP32[i9 >> 2] = i3 + 1;
  HEAP8[i3 >> 0] = -17;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i9 >> 2] | 0;
  HEAP32[i9 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 }
 L4 : do if ((i5 | 0) == 4) {
  i1 = HEAP32[i8 >> 2] | 0;
  while (1) {
   if (i1 >>> 0 >= i7 >>> 0) {
    i1 = 0;
    break L4;
   }
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3 >>> 0 > i10 >>> 0 | (i3 & -2048 | 0) == 55296) {
    i1 = 2;
    break L4;
   }
   do if (i3 >>> 0 < 128) {
    i1 = HEAP32[i9 >> 2] | 0;
    if ((i6 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i9 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if (i3 >>> 0 < 2048) {
     i1 = HEAP32[i9 >> 2] | 0;
     if ((i6 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 6 | 192;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
    i1 = HEAP32[i9 >> 2] | 0;
    i2 = i6 - i1 | 0;
    if (i3 >>> 0 < 65536) {
     if ((i2 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 12 | 224;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    } else {
     if ((i2 | 0) < 4) {
      i1 = 1;
      break L4;
     }
     HEAP32[i9 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 18 | 240;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 12 & 63 | 128;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
   } while (0);
   i1 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
   HEAP32[i8 >> 2] = i1;
  }
 } while (0);
 return i1 | 0;
}

function _SDL_BlendPoint(i6, i7, i10, i11, i1, i2, i3, i12) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 var i4 = 0, i5 = 0, i8 = 0, i9 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!i6) {
  i12 = _SDL_SetError(48302, i13) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i8 = HEAP32[i6 + 4 >> 2] | 0;
 i9 = HEAP8[i8 + 8 >> 0] | 0;
 if ((i9 & 255) < 8) {
  i12 = _SDL_SetError(48147, i13 + 8 | 0) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = HEAP32[i6 + 36 >> 2] | 0;
 if ((i4 | 0) > (i7 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i5 = HEAP32[i6 + 40 >> 2] | 0;
 if ((i5 | 0) > (i10 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (((HEAP32[i6 + 44 >> 2] | 0) + i4 | 0) <= (i7 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if (((HEAP32[i6 + 48 >> 2] | 0) + i5 | 0) <= (i10 | 0)) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 if ((i11 + -1 | 0) >>> 0 < 2) {
  i5 = i12 & 255;
  i3 = (((Math_imul(i5, i3 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i2 = (((Math_imul(i5, i2 & 255) | 0) >>> 0) / 255 | 0) & 255;
  i1 = (((Math_imul(i5, i1 & 255) | 0) >>> 0) / 255 | 0) & 255;
 }
 switch (i9 << 24 >> 24) {
 case 15:
  {
   if ((HEAP32[i8 + 12 >> 2] | 0) == 31744) {
    _SDL_BlendPoint_RGB555(i6, i7, i10, i11, i1, i2, i3, i12) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   break;
  }
 case 16:
  {
   if ((HEAP32[i8 + 12 >> 2] | 0) == 63488) {
    _SDL_BlendPoint_RGB565(i6, i7, i10, i11, i1, i2, i3, i12) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   break;
  }
 case 32:
  {
   if ((HEAP32[i8 + 12 >> 2] | 0) == 16711680) if (!(HEAP32[i8 + 24 >> 2] | 0)) {
    _SDL_BlendPoint_RGB888(i6, i7, i10, i11, i1, i2, i3, i12) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   } else {
    _SDL_BlendPoint_ARGB8888(i6, i7, i10, i11, i1, i2, i3, i12) | 0;
    i12 = 0;
    STACKTOP = i13;
    return i12 | 0;
   }
   break;
  }
 default:
  {}
 }
 if (!(HEAP32[i8 + 24 >> 2] | 0)) {
  i12 = _SDL_BlendPoint_RGB(i6, i7, i10, i11, i1, i2, i3, i12) | 0;
  STACKTOP = i13;
  return i12 | 0;
 } else {
  i12 = _SDL_BlendPoint_RGBA(i6, i7, i10, i11, i1, i2, i3, i12) | 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 return 0;
}

function _SDL_AddHintCallback(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0;
 i4 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i8 + 8 | 0;
 i1 = i8;
 if (i5 | 0) if (HEAP8[i5 >> 0] | 0) {
  if (!i6) {
   HEAP32[i2 >> 2] = 59009;
   _SDL_SetError(59509, i2) | 0;
   STACKTOP = i8;
   return;
  }
  i1 = HEAP32[19490] | 0;
  L8 : do if (i1 | 0) {
   while (1) {
    if (!(_SDL_strcmp(i5, HEAP32[i1 >> 2] | 0) | 0)) break;
    i1 = HEAP32[i1 + 16 >> 2] | 0;
    if (!i1) break L8;
   }
   i3 = i1 + 12 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 | 0) {
    i2 = 0;
    while (1) {
     if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) if ((HEAP32[i1 + 4 >> 2] | 0) == (i7 | 0)) break;
     i2 = HEAP32[i1 + 8 >> 2] | 0;
     if (!i2) break L8; else {
      i9 = i1;
      i1 = i2;
      i2 = i9;
     }
    }
    HEAP32[(i2 | 0 ? i2 + 8 | 0 : i3) >> 2] = HEAP32[i1 + 8 >> 2];
    _SDL_free(i1);
   }
  } while (0);
  i2 = _SDL_malloc(12) | 0;
  if (!i2) {
   _SDL_Error(0) | 0;
   STACKTOP = i8;
   return;
  }
  HEAP32[i2 >> 2] = i6;
  HEAP32[i2 + 4 >> 2] = i7;
  i1 = HEAP32[19490] | 0;
  L24 : do if (!i1) i4 = 19; else while (1) {
   if (!(_SDL_strcmp(i5, HEAP32[i1 >> 2] | 0) | 0)) break L24;
   i1 = HEAP32[i1 + 16 >> 2] | 0;
   if (!i1) {
    i4 = 19;
    break;
   }
  } while (0);
  do if ((i4 | 0) == 19) {
   i1 = _SDL_malloc(20) | 0;
   if (i1 | 0) {
    HEAP32[i1 >> 2] = _SDL_strdup(i5) | 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i1 + 12 >> 2] = 0;
    HEAP32[i1 + 16 >> 2] = HEAP32[19490];
    HEAP32[19490] = i1;
    break;
   }
   _SDL_Error(0) | 0;
   _SDL_free(i2);
   STACKTOP = i8;
   return;
  } while (0);
  i1 = i1 + 12 | 0;
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i2;
  i1 = _SDL_getenv(i5) | 0;
  i2 = HEAP32[19490] | 0;
  L35 : do if (i2) {
   while (1) {
    if (!(_SDL_strcmp(i5, HEAP32[i2 >> 2] | 0) | 0)) break;
    i2 = HEAP32[i2 + 16 >> 2] | 0;
    if (!i2) break L35;
   }
   if (i1 | 0) if ((HEAP32[i2 + 8 >> 2] | 0) != 2) break;
   i1 = HEAP32[i2 + 4 >> 2] | 0;
  } while (0);
  FUNCTION_TABLE_viiii[i6 & 63](i7, i5, i1, i1);
  STACKTOP = i8;
  return;
 }
 HEAP32[i1 >> 2] = 59004;
 _SDL_SetError(59509, i1) | 0;
 STACKTOP = i8;
 return;
}

function _pop_arg(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i2 >>> 0 <= 20) do switch (i2 | 0) {
 case 9:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   HEAP32[i1 >> 2] = i2;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = ((i2 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 4;
   i4 = i1;
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i2 = i4;
   i5 = HEAP32[i2 >> 2] | 0;
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   HEAP32[i3 >> 2] = i4 + 8;
   i4 = i1;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i2;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i1;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i3 >> 2] = i5 + 4;
   i5 = i1;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i3 >> 2] = i5 + 8;
   HEAPF64[i1 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i3 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i3 >> 2] = i5 + 8;
   HEAPF64[i1 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _Color16DitherYV12Mod2X(i18, i19, i5, i2, i3, i4, i6, i20, i1) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i16 = (i1 | 0) / 2 | 0;
 i14 = i16 + i20 | 0;
 i15 = (i20 | 0) / 2 | 0;
 i16 = (i14 * 3 | 0) + i16 | 0;
 if ((i6 + 1 | 0) >>> 0 < 3 | (i20 + 1 | 0) >>> 0 < 3) return;
 i17 = i15 << 1;
 i13 = i4;
 i12 = i4 + (i14 << 1 << 2) | 0;
 i11 = (i6 | 0) / 2 | 0;
 while (1) {
  i11 = i11 + -1 | 0;
  i4 = i2;
  i2 = i2 + i15 | 0;
  i1 = i15;
  i6 = i3;
  i7 = i13;
  i8 = i5 + i20 | 0;
  i9 = i12;
  i10 = i5;
  i5 = i5 + i17 + i20 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i25 = HEAPU8[i4 >> 0] | 0;
   i24 = (HEAP32[i18 + (i25 << 2) >> 2] | 0) + 256 | 0;
   i23 = HEAPU8[i6 >> 0] | 0;
   i25 = (HEAP32[i18 + ((i25 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i18 + ((i23 | 512) << 2) >> 2] | 0) | 0;
   i23 = (HEAP32[i18 + ((i23 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i21 = HEAPU8[i10 >> 0] | 0;
   i21 = HEAP32[i19 + (i25 + i21 << 2) >> 2] | HEAP32[i19 + (i24 + i21 << 2) >> 2] | HEAP32[i19 + (i23 + i21 << 2) >> 2];
   HEAP32[i7 + (i14 << 2) >> 2] = i21;
   HEAP32[i7 >> 2] = i21;
   i21 = i7 + 4 | 0;
   i22 = HEAPU8[i10 + 1 >> 0] | 0;
   i22 = HEAP32[i19 + (i25 + i22 << 2) >> 2] | HEAP32[i19 + (i24 + i22 << 2) >> 2] | HEAP32[i19 + (i23 + i22 << 2) >> 2];
   HEAP32[i21 + (i14 << 2) >> 2] = i22;
   HEAP32[i21 >> 2] = i22;
   i21 = HEAPU8[i8 >> 0] | 0;
   i21 = HEAP32[i19 + (i25 + i21 << 2) >> 2] | HEAP32[i19 + (i24 + i21 << 2) >> 2] | HEAP32[i19 + (i23 + i21 << 2) >> 2];
   HEAP32[i9 + (i14 << 2) >> 2] = i21;
   HEAP32[i9 >> 2] = i21;
   i21 = i9 + 4 | 0;
   i22 = HEAPU8[i8 + 1 >> 0] | 0;
   i22 = HEAP32[i19 + (i25 + i22 << 2) >> 2] | HEAP32[i19 + (i24 + i22 << 2) >> 2] | HEAP32[i19 + (i23 + i22 << 2) >> 2];
   HEAP32[i21 + (i14 << 2) >> 2] = i22;
   HEAP32[i21 >> 2] = i22;
   if (!i1) break; else {
    i4 = i4 + 1 | 0;
    i6 = i6 + 1 | 0;
    i7 = i7 + 8 | 0;
    i8 = i8 + 2 | 0;
    i9 = i9 + 8 | 0;
    i10 = i10 + 2 | 0;
   }
  }
  if (!i11) break; else {
   i3 = i3 + i15 | 0;
   i13 = i13 + (i17 << 2) + (i16 << 2) | 0;
   i12 = i12 + (i17 << 2) + (i16 << 2) | 0;
  }
 }
 return;
}

function __ZN18KeyboardController6updateEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, f3 = f0, i4 = 0;
 i2 = 0;
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!(HEAP8[i1 + (_SDL_GetScancodeFromKey(115) | 0) >> 0] | 0)) {
  i1 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP8[i1 + (_SDL_GetScancodeFromKey(119) | 0) >> 0] | 0)) {
   HEAPF32[(HEAP32[i5 + 16 >> 2] | 0) + 28 >> 2] = Math_fround(0.0);
   __ZN15SpriteComponent4playEPKc(HEAP32[i5 + 20 >> 2] | 0, 39243);
   HEAP8[i5 + 8 >> 0] = 0;
  }
 }
 i1 = HEAP32[i4 >> 2] | 0;
 if (!(HEAP8[i1 + (_SDL_GetScancodeFromKey(100) | 0) >> 0] | 0)) {
  i1 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP8[i1 + (_SDL_GetScancodeFromKey(97) | 0) >> 0] | 0)) {
   HEAPF32[(HEAP32[i5 + 16 >> 2] | 0) + 24 >> 2] = Math_fround(0.0);
   __ZN15SpriteComponent4playEPKc(HEAP32[i5 + 20 >> 2] | 0, 39243);
   HEAP8[i5 + 8 >> 0] = 0;
  }
 }
 i1 = HEAP32[i4 >> 2] | 0;
 if (!(HEAP8[i1 + (_SDL_GetScancodeFromKey(115) | 0) >> 0] | 0)) {
  i1 = HEAP32[i4 >> 2] | 0;
  if (HEAP8[i1 + (_SDL_GetScancodeFromKey(119) | 0) >> 0] | 0) {
   i1 = i5 + 8 | 0;
   if (!(HEAP8[i1 >> 0] | 0)) {
    __ZN15SpriteComponent4playEPKc(HEAP32[i5 + 20 >> 2] | 0, 39248);
    f3 = Math_fround(-1.0);
    i2 = 13;
   } else {
    f3 = Math_fround(-1.0);
    i2 = 13;
   }
  }
 } else {
  i1 = i5 + 8 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   __ZN15SpriteComponent4playEPKc(HEAP32[i5 + 20 >> 2] | 0, 39248);
   f3 = Math_fround(1.0);
   i2 = 13;
  } else {
   f3 = Math_fround(1.0);
   i2 = 13;
  }
 }
 if ((i2 | 0) == 13) {
  HEAPF32[(HEAP32[i5 + 16 >> 2] | 0) + 28 >> 2] = f3;
  HEAP8[i1 >> 0] = 1;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 if (!(HEAP8[i2 + (_SDL_GetScancodeFromKey(100) | 0) >> 0] | 0)) {
  i4 = HEAP32[i4 >> 2] | 0;
  if (!(HEAP8[i4 + (_SDL_GetScancodeFromKey(97) | 0) >> 0] | 0)) return;
  i1 = i5 + 8 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   __ZN15SpriteComponent4playEPKc(HEAP32[i5 + 20 >> 2] | 0, 39248);
   i2 = 0;
   f3 = Math_fround(-1.0);
  } else {
   i2 = 0;
   f3 = Math_fround(-1.0);
  }
 } else {
  i1 = i5 + 8 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) {
   __ZN15SpriteComponent4playEPKc(HEAP32[i5 + 20 >> 2] | 0, 39248);
   i2 = 1;
   f3 = Math_fround(1.0);
  } else {
   i2 = 1;
   f3 = Math_fround(1.0);
  }
 }
 HEAP32[(HEAP32[i5 + 20 >> 2] | 0) + 84 >> 2] = i2;
 HEAPF32[(HEAP32[i5 + 16 >> 2] | 0) + 24 >> 2] = f3;
 HEAP8[i1 >> 0] = 1;
 return;
}

function _SDL_EGL_CreateContext(i1, i10) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i13 = i14 + 24 | 0;
 i11 = i14 + 16 | 0;
 i9 = i14 + 8 | 0;
 i6 = i14;
 i8 = i14 + 28 | 0;
 i2 = HEAP32[i1 + 368 >> 2] | 0;
 i3 = HEAP32[i1 + 356 >> 2] | 0;
 i4 = HEAP32[i1 + 360 >> 2] | 0;
 i5 = (i2 | 0) == 4;
 i12 = i1 + 676 | 0;
 if (!(HEAP32[i12 >> 2] | 0)) {
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (!(HEAP32[i1 + 372 >> 2] | 0)) i7 = 0; else i7 = _SDL_GL_GetCurrentContext() | 0;
 if ((i3 | 0) < 3 | i5 & (i4 | 0) == 0) if ((i2 | 4 | 0) == 4 & (HEAP32[i1 + 364 >> 2] | 0) == 0) {
  if (i5) {
   HEAP32[i8 + 4 >> 2] = (i3 | 0) > 1 ? i3 : 1;
   HEAP32[i8 + 8 >> 2] = 12344;
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] & 255](12448) | 0;
   i1 = 12440;
  } else {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 84 >> 2] & 255](12450) | 0;
   i1 = 12344;
  }
  HEAP32[i8 >> 2] = i1;
  i1 = HEAP32[i12 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 40 >> 2] & 31](HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, i7, i8) | 0;
  if (!i1) {
   _SDL_SetError(48786, i9) | 0;
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  i2 = HEAP32[i12 >> 2] | 0;
  HEAP32[i2 + 16 >> 2] = 0;
  do if (!i2) i2 = 48660; else {
   i3 = HEAP32[i2 + 56 >> 2] | 0;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   if (!i10) {
    FUNCTION_TABLE_iiiii[i3 & 31](i2, 0, 0, 0) | 0;
    i13 = i1;
    STACKTOP = i14;
    return i13 | 0;
   } else {
    if (!(FUNCTION_TABLE_iiiii[i3 & 31](i2, i10, i10, i1) | 0)) {
     i2 = 48683;
     break;
    }
    STACKTOP = i14;
    return i1 | 0;
   }
  } while (0);
  if ((_SDL_SetError(i2, i11) | 0) >= 0) {
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  i2 = HEAP32[i12 >> 2] | 0;
  if (i2 | 0) {
   FUNCTION_TABLE_iiiii[HEAP32[i2 + 56 >> 2] & 31](HEAP32[i2 + 8 >> 2] | 0, 0, 0, 0) | 0;
   i12 = HEAP32[i12 >> 2] | 0;
   FUNCTION_TABLE_iii[HEAP32[i12 + 44 >> 2] & 63](HEAP32[i12 + 8 >> 2] | 0, i1) | 0;
  }
  _SDL_SetError(48815, i13) | 0;
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 _SDL_SetError(48718, i6) | 0;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _png_handle_tRNS(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i6 = i7 + 8 | 0;
 i2 = i7;
 i3 = HEAP32[i4 + 208 >> 2] | 0;
 if (!(i3 & 1)) _png_chunk_error(i4, 63643);
 if (i3 & 4 | 0) {
  _png_crc_finish(i4, i1) | 0;
  _png_chunk_benign_error(i4, 64026);
  STACKTOP = i7;
  return;
 }
 if (i5 | 0) if (HEAP32[i5 + 8 >> 2] & 16 | 0) {
  _png_crc_finish(i4, i1) | 0;
  _png_chunk_benign_error(i4, 63980);
  STACKTOP = i7;
  return;
 }
 L13 : do switch (HEAP8[i4 + 435 >> 0] | 0) {
 case 0:
  {
   if ((i1 | 0) == 2) {
    _png_read_data(i4, i2, 2);
    _png_calculate_crc(i4, i2, 2);
    i1 = i4 + 428 | 0;
    HEAP16[i1 >> 1] = 1;
    HEAP16[i4 + 540 >> 1] = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
    break L13;
   }
   _png_crc_finish(i4, i1) | 0;
   _png_chunk_benign_error(i4, 63990);
   STACKTOP = i7;
   return;
  }
 case 2:
  {
   if ((i1 | 0) == 6) {
    _png_read_data(i4, i2, 6);
    _png_calculate_crc(i4, i2, 6);
    i1 = i4 + 428 | 0;
    HEAP16[i1 >> 1] = 1;
    HEAP16[i4 + 534 >> 1] = HEAPU8[i2 >> 0] << 8 | HEAPU8[i2 + 1 >> 0];
    HEAP16[i4 + 536 >> 1] = HEAPU8[i2 + 2 >> 0] << 8 | HEAPU8[i2 + 3 >> 0];
    HEAP16[i4 + 538 >> 1] = HEAPU8[i2 + 4 >> 0] << 8 | HEAPU8[i2 + 5 >> 0];
    break L13;
   }
   _png_crc_finish(i4, i1) | 0;
   _png_chunk_benign_error(i4, 63990);
   STACKTOP = i7;
   return;
  }
 case 3:
  {
   if (!(i3 & 2)) {
    _png_crc_finish(i4, i1) | 0;
    _png_chunk_benign_error(i4, 64026);
    STACKTOP = i7;
    return;
   }
   if (!(i1 >>> 0 > 256 ? 1 : (i1 + -1 | 0) >>> 0 >= (HEAPU16[i4 + 420 >> 1] | 0) >>> 0)) {
    _png_read_data(i4, i6, i1);
    _png_calculate_crc(i4, i6, i1);
    i3 = i4 + 428 | 0;
    HEAP16[i3 >> 1] = i1;
    i1 = i3;
    break L13;
   }
   _png_crc_finish(i4, i1) | 0;
   _png_chunk_benign_error(i4, 63990);
   STACKTOP = i7;
   return;
  }
 default:
  {
   _png_crc_finish(i4, i1) | 0;
   _png_chunk_benign_error(i4, 64631);
   STACKTOP = i7;
   return;
  }
 } while (0);
 if (!(_png_crc_finish(i4, 0) | 0)) {
  _png_set_tRNS(i4, i5, i6, HEAPU16[i1 >> 1] | 0, i4 + 532 | 0);
  STACKTOP = i7;
  return;
 } else {
  HEAP16[i1 >> 1] = 0;
  STACKTOP = i7;
  return;
 }
}

function __ZN15CanvasComponent9newCanvasEv(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i6 = HEAP32[i7 + 8 >> 2] | 0;
 i6 = _SDL_CreateTexture(HEAP32[19464] | 0, 373694468, 2, HEAP32[i6 + 36 >> 2] | 0, HEAP32[i6 + 32 >> 2] | 0) | 0;
 _SDL_SetTextureBlendMode(i6, 1) | 0;
 _SDL_SetRenderTarget(HEAP32[19464] | 0, i6) | 0;
 i8 = i7 + 80 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) {
  i4 = i7 + 56 | 0;
  _SDL_SetTextureBlendMode(HEAP32[i4 >> 2] | 0, 0) | 0;
  _SDL_RenderCopy(HEAP32[19464] | 0, HEAP32[i4 >> 2] | 0, 0, 0) | 0;
  i4 = i7 + 76 | 0;
  i5 = i7 + 64 | 0;
 } else {
  i4 = i7 + 76 | 0;
  i3 = i1 + -1 + (HEAP32[i4 >> 2] | 0) | 0;
  i5 = i7 + 64 | 0;
  _SDL_SetTextureBlendMode(HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 >>> 10 << 2) >> 2] | 0) + ((i3 & 1023) << 2) >> 2] | 0, 0) | 0;
  i3 = (HEAP32[i8 >> 2] | 0) + -1 + (HEAP32[i4 >> 2] | 0) | 0;
  _SDL_RenderCopy(HEAP32[19464] | 0, HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 >>> 10 << 2) >> 2] | 0) + ((i3 & 1023) << 2) >> 2] | 0, 0, 0) | 0;
  i3 = (HEAP32[i8 >> 2] | 0) + -1 + (HEAP32[i4 >> 2] | 0) | 0;
  _SDL_SetTextureBlendMode(HEAP32[(HEAP32[(HEAP32[i5 >> 2] | 0) + (i3 >>> 10 << 2) >> 2] | 0) + ((i3 & 1023) << 2) >> 2] | 0, 1) | 0;
 }
 i2 = HEAP32[i5 >> 2] | 0;
 i9 = (HEAP32[i7 + 68 >> 2] | 0) - i2 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 if ((((i9 | 0) == 0 ? 0 : (i9 << 8) + -1 | 0) | 0) == (i3 + i1 | 0)) {
  __ZNSt3__25dequeIP11SDL_TextureNS_9allocatorIS2_EEE19__add_back_capacityEv(i7 + 60 | 0);
  i1 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
 }
 i9 = i3 + i1 | 0;
 HEAP32[(HEAP32[i2 + (i9 >>> 10 << 2) >> 2] | 0) + ((i9 & 1023) << 2) >> 2] = i6;
 i9 = i3 + 1 | 0;
 HEAP32[i8 >> 2] = i9;
 if (i9 >>> 0 <= 5) return;
 i6 = i7 + 56 | 0;
 _SDL_DestroyTexture(HEAP32[i6 >> 2] | 0);
 i1 = HEAP32[i5 >> 2] | 0;
 i9 = HEAP32[i4 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[(HEAP32[i1 + (i9 >>> 10 << 2) >> 2] | 0) + ((i9 & 1023) << 2) >> 2];
 HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + -1;
 i9 = i9 + 1 | 0;
 HEAP32[i4 >> 2] = i9;
 if (i9 >>> 0 > 2047) {
  __ZdlPv(HEAP32[i1 >> 2] | 0);
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
  HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + -1024;
 }
 HEAP8[i7 + 52 >> 0] = 1;
 return;
}

function __ZN6Entity12addComponentI18TransformComponentJiiiiiiiEEERT_DpOT0_(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i9 = 0, i10 = 0, i11 = 0, f12 = f0, f13 = f0, f14 = f0, f15 = f0, i16 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i11;
 i10 = __Znwj(60) | 0;
 f13 = Math_fround(HEAP32[i1 >> 2] | 0);
 f12 = Math_fround(HEAP32[i2 >> 2] | 0);
 i16 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 f15 = Math_fround(HEAP32[i5 >> 2] | 0);
 f14 = Math_fround(HEAP32[i6 >> 2] | 0);
 i3 = (HEAP32[i7 >> 2] | 0) != 0 & 1;
 HEAP32[i10 >> 2] = 2780;
 i2 = i10 + 8 | 0;
 __ZN8Vector2dC2Ev(i2);
 i1 = i10 + 16 | 0;
 __ZN8Vector2dC2Ev(i1);
 __ZN8Vector2dC2Ev(i10 + 24 | 0);
 HEAP32[i10 + 32 >> 2] = i4;
 HEAP32[i10 + 36 >> 2] = i16;
 HEAPF32[i10 + 40 >> 2] = f15;
 HEAPF32[i10 + 44 >> 2] = f14;
 HEAP32[i10 + 48 >> 2] = 2;
 HEAP8[i10 + 52 >> 0] = i3;
 HEAP8[i10 + 53 >> 0] = 0;
 HEAPF32[i2 >> 2] = f13;
 HEAPF32[i10 + 12 >> 2] = f12;
 HEAPF32[i1 >> 2] = f13;
 HEAPF32[i10 + 20 >> 2] = f12;
 HEAP32[i10 + 4 >> 2] = i8;
 i1 = i10;
 HEAP32[i9 >> 2] = i1;
 i2 = i8 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i8 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i9 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i8 + 8 | 0, i9);
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i16 = HEAP32[19475] | 0;
  HEAP32[19475] = i16 + 1;
  HEAP32[19476] = i16;
 }
 HEAP32[i8 + 20 + (HEAP32[19476] << 2) >> 2] = i10;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i16 = HEAP32[19475] | 0;
  HEAP32[19475] = i16 + 1;
  HEAP32[19476] = i16;
 }
 i1 = i8 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19476];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i10 >> 2] >> 2] & 511](i10);
 i1 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = 0;
 if (!i1) {
  STACKTOP = i11;
  return i10 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i11;
 return i10 | 0;
}

function _SDL_SetError(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i7;
 i5 = i7 + 8 | 0;
 if (!i2) {
  STACKTOP = i7;
  return -1;
 }
 HEAP32[19002] = 1;
 _SDL_strlcpy(76012, i2, 128) | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[19035] = 0;
 i3 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i3 << 24 >> 24) {
  i1 = i2;
  i2 = 0;
  do {
   i1 = i1 + 1 | 0;
   if (i3 << 24 >> 24 == 37) {
    while (1) {
     i4 = HEAP8[i1 >> 0] | 0;
     i3 = i1 + 1 | 0;
     if (i4 << 24 >> 24 == 46 | (i4 + -48 & 255) < 10) i1 = i3; else break;
    }
    switch (i4 << 24 >> 24 | 0) {
    case 0:
     break;
    case 88:
    case 120:
    case 111:
    case 117:
    case 100:
    case 105:
    case 99:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i1 = HEAP32[i4 >> 2] | 0;
      HEAP32[i5 >> 2] = i4 + 4;
      i4 = i2 + 1 | 0;
      HEAP32[19035] = i4;
      HEAP32[76144 + (i2 << 7) >> 2] = i1;
      i1 = i3;
      i2 = i4;
      break;
     }
    case 102:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (8 - 1) & ~(8 - 1);
      d8 = +HEAPF64[i4 >> 3];
      HEAP32[i5 >> 2] = i4 + 8;
      i4 = i2 + 1 | 0;
      HEAP32[19035] = i4;
      HEAPF64[76144 + (i2 << 7) >> 3] = d8;
      i1 = i3;
      i2 = i4;
      break;
     }
    case 112:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i1 = HEAP32[i4 >> 2] | 0;
      HEAP32[i5 >> 2] = i4 + 4;
      i4 = i2 + 1 | 0;
      HEAP32[19035] = i4;
      HEAP32[76144 + (i2 << 7) >> 2] = i1;
      i1 = i3;
      i2 = i4;
      break;
     }
    case 115:
     {
      i4 = (HEAP32[i5 >> 2] | 0) + (4 - 1) & ~(4 - 1);
      i1 = HEAP32[i4 >> 2] | 0;
      HEAP32[i5 >> 2] = i4 + 4;
      _SDL_strlcpy(76144 + (i2 << 7) | 0, (i1 | 0) == 0 ? 70463 : i1, 128) | 0;
      i2 = (HEAP32[19035] | 0) + 1 | 0;
      HEAP32[19035] = i2;
      i1 = i3;
      break;
     }
    default:
     i1 = i3;
    }
    if ((i2 | 0) > 4) break L4;
   }
   i3 = HEAP8[i1 >> 0] | 0;
  } while (i3 << 24 >> 24 != 0);
 } while (0);
 _SDL_GetError() | 0;
 HEAP32[i6 >> 2] = 85558;
 _SDL_LogDebug(1, 46409, i6);
 STACKTOP = i7;
 return -1;
}

function _SDL_BlendLines(i14, i13, i10, i15, i16, i17, i18, i19) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i20 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i11 = i20 + 24 | 0;
 i12 = i20 + 20 | 0;
 i8 = i20 + 16 | 0;
 i9 = i20 + 12 | 0;
 if (!i14) {
  i19 = _SDL_SetError(48052, i20) | 0;
  STACKTOP = i20;
  return i19 | 0;
 }
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 L5 : do switch (HEAP8[i1 + 9 >> 0] | 0) {
 case 2:
  {
   i3 = HEAP32[i1 + 12 >> 2] | 0;
   i3 = (i3 | 0) == 31744 ? 3 : (i3 | 0) == 63488 ? 2 : 1;
   break;
  }
 case 4:
  {
   i2 = (HEAP32[i1 + 24 >> 2] | 0) != 0;
   if ((HEAP32[i1 + 12 >> 2] | 0) == 16711680) {
    i3 = i2 ? 5 : 4;
    break L5;
   } else {
    i3 = i2 ? 7 : 6;
    break L5;
   }
  }
 default:
  {
   i19 = _SDL_SetError(48102, i20 + 8 | 0) | 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 } while (0);
 if ((i10 | 0) > 1) {
  i5 = i14 + 36 | 0;
  i4 = 1;
  do {
   i2 = i4 + -1 | 0;
   i2 = i13 + (i2 << 3) | 0;
   HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i2 + 4 >> 2];
   i2 = i13 + (i4 << 3) | 0;
   i1 = i2 | 0;
   HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
   if (_SDL_IntersectRectAndLine(i5, i11, i12, i8, i9) | 0) {
    i6 = HEAP32[i8 >> 2] | 0;
    i7 = HEAP32[i9 >> 2] | 0;
    if ((i6 | 0) == (HEAP32[i1 >> 2] | 0)) i1 = (i7 | 0) != (HEAP32[i2 >> 2] | 0); else i1 = 1;
    FUNCTION_TABLE_viiiiiiiiiii[i3 & 7](i14, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, i6, i7, i15, i16, i17, i18, i19, i1 & 1);
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != (i10 | 0));
 }
 i1 = i10 + -1 | 0;
 i2 = HEAP32[i13 + (i1 << 3) >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) == (i2 | 0)) {
  i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
  if ((HEAP32[i13 + 4 >> 2] | 0) == (i1 | 0)) {
   i19 = 0;
   STACKTOP = i20;
   return i19 | 0;
  }
 } else i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
 _SDL_BlendPoint(i14, i2, i1, i15, i16, i17, i18, i19) | 0;
 i19 = 0;
 STACKTOP = i20;
 return i19 | 0;
}

function __ZNSt3__26vectorINS_10unique_ptrI6EntityNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i9, i4) {
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
 i2 = i3 + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i8 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 i1 = i8 >> 1;
 i1 = i8 >> 2 >>> 0 < 536870911 ? (i1 >>> 0 < i2 >>> 0 ? i2 : i1) : 1073741823;
 do if (!i1) i2 = 0; else if (i1 >>> 0 > 1073741823) {
  i11 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i11, 38941);
  HEAP32[i11 >> 2] = 35044;
  ___cxa_throw(i11 | 0, 2680, 272);
 } else {
  i2 = __Znwj(i1 << 2) | 0;
  break;
 } while (0);
 i5 = i2 + (i3 << 2) | 0;
 i3 = i5;
 i7 = i2 + (i1 << 2) | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = i6;
 i6 = i5 + 4 | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i4 | 0)) {
  i1 = i3;
  i8 = i4;
  i2 = i4;
 } else {
  i2 = i5;
  do {
   i1 = i1 + -4 | 0;
   i8 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i2 + -4 >> 2] = i8;
   i2 = i3 + -4 | 0;
   i3 = i2;
  } while ((i1 | 0) != (i4 | 0));
  i1 = i3;
  i8 = HEAP32[i9 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i7 = i8;
 if ((i2 | 0) != (i7 | 0)) {
  i5 = i2;
  do {
   i5 = i5 + -4 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = 0;
   if (i6 | 0) {
    i3 = i6 + 8 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
    if (i1 | 0) {
     i4 = i6 + 12 | 0;
     i2 = HEAP32[i4 >> 2] | 0;
     if ((i2 | 0) != (i1 | 0)) {
      do {
       i11 = i2 + -4 | 0;
       HEAP32[i4 >> 2] = i11;
       i2 = HEAP32[i11 >> 2] | 0;
       HEAP32[i11 >> 2] = 0;
       if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 511](i2);
       i2 = HEAP32[i4 >> 2] | 0;
      } while ((i2 | 0) != (i1 | 0));
      i1 = HEAP32[i3 >> 2] | 0;
     }
     __ZdlPv(i1);
    }
    __ZdlPv(i6);
   }
  } while ((i5 | 0) != (i7 | 0));
 }
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function _SW_CreateRendererForSurface(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!i1) {
  _SDL_SetError(47412, i7) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i6 = _SDL_calloc(1, 324) | 0;
 if (!i6) {
  _SDL_Error(0) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i4 = _SDL_calloc(1, 8) | 0;
 if (!i4) {
  _SDL_free(HEAP32[i6 + 320 >> 2] | 0);
  _SDL_free(i6);
  _SDL_Error(0) | 0;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i4 >> 2] = i1;
 i5 = i4 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i6 + 4 >> 2] = 46;
 HEAP32[i6 + 8 >> 2] = 33;
 HEAP32[i6 + 12 >> 2] = 27;
 HEAP32[i6 + 16 >> 2] = 28;
 HEAP32[i6 + 20 >> 2] = 29;
 HEAP32[i6 + 24 >> 2] = 30;
 HEAP32[i6 + 28 >> 2] = 32;
 HEAP32[i6 + 36 >> 2] = 33;
 HEAP32[i6 + 40 >> 2] = 47;
 HEAP32[i6 + 44 >> 2] = 31;
 HEAP32[i6 + 48 >> 2] = 105;
 HEAP32[i6 + 52 >> 2] = 106;
 HEAP32[i6 + 56 >> 2] = 107;
 HEAP32[i6 + 60 >> 2] = 34;
 HEAP32[i6 + 64 >> 2] = 35;
 HEAP32[i6 + 68 >> 2] = 36;
 HEAP32[i6 + 72 >> 2] = 14;
 HEAP32[i6 + 76 >> 2] = 2;
 HEAP32[i6 + 80 >> 2] = 34;
 HEAP32[i6 + 84 >> 2] = 316;
 HEAP32[i6 + 88 >> 2] = 48;
 HEAP32[i6 + 92 >> 2] = 317;
 i1 = i6 + 104 | 0;
 i2 = 15172;
 i3 = i1 + 84 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i2 = i6 + 320 | 0;
 HEAP32[i2 >> 2] = i4;
 if (HEAP32[i4 >> 2] | 0) {
  STACKTOP = i7;
  return i6 | 0;
 }
 i3 = HEAP32[i5 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 if (i3 | 0) {
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _SDL_GetWindowSurface(HEAP32[i6 + 188 >> 2] | 0) | 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i5 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetClipRect(i1, i6 + 216 | 0) | 0;
 i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP32[i6 + 280 >> 2] | 0)) {
  _SDL_SetClipRect(i1, 0) | 0;
  STACKTOP = i7;
  return i6 | 0;
 } else {
  _SDL_SetClipRect(i1, i6 + 248 | 0) | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 return 0;
}

function _SDL_UnlockTexture(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i1 = i11;
 i9 = i11 + 28 | 0;
 i10 = i11 + 24 | 0;
 i4 = i11 + 8 | 0;
 if (i8 | 0) if ((HEAP32[i8 >> 2] | 0) == 85557) {
  if ((HEAP32[i8 + 8 >> 2] | 0) != 1) {
   STACKTOP = i11;
   return;
  }
  i1 = i8 + 40 | 0;
  i7 = HEAP32[i8 + 36 >> 2] | 0;
  if (HEAP32[i1 >> 2] | 0) {
   HEAP32[i9 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   i2 = i4 + 8 | 0;
   HEAP32[i2 >> 2] = HEAP32[i8 + 12 >> 2];
   i3 = i4 + 12 | 0;
   HEAP32[i3 >> 2] = HEAP32[i8 + 16 >> 2];
   if ((_SDL_LockTexture(i7, i4, i9, i10) | 0) >= 0) {
    _SDL_SW_CopyYUVToRGB(HEAP32[i1 >> 2] | 0, i4, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
    _SDL_UnlockTexture(i7);
   }
   STACKTOP = i11;
   return;
  }
  if (!i7) {
   i10 = HEAP32[i8 + 32 >> 2] | 0;
   FUNCTION_TABLE_vii[HEAP32[i10 + 40 >> 2] & 127](i10, i8);
   STACKTOP = i11;
   return;
  }
  HEAP32[i9 >> 2] = 0;
  HEAP32[i10 >> 2] = 0;
  i2 = i8 + 52 | 0;
  i3 = HEAP32[i8 + 48 >> 2] | 0;
  i4 = (HEAP32[i8 + 44 >> 2] | 0) + (Math_imul(i3, HEAP32[i8 + 56 >> 2] | 0) | 0) | 0;
  i5 = HEAP32[i2 >> 2] | 0;
  i6 = i8 + 4 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  L18 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L18;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L18;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  if ((_SDL_LockTexture(i7, i2, i9, i10) | 0) >= 0) {
   i5 = i4 + (Math_imul(i1, i5) | 0) | 0;
   _SDL_ConvertPixels(HEAP32[i8 + 60 >> 2] | 0, HEAP32[i8 + 64 >> 2] | 0, HEAP32[i6 >> 2] | 0, i5, i3, HEAP32[i7 + 4 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   _SDL_UnlockTexture(i7);
  }
  STACKTOP = i11;
  return;
 }
 _SDL_SetError(41358, i1) | 0;
 STACKTOP = i11;
 return;
}

function _scanexp(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i5 + 100 | 0;
 if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else i1 = ___shgetc(i5) | 0;
 switch (i1 | 0) {
 case 43:
 case 45:
  {
   i2 = (i1 | 0) == 45 & 1;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i5) | 0;
   if ((i3 | 0) != 0 & (i1 + -48 | 0) >>> 0 > 9) if (HEAP32[i7 >> 2] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
   break;
  }
 default:
  i2 = 0;
 }
 if ((i1 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i7 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 } else {
  i4 = 0;
  do {
   i4 = i1 + -48 + (i4 * 10 | 0) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i5) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & (i4 | 0) < 214748364);
  i3 = ((i4 | 0) < 0) << 31 >> 31;
  if ((i1 + -48 | 0) >>> 0 < 10) do {
   i3 = ___muldi3(i4 | 0, i3 | 0, 10, 0) | 0;
   i4 = tempRet0;
   i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   i4 = _i64Add(i1 | 0, tempRet0 | 0, i3 | 0, i4 | 0) | 0;
   i3 = tempRet0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i5) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & ((i3 | 0) < 21474836 | (i3 | 0) == 21474836 & i4 >>> 0 < 2061584302));
  if ((i1 + -48 | 0) >>> 0 < 10) do {
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i5) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10);
  if (HEAP32[i7 >> 2] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i7 = (i2 | 0) != 0;
  i1 = _i64Subtract(0, 0, i4 | 0, i3 | 0) | 0;
  i2 = i7 ? tempRet0 : i3;
  i1 = i7 ? i1 : i4;
 }
 tempRet0 = i2;
 return i1 | 0;
}

function _SDL_SetDisplayModeForDisplay(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i8 = i9 + 8 | 0;
 i4 = i9;
 i7 = i9 + 32 | 0;
 i5 = i9 + 12 | 0;
 if (!i1) {
  i4 = i6 + 16 | 0;
  HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  HEAP32[i7 + 16 >> 2] = HEAP32[i4 + 16 >> 2];
 } else {
  HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i7 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i7 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i7 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i7 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  if (!(HEAP32[i7 >> 2] | 0)) HEAP32[i7 >> 2] = HEAP32[i6 + 36 >> 2];
  i3 = i7 + 4 | 0;
  if (!(HEAP32[i3 >> 2] | 0)) HEAP32[i3 >> 2] = HEAP32[i6 + 40 >> 2];
  i1 = i7 + 8 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = HEAP32[i6 + 44 >> 2];
  i2 = i7 + 12 | 0;
  if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = HEAP32[i6 + 48 >> 2];
  if (!(_SDL_GetClosestDisplayModeForDisplay(i6, i7, i7) | 0)) {
   i8 = HEAP32[i1 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i4 + 4 >> 2] = i8;
   i8 = _SDL_SetError(46946, i4) | 0;
   STACKTOP = i9;
   return i8 | 0;
  }
 }
 i3 = i6 + 36 | 0;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i5 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i5 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i5 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
 if (!(_SDL_memcmp(i7, i5, 20) | 0)) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 i1 = HEAP32[19487] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 if (!i2) {
  i8 = _SDL_SetError(46895, i8) | 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((FUNCTION_TABLE_iiii[i2 & 63](i1, i6, i7) | 0) < 0) {
  i8 = -1;
  STACKTOP = i9;
  return i8 | 0;
 };
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _SW_RenderReadPixels(i7, i2, i9, i10, i11) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i13;
 i8 = i13 + 8 | 0;
 i4 = i7 + 320 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (!i1) {
  i3 = i5 + 4 | 0;
  i14 = HEAP32[i3 >> 2] | 0;
  HEAP32[i5 >> 2] = i14;
  i1 = i14;
  if (!i14) {
   i1 = _SDL_GetWindowSurface(HEAP32[i7 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i3 >> 2] = i1;
    HEAP32[i5 >> 2] = i1;
    i3 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
    if (!i3) {
     i6 = 10;
     break L1;
    }
    _SDL_SetClipRect(i3, i7 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i7 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i7 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if (!i1) {
   i14 = -1;
   STACKTOP = i13;
   return i14 | 0;
  }
 } else i6 = 10; while (0);
 i5 = HEAP32[i7 + 216 >> 2] | 0;
 i3 = HEAP32[i7 + 220 >> 2] | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if (!(i5 | i3)) i3 = i4; else {
  i14 = i4 + i5 | 0;
  HEAP32[i8 >> 2] = i14;
  HEAP32[i8 + 4 >> 2] = (HEAP32[i2 + 4 >> 2] | 0) + i3;
  HEAP32[i8 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i8 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i2 = i8;
  i3 = i14;
 }
 if ((i3 | 0) >= 0) {
  i4 = HEAP32[i2 + 8 >> 2] | 0;
  if ((i4 + i3 | 0) <= (HEAP32[i1 + 8 >> 2] | 0)) {
   i5 = HEAP32[i2 + 4 >> 2] | 0;
   if ((i5 | 0) >= 0) {
    i2 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i2 + i5 | 0) <= (HEAP32[i1 + 12 >> 2] | 0)) {
     i12 = HEAP32[i1 + 4 >> 2] | 0;
     i14 = HEAP32[i1 + 16 >> 2] | 0;
     i8 = (HEAP32[i1 + 20 >> 2] | 0) + (Math_imul(i14, i5) | 0) | 0;
     i14 = _SDL_ConvertPixels(i4, i2, HEAP32[i12 >> 2] | 0, i8 + (Math_imul(i3, HEAPU8[i12 + 9 >> 0] | 0) | 0) | 0, i14, i9, i10, i11) | 0;
     STACKTOP = i13;
     return i14 | 0;
    }
   }
  }
 }
 i14 = _SDL_SetError(47534, i12) | 0;
 STACKTOP = i13;
 return i14 | 0;
}

function _SDL_AddDisplayMode(i11, i12) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0;
 i1 = i11 + 12 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i13 = i11 + 8 | 0;
 i14 = HEAP32[i13 >> 2] | 0;
 L1 : do if ((i14 | 0) > 0) {
  i8 = i12 + 4 | 0;
  i9 = i12 + 8 | 0;
  i10 = i12 + 12 | 0;
  i7 = 0;
  L3 : while (1) {
   i6 = i2 + (i7 * 20 | 0) | 0;
   if ((i6 | 0) == (i12 | 0)) {
    i1 = 0;
    i3 = 20;
    break;
   }
   i3 = HEAP32[i8 >> 2] | 0;
   i4 = HEAP32[i2 + (i7 * 20 | 0) + 4 >> 2] | 0;
   do if ((i4 | 0) == (i3 | 0)) {
    i3 = HEAP32[i9 >> 2] | 0;
    i4 = HEAP32[i2 + (i7 * 20 | 0) + 8 >> 2] | 0;
    if ((i4 | 0) != (i3 | 0)) {
     i3 = i4 - i3 | 0;
     break;
    }
    i4 = HEAP32[i12 >> 2] | 0;
    i5 = i4 >>> 8 & 255;
    i6 = HEAP32[i6 >> 2] | 0;
    i3 = i6 >>> 8 & 255;
    if ((i3 | 0) != (i5 | 0)) {
     i3 = i3 - i5 | 0;
     break;
    }
    i4 = i4 >>> 16 & 15;
    i3 = i6 >>> 16 & 15;
    if ((i3 | 0) == (i4 | 0)) {
     i3 = HEAP32[i10 >> 2] | 0;
     i4 = HEAP32[i2 + (i7 * 20 | 0) + 12 >> 2] | 0;
     if ((i4 | 0) == (i3 | 0)) {
      i1 = 0;
      i3 = 20;
      break L3;
     } else {
      i3 = i4 - i3 | 0;
      break;
     }
    } else {
     i3 = i3 - i4 | 0;
     break;
    }
   } else i3 = i4 - i3 | 0; while (0);
   i7 = i7 + 1 | 0;
   if (!i3) {
    i1 = 0;
    i3 = 20;
    break;
   }
   if ((i7 | 0) >= (i14 | 0)) break L1;
  }
  if ((i3 | 0) == 20) return i1 | 0;
 } while (0);
 i3 = i11 + 4 | 0;
 do if ((i14 | 0) == (HEAP32[i3 >> 2] | 0)) {
  i2 = _SDL_realloc(i2, (i14 * 20 | 0) + 640 | 0) | 0;
  if (!i2) {
   i14 = 0;
   return i14 | 0;
  } else {
   HEAP32[i1 >> 2] = i2;
   HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 32;
   break;
  }
 } while (0);
 i14 = i2 + (i14 * 20 | 0) | 0;
 HEAP32[i14 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i14 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
 HEAP32[i14 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
 HEAP32[i14 + 12 >> 2] = HEAP32[i12 + 12 >> 2];
 HEAP32[i14 + 16 >> 2] = HEAP32[i12 + 16 >> 2];
 i14 = (HEAP32[i13 >> 2] | 0) + 1 | 0;
 HEAP32[i13 >> 2] = i14;
 _SDL_qsort(HEAP32[i1 >> 2] | 0, i14, 20, 26);
 i14 = 1;
 return i14 | 0;
}

function _SDL_Blit_RGB888_BGR888_Blend(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i12 + 52 >> 2] | 0;
 i14 = i12 + 28 | 0;
 i17 = HEAP32[i14 >> 2] | 0;
 HEAP32[i14 >> 2] = i17 + -1;
 if (!i17) return;
 i15 = i12 + 20 | 0;
 i16 = i12 + 24 | 0;
 i17 = i12 + 12 | 0;
 i13 = i12 + 32 | 0;
 i11 = i1 & 112;
 i2 = HEAP32[i12 >> 2] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i10 = (i11 & 127) == 64;
 i8 = i2;
 i9 = i3;
 while (1) {
  i7 = HEAP32[i16 >> 2] | 0;
  i1 = i7 + -1 | 0;
  if (i7 | 0) switch (i11 & 127) {
  case 16:
   {
    while (1) {
     i7 = HEAP32[i2 >> 2] | 0;
     HEAP32[i3 >> 2] = i7 & 65280 | i7 >>> 16 & 255 | i7 << 16 & 16711680;
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  case 32:
   {
    while (1) {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i6 = (i7 >>> 16 & 255) + (i4 & 255) | 0;
     i5 = (i4 >>> 8 & 255) + (i7 >>> 8 & 255) | 0;
     i7 = (i4 >>> 16 & 255) + (i7 & 255) | 0;
     HEAP32[i3 >> 2] = (i5 >>> 0 < 255 ? i5 : 255) << 8 | (i6 >>> 0 < 255 ? i6 : 255) | (i7 >>> 0 < 255 ? i7 : 255) << 16;
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  default:
   while (1) {
    i7 = HEAP32[i2 >> 2] | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    i5 = i4 >>> 16 & 255;
    i6 = i4 >>> 8 & 255;
    i4 = i4 & 255;
    if (i10) {
     i5 = ((Math_imul(i5, i7 & 255) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i7 >>> 8 & 255) | 0) >>> 0) / 255 | 0;
     i4 = ((Math_imul(i7 >>> 16 & 255, i4) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i3 >> 2] = i6 << 8 | i4 | i5 << 16;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
  }
  i2 = i8 + (HEAP32[i17 >> 2] | 0) | 0;
  i1 = i9 + (HEAP32[i13 >> 2] | 0) | 0;
  i9 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i9 + -1;
  if (!i9) break; else {
   i8 = i2;
   i9 = i1;
   i3 = i1;
  }
 }
 HEAP32[i12 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Blend(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i12 + 52 >> 2] | 0;
 i14 = i12 + 28 | 0;
 i17 = HEAP32[i14 >> 2] | 0;
 HEAP32[i14 >> 2] = i17 + -1;
 if (!i17) return;
 i15 = i12 + 20 | 0;
 i16 = i12 + 24 | 0;
 i17 = i12 + 12 | 0;
 i13 = i12 + 32 | 0;
 i11 = i1 & 112;
 i2 = HEAP32[i12 >> 2] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i10 = (i11 & 127) == 64;
 i8 = i2;
 i9 = i3;
 while (1) {
  i7 = HEAP32[i16 >> 2] | 0;
  i1 = i7 + -1 | 0;
  if (i7 | 0) switch (i11 & 127) {
  case 16:
   {
    while (1) {
     i7 = HEAP32[i2 >> 2] | 0;
     HEAP32[i3 >> 2] = i7 & 65280 | i7 << 16 & 16711680 | i7 >>> 16 & 255;
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  case 32:
   {
    while (1) {
     i4 = HEAP32[i2 >> 2] | 0;
     i7 = HEAP32[i3 >> 2] | 0;
     i6 = (i7 >>> 16 & 255) + (i4 & 255) | 0;
     i5 = (i7 >>> 8 & 255) + (i4 >>> 8 & 255) | 0;
     i7 = (i4 >>> 16 & 255) + (i7 & 255) | 0;
     HEAP32[i3 >> 2] = (i5 >>> 0 < 255 ? i5 : 255) << 8 | (i6 >>> 0 < 255 ? i6 : 255) << 16 | (i7 >>> 0 < 255 ? i7 : 255);
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  default:
   while (1) {
    i7 = HEAP32[i2 >> 2] | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    i4 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    if (i10) {
     i5 = ((Math_imul(i7 >>> 16 & 255, i5) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i7 >>> 8 & 255) | 0) >>> 0) / 255 | 0;
     i4 = ((Math_imul(i4, i7 & 255) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i3 >> 2] = i6 << 8 | i4 << 16 | i5;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
  }
  i2 = i8 + (HEAP32[i17 >> 2] | 0) | 0;
  i1 = i9 + (HEAP32[i13 >> 2] | 0) | 0;
  i9 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i9 + -1;
  if (!i9) break; else {
   i8 = i2;
   i9 = i1;
   i3 = i1;
  }
 }
 HEAP32[i12 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i7, i9, i12, i13, i14, i2, i3, i4, i5, i8) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i10 = 0, i11 = 0;
 i6 = 0;
 i10 = HEAP32[i13 >> 2] | 0;
 i11 = (i10 | 0) == (i12 | 0);
 do if (i11) {
  i1 = (HEAP8[i8 + 24 >> 0] | 0) == i7 << 24 >> 24;
  if (!i1) if ((HEAP8[i8 + 25 >> 0] | 0) != i7 << 24 >> 24) {
   i6 = 5;
   break;
  }
  HEAP32[i13 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i3 + 11 >> 0] | 0;
  if (i7 << 24 >> 24 == i2 << 24 >> 24 ? ((i6 << 24 >> 24 < 0 ? HEAP32[i3 + 4 >> 2] | 0 : i6 & 255) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i3 = i8 + 26 | 0;
  i2 = 0;
  while (1) {
   i1 = i8 + i2 | 0;
   if ((i2 | 0) == 26) {
    i1 = i3;
    break;
   }
   if ((HEAP8[i1 >> 0] | 0) == i7 << 24 >> 24) break; else i2 = i2 + 1 | 0;
  }
  i1 = i1 - i8 | 0;
  if ((i1 | 0) > 23) i1 = -1; else {
   switch (i9 | 0) {
   case 10:
   case 8:
    {
     if ((i1 | 0) >= (i9 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 22) {
      if (i11) {
       i1 = -1;
       break L6;
      }
      if ((i10 - i12 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i10 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[73125 + i1 >> 0] | 0;
      HEAP32[i13 >> 2] = i10 + 1;
      HEAP8[i10 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[73125 + i1 >> 0] | 0;
   HEAP32[i13 >> 2] = i10 + 1;
   HEAP8[i10 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function _png_read_finish_row(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = i11 + 372 | 0;
 i9 = (HEAP32[i1 >> 2] | 0) + 1 | 0;
 HEAP32[i1 >> 2] = i9;
 i10 = i11 + 356 | 0;
 if (i9 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) return;
 L4 : do if (HEAP8[i11 + 432 >> 0] | 0) {
  HEAP32[i1 >> 2] = 0;
  _memset(HEAP32[i11 + 380 >> 2] | 0, 0, (HEAP32[i11 + 364 >> 2] | 0) + 1 | 0) | 0;
  i6 = i11 + 433 | 0;
  i2 = (HEAP8[i6 >> 0] | 0) + 1 << 24 >> 24;
  HEAP8[i6 >> 0] = i2;
  i1 = i2 & 255;
  if ((i2 & 255) <= 6) {
   i7 = (HEAP32[i11 + 348 >> 2] | 0) + -1 | 0;
   i9 = i11 + 368 | 0;
   do if (!(HEAP32[i11 + 216 >> 2] & 2)) {
    i8 = (HEAP32[i11 + 352 >> 2] | 0) + -1 | 0;
    while (1) {
     i5 = HEAPU8[65860 + i1 >> 0] | 0;
     i1 = i7 + i5 - (HEAPU8[65867 + i1 >> 0] | 0) | 0;
     i4 = i2 & 255;
     i3 = HEAPU8[66254 + i4 >> 0] | 0;
     i4 = i8 + i3 - (HEAPU8[66261 + i4 >> 0] | 0) | 0;
     if (!(i4 >>> 0 < i3 >>> 0 | i1 >>> 0 < i5 >>> 0)) {
      i2 = 9;
      break;
     }
     i2 = i2 + 1 << 24 >> 24;
     HEAP8[i6 >> 0] = i2;
     if ((i2 & 255) > 6) {
      i2 = 11;
      break;
     } else i1 = i2 & 255;
    }
    if ((i2 | 0) == 9) {
     HEAP32[i10 >> 2] = (i4 >>> 0) / (i3 >>> 0) | 0;
     i1 = (i1 >>> 0) / (i5 >>> 0) | 0;
     break;
    } else if ((i2 | 0) == 11) {
     HEAP32[i10 >> 2] = (i4 >>> 0) / (i3 >>> 0) | 0;
     HEAP32[i9 >> 2] = (i1 >>> 0) / (i5 >>> 0) | 0;
     break L4;
    }
   } else {
    i11 = HEAPU8[65860 + i1 >> 0] | 0;
    i1 = ((i7 + i11 - (HEAPU8[65867 + i1 >> 0] | 0) | 0) >>> 0) / (i11 >>> 0) | 0;
   } while (0);
   HEAP32[i9 >> 2] = i1;
   return;
  }
 } while (0);
 i1 = i11 + 212 | 0;
 if (!(HEAP32[i1 >> 2] & 8)) {
  _png_read_IDAT_data(i11, 0, 0);
  HEAP32[i11 + 236 >> 2] = 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = i11 + 208 | 0;
  if (!(i2 & 8)) {
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 8;
   HEAP32[i1 >> 2] = i2 | 8;
  }
 }
 i1 = i11 + 220 | 0;
 if ((HEAP32[i1 >> 2] | 0) != 1229209940) return;
 HEAP32[i11 + 224 >> 2] = 0;
 HEAP32[i11 + 228 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 _png_crc_finish(i11, HEAP32[i11 + 408 >> 2] | 0) | 0;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i7, i9, i12, i13, i14, i2, i3, i4, i5, i8) {
 i7 = i7 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i10 = 0, i11 = 0;
 i6 = 0;
 i10 = HEAP32[i13 >> 2] | 0;
 i11 = (i10 | 0) == (i12 | 0);
 do if (i11) {
  i1 = (HEAP32[i8 + 96 >> 2] | 0) == (i7 | 0);
  if (!i1) if ((HEAP32[i8 + 100 >> 2] | 0) != (i7 | 0)) {
   i6 = 5;
   break;
  }
  HEAP32[i13 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i3 + 11 >> 0] | 0;
  if ((i7 | 0) == (i2 | 0) ? ((i6 << 24 >> 24 < 0 ? HEAP32[i3 + 4 >> 2] | 0 : i6 & 255) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i3 = i8 + 104 | 0;
  i2 = 0;
  while (1) {
   i1 = i8 + (i2 << 2) | 0;
   if ((i2 | 0) == 26) {
    i1 = i3;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) break; else i2 = i2 + 1 | 0;
  }
  i1 = i1 - i8 | 0;
  i2 = i1 >> 2;
  if ((i1 | 0) > 92) i1 = -1; else {
   switch (i9 | 0) {
   case 10:
   case 8:
    {
     if ((i2 | 0) >= (i9 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 88) {
      if (i11) {
       i1 = -1;
       break L6;
      }
      if ((i10 - i12 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i10 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[73125 + i2 >> 0] | 0;
      HEAP32[i13 >> 2] = i10 + 1;
      HEAP8[i10 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[73125 + i2 >> 0] | 0;
   HEAP32[i13 >> 2] = i10 + 1;
   HEAP8[i10 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function _Emscripten_CreateWindow(i9, i10) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, f2 = f0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, d17 = 0.0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i15 = i16 + 16 | 0;
 i6 = i16 + 8 | 0;
 i8 = i16;
 i13 = _SDL_calloc(1, 40) | 0;
 if (!i13) {
  i15 = _SDL_Error(0) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i14 = i10 + 48 | 0;
 if (!(HEAP32[i14 >> 2] & 8192)) f2 = Math_fround(1.0); else f2 = Math_fround(+_emscripten_get_device_pixel_ratio());
 i11 = i13 + 12 | 0;
 HEAPF32[i11 >> 2] = f2;
 i12 = i10 + 24 | 0;
 d17 = +_SDL_floor(+Math_fround(f2 * Math_fround(HEAP32[i12 >> 2] | 0)));
 i7 = i10 + 28 | 0;
 f2 = Math_fround(HEAP32[i7 >> 2] | 0);
 d3 = +_SDL_floor(+Math_fround(Math_fround(HEAPF32[i11 >> 2]) * f2));
 _emscripten_set_canvas_size(~~d17 | 0, ~~d3 | 0);
 _emscripten_get_element_css_size(0, i6 | 0, i8 | 0) | 0;
 if (+_SDL_floor(+HEAPF64[i6 >> 3]) != d17) i4 = 1; else i4 = +_SDL_floor(+HEAPF64[i8 >> 3]) != d3;
 i1 = i4 & 1;
 i5 = i13 + 16 | 0;
 HEAP32[i5 >> 2] = i1;
 if (!((HEAP32[i14 >> 2] & 32 | 0) == 0 | i4 ^ 1)) {
  d17 = +Math_fround(HEAPF32[i11 >> 2]);
  _emscripten_set_canvas_size(~~(+HEAPF64[i6 >> 3] * d17) | 0, ~~(+HEAPF64[i8 >> 3] * d17) | 0);
  _SDL_SendWindowEvent(i10, 5, ~~+HEAPF64[i6 >> 3], ~~+HEAPF64[i8 >> 3]) | 0;
  i1 = HEAP32[i5 >> 2] | 0;
 }
 if (!i1) if (Math_fround(HEAPF32[i11 >> 2]) != Math_fround(1.0)) _emscripten_set_element_css_size(0, +(+(HEAP32[i12 >> 2] | 0)), +(+(HEAP32[i7 >> 2] | 0))) | 0;
 if (HEAP32[i14 >> 2] & 2 | 0) {
  if (!(HEAP32[i9 + 676 >> 2] | 0)) if ((_SDL_GL_LoadLibrary(0) | 0) < 0) {
   i15 = -1;
   STACKTOP = i16;
   return i15 | 0;
  }
  i14 = _SDL_EGL_CreateSurface(i9, 0) | 0;
  HEAP32[i13 >> 2] = i14;
  if (!i14) {
   i15 = _SDL_SetError(50611, i15) | 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 }
 HEAP32[i13 + 4 >> 2] = i10;
 HEAP32[i10 + 144 >> 2] = i13;
 _SDL_SetMouseFocus(i10);
 _SDL_SetKeyboardFocus(i10);
 _Emscripten_RegisterEventHandlers(i13);
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function _SDL_CreateRGBSurfaceWithFormat(i1, i4, i5, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = _SDL_calloc(1, 60) | 0;
 if (!i9) {
  _SDL_Error(0) | 0;
  i9 = 0;
  return i9 | 0;
 }
 i7 = _SDL_AllocFormat(i3) | 0;
 i8 = i9 + 4 | 0;
 HEAP32[i8 >> 2] = i7;
 if (!i7) {
  _SDL_FreeSurface(i9);
  i9 = 0;
  return i9 | 0;
 }
 i6 = i9 + 8 | 0;
 HEAP32[i6 >> 2] = i4;
 i7 = i9 + 12 | 0;
 HEAP32[i7 >> 2] = i5;
 i4 = i9 + 16 | 0;
 HEAP32[i4 >> 2] = _SDL_CalculatePitch(i9) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i9 + 36 >> 2] = 0;
 HEAP32[i9 + 40 >> 2] = 0;
 HEAP32[i9 + 44 >> 2] = i1;
 HEAP32[i9 + 48 >> 2] = i2;
 i2 = HEAP32[i8 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == 0 | (i3 & -268435456 | 0) == 268435456) if (((i3 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
  i1 = _SDL_AllocPalette(1 << (HEAPU8[i2 + 8 >> 0] | 0)) | 0;
  if (!i1) {
   _SDL_FreeSurface(i9);
   i9 = 0;
   return i9 | 0;
  }
  if ((HEAP32[i1 >> 2] | 0) == 2) {
   i5 = HEAP32[i1 + 4 >> 2] | 0;
   HEAP8[i5 >> 0] = -1;
   HEAP8[i5 + 1 >> 0] = -1;
   HEAP8[i5 + 2 >> 0] = -1;
   HEAP8[i5 + 4 >> 0] = 0;
   HEAP8[i5 + 5 >> 0] = 0;
   HEAP8[i5 + 6 >> 0] = 0;
  }
  if ((_SDL_SetPixelFormatPalette(HEAP32[i8 >> 2] | 0, i1) | 0) >= 0) _SDL_InvalidateMap(HEAP32[i9 + 52 >> 2] | 0);
  _SDL_FreePalette(i1);
  i1 = HEAP32[i6 >> 2] | 0;
 }
 do if (i1 | 0) {
  i1 = HEAP32[i7 >> 2] | 0;
  if (i1 | 0) {
   i1 = _SDL_malloc(Math_imul(HEAP32[i4 >> 2] | 0, i1) | 0) | 0;
   HEAP32[i9 + 20 >> 2] = i1;
   if (i1 | 0) {
    _SDL_memset(i1, 0, Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0) | 0;
    break;
   }
   _SDL_FreeSurface(i9);
   _SDL_Error(0) | 0;
   i9 = 0;
   return i9 | 0;
  }
 } while (0);
 i1 = _SDL_AllocBlitMap() | 0;
 HEAP32[i9 + 52 >> 2] = i1;
 if (!i1) {
  _SDL_FreeSurface(i9);
  i9 = 0;
  return i9 | 0;
 }
 if (HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] | 0) {
  i6 = i1 + 68 | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  i7 = i8 & -113 | 16;
  HEAP32[i6 >> 2] = i7;
  if ((i7 | 0) != (i8 | 0)) _SDL_InvalidateMap(i1);
 }
 HEAP32[i9 + 56 >> 2] = 1;
 return i9 | 0;
}

function _qsort(i2, i1, i7, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(208);
 i9 = i11 + 8 | 0;
 i10 = i11;
 i5 = Math_imul(i7, i1) | 0;
 i6 = i10;
 HEAP32[i6 >> 2] = 1;
 HEAP32[i6 + 4 >> 2] = 0;
 L1 : do if (i5 | 0) {
  i6 = 0 - i7 | 0;
  HEAP32[i9 + 4 >> 2] = i7;
  HEAP32[i9 >> 2] = i7;
  i3 = 2;
  i1 = i7;
  i4 = i7;
  while (1) {
   i1 = i1 + i7 + i4 | 0;
   HEAP32[i9 + (i3 << 2) >> 2] = i1;
   if (i1 >>> 0 < i5 >>> 0) {
    i12 = i4;
    i3 = i3 + 1 | 0;
    i4 = i1;
    i1 = i12;
   } else break;
  }
  i4 = i2 + i5 + i6 | 0;
  if (i4 >>> 0 > i2 >>> 0) {
   i5 = i4;
   i3 = 1;
   i1 = 1;
   do {
    do if ((i1 & 3 | 0) == 3) {
     _sift(i2, i7, i8, i3, i9);
     _shr(i10, 2);
     i3 = i3 + 2 | 0;
    } else {
     i1 = i3 + -1 | 0;
     if ((HEAP32[i9 + (i1 << 2) >> 2] | 0) >>> 0 < (i5 - i2 | 0) >>> 0) _sift(i2, i7, i8, i3, i9); else _trinkle(i2, i7, i8, i10, i3, 0, i9);
     if ((i3 | 0) == 1) {
      _shl(i10, 1);
      i3 = 0;
      break;
     } else {
      _shl(i10, i1);
      i3 = 1;
      break;
     }
    } while (0);
    i1 = HEAP32[i10 >> 2] | 1;
    HEAP32[i10 >> 2] = i1;
    i2 = i2 + i7 | 0;
   } while (i2 >>> 0 < i4 >>> 0);
  } else {
   i3 = 1;
   i1 = 1;
  }
  _trinkle(i2, i7, i8, i10, i3, 0, i9);
  i4 = i10 + 4 | 0;
  while (1) {
   if ((i3 | 0) == 1 & (i1 | 0) == 1) {
    if (!(HEAP32[i4 >> 2] | 0)) break L1;
   } else if ((i3 | 0) >= 2) {
    _shl(i10, 2);
    i12 = i3 + -2 | 0;
    HEAP32[i10 >> 2] = HEAP32[i10 >> 2] ^ 7;
    _shr(i10, 1);
    _trinkle(i2 + (0 - (HEAP32[i9 + (i12 << 2) >> 2] | 0)) + i6 | 0, i7, i8, i10, i3 + -1 | 0, 1, i9);
    _shl(i10, 1);
    i1 = HEAP32[i10 >> 2] | 1;
    HEAP32[i10 >> 2] = i1;
    i5 = i2 + i6 | 0;
    _trinkle(i5, i7, i8, i10, i12, 1, i9);
    i2 = i5;
    i3 = i12;
    continue;
   }
   i1 = _pntz(i10) | 0;
   _shr(i10, i1);
   i2 = i2 + i6 | 0;
   i3 = i1 + i3 | 0;
   i1 = HEAP32[i10 >> 2] | 0;
  }
 } while (0);
 STACKTOP = i11;
 return;
}

function _wcsrtombs(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i8;
 L1 : do if (!i3) {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i3 = i1;
   i1 = 0;
   do {
    if (i2 >>> 0 > 127) {
     i2 = _wcrtomb(i7, i2, 0) | 0;
     if ((i2 | 0) == -1) {
      i1 = -1;
      break L1;
     }
    } else i2 = 1;
    i1 = i2 + i1 | 0;
    i3 = i3 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) != 0);
  }
 } else {
  L9 : do if (i1 >>> 0 > 3) {
   i2 = i1;
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) break;
     i5 = _wcrtomb(i3, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (i2 >>> 0 <= 3) break L9;
   }
   HEAP8[i3 >> 0] = 0;
   HEAP32[i6 >> 2] = 0;
   i1 = i1 - i2 | 0;
   break L1;
  } else i2 = i1; while (0);
  if (i2) {
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) {
      i4 = 19;
      break;
     }
     i5 = _wcrtomb(i7, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = 22;
      break;
     }
     _wcrtomb(i3, HEAP32[i4 >> 2] | 0, 0) | 0;
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (!i2) break L1;
   }
   if ((i4 | 0) == 19) {
    HEAP8[i3 >> 0] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = i1 - i2 | 0;
    break;
   } else if ((i4 | 0) == 22) {
    i1 = i1 - i2 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZN6Entity12addComponentI17ColliderComponentJRA7_KcEEERT_DpOT0_(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i9;
 i7 = i9 + 12 | 0;
 i8 = __Znwj(40) | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 i4 = _strlen(i2) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 if (i4 >>> 0 < 11) {
  HEAP8[i3 + 11 >> 0] = i4;
  if (!i4) i1 = i3; else {
   i1 = i3;
   i5 = 6;
  }
 } else {
  i5 = i4 + 16 & -16;
  i1 = __Znwj(i5) | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = i5 | -2147483648;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = 6;
 }
 if ((i5 | 0) == 6) _memcpy(i1 | 0, i2 | 0, i4 | 0) | 0;
 HEAP8[i1 + i4 >> 0] = 0;
 HEAP32[i8 >> 2] = 2752;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i8 + 24 | 0, i3);
 if ((HEAP8[i3 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i3 >> 2] | 0);
 HEAP32[i8 + 4 >> 2] = i6;
 i1 = i8;
 HEAP32[i7 >> 2] = i1;
 i2 = i6 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i6 + 8 | 0, i7);
 if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
  i5 = HEAP32[19475] | 0;
  HEAP32[19475] = i5 + 1;
  HEAP32[19477] = i5;
 }
 HEAP32[i6 + 20 + (HEAP32[19477] << 2) >> 2] = i8;
 if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
  i5 = HEAP32[19475] | 0;
  HEAP32[19475] = i5 + 1;
  HEAP32[19477] = i5;
 }
 i1 = i6 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19477];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i8);
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 if (!i1) {
  STACKTOP = i9;
  return i8 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i9;
 return i8 | 0;
}

function __ZN6Entity12addComponentI17ColliderComponentJRA6_KcEEERT_DpOT0_(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i9;
 i7 = i9 + 12 | 0;
 i8 = __Znwj(40) | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 i4 = _strlen(i2) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 if (i4 >>> 0 < 11) {
  HEAP8[i3 + 11 >> 0] = i4;
  if (!i4) i1 = i3; else {
   i1 = i3;
   i5 = 6;
  }
 } else {
  i5 = i4 + 16 & -16;
  i1 = __Znwj(i5) | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = i5 | -2147483648;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = 6;
 }
 if ((i5 | 0) == 6) _memcpy(i1 | 0, i2 | 0, i4 | 0) | 0;
 HEAP8[i1 + i4 >> 0] = 0;
 HEAP32[i8 >> 2] = 2752;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i8 + 24 | 0, i3);
 if ((HEAP8[i3 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i3 >> 2] | 0);
 HEAP32[i8 + 4 >> 2] = i6;
 i1 = i8;
 HEAP32[i7 >> 2] = i1;
 i2 = i6 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i6 + 8 | 0, i7);
 if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
  i5 = HEAP32[19475] | 0;
  HEAP32[19475] = i5 + 1;
  HEAP32[19477] = i5;
 }
 HEAP32[i6 + 20 + (HEAP32[19477] << 2) >> 2] = i8;
 if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
  i5 = HEAP32[19475] | 0;
  HEAP32[19475] = i5 + 1;
  HEAP32[19477] = i5;
 }
 i1 = i6 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19477];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i8);
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 if (!i1) {
  STACKTOP = i9;
  return i8 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i9;
 return i8 | 0;
}

function __ZN6Entity12addComponentI17ColliderComponentJRA5_KcEEERT_DpOT0_(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i9;
 i7 = i9 + 12 | 0;
 i8 = __Znwj(40) | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 i4 = _strlen(i2) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 if (i4 >>> 0 < 11) {
  HEAP8[i3 + 11 >> 0] = i4;
  if (!i4) i1 = i3; else {
   i1 = i3;
   i5 = 6;
  }
 } else {
  i5 = i4 + 16 & -16;
  i1 = __Znwj(i5) | 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = i5 | -2147483648;
  HEAP32[i3 + 4 >> 2] = i4;
  i5 = 6;
 }
 if ((i5 | 0) == 6) _memcpy(i1 | 0, i2 | 0, i4 | 0) | 0;
 HEAP8[i1 + i4 >> 0] = 0;
 HEAP32[i8 >> 2] = 2752;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i8 + 24 | 0, i3);
 if ((HEAP8[i3 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i3 >> 2] | 0);
 HEAP32[i8 + 4 >> 2] = i6;
 i1 = i8;
 HEAP32[i7 >> 2] = i1;
 i2 = i6 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i6 + 8 | 0, i7);
 if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
  i5 = HEAP32[19475] | 0;
  HEAP32[19475] = i5 + 1;
  HEAP32[19477] = i5;
 }
 HEAP32[i6 + 20 + (HEAP32[19477] << 2) >> 2] = i8;
 if (!(HEAP8[75968] | 0)) if (___cxa_guard_acquire(75968) | 0) {
  i5 = HEAP32[19475] | 0;
  HEAP32[19475] = i5 + 1;
  HEAP32[19477] = i5;
 }
 i1 = i6 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19477];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i8 >> 2] >> 2] & 511](i8);
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 if (!i1) {
  STACKTOP = i9;
  return i8 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_SendKeyboardKey(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i8 = i9;
 if (!i6) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 switch (i5 << 24 >> 24) {
 case 1:
  {
   i1 = 79138 + i6 | 0;
   i7 = HEAP8[i1 >> 0] | 0;
   i4 = 768;
   i2 = i7;
   i7 = i7 << 24 >> 24 != 0 & 1;
   break;
  }
 case 0:
  {
   i2 = 79138 + i6 | 0;
   i4 = 769;
   i1 = i2;
   i2 = HEAP8[i2 >> 0] | 0;
   i7 = 0;
   break;
  }
 default:
  {
   i8 = 0;
   STACKTOP = i9;
   return i8 | 0;
  }
 }
 if (!(i7 << 24 >> 24 ? 1 : i2 << 24 >> 24 != i5 << 24 >> 24)) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP8[i1 >> 0] = i5;
 i3 = HEAP32[79652 + (i6 << 2) >> 2] | 0;
 switch (i3 | 0) {
 case 1073742048:
  {
   i1 = 64;
   break;
  }
 case 1073742052:
  {
   i1 = 128;
   break;
  }
 case 1073742049:
  {
   i1 = 1;
   break;
  }
 case 1073742053:
  {
   i1 = 2;
   break;
  }
 case 1073742050:
  {
   i1 = 256;
   break;
  }
 case 1073742054:
  {
   i1 = 512;
   break;
  }
 case 1073742051:
  {
   i1 = 1024;
   break;
  }
 case 1073742055:
  {
   i1 = 2048;
   break;
  }
 case 1073742081:
  {
   i1 = 16384;
   break;
  }
 default:
  i1 = 0;
 }
 if ((i4 | 0) == 768) {
  i2 = HEAP16[39568] | 0;
  switch (i3 | 0) {
  case 1073741907:
   {
    i1 = (i2 ^ 4096) & 65535;
    break;
   }
  case 1073741881:
   {
    i1 = (i2 ^ 8192) & 65535;
    break;
   }
  default:
   i1 = i1 | i2 & 65535;
  }
  i1 = i1 & 65535;
 } else {
  i1 = (i1 ^ 65535) & (HEAPU16[39568] | 0) & 65535;
  i2 = i1;
 }
 HEAP16[39568] = i1;
 if ((_SDL_EventState(i4, -1) | 0) << 24 >> 24 != 1) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i8 >> 2] = i4;
 HEAP8[i8 + 12 >> 0] = i5;
 HEAP8[i8 + 13 >> 0] = i7;
 i1 = i8 + 16 | 0;
 HEAP32[i1 >> 2] = i6;
 HEAP32[i1 + 4 >> 2] = i3;
 HEAP16[i1 + 8 >> 1] = i2;
 i1 = HEAP32[19783] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i8 + 8 >> 2] = i1;
 i8 = (_SDL_PushEvent(i8) | 0) > 0 & 1;
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_GetWindowDisplayMode(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i8 + 24 | 0;
 i3 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i6 = i8 + 28 | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i8) | 0;
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (i4 | 0) if ((HEAP32[i4 >> 2] | 0) == (i1 + 280 | 0)) {
  if (!i5) {
   HEAP32[i3 >> 2] = 47030;
   i7 = _SDL_SetError(59509, i3) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  i1 = i4 + 72 | 0;
  HEAP32[i6 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i6 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i6 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i6 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i6 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
  i1 = i6 + 4 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = HEAP32[i4 + 64 >> 2];
  i1 = i6 + 8 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) HEAP32[i1 >> 2] = HEAP32[i4 + 68 >> 2];
  i1 = _SDL_GetWindowDisplayIndex(i4) | 0;
  if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[19487] | 0) + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
  if ((HEAP32[i4 + 48 >> 2] & 4097 | 0) == 4097) {
   i7 = i1 + 16 | 0;
   HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i6 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i6 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i6 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i6 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
  } else {
   i1 = _SDL_GetWindowDisplayIndex(i4) | 0;
   if ((i1 | 0) > -1) i1 = (HEAP32[(HEAP32[19487] | 0) + 268 >> 2] | 0) + (i1 * 68 | 0) | 0; else i1 = 0;
   if (!(_SDL_GetClosestDisplayModeForDisplay(i1, i6, i6) | 0)) {
    i7 = _SDL_SetError(47035, i7) | 0;
    STACKTOP = i8;
    return i7 | 0;
   }
  };
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i5 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i5 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i5 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i5 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SetError(59973, i2) | 0;
 i7 = -1;
 STACKTOP = i8;
 return i7 | 0;
}

function _png_handle_PLTE(i9, i8, i3) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i10 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 784 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(784);
 i6 = i11 + 8 | 0;
 i7 = i11;
 i1 = i9 + 208 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) _png_chunk_error(i9, 63643);
 if (i2 & 2 | 0) _png_chunk_error(i9, 63980);
 if (i2 & 4 | 0) {
  _png_crc_finish(i9, i3) | 0;
  _png_chunk_benign_error(i9, 64026);
  STACKTOP = i11;
  return;
 }
 HEAP32[i1 >> 2] = i2 | 2;
 i1 = i9 + 435 | 0;
 if (!(HEAP8[i1 >> 0] & 2)) {
  _png_crc_finish(i9, i3) | 0;
  _png_chunk_benign_error(i9, 64977);
  STACKTOP = i11;
  return;
 }
 if (!(i3 >>> 0 < 769 & ((i3 >>> 0) % 3 | 0 | 0) == 0)) {
  _png_crc_finish(i9, i3) | 0;
  if ((HEAP8[i1 >> 0] | 0) == 3) _png_chunk_error(i9, 63990);
  _png_chunk_benign_error(i9, 63990);
  STACKTOP = i11;
  return;
 }
 i5 = (i3 >>> 0) / 3 | 0;
 if (i3 >>> 0 > 2) {
  i3 = i7 + 1 | 0;
  i4 = i7 + 2 | 0;
  i1 = 0;
  i2 = i6;
  while (1) {
   _png_read_data(i9, i7, 3);
   _png_calculate_crc(i9, i7, 3);
   HEAP8[i2 >> 0] = HEAP8[i7 >> 0] | 0;
   HEAP8[i2 + 1 >> 0] = HEAP8[i3 >> 0] | 0;
   HEAP8[i2 + 2 >> 0] = HEAP8[i4 >> 0] | 0;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i5 | 0)) break; else i2 = i2 + 3 | 0;
  }
 }
 _png_crc_finish(i9, 0) | 0;
 _png_set_PLTE(i9, i8, i6, i5);
 i3 = i9 + 428 | 0;
 do if (!(HEAP16[i3 >> 1] | 0)) {
  if (!i8) {
   STACKTOP = i11;
   return;
  }
  i2 = i8 + 8 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 & 16) {
   HEAP16[i3 >> 1] = 0;
   i1 = i2;
   i10 = 22;
  }
 } else {
  HEAP16[i3 >> 1] = 0;
  if (i8 | 0) {
   i1 = i8 + 8 | 0;
   i10 = 22;
   break;
  }
  _png_chunk_benign_error(i9, 65002);
  STACKTOP = i11;
  return;
 } while (0);
 if ((i10 | 0) == 22) {
  HEAP16[i8 + 22 >> 1] = 0;
  _png_chunk_benign_error(i9, 65002);
  i2 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 if (i1 & 64 | 0) _png_chunk_benign_error(i9, 65021);
 if (!(HEAP32[i2 >> 2] & 32)) {
  STACKTOP = i11;
  return;
 }
 _png_chunk_benign_error(i9, 65040);
 STACKTOP = i11;
 return;
}

function _SW_RenderCopy(i8, i6, i10, i9) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, f2 = f0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i11 = i12;
 i4 = i8 + 320 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (!i1) {
  i3 = i5 + 4 | 0;
  i13 = HEAP32[i3 >> 2] | 0;
  HEAP32[i5 >> 2] = i13;
  i1 = i13;
  if (!i13) {
   i1 = _SDL_GetWindowSurface(HEAP32[i8 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i3 >> 2] = i1;
    HEAP32[i5 >> 2] = i1;
    i3 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
    if (!i3) {
     i7 = 10;
     break L1;
    }
    _SDL_SetClipRect(i3, i8 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i4 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i8 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i8 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if (!i1) {
   i13 = -1;
   STACKTOP = i12;
   return i13 | 0;
  } else {
   i5 = HEAP32[i6 + 68 >> 2] | 0;
   i4 = i1;
  }
 } else i7 = 10; while (0);
 if ((i7 | 0) == 10) {
  i5 = HEAP32[i6 + 68 >> 2] | 0;
  i4 = i1;
 }
 i3 = HEAP32[i8 + 216 >> 2] | 0;
 i1 = HEAP32[i8 + 220 >> 2] | 0;
 if (!(i3 | i1)) {
  HEAP32[i11 >> 2] = ~~Math_fround(HEAPF32[i9 >> 2]);
  f2 = Math_fround(HEAPF32[i9 + 4 >> 2]);
 } else {
  f2 = Math_fround(i3 | 0);
  HEAP32[i11 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i9 >> 2]) + f2);
  f2 = Math_fround(i1 | 0);
  f2 = Math_fround(Math_fround(HEAPF32[i9 + 4 >> 2]) + f2);
 }
 HEAP32[i11 + 4 >> 2] = ~~f2;
 i13 = ~~Math_fround(HEAPF32[i9 + 8 >> 2]);
 HEAP32[i11 + 8 >> 2] = i13;
 i1 = ~~Math_fround(HEAPF32[i9 + 12 >> 2]);
 HEAP32[i11 + 12 >> 2] = i1;
 if ((HEAP32[i10 + 8 >> 2] | 0) == (i13 | 0)) if ((HEAP32[i10 + 12 >> 2] | 0) == (i1 | 0)) {
  i13 = _SDL_UpperBlit(i5, i10, i4, i11) | 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 _SDL_SetSurfaceRLE(i4, 0) | 0;
 i13 = _SDL_UpperBlitScaled(i5, i10, i4, i11) | 0;
 STACKTOP = i12;
 return i13 | 0;
}

function _SDL_Blit_RGB888_RGB888_Blend(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i12 + 52 >> 2] | 0;
 i14 = i12 + 28 | 0;
 i17 = HEAP32[i14 >> 2] | 0;
 HEAP32[i14 >> 2] = i17 + -1;
 if (!i17) return;
 i15 = i12 + 20 | 0;
 i16 = i12 + 24 | 0;
 i17 = i12 + 12 | 0;
 i13 = i12 + 32 | 0;
 i11 = i1 & 112;
 i2 = HEAP32[i12 >> 2] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i10 = (i11 & 127) == 64;
 i8 = i2;
 i9 = i3;
 while (1) {
  i7 = HEAP32[i16 >> 2] | 0;
  i1 = i7 + -1 | 0;
  if (i7 | 0) switch (i11 & 127) {
  case 16:
   {
    while (1) {
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  case 32:
   {
    while (1) {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i6 = (i4 >>> 16 & 255) + (i7 >>> 16 & 255) | 0;
     i5 = (i4 >>> 8 & 255) + (i7 >>> 8 & 255) | 0;
     i7 = (i4 & 255) + (i7 & 255) | 0;
     HEAP32[i3 >> 2] = (i5 >>> 0 < 255 ? i5 : 255) << 8 | (i6 >>> 0 < 255 ? i6 : 255) << 16 | (i7 >>> 0 < 255 ? i7 : 255);
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  default:
   while (1) {
    i7 = HEAP32[i2 >> 2] | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    i4 = i5 >>> 16 & 255;
    i6 = i5 >>> 8 & 255;
    i5 = i5 & 255;
    if (i10) {
     i5 = ((Math_imul(i5, i7 & 255) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i7 >>> 8 & 255) | 0) >>> 0) / 255 | 0;
     i4 = ((Math_imul(i4, i7 >>> 16 & 255) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i3 >> 2] = i6 << 8 | i4 << 16 | i5;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
  }
  i2 = i8 + (HEAP32[i17 >> 2] | 0) | 0;
  i1 = i9 + (HEAP32[i13 >> 2] | 0) | 0;
  i9 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i9 + -1;
  if (!i9) break; else {
   i8 = i2;
   i9 = i1;
   i3 = i1;
  }
 }
 HEAP32[i12 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Blend(i12) {
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i1 = HEAP32[i12 + 52 >> 2] | 0;
 i14 = i12 + 28 | 0;
 i17 = HEAP32[i14 >> 2] | 0;
 HEAP32[i14 >> 2] = i17 + -1;
 if (!i17) return;
 i15 = i12 + 20 | 0;
 i16 = i12 + 24 | 0;
 i17 = i12 + 12 | 0;
 i13 = i12 + 32 | 0;
 i11 = i1 & 112;
 i2 = HEAP32[i12 >> 2] | 0;
 i3 = HEAP32[i15 >> 2] | 0;
 i10 = (i11 & 127) == 64;
 i8 = i2;
 i9 = i3;
 while (1) {
  i7 = HEAP32[i16 >> 2] | 0;
  i1 = i7 + -1 | 0;
  if (i7 | 0) switch (i11 & 127) {
  case 16:
   {
    while (1) {
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  case 32:
   {
    while (1) {
     i7 = HEAP32[i2 >> 2] | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     i6 = (i4 & 255) + (i7 & 255) | 0;
     i5 = (i4 >>> 8 & 255) + (i7 >>> 8 & 255) | 0;
     i7 = (i4 >>> 16 & 255) + (i7 >>> 16 & 255) | 0;
     HEAP32[i3 >> 2] = (i5 >>> 0 < 255 ? i5 : 255) << 8 | (i6 >>> 0 < 255 ? i6 : 255) | (i7 >>> 0 < 255 ? i7 : 255) << 16;
     if (!i1) break; else {
      i3 = i3 + 4 | 0;
      i2 = i2 + 4 | 0;
      i1 = i1 + -1 | 0;
     }
    }
    break;
   }
  default:
   while (1) {
    i7 = HEAP32[i2 >> 2] | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    i5 = i4 >>> 16 & 255;
    i6 = i4 >>> 8 & 255;
    i4 = i4 & 255;
    if (i10) {
     i5 = ((Math_imul(i5, i7 >>> 16 & 255) | 0) >>> 0) / 255 | 0;
     i6 = ((Math_imul(i6, i7 >>> 8 & 255) | 0) >>> 0) / 255 | 0;
     i4 = ((Math_imul(i4, i7 & 255) | 0) >>> 0) / 255 | 0;
    }
    HEAP32[i3 >> 2] = i6 << 8 | i4 | i5 << 16;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
  }
  i2 = i8 + (HEAP32[i17 >> 2] | 0) | 0;
  i1 = i9 + (HEAP32[i13 >> 2] | 0) | 0;
  i9 = HEAP32[i14 >> 2] | 0;
  HEAP32[i14 >> 2] = i9 + -1;
  if (!i9) break; else {
   i8 = i2;
   i9 = i1;
   i3 = i1;
  }
 }
 HEAP32[i12 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _png_set_pCAL(i10, i11, i4, i5, i6, i7, i12, i8, i13) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i9 = 0;
 if ((i10 | 0) == 0 | (i11 | 0) == 0 | (i4 | 0) == 0 | (i8 | 0) == 0) return;
 i9 = (i12 | 0) > 0;
 if (i9 & (i13 | 0) == 0) return;
 i3 = (_strlen(i4) | 0) + 1 | 0;
 if (i7 >>> 0 > 3) _png_error(i10, 64294);
 if (i12 >>> 0 > 255) _png_error(i10, 64321);
 L13 : do if (i12 | 0) {
  i1 = 0;
  while (1) {
   i2 = HEAP32[i13 + (i1 << 2) >> 2] | 0;
   if (!i2) {
    i1 = 11;
    break;
   }
   i1 = i1 + 1 | 0;
   if (!(_png_check_fp_string(i2, _strlen(i2) | 0) | 0)) {
    i1 = 11;
    break;
   }
   if ((i1 | 0) >= (i12 | 0)) break L13;
  }
  if ((i1 | 0) == 11) _png_error(i10, 64350);
 } while (0);
 i1 = _png_malloc_warn(i10, i3) | 0;
 HEAP32[i11 + 208 >> 2] = i1;
 if (!i1) {
  _png_warning(i10, 64384);
  return;
 }
 _memcpy(i1 | 0, i4 | 0, i3 | 0) | 0;
 HEAP32[i11 + 212 >> 2] = i5;
 HEAP32[i11 + 216 >> 2] = i6;
 HEAP8[i11 + 228 >> 0] = i7;
 HEAP8[i11 + 229 >> 0] = i12;
 i1 = (_strlen(i8) | 0) + 1 | 0;
 i2 = _png_malloc_warn(i10, i1) | 0;
 HEAP32[i11 + 220 >> 2] = i2;
 if (!i2) {
  _png_warning(i10, 64421);
  return;
 }
 _memcpy(i2 | 0, i8 | 0, i1 | 0) | 0;
 i1 = (i12 << 2) + 4 | 0;
 i2 = _png_malloc_warn(i10, i1) | 0;
 i5 = i11 + 224 | 0;
 HEAP32[i5 >> 2] = i2;
 if (!i2) {
  _png_warning(i10, 64456);
  return;
 }
 _memset(i2 | 0, 0, i1 | 0) | 0;
 L34 : do if (i9) {
  i1 = 0;
  while (1) {
   i2 = i13 + (i1 << 2) | 0;
   i3 = (_strlen(HEAP32[i2 >> 2] | 0) | 0) + 1 | 0;
   i4 = _png_malloc_warn(i10, i3) | 0;
   HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] = i4;
   i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + (i1 << 2) >> 2] | 0;
   if (!i4) break;
   _memcpy(i4 | 0, HEAP32[i2 >> 2] | 0, i3 | 0) | 0;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i12 | 0)) break L34;
  }
  _png_warning(i10, 64492);
  return;
 } while (0);
 i13 = i11 + 8 | 0;
 HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1024;
 i13 = i11 + 232 | 0;
 HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 128;
 return;
}

function _SDL_CreateRenderer(i6, i2, i1) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i8 + 32 | 0;
 i3 = i8 + 24 | 0;
 i5 = i8 + 16 | 0;
 if (!i6) {
  _SDL_SetError(59973, i8) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (_SDL_GetWindowData(i6, 59371) | 0) {
  _SDL_SetError(59988, i8 + 8 | 0) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 do if (!(_SDL_GetHint(60028) | 0)) i4 = i1; else if (!(_SDL_GetHintBoolean(60028, 1) | 0)) {
  i4 = i1 & -5;
  break;
 } else {
  i4 = i1 | 4;
  break;
 } while (0);
 L15 : do if ((i2 | 0) < 0) {
  i1 = _SDL_GetHint(60045) | 0;
  do if (i1 | 0) {
   if (!(_SDL_strcasecmp(i1, HEAP32[774] | 0) | 0)) i1 = 3092; else if (!(_SDL_strcasecmp(i1, HEAP32[3793] | 0) | 0)) i1 = 15168; else break;
   i1 = FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 63](i6, i4) | 0;
   if (i1 | 0) break L15;
  } while (0);
  if ((HEAP32[775] & i4 | 0) == (i4 | 0)) {
   i1 = FUNCTION_TABLE_iii[HEAP32[773] & 63](i6, i4) | 0;
   if (i1 | 0) break;
  }
  if ((HEAP32[3794] & i4 | 0) == (i4 | 0)) {
   i1 = FUNCTION_TABLE_iii[HEAP32[3792] & 63](i6, i4) | 0;
   if (i1 | 0) break;
  }
  _SDL_SetError(60063, i5) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 } else if ((i2 | 0) > 1) {
  HEAP32[i3 >> 2] = 1;
  _SDL_SetError(60100, i3) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 } else {
  i1 = FUNCTION_TABLE_iii[HEAP32[HEAP32[16256 + (i2 << 2) >> 2] >> 2] & 63](i6, i4) | 0;
  if (!i1) i1 = 0; else break;
  STACKTOP = i8;
  return i1 | 0;
 } while (0);
 HEAP32[i1 >> 2] = 85556;
 HEAP32[i1 + 188 >> 2] = i6;
 HEAPF32[i1 + 288 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 292 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 192 >> 2] = ((_SDL_GetWindowFlags(i6) | 0) & 72 | 0) != 0 & 1;
 _SDL_SetWindowData(i6, 59371, i1) | 0;
 _SDL_RenderSetViewport(i1, 0) | 0;
 _SDL_AddEventWatch(42, i1);
 HEAP32[i7 >> 2] = HEAP32[i1 + 104 >> 2];
 _SDL_LogInfo(6, 60143, i7);
 i7 = i1;
 STACKTOP = i8;
 return i7 | 0;
}

function _EMSCRIPTENAUDIO_OpenDevice(i10, i1, i2, i11) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i11 = i11 | 0;
 var d3 = 0.0, i4 = 0, f5 = f0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i9 + 8 | 0;
 if ((_emscripten_asm_const_ii(9, i11 | 0) | 0) < 0) {
  i11 = _SDL_SetError(53982, i9) | 0;
  STACKTOP = i9;
  return i11 | 0;
 }
 i8 = i10 + 4 | 0;
 i2 = i10 + 8 | 0;
 i1 = _SDL_FirstAudioFormat(HEAP16[i2 >> 1] | 0) | 0;
 L5 : do if (i1 << 16 >> 16) {
  while (1) {
   if (i1 << 16 >> 16 == -32480) break;
   i1 = _SDL_NextAudioFormat() | 0;
   if (!(i1 << 16 >> 16)) break L5;
  }
  HEAP16[i2 >> 1] = -32480;
  _SDL_NextAudioFormat() | 0;
  i1 = _SDL_malloc(20) | 0;
  i7 = i10 + 180 | 0;
  HEAP32[i7 >> 2] = i1;
  if (!i1) {
   i11 = _SDL_Error(0) | 0;
   STACKTOP = i9;
   return i11 | 0;
  }
  _SDL_memset(i1, 0, 20) | 0;
  i4 = _emscripten_asm_const_i(10) | 0;
  i1 = HEAP32[i8 >> 2] | 0;
  i6 = i10 + 12 | 0;
  if ((i1 | 0) != (i4 | 0)) {
   i2 = HEAP16[i6 >> 1] | 0;
   L16 : do if (i2 << 16 >> 16) {
    f5 = Math_fround(i4 | 0);
    d3 = +Math_fround(Math_fround(Math_fround(i2 & 65535) / f5) * Math_fround(i1 | 0));
    if (!(+_SDL_floor(d3) == d3)) {
     i1 = i2 & 65535;
     do {
      if ((i1 | 0) <= 1) break L16;
      i1 = i1 + -1 | 0;
      d3 = +Math_fround(Math_fround(Math_fround(i1 | 0) / f5) * Math_fround(HEAP32[i8 >> 2] | 0));
     } while (!(+_SDL_floor(d3) == d3));
    }
    i2 = ~~+_SDL_floor(d3) >>> 0;
    HEAP32[(HEAP32[i7 >> 2] | 0) + 8 >> 2] = i2;
   } while (0);
   HEAP32[i8 >> 2] = i4;
  }
  _SDL_CalculateAudioSpec(i8);
  i2 = HEAPU8[i10 + 10 >> 0] | 0;
  i1 = HEAPU16[i6 >> 1] | 0;
  if (!i11) {
   _emscripten_asm_const_iiiii(12, i2 | 0, i1 | 0, 325, i10 | 0) | 0;
   i11 = 0;
   STACKTOP = i9;
   return i11 | 0;
  } else {
   _emscripten_asm_const_iiiii(11, i2 | 0, i1 | 0, 324, i10 | 0) | 0;
   i11 = 0;
   STACKTOP = i9;
   return i11 | 0;
  }
 } while (0);
 i11 = _SDL_SetError(54014, i4) | 0;
 STACKTOP = i9;
 return i11 | 0;
}

function __ZNSt3__26vectorINS_10unique_ptrI6EntityNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE5eraseENS_11__wrap_iterIPKS5_EESC_(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i10 = i10 + (i3 - i10 >> 2 << 2) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) return i10 | 0;
 i1 = i10 + (i1 - i3 >> 2 << 2) | 0;
 i9 = i4 + 4 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) == (i8 | 0)) i6 = i10; else {
  i6 = i10;
  do {
   i5 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   i7 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i5;
   if (i7 | 0) {
    i4 = i7 + 8 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    if (i2 | 0) {
     i5 = i7 + 12 | 0;
     i3 = HEAP32[i5 >> 2] | 0;
     if ((i3 | 0) != (i2 | 0)) {
      do {
       i11 = i3 + -4 | 0;
       HEAP32[i5 >> 2] = i11;
       i3 = HEAP32[i11 >> 2] | 0;
       HEAP32[i11 >> 2] = 0;
       if (i3 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 511](i3);
       i3 = HEAP32[i5 >> 2] | 0;
      } while ((i3 | 0) != (i2 | 0));
      i2 = HEAP32[i4 >> 2] | 0;
     }
     __ZdlPv(i2);
    }
    __ZdlPv(i7);
   }
   i1 = i1 + 4 | 0;
   i6 = i6 + 4 | 0;
  } while ((i1 | 0) != (i8 | 0));
  i1 = HEAP32[i9 >> 2] | 0;
 }
 if ((i1 | 0) == (i6 | 0)) return i10 | 0;
 do {
  i11 = i1 + -4 | 0;
  HEAP32[i9 >> 2] = i11;
  i5 = HEAP32[i11 >> 2] | 0;
  HEAP32[i11 >> 2] = 0;
  if (i5 | 0) {
   i3 = i5 + 8 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 | 0) {
    i4 = i5 + 12 | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    if ((i2 | 0) != (i1 | 0)) {
     do {
      i11 = i2 + -4 | 0;
      HEAP32[i4 >> 2] = i11;
      i2 = HEAP32[i11 >> 2] | 0;
      HEAP32[i11 >> 2] = 0;
      if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 511](i2);
      i2 = HEAP32[i4 >> 2] | 0;
     } while ((i2 | 0) != (i1 | 0));
     i1 = HEAP32[i3 >> 2] | 0;
    }
    __ZdlPv(i1);
   }
   __ZdlPv(i5);
  }
  i1 = HEAP32[i9 >> 2] | 0;
 } while ((i1 | 0) != (i6 | 0));
 return i10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i2, i3, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i1 = i13 + 40 | 0;
 i12 = i13 + 16 | 0;
 i8 = i13 + 8 | 0;
 i9 = i13 + 12 | 0;
 i10 = i13 + 4 | 0;
 i11 = i13;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  HEAP32[i8 >> 2] = -1;
  i11 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i3 >> 2] = FUNCTION_TABLE_iiiiiii[i11 & 63](i2, i12, i1, i5, i6, i8) | 0;
  switch (HEAP32[i8 >> 2] | 0) {
  case 0:
   {
    HEAP8[i7 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[i7 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[i7 >> 0] = 1;
    HEAP32[i6 >> 2] = 4;
   }
  }
  i1 = HEAP32[i3 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83652) | 0;
  __ZNSt3__26localeD2Ev(i1);
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83660) | 0;
  __ZNSt3__26localeD2Ev(i1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i12, i2);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i12 + 12 | 0, i2);
  HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
  i2 = i12 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP8[i7 >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i1, i12, i2, i10, i6, 1) | 0) == (i12 | 0) & 1;
  i1 = HEAP32[i3 >> 2] | 0;
  do {
   i2 = i2 + -12 | 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i2);
  } while ((i2 | 0) != (i12 | 0));
 }
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i2, i3, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i1 = i13 + 40 | 0;
 i12 = i13 + 16 | 0;
 i8 = i13 + 8 | 0;
 i9 = i13 + 12 | 0;
 i10 = i13 + 4 | 0;
 i11 = i13;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  HEAP32[i8 >> 2] = -1;
  i11 = HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i12 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i3 >> 2] = FUNCTION_TABLE_iiiiiii[i11 & 63](i2, i12, i1, i5, i6, i8) | 0;
  switch (HEAP32[i8 >> 2] | 0) {
  case 0:
   {
    HEAP8[i7 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[i7 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[i7 >> 0] = 1;
    HEAP32[i6 >> 2] = 4;
   }
  }
  i1 = HEAP32[i3 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i10 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83620) | 0;
  __ZNSt3__26localeD2Ev(i1);
  __ZNKSt3__28ios_base6getlocEv(i1, i5);
  i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i1, 83636) | 0;
  __ZNSt3__26localeD2Ev(i1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i12, i2);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 127](i12 + 12 | 0, i2);
  HEAP32[i11 >> 2] = HEAP32[i4 >> 2];
  i2 = i12 + 24 | 0;
  HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
  HEAP8[i7 >> 0] = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i3, i1, i12, i2, i10, i6, 1) | 0) == (i12 | 0) & 1;
  i1 = HEAP32[i3 >> 2] | 0;
  do {
   i2 = i2 + -12 | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i2);
  } while ((i2 | 0) != (i12 | 0));
 }
 STACKTOP = i13;
 return i1 | 0;
}

function _SDL_Blit_BGR888_ARGB8888_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i17 = i15 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i15 + 20 | 0;
 i19 = i15 + 24 | 0;
 i20 = i15 + 12 | 0;
 i16 = i15 + 32 | 0;
 i14 = i1 & 112;
 i11 = (i14 & 127) == 16;
 i2 = HEAP32[i15 >> 2] | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i12 = i2;
 i13 = i3;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i1 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i11) while (1) {
    i10 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i10 & 65280 | i10 << 16 | i10 >>> 16 & 255 | -16777216;
    if (!i1) break L6; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
   while (1) {
    i9 = HEAP32[i2 >> 2] | 0;
    i6 = i9 >>> 16 & 255;
    i8 = i9 >>> 8 & 255;
    i9 = i9 & 255;
    i10 = HEAP32[i3 >> 2] | 0;
    i4 = i10 >>> 16 & 255;
    i5 = i10 >>> 8 & 255;
    i7 = i10 & 255;
    i10 = i10 & -16777216;
    switch (i14 & 127) {
    case 64:
     {
      i7 = ((Math_imul(i6, i7) | 0) >>> 0) / 255 | 0;
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i4 = i4 + i9 | 0;
      i5 = i5 + i8 | 0;
      i7 = i6 + i7 | 0;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i3 >> 2] = i5 << 8 | i4 << 16 | i7 | i10;
    if (!i1) break L6; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
  } while (0);
  i2 = i12 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i16 >> 2] | 0) | 0;
  i13 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i13 + -1;
  if (!i13) break; else {
   i12 = i2;
   i13 = i1;
   i3 = i1;
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function _SDL_BlendPoints(i13, i14, i15, i16, i1, i2, i4, i17) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i17 = i17 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i18 = 0;
 i7 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i18;
 if (!i13) i1 = 48302; else {
  i5 = HEAP32[i13 + 4 >> 2] | 0;
  i6 = HEAP8[i5 + 8 >> 0] | 0;
  if ((i6 & 255) < 8) i1 = 48378; else {
   if ((i16 + -1 | 0) >>> 0 < 2) {
    i11 = i17 & 255;
    i12 = (((Math_imul(i11, i1 & 255) | 0) >>> 0) / 255 | 0) & 255;
    i2 = (((Math_imul(i11, i2 & 255) | 0) >>> 0) / 255 | 0) & 255;
    i4 = (((Math_imul(i11, i4 & 255) | 0) >>> 0) / 255 | 0) & 255;
   } else i12 = i1;
   switch (i6 << 24 >> 24) {
   case 15:
    {
     if ((HEAP32[i5 + 12 >> 2] | 0) == 31744) i11 = 16; else i7 = 10;
     break;
    }
   case 16:
    {
     if ((HEAP32[i5 + 12 >> 2] | 0) == 63488) i11 = 17; else i7 = 10;
     break;
    }
   case 32:
    {
     if ((HEAP32[i5 + 12 >> 2] | 0) == 16711680) i11 = (HEAP32[i5 + 24 >> 2] | 0) == 0 ? 13 : 12; else i7 = 10;
     break;
    }
   default:
    i7 = 10;
   }
   if ((i7 | 0) == 10) i11 = (HEAP32[i5 + 24 >> 2] | 0) == 0 ? 15 : 14;
   i7 = HEAP32[i13 + 36 >> 2] | 0;
   i8 = (HEAP32[i13 + 44 >> 2] | 0) + i7 | 0;
   i9 = HEAP32[i13 + 40 >> 2] | 0;
   i10 = (HEAP32[i13 + 48 >> 2] | 0) + i9 | 0;
   if ((i15 | 0) > 0) {
    i6 = 0;
    i1 = 0;
   } else {
    i17 = 0;
    STACKTOP = i18;
    return i17 | 0;
   }
   do {
    i5 = i14 + (i6 << 3) | 0;
    i3 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i5 | 0) < (i10 | 0) & (((i3 | 0) >= (i8 | 0) | (i3 | 0) < (i7 | 0) | (i5 | 0) < (i9 | 0)) ^ 1)) i1 = FUNCTION_TABLE_iiiiiiiii[i11 & 31](i13, i3, i5, i16, i12, i2, i4, i17) | 0;
    i6 = i6 + 1 | 0;
   } while ((i6 | 0) != (i15 | 0));
   STACKTOP = i18;
   return i1 | 0;
  }
 }
 i17 = _SDL_SetError(i1, i3) | 0;
 STACKTOP = i18;
 return i17 | 0;
}

function _png_handle_IHDR(i10, i11, i1) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i12;
 i2 = i10 + 208 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 & 1 | 0) _png_chunk_error(i10, 64026);
 if ((i1 | 0) != 13) _png_chunk_error(i10, 63990);
 HEAP32[i2 >> 2] = i3 | 1;
 _png_read_data(i10, i4, 13);
 _png_calculate_crc(i10, i4, 13);
 _png_crc_finish(i10, 0) | 0;
 i3 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
 if ((i3 | 0) < 0) _png_error(i10, 63585);
 i5 = (HEAPU8[i4 + 5 >> 0] | 0) << 16 | (HEAPU8[i4 + 4 >> 0] | 0) << 24 | (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0);
 if ((i5 | 0) < 0) _png_error(i10, 63585);
 i15 = HEAP8[i4 + 8 >> 0] | 0;
 i6 = i15 & 255;
 i1 = HEAP8[i4 + 9 >> 0] | 0;
 i7 = i1 & 255;
 i13 = HEAP8[i4 + 10 >> 0] | 0;
 i8 = i13 & 255;
 i14 = HEAP8[i4 + 11 >> 0] | 0;
 i9 = i14 & 255;
 i4 = HEAP8[i4 + 12 >> 0] | 0;
 i2 = i4 & 255;
 HEAP32[i10 + 348 >> 2] = i3;
 HEAP32[i10 + 352 >> 2] = i5;
 HEAP8[i10 + 436 >> 0] = i15;
 HEAP8[i10 + 432 >> 0] = i4;
 HEAP8[i10 + 435 >> 0] = i1;
 HEAP8[i10 + 712 >> 0] = i14;
 HEAP8[i10 + 744 >> 0] = i13;
 switch (i1 << 24 >> 24) {
 case 6:
  {
   i1 = 4;
   break;
  }
 case 4:
  {
   i1 = 2;
   break;
  }
 case 2:
  {
   i1 = 3;
   break;
  }
 default:
  i1 = 1;
 }
 HEAP8[i10 + 439 >> 0] = i1;
 i1 = Math_imul(i6, i1 & 255) | 0;
 HEAP8[i10 + 438 >> 0] = i1;
 i1 = i1 & 255;
 if (i1 >>> 0 > 7) {
  i14 = Math_imul(i1 >>> 3, i3) | 0;
  i15 = i10 + 364 | 0;
  HEAP32[i15 >> 2] = i14;
  _png_set_IHDR(i10, i11, i3, i5, i6, i7, i2, i8, i9);
  STACKTOP = i12;
  return;
 } else {
  i14 = ((Math_imul(i1, i3) | 0) + 7 | 0) >>> 3;
  i15 = i10 + 364 | 0;
  HEAP32[i15 >> 2] = i14;
  _png_set_IHDR(i10, i11, i3, i5, i6, i7, i2, i8, i9);
  STACKTOP = i12;
  return;
 }
}

function _SDL_InitSubSystem(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4;
 _SDL_ClearError();
 i2 = i1 >>> 4 & 512 | i1;
 i2 = (i2 & 544 | 0) == 0 ? i2 : i2 | 16384;
 _SDL_TicksInit();
 if (i2 & 16384 | 0) {
  i1 = HEAP8[87620] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_StartEventLoop() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   _SDL_QuitInit() | 0;
   i1 = HEAP8[87620] | 0;
   break;
  } while (0);
  HEAP8[87620] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 1 | 0) {
  i1 = HEAP8[87606] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_TimerInit() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[87606] | 0;
   break;
  } while (0);
  HEAP8[87606] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 32 | 0) {
  i1 = HEAP8[87611] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_VideoInit(0) | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[87611] | 0;
   break;
  } while (0);
  HEAP8[87611] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 16 | 0) {
  i1 = HEAP8[87610] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_AudioInit(0) | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[87610] | 0;
   break;
  } while (0);
  HEAP8[87610] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 512 | 0) {
  i1 = HEAP8[87615] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_JoystickInit() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[87615] | 0;
   break;
  } while (0);
  HEAP8[87615] = i1 + 1 << 24 >> 24;
 }
 if (i2 & 8192 | 0) {
  i1 = HEAP8[87619] | 0;
  do if (!(i1 << 24 >> 24)) if ((_SDL_GameControllerInit() | 0) < 0) {
   i3 = -1;
   STACKTOP = i4;
   return i3 | 0;
  } else {
   i1 = HEAP8[87619] | 0;
   break;
  } while (0);
  HEAP8[87619] = i1 + 1 << 24 >> 24;
 }
 if (!(i2 & 4096)) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i3 = _SDL_SetError(57951, i3) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZN6Entity12addComponentI18TransformComponentJRiS2_S2_S2_EEERT_DpOT0_(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, f9 = f0, f10 = f0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 i7 = __Znwj(60) | 0;
 f10 = Math_fround(HEAP32[i1 >> 2] | 0);
 f9 = Math_fround(HEAP32[i2 >> 2] | 0);
 i3 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 HEAP32[i7 >> 2] = 2780;
 i2 = i7 + 8 | 0;
 __ZN8Vector2dC2Ev(i2);
 i1 = i7 + 16 | 0;
 __ZN8Vector2dC2Ev(i1);
 __ZN8Vector2dC2Ev(i7 + 24 | 0);
 HEAP32[i7 + 32 >> 2] = i4;
 HEAP32[i7 + 36 >> 2] = i3;
 HEAPF32[i7 + 40 >> 2] = Math_fround(1.0);
 HEAPF32[i7 + 44 >> 2] = Math_fround(1.0);
 HEAP32[i7 + 48 >> 2] = 2;
 HEAP8[i7 + 52 >> 0] = 0;
 HEAP8[i7 + 53 >> 0] = 0;
 HEAPF32[i2 >> 2] = f10;
 HEAPF32[i7 + 12 >> 2] = f9;
 HEAPF32[i1 >> 2] = f10;
 HEAPF32[i7 + 20 >> 2] = f9;
 HEAP32[i7 + 4 >> 2] = i5;
 i1 = i7;
 HEAP32[i6 >> 2] = i1;
 i2 = i5 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i5 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i5 + 8 | 0, i6);
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19476] = i4;
 }
 HEAP32[i5 + 20 + (HEAP32[19476] << 2) >> 2] = i7;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19476] = i4;
 }
 i1 = i5 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19476];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i7 >> 2] >> 2] & 511](i7);
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 if (!i1) {
  STACKTOP = i8;
  return i7 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_Blit_BGR888_ARGB8888_Modulate(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i2 = HEAP32[i15 + 52 >> 2] | 0;
 i8 = HEAPU8[i15 + 60 >> 0] | 0;
 i9 = HEAPU8[i15 + 61 >> 0] | 0;
 i7 = HEAPU8[i15 + 62 >> 0] | 0;
 i1 = HEAP8[i15 + 63 >> 0] | 0;
 i11 = i15 + 28 | 0;
 i16 = HEAP32[i11 >> 2] | 0;
 i4 = i16 + -1 | 0;
 HEAP32[i11 >> 2] = i4;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i12 = i15 + 24 | 0;
 i13 = i15 + 12 | 0;
 i14 = i15 + 32 | 0;
 i10 = (i2 & 2 | 0) == 0 ? -16777216 : (i1 & 255) << 24;
 i3 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (!(i2 & 1)) {
  i5 = i3;
  i6 = i1;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i12 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 << 16 & 16711680 | i10 | i9 & 65280 | i9 >>> 16 & 255;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i11 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i11 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i1;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i12 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | i10 | (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 16 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i11 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i11 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i16 >> 2] = i1;
 return;
}

function _Color32DitherYV12Mod1X(i14, i15, i2, i3, i4, i5, i6, i18, i1) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i19 = (i18 | 0) / 2 | 0;
 i16 = (i1 << 1) + i18 | 0;
 if ((i6 + 1 | 0) >>> 0 < 3 | (i18 + 1 | 0) >>> 0 < 3) return;
 i17 = i19 << 1;
 i13 = i5 + (i18 << 2) + (i1 << 2) | 0;
 i12 = (i6 | 0) / 2 | 0;
 while (1) {
  i12 = i12 + -1 | 0;
  i9 = i3;
  i3 = i3 + i19 | 0;
  i1 = i19;
  i6 = i2 + i18 | 0;
  i7 = i13;
  i8 = i2;
  i2 = i2 + i17 + i18 | 0;
  i10 = i4;
  i11 = i5;
  while (1) {
   i1 = i1 + -1 | 0;
   i23 = HEAPU8[i9 >> 0] | 0;
   i22 = (HEAP32[i14 + (i23 << 2) >> 2] | 0) + 256 | 0;
   i21 = HEAPU8[i10 >> 0] | 0;
   i23 = (HEAP32[i14 + ((i23 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i14 + ((i21 | 512) << 2) >> 2] | 0) | 0;
   i21 = (HEAP32[i14 + ((i21 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i20 = HEAPU8[i8 >> 0] | 0;
   HEAP32[i11 >> 2] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   i20 = HEAPU8[i8 + 1 >> 0] | 0;
   HEAP32[i11 + 4 >> 2] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   i20 = HEAPU8[i6 >> 0] | 0;
   HEAP32[i7 >> 2] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   i20 = HEAPU8[i6 + 1 >> 0] | 0;
   HEAP32[i7 + 4 >> 2] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   if (!i1) break; else {
    i6 = i6 + 2 | 0;
    i7 = i7 + 8 | 0;
    i8 = i8 + 2 | 0;
    i9 = i9 + 1 | 0;
    i10 = i10 + 1 | 0;
    i11 = i11 + 8 | 0;
   }
  }
  if (!i12) break; else {
   i13 = i13 + (i17 << 2) + (i16 << 2) | 0;
   i4 = i4 + i19 | 0;
   i5 = i5 + (i17 << 2) + (i16 << 2) | 0;
  }
 }
 return;
}

function _Color16DitherYV12Mod1X(i14, i15, i2, i3, i4, i5, i6, i18, i1) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0;
 i19 = (i18 | 0) / 2 | 0;
 i16 = (i1 << 1) + i18 | 0;
 if ((i6 + 1 | 0) >>> 0 < 3 | (i18 + 1 | 0) >>> 0 < 3) return;
 i17 = i19 << 1;
 i13 = i5 + (i18 << 1) + (i1 << 1) | 0;
 i12 = (i6 | 0) / 2 | 0;
 while (1) {
  i12 = i12 + -1 | 0;
  i9 = i3;
  i3 = i3 + i19 | 0;
  i1 = i19;
  i6 = i2 + i18 | 0;
  i7 = i13;
  i8 = i2;
  i2 = i2 + i17 + i18 | 0;
  i10 = i4;
  i11 = i5;
  while (1) {
   i1 = i1 + -1 | 0;
   i23 = HEAPU8[i9 >> 0] | 0;
   i22 = (HEAP32[i14 + (i23 << 2) >> 2] | 0) + 256 | 0;
   i21 = HEAPU8[i10 >> 0] | 0;
   i23 = (HEAP32[i14 + ((i23 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i14 + ((i21 | 512) << 2) >> 2] | 0) | 0;
   i21 = (HEAP32[i14 + ((i21 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i20 = HEAPU8[i8 >> 0] | 0;
   HEAP16[i11 >> 1] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   i20 = HEAPU8[i8 + 1 >> 0] | 0;
   HEAP16[i11 + 2 >> 1] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   i20 = HEAPU8[i6 >> 0] | 0;
   HEAP16[i7 >> 1] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   i20 = HEAPU8[i6 + 1 >> 0] | 0;
   HEAP16[i7 + 2 >> 1] = HEAP32[i15 + (i23 + i20 << 2) >> 2] | HEAP32[i15 + (i22 + i20 << 2) >> 2] | HEAP32[i15 + (i21 + i20 << 2) >> 2];
   if (!i1) break; else {
    i6 = i6 + 2 | 0;
    i7 = i7 + 4 | 0;
    i8 = i8 + 2 | 0;
    i9 = i9 + 1 | 0;
    i10 = i10 + 1 | 0;
    i11 = i11 + 4 | 0;
   }
  }
  if (!i12) break; else {
   i13 = i13 + (i17 << 1) + (i16 << 1) | 0;
   i4 = i4 + i19 | 0;
   i5 = i5 + (i17 << 1) + (i16 << 1) | 0;
  }
 }
 return;
}

function _SDL_MouseQuit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (HEAP32[19499] | 0) {
  i1 = _SDL_GetKeyboardFocus() | 0;
  if (i1 | 0) {
   i1 = i1 + 48 | 0;
   if (HEAP32[i1 >> 2] & 16384 | 0) if ((FUNCTION_TABLE_ii[HEAP32[77996 >> 2] & 255](0) | 0) != -1) HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -16385;
  }
 }
 _SDL_SetRelativeMouseMode(0) | 0;
 i5 = HEAP32[19517] | 0;
 HEAP32[19517] = 1;
 do if ((i5 | 0) != 1) {
  i1 = (HEAP32[19502] | 0) == 0 ? HEAP32[19515] | 0 : HEAP32[19516] | 0;
  i2 = HEAP32[19493] | 0;
  i3 = (i2 | 0) == 0;
  if ((i1 | 0) != 0 & (HEAP32[19510] | 0) == 0) {
   if (i3) break;
   FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
   break;
  } else {
   if (i3) break;
   FUNCTION_TABLE_ii[i2 & 255](0) | 0;
   break;
  }
 } while (0);
 i1 = HEAP32[19514] | 0;
 if (i1 | 0) do {
  i5 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[19515] | 0;
  L18 : do if ((i2 | 0) != (i5 | 0)) {
   do if ((HEAP32[19516] | 0) == (i5 | 0)) {
    if (!i2) i2 = (HEAP32[19502] | 0) == 0 ? 0 : i5; else HEAP32[19516] = i2;
    i3 = HEAP32[19493] | 0;
    i4 = (i3 | 0) == 0;
    if ((i2 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
     if (i4) break;
     FUNCTION_TABLE_ii[i3 & 255](i2) | 0;
     break;
    } else {
     if (i4) break;
     FUNCTION_TABLE_ii[i3 & 255](0) | 0;
     break;
    }
   } while (0);
   i2 = HEAP32[19514] | 0;
   if (i2 | 0) {
    i3 = 0;
    while (1) {
     if ((i2 | 0) == (i5 | 0)) break;
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) break L18; else {
      i4 = i2;
      i2 = i3;
      i3 = i4;
     }
    }
    HEAP32[(i3 | 0 ? i3 : 78056) >> 2] = HEAP32[i5 >> 2];
    i2 = HEAP32[19495] | 0;
    if (i2 | 0) FUNCTION_TABLE_vi[i2 & 511](i5);
   }
  } while (0);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[19515] | 0;
 if (i1 | 0) {
  i2 = HEAP32[19495] | 0;
  if (i2 | 0) FUNCTION_TABLE_vi[i2 & 511](i1);
 }
 i1 = HEAP32[19513] | 0;
 if (!i1) {
  _SDL_memset(77964, 0, 112) | 0;
  return;
 }
 _SDL_free(i1);
 _SDL_memset(77964, 0, 112) | 0;
 return;
}

function _SDL_Blit_RGB888_ARGB8888_Blend(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i1 = HEAP32[i15 + 52 >> 2] | 0;
 i17 = i15 + 28 | 0;
 i20 = HEAP32[i17 >> 2] | 0;
 HEAP32[i17 >> 2] = i20 + -1;
 if (!i20) return;
 i18 = i15 + 20 | 0;
 i19 = i15 + 24 | 0;
 i20 = i15 + 12 | 0;
 i16 = i15 + 32 | 0;
 i14 = i1 & 112;
 i11 = (i14 & 127) == 16;
 i2 = HEAP32[i15 >> 2] | 0;
 i3 = HEAP32[i18 >> 2] | 0;
 i12 = i2;
 i13 = i3;
 while (1) {
  i10 = HEAP32[i19 >> 2] | 0;
  i1 = i10 + -1 | 0;
  L6 : do if (i10 | 0) {
   if (i11) while (1) {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2] | -16777216;
    if (!i1) break L6; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
   while (1) {
    i6 = HEAP32[i2 >> 2] | 0;
    i9 = i6 >>> 16 & 255;
    i8 = i6 >>> 8 & 255;
    i6 = i6 & 255;
    i10 = HEAP32[i3 >> 2] | 0;
    i4 = i10 >>> 16 & 255;
    i5 = i10 >>> 8 & 255;
    i7 = i10 & 255;
    i10 = i10 & -16777216;
    switch (i14 & 127) {
    case 64:
     {
      i7 = ((Math_imul(i7, i6) | 0) >>> 0) / 255 | 0;
      i5 = ((Math_imul(i5, i8) | 0) >>> 0) / 255 | 0;
      i4 = ((Math_imul(i4, i9) | 0) >>> 0) / 255 | 0;
      break;
     }
    case 32:
     {
      i4 = i4 + i9 | 0;
      i5 = i5 + i8 | 0;
      i7 = i7 + i6 | 0;
      i7 = i7 >>> 0 < 255 ? i7 : 255;
      i5 = i5 >>> 0 < 255 ? i5 : 255;
      i4 = i4 >>> 0 < 255 ? i4 : 255;
      break;
     }
    default:
     {}
    }
    HEAP32[i3 >> 2] = i5 << 8 | i4 << 16 | i7 | i10;
    if (!i1) break L6; else {
     i3 = i3 + 4 | 0;
     i2 = i2 + 4 | 0;
     i1 = i1 + -1 | 0;
    }
   }
  } while (0);
  i2 = i12 + (HEAP32[i20 >> 2] | 0) | 0;
  i1 = i13 + (HEAP32[i16 >> 2] | 0) | 0;
  i13 = HEAP32[i17 >> 2] | 0;
  HEAP32[i17 >> 2] = i13 + -1;
  if (!i13) break; else {
   i12 = i2;
   i13 = i1;
   i3 = i1;
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i18 >> 2] = i1;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i1, i9, i2, i3, i5) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i10 + 4 | 0;
 i4 = i10;
 if (!(HEAP32[i2 + 4 >> 2] & 1)) {
  i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i7 & 63](i1, i8, i2, i3, i5 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i8, i2);
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83660) | 0;
  __ZNSt3__26localeD2Ev(i8);
  i2 = HEAP32[i1 >> 2] | 0;
  if (i5) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 127](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 127](i8, i1);
  i6 = i8 + 8 + 3 | 0;
  i1 = HEAP8[i6 >> 0] | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i7 = i8 + 4 | 0;
  i5 = i1 << 24 >> 24 < 0 ? i2 : i8;
  while (1) {
   i4 = i1 << 24 >> 24 < 0;
   if ((i5 | 0) == ((i4 ? i2 : i8) + ((i4 ? HEAP32[i7 >> 2] | 0 : i1 & 255) << 2) | 0)) break;
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (i2 | 0) {
    i3 = i2 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 28 >> 2] | 0)) {
     i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0;
     i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) | 0;
     i1 = FUNCTION_TABLE_iii[i4 & 63](i2, i1) | 0;
    } else {
     HEAP32[i3 >> 2] = i4 + 4;
     HEAP32[i4 >> 2] = i1;
     i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) | 0;
    }
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[i9 >> 2] = 0;
   }
   i5 = i5 + 4 | 0;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Modulate(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i2 = HEAP32[i15 + 52 >> 2] | 0;
 i8 = HEAPU8[i15 + 60 >> 0] | 0;
 i9 = HEAPU8[i15 + 61 >> 0] | 0;
 i7 = HEAPU8[i15 + 62 >> 0] | 0;
 i1 = HEAP8[i15 + 63 >> 0] | 0;
 i11 = i15 + 28 | 0;
 i16 = HEAP32[i11 >> 2] | 0;
 i4 = i16 + -1 | 0;
 HEAP32[i11 >> 2] = i4;
 if (!i16) return;
 i16 = i15 + 20 | 0;
 i12 = i15 + 24 | 0;
 i13 = i15 + 12 | 0;
 i14 = i15 + 32 | 0;
 i10 = (i2 & 2 | 0) == 0 ? -16777216 : (i1 & 255) << 24;
 i3 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 if (!(i2 & 1)) {
  i5 = i3;
  i6 = i1;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i12 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 & 16711680 | i10 | i9 & 65280 | i9 & 255;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i11 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i11 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i1;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i12 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 16 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | i10 | (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i11 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i11 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i15 >> 2] = i2;
 HEAP32[i16 >> 2] = i1;
 return;
}

function _png_format_buffer(i4, i6, i5) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i1 = i4 >>> 24;
 if ((i1 + -65 | 0) >>> 0 > 57 | (i1 + -91 | 0) >>> 0 < 6) {
  HEAP8[i6 >> 0] = 91;
  HEAP8[i6 + 1 >> 0] = HEAP8[70501 + (i4 >>> 28) >> 0] | 0;
  HEAP8[i6 + 2 >> 0] = HEAP8[70501 + (i1 & 15) >> 0] | 0;
  i3 = 3;
  i1 = 93;
 } else {
  i3 = 0;
  i1 = i1 & 255;
 }
 i2 = i3 + 1 | 0;
 HEAP8[i6 + i3 >> 0] = i1;
 i1 = i4 >>> 16;
 i7 = i1 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) {
  HEAP8[i6 + i2 >> 0] = 91;
  HEAP8[i6 + (i3 + 2) >> 0] = HEAP8[70501 + (i4 >>> 20 & 15) >> 0] | 0;
  HEAP8[i6 + (i3 + 3) >> 0] = HEAP8[70501 + (i1 & 15) >> 0] | 0;
  i2 = i3 | 4;
  i1 = 93;
 } else i1 = i1 & 255;
 i3 = i2 + 1 | 0;
 HEAP8[i6 + i2 >> 0] = i1;
 i1 = i4 >>> 8;
 i7 = i1 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) {
  HEAP8[i6 + i3 >> 0] = 91;
  HEAP8[i6 + (i2 + 2) >> 0] = HEAP8[70501 + (i4 >>> 12 & 15) >> 0] | 0;
  HEAP8[i6 + (i2 + 3) >> 0] = HEAP8[70501 + (i1 & 15) >> 0] | 0;
  i3 = i2 + 4 | 0;
  i2 = 93;
 } else i2 = i1 & 255;
 i1 = i3 + 1 | 0;
 HEAP8[i6 + i3 >> 0] = i2;
 i7 = i4 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) {
  HEAP8[i6 + i1 >> 0] = 91;
  HEAP8[i6 + (i3 + 2) >> 0] = HEAP8[70501 + (i4 >>> 4 & 15) >> 0] | 0;
  HEAP8[i6 + (i3 + 3) >> 0] = HEAP8[70501 + (i4 & 15) >> 0] | 0;
  i3 = i3 + 4 | 0;
  i2 = 93;
 } else {
  i3 = i1;
  i2 = i4 & 255;
 }
 i1 = i3 + 1 | 0;
 HEAP8[i6 + i3 >> 0] = i2;
 if (!i5) {
  i7 = i1;
  i7 = i6 + i7 | 0;
  HEAP8[i7 >> 0] = 0;
  return;
 }
 HEAP8[i6 + i1 >> 0] = 58;
 HEAP8[i6 + (i3 + 2) >> 0] = 32;
 i4 = 0;
 i1 = i3 + 3 | 0;
 while (1) {
  i2 = HEAP8[i5 + i4 >> 0] | 0;
  if (!(i2 << 24 >> 24)) {
   i2 = 8;
   break;
  }
  i3 = i1 + 1 | 0;
  HEAP8[i6 + i1 >> 0] = i2;
  if ((i4 | 0) < 194) {
   i4 = i4 + 1 | 0;
   i1 = i3;
  } else {
   i1 = i3;
   i2 = 8;
   break;
  }
 }
 if ((i2 | 0) == 8) {
  i7 = i6 + i1 | 0;
  HEAP8[i7 >> 0] = 0;
  return;
 }
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i1, i9, i2, i3, i5) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i10 + 4 | 0;
 i4 = i10;
 if (!(HEAP32[i2 + 4 >> 2] & 1)) {
  i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i7 & 63](i1, i8, i2, i3, i5 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv(i8, i2);
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83636) | 0;
  __ZNSt3__26localeD2Ev(i8);
  i2 = HEAP32[i1 >> 2] | 0;
  if (i5) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 127](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 127](i8, i1);
  i6 = i8 + 11 | 0;
  i1 = HEAP8[i6 >> 0] | 0;
  i2 = HEAP32[i8 >> 2] | 0;
  i7 = i8 + 4 | 0;
  i5 = i1 << 24 >> 24 < 0 ? i2 : i8;
  while (1) {
   i4 = i1 << 24 >> 24 < 0;
   if ((i5 | 0) == ((i4 ? i2 : i8) + (i4 ? HEAP32[i7 >> 2] | 0 : i1 & 255) | 0)) break;
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = HEAP32[i9 >> 2] | 0;
   if (i2 | 0) {
    i3 = i2 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 28 >> 2] | 0)) {
     i4 = HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0;
     i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
     i1 = FUNCTION_TABLE_iii[i4 & 63](i2, i1) | 0;
    } else {
     HEAP32[i3 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i1;
     i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[i9 >> 2] = 0;
   }
   i5 = i5 + 1 | 0;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = HEAP32[i8 >> 2] | 0;
  }
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZN6Entity12addComponentI18TransformComponentJffiiEEERT_DpOT0_(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 i7 = __Znwj(60) | 0;
 i9 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i10 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 HEAP32[i7 >> 2] = 2780;
 i3 = i7 + 8 | 0;
 __ZN8Vector2dC2Ev(i3);
 i2 = i7 + 16 | 0;
 __ZN8Vector2dC2Ev(i2);
 __ZN8Vector2dC2Ev(i7 + 24 | 0);
 HEAP32[i7 + 32 >> 2] = i4;
 HEAP32[i7 + 36 >> 2] = i10;
 HEAPF32[i7 + 40 >> 2] = Math_fround(1.0);
 HEAPF32[i7 + 44 >> 2] = Math_fround(1.0);
 HEAP32[i7 + 48 >> 2] = 2;
 HEAP8[i7 + 52 >> 0] = 0;
 HEAP8[i7 + 53 >> 0] = 0;
 HEAP32[i3 >> 2] = i9;
 HEAP32[i7 + 12 >> 2] = i1;
 HEAP32[i2 >> 2] = i9;
 HEAP32[i7 + 20 >> 2] = i1;
 HEAP32[i7 + 4 >> 2] = i5;
 i1 = i7;
 HEAP32[i6 >> 2] = i1;
 i2 = i5 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i5 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i5 + 8 | 0, i6);
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i10 = HEAP32[19475] | 0;
  HEAP32[19475] = i10 + 1;
  HEAP32[19476] = i10;
 }
 HEAP32[i5 + 20 + (HEAP32[19476] << 2) >> 2] = i7;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i10 = HEAP32[19475] | 0;
  HEAP32[19475] = i10 + 1;
  HEAP32[19476] = i10;
 }
 i1 = i5 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19476];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i7 >> 2] >> 2] & 511](i7);
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 if (!i1) {
  STACKTOP = i8;
  return i7 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_OnWindowFocusLost(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i5 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i10 + 8 | 0;
 i7 = i10;
 if (HEAP32[i9 + 100 >> 2] | 0) {
  i1 = HEAP32[19487] | 0;
  i2 = HEAP32[i1 + 116 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_iiii[i2 & 63](i1, i9, HEAP32[i9 + 104 >> 2] | 0) | 0;
 }
 i3 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
 i6 = i9 + 48 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i4 = HEAP32[19487] | 0;
 i2 = HEAP32[i4 + 276 >> 2] | 0;
 if ((i1 & 512 | 0) == 0 | (i1 & 256 | i3 | 0) == 0) if ((i2 | 0) == (i9 | 0)) {
  i1 = 0;
  i3 = 0;
  i2 = i4;
  i5 = 9;
 } else {
  i3 = 0;
  i2 = i4;
 } else if ((i2 | 0) == 0 | (i2 | 0) == (i9 | 0)) {
  i1 = 1;
  i3 = i9;
  i2 = i4;
  i5 = 9;
 } else {
  i1 = i2 + 48 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -257;
  i1 = HEAP32[i4 + 124 >> 2] | 0;
  if (!i1) {
   i1 = 1;
   i3 = i9;
   i2 = i4;
   i5 = 9;
  } else {
   FUNCTION_TABLE_viii[i1 & 63](i4, i2, 0);
   i1 = 1;
   i3 = i9;
   i2 = HEAP32[19487] | 0;
   i5 = 9;
  }
 }
 if ((i5 | 0) == 9) {
  HEAP32[i2 + 276 >> 2] = i3;
  i3 = i1;
 }
 i1 = HEAP32[i2 + 124 >> 2] | 0;
 if (i1 | 0) FUNCTION_TABLE_viii[i1 & 63](i2, i9, i3);
 if (!(HEAP32[i6 >> 2] & 1)) {
  STACKTOP = i10;
  return;
 }
 if (HEAP32[i9 + 120 >> 2] | 0) {
  STACKTOP = i10;
  return;
 }
 if (!(_SDL_GetHintBoolean(48569, 1) | 0)) {
  STACKTOP = i10;
  return;
 }
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i7) | 0;
  STACKTOP = i10;
  return;
 }
 if ((HEAP32[i9 >> 2] | 0) != (i1 + 280 | 0)) {
  _SDL_SetError(59973, i8) | 0;
  STACKTOP = i10;
  return;
 }
 if (HEAP32[i6 >> 2] & 64 | 0) {
  STACKTOP = i10;
  return;
 }
 _SDL_UpdateFullscreenMode(i9, 0) | 0;
 i1 = HEAP32[19487] | 0;
 i2 = HEAP32[i1 + 96 >> 2] | 0;
 if (!i2) {
  STACKTOP = i10;
  return;
 }
 FUNCTION_TABLE_vii[i2 & 127](i1, i9);
 STACKTOP = i10;
 return;
}

function _SDL_DrawLines(i14, i13, i8, i15) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i8 = i8 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i16 = 0;
 i3 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i16 + 8 | 0;
 i9 = i16 + 24 | 0;
 i10 = i16 + 20 | 0;
 i11 = i16 + 16 | 0;
 i12 = i16 + 12 | 0;
 if (!i14) {
  i15 = _SDL_SetError(48209, i16) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 switch (HEAP8[i1 + 9 >> 0] | 0) {
 case 1:
  {
   if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) i3 = 8; else i7 = 2;
   break;
  }
 case 2:
  {
   i7 = 1;
   break;
  }
 case 4:
  {
   i7 = 3;
   break;
  }
 default:
  i3 = 8;
 }
 if ((i3 | 0) == 8) {
  i15 = _SDL_SetError(48258, i2) | 0;
  STACKTOP = i16;
  return i15 | 0;
 }
 if ((i8 | 0) > 1) {
  i4 = i14 + 36 | 0;
  i3 = 1;
  do {
   i2 = i3 + -1 | 0;
   i2 = i13 + (i2 << 3) | 0;
   HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i10 >> 2] = HEAP32[i2 + 4 >> 2];
   i2 = i13 + (i3 << 3) | 0;
   i1 = i2 | 0;
   HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
   i2 = i2 + 4 | 0;
   HEAP32[i12 >> 2] = HEAP32[i2 >> 2];
   if (_SDL_IntersectRectAndLine(i4, i9, i10, i11, i12) | 0) {
    i5 = HEAP32[i11 >> 2] | 0;
    i6 = HEAP32[i12 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i1 >> 2] | 0)) i1 = (i6 | 0) != (HEAP32[i2 >> 2] | 0); else i1 = 1;
    FUNCTION_TABLE_viiiiiii[i7 & 7](i14, HEAP32[i9 >> 2] | 0, HEAP32[i10 >> 2] | 0, i5, i6, i15, i1 & 1);
   }
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) != (i8 | 0));
 }
 i1 = i8 + -1 | 0;
 i2 = HEAP32[i13 + (i1 << 3) >> 2] | 0;
 if ((HEAP32[i13 >> 2] | 0) == (i2 | 0)) {
  i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
  if ((HEAP32[i13 + 4 >> 2] | 0) == (i1 | 0)) {
   i15 = 0;
   STACKTOP = i16;
   return i15 | 0;
  }
 } else i1 = HEAP32[i13 + (i1 << 3) + 4 >> 2] | 0;
 _SDL_DrawPoint(i14, i2, i1, i15) | 0;
 i15 = 0;
 STACKTOP = i16;
 return i15 | 0;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i3, i11, i1, i2, i8) {
 i10 = i10 | 0;
 i3 = i3 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i13;
 i12 = HEAP32[i10 >> 2] | 0;
 if (!i12) {
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 i4 = i3;
 i5 = i1 - i4 | 0;
 i7 = i2 + 12 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i5 = (i6 | 0) > (i5 | 0) ? i6 - i5 | 0 : 0;
 i6 = i11;
 i2 = i6 - i4 | 0;
 if ((i2 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 63](i12, i3, i2) | 0) != (i2 | 0)) {
  HEAP32[i10 >> 2] = 0;
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 do if ((i5 | 0) > 0) {
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  if (i5 >>> 0 < 11) {
   i3 = i9 + 11 | 0;
   HEAP8[i3 >> 0] = i5;
   i2 = i9;
   i4 = i9;
  } else {
   i3 = i5 + 16 & -16;
   i2 = __Znwj(i3) | 0;
   HEAP32[i9 >> 2] = i2;
   HEAP32[i9 + 8 >> 2] = i3 | -2147483648;
   HEAP32[i9 + 4 >> 2] = i5;
   i3 = i9 + 11 | 0;
   i4 = i9;
  }
  _memset(i2 | 0, i8 | 0, i5 | 0) | 0;
  HEAP8[i2 + i5 >> 0] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 63](i12, (HEAP8[i3 >> 0] | 0) < 0 ? HEAP32[i4 >> 2] | 0 : i9, i5) | 0) == (i5 | 0)) {
   if ((HEAP8[i3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
   break;
  }
  HEAP32[i10 >> 2] = 0;
  if ((HEAP8[i3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i4 >> 2] | 0);
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 } while (0);
 i1 = i1 - i6 | 0;
 if ((i1 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 63](i12, i11, i1) | 0) != (i1 | 0)) {
  HEAP32[i10 >> 2] = 0;
  i12 = 0;
  STACKTOP = i13;
  return i12 | 0;
 }
 HEAP32[i7 >> 2] = 0;
 STACKTOP = i13;
 return i12 | 0;
}

function _SDL_VideoQuit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!(HEAP32[19487] | 0)) return;
 _SDL_TouchQuit();
 _SDL_MouseQuit();
 _SDL_QuitSubSystem(16384);
 i1 = HEAP32[19487] | 0;
 i2 = i1 + 260 | 0;
 if (HEAP32[i2 >> 2] | 0) {
  HEAP32[i2 >> 2] = 0;
  i2 = HEAP32[i1 + 208 >> 2] | 0;
  if (i2) {
   FUNCTION_TABLE_vi[i2 & 511](i1);
   i1 = HEAP32[19487] | 0;
  }
 }
 i2 = HEAP32[i1 + 272 >> 2] | 0;
 if (i2) do {
  _SDL_DestroyWindow(i2);
  i1 = HEAP32[19487] | 0;
  i2 = HEAP32[i1 + 272 >> 2] | 0;
 } while ((i2 | 0) != 0);
 FUNCTION_TABLE_vi[HEAP32[i1 + 8 >> 2] & 511](i1);
 i2 = HEAP32[19487] | 0;
 i3 = HEAP32[i2 + 264 >> 2] | 0;
 i1 = HEAP32[i2 + 268 >> 2] | 0;
 if ((i3 | 0) > 0) {
  i5 = 0;
  do {
   i4 = i1 + (i5 * 68 | 0) | 0;
   i3 = HEAP32[i4 + 8 >> 2] | 0;
   i4 = i4 + 12 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if (i3) do {
    i3 = i3 + -1 | 0;
    _SDL_free(HEAP32[i2 + (i3 * 20 | 0) + 16 >> 2] | 0);
    i2 = HEAP32[i4 >> 2] | 0;
    HEAP32[i2 + (i3 * 20 | 0) + 16 >> 2] = 0;
   } while ((i3 | 0) != 0);
   _SDL_free(i2);
   HEAP32[i4 >> 2] = 0;
   i2 = i1 + (i5 * 68 | 0) | 0;
   i3 = i2 + 32 | 0;
   _SDL_free(HEAP32[i3 >> 2] | 0);
   HEAP32[i3 >> 2] = 0;
   i2 = i2 + 64 | 0;
   _SDL_free(HEAP32[i2 >> 2] | 0);
   HEAP32[i2 >> 2] = 0;
   i5 = i5 + 1 | 0;
   i2 = HEAP32[19487] | 0;
   i3 = HEAP32[i2 + 264 >> 2] | 0;
   i1 = HEAP32[i2 + 268 >> 2] | 0;
  } while ((i5 | 0) < (i3 | 0));
 }
 if (!i1) i1 = i2; else {
  if ((i3 | 0) > 0) {
   i2 = 0;
   do {
    _SDL_free(HEAP32[i1 + (i2 * 68 | 0) >> 2] | 0);
    i2 = i2 + 1 | 0;
    i5 = HEAP32[19487] | 0;
    i1 = HEAP32[i5 + 268 >> 2] | 0;
   } while ((i2 | 0) < (HEAP32[i5 + 264 >> 2] | 0));
  }
  _SDL_free(i1);
  i1 = HEAP32[19487] | 0;
  HEAP32[i1 + 268 >> 2] = 0;
  HEAP32[i1 + 264 >> 2] = 0;
 }
 _SDL_free(HEAP32[i1 + 288 >> 2] | 0);
 i5 = HEAP32[19487] | 0;
 HEAP32[i5 + 288 >> 2] = 0;
 FUNCTION_TABLE_vi[HEAP32[i5 + 684 >> 2] & 511](i5);
 HEAP32[19487] = 0;
 return;
}

function _SDL_UpdateMouseFocus(i4, i5, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i7 + 4 | 0;
 i2 = i7;
 i3 = (i4 | 0) == 0;
 if (!i3) if (!(HEAP32[i4 + 48 >> 2] & 16384)) {
  _SDL_GetWindowSize(i4, i1, i2);
  if (!(((i6 | i5 | 0) > -1 ? (HEAP32[i1 >> 2] | 0) > (i5 | 0) : 0) & (HEAP32[i2 >> 2] | 0) > (i6 | 0))) {
   if ((HEAP32[19502] | 0) != (i4 | 0)) {
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
   _SDL_PrivateSendMouseMotion(i4, HEAP32[19501] | 0, 0, i5, i6) | 0;
   i1 = HEAP32[19502] | 0;
   if (!i1) {
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
   _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
   HEAP32[19502] = 0;
   i1 = HEAP32[19515] | 0;
   i2 = HEAP32[19493] | 0;
   i3 = (i2 | 0) == 0;
   if ((i1 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
    if (i3) {
     i6 = 0;
     STACKTOP = i7;
     return i6 | 0;
    }
    FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   } else {
    if (i3) {
     i6 = 0;
     STACKTOP = i7;
     return i6 | 0;
    }
    FUNCTION_TABLE_ii[i2 & 255](0) | 0;
    i6 = 0;
    STACKTOP = i7;
    return i6 | 0;
   }
  }
 }
 i1 = HEAP32[19502] | 0;
 if ((i1 | 0) == (i4 | 0)) {
  i6 = 1;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (i1 | 0) _SDL_SendWindowEvent(i1, 11, 0, 0) | 0;
 HEAP32[19502] = i4;
 if (i3) i1 = 78060; else {
  _SDL_SendWindowEvent(i4, 10, 0, 0) | 0;
  i1 = (HEAP32[19502] | 0) == 0 ? 78060 : 78064;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[19493] | 0;
 i3 = (i2 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
  if (!i3) FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
 } else if (!i3) FUNCTION_TABLE_ii[i2 & 255](0) | 0;
 _SDL_PrivateSendMouseMotion(i4, HEAP32[19501] | 0, 0, i5, i6) | 0;
 i6 = 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_BlendPoint_RGB888(i2, i3, i4, i5, i6, i7, i8, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i1 = ~i1 & 255;
 switch (i5 | 0) {
 case 1:
  {
   i5 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   i8 = (((Math_imul(i3 & 255, i1) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0;
   i4 = (((Math_imul(i3 >>> 8 & 255, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0;
   i7 = (((Math_imul(i3 >>> 16 & 255, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0;
   i7 = i7 << 16;
   i6 = i4 << 8;
   i7 = i6 | i7;
   i8 = i7 | i8;
   HEAP32[i5 >> 2] = i8;
   return 0;
  }
 case 2:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i3 = HEAP32[i4 >> 2] | 0;
   i6 = (i3 >>> 16 & 255) + (i6 & 255) | 0;
   i5 = (i3 >>> 8 & 255) + (i7 & 255) | 0;
   i7 = (i3 & 255) + (i8 & 255) | 0;
   i8 = i4;
   i7 = i7 >>> 0 < 255 ? i7 : 255;
   i5 = i5 >>> 0 < 255 ? i5 : 255;
   i6 = i6 >>> 0 < 255 ? i6 : 255;
   i6 = i6 << 16;
   i5 = i5 << 8;
   i6 = i5 | i6;
   i7 = i6 | i7;
   HEAP32[i8 >> 2] = i7;
   return 0;
  }
 case 4:
  {
   i5 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   i8 = ((Math_imul(i3 & 255, i8 & 255) | 0) >>> 0) / 255 | 0;
   i4 = ((Math_imul(i3 >>> 8 & 255, i7 & 255) | 0) >>> 0) / 255 | 0;
   i7 = ((Math_imul(i3 >>> 16 & 255, i6 & 255) | 0) >>> 0) / 255 | 0;
   i7 = i7 << 16;
   i6 = i4 << 8;
   i7 = i6 | i7;
   i8 = i7 | i8;
   HEAP32[i5 >> 2] = i8;
   return 0;
  }
 default:
  {
   i5 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 2) | 0;
   i8 = i8 & 255;
   i4 = i7 & 255;
   i7 = i6 & 255;
   i7 = i7 << 16;
   i6 = i4 << 8;
   i7 = i6 | i7;
   i8 = i7 | i8;
   HEAP32[i5 >> 2] = i8;
   return 0;
  }
 }
 return 0;
}

function _png_handle_tEXt(i7, i8, i6) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0;
 i5 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i10;
 i1 = i7 + 756 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 switch (i2 | 0) {
 case 0:
  break;
 case 1:
  {
   _png_crc_finish(i7, i6) | 0;
   STACKTOP = i10;
   return;
  }
 default:
  i5 = 3;
 }
 if ((i5 | 0) == 3) {
  i4 = i2 + -1 | 0;
  HEAP32[i1 >> 2] = i4;
  if ((i4 | 0) == 1) {
   _png_crc_finish(i7, i6) | 0;
   _png_chunk_benign_error(i7, 63619);
   STACKTOP = i10;
   return;
  }
 }
 i1 = i7 + 208 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) _png_chunk_error(i7, 63643);
 if (i2 & 4 | 0) HEAP32[i1 >> 2] = i2 | 8;
 i2 = i6 + 1 | 0;
 i3 = i7 + 788 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (!i4) i5 = 12; else {
  i1 = i7 + 792 | 0;
  if ((HEAP32[i1 >> 2] | 0) >>> 0 < i2 >>> 0) {
   HEAP32[i3 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   _png_free(i7, i4);
   i5 = 12;
  }
 }
 do if ((i5 | 0) == 12) {
  i1 = _png_malloc_base(i7, i2) | 0;
  if (i1 | 0) {
   HEAP32[i3 >> 2] = i1;
   HEAP32[i7 + 792 >> 2] = i2;
   i4 = i1;
   break;
  }
  _png_chunk_warning(i7, 63656);
  _png_chunk_benign_error(i7, 63690);
  STACKTOP = i10;
  return;
 } while (0);
 _png_read_data(i7, i4, i6);
 _png_calculate_crc(i7, i4, i6);
 if (_png_crc_finish(i7, 0) | 0) {
  STACKTOP = i10;
  return;
 }
 i2 = i4 + i6 | 0;
 HEAP8[i2 >> 0] = 0;
 i1 = i4;
 while (1) {
  i3 = i1 + 1 | 0;
  if (!(HEAP8[i1 >> 0] | 0)) break; else i1 = i3;
 }
 i6 = (i1 | 0) == (i2 | 0) ? i1 : i3;
 HEAP32[i9 >> 2] = -1;
 HEAP32[i9 + 4 >> 2] = i4;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP32[i9 + 24 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = i6;
 HEAP32[i9 + 12 >> 2] = _strlen(i6) | 0;
 if (!(_png_set_text_2(i7, i8, i9, 1) | 0)) {
  STACKTOP = i10;
  return;
 }
 _png_warning(i7, 63938);
 STACKTOP = i10;
 return;
}
function _SDL_Blit_RGBA8888_RGB888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i8 = HEAP32[i2 >> 2] | 0;
     i9 = i8 >>> 8;
     HEAP32[i1 >> 2] = i9 & 65280 | i8 >>> 24 << 16 | i9 & 255;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 16 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 24, i8) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i4 >>> 8 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 >>> 8 & 65280 | i9 >>> 24 | i9 << 8 & 16711680;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 16 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 24, i8) | 0) >>> 0) / 255 | 0) | (((Math_imul(i4 >>> 8 & 255, i7) | 0) >>> 0) / 255 | 0) << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 >>> 8 & 65280 | i9 << 8 & 16711680 | i9 >>> 24;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 16 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 8 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i4 >>> 24, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 & 65280 | i9 >>> 16 & 255 | i9 << 16 & 16711680;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 16 & 255, i8) | 0) >>> 0) / 255 | 0) | (((Math_imul(i4 & 255, i7) | 0) >>> 0) / 255 | 0) << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 & 65280 | i9 << 16 & 16711680 | i9 >>> 16 & 255;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i4 >>> 16 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_RGB888_BGR888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 & 65280 | i9 >>> 16 & 255 | i9 << 16 & 16711680;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 16 & 255, i8) | 0) >>> 0) / 255 | 0) | (((Math_imul(i4 & 255, i7) | 0) >>> 0) / 255 | 0) << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_RGB888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 & 65280 | i9 << 16 & 16711680 | i9 >>> 16 & 255;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i4 >>> 16 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_LockTexture(i5, i2, i6, i7) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i8 + 8 | 0;
 i3 = i8;
 i1 = i8 + 16 | 0;
 if (i5 | 0) if ((HEAP32[i5 >> 2] | 0) == 85557) {
  if ((HEAP32[i5 + 8 >> 2] | 0) != 1) {
   i7 = _SDL_SetError(59642, i4) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  if (!i2) {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = HEAP32[i5 + 12 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i5 + 16 >> 2];
   i2 = i1;
  }
  i1 = HEAP32[i5 + 40 >> 2] | 0;
  if (i1 | 0) {
   i7 = _SDL_SW_LockYUVTexture(i1, i2, i6, i7) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  if (!(HEAP32[i5 + 36 >> 2] | 0)) {
   i4 = HEAP32[i5 + 32 >> 2] | 0;
   i7 = FUNCTION_TABLE_iiiiii[HEAP32[i4 + 36 >> 2] & 63](i4, i5, i2, i6, i7) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  i3 = i5 + 52 | 0;
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  i3 = HEAP32[i5 + 48 >> 2] | 0;
  i4 = (HEAP32[i5 + 44 >> 2] | 0) + (Math_imul(i3, HEAP32[i2 + 4 >> 2] | 0) | 0) | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i5 + 4 >> 2] | 0;
  L19 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
   if ((i1 | 0) < 1498831189) switch (i1 | 0) {
   case 844715353:
    {
     i1 = 2;
     break L19;
    }
   default:
    {}
   } else switch (i1 | 0) {
   case 1498831189:
    {
     i1 = 2;
     break L19;
    }
   default:
    {}
   }
   i1 = (i1 | 0) == 1431918169 ? 2 : 1;
  } while (0);
  HEAP32[i6 >> 2] = i4 + (Math_imul(i1, i2) | 0);
  HEAP32[i7 >> 2] = i3;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SetError(41358, i3) | 0;
 i7 = -1;
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_Blit_BGRA8888_BGR888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i9 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = i9 >>> 8 & 65535 | i9 >>> 24 << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 16 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 8 & 255, i8) | 0) >>> 0) / 255 | 0) | (((Math_imul(i4 >>> 24, i7) | 0) >>> 0) / 255 | 0) << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _png_icc_profile_error(i8, i1, i2, i9, i10) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i11 = i14 + 24 | 0;
 i12 = i14;
 i13 = (i1 | 0) != 0;
 if (i13) {
  i7 = i1 + 74 | 0;
  HEAP16[i7 >> 1] = HEAP16[i7 >> 1] | -32768;
 }
 i1 = _png_safecat(i11, 196, 0, 61180) | 0;
 i1 = _png_safecat(i11, 196, _png_safecat(i11, i1 + 79 | 0, i1, i2) | 0, 61190) | 0;
 i2 = i9 >>> 24;
 if (((i2 & 223) + -65 | 0) >>> 0 < 26 | ((i2 | 0) == 32 | (i2 + -48 | 0) >>> 0 < 10)) {
  i3 = i9 >>> 16;
  i4 = i3 & 255;
  if (((i3 & 223) + -65 | 0) >>> 0 < 26 | ((i4 | 0) == 32 | (i4 + -48 | 0) >>> 0 < 10)) {
   i5 = i9 >>> 8;
   i6 = i5 & 255;
   if (((i5 & 223) + -65 | 0) >>> 0 < 26 | ((i6 | 0) == 32 | (i6 + -48 | 0) >>> 0 < 10)) {
    i7 = i9 & 255;
    if (((i9 & 223) + -65 | 0) >>> 0 < 26 | ((i7 | 0) == 32 | (i7 + -48 | 0) >>> 0 < 10)) {
     i12 = i11 + i1 | 0;
     HEAP8[i12 >> 0] = 39;
     HEAP8[i12 + 1 >> 0] = (i2 + -32 | 0) >>> 0 < 95 ? i2 & 255 : 63;
     HEAP8[i12 + 2 >> 0] = (i4 + -32 | 0) >>> 0 < 95 ? i3 & 255 : 63;
     HEAP8[i12 + 3 >> 0] = (i6 + -32 | 0) >>> 0 < 95 ? i5 & 255 : 63;
     HEAP8[i12 + 4 >> 0] = (i7 + -32 | 0) >>> 0 < 95 ? i9 & 255 : 63;
     HEAP8[i12 + 5 >> 0] = 39;
     HEAP8[i11 + (i1 + 6) >> 0] = 58;
     HEAP8[i11 + (i1 + 7) >> 0] = 32;
     i12 = i1 + 8 | 0;
     _png_safecat(i11, 196, i12, i10) | 0;
     i13 = i13 ? 2 : 1;
     _png_chunk_report(i8, i11, i13);
     STACKTOP = i14;
     return;
    }
   }
  }
 }
 i12 = _png_safecat(i11, 196, _png_safecat(i11, 196, i1, _png_format_number(i12, i12 + 24 | 0, 3, i9) | 0) | 0, 61194) | 0;
 _png_safecat(i11, 196, i12, i10) | 0;
 i13 = i13 ? 2 : 1;
 _png_chunk_report(i8, i11, i13);
 STACKTOP = i14;
 return;
}

function _SDL_RenderSetViewport(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, f8 = f0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i7 + 16 | 0;
 i4 = i7 + 8 | 0;
 i2 = i7;
 if (i6 | 0) if ((HEAP32[i6 >> 2] | 0) == 85556) {
  L4 : do if (!i1) {
   HEAP32[i6 + 216 >> 2] = 0;
   HEAP32[i6 + 220 >> 2] = 0;
   i2 = i6 + 224 | 0;
   i3 = i6 + 228 | 0;
   i1 = HEAP32[i6 + 308 >> 2] | 0;
   if (i1 | 0) {
    if ((HEAP32[i1 >> 2] | 0) == 85557) {
     HEAP32[i2 >> 2] = HEAP32[i1 + 12 >> 2];
     HEAP32[i3 >> 2] = HEAP32[i1 + 16 >> 2];
     break;
    }
    _SDL_SetError(41358, i4) | 0;
    i6 = -1;
    STACKTOP = i7;
    return i6 | 0;
   }
   i1 = HEAP32[i6 + 8 >> 2] | 0;
   do if (!i1) {
    i1 = HEAP32[i6 + 188 >> 2] | 0;
    if (!i1) {
     i1 = _SDL_SetError(41374, i5) | 0;
     break;
    } else {
     _SDL_GetWindowSize(i1, i2, i3);
     break L4;
    }
   } else i1 = FUNCTION_TABLE_iiii[i1 & 63](i6, i2, i3) | 0; while (0);
   if ((i1 | 0) < 0) {
    i6 = -1;
    STACKTOP = i7;
    return i6 | 0;
   }
  } else {
   f8 = Math_fround(HEAP32[i1 >> 2] | 0);
   i4 = i6 + 288 | 0;
   HEAP32[i6 + 216 >> 2] = ~~+_SDL_floor(+Math_fround(Math_fround(HEAPF32[i4 >> 2]) * f8));
   f8 = Math_fround(HEAP32[i1 + 4 >> 2] | 0);
   i5 = i6 + 292 | 0;
   HEAP32[i6 + 220 >> 2] = ~~+_SDL_floor(+Math_fround(Math_fround(HEAPF32[i5 >> 2]) * f8));
   f8 = Math_fround(HEAP32[i1 + 8 >> 2] | 0);
   HEAP32[i6 + 224 >> 2] = ~~+_SDL_ceil(+Math_fround(Math_fround(HEAPF32[i4 >> 2]) * f8));
   f8 = Math_fround(HEAP32[i1 + 12 >> 2] | 0);
   HEAP32[i6 + 228 >> 2] = ~~+_SDL_ceil(+Math_fround(Math_fround(HEAPF32[i5 >> 2]) * f8));
  } while (0);
  i6 = FUNCTION_TABLE_ii[HEAP32[i6 + 48 >> 2] & 255](i6) | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetError(41341, i2) | 0;
 i6 = -1;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_PrivateGameControllerParseButton(i1, i5, i7) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i9 = i10 + 16 | 0;
 i4 = i10 + 8 | 0;
 i3 = i10;
 i8 = _SDL_GameControllerGetButtonFromString(i1) | 0;
 i1 = _SDL_GameControllerGetAxisFromString(i1) | 0;
 i2 = i5 + 1 | 0;
 i6 = _SDL_atoi(i2) | 0;
 switch (HEAP8[i5 >> 0] | 0) {
 case 97:
  {
   if ((i6 | 0) > 47) {
    HEAP32[i3 >> 2] = i6;
    _SDL_SetError(58636, i3) | 0;
    STACKTOP = i10;
    return;
   }
   if ((i1 | 0) != -1) {
    HEAP32[i7 + 20 + (i1 << 2) >> 2] = i6;
    HEAP32[i7 + 308 + (i6 << 2) >> 2] = i1;
    STACKTOP = i10;
    return;
   }
   if ((i8 | 0) == -1) {
    STACKTOP = i10;
    return;
   }
   HEAP32[i7 + 128 + (i8 << 2) >> 2] = i6;
   HEAP32[i7 + 884 + (i6 << 2) >> 2] = i8;
   STACKTOP = i10;
   return;
  }
 case 98:
  {
   if ((i6 | 0) > 47) {
    HEAP32[i4 >> 2] = i6;
    _SDL_SetError(58661, i4) | 0;
    STACKTOP = i10;
    return;
   }
   if ((i8 | 0) != -1) {
    HEAP32[i7 + 68 + (i8 << 2) >> 2] = i6;
    HEAP32[i7 + 692 + (i6 << 2) >> 2] = i8;
    STACKTOP = i10;
    return;
   }
   if ((i1 | 0) == -1) {
    STACKTOP = i10;
    return;
   }
   HEAP32[i7 + 44 + (i1 << 2) >> 2] = i6;
   HEAP32[i7 + 500 + (i6 << 2) >> 2] = i1;
   STACKTOP = i10;
   return;
  }
 case 104:
  {
   i2 = _SDL_atoi(i2) | 0;
   i1 = _SDL_atoi(i5 + 3 | 0) | 0;
   if ((i2 | 0) > 3) {
    HEAP32[i9 >> 2] = i6;
    _SDL_SetError(58688, i9) | 0;
   }
   if ((i8 | 0) == -1) {
    STACKTOP = i10;
    return;
   }
   i9 = i7 + 188 + (i8 << 3) | 0;
   HEAP32[i9 >> 2] = i2;
   HEAP8[i9 + 4 >> 0] = i1;
   HEAP32[i7 + 1076 + ((i2 << 4 | i1) << 2) >> 2] = i8;
   STACKTOP = i10;
   return;
  }
 default:
  {
   STACKTOP = i10;
   return;
  }
 }
}

function _trinkle(i1, i10, i11, i3, i6, i2, i12) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i9 = i14 + 232 | 0;
 i13 = i14;
 i5 = HEAP32[i3 >> 2] | 0;
 HEAP32[i9 >> 2] = i5;
 i8 = HEAP32[i3 + 4 >> 2] | 0;
 i7 = i9 + 4 | 0;
 HEAP32[i7 >> 2] = i8;
 HEAP32[i13 >> 2] = i1;
 L1 : do if ((i5 | 0) != 1 | (i8 | 0) != 0) {
  i8 = 0 - i10 | 0;
  i5 = i1 + (0 - (HEAP32[i12 + (i6 << 2) >> 2] | 0)) | 0;
  if ((FUNCTION_TABLE_iii[i11 & 63](i5, i1) | 0) < 1) {
   i4 = 1;
   i3 = i6;
   i5 = 9;
  } else {
   i4 = 1;
   i3 = i6;
   i2 = (i2 | 0) == 0;
   i6 = i5;
   while (1) {
    if (i2 & (i3 | 0) > 1) {
     i2 = i1 + i8 | 0;
     i5 = HEAP32[i12 + (i3 + -2 << 2) >> 2] | 0;
     if ((FUNCTION_TABLE_iii[i11 & 63](i2, i6) | 0) > -1) {
      i5 = 10;
      break L1;
     }
     if ((FUNCTION_TABLE_iii[i11 & 63](i2 + (0 - i5) | 0, i6) | 0) > -1) {
      i5 = 10;
      break L1;
     }
    }
    i2 = i4 + 1 | 0;
    HEAP32[i13 + (i4 << 2) >> 2] = i6;
    i5 = _pntz(i9) | 0;
    _shr(i9, i5);
    i3 = i5 + i3 | 0;
    if (!((HEAP32[i9 >> 2] | 0) != 1 | (HEAP32[i7 >> 2] | 0) != 0)) {
     i4 = i2;
     i1 = i6;
     i5 = 10;
     break L1;
    }
    i1 = i6 + (0 - (HEAP32[i12 + (i3 << 2) >> 2] | 0)) | 0;
    if ((FUNCTION_TABLE_iii[i11 & 63](i1, HEAP32[i13 >> 2] | 0) | 0) < 1) {
     i1 = i6;
     i4 = i2;
     i2 = 0;
     i5 = 9;
     break;
    } else {
     i5 = i6;
     i4 = i2;
     i2 = 1;
     i6 = i1;
     i1 = i5;
    }
   }
  }
 } else {
  i4 = 1;
  i3 = i6;
  i5 = 9;
 } while (0);
 if ((i5 | 0) == 9) if (!i2) i5 = 10;
 if ((i5 | 0) == 10) {
  _cycle(i10, i13, i4);
  _sift(i1, i10, i11, i3, i12);
 }
 STACKTOP = i14;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 16 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i4 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 & 255, i8) | 0) >>> 0) / 255 | 0) | (((Math_imul(i4 >>> 16 & 255, i7) | 0) >>> 0) / 255 | 0) << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function __ZN9Collision4AABBERK17ColliderComponentS2_(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i6;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i2 = HEAP32[i4 + 8 >> 2] | 0;
 if (((HEAP32[i3 + 16 >> 2] | 0) + i1 | 0) < (i2 | 0)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (((HEAP32[i4 + 16 >> 2] | 0) + i2 | 0) < (i1 | 0)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 i2 = HEAP32[i4 + 12 >> 2] | 0;
 if (((HEAP32[i3 + 20 >> 2] | 0) + i1 | 0) < (i2 | 0)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (((HEAP32[i4 + 20 >> 2] | 0) + i2 | 0) < (i1 | 0)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i2 = i3 + 24 | 0;
 i7 = HEAP8[i2 + 11 >> 0] | 0;
 i1 = i7 << 24 >> 24 < 0;
 i7 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, i1 ? HEAP32[i2 >> 2] | 0 : i2, i1 ? HEAP32[i3 + 28 >> 2] | 0 : i7 & 255) | 0, 38934, 6) | 0;
 i1 = i4 + 24 | 0;
 i3 = HEAP8[i1 + 11 >> 0] | 0;
 i2 = i3 << 24 >> 24 < 0;
 i4 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i7, i2 ? HEAP32[i1 >> 2] | 0 : i1, i2 ? HEAP32[i4 + 28 >> 2] | 0 : i3 & 255) | 0;
 __ZNKSt3__28ios_base6getlocEv(i5, i4 + (HEAP32[(HEAP32[i4 >> 2] | 0) + -12 >> 2] | 0) | 0);
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 83620) | 0;
 i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 63](i3, 10) | 0;
 __ZNSt3__26localeD2Ev(i5);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i4, i3) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i4) | 0;
 i5 = 1;
 STACKTOP = i6;
 return i5 | 0;
}

function _SDL_Blit_RGB888_RGB888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 >>> 16 & 255, i8) | 0) >>> 0) / 255 | 0) << 16 | (((Math_imul(i4 & 255, i7) | 0) >>> 0) / 255 | 0);
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _SDL_Blit_BGR888_BGR888_Modulate(i14) {
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i1 = HEAP32[i14 + 52 >> 2] | 0;
 i8 = HEAPU8[i14 + 60 >> 0] | 0;
 i9 = HEAPU8[i14 + 61 >> 0] | 0;
 i7 = HEAPU8[i14 + 62 >> 0] | 0;
 i10 = i14 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 i4 = i15 + -1 | 0;
 HEAP32[i10 >> 2] = i4;
 if (!i15) return;
 i15 = i14 + 20 | 0;
 i11 = i14 + 24 | 0;
 i12 = i14 + 12 | 0;
 i13 = i14 + 32 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!(i1 & 1)) {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2] & 16777215;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 } else {
  i5 = i3;
  i6 = i2;
  i1 = i2;
  i2 = i3;
  while (1) {
   i3 = HEAP32[i11 >> 2] | 0;
   if (!i3) i3 = i4; else {
    while (1) {
     i3 = i3 + -1 | 0;
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i1 >> 2] = (((Math_imul(i4 >>> 8 & 255, i9) | 0) >>> 0) / 255 | 0) << 8 | (((Math_imul(i4 & 255, i8) | 0) >>> 0) / 255 | 0) | (((Math_imul(i4 >>> 16 & 255, i7) | 0) >>> 0) / 255 | 0) << 16;
     if (!i3) break; else {
      i1 = i1 + 4 | 0;
      i2 = i2 + 4 | 0;
     }
    }
    i3 = HEAP32[i10 >> 2] | 0;
   }
   i2 = i5 + (HEAP32[i12 >> 2] | 0) | 0;
   i1 = i6 + (HEAP32[i13 >> 2] | 0) | 0;
   i4 = i3 + -1 | 0;
   HEAP32[i10 >> 2] = i4;
   if (!i3) break; else {
    i5 = i2;
    i6 = i1;
   }
  }
 }
 HEAP32[i14 >> 2] = i2;
 HEAP32[i15 >> 2] = i1;
 return;
}

function _png_colorspace_set_chromaticities(i3, i4, i7, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i1 = i10;
 switch (_png_colorspace_check_xy(i1, i7) | 0) {
 case 0:
  {
   i8 = i4 + 74 | 0;
   i9 = HEAP16[i8 >> 1] | 0;
   i6 = i9 & 65535;
   if (i6 & 32768 | 0) {
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   }
   i2 = i4 + 4 | 0;
   do if (!((i5 | 0) > 1 | (i6 & 2 | 0) == 0)) if (!(_png_colorspace_endpoints_match(i7, i2, 100) | 0)) {
    HEAP16[i8 >> 1] = i9 | -32768;
    _png_benign_error(i3, 60958);
    i9 = 0;
    STACKTOP = i10;
    return i9 | 0;
   } else {
    if (!i5) i1 = 1; else break;
    STACKTOP = i10;
    return i1 | 0;
   } while (0);
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
   HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
   HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
   HEAP32[i2 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
   HEAP32[i2 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
   HEAP32[i2 + 24 >> 2] = HEAP32[i7 + 24 >> 2];
   HEAP32[i2 + 28 >> 2] = HEAP32[i7 + 28 >> 2];
   i3 = i4 + 36 | 0;
   i2 = i3 + 36 | 0;
   do {
    HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
    i3 = i3 + 4 | 0;
    i1 = i1 + 4 | 0;
   } while ((i3 | 0) < (i2 | 0));
   i7 = (_png_colorspace_endpoints_match(i7, 18340, 1e3) | 0) != 0;
   i9 = (i9 | 2) & 65535;
   HEAP16[i8 >> 1] = i7 ? i9 | 64 : i9 & 65471;
   i9 = 2;
   STACKTOP = i10;
   return i9 | 0;
  }
 case 1:
  {
   i9 = i4 + 74 | 0;
   HEAP16[i9 >> 1] = HEAP16[i9 >> 1] | -32768;
   _png_benign_error(i3, 60986);
   i9 = 0;
   STACKTOP = i10;
   return i9 | 0;
  }
 default:
  {
   i10 = i4 + 74 | 0;
   HEAP16[i10 >> 1] = HEAP16[i10 >> 1] | -32768;
   _png_error(i3, 61009);
  }
 }
 return 0;
}

function _SDL_Blit_ABGR8888_ARGB8888_Modulate(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i7 + 52 >> 2] | 0;
 i16 = HEAPU8[i7 + 60 >> 0] | 0;
 i17 = HEAPU8[i7 + 61 >> 0] | 0;
 i8 = HEAPU8[i7 + 62 >> 0] | 0;
 i9 = HEAPU8[i7 + 63 >> 0] | 0;
 i10 = i7 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i15 + -1;
 if (!i15) return;
 i11 = i7 + 20 | 0;
 i12 = i7 + 24 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 32 | 0;
 i15 = (i1 & 1 | 0) == 0;
 i4 = (i1 & 2 | 0) == 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i5 = i2;
 i6 = i3;
 while (1) {
  i18 = HEAP32[i12 >> 2] | 0;
  i1 = i18 + -1 | 0;
  if (i18 | 0) if (i15) while (1) {
   i18 = HEAP32[i2 >> 2] | 0;
   i20 = i18 >>> 24;
   i19 = ((Math_imul(i20, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i18 << 16 & 16711680 | (i4 ? i20 : i19) << 24 | i18 & 65280 | i18 >>> 16 & 255;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  } else while (1) {
   i20 = HEAP32[i2 >> 2] | 0;
   i21 = i20 >>> 24;
   i22 = ((Math_imul(i20 & 255, i16) | 0) >>> 0) / 255 | 0;
   i19 = ((Math_imul(i20 >>> 8 & 255, i17) | 0) >>> 0) / 255 | 0;
   i20 = ((Math_imul(i20 >>> 16 & 255, i8) | 0) >>> 0) / 255 | 0;
   i18 = ((Math_imul(i21, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i22 << 16 | (i4 ? i21 : i18) << 24 | i19 << 8 | i20;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  }
  i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
  i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
  i22 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i22 + -1;
  if (!i22) break; else {
   i5 = i2;
   i6 = i1;
   i3 = i1;
  }
 }
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = i1;
 return;
}

function __ZN6Entity12addComponentI15SpriteComponentJRPKciiEEERT_DpOT0_(i4, i2, i3, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 i6 = __Znwj(88) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i6 >> 2] = 2836;
 HEAP32[i6 + 8 >> 2] = 0;
 __ZN8Vector2dC2Ev(i6 + 48 | 0);
 HEAP8[i6 + 56 >> 0] = 0;
 HEAP8[i6 + 57 >> 0] = (i2 | 0) != 0 & 1;
 HEAP32[i6 + 60 >> 2] = 0;
 HEAP32[i6 + 64 >> 2] = 100;
 HEAP32[i6 + 68 >> 2] = 0;
 i2 = i6 + 76 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i6 + 80 >> 2] = 0;
 HEAP32[i6 + 72 >> 2] = i2;
 HEAP32[i6 + 84 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = __ZN14TextureManager11LoadTextureEPKc(i1) | 0;
 HEAP32[i6 + 4 >> 2] = i4;
 i1 = i6;
 HEAP32[i5 >> 2] = i1;
 i2 = i4 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i4 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i4 + 8 | 0, i5);
 if (!(HEAP8[75984] | 0)) if (___cxa_guard_acquire(75984) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19479] = i3;
 }
 HEAP32[i4 + 20 + (HEAP32[19479] << 2) >> 2] = i6;
 if (!(HEAP8[75984] | 0)) if (___cxa_guard_acquire(75984) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19479] = i3;
 }
 i1 = i4 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19479];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i7;
 return i6 | 0;
}

function _png_check_IHDR(i11, i2, i3, i5, i6, i7, i8, i9) {
 i11 = i11 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i4 = 0, i10 = 0, i12 = 0;
 i12 = 0;
 if (!i2) {
  _png_warning(i11, 61949);
  i1 = 1;
 } else {
  if ((i2 | 0) < 0) {
   _png_warning(i11, 61977);
   i1 = 1;
  } else i1 = 0;
  if ((i2 + 7 & -8) >>> 0 >= 536870905) {
   _png_warning(i11, 62005);
   i1 = 1;
  }
 }
 if ((HEAP32[i11 + 748 >> 2] | 0) >>> 0 < i2 >>> 0) {
  _png_warning(i11, 62052);
  i1 = 1;
 }
 if (!i3) {
  _png_warning(i11, 62091);
  i1 = 1;
 } else if ((i3 | 0) < 0) {
  _png_warning(i11, 62120);
  i1 = 1;
 }
 if ((HEAP32[i11 + 752 >> 2] | 0) >>> 0 < i3 >>> 0) {
  _png_warning(i11, 62149);
  i1 = 1;
 }
 switch (i5 | 0) {
 case 1:
 case 2:
 case 4:
 case 8:
 case 16:
  break;
 default:
  {
   _png_warning(i11, 62189);
   i1 = 1;
  }
 }
 i4 = i6 | 4;
 if (i6 >>> 0 > 6 | (i4 | 0) == 5) {
  _png_warning(i11, 62215);
  i1 = 1;
 }
 if ((i5 | 0) > 8 & (i6 | 0) == 3) i12 = 21; else if ((i5 | 0) < 8 & ((i6 | 0) == 4 | (i4 | 0) == 6)) i12 = 21;
 if ((i12 | 0) == 21) {
  _png_warning(i11, 62242);
  i1 = 1;
 }
 if ((i7 | 0) > 1) {
  _png_warning(i11, 62291);
  i1 = 1;
 }
 if (!i8) i2 = i1; else {
  _png_warning(i11, 62324);
  i2 = 1;
 }
 i3 = i11 + 208 | 0;
 if (HEAP32[i3 >> 2] & 4096 | 0) if (HEAP32[i11 + 708 >> 2] | 0) _png_warning(i11, 62359);
 if (!i9) i10 = i2; else {
  if ((i9 | 0) == 64 ? (HEAP32[i11 + 708 >> 2] & 4 | 0) != 0 : 0) {
   i1 = HEAP32[i3 >> 2] | 0;
   if (!((i4 | 0) == 6 & (i1 & 4096 | 0) == 0)) i12 = 32;
  } else i12 = 32;
  if ((i12 | 0) == 32) {
   _png_warning(i11, 62408);
   i2 = 1;
   i1 = HEAP32[i3 >> 2] | 0;
  }
  if (!(i1 & 4096)) i10 = i2; else {
   _png_warning(i11, 62438);
   _png_error(i11, 62468);
  }
 }
 if ((i10 | 0) == 1) _png_error(i11, 62468); else return;
}

function _SDL_Blit_ARGB8888_ARGB8888_Modulate(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i7 + 52 >> 2] | 0;
 i16 = HEAPU8[i7 + 60 >> 0] | 0;
 i17 = HEAPU8[i7 + 61 >> 0] | 0;
 i8 = HEAPU8[i7 + 62 >> 0] | 0;
 i9 = HEAPU8[i7 + 63 >> 0] | 0;
 i10 = i7 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i15 + -1;
 if (!i15) return;
 i11 = i7 + 20 | 0;
 i12 = i7 + 24 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 32 | 0;
 i15 = (i1 & 1 | 0) == 0;
 i4 = (i1 & 2 | 0) == 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i5 = i2;
 i6 = i3;
 while (1) {
  i18 = HEAP32[i12 >> 2] | 0;
  i1 = i18 + -1 | 0;
  if (i18 | 0) if (i15) while (1) {
   i18 = HEAP32[i2 >> 2] | 0;
   i20 = i18 >>> 24;
   i19 = ((Math_imul(i20, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i18 & 16711680 | (i4 ? i20 : i19) << 24 | i18 & 65280 | i18 & 255;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  } else while (1) {
   i20 = HEAP32[i2 >> 2] | 0;
   i21 = i20 >>> 24;
   i22 = ((Math_imul(i20 >>> 16 & 255, i16) | 0) >>> 0) / 255 | 0;
   i19 = ((Math_imul(i20 >>> 8 & 255, i17) | 0) >>> 0) / 255 | 0;
   i20 = ((Math_imul(i20 & 255, i8) | 0) >>> 0) / 255 | 0;
   i18 = ((Math_imul(i21, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i22 << 16 | (i4 ? i21 : i18) << 24 | i19 << 8 | i20;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  }
  i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
  i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
  i22 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i22 + -1;
  if (!i22) break; else {
   i5 = i2;
   i6 = i1;
   i3 = i1;
  }
 }
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = i1;
 return;
}

function _png_inflate(i12, i1, i2, i13, i4, i14) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i15 = 0;
 i8 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024);
 i5 = i15;
 if ((HEAP32[i12 + 220 >> 2] | 0) != (i1 | 0)) {
  HEAP32[i12 + 248 >> 2] = 63874;
  i14 = -2;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i6 = i12 + 224 | 0;
 HEAP32[i6 >> 2] = i2;
 i10 = i12 + 228 | 0;
 HEAP32[i10 >> 2] = 0;
 i11 = i12 + 240 | 0;
 HEAP32[i11 >> 2] = 0;
 i7 = (i4 | 0) == 0;
 i9 = i12 + 236 | 0;
 if (i7) {
  HEAP32[i10 >> 2] = i3;
  HEAP32[i9 >> 2] = i5;
  i2 = i1 >>> 0 < 1024 ? i1 : 1024;
  HEAP32[i11 >> 2] = i2;
  i2 = i1 - i2 | 0;
  i1 = _inflate(i6, (i2 | 0) == 0 ? 4 : 0) | 0;
  if (!i1) {
   i1 = i2;
   while (1) {
    i1 = (HEAP32[i11 >> 2] | 0) + i1 | 0;
    HEAP32[i9 >> 2] = i5;
    i2 = i1 >>> 0 < 1024 ? i1 : 1024;
    HEAP32[i11 >> 2] = i2;
    i2 = i1 - i2 | 0;
    i1 = _inflate(i6, (i2 | 0) == 0 ? 4 : 0) | 0;
    if (!i1) i1 = i2; else {
     i8 = 7;
     break;
    }
   }
  } else i8 = 8;
 } else {
  HEAP32[i9 >> 2] = i4;
  HEAP32[i10 >> 2] = i3;
  HEAP32[i11 >> 2] = i1;
  i3 = _inflate(i6, 4) | 0;
  if (!i3) {
   do i1 = _inflate(i6, 4) | 0; while (!(i1 | 0));
   i2 = 0;
   i8 = 7;
  } else i4 = 0;
 }
 if ((i8 | 0) == 7) if (i7) i8 = 8; else {
  i4 = i2;
  i3 = i1;
 }
 if ((i8 | 0) == 8) {
  HEAP32[i9 >> 2] = 0;
  i4 = i2;
  i3 = i1;
 }
 i2 = HEAP32[i10 >> 2] | 0;
 i1 = (HEAP32[i11 >> 2] | 0) + i4 | 0;
 if (i1 | 0) HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) - i1;
 if (i2 | 0) HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - i2;
 _png_zstream_error(i12, i3);
 i14 = i3;
 STACKTOP = i15;
 return i14 | 0;
}

function _png_handle_unknown(i6, i5, i3, i1) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = 0;
 i2 = i6 + 684 | 0;
 do if (!(HEAP32[i2 >> 2] | 0)) {
  if (!i1) i1 = HEAP32[i6 + 688 >> 2] | 0;
  switch (i1 | 0) {
  case 3:
   {
    i4 = 13;
    break;
   }
  case 2:
   {
    if (!(HEAP32[i6 + 376 >> 2] & 536870912)) i4 = 14; else i4 = 13;
    break;
   }
  default:
   i4 = 14;
  }
  if ((i4 | 0) == 13) {
   i3 = (_png_cache_unknown_chunk(i6, i3) | 0) == 0;
   i1 = i3 ? 1 : i1;
   i4 = 15;
   break;
  } else if ((i4 | 0) == 14) {
   _png_crc_finish(i6, i3) | 0;
   i4 = 15;
   break;
  }
 } else if (!(_png_cache_unknown_chunk(i6, i3) | 0)) i3 = 0; else {
  i2 = FUNCTION_TABLE_iii[HEAP32[i2 >> 2] & 63](i6, i6 + 764 | 0) | 0;
  if ((i2 | 0) < 0) _png_chunk_error(i6, 65098);
  if (!i2) if ((i1 | 0) < 2) if ((HEAP32[i6 + 688 >> 2] | 0) < 2) {
   _png_chunk_warning(i6, 65118);
   _png_app_warning(i6, 65140);
   i4 = 16;
  } else i4 = 16; else i4 = 15; else i3 = 1;
 } while (0);
 if ((i4 | 0) == 15) switch (i1 | 0) {
 case 3:
  {
   i4 = 17;
   break;
  }
 case 2:
  {
   i4 = 16;
   break;
  }
 default:
  i3 = 0;
 }
 if ((i4 | 0) == 16) if (!(HEAP32[i6 + 376 >> 2] & 536870912)) i3 = 0; else i4 = 17;
 L23 : do if ((i4 | 0) == 17) {
  i1 = i6 + 756 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  switch (i2 | 0) {
  case 1:
   {
    i3 = 0;
    break L23;
   }
  case 2:
   {
    HEAP32[i1 >> 2] = 1;
    _png_chunk_benign_error(i6, 63619);
    i3 = 0;
    break L23;
   }
  case 0:
   break;
  default:
   HEAP32[i1 >> 2] = i2 + -1;
  }
  _png_set_unknown_chunks(i6, i5, i6 + 764 | 0, 1);
  i3 = 1;
 } while (0);
 i1 = i6 + 772 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) _png_free(i6, i2);
 HEAP32[i1 >> 2] = 0;
 if (i3 | 0) return;
 if (!(HEAP32[i6 + 376 >> 2] & 536870912)) _png_chunk_error(i6, 65216); else return;
}

function _SDL_DrawPoints(i1, i6, i10, i14) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!i1) {
  i16 = _SDL_SetError(48302, i17) | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i15 = i1 + 4 | 0;
 if ((HEAPU8[(HEAP32[i15 >> 2] | 0) + 8 >> 0] | 0) < 8) {
  i16 = _SDL_SetError(48424, i17 + 8 | 0) | 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i7 = HEAP32[i1 + 36 >> 2] | 0;
 i8 = (HEAP32[i1 + 44 >> 2] | 0) + i7 | 0;
 i9 = HEAP32[i1 + 40 >> 2] | 0;
 i11 = (HEAP32[i1 + 48 >> 2] | 0) + i9 | 0;
 if ((i10 | 0) <= 0) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i12 = i14 & 255;
 i13 = i1 + 20 | 0;
 i2 = i1 + 16 | 0;
 i3 = i14 & 65535;
 i1 = 0;
 L12 : while (1) {
  i5 = i6 + (i1 << 3) | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i5 = HEAP32[i5 + 4 >> 2] | 0;
  L14 : do if ((i5 | 0) < (i11 | 0) & (((i4 | 0) >= (i8 | 0) | (i4 | 0) < (i7 | 0) | (i5 | 0) < (i9 | 0)) ^ 1)) switch (HEAP8[(HEAP32[i15 >> 2] | 0) + 9 >> 0] | 0) {
  case 3:
   break L12;
  case 1:
   {
    HEAP8[(HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i2 >> 2] | 0, i5) | 0) + i4 >> 0] = i12;
    break L14;
   }
  case 2:
   {
    HEAP16[(HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i2 >> 2] | 0, i5) | 0) + (i4 << 1) >> 1] = i3;
    break L14;
   }
  case 4:
   {
    HEAP32[(HEAP32[i13 >> 2] | 0) + (Math_imul(HEAP32[i2 >> 2] | 0, i5) | 0) + (i4 << 2) >> 2] = i14;
    break L14;
   }
  default:
   break L14;
  } while (0);
  i1 = i1 + 1 | 0;
  if ((i1 | 0) >= (i10 | 0)) {
   i1 = 0;
   i16 = 14;
   break;
  }
 }
 if ((i16 | 0) == 14) {
  STACKTOP = i17;
  return i1 | 0;
 }
 i16 = _SDL_Error(4) | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Modulate(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i7 + 52 >> 2] | 0;
 i16 = HEAPU8[i7 + 60 >> 0] | 0;
 i17 = HEAPU8[i7 + 61 >> 0] | 0;
 i8 = HEAPU8[i7 + 62 >> 0] | 0;
 i9 = HEAPU8[i7 + 63 >> 0] | 0;
 i10 = i7 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i15 + -1;
 if (!i15) return;
 i11 = i7 + 20 | 0;
 i12 = i7 + 24 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 32 | 0;
 i15 = (i1 & 1 | 0) == 0;
 i4 = (i1 & 2 | 0) == 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i5 = i2;
 i6 = i3;
 while (1) {
  i18 = HEAP32[i12 >> 2] | 0;
  i1 = i18 + -1 | 0;
  if (i18 | 0) if (i15) while (1) {
   i20 = HEAP32[i2 >> 2] | 0;
   i18 = i20 >>> 8;
   i19 = ((Math_imul(i20 & 255, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i20 >>> 24 << 16 | (i4 ? i20 : i19) << 24 | i18 & 65280 | i18 & 255;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  } else while (1) {
   i21 = HEAP32[i2 >> 2] | 0;
   i22 = ((Math_imul(i21 >>> 24, i16) | 0) >>> 0) / 255 | 0;
   i19 = ((Math_imul(i21 >>> 16 & 255, i17) | 0) >>> 0) / 255 | 0;
   i20 = ((Math_imul(i21 >>> 8 & 255, i8) | 0) >>> 0) / 255 | 0;
   i18 = ((Math_imul(i21 & 255, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i22 << 16 | (i4 ? i21 : i18) << 24 | i19 << 8 | i20;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  }
  i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
  i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
  i22 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i22 + -1;
  if (!i22) break; else {
   i5 = i2;
   i6 = i1;
   i3 = i1;
  }
 }
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = i1;
 return;
}

function _png_set_unknown_chunks(i8, i1, i4, i3) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = 0;
 if ((i4 | 0) == 0 | ((i8 | 0) == 0 | (i1 | 0) == 0 | (i3 | 0) < 1)) return;
 i2 = i1 + 236 | 0;
 i9 = i1 + 240 | 0;
 i5 = _png_realloc_array(i8, HEAP32[i2 >> 2] | 0, HEAP32[i9 >> 2] | 0, i3, 20) | 0;
 if (!i5) {
  _png_chunk_report(i8, 65241, 1);
  return;
 }
 _png_free(i8, HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = i5;
 i7 = i1 + 232 | 0;
 HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 512;
 if ((i3 | 0) <= 0) return;
 i7 = i8 + 208 | 0;
 i6 = i4;
 i1 = i5 + ((HEAP32[i9 >> 2] | 0) * 20 | 0) | 0;
 while (1) {
  HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
  HEAP8[i1 + 4 >> 0] = 0;
  i5 = HEAP8[i6 + 16 >> 0] & 11;
  i2 = i5 & 255;
  if (!(i5 << 24 >> 24)) {
   if (HEAP32[i7 >> 2] & 32768 | 0) {
    i10 = 9;
    break;
   }
   _png_app_warning(i8, 65265);
   i2 = HEAP32[i7 >> 2] & 11;
   if (!i2) {
    i10 = 9;
    break;
   }
  }
  while (1) {
   i4 = i2 & 0 - i2;
   if ((i2 | 0) == (i4 | 0)) break; else i2 = i4 ^ i2;
  }
  HEAP8[i1 + 16 >> 0] = i2;
  i4 = i6 + 12 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  do if (!i2) {
   HEAP32[i1 + 8 >> 2] = 0;
   i2 = 0;
   i10 = 16;
  } else {
   i2 = _png_malloc_base(i8, i2) | 0;
   HEAP32[i1 + 8 >> 2] = i2;
   if (!i2) {
    _png_chunk_report(i8, 65360, 1);
    break;
   } else {
    _memcpy(i2 | 0, HEAP32[i6 + 8 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
    i2 = HEAP32[i4 >> 2] | 0;
    i10 = 16;
    break;
   }
  } while (0);
  if ((i10 | 0) == 16) {
   i10 = 0;
   HEAP32[i1 + 12 >> 2] = i2;
   HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
   i1 = i1 + 20 | 0;
  }
  if ((i3 | 0) > 1) {
   i3 = i3 + -1 | 0;
   i6 = i6 + 20 | 0;
  } else {
   i10 = 18;
   break;
  }
 }
 if ((i10 | 0) == 9) _png_error(i8, 65317); else if ((i10 | 0) == 18) return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Modulate(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0;
 i1 = HEAP32[i7 + 52 >> 2] | 0;
 i16 = HEAPU8[i7 + 60 >> 0] | 0;
 i17 = HEAPU8[i7 + 61 >> 0] | 0;
 i8 = HEAPU8[i7 + 62 >> 0] | 0;
 i9 = HEAPU8[i7 + 63 >> 0] | 0;
 i10 = i7 + 28 | 0;
 i15 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i15 + -1;
 if (!i15) return;
 i11 = i7 + 20 | 0;
 i12 = i7 + 24 | 0;
 i13 = i7 + 12 | 0;
 i14 = i7 + 32 | 0;
 i15 = (i1 & 1 | 0) == 0;
 i4 = (i1 & 2 | 0) == 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i5 = i2;
 i6 = i3;
 while (1) {
  i18 = HEAP32[i12 >> 2] | 0;
  i1 = i18 + -1 | 0;
  if (i18 | 0) if (i15) while (1) {
   i18 = HEAP32[i2 >> 2] | 0;
   i19 = ((Math_imul(i18 & 255, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i18 << 8 & 16711680 | (i4 ? i18 : i19) << 24 | i18 >>> 8 & 65280 | i18 >>> 24;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  } else while (1) {
   i21 = HEAP32[i2 >> 2] | 0;
   i22 = ((Math_imul(i21 >>> 8 & 255, i16) | 0) >>> 0) / 255 | 0;
   i18 = ((Math_imul(i21 >>> 16 & 255, i17) | 0) >>> 0) / 255 | 0;
   i19 = ((Math_imul(i21 >>> 24, i8) | 0) >>> 0) / 255 | 0;
   i20 = ((Math_imul(i21 & 255, i9) | 0) >>> 0) / 255 | 0;
   HEAP32[i3 >> 2] = i22 << 16 | (i4 ? i21 : i20) << 24 | i18 << 8 | i19;
   if (!i1) break; else {
    i3 = i3 + 4 | 0;
    i2 = i2 + 4 | 0;
    i1 = i1 + -1 | 0;
   }
  }
  i2 = i5 + (HEAP32[i13 >> 2] | 0) | 0;
  i1 = i6 + (HEAP32[i14 >> 2] | 0) | 0;
  i22 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i22 + -1;
  if (!i22) break; else {
   i5 = i2;
   i6 = i1;
   i3 = i1;
  }
 }
 HEAP32[i7 >> 2] = i2;
 HEAP32[i11 >> 2] = i1;
 return;
}

function _SDL_BlendPoint_RGB555(i2, i3, i4, i5, i8, i7, i6, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i1 = ~i1 & 255;
 switch (i5 | 0) {
 case 1:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i5 = HEAPU16[i4 >> 1] | 0;
   i3 = (((Math_imul(HEAPU8[41014 + (i5 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0;
   i2 = (((Math_imul(HEAPU8[41014 + (i5 >>> 5 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0;
   i1 = (((Math_imul(HEAPU8[41014 + (i5 >>> 10 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0;
   break;
  }
 case 2:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i3 = HEAPU16[i4 >> 1] | 0;
   i1 = (HEAPU8[41014 + (i3 >>> 10 & 31) >> 0] | 0) + (i8 & 255) | 0;
   i2 = (HEAPU8[41014 + (i3 >>> 5 & 31) >> 0] | 0) + (i7 & 255) | 0;
   i3 = (HEAPU8[41014 + (i3 & 31) >> 0] | 0) + (i6 & 255) | 0;
   i3 = i3 >>> 0 < 255 ? i3 : 255;
   i2 = i2 >>> 0 < 255 ? i2 : 255;
   i1 = i1 >>> 0 < 255 ? i1 : 255;
   break;
  }
 case 4:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i1 = HEAPU16[i4 >> 1] | 0;
   i3 = ((Math_imul(HEAPU8[41014 + (i1 & 31) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0;
   i2 = ((Math_imul(HEAPU8[41014 + (i1 >>> 5 & 31) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0;
   i1 = ((Math_imul(HEAPU8[41014 + (i1 >>> 10 & 31) >> 0] | 0, i8 & 255) | 0) >>> 0) / 255 | 0;
   break;
  }
 default:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i3 = i6 & 255;
   i2 = i7 & 255;
   i1 = i8 & 255;
  }
 }
 HEAP16[i4 >> 1] = i2 >>> 3 << 5 | i1 >>> 3 << 10 | i3 >>> 3;
 return 0;
}

function __ZNSt3__211__stdoutbufIwE8overflowEj(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i13 + 16 | 0;
 i3 = i13 + 8 | 0;
 i11 = i13 + 4 | 0;
 i12 = i13;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i9, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) i2 = 15; else {
  HEAP32[i3 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(i9) | 0;
  if (HEAP8[i1 + 44 >> 0] | 0) {
   if ((_fwrite(i3, 4, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
    i2 = 15;
    break;
   }
   i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[i11 >> 2] = i10;
  i2 = i3 + 4 | 0;
  i4 = i1 + 36 | 0;
  i5 = i1 + 40 | 0;
  i6 = i10 + 8 | 0;
  i7 = i10;
  i8 = i1 + 32 | 0;
  while (1) {
   i1 = HEAP32[i4 >> 2] | 0;
   i1 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i5 >> 2] | 0, i3, i2, i12, i10, i6, i11) | 0;
   if ((HEAP32[i12 >> 2] | 0) == (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 3) {
    i2 = 8;
    break;
   }
   if (i1 >>> 0 >= 2) {
    i2 = 14;
    break;
   }
   i3 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i10, 1, i3, HEAP32[i8 >> 2] | 0) | 0) != (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 1) i3 = HEAP32[i12 >> 2] | 0; else {
    i2 = 13;
    break;
   }
  }
  if ((i2 | 0) == 8) if ((_fwrite(i3, 1, 1, HEAP32[i8 >> 2] | 0) | 0) == 1) i2 = 13; else i2 = 14;
  if ((i2 | 0) == 13) {
   i2 = 15;
   break;
  } else if ((i2 | 0) == 14) {
   i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((i2 | 0) == 15) i1 = __ZNSt3__211char_traitsIwE7not_eofEj(i9) | 0;
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi(i1, i9) {
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i10 = i13 + 16 | 0;
 i3 = i13 + 8 | 0;
 i11 = i13 + 4 | 0;
 i12 = i13;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i9, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) i2 = 15; else {
  HEAP8[i3 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(i9) | 0;
  if (HEAP8[i1 + 44 >> 0] | 0) {
   if ((_fwrite(i3, 1, 1, HEAP32[i1 + 32 >> 2] | 0) | 0) == 1) {
    i2 = 15;
    break;
   }
   i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[i11 >> 2] = i10;
  i2 = i3 + 1 | 0;
  i4 = i1 + 36 | 0;
  i5 = i1 + 40 | 0;
  i6 = i10 + 8 | 0;
  i7 = i10;
  i8 = i1 + 32 | 0;
  while (1) {
   i1 = HEAP32[i4 >> 2] | 0;
   i1 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i5 >> 2] | 0, i3, i2, i12, i10, i6, i11) | 0;
   if ((HEAP32[i12 >> 2] | 0) == (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 3) {
    i2 = 8;
    break;
   }
   if (i1 >>> 0 >= 2) {
    i2 = 14;
    break;
   }
   i3 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i10, 1, i3, HEAP32[i8 >> 2] | 0) | 0) != (i3 | 0)) {
    i2 = 14;
    break;
   }
   if ((i1 | 0) == 1) i3 = HEAP32[i12 >> 2] | 0; else {
    i2 = 13;
    break;
   }
  }
  if ((i2 | 0) == 8) if ((_fwrite(i3, 1, 1, HEAP32[i8 >> 2] | 0) | 0) == 1) i2 = 13; else i2 = 14;
  if ((i2 | 0) == 13) {
   i2 = 15;
   break;
  } else if ((i2 | 0) == 14) {
   i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((i2 | 0) == 15) i1 = __ZNSt3__211char_traitsIcE7not_eofEi(i9) | 0;
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj(i4, i8) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i10 + 16 | 0;
 i6 = i10 + 8 | 0;
 i2 = i10 + 4 | 0;
 i3 = i10;
 i7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i8, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 i9 = i4 + 52 | 0;
 i1 = (HEAP8[i9 >> 0] | 0) != 0;
 do if (i7) if (i1) i1 = i8; else {
  i1 = HEAP32[i4 + 48 >> 2] | 0;
  HEAP8[i9 >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
 } else {
  if (i1) {
   i7 = i4 + 48 | 0;
   HEAP32[i2 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[i7 >> 2] | 0) | 0;
   i1 = HEAP32[i4 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i4 + 40 >> 2] | 0, i2, i2 + 4 | 0, i3, i5, i5 + 8 | 0, i6) | 0) {
   case 1:
   case 2:
    {
     i3 = 11;
     break;
    }
   case 3:
    {
     HEAP8[i5 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i6 >> 2] = i5 + 1;
     i3 = 8;
     break;
    }
   default:
    i3 = 8;
   }
   L9 : do if ((i3 | 0) == 8) {
    i1 = i4 + 32 | 0;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if (i2 >>> 0 <= i5 >>> 0) {
      i2 = 1;
      i1 = 0;
      break L9;
     }
     i4 = i2 + -1 | 0;
     HEAP32[i6 >> 2] = i4;
     if ((_ungetc(HEAP8[i4 >> 0] | 0, HEAP32[i1 >> 2] | 0) | 0) == -1) {
      i3 = 11;
      break;
     }
    }
   } while (0);
   if ((i3 | 0) == 11) {
    i2 = 0;
    i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if (i2) i1 = i7; else break;
  } else i1 = i4 + 48 | 0;
  HEAP32[i1 >> 2] = i8;
  HEAP8[i9 >> 0] = 1;
  i1 = i8;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi(i4, i8) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i10 + 16 | 0;
 i6 = i10 + 4 | 0;
 i2 = i10 + 8 | 0;
 i3 = i10;
 i7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i8, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 i9 = i4 + 52 | 0;
 i1 = (HEAP8[i9 >> 0] | 0) != 0;
 do if (i7) if (i1) i1 = i8; else {
  i1 = HEAP32[i4 + 48 >> 2] | 0;
  HEAP8[i9 >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
 } else {
  if (i1) {
   i7 = i4 + 48 | 0;
   HEAP8[i2 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[i7 >> 2] | 0) | 0;
   i1 = HEAP32[i4 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 31](i1, HEAP32[i4 + 40 >> 2] | 0, i2, i2 + 1 | 0, i3, i5, i5 + 8 | 0, i6) | 0) {
   case 1:
   case 2:
    {
     i3 = 11;
     break;
    }
   case 3:
    {
     HEAP8[i5 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i6 >> 2] = i5 + 1;
     i3 = 8;
     break;
    }
   default:
    i3 = 8;
   }
   L9 : do if ((i3 | 0) == 8) {
    i1 = i4 + 32 | 0;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if (i2 >>> 0 <= i5 >>> 0) {
      i2 = 1;
      i1 = 0;
      break L9;
     }
     i4 = i2 + -1 | 0;
     HEAP32[i6 >> 2] = i4;
     if ((_ungetc(HEAP8[i4 >> 0] | 0, HEAP32[i1 >> 2] | 0) | 0) == -1) {
      i3 = 11;
      break;
     }
    }
   } while (0);
   if ((i3 | 0) == 11) {
    i2 = 0;
    i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if (i2) i1 = i7; else break;
  } else i1 = i4 + 48 | 0;
  HEAP32[i1 >> 2] = i8;
  HEAP8[i9 >> 0] = 1;
  i1 = i8;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function _Emscripten_JoyStickConnected(i1, i6, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i3 = i6 + 1300 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 L1 : do if ((i2 | 0) >= 0) {
  i1 = HEAP32[20463] | 0;
  if (i1 | 0) {
   while (1) {
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
    i1 = HEAP32[i1 + 1320 >> 2] | 0;
    if (!i1) break L1;
   }
   return 1;
  }
 } while (0);
 i5 = _SDL_malloc(1328) | 0;
 if (!i5) return 1;
 _SDL_memset(i5, 0, 1328) | 0;
 HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
 i4 = _SDL_strdup(i6 + 1304 | 0) | 0;
 i1 = i5 + 4 | 0;
 HEAP32[i1 >> 2] = i4;
 if (!i4) {
  _SDL_free(i5);
  return 1;
 }
 i4 = _SDL_strdup(i6 + 1368 | 0) | 0;
 HEAP32[i5 + 8 >> 2] = i4;
 if (!i4) {
  _SDL_free(HEAP32[i1 >> 2] | 0);
  _SDL_free(i5);
  return 1;
 }
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 i3 = i5 + 24 | 0;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[i6 + 12 >> 2] | 0;
 i4 = i5 + 20 | 0;
 HEAP32[i4 >> 2] = i1;
 i7 = HEAP32[20467] | 0;
 HEAP32[20467] = i7 + 1;
 HEAP32[i5 + 12 >> 2] = i7;
 HEAPF64[i5 + 32 >> 3] = +HEAPF64[i6 >> 3];
 if ((i2 | 0) > 0) {
  i2 = i5 + 40 | 0;
  i1 = 0;
  do {
   HEAPF64[i2 + (i1 << 3) >> 3] = +HEAPF64[i6 + 16 + (i1 << 3) >> 3];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i3 >> 2] | 0));
  i1 = HEAP32[i4 >> 2] | 0;
 }
 if ((i1 | 0) > 0) {
  i2 = i5 + 552 | 0;
  i3 = i5 + 1064 | 0;
  i1 = 0;
  do {
   HEAPF64[i2 + (i1 << 3) >> 3] = +HEAPF64[i6 + 528 + (i1 << 3) >> 3];
   HEAP32[i3 + (i1 << 2) >> 2] = HEAP32[i6 + 1040 + (i1 << 2) >> 2];
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 i1 = HEAP32[20466] | 0;
 if (!i1) {
  HEAP32[20466] = i5;
  i1 = 81852;
 } else {
  HEAP32[i1 + 1320 >> 2] = i5;
  i1 = 81864;
 }
 HEAP32[i1 >> 2] = i5;
 i7 = HEAP32[20464] | 0;
 HEAP32[20464] = i7 + 1;
 _SDL_PrivateJoystickAdded(i7);
 return 1;
}

function _SDL_BlendPoint_RGB565(i2, i3, i4, i5, i8, i7, i6, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i1 = ~i1 & 255;
 switch (i5 | 0) {
 case 1:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i5 = HEAPU16[i4 >> 1] | 0;
   i3 = (((Math_imul(HEAPU8[41014 + (i5 & 31) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i6 & 255) | 0;
   i2 = (((Math_imul(HEAPU8[40950 + (i5 >>> 5 & 63) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i7 & 255) | 0;
   i1 = (((Math_imul(HEAPU8[41014 + (i5 >>> 11) >> 0] | 0, i1) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0;
   break;
  }
 case 2:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i3 = HEAPU16[i4 >> 1] | 0;
   i1 = (HEAPU8[41014 + (i3 >>> 11) >> 0] | 0) + (i8 & 255) | 0;
   i2 = (HEAPU8[40950 + (i3 >>> 5 & 63) >> 0] | 0) + (i7 & 255) | 0;
   i3 = (HEAPU8[41014 + (i3 & 31) >> 0] | 0) + (i6 & 255) | 0;
   i3 = i3 >>> 0 < 255 ? i3 : 255;
   i2 = i2 >>> 0 < 255 ? i2 : 255;
   i1 = i1 >>> 0 < 255 ? i1 : 255;
   break;
  }
 case 4:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i1 = HEAPU16[i4 >> 1] | 0;
   i3 = ((Math_imul(HEAPU8[41014 + (i1 & 31) >> 0] | 0, i6 & 255) | 0) >>> 0) / 255 | 0;
   i2 = ((Math_imul(HEAPU8[40950 + (i1 >>> 5 & 63) >> 0] | 0, i7 & 255) | 0) >>> 0) / 255 | 0;
   i1 = ((Math_imul(HEAPU8[41014 + (i1 >>> 11) >> 0] | 0, i8 & 255) | 0) >>> 0) / 255 | 0;
   break;
  }
 default:
  {
   i4 = (HEAP32[i2 + 20 >> 2] | 0) + (Math_imul(HEAP32[i2 + 16 >> 2] | 0, i4) | 0) + (i3 << 1) | 0;
   i3 = i6 & 255;
   i2 = i7 & 255;
   i1 = i8 & 255;
  }
 }
 HEAP16[i4 >> 1] = i2 >>> 2 << 5 | i1 >>> 3 << 11 | i3 >>> 3;
 return 0;
}

function _mbrtowc(i2, i4, i7, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i9;
 i6 = (i1 | 0) == 0 ? 82540 : i1;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i4) if (!i1) i1 = 0; else i8 = 17; else {
  i5 = (i2 | 0) == 0 ? i3 : i2;
  if (!i7) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i4 >> 0] | 0;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i1 & 255;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i3 = (HEAP32[HEAP32[(___pthread_self_438() | 0) + 188 >> 2] >> 2] | 0) == 0;
    i1 = HEAP8[i4 >> 0] | 0;
    if (i3) {
     HEAP32[i5 >> 2] = i1 << 24 >> 24 & 57343;
     i1 = 1;
     break;
    }
    i1 = (i1 & 255) + -194 | 0;
    if (i1 >>> 0 > 50) {
     i8 = 17;
     break;
    }
    i1 = HEAP32[27140 + (i1 << 2) >> 2] | 0;
    i3 = i7 + -1 | 0;
    if (i3) {
     i4 = i4 + 1 | 0;
     i8 = 11;
    }
   } else {
    i3 = i7;
    i8 = 11;
   }
   L14 : do if ((i8 | 0) == 11) {
    i2 = HEAP8[i4 >> 0] | 0;
    i10 = (i2 & 255) >>> 3;
    if ((i10 + -16 | i10 + (i1 >> 26)) >>> 0 > 7) {
     i8 = 17;
     break L1;
    }
    while (1) {
     i4 = i4 + 1 | 0;
     i1 = (i2 & 255) + -128 | i1 << 6;
     i3 = i3 + -1 | 0;
     if ((i1 | 0) >= 0) break;
     if (!i3) break L14;
     i2 = HEAP8[i4 >> 0] | 0;
     if ((i2 & -64) << 24 >> 24 != -128) {
      i8 = 17;
      break L1;
     }
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i7 - i3 | 0;
    break L1;
   } while (0);
   HEAP32[i6 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 17) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _png_do_bgr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = HEAP8[i2 + 8 >> 0] | 0;
 if (!(i3 & 2)) return;
 i4 = HEAP32[i2 >> 2] | 0;
 switch (HEAP8[i2 + 9 >> 0] | 0) {
 case 8:
  switch (i3 << 24 >> 24) {
  case 2:
   {
    if (!i4) return; else i2 = 0;
    while (1) {
     i5 = HEAP8[i1 >> 0] | 0;
     i3 = i1 + 2 | 0;
     HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
     HEAP8[i3 >> 0] = i5;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 3 | 0;
    }
    return;
   }
  case 6:
   {
    if (!i4) return; else i2 = 0;
    while (1) {
     i3 = HEAP8[i1 >> 0] | 0;
     i5 = i1 + 2 | 0;
     HEAP8[i1 >> 0] = HEAP8[i5 >> 0] | 0;
     HEAP8[i5 >> 0] = i3;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 4 | 0;
    }
    return;
   }
  default:
   return;
  }
 case 16:
  switch (i3 << 24 >> 24) {
  case 2:
   {
    if (!i4) return; else i2 = 0;
    while (1) {
     i3 = HEAP8[i1 >> 0] | 0;
     i6 = i1 + 4 | 0;
     HEAP8[i1 >> 0] = HEAP8[i6 >> 0] | 0;
     HEAP8[i6 >> 0] = i3;
     i6 = i1 + 1 | 0;
     i3 = HEAP8[i6 >> 0] | 0;
     i5 = i1 + 5 | 0;
     HEAP8[i6 >> 0] = HEAP8[i5 >> 0] | 0;
     HEAP8[i5 >> 0] = i3;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 6 | 0;
    }
    return;
   }
  case 6:
   {
    if (!i4) return; else i2 = 0;
    while (1) {
     i5 = HEAP8[i1 >> 0] | 0;
     i3 = i1 + 4 | 0;
     HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
     HEAP8[i3 >> 0] = i5;
     i3 = i1 + 1 | 0;
     i5 = HEAP8[i3 >> 0] | 0;
     i6 = i1 + 5 | 0;
     HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
     HEAP8[i6 >> 0] = i5;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 8 | 0;
    }
    return;
   }
  default:
   return;
  }
 default:
  return;
 }
}

function _memcpy(i3, i6, i1) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((i1 | 0) >= 8192) return _emscripten_memcpy_big(i3 | 0, i6 | 0, i1 | 0) | 0;
 i5 = i3 | 0;
 i4 = i3 + i1 | 0;
 if ((i3 & 3) == (i6 & 3)) {
  while (i3 & 3) {
   if (!i1) return i5 | 0;
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   i3 = i3 + 1 | 0;
   i6 = i6 + 1 | 0;
   i1 = i1 - 1 | 0;
  }
  i1 = i4 & -4 | 0;
  i2 = i1 - 64 | 0;
  while ((i3 | 0) <= (i2 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
   HEAP32[i3 + 16 >> 2] = HEAP32[i6 + 16 >> 2];
   HEAP32[i3 + 20 >> 2] = HEAP32[i6 + 20 >> 2];
   HEAP32[i3 + 24 >> 2] = HEAP32[i6 + 24 >> 2];
   HEAP32[i3 + 28 >> 2] = HEAP32[i6 + 28 >> 2];
   HEAP32[i3 + 32 >> 2] = HEAP32[i6 + 32 >> 2];
   HEAP32[i3 + 36 >> 2] = HEAP32[i6 + 36 >> 2];
   HEAP32[i3 + 40 >> 2] = HEAP32[i6 + 40 >> 2];
   HEAP32[i3 + 44 >> 2] = HEAP32[i6 + 44 >> 2];
   HEAP32[i3 + 48 >> 2] = HEAP32[i6 + 48 >> 2];
   HEAP32[i3 + 52 >> 2] = HEAP32[i6 + 52 >> 2];
   HEAP32[i3 + 56 >> 2] = HEAP32[i6 + 56 >> 2];
   HEAP32[i3 + 60 >> 2] = HEAP32[i6 + 60 >> 2];
   i3 = i3 + 64 | 0;
   i6 = i6 + 64 | 0;
  }
  while ((i3 | 0) < (i1 | 0)) {
   HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 } else {
  i1 = i4 - 4 | 0;
  while ((i3 | 0) < (i1 | 0)) {
   HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
   HEAP8[i3 + 1 >> 0] = HEAP8[i6 + 1 >> 0] | 0;
   HEAP8[i3 + 2 >> 0] = HEAP8[i6 + 2 >> 0] | 0;
   HEAP8[i3 + 3 >> 0] = HEAP8[i6 + 3 >> 0] | 0;
   i3 = i3 + 4 | 0;
   i6 = i6 + 4 | 0;
  }
 }
 while ((i3 | 0) < (i4 | 0)) {
  HEAP8[i3 >> 0] = HEAP8[i6 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i6 = i6 + 1 | 0;
 }
 return i5 | 0;
}

function _SDL_SoftBlit(i7, i4, i8, i5) {
 i7 = i7 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i3 = 0;
 if (!(HEAP32[i8 >> 2] & 2)) {
  i2 = 1;
  i6 = 0;
 } else {
  i6 = (_SDL_LockSurface(i8) | 0) >>> 31 ^ 1;
  i2 = i6;
 }
 if (!(HEAP32[i7 >> 2] & 2)) {
  i1 = 0;
  i3 = 5;
 } else if ((_SDL_LockSurface(i7) | 0) < 0) {
  i1 = 0;
  i2 = -1;
 } else {
  i1 = 1;
  i3 = 5;
 }
 if ((i3 | 0) == 5) if (!i2) i2 = -1; else if (!i4) i2 = 0; else {
  i2 = HEAP32[i4 + 8 >> 2] | 0;
  if ((i2 | 0) < 1) i2 = 0; else {
   i3 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i3 | 0) > 0) {
    i10 = HEAP32[i7 + 52 >> 2] | 0;
    i9 = i10 + 16 | 0;
    i12 = HEAP32[i7 + 16 >> 2] | 0;
    i13 = (HEAP32[i7 + 20 >> 2] | 0) + (Math_imul(HEAP32[i4 + 4 >> 2] & 65535, i12) | 0) | 0;
    i11 = HEAPU8[(HEAP32[i10 + 56 >> 2] | 0) + 9 >> 0] | 0;
    HEAP32[i9 >> 2] = i13 + (Math_imul(HEAP32[i4 >> 2] & 65535, i11) | 0);
    HEAP32[i10 + 20 >> 2] = i2;
    HEAP32[i10 + 24 >> 2] = i3;
    HEAP32[i10 + 28 >> 2] = i12;
    HEAP32[i10 + 32 >> 2] = i12 - (Math_imul(i2, i11) | 0);
    i3 = HEAP32[i8 + 16 >> 2] | 0;
    i4 = (HEAP32[i8 + 20 >> 2] | 0) + (Math_imul(HEAP32[i5 + 4 >> 2] & 65535, i3) | 0) | 0;
    i2 = HEAPU8[(HEAP32[i10 + 60 >> 2] | 0) + 9 >> 0] | 0;
    HEAP32[i10 + 36 >> 2] = i4 + (Math_imul(HEAP32[i5 >> 2] & 65535, i2) | 0);
    i4 = HEAP32[i5 + 8 >> 2] | 0;
    HEAP32[i10 + 40 >> 2] = i4;
    HEAP32[i10 + 44 >> 2] = HEAP32[i5 + 12 >> 2];
    HEAP32[i10 + 48 >> 2] = i3;
    HEAP32[i10 + 52 >> 2] = i3 - (Math_imul(i4, i2) | 0);
    FUNCTION_TABLE_vi[HEAP32[i10 + 12 >> 2] & 511](i9);
    i2 = 0;
   } else i2 = 0;
  }
 }
 if (i6 | 0) _SDL_UnlockSurface(i8);
 if (!i1) return i2 | 0;
 _SDL_UnlockSurface(i7);
 return i2 | 0;
}

function _SDL_BlendFillRects(i11, i12, i13, i14, i4, i2, i1, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i16 = 0, i17 = 0;
 i8 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i17;
 i16 = i17 + 8 | 0;
 if (!i11) i1 = 48302; else {
  i5 = HEAP32[i11 + 4 >> 2] | 0;
  i6 = HEAP8[i5 + 8 >> 0] | 0;
  if ((i6 & 255) < 8) i1 = 47969; else {
   if ((i14 + -1 | 0) >>> 0 < 2) {
    i7 = i15 & 255;
    i10 = (((Math_imul(i7, i1 & 255) | 0) >>> 0) / 255 | 0) & 255;
    i9 = (((Math_imul(i7, i2 & 255) | 0) >>> 0) / 255 | 0) & 255;
    i7 = (((Math_imul(i7, i4 & 255) | 0) >>> 0) / 255 | 0) & 255;
   } else {
    i10 = i1;
    i9 = i2;
    i7 = i4;
   }
   switch (i6 << 24 >> 24) {
   case 15:
    {
     if ((HEAP32[i5 + 12 >> 2] | 0) == 31744) i4 = 11; else i8 = 10;
     break;
    }
   case 16:
    {
     if ((HEAP32[i5 + 12 >> 2] | 0) == 63488) i4 = 12; else i8 = 10;
     break;
    }
   case 32:
    {
     if ((HEAP32[i5 + 12 >> 2] | 0) == 16711680) i4 = (HEAP32[i5 + 24 >> 2] | 0) == 0 ? 8 : 7; else i8 = 10;
     break;
    }
   default:
    i8 = 10;
   }
   if ((i8 | 0) == 10) i4 = (HEAP32[i5 + 24 >> 2] | 0) == 0 ? 10 : 9;
   if ((i13 | 0) <= 0) {
    i16 = 0;
    STACKTOP = i17;
    return i16 | 0;
   }
   i3 = i11 + 36 | 0;
   i2 = 0;
   i1 = 0;
   do {
    if (_SDL_IntersectRect(i12 + (i2 << 4) | 0, i3, i16) | 0) i1 = FUNCTION_TABLE_iiiiiiii[i4 & 15](i11, i16, i14, i7, i9, i10, i15) | 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i13 | 0));
   STACKTOP = i17;
   return i1 | 0;
  }
 }
 i16 = _SDL_SetError(i1, i3) | 0;
 STACKTOP = i17;
 return i16 | 0;
}

function ___stdio_write(i7, i2, i1) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i11 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i10 = i12 + 16 | 0;
 i5 = i12;
 i4 = i12 + 32 | 0;
 i8 = i7 + 28 | 0;
 i3 = HEAP32[i8 >> 2] | 0;
 HEAP32[i4 >> 2] = i3;
 i9 = i7 + 20 | 0;
 i3 = (HEAP32[i9 >> 2] | 0) - i3 | 0;
 HEAP32[i4 + 4 >> 2] = i3;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 12 >> 2] = i1;
 i3 = i3 + i1 | 0;
 i6 = i7 + 60 | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 8 >> 2] = 2;
 i5 = ___syscall_ret(___syscall146(146, i5 | 0) | 0) | 0;
 L1 : do if ((i3 | 0) == (i5 | 0)) i11 = 3; else {
  i2 = 2;
  while (1) {
   if ((i5 | 0) < 0) break;
   i3 = i3 - i5 | 0;
   i14 = HEAP32[i4 + 4 >> 2] | 0;
   i13 = i5 >>> 0 > i14 >>> 0;
   i4 = i13 ? i4 + 8 | 0 : i4;
   i2 = i2 + (i13 << 31 >> 31) | 0;
   i14 = i5 - (i13 ? i14 : 0) | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i14;
   i13 = i4 + 4 | 0;
   HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) - i14;
   HEAP32[i10 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i10 + 4 >> 2] = i4;
   HEAP32[i10 + 8 >> 2] = i2;
   i5 = ___syscall_ret(___syscall146(146, i10 | 0) | 0) | 0;
   if ((i3 | 0) == (i5 | 0)) {
    i11 = 3;
    break L1;
   }
  }
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i4 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((i11 | 0) == 3) {
  i14 = HEAP32[i7 + 44 >> 2] | 0;
  HEAP32[i7 + 16 >> 2] = i14 + (HEAP32[i7 + 48 >> 2] | 0);
  HEAP32[i8 >> 2] = i14;
  HEAP32[i9 >> 2] = i14;
 }
 STACKTOP = i12;
 return i1 | 0;
}

function _png_handle_sBIT(i9, i10, i4) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i11;
 i1 = HEAP32[i9 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i9, 63643);
 if (i1 & 6 | 0) {
  _png_crc_finish(i9, i4) | 0;
  _png_chunk_benign_error(i9, 64026);
  STACKTOP = i11;
  return;
 }
 if (i10 | 0) if (HEAP32[i10 + 8 >> 2] & 2 | 0) {
  _png_crc_finish(i9, i4) | 0;
  _png_chunk_benign_error(i9, 63980);
  STACKTOP = i11;
  return;
 }
 i7 = i9 + 435 | 0;
 if ((HEAP8[i7 >> 0] | 0) == 3) {
  i3 = 8;
  i1 = 3;
 } else {
  i3 = HEAP8[i9 + 436 >> 0] | 0;
  i1 = HEAPU8[i9 + 439 >> 0] | 0;
 }
 if (i4 >>> 0 > 4 | (i1 | 0) != (i4 | 0)) {
  _png_chunk_benign_error(i9, 63990);
  _png_crc_finish(i9, i4) | 0;
  STACKTOP = i11;
  return;
 }
 i2 = i5 + 3 | 0;
 i6 = i5 + 2 | 0;
 i8 = i5 + 1 | 0;
 _memset(i5 | 0, i3 | 0, 4) | 0;
 _png_read_data(i9, i5, i4);
 _png_calculate_crc(i9, i5, i4);
 if (_png_crc_finish(i9, 0) | 0) {
  STACKTOP = i11;
  return;
 }
 L23 : do if (i4 | 0) {
  i1 = 0;
  while (1) {
   if (((HEAP8[i5 + i1 >> 0] | 0) + -1 & 255) >= (i3 & 255)) break;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i4 >>> 0) break L23;
  }
  _png_chunk_benign_error(i9, 63990);
  STACKTOP = i11;
  return;
 } while (0);
 i4 = HEAP8[i5 >> 0] | 0;
 i5 = i9 + 516 | 0;
 if (!(HEAP8[i7 >> 0] & 2)) {
  HEAP8[i9 + 519 >> 0] = i4;
  i3 = i4;
  i2 = i8;
  i1 = i4;
 } else {
  i3 = HEAP8[i6 >> 0] | 0;
  i1 = HEAP8[i8 >> 0] | 0;
 }
 HEAP8[i5 >> 0] = i4;
 HEAP8[i9 + 517 >> 0] = i1;
 HEAP8[i9 + 518 >> 0] = i3;
 HEAP8[i9 + 520 >> 0] = HEAP8[i2 >> 0] | 0;
 _png_set_sBIT(i9, i10, i5);
 STACKTOP = i11;
 return;
}

function _SDL_BlendPoint_ARGB8888(i4, i5, i6, i2, i3, i9, i8, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i7 = 0, i10 = 0;
 i1 = i1 & 255;
 i10 = i1 ^ 255;
 switch (i2 | 0) {
 case 1:
  {
   i4 = (HEAP32[i4 + 20 >> 2] | 0) + (Math_imul(HEAP32[i4 + 16 >> 2] | 0, i6) | 0) + (i5 << 2) | 0;
   i6 = HEAP32[i4 >> 2] | 0;
   i7 = (((Math_imul(i6 >>> 16 & 255, i10) | 0) >>> 0) / 255 | 0) + (i3 & 255) | 0;
   i3 = (((Math_imul(i6 & 255, i10) | 0) >>> 0) / 255 | 0) + (i8 & 255) | 0;
   i2 = (((Math_imul(i6 >>> 8 & 255, i10) | 0) >>> 0) / 255 | 0) + (i9 & 255) | 0;
   i1 = (((Math_imul(i6 >>> 24, i10) | 0) >>> 0) / 255 | 0) + i1 << 24;
   break;
  }
 case 2:
  {
   i4 = (HEAP32[i4 + 20 >> 2] | 0) + (Math_imul(HEAP32[i4 + 16 >> 2] | 0, i6) | 0) + (i5 << 2) | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i7 = (i1 >>> 16 & 255) + (i3 & 255) | 0;
   i2 = (i1 >>> 8 & 255) + (i9 & 255) | 0;
   i3 = (i1 & 255) + (i8 & 255) | 0;
   i7 = i7 >>> 0 < 255 ? i7 : 255;
   i3 = i3 >>> 0 < 255 ? i3 : 255;
   i2 = i2 >>> 0 < 255 ? i2 : 255;
   i1 = i1 & -16777216;
   break;
  }
 case 4:
  {
   i4 = (HEAP32[i4 + 20 >> 2] | 0) + (Math_imul(HEAP32[i4 + 16 >> 2] | 0, i6) | 0) + (i5 << 2) | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   i7 = ((Math_imul(i1 >>> 16 & 255, i3 & 255) | 0) >>> 0) / 255 | 0;
   i3 = ((Math_imul(i1 & 255, i8 & 255) | 0) >>> 0) / 255 | 0;
   i2 = ((Math_imul(i1 >>> 8 & 255, i9 & 255) | 0) >>> 0) / 255 | 0;
   i1 = i1 & -16777216;
   break;
  }
 default:
  {
   i7 = i3 & 255;
   i4 = (HEAP32[i4 + 20 >> 2] | 0) + (Math_imul(HEAP32[i4 + 16 >> 2] | 0, i6) | 0) + (i5 << 2) | 0;
   i3 = i8 & 255;
   i2 = i9 & 255;
   i1 = i1 << 24;
  }
 }
 HEAP32[i4 >> 2] = i1 | i7 << 16 | i2 << 8 | i3;
 return 0;
}

function __ZNSt3__214__split_bufferIPP11SDL_TextureRNS_9allocatorIS3_EEE10push_frontERKS3_(i9, i13) {
 i9 = i9 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = i9 + 4 | 0;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i9 >> 2] | 0;
 i3 = i12;
 do if ((i11 | 0) == (i12 | 0)) {
  i12 = i9 + 8 | 0;
  i2 = HEAP32[i12 >> 2] | 0;
  i10 = i9 + 12 | 0;
  i8 = HEAP32[i10 >> 2] | 0;
  i1 = i8;
  if (i2 >>> 0 < i8 >>> 0) {
   i3 = i2;
   i5 = ((i1 - i3 >> 2) + 1 | 0) / 2 | 0;
   i1 = i2 + (i5 << 2) | 0;
   i3 = i3 - i11 | 0;
   i10 = i3 >> 2;
   i4 = i1 + (0 - i10 << 2) | 0;
   if (i10) {
    _memmove(i4 | 0, i11 | 0, i3 | 0) | 0;
    i1 = i4;
    i2 = HEAP32[i12 >> 2] | 0;
   }
   HEAP32[i14 >> 2] = i1;
   HEAP32[i12 >> 2] = i2 + (i5 << 2);
   break;
  }
  i3 = i1 - i3 >> 1;
  i3 = (i3 | 0) == 0 ? 1 : i3;
  if (i3 >>> 0 > 1073741823) {
   i14 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc(i14, 38941);
   HEAP32[i14 >> 2] = 35044;
   ___cxa_throw(i14 | 0, 2680, 272);
  }
  i6 = __Znwj(i3 << 2) | 0;
  i7 = i6;
  i1 = i6 + ((i3 + 3 | 0) >>> 2 << 2) | 0;
  i8 = i1;
  i6 = i6 + (i3 << 2) | 0;
  if ((i11 | 0) == (i2 | 0)) {
   i3 = i8;
   i2 = i11;
  } else {
   i5 = i1;
   i3 = i8;
   i4 = i11;
   do {
    HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
    i5 = i3 + 4 | 0;
    i3 = i5;
    i4 = i4 + 4 | 0;
   } while ((i4 | 0) != (i2 | 0));
   i2 = HEAP32[i9 >> 2] | 0;
  }
  HEAP32[i9 >> 2] = i7;
  HEAP32[i14 >> 2] = i8;
  HEAP32[i12 >> 2] = i3;
  HEAP32[i10 >> 2] = i6;
  if (i2) {
   __ZdlPv(i2);
   i1 = HEAP32[i14 >> 2] | 0;
  }
 } else i1 = i11; while (0);
 HEAP32[i1 + -4 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -4;
 return;
}

function __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i9, i4) {
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
 i2 = i3 + 1 | 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i9);
 i11 = i9 + 8 | 0;
 i8 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 i1 = i8 >> 1;
 i1 = i8 >> 2 >>> 0 < 536870911 ? (i1 >>> 0 < i2 >>> 0 ? i2 : i1) : 1073741823;
 do if (!i1) i2 = 0; else if (i1 >>> 0 > 1073741823) {
  i11 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i11, 38941);
  HEAP32[i11 >> 2] = 35044;
  ___cxa_throw(i11 | 0, 2680, 272);
 } else {
  i2 = __Znwj(i1 << 2) | 0;
  break;
 } while (0);
 i5 = i2 + (i3 << 2) | 0;
 i3 = i5;
 i8 = i2 + (i1 << 2) | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i5 >> 2] = i7;
 i7 = i5 + 4 | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i2 = i3;
  i4 = i6;
  i1 = i6;
 } else {
  i2 = i5;
  do {
   i1 = i1 + -4 | 0;
   i5 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i2 + -4 >> 2] = i5;
   i2 = i3 + -4 | 0;
   i3 = i2;
  } while ((i1 | 0) != (i6 | 0));
  i2 = i3;
  i4 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i9 >> 2] = i2;
 HEAP32[i10 >> 2] = i7;
 HEAP32[i11 >> 2] = i8;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i1 = i1 + -4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
  if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 511](i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__214__split_bufferIPP11SDL_TextureNS_9allocatorIS3_EEE10push_frontEOS3_(i9, i13) {
 i9 = i9 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0;
 i14 = i9 + 4 | 0;
 i11 = HEAP32[i14 >> 2] | 0;
 i12 = HEAP32[i9 >> 2] | 0;
 i3 = i12;
 do if ((i11 | 0) == (i12 | 0)) {
  i12 = i9 + 8 | 0;
  i2 = HEAP32[i12 >> 2] | 0;
  i10 = i9 + 12 | 0;
  i8 = HEAP32[i10 >> 2] | 0;
  i1 = i8;
  if (i2 >>> 0 < i8 >>> 0) {
   i3 = i2;
   i5 = ((i1 - i3 >> 2) + 1 | 0) / 2 | 0;
   i1 = i2 + (i5 << 2) | 0;
   i3 = i3 - i11 | 0;
   i10 = i3 >> 2;
   i4 = i1 + (0 - i10 << 2) | 0;
   if (i10) {
    _memmove(i4 | 0, i11 | 0, i3 | 0) | 0;
    i1 = i4;
    i2 = HEAP32[i12 >> 2] | 0;
   }
   HEAP32[i14 >> 2] = i1;
   HEAP32[i12 >> 2] = i2 + (i5 << 2);
   break;
  }
  i3 = i1 - i3 >> 1;
  i3 = (i3 | 0) == 0 ? 1 : i3;
  if (i3 >>> 0 > 1073741823) {
   i14 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc(i14, 38941);
   HEAP32[i14 >> 2] = 35044;
   ___cxa_throw(i14 | 0, 2680, 272);
  }
  i6 = __Znwj(i3 << 2) | 0;
  i7 = i6;
  i1 = i6 + ((i3 + 3 | 0) >>> 2 << 2) | 0;
  i8 = i1;
  i6 = i6 + (i3 << 2) | 0;
  if ((i11 | 0) == (i2 | 0)) {
   i3 = i8;
   i2 = i11;
  } else {
   i5 = i1;
   i3 = i8;
   i4 = i11;
   do {
    HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
    i5 = i3 + 4 | 0;
    i3 = i5;
    i4 = i4 + 4 | 0;
   } while ((i4 | 0) != (i2 | 0));
   i2 = HEAP32[i9 >> 2] | 0;
  }
  HEAP32[i9 >> 2] = i7;
  HEAP32[i14 >> 2] = i8;
  HEAP32[i12 >> 2] = i3;
  HEAP32[i10 >> 2] = i6;
  if (i2) {
   __ZdlPv(i2);
   i1 = HEAP32[i14 >> 2] | 0;
  }
 } else i1 = i11; while (0);
 HEAP32[i1 + -4 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + -4;
 return;
}

function _Color32DitherYUY2Mod2X(i15, i16, i6, i3, i4, i5, i9, i2, i1) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i12 = (i2 << 1) + i1 | 0;
 i13 = (i2 | 0) / 2 | 0;
 if (!i9) return;
 i14 = i12 + 1 | 0;
 if ((i2 + 1 | 0) >>> 0 < 3) return;
 i11 = i13 << 2;
 i10 = i6;
 while (1) {
  i9 = i9 + -1 | 0;
  i2 = i3;
  i3 = i3 + i11 | 0;
  i1 = i13;
  i6 = i4;
  i7 = i5;
  i8 = i10;
  i10 = i10 + i11 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i21 = HEAPU8[i2 >> 0] | 0;
   i20 = (HEAP32[i15 + (i21 << 2) >> 2] | 0) + 256 | 0;
   i19 = HEAPU8[i6 >> 0] | 0;
   i21 = (HEAP32[i15 + ((i21 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i15 + ((i19 | 512) << 2) >> 2] | 0) | 0;
   i19 = (HEAP32[i15 + ((i19 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i17 = HEAPU8[i8 >> 0] | 0;
   i17 = HEAP32[i16 + (i21 + i17 << 2) >> 2] | HEAP32[i16 + (i20 + i17 << 2) >> 2] | HEAP32[i16 + (i19 + i17 << 2) >> 2];
   HEAP32[i7 + (i14 << 2) >> 2] = i17;
   HEAP32[i7 + (i12 << 2) >> 2] = i17;
   HEAP32[i7 + 4 >> 2] = i17;
   HEAP32[i7 >> 2] = i17;
   i17 = i7 + 8 | 0;
   i18 = HEAPU8[i8 + 2 >> 0] | 0;
   i18 = HEAP32[i16 + (i21 + i18 << 2) >> 2] | HEAP32[i16 + (i20 + i18 << 2) >> 2] | HEAP32[i16 + (i19 + i18 << 2) >> 2];
   HEAP32[i17 + (i14 << 2) >> 2] = i18;
   HEAP32[i17 + (i12 << 2) >> 2] = i18;
   HEAP32[i7 + 12 >> 2] = i18;
   HEAP32[i17 >> 2] = i18;
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i6 = i6 + 4 | 0;
    i7 = i7 + 16 | 0;
    i8 = i8 + 4 | 0;
   }
  }
  if (!i9) break; else {
   i4 = i4 + i11 | 0;
   i5 = i5 + (i11 << 2) + (i12 << 2) | 0;
  }
 }
 return;
}

function __ZNSt3__2L11init_wweeksEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[76960] | 0)) if (___cxa_guard_acquire(76960) | 0) {
  i2 = 85136;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 85304);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85136, 33308) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85148, 33336) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85160, 33364) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85172, 33396) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85184, 33436) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85196, 33472) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85208, 33500) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85220, 33536) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85232, 33552) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85244, 33568) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85256, 33584) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85268, 33600) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85280, 33616) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(85292, 33632) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[76880] | 0)) if (___cxa_guard_acquire(76880) | 0) {
  i2 = 84324;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 84492);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84324, 73779) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84336, 73786) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84348, 73793) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84360, 73801) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84372, 73811) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84384, 73820) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84396, 73827) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84408, 73836) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84420, 73840) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84432, 73844) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84444, 73848) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84456, 73852) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84468, 73856) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(84480, 73860) | 0;
 return;
}

function _SDL_GetWindowSurface(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i1 = i14 + 8 | 0;
 i4 = i14 + 40 | 0;
 i7 = i14 + 36 | 0;
 i8 = i14 + 32 | 0;
 i9 = i14 + 28 | 0;
 i10 = i14 + 24 | 0;
 i11 = i14 + 20 | 0;
 i12 = i14 + 16 | 0;
 i13 = i14 + 12 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i14) | 0;
  i13 = 0;
  STACKTOP = i14;
  return i13 | 0;
 }
 if (i3 | 0) if ((HEAP32[i3 >> 2] | 0) == (i2 + 280 | 0)) {
  i5 = i3 + 112 | 0;
  i6 = i3 + 108 | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (HEAP32[i5 >> 2] | 0) {
   i13 = i1;
   STACKTOP = i14;
   return i13 | 0;
  }
  if (!i1) i1 = i2; else {
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -5;
   _SDL_FreeSurface(i1);
   i1 = HEAP32[19487] | 0;
  }
  i2 = HEAP32[i1 + 132 >> 2] | 0;
  if (!i2) i1 = 0; else if (!(HEAP32[i1 + 136 >> 2] | 0)) i1 = 0; else if ((FUNCTION_TABLE_iiiiii[i2 & 63](i1, i3, i4, i7, i8) | 0) < 0) i1 = 0; else if (!(_SDL_PixelFormatEnumToMasks(HEAP32[i4 >> 2] | 0, i9, i10, i11, i12, i13) | 0)) i1 = 0; else i1 = _SDL_CreateRGBSurfaceFrom(HEAP32[i7 >> 2] | 0, HEAP32[i3 + 24 >> 2] | 0, HEAP32[i3 + 28 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i13 >> 2] | 0) | 0;
  HEAP32[i6 >> 2] = i1;
  if (!i1) {
   i13 = 0;
   STACKTOP = i14;
   return i13 | 0;
  }
  HEAP32[i5 >> 2] = 1;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 4;
  i13 = i1;
  STACKTOP = i14;
  return i13 | 0;
 }
 _SDL_SetError(59973, i1) | 0;
 i13 = 0;
 STACKTOP = i14;
 return i13 | 0;
}

function _png_set_sPLT(i8, i1, i4, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i10 = 0;
 if ((i4 | 0) == 0 | ((i8 | 0) == 0 | (i1 | 0) == 0 | (i2 | 0) < 1)) return;
 i3 = i1 + 244 | 0;
 i9 = i1 + 248 | 0;
 i5 = _png_realloc_array(i8, HEAP32[i3 >> 2] | 0, HEAP32[i9 >> 2] | 0, i2, 16) | 0;
 if (!i5) {
  _png_chunk_report(i8, 64844, 1);
  return;
 }
 _png_free(i8, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = i5;
 i7 = i1 + 232 | 0;
 HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 32;
 i7 = i1 + 8 | 0;
 i1 = i5 + (HEAP32[i9 >> 2] << 4) | 0;
 while (1) {
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) i10 = 7; else {
   i6 = i4 + 8 | 0;
   if (!(HEAP32[i6 >> 2] | 0)) i10 = 7; else {
    HEAP8[i1 + 4 >> 0] = HEAP8[i4 + 4 >> 0] | 0;
    i3 = (_strlen(i3) | 0) + 1 | 0;
    i5 = _png_malloc_base(i8, i3) | 0;
    HEAP32[i1 >> 2] = i5;
    if (!i5) break;
    _memcpy(i5 | 0, HEAP32[i4 >> 2] | 0, i3 | 0) | 0;
    i3 = i4 + 12 | 0;
    i5 = _png_malloc_array(i8, HEAP32[i3 >> 2] | 0, 10) | 0;
    HEAP32[i1 + 8 >> 2] = i5;
    if (!i5) {
     i10 = 10;
     break;
    }
    HEAP32[i1 + 12 >> 2] = HEAP32[i3 >> 2];
    _memcpy(i5 | 0, HEAP32[i6 >> 2] | 0, (HEAP32[i3 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 8192;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    i1 = i1 + 16 | 0;
   }
  }
  if ((i10 | 0) == 7) {
   i10 = 0;
   _png_app_error(i8, 64865);
  }
  i2 = i2 + -1 | 0;
  if (!i2) {
   i10 = 15;
   break;
  } else i4 = i4 + 16 | 0;
 }
 if ((i10 | 0) == 10) {
  _png_free(i8, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
 } else if ((i10 | 0) == 15) return;
 if ((i2 | 0) <= 0) return;
 _png_chunk_report(i8, 64892, 1);
 return;
}

function _mbsnrtowcs(i2, i10, i6, i1, i9) {
 i2 = i2 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1040);
 i8 = i13 + 8 | 0;
 i11 = i13;
 i7 = HEAP32[i10 >> 2] | 0;
 HEAP32[i11 >> 2] = i7;
 i12 = (i2 | 0) != 0;
 i4 = i12 ? i1 : 256;
 i2 = i12 ? i2 : i8;
 i3 = i7;
 L1 : do if ((i4 | 0) != 0 & (i7 | 0) != 0) {
  i1 = 0;
  i7 = i6;
  while (1) {
   i5 = i7 >>> 2;
   i6 = i5 >>> 0 >= i4 >>> 0;
   if (!(i7 >>> 0 > 131 | i6)) {
    i6 = i7;
    break L1;
   }
   i3 = i6 ? i4 : i5;
   i6 = i7 - i3 | 0;
   i3 = _mbsrtowcs(i2, i11, i3, i9) | 0;
   if ((i3 | 0) == -1) break;
   i7 = (i2 | 0) == (i8 | 0);
   i4 = i4 - (i7 ? 0 : i3) | 0;
   i2 = i7 ? i2 : i2 + (i3 << 2) | 0;
   i1 = i3 + i1 | 0;
   i3 = HEAP32[i11 >> 2] | 0;
   if ((i4 | 0) != 0 & (i3 | 0) != 0) i7 = i6; else break L1;
  }
  i1 = -1;
  i4 = 0;
  i3 = HEAP32[i11 >> 2] | 0;
 } else i1 = 0; while (0);
 L8 : do if (i3) if ((i4 | 0) != 0 & (i6 | 0) != 0) {
  i5 = i2;
  while (1) {
   i2 = _mbrtowc(i5, i3, i6, i9) | 0;
   if ((i2 + 2 | 0) >>> 0 < 3) break;
   i3 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
   HEAP32[i11 >> 2] = i3;
   i6 = i6 - i2 | 0;
   i4 = i4 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i4 | 0) != 0 & (i6 | 0) != 0)) break L8; else i5 = i5 + 4 | 0;
  }
  switch (i2 | 0) {
  case -1:
   {
    i1 = -1;
    break L8;
   }
  case 0:
   {
    HEAP32[i11 >> 2] = 0;
    break L8;
   }
  default:
   {
    HEAP32[i9 >> 2] = 0;
    break L8;
   }
  }
 } while (0);
 if (i12) HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i13;
 return i1 | 0;
}

function __ZN6Entity12addComponentI15PaintControllerJRA17_KcEEERT_DpOT0_(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 i6 = __Znwj(88) | 0;
 HEAP32[i6 >> 2] = 2864;
 HEAP8[i6 + 10 >> 0] = 1;
 HEAP8[i6 + 11 >> 0] = 1;
 i2 = i6 + 20 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP16[i2 + 12 >> 1] = 0;
 HEAP8[i2 + 14 >> 0] = 0;
 HEAP32[i6 + 84 >> 2] = _SDL_GetKeyboardState(0) | 0;
 HEAP32[i6 + 48 >> 2] = __ZN14TextureManager11LoadTextureEPKc(i1) | 0;
 HEAP32[i6 + 4 >> 2] = i4;
 i1 = i6;
 HEAP32[i5 >> 2] = i1;
 i2 = i4 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i4 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i4 + 8 | 0, i5);
 if (!(HEAP8[75992] | 0)) if (___cxa_guard_acquire(75992) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19480] = i3;
 }
 HEAP32[i4 + 20 + (HEAP32[19480] << 2) >> 2] = i6;
 if (!(HEAP8[75992] | 0)) if (___cxa_guard_acquire(75992) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19480] = i3;
 }
 i1 = i4 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19480];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i7;
 return i6 | 0;
}

function _GLES2_GetShader(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 L1 : do switch (i1 | 0) {
 case 0:
  {
   i1 = 14828;
   break;
  }
 case 1:
  switch (i2 | 0) {
  case 0:
   {
    i1 = 14848;
    break L1;
   }
  case 1:
   {
    i1 = 14808;
    break L1;
   }
  case 2:
   {
    i1 = 14788;
    break L1;
   }
  case 4:
   {
    i1 = 14768;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 2:
  switch (i2 | 0) {
  case 0:
   {
    i1 = 14868;
    break L1;
   }
  case 1:
   {
    i1 = 14748;
    break L1;
   }
  case 2:
   {
    i1 = 14728;
    break L1;
   }
  case 4:
   {
    i1 = 14708;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 3:
  switch (i2 | 0) {
  case 0:
   {
    i1 = 14888;
    break L1;
   }
  case 1:
   {
    i1 = 14688;
    break L1;
   }
  case 2:
   {
    i1 = 14668;
    break L1;
   }
  case 4:
   {
    i1 = 14648;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 5:
  switch (i2 | 0) {
  case 0:
   {
    i1 = 14908;
    break L1;
   }
  case 1:
   {
    i1 = 14628;
    break L1;
   }
  case 2:
   {
    i1 = 14608;
    break L1;
   }
  case 4:
   {
    i1 = 14588;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 4:
  switch (i2 | 0) {
  case 0:
   {
    i1 = 14928;
    break L1;
   }
  case 1:
   {
    i1 = 14568;
    break L1;
   }
  case 2:
   {
    i1 = 14548;
    break L1;
   }
  case 4:
   {
    i1 = 14528;
    break L1;
   }
  default:
   {
    i1 = 0;
    break L1;
   }
  }
 case 6:
  {
   i1 = 14508;
   break;
  }
 case 7:
  {
   i1 = 14488;
   break;
  }
 case 8:
  {
   i1 = 14468;
   break;
  }
 default:
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZN6Entity12addComponentI15CanvasComponentJEEERT_DpOT0_(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 i6 = __Znwj(84) | 0;
 i1 = i6;
 i2 = i1 + 84 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 HEAP32[i6 >> 2] = 2892;
 __ZN8Vector2dC2Ev(i6 + 44 | 0);
 HEAP8[i6 + 52 >> 0] = 0;
 i1 = i6 + 60 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = i4;
 i1 = i6;
 HEAP32[i5 >> 2] = i1;
 i2 = i4 + 12 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i4 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i4 + 8 | 0, i5);
 if (!(HEAP8[76e3] | 0)) if (___cxa_guard_acquire(76e3) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19481] = i3;
 }
 HEAP32[i4 + 20 + (HEAP32[19481] << 2) >> 2] = i6;
 if (!(HEAP8[76e3] | 0)) if (___cxa_guard_acquire(76e3) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19481] = i3;
 }
 i1 = i4 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19481];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i7;
 return i6 | 0;
}

function _Map1to1(i15, i16, i1) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0;
 if (i1 | 0) {
  i2 = HEAP32[i15 >> 2] | 0;
  do if ((i2 | 0) <= (HEAP32[i16 >> 2] | 0)) {
   if ((i15 | 0) != (i16 | 0)) if (_SDL_memcmp(HEAP32[i15 + 4 >> 2] | 0, HEAP32[i16 + 4 >> 2] | 0, i2 << 2) | 0) break;
   HEAP32[i1 >> 2] = 1;
   i16 = 0;
   return i16 | 0;
  } while (0);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = _SDL_malloc(HEAP32[i15 >> 2] | 0) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i16 = 0;
  return i16 | 0;
 }
 if ((HEAP32[i15 >> 2] | 0) <= 0) {
  i16 = i1;
  return i16 | 0;
 }
 i13 = i15 + 4 | 0;
 i14 = i16 + 4 | 0;
 i12 = 0;
 do {
  i2 = HEAP32[i13 >> 2] | 0;
  i10 = HEAP32[i16 >> 2] | 0;
  L20 : do if ((i10 | 0) > 0) {
   i11 = HEAP32[i14 >> 2] | 0;
   i9 = i2 + (i12 << 2) | 0;
   i6 = HEAPU8[i9 >> 0] | 0;
   i7 = HEAPU8[i9 + 1 >> 0] | 0;
   i8 = HEAPU8[i9 + 2 >> 0] | 0;
   i9 = HEAPU8[i9 + 3 >> 0] | 0;
   i5 = 0;
   i3 = -1;
   i2 = 0;
   do {
    i4 = i11 + (i5 << 2) | 0;
    i18 = (HEAPU8[i4 >> 0] | 0) - i6 | 0;
    i19 = (HEAPU8[i4 + 1 >> 0] | 0) - i7 | 0;
    i17 = (HEAPU8[i4 + 2 >> 0] | 0) - i8 | 0;
    i4 = (HEAPU8[i4 + 3 >> 0] | 0) - i9 | 0;
    i4 = (Math_imul(i19, i19) | 0) + (Math_imul(i18, i18) | 0) + (Math_imul(i17, i17) | 0) + (Math_imul(i4, i4) | 0) | 0;
    if (i4 >>> 0 < i3 >>> 0) {
     i2 = i5 & 255;
     if (!i4) break L20; else i3 = i4;
    }
    i5 = i5 + 1 | 0;
   } while ((i5 | 0) < (i10 | 0));
  } else i2 = 0; while (0);
  HEAP8[i1 + i12 >> 0] = i2;
  i12 = i12 + 1 | 0;
 } while ((i12 | 0) < (HEAP32[i15 >> 2] | 0));
 return i1 | 0;
}

function __ZNSt3__214__split_bufferIPP11SDL_TextureRNS_9allocatorIS3_EEE9push_backEOS3_(i7, i12) {
 i7 = i7 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = i7 + 8 | 0;
 i8 = HEAP32[i13 >> 2] | 0;
 i9 = i7 + 12 | 0;
 i11 = HEAP32[i9 >> 2] | 0;
 i3 = i11;
 do if ((i8 | 0) == (i11 | 0)) {
  i11 = i7 + 4 | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i1 = i2;
  if (i10 >>> 0 > i2 >>> 0) {
   i2 = i10;
   i3 = ((i2 - i1 >> 2) + 1 | 0) / -2 | 0;
   i4 = i10 + (i3 << 2) | 0;
   i1 = i8 - i2 | 0;
   i2 = i1 >> 2;
   if (!i2) i1 = i10; else {
    _memmove(i4 | 0, i10 | 0, i1 | 0) | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   }
   i10 = i4 + (i2 << 2) | 0;
   HEAP32[i13 >> 2] = i10;
   HEAP32[i11 >> 2] = i1 + (i3 << 2);
   i1 = i10;
   break;
  }
  i1 = i3 - i1 >> 1;
  i1 = (i1 | 0) == 0 ? 1 : i1;
  if (i1 >>> 0 > 1073741823) {
   i13 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc(i13, 38941);
   HEAP32[i13 >> 2] = 35044;
   ___cxa_throw(i13 | 0, 2680, 272);
  }
  i4 = __Znwj(i1 << 2) | 0;
  i5 = i4;
  i3 = i4 + (i1 >>> 2 << 2) | 0;
  i6 = i3;
  i4 = i4 + (i1 << 2) | 0;
  if ((i10 | 0) == (i8 | 0)) i1 = i6; else {
   i1 = i6;
   i2 = i10;
   do {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    i3 = i1 + 4 | 0;
    i1 = i3;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) != (i8 | 0));
   i2 = HEAP32[i7 >> 2] | 0;
  }
  HEAP32[i7 >> 2] = i5;
  HEAP32[i11 >> 2] = i6;
  HEAP32[i13 >> 2] = i1;
  HEAP32[i9 >> 2] = i4;
  if (i2) {
   __ZdlPv(i2);
   i1 = HEAP32[i13 >> 2] | 0;
  }
 } else i1 = i8; while (0);
 HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 return;
}

function __ZNSt3__214__split_bufferIPP11SDL_TextureNS_9allocatorIS3_EEE9push_backEOS3_(i7, i12) {
 i7 = i7 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = i7 + 8 | 0;
 i8 = HEAP32[i13 >> 2] | 0;
 i9 = i7 + 12 | 0;
 i11 = HEAP32[i9 >> 2] | 0;
 i3 = i11;
 do if ((i8 | 0) == (i11 | 0)) {
  i11 = i7 + 4 | 0;
  i10 = HEAP32[i11 >> 2] | 0;
  i2 = HEAP32[i7 >> 2] | 0;
  i1 = i2;
  if (i10 >>> 0 > i2 >>> 0) {
   i2 = i10;
   i3 = ((i2 - i1 >> 2) + 1 | 0) / -2 | 0;
   i4 = i10 + (i3 << 2) | 0;
   i1 = i8 - i2 | 0;
   i2 = i1 >> 2;
   if (!i2) i1 = i10; else {
    _memmove(i4 | 0, i10 | 0, i1 | 0) | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   }
   i10 = i4 + (i2 << 2) | 0;
   HEAP32[i13 >> 2] = i10;
   HEAP32[i11 >> 2] = i1 + (i3 << 2);
   i1 = i10;
   break;
  }
  i1 = i3 - i1 >> 1;
  i1 = (i1 | 0) == 0 ? 1 : i1;
  if (i1 >>> 0 > 1073741823) {
   i13 = ___cxa_allocate_exception(8) | 0;
   __ZNSt11logic_errorC2EPKc(i13, 38941);
   HEAP32[i13 >> 2] = 35044;
   ___cxa_throw(i13 | 0, 2680, 272);
  }
  i4 = __Znwj(i1 << 2) | 0;
  i5 = i4;
  i3 = i4 + (i1 >>> 2 << 2) | 0;
  i6 = i3;
  i4 = i4 + (i1 << 2) | 0;
  if ((i10 | 0) == (i8 | 0)) i1 = i6; else {
   i1 = i6;
   i2 = i10;
   do {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    i3 = i1 + 4 | 0;
    i1 = i3;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) != (i8 | 0));
   i2 = HEAP32[i7 >> 2] | 0;
  }
  HEAP32[i7 >> 2] = i5;
  HEAP32[i11 >> 2] = i6;
  HEAP32[i13 >> 2] = i1;
  HEAP32[i9 >> 2] = i4;
  if (i2) {
   __ZdlPv(i2);
   i1 = HEAP32[i13 >> 2] | 0;
  }
 } else i1 = i8; while (0);
 HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 4;
 return;
}

function ___fdopen(i6, i2) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i8 = i9 + 40 | 0;
 i5 = i9 + 24 | 0;
 i4 = i9 + 16 | 0;
 i3 = i9;
 i7 = i9 + 56 | 0;
 if (!(_strchr(72535, HEAP8[i2 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 } else {
  i1 = _malloc(1156) | 0;
  if (!i1) i1 = 0; else {
   _memset(i1 | 0, 0, 124) | 0;
   if (!(_strchr(i2, 43) | 0)) HEAP32[i1 >> 2] = (HEAP8[i2 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr(i2, 101) | 0) {
    HEAP32[i3 >> 2] = i6;
    HEAP32[i3 + 4 >> 2] = 2;
    HEAP32[i3 + 8 >> 2] = 1;
    ___syscall221(221, i3 | 0) | 0;
   }
   if ((HEAP8[i2 >> 0] | 0) == 97) {
    HEAP32[i4 >> 2] = i6;
    HEAP32[i4 + 4 >> 2] = 3;
    i2 = ___syscall221(221, i4 | 0) | 0;
    if (!(i2 & 1024)) {
     HEAP32[i5 >> 2] = i6;
     HEAP32[i5 + 4 >> 2] = 4;
     HEAP32[i5 + 8 >> 2] = i2 | 1024;
     ___syscall221(221, i5 | 0) | 0;
    }
    i3 = HEAP32[i1 >> 2] | 128;
    HEAP32[i1 >> 2] = i3;
   } else i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 + 60 >> 2] = i6;
   HEAP32[i1 + 44 >> 2] = i1 + 132;
   HEAP32[i1 + 48 >> 2] = 1024;
   i2 = i1 + 75 | 0;
   HEAP8[i2 >> 0] = -1;
   if (!(i3 & 8)) {
    HEAP32[i8 >> 2] = i6;
    HEAP32[i8 + 4 >> 2] = 21523;
    HEAP32[i8 + 8 >> 2] = i7;
    if (!(___syscall54(54, i8 | 0) | 0)) HEAP8[i2 >> 0] = 10;
   }
   HEAP32[i1 + 32 >> 2] = 3;
   HEAP32[i1 + 36 >> 2] = 1;
   HEAP32[i1 + 40 >> 2] = 2;
   HEAP32[i1 + 12 >> 2] = 39;
   if (!(HEAP32[20613] | 0)) HEAP32[i1 + 76 >> 2] = -1;
   ___ofl_add(i1) | 0;
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _SDL_SYS_JoystickInit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 1440 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1440);
 i4 = i5 + 1432 | 0;
 i2 = i5;
 HEAP32[20464] = 0;
 i3 = _emscripten_get_num_gamepads() | 0;
 do if ((i3 | 0) == -1) i1 = 58981; else {
  if ((i3 | 0) > 0) {
   i1 = 0;
   do {
    if (!(_emscripten_get_gamepad_status(i1 | 0, i2 | 0) | 0)) _Emscripten_JoyStickConnected(0, i2, 0) | 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != (i3 | 0));
  }
  if (_emscripten_set_gamepadconnected_callback(0, 0, 57) | 0) {
   i1 = HEAP32[20463] | 0;
   if (i1 | 0) do {
    i3 = i1;
    i1 = HEAP32[i1 + 1320 >> 2] | 0;
    _SDL_free(HEAP32[i3 + 8 >> 2] | 0);
    _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
    _SDL_free(i3);
   } while ((i1 | 0) != 0);
   HEAP32[20466] = 0;
   HEAP32[20463] = 0;
   HEAP32[20464] = 0;
   HEAP32[20467] = 0;
   _emscripten_set_gamepadconnected_callback(0, 0, 0) | 0;
   _emscripten_set_gamepaddisconnected_callback(0, 0, 0) | 0;
   i1 = 58942;
   break;
  }
  if (!(_emscripten_set_gamepaddisconnected_callback(0, 0, 58) | 0)) {
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i1 = HEAP32[20463] | 0;
  if (i1 | 0) do {
   i3 = i1;
   i1 = HEAP32[i1 + 1320 >> 2] | 0;
   _SDL_free(HEAP32[i3 + 8 >> 2] | 0);
   _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
   _SDL_free(i3);
  } while ((i1 | 0) != 0);
  HEAP32[20466] = 0;
  HEAP32[20463] = 0;
  HEAP32[20464] = 0;
  HEAP32[20467] = 0;
  _emscripten_set_gamepadconnected_callback(0, 0, 0) | 0;
  _emscripten_set_gamepaddisconnected_callback(0, 0, 0) | 0;
  i1 = 58900;
 } while (0);
 i4 = _SDL_SetError(i1, i4) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _png_colorspace_set_sRGB(i4, i7, i6) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i5 = 0, i8 = 0;
 i8 = i7 + 74 | 0;
 i1 = HEAP16[i8 >> 1] | 0;
 i3 = i1 & 65535;
 if (i3 & 32768 | 0) {
  i8 = 0;
  return i8 | 0;
 }
 if (i6 >>> 0 > 3) {
  _png_icc_profile_error(i4, i7, 61048, i6, 61053);
  i8 = 0;
  return i8 | 0;
 }
 if (i3 & 4 | 0) if ((HEAPU16[i7 + 72 >> 1] | 0 | 0) != (i6 | 0)) {
  _png_icc_profile_error(i4, i7, 61048, i6, 61083);
  i8 = 0;
  return i8 | 0;
 }
 if (i3 & 32 | 0) {
  _png_benign_error(i4, 61114);
  i8 = 0;
  return i8 | 0;
 }
 if (!(i3 & 2)) i3 = i1; else if (!(_png_colorspace_endpoints_match(18340, i7 + 4 | 0, 100) | 0)) {
  _png_chunk_report(i4, 61149, 2);
  i3 = HEAP16[i8 >> 1] | 0;
 } else i3 = i1;
 do if (!(i3 & 1)) i5 = i3; else {
  i1 = HEAP32[i7 >> 2] | 0;
  if (i1 | 0) {
   d2 = +Math_floor(+(+(i1 | 0) * 1.0e5 / 45455.0 + .5));
   if (d2 <= 2147483647.0 & d2 >= -2147483648.0) if ((~~d2 + -95e3 | 0) >>> 0 < 10001) {
    i5 = i3;
    break;
   }
  }
  _png_chunk_report(i4, 60901, 2);
  i5 = HEAP16[i8 >> 1] | 0;
 } while (0);
 HEAP16[i7 + 72 >> 1] = i6;
 i1 = i7 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[4585];
 HEAP32[i1 + 4 >> 2] = HEAP32[4586];
 HEAP32[i1 + 8 >> 2] = HEAP32[4587];
 HEAP32[i1 + 12 >> 2] = HEAP32[4588];
 HEAP32[i1 + 16 >> 2] = HEAP32[4589];
 HEAP32[i1 + 20 >> 2] = HEAP32[4590];
 HEAP32[i1 + 24 >> 2] = HEAP32[4591];
 HEAP32[i1 + 28 >> 2] = HEAP32[4592];
 i1 = i7 + 36 | 0;
 i3 = 18372;
 i4 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  i1 = i1 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i1 | 0) < (i4 | 0));
 HEAP32[i7 >> 2] = 45455;
 HEAP16[i8 >> 1] = i5 | 231;
 i8 = 1;
 return i8 | 0;
}

function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i5, i6, i1) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i11 + 12 | 0;
 i9 = i11;
 i10 = i11 + 8 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i5);
 if (!(HEAP8[i9 >> 0] | 0)) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i5 | 0;
 }
 i7 = (HEAP32[i5 >> 2] | 0) + -12 | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 + (HEAP32[i7 >> 2] | 0) + 24 >> 2];
 i7 = i5 + (HEAP32[i7 >> 2] | 0) | 0;
 i8 = HEAP32[i7 + 4 >> 2] | 0;
 i3 = i6 + i1 | 0;
 i2 = i7 + 76 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == -1) {
  __ZNKSt3__28ios_base6getlocEv(i4, i7);
  i1 = __ZNKSt3__26locale9use_facetERNS0_2idE(i4, 83620) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, 32) | 0;
  __ZNSt3__26localeD2Ev(i4);
  i1 = i1 << 24 >> 24;
  HEAP32[i2 >> 2] = i1;
 }
 HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
 if (__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i4, i6, (i8 & 176 | 0) == 32 ? i3 : i6, i3, i7, i1 & 255) | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i5 | 0;
 }
 i10 = i5 + (HEAP32[(HEAP32[i5 >> 2] | 0) + -12 >> 2] | 0) | 0;
 __ZNSt3__28ios_base5clearEj(i10, HEAP32[i10 + 16 >> 2] | 5);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i5 | 0;
}

function _SDL_Blit_RGBA8888_ARGB8888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i18 = HEAP32[i2 >> 2] | 0;
    i17 = i18 >>> 8;
    HEAP32[i3 >> 2] = i18 >>> 24 << 16 | i18 << 24 | i17 & 65280 | i17 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_SetColorKey(i2, i5, i7) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i8 + 8 | 0;
 i1 = i8;
 if (!i2) {
  HEAP32[i1 >> 2] = 47961;
  i7 = _SDL_SetError(59509, i1) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i6 = i2 + 4 | 0;
 i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) >>> 0 <= i7 >>> 0) {
  HEAP32[i3 >> 2] = 47731;
  i7 = _SDL_SetError(59509, i3) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = i2 + 52 | 0;
 if (i5 & 2 | 0) {
  i2 = HEAP32[i1 >> 2] | 0;
  i9 = i2 + 68 | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  i3 = i4 | 4096;
  HEAP32[i9 >> 2] = i3;
  if ((i3 | 0) != (i4 | 0)) _SDL_InvalidateMap(i2);
 }
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = i3 + 68 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 if (!i5) {
  i1 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
  if (i1 | 0) {
   HEAP8[(HEAP32[i1 + 4 >> 2] | 0) + (HEAP32[i3 + 72 >> 2] << 2) + 3 >> 0] = -1;
   i9 = i1 + 8 | 0;
   i7 = (HEAP32[i9 >> 2] | 0) + 1 | 0;
   HEAP32[i9 >> 2] = (i7 | 0) == 0 ? 1 : i7;
  }
  i1 = i4 & -257;
  HEAP32[i2 >> 2] = i1;
 } else {
  i1 = i4 | 256;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i3 + 72 >> 2] = i7;
  i2 = HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0;
  if (i2) {
   HEAP8[(HEAP32[i2 + 4 >> 2] | 0) + (i7 << 2) + 3 >> 0] = 0;
   i9 = i2 + 8 | 0;
   i7 = (HEAP32[i9 >> 2] | 0) + 1 | 0;
   HEAP32[i9 >> 2] = (i7 | 0) == 0 ? 1 : i7;
  }
 }
 if ((i1 | 0) == (i4 | 0)) {
  i9 = 0;
  STACKTOP = i8;
  return i9 | 0;
 }
 _SDL_InvalidateMap(i3);
 i9 = 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _SDL_Blit_RGBA8888_RGB888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i18 = HEAP32[i2 >> 2] | 0;
    i17 = i18 >>> 8;
    HEAP32[i3 >> 2] = i18 >>> 24 << 16 | i17 & 65280 | i17 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_BGR888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i18 = HEAP32[i2 >> 2] | 0;
    i17 = i18 >>> 8;
    HEAP32[i3 >> 2] = i18 >>> 24 << 16 | i17 & 65280 | i17 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_ARGB8888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 & -16711936 | i17 << 16 & 16711680 | i17 >>> 16 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_BGR888_ARGB8888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 & 65280 | i17 << 16 | i17 >>> 16 & 255 | -16777216;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_BGR888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_RGB888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_RGBA8888_BGR888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 >>> 8 & 65280 | i17 >>> 24 | i17 << 8 & 16711680;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_BGRA8888_RGB888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 >>> 8 & 65280 | i17 >>> 24 | i17 << 8 & 16711680;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_RGB888_BGR888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_BGR888_RGB888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    i17 = HEAP32[i2 >> 2] | 0;
    HEAP32[i3 >> 2] = i17 << 16 & 16711680 | i17 & 65280 | i17 >>> 16 & 255;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function ___dynamic_cast(i1, i2, i10, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i11 = i13;
 i9 = HEAP32[i1 >> 2] | 0;
 i12 = i1 + (HEAP32[i9 + -8 >> 2] | 0) | 0;
 i9 = HEAP32[i9 + -4 >> 2] | 0;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i11 + 4 >> 2] = i1;
 HEAP32[i11 + 8 >> 2] = i2;
 HEAP32[i11 + 12 >> 2] = i3;
 i1 = i11 + 16 | 0;
 i2 = i11 + 20 | 0;
 i3 = i11 + 24 | 0;
 i4 = i11 + 28 | 0;
 i5 = i11 + 32 | 0;
 i6 = i11 + 40 | 0;
 i7 = i1;
 i8 = i7 + 36 | 0;
 do {
  HEAP32[i7 >> 2] = 0;
  i7 = i7 + 4 | 0;
 } while ((i7 | 0) < (i8 | 0));
 HEAP16[i1 + 36 >> 1] = 0;
 HEAP8[i1 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i9, i10, 0) | 0) {
  HEAP32[i11 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 20 >> 2] & 15](i9, i11, i12, i12, 1, 0);
  i1 = (HEAP32[i3 >> 2] | 0) == 1 ? i12 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 24 >> 2] & 7](i9, i11, i12, 1, 0);
  switch (HEAP32[i11 + 36 >> 2] | 0) {
  case 0:
   {
    i1 = (HEAP32[i6 >> 2] | 0) == 1 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
    break L1;
   }
  case 1:
   break;
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i3 >> 2] | 0) != 1) if (!((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1)) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 if (i1 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i10 = i8 + 8 | 0;
 i7 = i10 + 3 | 0;
 i4 = HEAP8[i7 >> 0] | 0;
 i5 = i4 << 24 >> 24 < 0;
 if (i5) {
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i2 = (HEAP32[i10 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i4 & 255;
  i2 = 1;
 }
 i6 = i9 >>> 0 > i1 >>> 0 ? i9 : i1;
 i1 = i6 >>> 0 < 2;
 i6 = i1 ? 1 : (i6 + 4 & -4) + -1 | 0;
 do if ((i6 | 0) != (i2 | 0)) {
  do if (i1) {
   i1 = HEAP32[i8 >> 2] | 0;
   if (i5) {
    i4 = 0;
    i2 = i1;
    i3 = i8;
    i5 = 15;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwj(i8, i1, (i4 & 255) + 1 | 0) | 0;
    __ZdlPv(i1);
    i5 = 18;
   }
  } else {
   i2 = i6 + 1 | 0;
   if (i2 >>> 0 > 1073741823) _abort();
   i3 = __Znwj(i2 << 2) | 0;
   if (i5) {
    i4 = 1;
    i2 = HEAP32[i8 >> 2] | 0;
    i5 = 15;
    break;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwj(i3, i8, (i4 & 255) + 1 | 0) | 0;
    i1 = i8 + 4 | 0;
    i5 = 17;
    break;
   }
  } while (0);
  if ((i5 | 0) == 15) {
   i1 = i8 + 4 | 0;
   __ZNSt3__211char_traitsIwE4copyEPwPKwj(i3, i2, (HEAP32[i1 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv(i2);
   if (i4) {
    i2 = i6 + 1 | 0;
    i5 = 17;
   } else i5 = 18;
  }
  if ((i5 | 0) == 17) {
   HEAP32[i10 >> 2] = i2 | -2147483648;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i8 >> 2] = i3;
   break;
  } else if ((i5 | 0) == 18) {
   HEAP8[i7 >> 0] = i9;
   break;
  }
 } while (0);
 return;
}

function _vfprintf(i15, i8, i1) {
 i15 = i15 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i10 = i16 + 120 | 0;
 i12 = i16 + 80 | 0;
 i13 = i16;
 i14 = i16 + 136 | 0;
 i2 = i12;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i8, i10, i13, i12) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i15 + 76 >> 2] | 0) > -1) i11 = ___lockfile(i15) | 0; else i11 = 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i9 = i1 & 32;
  if ((HEAP8[i15 + 74 >> 0] | 0) < 1) HEAP32[i15 >> 2] = i1 & -33;
  i2 = i15 + 48 | 0;
  if (!(HEAP32[i2 >> 2] | 0)) {
   i3 = i15 + 44 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i14;
   i5 = i15 + 28 | 0;
   HEAP32[i5 >> 2] = i14;
   i6 = i15 + 20 | 0;
   HEAP32[i6 >> 2] = i14;
   HEAP32[i2 >> 2] = 80;
   i7 = i15 + 16 | 0;
   HEAP32[i7 >> 2] = i14 + 80;
   i1 = _printf_core(i15, i8, i10, i13, i12) | 0;
   if (i4) {
    FUNCTION_TABLE_iiii[HEAP32[i15 + 36 >> 2] & 63](i15, 0, 0) | 0;
    i1 = (HEAP32[i6 >> 2] | 0) == 0 ? -1 : i1;
    HEAP32[i3 >> 2] = i4;
    HEAP32[i2 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
   }
  } else i1 = _printf_core(i15, i8, i10, i13, i12) | 0;
  i2 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i2 | i9;
  if (i11 | 0) ___unlockfile(i15);
  i1 = (i2 & 32 | 0) == 0 ? i1 : -1;
 }
 STACKTOP = i16;
 return i1 | 0;
}

function _Color24DitherYUY2Mod1X(i14, i15, i6, i3, i4, i5, i9, i2, i1) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i16 = (i2 | 0) / 2 | 0;
 i13 = i1 * 3 | 0;
 if ((i9 | 0) == 0 | (i2 + 1 | 0) >>> 0 < 3) return;
 i11 = i16 << 2;
 i12 = i16 * 6 | 0;
 i10 = i6;
 while (1) {
  i9 = i9 + -1 | 0;
  i2 = i3;
  i3 = i3 + i11 | 0;
  i1 = i16;
  i6 = i4;
  i7 = i5;
  i8 = i10;
  i10 = i10 + i11 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i20 = HEAPU8[i2 >> 0] | 0;
   i19 = (HEAP32[i14 + (i20 << 2) >> 2] | 0) + 256 | 0;
   i18 = HEAPU8[i6 >> 0] | 0;
   i20 = (HEAP32[i14 + ((i20 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i14 + ((i18 | 512) << 2) >> 2] | 0) | 0;
   i18 = (HEAP32[i14 + ((i18 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i17 = HEAPU8[i8 >> 0] | 0;
   i17 = HEAP32[i15 + (i20 + i17 << 2) >> 2] | HEAP32[i15 + (i19 + i17 << 2) >> 2] | HEAP32[i15 + (i18 + i17 << 2) >> 2];
   HEAP8[i7 >> 0] = i17;
   HEAP8[i7 + 1 >> 0] = i17 >>> 8;
   HEAP8[i7 + 2 >> 0] = i17 >>> 16;
   i17 = HEAPU8[i8 + 2 >> 0] | 0;
   i17 = HEAP32[i15 + (i20 + i17 << 2) >> 2] | HEAP32[i15 + (i19 + i17 << 2) >> 2] | HEAP32[i15 + (i18 + i17 << 2) >> 2];
   HEAP8[i7 + 3 >> 0] = i17;
   HEAP8[i7 + 4 >> 0] = i17 >>> 8;
   HEAP8[i7 + 5 >> 0] = i17 >>> 16;
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i6 = i6 + 4 | 0;
    i7 = i7 + 6 | 0;
    i8 = i8 + 4 | 0;
   }
  }
  if (!i9) break; else {
   i4 = i4 + i11 | 0;
   i5 = i5 + i12 + i13 | 0;
  }
 }
 return;
}

function _png_colorspace_set_rgb_coefficients(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0;
 if (HEAP8[i9 + 701 >> 0] | 0) return;
 if (!(HEAP16[i9 + 898 >> 1] & 2)) return;
 i2 = HEAP32[i9 + 864 >> 2] | 0;
 i3 = HEAP32[i9 + 876 >> 2] | 0;
 i6 = HEAP32[i9 + 888 >> 2] | 0;
 i7 = i3 + i2 + i6 | 0;
 if (!((i2 | 0) > -1 & (i7 | 0) > 0)) _png_error(i9, 61915);
 if (!i2) i1 = 0; else {
  d5 = +Math_floor(+(+(i2 | 0) * 32768.0 / +(i7 | 0) + .5));
  if (d5 <= 2147483647.0 & d5 >= -2147483648.0) i1 = ~~d5; else _png_error(i9, 61915);
 }
 if (!((i3 | 0) > -1 & i1 >>> 0 < 32769)) _png_error(i9, 61915);
 if (!i3) i8 = 0; else {
  d5 = +Math_floor(+(+(i3 | 0) * 32768.0 / +(i7 | 0) + .5));
  if (d5 <= 2147483647.0 & d5 >= -2147483648.0) i8 = ~~d5; else _png_error(i9, 61915);
 }
 if (!((i6 | 0) > -1 & i8 >>> 0 < 32769)) _png_error(i9, 61915);
 if (!i6) i4 = 0; else {
  d5 = +Math_floor(+(+(i6 | 0) * 32768.0 / +(i7 | 0) + .5));
  i2 = ~~d5;
  if (d5 <= 2147483647.0 & d5 >= -2147483648.0 & i2 >>> 0 < 32769) i4 = i2; else _png_error(i9, 61915);
 }
 i2 = i8 + i1 + i4 | 0;
 if ((i2 | 0) >= 32770) _png_error(i9, 61915);
 i3 = (i2 | 0) == 32769 ? -1 : (i2 | 0) < 32768 & 1;
 do if (!i3) i2 = i8; else {
  if (!((i8 | 0) < (i1 | 0) | (i8 | 0) < (i4 | 0))) {
   i2 = i3 + i8 | 0;
   break;
  }
  if ((i1 | 0) < (i8 | 0) | (i1 | 0) < (i4 | 0)) {
   i4 = i3 + i4 | 0;
   i2 = i8;
   break;
  } else {
   i2 = i8;
   i1 = i3 + i1 | 0;
   break;
  }
 } while (0);
 if ((i2 + i1 + i4 | 0) != 32768) _png_error(i9, 61873);
 HEAP16[i9 + 702 >> 1] = i1;
 HEAP16[i9 + 704 >> 1] = i2;
 return;
}

function _SDL_UpdateWindowTexture(i1, i6, i7, i8) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i4 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i3 = i5 + 24 | 0;
 i1 = HEAP32[19487] | 0;
 L1 : do if (!i1) _SDL_SetError(40203, i5) | 0; else {
  if (i6 | 0) if ((HEAP32[i6 >> 2] | 0) == (i1 + 280 | 0)) {
   i1 = HEAP32[i6 + 140 >> 2] | 0;
   if (!i1) break;
   while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (i2 | 0) if (!(_SDL_strcmp(i2, 59348) | 0)) break;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    if (!i1) break L1;
   }
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i1) break;
   i2 = i1 + 4 | 0;
   if (!(HEAP32[i2 >> 2] | 0)) break;
   if (!(_SDL_GetSpanEnclosingRect(HEAP32[i6 + 24 >> 2] | 0, HEAP32[i6 + 28 >> 2] | 0, i8, i7, i3) | 0)) {
    i8 = 0;
    STACKTOP = i5;
    return i8 | 0;
   }
   i8 = HEAP32[i1 + 12 >> 2] | 0;
   i7 = (HEAP32[i1 + 8 >> 2] | 0) + (Math_imul(i8, HEAP32[i3 + 4 >> 2] | 0) | 0) | 0;
   i7 = i7 + (Math_imul(HEAP32[i1 + 16 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) | 0;
   if ((_SDL_UpdateTexture(HEAP32[i2 >> 2] | 0, i3, i7, i8) | 0) < 0) {
    i8 = -1;
    STACKTOP = i5;
    return i8 | 0;
   }
   if ((_SDL_RenderCopy(HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0, 0, 0) | 0) < 0) {
    i8 = -1;
    STACKTOP = i5;
    return i8 | 0;
   }
   _SDL_RenderPresent(HEAP32[i1 >> 2] | 0);
   i8 = 0;
   STACKTOP = i5;
   return i8 | 0;
  }
  _SDL_SetError(59973, i2) | 0;
 } while (0);
 i8 = _SDL_SetError(59486, i4) | 0;
 STACKTOP = i5;
 return i8 | 0;
}

function _SDL_SetWindowData(i1, i6, i7) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i8 + 16 | 0;
 i3 = i8 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i8) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i2 + 280 | 0)) {
  if (i6 | 0) if (HEAP8[i6 >> 0] | 0) {
   i5 = i1 + 140 | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   L11 : do if (i1 | 0) {
    i4 = 0;
    while (1) {
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2 | 0) if (!(_SDL_strcmp(i2, i6) | 0)) break;
     i2 = HEAP32[i1 + 8 >> 2] | 0;
     if (!i2) break L11; else {
      i4 = i1;
      i1 = i2;
     }
    }
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i7) {
     HEAP32[(i4 | 0 ? i4 + 8 | 0 : i5) >> 2] = HEAP32[i1 + 8 >> 2];
     _SDL_free(HEAP32[i1 >> 2] | 0);
     _SDL_free(i1);
     i7 = i3;
     STACKTOP = i8;
     return i7 | 0;
    } else {
     HEAP32[i2 >> 2] = i7;
     i7 = i3;
     STACKTOP = i8;
     return i7 | 0;
    }
   } while (0);
   if (!i7) {
    i7 = 0;
    STACKTOP = i8;
    return i7 | 0;
   }
   i4 = _SDL_malloc(12) | 0;
   HEAP32[i4 >> 2] = _SDL_strdup(i6) | 0;
   HEAP32[i4 + 4 >> 2] = i7;
   HEAP32[i4 + 8 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i5 >> 2] = i4;
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  HEAP32[i4 >> 2] = 59004;
  _SDL_SetError(59509, i4) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_SetError(59973, i3) | 0;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _Color16DitherYUY2Mod2X(i15, i16, i6, i3, i4, i5, i9, i2, i1) {
 i15 = i15 | 0;
 i16 = i16 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0;
 i13 = ((i1 | 0) / 2 | 0) + i2 | 0;
 i14 = (i2 | 0) / 2 | 0;
 if ((i9 | 0) == 0 | (i2 + 1 | 0) >>> 0 < 3) return;
 i11 = i14 << 2;
 i12 = i14 << 1;
 i10 = i6;
 while (1) {
  i9 = i9 + -1 | 0;
  i2 = i3;
  i3 = i3 + i11 | 0;
  i1 = i14;
  i6 = i4;
  i7 = i5;
  i8 = i10;
  i10 = i10 + i11 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i21 = HEAPU8[i2 >> 0] | 0;
   i20 = (HEAP32[i15 + (i21 << 2) >> 2] | 0) + 256 | 0;
   i19 = HEAPU8[i6 >> 0] | 0;
   i21 = (HEAP32[i15 + ((i21 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i15 + ((i19 | 512) << 2) >> 2] | 0) | 0;
   i19 = (HEAP32[i15 + ((i19 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i17 = HEAPU8[i8 >> 0] | 0;
   i17 = HEAP32[i16 + (i21 + i17 << 2) >> 2] | HEAP32[i16 + (i20 + i17 << 2) >> 2] | HEAP32[i16 + (i19 + i17 << 2) >> 2];
   HEAP32[i7 + (i13 << 2) >> 2] = i17;
   HEAP32[i7 >> 2] = i17;
   i17 = i7 + 4 | 0;
   i18 = HEAPU8[i8 + 2 >> 0] | 0;
   i18 = HEAP32[i16 + (i21 + i18 << 2) >> 2] | HEAP32[i16 + (i20 + i18 << 2) >> 2] | HEAP32[i16 + (i19 + i18 << 2) >> 2];
   HEAP32[i17 + (i13 << 2) >> 2] = i18;
   HEAP32[i17 >> 2] = i18;
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i6 = i6 + 4 | 0;
    i7 = i7 + 8 | 0;
    i8 = i8 + 4 | 0;
   }
  }
  if (!i9) break; else {
   i4 = i4 + i11 | 0;
   i5 = i5 + (i12 << 2) + (i13 << 2) | 0;
  }
 }
 return;
}

function _SDL_IntersectRect(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 if (!i5) {
  HEAP32[i1 >> 2] = 41291;
  _SDL_SetError(59509, i1) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!i6) {
  HEAP32[i2 >> 2] = 41293;
  _SDL_SetError(59509, i2) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!i7) {
  HEAP32[i3 >> 2] = 41295;
  _SDL_SetError(59509, i3) | 0;
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i4 = HEAP32[i5 + 8 >> 2] | 0;
 if ((i4 | 0) >= 1) {
  i1 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i1 | 0) > 0) {
   i2 = HEAP32[i6 + 8 >> 2] | 0;
   if ((i2 | 0) >= 1) {
    i3 = HEAP32[i6 + 12 >> 2] | 0;
    if ((i3 | 0) > 0) {
     i10 = HEAP32[i5 >> 2] | 0;
     i9 = i4 + i10 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
     i2 = i2 + i4 | 0;
     i4 = (i4 | 0) > (i10 | 0) ? i4 : i10;
     HEAP32[i7 >> 2] = i4;
     i4 = ((i2 | 0) < (i9 | 0) ? i2 : i9) - i4 | 0;
     HEAP32[i7 + 8 >> 2] = i4;
     i2 = HEAP32[i5 + 4 >> 2] | 0;
     i5 = i1 + i2 | 0;
     i6 = HEAP32[i6 + 4 >> 2] | 0;
     i3 = i3 + i6 | 0;
     i6 = (i6 | 0) > (i2 | 0) ? i6 : i2;
     HEAP32[i7 + 4 >> 2] = i6;
     i6 = ((i3 | 0) < (i5 | 0) ? i3 : i5) - i6 | 0;
     HEAP32[i7 + 12 >> 2] = i6;
     i7 = (i4 | 0) > 0 & (i6 | 0) > 0 & 1;
     STACKTOP = i8;
     return i7 | 0;
    }
   }
  }
 }
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 i10 = 0;
 STACKTOP = i8;
 return i10 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i4, i7, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i4 + 8 >> 2] | 0, i3) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i4, i7, i1); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i2, HEAP32[i4 >> 2] | 0, i3) | 0)) {
   i8 = HEAP32[i2 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 7](i8, i4, i7, i1, i3);
   break;
  }
  if ((HEAP32[i4 + 16 >> 2] | 0) != (i7 | 0)) {
   i5 = i4 + 20 | 0;
   if ((HEAP32[i5 >> 2] | 0) != (i7 | 0)) {
    HEAP32[i4 + 32 >> 2] = i1;
    i6 = i4 + 44 | 0;
    if ((HEAP32[i6 >> 2] | 0) == 4) break;
    i1 = i4 + 52 | 0;
    HEAP8[i1 >> 0] = 0;
    i9 = i4 + 53 | 0;
    HEAP8[i9 >> 0] = 0;
    i2 = HEAP32[i2 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 15](i2, i4, i7, i7, 1, i3);
    if (!(HEAP8[i9 >> 0] | 0)) {
     i1 = 4;
     i8 = 11;
    } else if (!(HEAP8[i1 >> 0] | 0)) {
     i1 = 3;
     i8 = 11;
    } else i1 = 3;
    if ((i8 | 0) == 11) {
     HEAP32[i5 >> 2] = i7;
     i9 = i4 + 40 | 0;
     HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
     if ((HEAP32[i4 + 36 >> 2] | 0) == 1) if ((HEAP32[i4 + 24 >> 2] | 0) == 2) HEAP8[i4 + 54 >> 0] = 1;
    }
    HEAP32[i6 >> 2] = i1;
    break;
   }
  }
  if ((i1 | 0) == 1) HEAP32[i4 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN6Entity12addComponentI18KeyboardControllerJEEERT_DpOT0_(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 i6 = __Znwj(24) | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 20 >> 2] = 0;
 HEAP32[i6 >> 2] = 2808;
 HEAP8[i6 + 8 >> 0] = 0;
 HEAP32[i6 + 12 >> 2] = _SDL_GetKeyboardState(0) | 0;
 HEAP32[i6 + 4 >> 2] = i1;
 i2 = i6;
 HEAP32[i5 >> 2] = i2;
 i3 = i1 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 >>> 0 < (HEAP32[i1 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i3 >> 2] = i4 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i1 + 8 | 0, i5);
 if (!(HEAP8[75976] | 0)) if (___cxa_guard_acquire(75976) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19478] = i4;
 }
 HEAP32[i1 + 20 + (HEAP32[19478] << 2) >> 2] = i6;
 if (!(HEAP8[75976] | 0)) if (___cxa_guard_acquire(75976) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19478] = i4;
 }
 i1 = i1 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19478];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_SYS_JoystickUpdate(i1) {
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 1440 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1440);
 i10 = i11;
 i9 = HEAP32[i1 + 44 >> 2] | 0;
 if (!i9) {
  STACKTOP = i11;
  return;
 }
 if (_emscripten_get_gamepad_status(HEAP32[i9 >> 2] | 0, i10 | 0) | 0) {
  STACKTOP = i11;
  return;
 }
 d2 = +HEAPF64[i10 >> 3];
 if (!(d2 == 0.0)) if (!(d2 != +HEAPF64[i9 + 32 >> 3])) {
  STACKTOP = i11;
  return;
 }
 i6 = i9 + 20 | 0;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  i7 = i9 + 16 | 0;
  i5 = 0;
  do {
   i8 = i9 + 1064 + (i5 << 2) | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   i3 = i10 + 1040 + (i5 << 2) | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i1 | 0) != (i4 | 0)) {
    _SDL_PrivateJoystickButton(HEAP32[i7 >> 2] | 0, i5 & 255, (i4 | 0) != 0 & 1) | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   }
   HEAPF64[i9 + 552 + (i5 << 3) >> 3] = +HEAPF64[i10 + 528 + (i5 << 3) >> 3];
   HEAP32[i8 >> 2] = i1;
   i5 = i5 + 1 | 0;
  } while ((i5 | 0) < (HEAP32[i6 >> 2] | 0));
 }
 i4 = i9 + 24 | 0;
 if ((HEAP32[i4 >> 2] | 0) > 0) {
  i5 = i9 + 16 | 0;
  i3 = 0;
  do {
   i6 = i9 + 40 + (i3 << 3) | 0;
   i1 = i10 + 16 + (i3 << 3) | 0;
   d2 = +HEAPF64[i1 >> 3];
   if (+HEAPF64[i6 >> 3] != d2) {
    _SDL_PrivateJoystickAxis(HEAP32[i5 >> 2] | 0, i3 & 255, ~~(d2 * 32767.0)) | 0;
    d2 = +HEAPF64[i1 >> 3];
   }
   HEAPF64[i6 >> 3] = d2;
   i3 = i3 + 1 | 0;
  } while ((i3 | 0) < (HEAP32[i4 >> 2] | 0));
 }
 HEAPF64[i9 + 32 >> 3] = +HEAPF64[i10 >> 3];
 STACKTOP = i11;
 return;
}

function _SDL_Blit_BGRA8888_ARGB8888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = _llvm_bswap_i32(HEAP32[i2 >> 2] | 0) | 0;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _BlitBto1Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = HEAP32[i1 + 24 >> 2] | 0;
 i7 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 i10 = HEAP32[i1 + 36 >> 2] | 0;
 i11 = HEAP32[i1 + 56 >> 2] | 0;
 i8 = HEAP32[i1 + 48 >> 2] | 0;
 i9 = (HEAP32[i1 + 16 >> 2] | 0) + (i12 - ((i12 + 7 | 0) / 8 | 0)) | 0;
 i4 = i7 + -1 | 0;
 i1 = (i7 | 0) != 0 & (i12 | 0) > 0;
 if (!i8) {
  if (i1) {
   i1 = i2;
   i7 = i4;
  } else return;
  while (1) {
   i2 = 0;
   i5 = 0;
   i6 = i3;
   while (1) {
    if (!(i5 & 7)) {
     i4 = HEAP8[i1 >> 0] | 0;
     i1 = i1 + 1 | 0;
    } else i4 = i2;
    i2 = (i4 & 255) >>> 7;
    if ((i11 | 0) != (i2 & 255 | 0)) HEAP8[i6 >> 0] = i2;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i12 | 0)) break; else {
     i2 = (i4 & 255) << 1 & 255;
     i6 = i6 + 1 | 0;
    }
   }
   if (!i7) break; else {
    i3 = i3 + i12 + i10 | 0;
    i1 = i1 + i9 | 0;
    i7 = i7 + -1 | 0;
   }
  }
  return;
 } else {
  if (i1) i7 = i4; else return;
  while (1) {
   i1 = 0;
   i6 = 0;
   i5 = i3;
   while (1) {
    if (!(i6 & 7)) {
     i4 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    } else i4 = i1;
    i1 = (i4 & 255) >>> 7 & 255;
    if ((i11 | 0) != (i1 | 0)) HEAP8[i5 >> 0] = HEAP8[i8 + i1 >> 0] | 0;
    i6 = i6 + 1 | 0;
    if ((i6 | 0) == (i12 | 0)) break; else {
     i1 = (i4 & 255) << 1 & 255;
     i5 = i5 + 1 | 0;
    }
   }
   if (!i7) break; else {
    i2 = i2 + i9 | 0;
    i3 = i3 + i12 + i10 | 0;
    i7 = i7 + -1 | 0;
   }
  }
  return;
 }
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i1;
 i11 = i1 + 112 | 0;
 i12 = i1 + 100 | 0;
 i6 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i9 = i1 + 4 | 0;
 i8 = i1 + 8 | 0;
 HEAP8[i11 >> 0] = HEAP8[73379] | 0;
 HEAP8[i11 + 1 >> 0] = HEAP8[73380] | 0;
 HEAP8[i11 + 2 >> 0] = HEAP8[73381] | 0;
 HEAP8[i11 + 3 >> 0] = HEAP8[73382] | 0;
 HEAP8[i11 + 4 >> 0] = HEAP8[73383] | 0;
 HEAP8[i11 + 5 >> 0] = HEAP8[73384] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i11 + 1 | 0, 73385, 0, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i7 >> 2] = i5;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 12, i13, i11, i7) | 0) | 0;
 i11 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i12, i11, i5, i6, i10, i9, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i6, i2, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i1;
 i11 = i1 + 122 | 0;
 i12 = i1 + 108 | 0;
 i6 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i9 = i1 + 4 | 0;
 i8 = i1 + 8 | 0;
 HEAP8[i11 >> 0] = HEAP8[73379] | 0;
 HEAP8[i11 + 1 >> 0] = HEAP8[73380] | 0;
 HEAP8[i11 + 2 >> 0] = HEAP8[73381] | 0;
 HEAP8[i11 + 3 >> 0] = HEAP8[73382] | 0;
 HEAP8[i11 + 4 >> 0] = HEAP8[73383] | 0;
 HEAP8[i11 + 5 >> 0] = HEAP8[73384] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i11 + 1 | 0, 73385, 1, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i7 >> 2] = i5;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 13, i13, i11, i7) | 0) | 0;
 i11 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i12, i11, i5, i6, i10, i9, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i6, i2, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i1;
 i11 = i1 + 52 | 0;
 i12 = i1 + 40 | 0;
 i6 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i9 = i1 + 4 | 0;
 i8 = i1 + 8 | 0;
 HEAP8[i11 >> 0] = HEAP8[73379] | 0;
 HEAP8[i11 + 1 >> 0] = HEAP8[73380] | 0;
 HEAP8[i11 + 2 >> 0] = HEAP8[73381] | 0;
 HEAP8[i11 + 3 >> 0] = HEAP8[73382] | 0;
 HEAP8[i11 + 4 >> 0] = HEAP8[73383] | 0;
 HEAP8[i11 + 5 >> 0] = HEAP8[73384] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i11 + 1 | 0, 73385, 0, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i7 >> 2] = i5;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 12, i13, i11, i7) | 0) | 0;
 i11 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i12, i11, i5, i6, i10, i9, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i6, i2, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i1;
 i11 = i1 + 52 | 0;
 i12 = i1 + 39 | 0;
 i6 = i1 + 16 | 0;
 i10 = i1 + 12 | 0;
 i9 = i1 + 4 | 0;
 i8 = i1 + 8 | 0;
 HEAP8[i11 >> 0] = HEAP8[73379] | 0;
 HEAP8[i11 + 1 >> 0] = HEAP8[73380] | 0;
 HEAP8[i11 + 2 >> 0] = HEAP8[73381] | 0;
 HEAP8[i11 + 3 >> 0] = HEAP8[73382] | 0;
 HEAP8[i11 + 4 >> 0] = HEAP8[73383] | 0;
 HEAP8[i11 + 5 >> 0] = HEAP8[73384] | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i11 + 1 | 0, 73385, 1, HEAP32[i3 + 4 >> 2] | 0);
 i13 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i7 >> 2] = i5;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 13, i13, i11, i7) | 0) | 0;
 i11 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i7, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i12, i11, i5, i6, i10, i9, i7);
 __ZNSt3__26localeD2Ev(i7);
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i7, i6, i2, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _SDL_Blit_RGB888_ARGB8888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2] | -16777216;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_ARGB8888_RGB888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_ABGR8888_BGR888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2] & 16777215;
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _png_check_fp_number(i4, i5, i6, i7) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 L1 : do if (i2 >>> 0 < i5 >>> 0) while (1) {
  switch (HEAP8[i4 + i2 >> 0] | 0) {
  case 43:
   {
    i3 = 4;
    break;
   }
  case 45:
   {
    i3 = 132;
    break;
   }
  case 46:
   {
    i3 = 16;
    break;
   }
  case 48:
   {
    i3 = 8;
    break;
   }
  case 57:
  case 56:
  case 55:
  case 54:
  case 53:
  case 52:
  case 51:
  case 50:
  case 49:
   {
    i3 = 264;
    break;
   }
  case 101:
  case 69:
   {
    i3 = 32;
    break;
   }
  default:
   break L1;
  }
  L11 : do switch ((i3 | i1 & 3) & 63) {
  case 4:
   {
    if (i1 & 60 | 0) break L1;
    i1 = i3 | i1;
    break;
   }
  case 16:
   {
    if (i1 & 16 | 0) break L1;
    if (!(i1 & 8)) {
     i1 = i1 & 448 | i3 | 1;
     break L11;
    } else {
     i1 = i3 | i1;
     break L11;
    }
   }
  case 8:
   {
    i1 = ((i1 & 16 | 0) == 0 ? i1 : i1 & 384 | 17) | i3 | 64;
    break;
   }
  case 32:
   {
    if (!(i1 & 8)) break L1;
    i1 = i1 & 448 | 2;
    break;
   }
  case 9:
   {
    i1 = i1 | i3 | 64;
    break;
   }
  case 33:
   {
    if (!(i1 & 8)) break L1;
    i1 = i1 & 448 | 2;
    break;
   }
  case 6:
   {
    if (i1 & 60 | 0) break L1;
    i1 = i1 | 4;
    break;
   }
  case 10:
   {
    i1 = i1 | 72;
    break;
   }
  default:
   break L1;
  } while (0);
  i2 = i2 + 1 | 0;
  if (i2 >>> 0 >= i5 >>> 0) break L1;
 } while (0);
 HEAP32[i6 >> 2] = i1;
 HEAP32[i7 >> 2] = i2;
 return i1 >>> 3 & 1 | 0;
}

function _SDL_SetWindowGrab(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i7 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i7) | 0;
  STACKTOP = i7;
  return;
 }
 if (i6 | 0) if ((HEAP32[i6 >> 2] | 0) == (i2 + 280 | 0)) {
  i2 = (i1 | 0) != 0;
  i3 = i6 + 48 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (!(i2 ^ (i1 & 256 | 0) != 0)) {
   STACKTOP = i7;
   return;
  }
  HEAP32[i3 >> 2] = i2 ? i1 | 256 : i1 & -257;
  i1 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
  i3 = HEAP32[i3 >> 2] | 0;
  i4 = HEAP32[19487] | 0;
  i2 = HEAP32[i4 + 276 >> 2] | 0;
  if ((i3 & 512 | 0) == 0 | (i3 & 256 | i1 | 0) == 0) if ((i2 | 0) == (i6 | 0)) {
   i1 = 0;
   i3 = 0;
   i2 = i4;
   i5 = 12;
  } else {
   i3 = 0;
   i2 = i4;
  } else if ((i2 | 0) == 0 | (i2 | 0) == (i6 | 0)) {
   i1 = 1;
   i3 = i6;
   i2 = i4;
   i5 = 12;
  } else {
   i1 = i2 + 48 | 0;
   HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -257;
   i1 = HEAP32[i4 + 124 >> 2] | 0;
   if (!i1) {
    i1 = 1;
    i3 = i6;
    i2 = i4;
    i5 = 12;
   } else {
    FUNCTION_TABLE_viii[i1 & 63](i4, i2, 0);
    i1 = 1;
    i3 = i6;
    i2 = HEAP32[19487] | 0;
    i5 = 12;
   }
  }
  if ((i5 | 0) == 12) {
   HEAP32[i2 + 276 >> 2] = i3;
   i3 = i1;
  }
  i1 = HEAP32[i2 + 124 >> 2] | 0;
  if (!i1) {
   STACKTOP = i7;
   return;
  }
  FUNCTION_TABLE_viii[i1 & 63](i2, i6, i3);
  STACKTOP = i7;
  return;
 }
 _SDL_SetError(59973, i3) | 0;
 STACKTOP = i7;
 return;
}

function _SW_RenderClear(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 i3 = i5 + 320 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 L1 : do if (!i1) {
  i2 = i4 + 4 | 0;
  i9 = HEAP32[i2 >> 2] | 0;
  HEAP32[i4 >> 2] = i9;
  i1 = i9;
  if (!i9) {
   i1 = _SDL_GetWindowSurface(HEAP32[i5 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i2 >> 2] = i1;
    HEAP32[i4 >> 2] = i1;
    i2 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
    if (!i2) {
     i7 = 10;
     break L1;
    }
    _SDL_SetClipRect(i2, i5 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i5 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i5 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i4 >> 2] | 0;
  }
  if (!i1) {
   i9 = -1;
   STACKTOP = i8;
   return i9 | 0;
  } else i2 = i6;
 } else i7 = 10; while (0);
 if ((i7 | 0) == 10) i2 = i6;
 i9 = _SDL_MapRGBA(HEAP32[i1 + 4 >> 2] | 0, HEAP8[i5 + 312 >> 0] | 0, HEAP8[i5 + 313 >> 0] | 0, HEAP8[i5 + 314 >> 0] | 0, HEAP8[i5 + 315 >> 0] | 0) | 0;
 i7 = i1 + 36 | 0;
 HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 _SDL_SetClipRect(i1, 0) | 0;
 _SDL_FillRect(i1, 0, i9) | 0;
 _SDL_SetClipRect(i1, i6) | 0;
 i9 = 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _SDL_Blit_ARGB8888_ARGB8888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_GetSpanEnclosingRect(i6, i7, i8, i9, i10) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i3 = i11 + 32 | 0;
 i5 = i11 + 24 | 0;
 i4 = i11 + 16 | 0;
 i2 = i11 + 8 | 0;
 i1 = i11;
 if ((i6 | 0) < 1) {
  HEAP32[i1 >> 2] = 59742;
  _SDL_SetError(59509, i1) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((i7 | 0) < 1) {
  HEAP32[i2 >> 2] = 59748;
  _SDL_SetError(59509, i2) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!i9) {
  HEAP32[i4 >> 2] = 59755;
  _SDL_SetError(59509, i4) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if (!i10) {
  HEAP32[i5 >> 2] = 59761;
  _SDL_SetError(59509, i5) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 if ((i8 | 0) < 1) {
  HEAP32[i3 >> 2] = 59766;
  _SDL_SetError(59509, i3) | 0;
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 } else {
  i1 = 0;
  i2 = 0;
  i3 = i7;
 }
 do {
  i5 = i9 + (i1 << 4) | 0;
  i4 = HEAP32[i5 + 4 >> 2] | 0;
  i5 = (HEAP32[i5 + 12 >> 2] | 0) + i4 | 0;
  i3 = (i4 | 0) < 0 ? 0 : (i4 | 0) < (i3 | 0) ? i4 : i3;
  i2 = (i5 | 0) > (i7 | 0) ? i7 : (i5 | 0) > (i2 | 0) ? i5 : i2;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i8 | 0));
 if ((i2 | 0) <= (i3 | 0)) {
  i10 = 0;
  STACKTOP = i11;
  return i10 | 0;
 }
 HEAP32[i10 >> 2] = 0;
 HEAP32[i10 + 4 >> 2] = i3;
 HEAP32[i10 + 8 >> 2] = i6;
 HEAP32[i10 + 12 >> 2] = i2 - i3;
 i10 = 1;
 STACKTOP = i11;
 return i10 | 0;
}

function _SDL_Blit_RGB888_RGB888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _SDL_Blit_BGR888_BGR888_Scale(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = i9 + 28 | 0;
 i14 = HEAP32[i15 >> 2] | 0;
 i16 = (HEAP32[i9 + 8 >> 2] << 16 | 0) / (i14 | 0) | 0;
 i10 = i9 + 24 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i11 = (HEAP32[i9 + 4 >> 2] << 16 | 0) / (i1 | 0) | 0;
 i2 = i14 + -1 | 0;
 HEAP32[i15 >> 2] = i2;
 if (!i14) return;
 i12 = i9 + 20 | 0;
 i13 = i9 + 32 | 0;
 i14 = i9 + 12 | 0;
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = 0;
 i5 = 0;
 i8 = i3;
 while (1) {
  if ((i5 | 0) > 65535) {
   i7 = ~i5;
   i7 = i5 + 65536 + ((i7 | 0) > -131072 ? i7 : -131072) | 0;
   i6 = i4 + 1 + (i7 >>> 16) | 0;
   i7 = i5 + -65536 - (i7 & -65536) | 0;
  } else {
   i6 = i4;
   i7 = i5;
  }
  if (!i1) i1 = i2; else {
   i2 = 0;
   i4 = -1;
   i5 = 65536;
   while (1) {
    i1 = i1 + -1 | 0;
    if ((i5 | 0) > 65535) {
     i17 = ~i5;
     i17 = i5 + 65536 + ((i17 | 0) > -131072 ? i17 : -131072) | 0;
     i4 = i4 + 1 + (i17 >>> 16) | 0;
     i2 = (HEAP32[i9 >> 2] | 0) + (Math_imul(HEAP32[i14 >> 2] | 0, i6) | 0) + (i4 << 2) | 0;
     i5 = i5 + -65536 - (i17 & -65536) | 0;
    }
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    if (!i1) break; else {
     i3 = i3 + 4 | 0;
     i5 = i5 + i11 | 0;
    }
   }
   i1 = HEAP32[i15 >> 2] | 0;
  }
  i3 = i8 + (HEAP32[i13 >> 2] | 0) | 0;
  i2 = i1 + -1 | 0;
  HEAP32[i15 >> 2] = i2;
  if (!i1) break;
  i4 = i6;
  i5 = i7 + i16 | 0;
  i1 = HEAP32[i10 >> 2] | 0;
  i8 = i3;
 }
 HEAP32[i12 >> 2] = i3;
 return;
}

function _mbtowc(i1, i6, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i7;
 L1 : do if (!i6) i1 = 0; else {
  do if (i4 | 0) {
   i5 = (i1 | 0) == 0 ? i2 : i1;
   i1 = HEAP8[i6 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) {
    HEAP32[i5 >> 2] = i1 & 255;
    i1 = i1 << 24 >> 24 != 0 & 1;
    break L1;
   }
   i3 = (HEAP32[HEAP32[(___pthread_self_444() | 0) + 188 >> 2] >> 2] | 0) == 0;
   i1 = HEAP8[i6 >> 0] | 0;
   if (i3) {
    HEAP32[i5 >> 2] = i1 << 24 >> 24 & 57343;
    i1 = 1;
    break L1;
   }
   i1 = (i1 & 255) + -194 | 0;
   if (i1 >>> 0 <= 50) {
    i2 = i6 + 1 | 0;
    i3 = HEAP32[27140 + (i1 << 2) >> 2] | 0;
    if (i4 >>> 0 < 4) if (i3 & -2147483648 >>> ((i4 * 6 | 0) + -6 | 0) | 0) break;
    i1 = HEAPU8[i2 >> 0] | 0;
    i4 = i1 >>> 3;
    if ((i4 + -16 | i4 + (i3 >> 26)) >>> 0 <= 7) {
     i1 = i1 + -128 | i3 << 6;
     if ((i1 | 0) >= 0) {
      HEAP32[i5 >> 2] = i1;
      i1 = 2;
      break L1;
     }
     i2 = (HEAPU8[i6 + 2 >> 0] | 0) + -128 | 0;
     if (i2 >>> 0 <= 63) {
      i2 = i2 | i1 << 6;
      if ((i2 | 0) >= 0) {
       HEAP32[i5 >> 2] = i2;
       i1 = 3;
       break L1;
      }
      i1 = (HEAPU8[i6 + 3 >> 0] | 0) + -128 | 0;
      if (i1 >>> 0 <= 63) {
       HEAP32[i5 >> 2] = i1 | i2 << 6;
       i1 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 if (i1 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i7 = i8 + 11 | 0;
 i4 = HEAP8[i7 >> 0] | 0;
 i5 = i4 << 24 >> 24 < 0;
 if (i5) {
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i2 = (HEAP32[i8 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i9 = i4 & 255;
  i2 = 10;
 }
 i6 = i9 >>> 0 > i1 >>> 0 ? i9 : i1;
 i1 = i6 >>> 0 < 11;
 i6 = i1 ? 10 : (i6 + 16 & -16) + -1 | 0;
 do if ((i6 | 0) != (i2 | 0)) {
  do if (i1) {
   i1 = HEAP32[i8 >> 2] | 0;
   if (i5) {
    i4 = 0;
    i2 = i1;
    i3 = i8;
    i5 = 13;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj(i8, i1, (i4 & 255) + 1 | 0) | 0;
    __ZdlPv(i1);
    i5 = 16;
   }
  } else {
   i2 = i6 + 1 | 0;
   i3 = __Znwj(i2) | 0;
   if (i5) {
    i4 = 1;
    i2 = HEAP32[i8 >> 2] | 0;
    i5 = 13;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcj(i3, i8, (i4 & 255) + 1 | 0) | 0;
    i1 = i8 + 4 | 0;
    i5 = 15;
    break;
   }
  } while (0);
  if ((i5 | 0) == 13) {
   i1 = i8 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj(i3, i2, (HEAP32[i1 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv(i2);
   if (i4) {
    i2 = i6 + 1 | 0;
    i5 = 15;
   } else i5 = 16;
  }
  if ((i5 | 0) == 15) {
   HEAP32[i8 + 8 >> 2] = i2 | -2147483648;
   HEAP32[i1 >> 2] = i9;
   HEAP32[i8 >> 2] = i3;
   break;
  } else if ((i5 | 0) == 16) {
   HEAP8[i7 >> 0] = i9;
   break;
  }
 } while (0);
 return;
}

function ___mo_lookup(i12, i13, i10) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = (HEAP32[i12 >> 2] | 0) + 1794895138 | 0;
 i3 = _swapc(HEAP32[i12 + 8 >> 2] | 0, i11) | 0;
 i1 = _swapc(HEAP32[i12 + 12 >> 2] | 0, i11) | 0;
 i2 = _swapc(HEAP32[i12 + 16 >> 2] | 0, i11) | 0;
 L1 : do if (i3 >>> 0 < i13 >>> 2 >>> 0) {
  i9 = i13 - (i3 << 2) | 0;
  if (i1 >>> 0 < i9 >>> 0 & i2 >>> 0 < i9 >>> 0) if (!((i2 | i1) & 3)) {
   i9 = i1 >>> 2;
   i8 = i2 >>> 2;
   i7 = 0;
   while (1) {
    i5 = i3 >>> 1;
    i6 = i7 + i5 | 0;
    i4 = i6 << 1;
    i2 = i4 + i9 | 0;
    i1 = _swapc(HEAP32[i12 + (i2 << 2) >> 2] | 0, i11) | 0;
    i2 = _swapc(HEAP32[i12 + (i2 + 1 << 2) >> 2] | 0, i11) | 0;
    if (!(i2 >>> 0 < i13 >>> 0 & i1 >>> 0 < (i13 - i2 | 0) >>> 0)) {
     i1 = 0;
     break L1;
    }
    if (HEAP8[i12 + (i2 + i1) >> 0] | 0) {
     i1 = 0;
     break L1;
    }
    i1 = _strcmp(i10, i12 + i2 | 0) | 0;
    if (!i1) break;
    i1 = (i1 | 0) < 0;
    if ((i3 | 0) == 1) {
     i1 = 0;
     break L1;
    } else {
     i7 = i1 ? i7 : i6;
     i3 = i1 ? i5 : i3 - i5 | 0;
    }
   }
   i1 = i4 + i8 | 0;
   i2 = _swapc(HEAP32[i12 + (i1 << 2) >> 2] | 0, i11) | 0;
   i1 = _swapc(HEAP32[i12 + (i1 + 1 << 2) >> 2] | 0, i11) | 0;
   if (i1 >>> 0 < i13 >>> 0 & i2 >>> 0 < (i13 - i1 | 0) >>> 0) i1 = (HEAP8[i12 + (i1 + i2) >> 0] | 0) == 0 ? i12 + i1 | 0 : 0; else i1 = 0;
  } else i1 = 0; else i1 = 0;
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i8, i11, i12, i13) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i14 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i13) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i8, i11, i12); else {
  i14 = i2 + 52 | 0;
  i3 = HEAP8[i14 >> 0] | 0;
  i4 = i2 + 53 | 0;
  i5 = HEAP8[i4 >> 0] | 0;
  i10 = HEAP32[i1 + 12 >> 2] | 0;
  i6 = i1 + 16 + (i10 << 3) | 0;
  HEAP8[i14 >> 0] = 0;
  HEAP8[i4 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1 + 16 | 0, i2, i8, i11, i12, i13);
  L4 : do if ((i10 | 0) > 1) {
   i7 = i2 + 24 | 0;
   i9 = i1 + 8 | 0;
   i10 = i2 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    if (HEAP8[i10 >> 0] | 0) break L4;
    if (!(HEAP8[i14 >> 0] | 0)) {
     if (HEAP8[i4 >> 0] | 0) if (!(HEAP32[i9 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[i7 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[i9 >> 2] & 2)) break L4;
    }
    HEAP8[i14 >> 0] = 0;
    HEAP8[i4 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i8, i11, i12, i13);
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i6 >>> 0);
  } while (0);
  HEAP8[i14 >> 0] = i3;
  HEAP8[i4 >> 0] = i5;
 }
 return;
}

function __ZN15CanvasComponent4drawEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i5 + 16 | 0;
 i2 = i5;
 i1 = HEAP32[i4 + 80 >> 2] | 0;
 if (i1 | 0) {
  i1 = i1 + -1 + (HEAP32[i4 + 76 >> 2] | 0) | 0;
  i1 = HEAP32[(HEAP32[(HEAP32[i4 + 64 >> 2] | 0) + (i1 >>> 10 << 2) >> 2] | 0) + ((i1 & 1023) << 2) >> 2] | 0;
  i6 = i4 + 12 | 0;
  i4 = i4 + 28 | 0;
  HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i3 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i3 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i3 + 12 >> 2] = HEAP32[i4 + 12 >> 2];
  __ZN14TextureManager4DrawEP11SDL_Texture8SDL_RectS2_16SDL_RendererFlip(i1, i2, i3, 0);
  STACKTOP = i5;
  return;
 }
 i1 = HEAP32[i4 + 56 >> 2] | 0;
 if (!i1) {
  STACKTOP = i5;
  return;
 }
 i7 = i4 + 12 | 0;
 i6 = i4 + 28 | 0;
 HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 __ZN14TextureManager4DrawEP11SDL_Texture8SDL_RectS2_16SDL_RendererFlip(i1, i2, i3, 0);
 STACKTOP = i5;
 return;
}

function _atan(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i7 = _bitshift64Lshr(i2 | 0, i3 | 0, 63) | 0;
 i6 = i3 & 2147483647;
 if (i6 >>> 0 > 1141899263) {
  i6 = i3 & 2147483647;
  return +(i6 >>> 0 > 2146435072 | (i6 | 0) == 2146435072 & i2 >>> 0 > 0 ? d1 : i7 | 0 ? -1.5707963267948966 : 1.5707963267948966);
 }
 do if (i6 >>> 0 < 1071382528) if (i6 >>> 0 < 1044381696) {
  d5 = d1;
  return +d5;
 } else i2 = -1; else {
  d1 = +Math_abs(+d1);
  if (i6 >>> 0 < 1072889856) if (i6 >>> 0 < 1072037888) {
   i2 = 0;
   d1 = (d1 * 2.0 + -1.0) / (d1 + 2.0);
   break;
  } else {
   i2 = 1;
   d1 = (d1 + -1.0) / (d1 + 1.0);
   break;
  } else if (i6 >>> 0 < 1073971200) {
   i2 = 2;
   d1 = (d1 + -1.5) / (d1 * 1.5 + 1.0);
   break;
  } else {
   i2 = 3;
   d1 = -1.0 / d1;
   break;
  }
 } while (0);
 d4 = d1 * d1;
 d5 = d4 * d4;
 d4 = d4 * (d5 * (d5 * (d5 * (d5 * (d5 * .016285820115365782 + .049768779946159324) + .06661073137387531) + .09090887133436507) + .14285714272503466) + .3333333333333293);
 d5 = d5 * (d5 * (d5 * (d5 * (-.058335701337905735 - d5 * .036531572744216916) + -.0769187620504483) + -.11111110405462356) + -.19999999999876483);
 if ((i2 | 0) < 0) {
  d5 = d1 - d1 * (d5 + d4);
  return +d5;
 } else {
  d5 = +HEAPF64[1192 + (i2 << 3) >> 3] - (d1 * (d5 + d4) - +HEAPF64[1224 + (i2 << 3) >> 3] - d1);
  d5 = i7 | 0 ? -d5 : d5;
  return +d5;
 }
 return 0.0;
}

function _GLES2_RenderDrawPoints(i1, i2, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, f10 = f0, f11 = f0;
 i8 = STACKTOP;
 i3 = i1 + 320 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 if ((_GLES2_SetDrawingState(i1) | 0) < 0) {
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i4 = i6 << 3;
 i1 = i4;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
 if ((i6 | 0) > 0) {
  i1 = 0;
  do {
   i9 = i2 + (i1 << 3) | 0;
   f11 = Math_fround(Math_fround(HEAPF32[i9 >> 2]) + Math_fround(.5));
   f10 = Math_fround(Math_fround(HEAPF32[i9 + 4 >> 2]) + Math_fround(.5));
   i9 = i1 << 1;
   HEAPF32[i5 + (i9 << 2) >> 2] = f11;
   HEAPF32[i5 + ((i9 | 1) << 2) >> 2] = f10;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i6 | 0));
 }
 i3 = HEAP32[i3 >> 2] | 0;
 i2 = i3 + 276 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  FUNCTION_TABLE_vii[HEAP32[i3 + 216 >> 2] & 127](1, i2);
  i1 = HEAP32[i2 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[HEAP32[i3 + 220 >> 2] & 127](34962, i1);
 i1 = i3 + 292 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 < i4 >>> 0) {
  FUNCTION_TABLE_viiii[HEAP32[i3 + 224 >> 2] & 63](34962, i4, i5, 35040);
  HEAP32[i1 >> 2] = i4;
 } else FUNCTION_TABLE_viiii[HEAP32[i3 + 228 >> 2] & 63](34962, 0, i4, i5);
 FUNCTION_TABLE_viiiiii[HEAP32[i3 + 184 >> 2] & 15](0, 2, 5126, 0, 0, 0);
 FUNCTION_TABLE_viii[HEAP32[i7 + 76 >> 2] & 63](0, 0, i6);
 i9 = 0;
 STACKTOP = i8;
 return i9 | 0;
}

function _wcsnrtombs(i3, i11, i6, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(272);
 i7 = i10 + 8 | 0;
 i8 = i10;
 i5 = HEAP32[i11 >> 2] | 0;
 HEAP32[i8 >> 2] = i5;
 i9 = (i3 | 0) != 0;
 i4 = i9 ? i2 : 256;
 i3 = i9 ? i3 : i7;
 i2 = i5;
 L1 : do if ((i4 | 0) != 0 & (i5 | 0) != 0) {
  i1 = 0;
  i5 = i2;
  while (1) {
   i2 = i6 >>> 0 >= i4 >>> 0;
   if (!(i2 | i6 >>> 0 > 32)) {
    i2 = i5;
    break L1;
   }
   i2 = i2 ? i4 : i6;
   i6 = i6 - i2 | 0;
   i2 = _wcsrtombs(i3, i8, i2, 0) | 0;
   if ((i2 | 0) == -1) break;
   i5 = (i3 | 0) == (i7 | 0);
   i4 = i4 - (i5 ? 0 : i2) | 0;
   i3 = i5 ? i3 : i3 + i2 | 0;
   i1 = i2 + i1 | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   if ((i4 | 0) != 0 & (i2 | 0) != 0) i5 = i2; else break L1;
  }
  i1 = -1;
  i4 = 0;
  i2 = HEAP32[i8 >> 2] | 0;
 } else i1 = 0; while (0);
 L8 : do if (i2) if ((i4 | 0) != 0 & (i6 | 0) != 0) {
  i5 = i3;
  while (1) {
   i3 = _wcrtomb(i5, HEAP32[i2 >> 2] | 0, 0) | 0;
   if ((i3 + 1 | 0) >>> 0 < 2) break;
   i2 = (HEAP32[i8 >> 2] | 0) + 4 | 0;
   HEAP32[i8 >> 2] = i2;
   i6 = i6 + -1 | 0;
   i4 = i4 - i3 | 0;
   i1 = i3 + i1 | 0;
   if (!((i4 | 0) != 0 & (i6 | 0) != 0)) break L8; else i5 = i5 + i3 | 0;
  }
  if (!i3) HEAP32[i8 >> 2] = 0; else i1 = -1;
 } while (0);
 if (i9) HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(192);
 i10 = i1;
 i9 = i1 + 176 | 0;
 i6 = i1 + 156 | 0;
 i8 = i1 + 4 | 0;
 i11 = i1 + 152 | 0;
 HEAP8[i9 >> 0] = HEAP8[73368] | 0;
 HEAP8[i9 + 1 >> 0] = HEAP8[73369] | 0;
 HEAP8[i9 + 2 >> 0] = HEAP8[73370] | 0;
 HEAP8[i9 + 3 >> 0] = HEAP8[73371] | 0;
 HEAP8[i9 + 4 >> 0] = HEAP8[73372] | 0;
 HEAP8[i9 + 5 >> 0] = HEAP8[73373] | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i10 >> 2] = i5;
 i5 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i6, 20, i7, i9, i10) | 0;
 i9 = i6 + i5 | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i6, i9, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i10, i3);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 83652) | 0;
 __ZNSt3__26localeD2Ev(i10);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 31](i12, i6, i9, i8) | 0;
 i5 = i8 + (i5 << 2) | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i7 | 0) == (i9 | 0) ? i5 : i8 + (i7 - i6 << 2) | 0, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _SDL_DelTouch(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i9;
 i4 = HEAP32[20425] | 0;
 L1 : do if ((i4 | 0) > 0) {
  i5 = HEAP32[20426] | 0;
  i1 = 0;
  while (1) {
   i8 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
   if ((HEAP32[i8 >> 2] | 0) == (i2 | 0) ? (HEAP32[i8 + 4 >> 2] | 0) == (i3 | 0) : 0) {
    i8 = i1;
    break;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) {
    i8 = -1;
    break;
   }
  }
  i1 = 0;
  while (1) {
   i7 = HEAP32[i5 + (i1 << 2) >> 2] | 0;
   i10 = i7;
   if ((HEAP32[i10 >> 2] | 0) == (i2 | 0) ? (HEAP32[i10 + 4 >> 2] | 0) == (i3 | 0) : 0) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= (i4 | 0)) break L1;
  }
  if ((i1 | 0) > -1 & (i1 | 0) < (i4 | 0)) {
   if (!i7) {
    STACKTOP = i9;
    return;
   }
   i3 = i7 + 12 | 0;
   i4 = i7 + 16 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i3 >> 2] | 0) > 0) {
    i2 = 0;
    do {
     _SDL_free(HEAP32[i1 + (i2 << 2) >> 2] | 0);
     i2 = i2 + 1 | 0;
     i1 = HEAP32[i4 >> 2] | 0;
    } while ((i2 | 0) < (HEAP32[i3 >> 2] | 0));
   }
   _SDL_free(i1);
   _SDL_free(i7);
   i7 = (HEAP32[20425] | 0) + -1 | 0;
   HEAP32[20425] = i7;
   i10 = HEAP32[20426] | 0;
   HEAP32[i10 + (i8 << 2) >> 2] = HEAP32[i10 + (i7 << 2) >> 2];
   STACKTOP = i9;
   return;
  }
 } while (0);
 _SDL_SetError(50648, i6) | 0;
 STACKTOP = i9;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i10 = i1;
 i9 = i1 + 68 | 0;
 i6 = i1 + 48 | 0;
 i8 = i1 + 8 | 0;
 i11 = i1 + 4 | 0;
 HEAP8[i9 >> 0] = HEAP8[73368] | 0;
 HEAP8[i9 + 1 >> 0] = HEAP8[73369] | 0;
 HEAP8[i9 + 2 >> 0] = HEAP8[73370] | 0;
 HEAP8[i9 + 3 >> 0] = HEAP8[73371] | 0;
 HEAP8[i9 + 4 >> 0] = HEAP8[73372] | 0;
 HEAP8[i9 + 5 >> 0] = HEAP8[73373] | 0;
 i7 = __ZNSt3__26__clocEv() | 0;
 HEAP32[i10 >> 2] = i5;
 i5 = __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i6, 20, i7, i9, i10) | 0;
 i9 = i6 + i5 | 0;
 i7 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i6, i9, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i10, i3);
 i12 = __ZNKSt3__26locale9use_facetERNS0_2idE(i10, 83620) | 0;
 __ZNSt3__26localeD2Ev(i10);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 31](i12, i6, i9, i8) | 0;
 i5 = i8 + i5 | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i7 | 0) == (i9 | 0) ? i5 : i8 + (i7 - i6) | 0, i5, i3, i4) | 0;
 STACKTOP = i1;
 return i5 | 0;
}

function _SDL_GL_MakeCurrent(i2, i7) {
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i8 + 32 | 0;
 i5 = i8 + 24 | 0;
 i4 = i8 + 16 | 0;
 i3 = i8 + 8 | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i8) | 0;
  i1 = 0;
 } else i1 = _SDL_TLSGet(HEAP32[i1 + 660 >> 2] | 0) | 0;
 if ((i1 | 0) == (i2 | 0)) {
  i1 = HEAP32[19487] | 0;
  if (!i1) {
   _SDL_SetError(40203, i3) | 0;
   i1 = 0;
  } else i1 = _SDL_TLSGet(HEAP32[i1 + 664 >> 2] | 0) | 0;
  if ((i1 | 0) == (i7 | 0)) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 i1 = HEAP32[19487] | 0;
 do if (!i7) i2 = 0; else {
  if (!i1) {
   _SDL_SetError(40203, i4) | 0;
   i7 = -1;
   STACKTOP = i8;
   return i7 | 0;
  }
  if (i2 | 0) if ((HEAP32[i2 >> 2] | 0) == (i1 + 280 | 0)) {
   if (HEAP32[i2 + 48 >> 2] & 2 | 0) break;
   i7 = _SDL_SetError(40244, i6) | 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  _SDL_SetError(59973, i5) | 0;
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 i1 = FUNCTION_TABLE_iiii[HEAP32[i1 + 180 >> 2] & 63](i1, i2, i7) | 0;
 if (i1 | 0) {
  i7 = i1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i6 = HEAP32[19487] | 0;
 HEAP32[i6 + 652 >> 2] = i2;
 HEAP32[i6 + 656 >> 2] = i7;
 _SDL_TLSSet(HEAP32[i6 + 660 >> 2] | 0, i2, 0) | 0;
 _SDL_TLSSet(HEAP32[(HEAP32[19487] | 0) + 664 >> 2] | 0, i7, 0) | 0;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i8, i1, i3, i4, i5, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i6 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 i9 = HEAP8[i2 + 11 >> 0] | 0;
 i10 = i9 << 24 >> 24 < 0;
 i1 = i10 ? HEAP32[i2 >> 2] | 0 : i2;
 i2 = i1 + (i10 ? HEAP32[i2 + 4 >> 2] | 0 : i9 & 255) | 0;
 while (1) {
  if (i1 >>> 0 >= i2 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 }
 i1 = (HEAP8[i6 + 11 >> 0] | 0) < 0 ? HEAP32[i6 >> 2] | 0 : i6;
 i3 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i4, i5, i1) | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) == 3) break;
  HEAP32[i8 + (i2 << 2) >> 2] = 0;
  i2 = i2 + 1 | 0;
 }
 i2 = i1 + (_strlen(i3) | 0) | 0;
 while (1) {
  if (i1 >>> 0 >= i2 >>> 0) break;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i7;
 return;
}

function __ZN4Game6renderEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 _SDL_RenderClear(HEAP32[19464] | 0) | 0;
 i1 = HEAP32[19368] | 0;
 i4 = HEAP32[19369] | 0;
 if ((i1 | 0) != (i4 | 0)) do {
  i3 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i3 + 8 >> 2] | 0;
  i3 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i2 | 0) != (i3 | 0)) do {
   i5 = HEAP32[i2 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 511](i5);
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i4 | 0));
 i1 = HEAP32[19371] | 0;
 i4 = HEAP32[19372] | 0;
 if ((i1 | 0) != (i4 | 0)) do {
  i3 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i3 + 8 >> 2] | 0;
  i3 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i2 | 0) != (i3 | 0)) do {
   i5 = HEAP32[i2 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 511](i5);
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i4 | 0));
 i1 = HEAP32[19374] | 0;
 i4 = HEAP32[19375] | 0;
 if ((i1 | 0) == (i4 | 0)) {
  i5 = HEAP32[19464] | 0;
  _SDL_RenderPresent(i5);
  return;
 }
 do {
  i3 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i3 + 8 >> 2] | 0;
  i3 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i2 | 0) != (i3 | 0)) do {
   i5 = HEAP32[i2 >> 2] | 0;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i5 >> 2] | 0) + 8 >> 2] & 511](i5);
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i4 | 0));
 i5 = HEAP32[19464] | 0;
 _SDL_RenderPresent(i5);
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i8;
 i6 = i3 + 8 | 0;
 i7 = i3 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if ((HEAP32[i6 >> 2] | 0) - i1 >> 2 >>> 0 < i4 >>> 0) {
  i1 = (i1 - (HEAP32[i3 >> 2] | 0) >> 2) + i4 | 0;
  i2 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i3) | 0;
  if (i2 >>> 0 < i1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i3); else {
   i9 = HEAP32[i3 >> 2] | 0;
   i10 = (HEAP32[i6 >> 2] | 0) - i9 | 0;
   i6 = i10 >> 1;
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i5, i10 >> 2 >>> 0 < i2 >>> 1 >>> 0 ? (i6 >>> 0 < i1 >>> 0 ? i1 : i6) : i2, (HEAP32[i7 >> 2] | 0) - i9 >> 2, i3 + 16 | 0);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i5, i4);
   __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i3, i5);
   __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i5);
   break;
  }
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i3, i4); while (0);
 STACKTOP = i8;
 return;
}

function _png_free_jmpbuf(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(160);
 i9 = 4;
 i8 = _malloc(40) | 0;
 HEAP32[i8 >> 2] = 0;
 i5 = i11;
 if (!i4) {
  _free(i8 | 0);
  STACKTOP = i11;
  return;
 }
 i6 = i4 + 160 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i3 = i4 + 164 | 0;
 if (i7 | 0) if (!((i7 | 0) == (i4 | 0) | (HEAP32[i3 >> 2] | 0) == 0)) {
  i8 = _saveSetjmp(i5, 1, i8 | 0, i9 | 0) | 0;
  i9 = tempRet0;
  __THREW__ = 0;
  i2 = __THREW__;
  __THREW__ = 0;
  if ((i2 | 0) != 0 & (threwValue | 0) != 0) {
   i1 = _testSetjmp(HEAP32[i2 >> 2] | 0, i8 | 0, i9 | 0) | 0;
   if (!i1) _longjmp(i2 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else i1 = -1;
  if ((i1 | 0) == 1) i1 = tempRet0; else i1 = 0;
  while (1) {
   if (i1 | 0) break;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i3 >> 2] = 0;
   HEAP32[i4 + 156 >> 2] = 39;
   __THREW__ = 0;
   invoke_vii(58, i4 | 0, i7 | 0);
   i1 = __THREW__;
   __THREW__ = 0;
   if ((i1 | 0) != 0 & (threwValue | 0) != 0) {
    i2 = _testSetjmp(HEAP32[i1 >> 2] | 0, i8 | 0, i9 | 0) | 0;
    if (!i2) _longjmp(i1 | 0, threwValue | 0);
    tempRet0 = threwValue;
   } else i2 = -1;
   if ((i2 | 0) == 1) i1 = tempRet0; else {
    i10 = 8;
    break;
   }
  }
 }
 HEAP32[i3 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 + 156 >> 2] = 0;
 _free(i8 | 0);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i1 + 8 | 0;
 i13 = i1;
 i12 = i1 + 200 | 0;
 i7 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 20 | 0;
 i14 = i13;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 73376, 0, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i8;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 23, i14, i13, i8) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i12, i6, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i5, i6, i3, i4) | 0;
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i8 = i1 + 8 | 0;
 i13 = i1;
 i12 = i1 + 200 | 0;
 i7 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 20 | 0;
 i14 = i13;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 73376, 1, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i8;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 23, i14, i13, i8) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i12, i6, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i5, i6, i3, i4) | 0;
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i8 = i1 + 8 | 0;
 i13 = i1;
 i12 = i1 + 71 | 0;
 i7 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 20 | 0;
 i14 = i13;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 73376, 0, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i8;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 23, i14, i13, i8) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i12, i6, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i5, i6, i3, i4) | 0;
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96);
 i8 = i1 + 8 | 0;
 i13 = i1;
 i12 = i1 + 71 | 0;
 i7 = i1 + 28 | 0;
 i11 = i1 + 24 | 0;
 i10 = i1 + 16 | 0;
 i9 = i1 + 20 | 0;
 i14 = i13;
 HEAP32[i14 >> 2] = 37;
 HEAP32[i14 + 4 >> 2] = 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 73376, 1, HEAP32[i3 + 4 >> 2] | 0);
 i14 = __ZNSt3__26__clocEv() | 0;
 i15 = i8;
 HEAP32[i15 >> 2] = i5;
 HEAP32[i15 + 4 >> 2] = i6;
 i5 = i12 + (__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i12, 23, i14, i13, i8) | 0) | 0;
 i6 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i12, i5, i3) | 0;
 __ZNKSt3__28ios_base6getlocEv(i8, i3);
 __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i12, i6, i5, i7, i11, i10, i8);
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i6 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i5, i6, i3, i4) | 0;
 STACKTOP = i1;
 return i6 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i5, i6, i1, i2, i10, i11, i12, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i4 = i4 | 0;
 var i3 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i13 = i14;
 if ((1073741806 - i6 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i5);
 i7 = i5 + 8 | 0;
 if ((HEAP8[i7 + 3 >> 0] | 0) < 0) i9 = HEAP32[i5 >> 2] | 0; else i9 = i5;
 if (i6 >>> 0 < 536870887) {
  i1 = i1 + i6 | 0;
  i3 = i6 << 1;
  i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  i1 = i1 >>> 0 < 2 ? 2 : i1 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else i8 = i1;
 } else i8 = 1073741807;
 i3 = __Znwj(i8 << 2) | 0;
 if (i10 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i3, i9, i10) | 0;
 if (i12 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i3 + (i10 << 2) | 0, i4, i12) | 0;
 i1 = i2 - i11 | 0;
 i2 = i1 - i10 | 0;
 if (i2 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i3 + (i10 << 2) + (i12 << 2) | 0, i9 + (i10 << 2) + (i11 << 2) | 0, i2) | 0;
 if ((i6 | 0) != 1) __ZdlPv(i9);
 HEAP32[i5 >> 2] = i3;
 HEAP32[i7 >> 2] = i8 | -2147483648;
 i12 = i1 + i12 | 0;
 HEAP32[i5 + 4 >> 2] = i12;
 HEAP32[i13 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i3 + (i12 << 2) | 0, i13);
 STACKTOP = i14;
 return;
}

function _uncopy_transl_16(i6, i4, i20, i1, i2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0;
 if ((i20 | 0) <= 0) {
  i23 = i20 << 2;
  return i23 | 0;
 }
 i23 = i1 + 4 | 0;
 i18 = i1 + 8 | 0;
 i19 = i1 + 12 | 0;
 i15 = HEAP32[5724 + ((HEAPU8[i1 + 20 >> 0] | 0) << 2) >> 2] | 0;
 i16 = HEAP32[5724 + ((HEAPU8[i1 + 21 >> 0] | 0) << 2) >> 2] | 0;
 i17 = HEAP32[5724 + ((HEAPU8[i1 + 22 >> 0] | 0) << 2) >> 2] | 0;
 i21 = HEAPU8[i1 + 24 >> 0] | 0;
 i22 = HEAPU8[i1 + 25 >> 0] | 0;
 i7 = HEAPU8[i1 + 26 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i13 = HEAPU8[i2 + 34 >> 0] | 0;
 i14 = HEAPU8[i2 + 31 >> 0] | 0;
 i5 = HEAPU8[i2 + 35 >> 0] | 0;
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i6 = HEAP32[i2 >> 2] | 0;
  i4 = i6 & -993 | i6 >>> 16;
  HEAP32[i1 >> 2] = (HEAPU8[i16 + ((HEAP32[i18 >> 2] & i4) >>> i22) >> 0] | 0) >>> i10 << i11 | (HEAPU8[i15 + ((HEAP32[i23 >> 2] & i4) >>> i21) >> 0] | 0) >>> i8 << i9 | (HEAPU8[i17 + ((HEAP32[i19 >> 2] & i4) >>> i7) >> 0] | 0) >>> i12 << i13 | (i6 >>> 2 & 248) >>> i14 << i5;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i20 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i23 = i20 << 2;
 return i23 | 0;
}

function _SDL_QuitSubSystem(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (i1 & 8192) {
  i1 = i1 | 512;
  i2 = HEAP8[87619] | 0;
  if (!(i2 << 24 >> 24 == 0 | (i2 << 24 >> 24 == 1 | 0) == 0)) {
   _SDL_GameControllerQuit();
   i2 = HEAP8[87619] | 0;
  }
  if (i2 << 24 >> 24) HEAP8[87619] = i2 + -1 << 24 >> 24;
 }
 if (i1 & 512) {
  i1 = i1 | 16384;
  i2 = HEAP8[87615] | 0;
  if (!(i2 << 24 >> 24 == 0 | (i2 << 24 >> 24 == 1 | 0) == 0)) {
   _SDL_JoystickQuit();
   i2 = HEAP8[87615] | 0;
  }
  if (i2 << 24 >> 24) HEAP8[87615] = i2 + -1 << 24 >> 24;
 }
 if (i1 & 16 | 0) {
  i2 = HEAP8[87610] | 0;
  if (!(i2 << 24 >> 24 == 0 | (i2 << 24 >> 24 == 1 | 0) == 0)) {
   _SDL_AudioQuit();
   i2 = HEAP8[87610] | 0;
  }
  if (i2 << 24 >> 24) HEAP8[87610] = i2 + -1 << 24 >> 24;
 }
 if (i1 & 32) {
  i1 = i1 | 16384;
  i2 = HEAP8[87611] | 0;
  if (!(i2 << 24 >> 24 == 0 | (i2 << 24 >> 24 == 1 | 0) == 0)) {
   _SDL_VideoQuit();
   i2 = HEAP8[87611] | 0;
  }
  if (i2 << 24 >> 24) HEAP8[87611] = i2 + -1 << 24 >> 24;
 }
 if (i1 & 1 | 0) {
  i2 = HEAP8[87606] | 0;
  if (!(i2 << 24 >> 24 == 0 | (i2 << 24 >> 24 == 1 | 0) == 0)) i2 = HEAP8[87606] | 0;
  if (i2 << 24 >> 24) HEAP8[87606] = i2 + -1 << 24 >> 24;
 }
 if (!(i1 & 16384)) return;
 i1 = HEAP8[87620] | 0;
 if (!(i1 << 24 >> 24 == 0 | (i1 << 24 >> 24 == 1 | 0) == 0)) {
  _SDL_QuitQuit();
  _SDL_StopEventLoop();
  i1 = HEAP8[87620] | 0;
 }
 if (!(i1 << 24 >> 24)) return;
 HEAP8[87620] = i1 + -1 << 24 >> 24;
 return;
}

function _uncopy_opaque_16(i6, i4, i20, i1, i2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0;
 if ((i20 | 0) <= 0) {
  i22 = i20 << 1;
  return i22 | 0;
 }
 i17 = i1 + 4 | 0;
 i18 = i1 + 8 | 0;
 i19 = i1 + 12 | 0;
 i14 = HEAP32[5724 + ((HEAPU8[i1 + 20 >> 0] | 0) << 2) >> 2] | 0;
 i15 = HEAP32[5724 + ((HEAPU8[i1 + 21 >> 0] | 0) << 2) >> 2] | 0;
 i16 = HEAP32[5724 + ((HEAPU8[i1 + 22 >> 0] | 0) << 2) >> 2] | 0;
 i21 = HEAPU8[i1 + 24 >> 0] | 0;
 i22 = HEAPU8[i1 + 25 >> 0] | 0;
 i7 = HEAPU8[i1 + 26 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i13 = HEAPU8[i2 + 34 >> 0] | 0;
 i5 = (HEAP32[i2 + 24 >> 2] | 0 ? 255 : 0) >>> (HEAPU8[i2 + 31 >> 0] | 0) << (HEAPU8[i2 + 35 >> 0] | 0);
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i6 = HEAPU16[i2 >> 1] | 0;
  HEAP32[i1 >> 2] = (HEAPU8[i15 + ((HEAP32[i18 >> 2] & i6) >>> i22) >> 0] | 0) >>> i10 << i11 | (HEAPU8[i14 + ((HEAP32[i17 >> 2] & i6) >>> i21) >> 0] | 0) >>> i8 << i9 | (HEAPU8[i16 + ((HEAP32[i19 >> 2] & i6) >>> i7) >> 0] | 0) >>> i12 << i13 | i5;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i20 | 0)) break; else {
   i2 = i2 + 2 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i22 = i20 << 1;
 return i22 | 0;
}

function _SDL_StopEventLoop() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i1 = _SDL_GetHint(60201) | 0;
 _SDL_AtomicSet(15136, 0) | 0;
 if (i1 | 0) if (_SDL_atoi(i1) | 0) {
  HEAP32[i2 >> 2] = HEAP32[3786];
  _SDL_Log(60228, i2);
 }
 i1 = HEAP32[3787] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[3789] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[3790] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[3791] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 12 >> 2] | 0;
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 _SDL_AtomicSet(15140, 0) | 0;
 HEAP32[3786] = 0;
 HEAP32[3787] = 0;
 HEAP32[3788] = 0;
 HEAP32[3789] = 0;
 HEAP32[3790] = 0;
 HEAP32[3791] = 0;
 i1 = 0;
 do {
  i2 = 78080 + (i1 << 2) | 0;
  _SDL_free(HEAP32[i2 >> 2] | 0);
  HEAP32[i2 >> 2] = 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 256);
 i1 = HEAP32[19776] | 0;
 if (i1 | 0) do {
  HEAP32[19776] = HEAP32[i1 + 8 >> 2];
  _SDL_free(i1);
  i1 = HEAP32[19776] | 0;
 } while ((i1 | 0) != 0);
 if (!(HEAP32[3783] | 0)) {
  STACKTOP = i3;
  return;
 }
 _SDL_DestroyMutex(HEAP32[3783] | 0);
 HEAP32[3783] = 0;
 STACKTOP = i3;
 return;
}

function _Color32DitherYUY2Mod1X(i13, i14, i5, i2, i3, i4, i10, i1, i15) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i16 = (i1 | 0) / 2 | 0;
 if ((i10 | 0) == 0 | (i1 + 1 | 0) >>> 0 < 3) return;
 i11 = i16 << 2;
 i12 = i16 << 1;
 while (1) {
  i10 = i10 + -1 | 0;
  i6 = i2;
  i2 = i2 + i11 | 0;
  i1 = i16;
  i7 = i3;
  i8 = i4;
  i9 = i5;
  i5 = i5 + i11 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i20 = HEAPU8[i6 >> 0] | 0;
   i19 = (HEAP32[i13 + (i20 << 2) >> 2] | 0) + 256 | 0;
   i18 = HEAPU8[i7 >> 0] | 0;
   i20 = (HEAP32[i13 + ((i20 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i13 + ((i18 | 512) << 2) >> 2] | 0) | 0;
   i18 = (HEAP32[i13 + ((i18 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i17 = HEAPU8[i9 >> 0] | 0;
   HEAP32[i8 >> 2] = HEAP32[i14 + (i20 + i17 << 2) >> 2] | HEAP32[i14 + (i19 + i17 << 2) >> 2] | HEAP32[i14 + (i18 + i17 << 2) >> 2];
   i17 = HEAPU8[i9 + 2 >> 0] | 0;
   HEAP32[i8 + 4 >> 2] = HEAP32[i14 + (i20 + i17 << 2) >> 2] | HEAP32[i14 + (i19 + i17 << 2) >> 2] | HEAP32[i14 + (i18 + i17 << 2) >> 2];
   if (!i1) break; else {
    i6 = i6 + 4 | 0;
    i7 = i7 + 4 | 0;
    i8 = i8 + 8 | 0;
    i9 = i9 + 4 | 0;
   }
  }
  if (!i10) break; else {
   i3 = i3 + i11 | 0;
   i4 = i4 + (i12 << 2) + (i15 << 2) | 0;
  }
 }
 return;
}

function _Color16DitherYUY2Mod1X(i13, i14, i5, i2, i3, i4, i10, i1, i15) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i12 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 i16 = (i1 | 0) / 2 | 0;
 if ((i10 | 0) == 0 | (i1 + 1 | 0) >>> 0 < 3) return;
 i11 = i16 << 2;
 i12 = i16 << 1;
 while (1) {
  i10 = i10 + -1 | 0;
  i6 = i2;
  i2 = i2 + i11 | 0;
  i1 = i16;
  i7 = i3;
  i8 = i4;
  i9 = i5;
  i5 = i5 + i11 | 0;
  while (1) {
   i1 = i1 + -1 | 0;
   i20 = HEAPU8[i6 >> 0] | 0;
   i19 = (HEAP32[i13 + (i20 << 2) >> 2] | 0) + 256 | 0;
   i18 = HEAPU8[i7 >> 0] | 0;
   i20 = (HEAP32[i13 + ((i20 | 256) << 2) >> 2] | 0) + 1024 + (HEAP32[i13 + ((i18 | 512) << 2) >> 2] | 0) | 0;
   i18 = (HEAP32[i13 + ((i18 | 768) << 2) >> 2] | 0) + 1792 | 0;
   i17 = HEAPU8[i9 >> 0] | 0;
   HEAP16[i8 >> 1] = HEAP32[i14 + (i20 + i17 << 2) >> 2] | HEAP32[i14 + (i19 + i17 << 2) >> 2] | HEAP32[i14 + (i18 + i17 << 2) >> 2];
   i17 = HEAPU8[i9 + 2 >> 0] | 0;
   HEAP16[i8 + 2 >> 1] = HEAP32[i14 + (i20 + i17 << 2) >> 2] | HEAP32[i14 + (i19 + i17 << 2) >> 2] | HEAP32[i14 + (i18 + i17 << 2) >> 2];
   if (!i1) break; else {
    i6 = i6 + 4 | 0;
    i7 = i7 + 4 | 0;
    i8 = i8 + 4 | 0;
    i9 = i9 + 4 | 0;
   }
  }
  if (!i10) break; else {
   i3 = i3 + i11 | 0;
   i4 = i4 + (i12 << 1) + (i15 << 1) | 0;
  }
 }
 return;
}

function __ZN6Entity12addComponentI15SpriteComponentJRA14_KcbEEERT_DpOT0_(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 i6 = __Znwj(88) | 0;
 __ZN15SpriteComponentC2EPKcb(i6, i1, (HEAP8[i2 >> 0] | 0) != 0);
 HEAP32[i6 + 4 >> 2] = i4;
 i2 = i6;
 HEAP32[i5 >> 2] = i2;
 i3 = i4 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 >>> 0 < (HEAP32[i4 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i1 >> 2] = i2;
  HEAP32[i3 >> 2] = i1 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i4 + 8 | 0, i5);
 if (!(HEAP8[75984] | 0)) if (___cxa_guard_acquire(75984) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19479] = i3;
 }
 HEAP32[i4 + 20 + (HEAP32[19479] << 2) >> 2] = i6;
 if (!(HEAP8[75984] | 0)) if (___cxa_guard_acquire(75984) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19479] = i3;
 }
 i1 = i4 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19479];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i7;
 return i6 | 0;
}

function _uncopy_32(i6, i4, i20, i1, i2) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0;
 if ((i20 | 0) <= 0) {
  i23 = i20 << 2;
  return i23 | 0;
 }
 i23 = i1 + 4 | 0;
 i18 = i1 + 8 | 0;
 i19 = i1 + 12 | 0;
 i15 = HEAP32[5724 + ((HEAPU8[i1 + 20 >> 0] | 0) << 2) >> 2] | 0;
 i16 = HEAP32[5724 + ((HEAPU8[i1 + 21 >> 0] | 0) << 2) >> 2] | 0;
 i17 = HEAP32[5724 + ((HEAPU8[i1 + 22 >> 0] | 0) << 2) >> 2] | 0;
 i21 = HEAPU8[i1 + 24 >> 0] | 0;
 i22 = HEAPU8[i1 + 25 >> 0] | 0;
 i7 = HEAPU8[i1 + 26 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i13 = HEAPU8[i2 + 34 >> 0] | 0;
 i14 = HEAPU8[i2 + 31 >> 0] | 0;
 i5 = HEAPU8[i2 + 35 >> 0] | 0;
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i6 = HEAP32[i2 >> 2] | 0;
  HEAP32[i1 >> 2] = (HEAPU8[i16 + ((HEAP32[i18 >> 2] & i6) >>> i22) >> 0] | 0) >>> i10 << i11 | (HEAPU8[i15 + ((HEAP32[i23 >> 2] & i6) >>> i21) >> 0] | 0) >>> i8 << i9 | (HEAPU8[i17 + ((HEAP32[i19 >> 2] & i6) >>> i7) >> 0] | 0) >>> i12 << i13 | i6 >>> 24 >>> i14 << i5;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i20 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i23 = i20 << 2;
 return i23 | 0;
}

function _SDL_AudioQuit() {
 var i1 = 0, i2 = 0, i3 = 0;
 if (!(HEAP32[20430] | 0)) return;
 _close_audio_device(HEAP32[20469] | 0);
 _close_audio_device(HEAP32[20470] | 0);
 _close_audio_device(HEAP32[20471] | 0);
 _close_audio_device(HEAP32[20472] | 0);
 _close_audio_device(HEAP32[20473] | 0);
 _close_audio_device(HEAP32[20474] | 0);
 _close_audio_device(HEAP32[20475] | 0);
 _close_audio_device(HEAP32[20476] | 0);
 _close_audio_device(HEAP32[20477] | 0);
 _close_audio_device(HEAP32[20478] | 0);
 _close_audio_device(HEAP32[20479] | 0);
 _close_audio_device(HEAP32[20480] | 0);
 _close_audio_device(HEAP32[20481] | 0);
 _close_audio_device(HEAP32[20482] | 0);
 _close_audio_device(HEAP32[20483] | 0);
 _close_audio_device(HEAP32[20484] | 0);
 i1 = HEAP32[20458] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vi[HEAP32[81780 >> 2] & 511](i3);
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 HEAP32[20458] = 0;
 HEAP32[20456] = 0;
 i1 = HEAP32[20459] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3 | 0) FUNCTION_TABLE_vi[HEAP32[81780 >> 2] & 511](i3);
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 HEAP32[20459] = 0;
 HEAP32[20457] = 0;
 FUNCTION_TABLE_v[HEAP32[81784 >> 2] & 15]();
 _SDL_DestroyMutex(HEAP32[20453] | 0);
 _SDL_memset(81720, 0, 120) | 0;
 _SDL_memset(81876, 0, 64) | 0;
 return;
}

function _SDL_DrawPoint(i3, i4, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i8 + 8 | 0;
 L1 : do if (!i3) i1 = _SDL_SetError(48302, i8) | 0; else {
  i7 = HEAP32[i3 + 4 >> 2] | 0;
  if ((HEAPU8[i7 + 8 >> 0] | 0) < 8) {
   i1 = _SDL_SetError(48334, i1) | 0;
   break;
  }
  i1 = HEAP32[i3 + 36 >> 2] | 0;
  if ((i1 | 0) > (i4 | 0)) i1 = 0; else {
   i2 = HEAP32[i3 + 40 >> 2] | 0;
   if ((i2 | 0) > (i5 | 0)) i1 = 0; else if (((HEAP32[i3 + 44 >> 2] | 0) + i1 | 0) > (i4 | 0)) if (((HEAP32[i3 + 48 >> 2] | 0) + i2 | 0) > (i5 | 0)) switch (HEAP8[i7 + 9 >> 0] | 0) {
   case 1:
    {
     HEAP8[(HEAP32[i3 + 20 >> 2] | 0) + (Math_imul(HEAP32[i3 + 16 >> 2] | 0, i5) | 0) + i4 >> 0] = i6;
     i1 = 0;
     break L1;
    }
   case 2:
    {
     HEAP16[(HEAP32[i3 + 20 >> 2] | 0) + (Math_imul(HEAP32[i3 + 16 >> 2] | 0, i5) | 0) + (i4 << 1) >> 1] = i6;
     i1 = 0;
     break L1;
    }
   case 3:
    {
     i1 = _SDL_Error(4) | 0;
     break L1;
    }
   case 4:
    {
     HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + (Math_imul(HEAP32[i3 + 16 >> 2] | 0, i5) | 0) + (i4 << 2) >> 2] = i6;
     i1 = 0;
     break L1;
    }
   default:
    {
     i1 = 0;
     break L1;
    }
   } else i1 = 0; else i1 = 0;
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _BlitBto1(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 i6 = HEAP32[i1 + 28 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 i9 = HEAP32[i1 + 36 >> 2] | 0;
 i7 = HEAP32[i1 + 48 >> 2] | 0;
 i8 = (HEAP32[i1 + 16 >> 2] | 0) + (i10 - ((i10 + 7 | 0) / 8 | 0)) | 0;
 i4 = i6 + -1 | 0;
 i1 = (i6 | 0) != 0 & (i10 | 0) > 0;
 if (!i7) {
  if (i1) i6 = i4; else return;
  while (1) {
   i1 = 0;
   i4 = 0;
   i5 = i3;
   while (1) {
    if (!(i4 & 7)) {
     i1 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    }
    HEAP8[i5 >> 0] = (i1 & 255) >>> 7;
    i4 = i4 + 1 | 0;
    if ((i4 | 0) == (i10 | 0)) break; else {
     i1 = (i1 & 255) << 1 & 255;
     i5 = i5 + 1 | 0;
    }
   }
   if (!i6) break; else {
    i3 = i3 + i10 + i9 | 0;
    i2 = i2 + i8 | 0;
    i6 = i6 + -1 | 0;
   }
  }
  return;
 } else {
  if (i1) i6 = i4; else return;
  while (1) {
   i1 = 0;
   i5 = 0;
   i4 = i3;
   while (1) {
    if (!(i5 & 7)) {
     i1 = HEAP8[i2 >> 0] | 0;
     i2 = i2 + 1 | 0;
    }
    HEAP8[i4 >> 0] = HEAP8[i7 + ((i1 & 255) >>> 7 & 255) >> 0] | 0;
    i5 = i5 + 1 | 0;
    if ((i5 | 0) == (i10 | 0)) break; else {
     i1 = (i1 & 255) << 1 & 255;
     i4 = i4 + 1 | 0;
    }
   }
   if (!i6) break; else {
    i2 = i2 + i8 | 0;
    i3 = i3 + i10 + i9 | 0;
    i6 = i6 + -1 | 0;
   }
  }
  return;
 }
}

function _DISKAUDIO_OpenDevice(i6, i1, i2, i3) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i8;
 i1 = i1 | 0 ? 0 : i2;
 i5 = (i3 | 0) != 0;
 if (!i1) {
  i1 = _SDL_getenv(i5 ? 57765 : 57785) | 0;
  i1 = (i1 | 0) == 0 ? (i5 ? 57736 : 57752) : i1;
 }
 i2 = _SDL_getenv(57803) | 0;
 i3 = _SDL_malloc(12) | 0;
 i4 = i6 + 180 | 0;
 HEAP32[i4 >> 2] = i3;
 if (!i3) {
  i7 = _SDL_Error(0) | 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 _SDL_memset(i3, 0, 12) | 0;
 if (!i2) i2 = ((HEAPU16[i6 + 12 >> 1] | 0) * 1e3 | 0) / (HEAP32[i6 + 4 >> 2] | 0) | 0; else i2 = _SDL_atoi(i2) | 0;
 HEAP32[(HEAP32[i4 >> 2] | 0) + 4 >> 2] = i2;
 i3 = _SDL_RWFromFile(i1, i5 ? 57822 : 57825) | 0;
 HEAP32[HEAP32[i4 >> 2] >> 2] = i3;
 if (!i3) {
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 do if (!i5) {
  i2 = i6 + 16 | 0;
  i3 = _SDL_malloc(HEAP32[i2 >> 2] | 0) | 0;
  HEAP32[(HEAP32[i4 >> 2] | 0) + 8 >> 2] = i3;
  if (i3 | 0) {
   _SDL_memset(i3, HEAPU8[i6 + 11 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0;
   break;
  }
  i7 = _SDL_Error(0) | 0;
  STACKTOP = i8;
  return i7 | 0;
 } while (0);
 i6 = HEAP32[6836] | 0;
 HEAP32[i7 >> 2] = i5 ? 57828 : 57841;
 HEAP32[i7 + 4 >> 2] = i1;
 _fprintf(i6, 57852, i7) | 0;
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function _SDL_GetRGBA(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0;
 i7 = i2 + 4 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (!i8) {
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 12 >> 2] & i1) >>> (HEAPU8[i2 + 32 >> 0] | 0)) >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i1) >>> (HEAPU8[i2 + 33 >> 0] | 0)) >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i1) >>> (HEAPU8[i2 + 34 >> 0] | 0)) >> 0] | 0;
  HEAP8[i6 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 31 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 24 >> 2] & i1) >>> (HEAPU8[i2 + 35 >> 0] | 0)) >> 0] | 0;
  return;
 }
 if ((HEAP32[i8 >> 2] | 0) >>> 0 > i1 >>> 0) {
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[i8 + 4 >> 2] | 0) + (i1 << 2) >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + (i1 << 2) + 1 >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + (i1 << 2) + 2 >> 0] | 0;
  HEAP8[i6 >> 0] = HEAP8[(HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] | 0) + (i1 << 2) + 3 >> 0] | 0;
  return;
 } else {
  HEAP8[i6 >> 0] = 0;
  HEAP8[i5 >> 0] = 0;
  HEAP8[i4 >> 0] = 0;
  HEAP8[i3 >> 0] = 0;
  return;
 }
}

function _png_destroy_read_struct(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if (!i1) return;
 i4 = HEAP32[i1 >> 2] | 0;
 if (!i4) return;
 _png_destroy_info_struct(i4, i3);
 _png_destroy_info_struct(i4, i2);
 HEAP32[i1 >> 2] = 0;
 _png_destroy_gamma_table(i4);
 i3 = i4 + 728 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 804 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 788 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 612 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 616 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 676 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 & 4096) {
  i1 = i4 + 416 | 0;
  _png_zfree(i4, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 i2 = i1 & -4097;
 HEAP32[i3 >> 2] = i2;
 if (!(i1 & 8192)) i1 = i2; else {
  i1 = i4 + 528 | 0;
  _png_free(i4, HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1 & -8193;
 _inflateEnd(i4 + 224 | 0) | 0;
 i3 = i4 + 568 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 772 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 i3 = i4 + 696 | 0;
 _png_free(i4, HEAP32[i3 >> 2] | 0);
 HEAP32[i3 >> 2] = 0;
 _png_destroy_png_struct(i4);
 return;
}

function __ZN7Manager9addEntityEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i7;
 i6 = __Znwj(156) | 0;
 HEAP32[i6 >> 2] = i2;
 HEAP8[i6 + 4 >> 0] = 1;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 HEAP32[i6 + 148 >> 2] = 0;
 HEAP32[i6 + 152 >> 2] = 0;
 i5 = i6;
 HEAP32[i1 >> 2] = i5;
 i3 = i2 + 4 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 >>> 0 < (HEAP32[i2 + 8 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = 0;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i3 >> 2] = i4 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI6EntityNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i2, i1);
 i5 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = 0;
 if (!i5) {
  STACKTOP = i7;
  return i6 | 0;
 }
 i3 = i5 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 | 0) {
  i4 = i5 + 12 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i8 = i2 + -4 | 0;
    HEAP32[i4 >> 2] = i8;
    i2 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = 0;
    if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 511](i2);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 __ZdlPv(i5);
 STACKTOP = i7;
 return i6 | 0;
}

function _png_set_tRNS(i3, i4, i1, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0;
 if ((i3 | 0) == 0 | (i4 | 0) == 0) return;
 if (i1 | 0) {
  _png_free_data(i3, i4, 8192, 0);
  i2 = _png_malloc(i3, 256) | 0;
  HEAP32[i4 + 156 >> 2] = i2;
  HEAP32[i3 + 528 >> 2] = i2;
  if ((i5 + -1 | 0) >>> 0 < 256) _memcpy(i2 | 0, i1 | 0, i5 | 0) | 0;
 }
 if (!i6) {
  HEAP16[i4 + 22 >> 1] = i5;
  if (!i5) return;
 } else {
  i1 = HEAP8[i4 + 24 >> 0] | 0;
  L12 : do if ((i1 & 255) < 16) {
   i1 = 1 << (i1 & 255);
   switch (HEAP8[i4 + 25 >> 0] | 0) {
   case 0:
    {
     if ((i1 | 0) > (HEAPU16[i6 + 8 >> 1] | 0)) break L12;
     break;
    }
   case 2:
    {
     if ((i1 | 0) > (HEAPU16[i6 + 2 >> 1] | 0)) if ((i1 | 0) > (HEAPU16[i6 + 4 >> 1] | 0)) if ((i1 | 0) > (HEAPU16[i6 + 6 >> 1] | 0)) break L12;
     break;
    }
   default:
    break L12;
   }
   _png_warning(i3, 64658);
  } while (0);
  i3 = i4 + 160 | 0;
  HEAP16[i3 >> 1] = HEAP16[i6 >> 1] | 0;
  HEAP16[i3 + 2 >> 1] = HEAP16[i6 + 2 >> 1] | 0;
  HEAP16[i3 + 4 >> 1] = HEAP16[i6 + 4 >> 1] | 0;
  HEAP16[i3 + 6 >> 1] = HEAP16[i6 + 6 >> 1] | 0;
  HEAP16[i3 + 8 >> 1] = HEAP16[i6 + 8 >> 1] | 0;
  HEAP16[i4 + 22 >> 1] = (i5 | 0) == 0 ? 1 : i5 & 65535;
 }
 i6 = i4 + 8 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 16;
 i6 = i4 + 232 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 8192;
 return;
}

function _png_destroy_gamma_table(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = i5 + 492 | 0;
 _png_free(i5, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i5 + 496 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 | 0) {
  i2 = 8 - (HEAP32[i5 + 484 >> 2] | 0) | 0;
  i3 = 1 << i2;
  if ((i2 | 0) != 31) {
   i2 = 0;
   do {
    _png_free(i5, HEAP32[i1 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) < (i3 | 0));
  }
  _png_free(i5, i1);
  HEAP32[i4 >> 2] = 0;
 }
 i4 = i5 + 500 | 0;
 _png_free(i5, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i5 + 504 | 0;
 _png_free(i5, HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 i4 = i5 + 508 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 | 0) {
  i2 = 8 - (HEAP32[i5 + 484 >> 2] | 0) | 0;
  i3 = 1 << i2;
  if ((i2 | 0) != 31) {
   i2 = 0;
   do {
    _png_free(i5, HEAP32[i1 + (i2 << 2) >> 2] | 0);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) < (i3 | 0));
  }
  _png_free(i5, i1);
  HEAP32[i4 >> 2] = 0;
 }
 i4 = i5 + 512 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) return;
 i2 = 8 - (HEAP32[i5 + 484 >> 2] | 0) | 0;
 i3 = 1 << i2;
 if ((i2 | 0) != 31) {
  i2 = 0;
  do {
   _png_free(i5, HEAP32[i1 + (i2 << 2) >> 2] | 0);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
  } while ((i2 | 0) < (i3 | 0));
 }
 _png_free(i5, i1);
 HEAP32[i4 >> 2] = 0;
 return;
}

function __ZN6Entity12addComponentI18TransformComponentJEEERT_DpOT0_(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 i6 = __Znwj(60) | 0;
 __ZN18TransformComponentC2Ev(i6);
 HEAP32[i6 + 4 >> 2] = i1;
 i2 = i6;
 HEAP32[i5 >> 2] = i2;
 i3 = i1 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if (i4 >>> 0 < (HEAP32[i1 + 16 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i3 >> 2] = i4 + 4;
 } else __ZNSt3__26vectorINS_10unique_ptrI9ComponentNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE24__emplace_back_slow_pathIJS5_EEEvDpOT_(i1 + 8 | 0, i5);
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19476] = i4;
 }
 HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2] = i6;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19476] = i4;
 }
 i1 = i1 + 148 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1 << HEAP32[19476];
 FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 511](i6);
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 if (!i1) {
  STACKTOP = i7;
  return i6 | 0;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 511](i1);
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_itoa(i1, i6, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((i1 | 0) < 0) {
  i5 = i6 + 1 | 0;
  HEAP8[i6 >> 0] = 45;
  i1 = 0 - i1 | 0;
  i2 = i5;
  while (1) {
   i3 = i2;
   i2 = i2 + 1 | 0;
   HEAP8[i3 >> 0] = HEAP8[52005 + ((i1 >>> 0) % (i4 >>> 0) | 0) >> 0] | 0;
   if (i1 >>> 0 < i4 >>> 0) break; else i1 = (i1 >>> 0) / (i4 >>> 0) | 0;
  }
  HEAP8[i2 >> 0] = 0;
  i2 = _strlen(i5) | 0;
  i1 = i2 >>> 1;
  if (!i1) return i6 | 0;
  i3 = i6 + i2 | 0;
  i2 = i5;
  while (1) {
   i1 = i1 + -1 | 0;
   i5 = HEAP8[i2 >> 0] | 0;
   HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
   HEAP8[i3 >> 0] = i5;
   if (!i1) break; else {
    i3 = i3 + -1 | 0;
    i2 = i2 + 1 | 0;
   }
  }
  return i6 | 0;
 }
 if (!i1) {
  HEAP8[i6 >> 0] = 48;
  i1 = i6 + 1 | 0;
 } else {
  i2 = i1;
  i3 = i6;
  while (1) {
   i1 = i3 + 1 | 0;
   HEAP8[i3 >> 0] = HEAP8[52005 + ((i2 >>> 0) % (i4 >>> 0) | 0) >> 0] | 0;
   if (i2 >>> 0 < i4 >>> 0) break; else {
    i2 = (i2 >>> 0) / (i4 >>> 0) | 0;
    i3 = i1;
   }
  }
 }
 HEAP8[i1 >> 0] = 0;
 i1 = _strlen(i6) | 0;
 i4 = i1 >>> 1;
 if (!i4) return i6 | 0;
 i2 = i6 + (i1 + -1) | 0;
 i3 = i6;
 i1 = i4;
 while (1) {
  i1 = i1 + -1 | 0;
  i5 = HEAP8[i3 >> 0] | 0;
  HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
  HEAP8[i2 >> 0] = i5;
  if (!i1) break; else {
   i2 = i2 + -1 | 0;
   i3 = i3 + 1 | 0;
  }
 }
 return i6 | 0;
}

function _copy_opaque_16(i4, i6, i20, i1, i2) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i20 = i20 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0;
 if ((i20 | 0) <= 0) {
  i22 = i20 << 1;
  return i22 | 0;
 }
 i13 = HEAP32[5724 + ((HEAPU8[i1 + 28 >> 0] | 0) << 2) >> 2] | 0;
 i14 = HEAP32[i1 + 12 >> 2] | 0;
 i15 = HEAP32[5724 + ((HEAPU8[i1 + 29 >> 0] | 0) << 2) >> 2] | 0;
 i16 = HEAP32[i1 + 16 >> 2] | 0;
 i17 = HEAP32[5724 + ((HEAPU8[i1 + 30 >> 0] | 0) << 2) >> 2] | 0;
 i18 = HEAP32[i1 + 20 >> 2] | 0;
 i19 = HEAP32[i2 + 24 >> 2] | 0;
 i21 = HEAPU8[i1 + 32 >> 0] | 0;
 i22 = HEAPU8[i1 + 33 >> 0] | 0;
 i7 = HEAPU8[i1 + 34 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i5 = HEAPU8[i2 + 34 >> 0] | 0;
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i6 = HEAP32[i1 >> 2] | 0;
  HEAP16[i2 >> 1] = (HEAPU8[i15 + ((i16 & i6) >>> i22) >> 0] | 0) >>> i10 << i11 | (HEAPU8[i13 + ((i14 & i6) >>> i21) >> 0] | 0) >>> i8 << i9 | i19 | (HEAPU8[i17 + ((i18 & i6) >>> i7) >> 0] | 0) >>> i12 << i5;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i20 | 0)) break; else {
   i2 = i2 + 2 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i22 = i20 << 1;
 return i22 | 0;
}

function _Emscripten_GLES_LoadLibrary(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = _SDL_calloc(1, 88) | 0;
 i3 = i4 + 676 | 0;
 HEAP32[i3 >> 2] = i1;
 if (!i1) {
  i5 = _SDL_Error(0) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i1 + 20 >> 2] = 110;
 HEAP32[i1 + 24 >> 2] = 40;
 HEAP32[i1 + 28 >> 2] = 111;
 HEAP32[i1 + 32 >> 2] = 112;
 HEAP32[i1 + 36 >> 2] = 36;
 HEAP32[i1 + 72 >> 2] = 16;
 HEAP32[i1 + 40 >> 2] = 17;
 HEAP32[i1 + 44 >> 2] = 37;
 HEAP32[i1 + 48 >> 2] = 18;
 HEAP32[i1 + 52 >> 2] = 38;
 HEAP32[i1 + 56 >> 2] = 19;
 HEAP32[i1 + 60 >> 2] = 39;
 HEAP32[i1 + 64 >> 2] = 40;
 HEAP32[i1 + 76 >> 2] = 113;
 HEAP32[i1 + 80 >> 2] = 4;
 HEAP32[i1 + 84 >> 2] = 114;
 i2 = _eglGetDisplay(0) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 if (!i2) {
  i5 = _SDL_SetError(48872, i6) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 24 >> 2] & 63](i2, 0, 0) | 0) != 1) {
  i5 = _SDL_SetError(48898, i6 + 8 | 0) | 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 HEAP32[i4 + 388 >> 2] = 1;
 i1 = i4 + 392 | 0;
 if (!i5) {
  HEAP8[i1 >> 0] = 0;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 } else {
  _SDL_strlcpy(i1, i5, 255) | 0;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function _SDL_SetHintWithPriority(i6, i7, i8) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 if (!((i6 | 0) != 0 & (i7 | 0) != 0)) {
  i8 = 0;
  return i8 | 0;
 }
 if (i8 >>> 0 < 2 & (_SDL_getenv(i6) | 0) != 0) {
  i8 = 0;
  return i8 | 0;
 }
 i1 = HEAP32[19490] | 0;
 L7 : do if (i1 | 0) {
  while (1) {
   if (!(_SDL_strcmp(i6, HEAP32[i1 >> 2] | 0) | 0)) break;
   i1 = HEAP32[i1 + 16 >> 2] | 0;
   if (!i1) break L7;
  }
  i3 = i1 + 8 | 0;
  if ((HEAP32[i3 >> 2] | 0) >>> 0 > i8 >>> 0) {
   i8 = 0;
   return i8 | 0;
  }
  i4 = i1 + 4 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) i5 = 8; else if (_SDL_strcmp(i2, i7) | 0) i5 = 8;
  if ((i5 | 0) == 8) {
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   if (i1 | 0) do {
    i5 = i1;
    i1 = HEAP32[i1 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiii[HEAP32[i5 >> 2] & 63](HEAP32[i5 + 4 >> 2] | 0, i6, HEAP32[i4 >> 2] | 0, i7);
   } while ((i1 | 0) != 0);
   _SDL_free(HEAP32[i4 >> 2] | 0);
   HEAP32[i4 >> 2] = _SDL_strdup(i7) | 0;
  }
  HEAP32[i3 >> 2] = i8;
  i8 = 1;
  return i8 | 0;
 } while (0);
 i1 = _SDL_malloc(20) | 0;
 if (!i1) {
  i8 = 0;
  return i8 | 0;
 }
 HEAP32[i1 >> 2] = _SDL_strdup(i6) | 0;
 HEAP32[i1 + 4 >> 2] = _SDL_strdup(i7) | 0;
 HEAP32[i1 + 8 >> 2] = i8;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = HEAP32[19490];
 HEAP32[19490] = i1;
 i8 = 1;
 return i8 | 0;
}

function _SDL_PrivateJoystickAxis(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i5 = i8;
 i6 = i2 & 255;
 if ((HEAP32[i1 + 8 >> 2] | 0) <= (i6 | 0)) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i7 = i1 + 12 | 0;
 if ((HEAP16[(HEAP32[i7 >> 2] | 0) + (i6 << 1) >> 1] | 0) == i3 << 16 >> 16) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 if (!(HEAP32[20468] | 0)) if (_SDL_WasInit(32) | 0) if (!(_SDL_GetKeyboardFocus() | 0)) {
  i4 = HEAP16[(HEAP32[i1 + 16 >> 2] | 0) + (i6 << 1) >> 1] | 0;
  if (i4 << 16 >> 16 < i3 << 16 >> 16) if ((HEAP16[(HEAP32[i7 >> 2] | 0) + (i6 << 1) >> 1] | 0) <= i3 << 16 >> 16) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
  if (i4 << 16 >> 16 > i3 << 16 >> 16) if ((HEAP16[(HEAP32[i7 >> 2] | 0) + (i6 << 1) >> 1] | 0) >= i3 << 16 >> 16) {
   i7 = 0;
   STACKTOP = i8;
   return i7 | 0;
  }
 }
 HEAP16[(HEAP32[i7 >> 2] | 0) + (i6 << 1) >> 1] = i3;
 if ((_SDL_EventState(1536, -1) | 0) << 24 >> 24 != 1) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 HEAP32[i5 >> 2] = 1536;
 HEAP32[i5 + 8 >> 2] = HEAP32[i1 >> 2];
 HEAP8[i5 + 12 >> 0] = i2;
 HEAP16[i5 + 16 >> 1] = i3;
 i7 = (_SDL_PushEvent(i5) | 0) == 1 & 1;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i7, i1, i2, i9, i10, i11, i3) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i8 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i12 = i13;
 if ((-18 - i7 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6);
 if ((HEAP8[i6 + 11 >> 0] | 0) < 0) i8 = HEAP32[i6 >> 2] | 0; else i8 = i6;
 if (i7 >>> 0 < 2147483623) {
  i4 = i1 + i7 | 0;
  i5 = i7 << 1;
  i4 = i4 >>> 0 < i5 >>> 0 ? i5 : i4;
  i4 = i4 >>> 0 < 11 ? 11 : i4 + 16 & -16;
 } else i4 = -17;
 i5 = __Znwj(i4) | 0;
 if (i9 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i5, i8, i9) | 0;
 if (i11 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i5 + i9 | 0, i3, i11) | 0;
 i1 = i2 - i10 | 0;
 i2 = i1 - i9 | 0;
 if (i2 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i5 + i9 + i11 | 0, i8 + i9 + i10 | 0, i2) | 0;
 if ((i7 | 0) != 10) __ZdlPv(i8);
 HEAP32[i6 >> 2] = i5;
 HEAP32[i6 + 8 >> 2] = i4 | -2147483648;
 i11 = i1 + i11 | 0;
 HEAP32[i6 + 4 >> 2] = i11;
 HEAP8[i12 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + i11 | 0, i12);
 STACKTOP = i13;
 return;
}

function _SDL_SendMouseWheel(i1, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i8 = i9;
 do if (i1 | 0) {
  i2 = HEAP32[19502] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   if (i2 | 0) _SDL_SendWindowEvent(i2, 11, 0, 0) | 0;
   HEAP32[19502] = i1;
   _SDL_SendWindowEvent(i1, 10, 0, 0) | 0;
   i1 = (HEAP32[19502] | 0) == 0 ? HEAP32[19515] | 0 : HEAP32[19516] | 0;
   i2 = HEAP32[19493] | 0;
   i3 = (i2 | 0) == 0;
   if ((i1 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
    if (i3) break;
    FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
    break;
   } else {
    if (i3) break;
    FUNCTION_TABLE_ii[i2 & 255](0) | 0;
    break;
   }
  }
 } while (0);
 if (!(i6 | i5)) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 if ((_SDL_EventState(1027, -1) | 0) << 24 >> 24 != 1) {
  i8 = 0;
  STACKTOP = i9;
  return i8 | 0;
 }
 HEAP32[i8 >> 2] = 1027;
 i1 = HEAP32[19502] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i8 + 8 >> 2] = i1;
 HEAP32[i8 + 12 >> 2] = i4;
 HEAP32[i8 + 16 >> 2] = i5;
 HEAP32[i8 + 20 >> 2] = i6;
 HEAP32[i8 + 24 >> 2] = i7;
 i8 = (_SDL_PushEvent(i8) | 0) > 0 & 1;
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_OnWindowFocusGained(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 i1 = _SDL_GetMouse() | 0;
 i2 = HEAP32[i6 + 100 >> 2] | 0;
 if (i2 | 0) {
  i3 = HEAP32[19487] | 0;
  i4 = HEAP32[i3 + 116 >> 2] | 0;
  if (i4 | 0) FUNCTION_TABLE_iiii[i4 & 63](i3, i6, i2) | 0;
 }
 if (i1 | 0) if (HEAP32[i1 + 76 >> 2] | 0) {
  _SDL_SetMouseFocus(i6);
  _SDL_WarpMouseInWindow(i6, (HEAP32[i6 + 24 >> 2] | 0) / 2 | 0, (HEAP32[i6 + 28 >> 2] | 0) / 2 | 0);
 }
 i3 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
 i1 = HEAP32[i6 + 48 >> 2] | 0;
 i4 = HEAP32[19487] | 0;
 i2 = HEAP32[i4 + 276 >> 2] | 0;
 if ((i1 & 512 | 0) == 0 | (i1 & 256 | i3 | 0) == 0) if ((i2 | 0) == (i6 | 0)) {
  i1 = 0;
  i3 = 0;
  i2 = i4;
  i5 = 12;
 } else {
  i3 = 0;
  i2 = i4;
 } else if ((i2 | 0) == 0 | (i2 | 0) == (i6 | 0)) {
  i1 = 1;
  i3 = i6;
  i2 = i4;
  i5 = 12;
 } else {
  i1 = i2 + 48 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -257;
  i1 = HEAP32[i4 + 124 >> 2] | 0;
  if (!i1) {
   i1 = 1;
   i3 = i6;
   i2 = i4;
   i5 = 12;
  } else {
   FUNCTION_TABLE_viii[i1 & 63](i4, i2, 0);
   i1 = 1;
   i3 = i6;
   i2 = HEAP32[19487] | 0;
   i5 = 12;
  }
 }
 if ((i5 | 0) == 12) {
  HEAP32[i2 + 276 >> 2] = i3;
  i3 = i1;
 }
 i1 = HEAP32[i2 + 124 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_viii[i1 & 63](i2, i6, i3);
 return;
}

function _SDL_SetTextureColorMod(i3, i4, i5, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 L1 : do if ((i5 & i4) << 24 >> 24 == -1 & i2 << 24 >> 24 == -1) while (1) {
  if (!i3) {
   i7 = 7;
   break L1;
  }
  if ((HEAP32[i3 >> 2] | 0) != 85557) {
   i7 = 7;
   break L1;
  }
  i1 = i3 + 20 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
  HEAP8[i3 + 28 >> 0] = i4;
  HEAP8[i3 + 29 >> 0] = i5;
  HEAP8[i3 + 30 >> 0] = -1;
  i1 = HEAP32[i3 + 36 >> 2] | 0;
  if (!i1) break; else i3 = i1;
 } else while (1) {
  if (!i3) {
   i7 = 7;
   break L1;
  }
  if ((HEAP32[i3 >> 2] | 0) != 85557) {
   i7 = 7;
   break L1;
  }
  i1 = i3 + 20 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
  HEAP8[i3 + 28 >> 0] = i4;
  HEAP8[i3 + 29 >> 0] = i5;
  HEAP8[i3 + 30 >> 0] = i2;
  i1 = HEAP32[i3 + 36 >> 2] | 0;
  if (!i1) break; else i3 = i1;
 } while (0);
 if ((i7 | 0) == 7) {
  _SDL_SetError(41358, i6) | 0;
  i7 = -1;
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = HEAP32[i3 + 32 >> 2] | 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i2) {
  i7 = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 i7 = FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i6, i1, i7, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0;
 i9 = 0;
 i4 = i6 + 11 | 0;
 i3 = HEAP8[i4 >> 0] | 0;
 i5 = i6 + 4 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 do if ((i3 << 24 >> 24 < 0 ? i2 : i3 & 255) | 0) {
  if ((i1 | 0) != (i7 | 0)) {
   i2 = i7;
   i3 = i1;
   while (1) {
    i2 = i2 + -4 | 0;
    if (i3 >>> 0 >= i2 >>> 0) break;
    i10 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i2 >> 2] = i10;
    i3 = i3 + 4 | 0;
   }
   i3 = HEAP8[i4 >> 0] | 0;
   i2 = HEAP32[i5 >> 2] | 0;
  }
  i5 = i3 << 24 >> 24 < 0;
  i10 = i5 ? HEAP32[i6 >> 2] | 0 : i6;
  i6 = i7 + -4 | 0;
  i5 = i10 + (i5 ? i2 : i3 & 255) | 0;
  i2 = i10;
  while (1) {
   i3 = HEAP8[i2 >> 0] | 0;
   i4 = i3 << 24 >> 24 | 0;
   i4 = (i4 | 0) > 0 & (i4 | 0) != 127;
   if (i1 >>> 0 >= i6 >>> 0) break;
   if (i4) if ((HEAP32[i1 >> 2] | 0) != (i3 << 24 >> 24 | 0)) {
    i9 = 10;
    break;
   }
   i1 = i1 + 4 | 0;
   i2 = (i5 - i2 | 0) > 1 ? i2 + 1 | 0 : i2;
  }
  if ((i9 | 0) == 10) {
   HEAP32[i8 >> 2] = 4;
   break;
  }
  if (i4) if (((HEAP32[i6 >> 2] | 0) + -1 | 0) >>> 0 >= i3 << 24 >> 24 >>> 0) HEAP32[i8 >> 2] = 4;
 } while (0);
 return;
}

function _png_crc_finish(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i5 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 1024 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1024);
 i4 = i7;
 if (i1 | 0) if (!i6) do i1 = i1 - (i1 >>> 0 < 1024 ? i1 : 1024) | 0; while ((i1 | 0) != 0); else do {
  i3 = i1 >>> 0 < 1024 ? i1 : 1024;
  i1 = i1 - i3 | 0;
  _png_read_data(i6, i4, i3);
  _png_calculate_crc(i6, i4, i3);
 } while ((i1 | 0) != 0);
 i3 = i6 + 376 | 0;
 i1 = i6 + 212 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP32[i3 >> 2] & 536870912)) {
  HEAP32[i6 + 800 >> 2] = 129;
  _png_read_data(i6, i4, 4);
  if (i2 & 2048 | 0) i5 = 8;
 } else {
  HEAP32[i6 + 800 >> 2] = 129;
  _png_read_data(i6, i4, 4);
  if ((i2 & 768 | 0) == 768) i5 = 8;
 }
 if ((i5 | 0) == 8) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (((HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0) | 0) == (HEAP32[i6 + 412 >> 2] | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP32[i3 >> 2] & 536870912)) {
  if (!(i1 & 1024)) _png_chunk_error(i6, 62634);
 } else if (i1 & 512 | 0) _png_chunk_error(i6, 62634);
 _png_chunk_warning(i6, 62634);
 i6 = 1;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i10, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i11 + 4 | 0;
 i9 = i11;
 i3 = i1 + 8 | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 255](i3) | 0;
 i1 = HEAP8[i3 + 8 + 3 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i2 = HEAP32[i3 + 4 >> 2] | 0; else i2 = i1 & 255;
 i1 = HEAP8[i3 + 20 + 3 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i1 = HEAP32[i3 + 16 >> 2] | 0; else i1 = i1 & 255;
 do if ((i2 | 0) == (0 - i1 | 0)) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4; else {
  HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i4, i3, i3 + 24 | 0, i8, i7, 0) | 0) - i3 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i2 | 0) == 12 & (i1 | 0) == 0) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } while (0);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i10, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i11 + 4 | 0;
 i9 = i11;
 i3 = i1 + 8 | 0;
 i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 255](i3) | 0;
 i1 = HEAP8[i3 + 11 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i2 = HEAP32[i3 + 4 >> 2] | 0; else i2 = i1 & 255;
 i1 = HEAP8[i3 + 12 + 11 >> 0] | 0;
 if (i1 << 24 >> 24 < 0) i1 = HEAP32[i3 + 16 >> 2] | 0; else i1 = i1 & 255;
 do if ((i2 | 0) == (0 - i1 | 0)) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 4; else {
  HEAP32[i9 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
  i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i4, i3, i3 + 24 | 0, i8, i7, 0) | 0) - i3 | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i2 | 0) == 12 & (i1 | 0) == 0) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } while (0);
 STACKTOP = i11;
 return;
}

function _SDL_LowerBlitScaled(i5, i6, i7, i8) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i9 = 0;
 i9 = 0;
 i4 = i5 + 52 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i1 + 68 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!(i2 & 512)) {
  HEAP32[i3 >> 2] = i2 | 512;
  _SDL_InvalidateMap(i1);
  i1 = HEAP32[i4 >> 2] | 0;
  i2 = HEAP32[i1 + 68 >> 2] | 0;
 }
 do if (!(i2 & 371)) {
  i2 = HEAP32[HEAP32[i5 + 4 >> 2] >> 2] | 0;
  if ((i2 | 0) == (HEAP32[HEAP32[i7 + 4 >> 2] >> 2] | 0)) {
   if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) if (((i2 >>> 24 & 15) + -1 | 0) >>> 0 < 3) break;
   i9 = _SDL_SoftStretch(i5, i6, i7, i8) | 0;
   return i9 | 0;
  }
 } while (0);
 do if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) {
  i2 = HEAP32[(HEAP32[i7 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if (i2 | 0) if ((HEAP32[i1 + 80 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) {
   i9 = 13;
   break;
  }
  i2 = HEAP32[(HEAP32[i5 + 4 >> 2] | 0) + 4 >> 2] | 0;
  if (i2) if ((HEAP32[i1 + 84 >> 2] | 0) != (HEAP32[i2 + 8 >> 2] | 0)) i9 = 13;
 } else i9 = 13; while (0);
 do if ((i9 | 0) == 13) if ((_SDL_MapSurface(i5, i7) | 0) < 0) {
  i9 = -1;
  return i9 | 0;
 } else {
  i1 = HEAP32[i4 >> 2] | 0;
  break;
 } while (0);
 i9 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i5, i6, i7, i8) | 0;
 return i9 | 0;
}

function _png_inflate_read(i9, i5, i7, i1, i10, i2) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i8 = 0, i11 = 0;
 i11 = 0;
 if ((HEAP32[i9 + 220 >> 2] | 0) != (HEAP32[i9 + 376 >> 2] | 0)) {
  HEAP32[i9 + 248 >> 2] = 63874;
  return;
 }
 i6 = i9 + 224 | 0;
 HEAP32[i9 + 236 >> 2] = i1;
 i8 = i9 + 240 | 0;
 HEAP32[i8 >> 2] = 0;
 i4 = i9 + 228 | 0;
 i3 = i2 | 0 ? 4 : 2;
 i1 = 1024;
 while (1) {
  if (!(HEAP32[i4 >> 2] | 0)) {
   i2 = HEAP32[i7 >> 2] | 0;
   i1 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
   HEAP32[i7 >> 2] = i2 - i1;
   if (i1 | 0) {
    _png_read_data(i9, i5, i1);
    _png_calculate_crc(i9, i5, i1);
   }
   HEAP32[i6 >> 2] = i5;
   HEAP32[i4 >> 2] = i1;
   i2 = i1;
  } else i2 = i1;
  if (!(HEAP32[i8 >> 2] | 0)) {
   i1 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = 0;
   HEAP32[i8 >> 2] = i1;
  }
  i1 = _inflate(i6, (HEAP32[i7 >> 2] | 0) == 0 ? i3 : 0) | 0;
  if (i1 | 0) {
   i11 = 10;
   break;
  }
  if (HEAP32[i10 >> 2] | 0) {
   i1 = i2;
   continue;
  }
  if (!(HEAP32[i8 >> 2] | 0)) {
   i1 = 0;
   i2 = 0;
   i3 = 0;
   break;
  } else i1 = i2;
 }
 if ((i11 | 0) == 10) {
  i2 = HEAP32[i8 >> 2] | 0;
  i3 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i10 >> 2] = i3 + i2;
 HEAP32[i8 >> 2] = 0;
 _png_zstream_error(i9, i1);
 return;
}

function _inflateInit_(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i1) {
  i4 = -6;
  return i4 | 0;
 }
 if ((i2 | 0) != 56 | (HEAP8[i1 >> 0] | 0) != 49) {
  i4 = -6;
  return i4 | 0;
 }
 if (!i4) {
  i4 = -2;
  return i4 | 0;
 }
 i3 = i4 + 24 | 0;
 HEAP32[i3 >> 2] = 0;
 i2 = i4 + 32 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  HEAP32[i2 >> 2] = 60;
  HEAP32[i4 + 40 >> 2] = 0;
  i1 = 60;
 }
 i2 = i4 + 36 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) HEAP32[i2 >> 2] = 59;
 i1 = FUNCTION_TABLE_iiii[i1 & 63](HEAP32[i4 + 40 >> 2] | 0, 1, 7116) | 0;
 if (!i1) {
  i4 = -4;
  return i4 | 0;
 }
 HEAP32[i4 + 28 >> 2] = i1;
 HEAP32[i1 + 52 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 1;
 HEAP32[i1 + 36 >> 2] = 15;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 HEAP32[i4 + 20 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i4 + 48 >> 2] = 1;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 32768;
 HEAP32[i1 + 32 >> 2] = 0;
 HEAP32[i1 + 56 >> 2] = 0;
 HEAP32[i1 + 60 >> 2] = 0;
 i4 = i1 + 1328 | 0;
 HEAP32[i1 + 108 >> 2] = i4;
 HEAP32[i1 + 80 >> 2] = i4;
 HEAP32[i1 + 76 >> 2] = i4;
 HEAP32[i1 + 7104 >> 2] = 1;
 HEAP32[i1 + 7108 >> 2] = -1;
 i4 = 0;
 return i4 | 0;
}

function _SDL_SW_LockYUVTexture(i6, i4, i7, i8) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i9;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 1448433993) switch (i1 | 0) {
 case 842094169:
  {
   i5 = 2;
   break;
  }
 default:
  i5 = 10;
 } else switch (i1 | 0) {
 case 1448433993:
  {
   i5 = 2;
   break;
  }
 default:
  i5 = 10;
 }
 do if ((i5 | 0) == 2) {
  if (!i4) {
   i1 = HEAP32[i6 + 44 >> 2] | 0;
   break;
  }
  if (!(HEAP32[i4 >> 2] | 0)) if (!(HEAP32[i4 + 4 >> 2] | 0)) if ((HEAP32[i4 + 8 >> 2] | 0) == (HEAP32[i6 + 8 >> 2] | 0)) if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i6 + 12 >> 2] | 0)) {
   i3 = 0;
   i1 = HEAP32[i6 + 44 >> 2] | 0;
   i2 = 0;
   i5 = 12;
   break;
  }
  i8 = _SDL_SetError(59687, i2) | 0;
  STACKTOP = i9;
  return i8 | 0;
 } else if ((i5 | 0) == 10) {
  i1 = HEAP32[i6 + 44 >> 2] | 0;
  if (i4) {
   i3 = HEAP32[i4 + 4 >> 2] | 0;
   i2 = HEAP32[i4 >> 2] << 1;
   i5 = 12;
  }
 } while (0);
 if ((i5 | 0) == 12) i1 = i1 + (Math_imul(i3, HEAPU16[i6 + 36 >> 1] | 0) | 0) + i2 | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i8 >> 2] = HEAPU16[i6 + 36 >> 1];
 i8 = 0;
 STACKTOP = i9;
 return i8 | 0;
}

function _SDL_JoystickGetGUIDFromString(i3, i8) {
 i3 = i3 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i11;
 i9 = (_SDL_strlen(i8) | 0) & -2;
 _SDL_memset(i1, 0, 16) | 0;
 L1 : do if (i9 | 0) {
  i10 = i1;
  i6 = i1;
  i7 = 0;
  while (1) {
   if ((i6 - i10 | 0) >= 16) break L1;
   i2 = HEAP8[i8 + i7 >> 0] | 0;
   i4 = i2 << 24 >> 24;
   do if ((i2 + -48 & 255) < 10) i2 = i4 + 208 | 0; else if ((i2 + -65 & 255) < 6) {
    i2 = i4 + 201 | 0;
    break;
   } else {
    i2 = (i2 + -97 & 255) < 6 ? i4 + 169 | 0 : 0;
    break;
   } while (0);
   i5 = i2 << 4;
   i2 = HEAP8[i8 + (i7 | 1) >> 0] | 0;
   i4 = i2 << 24 >> 24;
   do if ((i2 + -48 & 255) < 10) i2 = i4 + 208 | 0; else if ((i2 + -65 & 255) < 6) {
    i2 = i4 + 201 | 0;
    break;
   } else {
    i2 = (i2 + -97 & 255) < 6 ? i4 + 169 | 0 : 0;
    break;
   } while (0);
   HEAP8[i6 >> 0] = i2 | i5;
   i7 = i7 + 2 | 0;
   if (i7 >>> 0 >= i9 >>> 0) break; else i6 = i6 + 1 | 0;
  }
 } while (0);
 i2 = i3 + 16 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) < (i2 | 0));
 STACKTOP = i11;
 return;
}

function _Emscripten_HandleResize(i1, i2, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 var d3 = 0.0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d10 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i8 + 8 | 0;
 i6 = i8;
 i7 = i9 + 4 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i1 = HEAP32[i2 + 48 >> 2] | 0;
 if (i1 & 8192) {
  HEAPF32[i9 + 12 >> 2] = Math_fround(+_emscripten_get_device_pixel_ratio());
  i2 = HEAP32[i7 >> 2] | 0;
  i1 = HEAP32[i2 + 48 >> 2] | 0;
 }
 if ((i1 & 4129 | 0) != 32) {
  STACKTOP = i8;
  return 0;
 }
 d3 = +(HEAP32[i2 + 24 >> 2] | 0);
 HEAPF64[i5 >> 3] = d3;
 d4 = +(HEAP32[i2 + 28 >> 2] | 0);
 HEAPF64[i6 >> 3] = d4;
 i2 = i9 + 16 | 0;
 if (HEAP32[i2 >> 2] | 0) {
  _emscripten_get_element_css_size(0, i5 | 0, i6 | 0) | 0;
  d3 = +HEAPF64[i5 >> 3];
  d4 = +HEAPF64[i6 >> 3];
 }
 i1 = i9 + 12 | 0;
 d10 = +Math_fround(HEAPF32[i1 >> 2]);
 _emscripten_set_canvas_size(~~(d3 * d10) | 0, ~~(d4 * d10) | 0);
 if (!(HEAP32[i2 >> 2] | 0)) if (Math_fround(HEAPF32[i1 >> 2]) != Math_fround(1.0)) _emscripten_set_element_css_size(0, +(+HEAPF64[i5 >> 3]), +(+HEAPF64[i6 >> 3])) | 0;
 _SDL_SendWindowEvent(HEAP32[i7 >> 2] | 0, 5, ~~+HEAPF64[i5 >> 3], ~~+HEAPF64[i6 >> 3]) | 0;
 STACKTOP = i8;
 return 0;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i7 = i1 + 32 | 0;
 i4 = i1 + 24 | 0;
 i8 = i1 + 16 | 0;
 i6 = i1;
 i5 = i1 + 36 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (i1 | 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  if (i3 | 0) {
   i1 = i3 + 48 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   if (!((i2 & -256 | 0) == 1126902528 & (i1 | 0) == 1129074247)) {
    HEAP32[i4 >> 2] = 75430;
    _abort_message(75380, i4);
   }
   if ((i2 | 0) == 1126902529 & (i1 | 0) == 1129074247) i1 = HEAP32[i3 + 44 >> 2] | 0; else i1 = i3 + 80 | 0;
   HEAP32[i5 >> 2] = i1;
   i4 = HEAP32[i3 >> 2] | 0;
   i1 = HEAP32[i4 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[650] | 0) + 16 >> 2] & 63](2600, i4, i5) | 0) {
    i8 = HEAP32[i5 >> 2] | 0;
    i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 255](i8) | 0;
    HEAP32[i6 >> 2] = 75430;
    HEAP32[i6 + 4 >> 2] = i1;
    HEAP32[i6 + 8 >> 2] = i8;
    _abort_message(75294, i6);
   } else {
    HEAP32[i8 >> 2] = 75430;
    HEAP32[i8 + 4 >> 2] = i1;
    _abort_message(75339, i8);
   }
  }
 }
 _abort_message(75418, i7);
}

function _SDL_LogMessageV(i6, i7, i3, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 if (i7 >>> 0 > 6 | 8 == 0) {
  STACKTOP = i8;
  return;
 }
 L4 : do if (!0) i2 = 6; else {
  i1 = 0;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) break;
   i1 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i1) {
    i2 = 6;
    break L4;
   }
  }
  i1 = i1 + 4 | 0;
  i2 = 9;
 } while (0);
 L9 : do if ((i2 | 0) == 6) switch (i6 | 0) {
 case 8:
  {
   i1 = 1;
   break L9;
  }
 case 0:
  {
   i1 = 15100;
   i2 = 9;
   break L9;
  }
 case 2:
  {
   i1 = 15092;
   i2 = 9;
   break L9;
  }
 default:
  {
   i1 = 15096;
   i2 = 9;
   break L9;
  }
 } while (0);
 if ((i2 | 0) == 9) i1 = HEAP32[i1 >> 2] | 0;
 if (i1 >>> 0 > i7 >>> 0) {
  STACKTOP = i8;
  return;
 }
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 4096 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(4096);
 _SDL_vsnprintf(i4, 4096, i3, i5) | 0;
 i1 = _SDL_strlen(i4) | 0;
 if (i1 | 0) {
  i2 = i1 + -1 | 0;
  i3 = i4 + i2 | 0;
  if ((HEAP8[i3 >> 0] | 0) == 10) {
   HEAP8[i3 >> 0] = 0;
   if (i2 | 0) {
    i1 = i4 + (i1 + -2) | 0;
    if ((HEAP8[i1 >> 0] | 0) == 13) HEAP8[i1 >> 0] = 0;
   }
  }
 }
 _SDL_LogOutput(0, i6, i7, i4);
 STACKTOP = i8;
 return;
}

function __ZN15SpriteComponent6updateEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, f4 = f0;
 if (!(HEAP8[i3 + 57 >> 0] | 0)) {
  i1 = HEAP32[i3 + 8 >> 2] | 0;
  i2 = ~~Math_fround(HEAPF32[i1 + 8 >> 2]);
  i1 = ~~Math_fround(HEAPF32[i1 + 12 >> 2]);
  i1 = i1 - (HEAP32[21388] | 0) | 0;
  i2 = i2 - (HEAP32[21387] | 0) | 0;
 } else {
  f4 = Math_fround(HEAPF32[i3 + 48 >> 2]);
  i2 = ~~Math_fround(f4 - Math_fround(HEAP32[21387] | 0));
  f4 = Math_fround(HEAPF32[i3 + 52 >> 2]);
  i1 = ~~Math_fround(f4 - Math_fround(HEAP32[21388] | 0));
 }
 HEAP32[i3 + 32 >> 2] = i2;
 HEAP32[i3 + 36 >> 2] = i1;
 if (!(HEAP8[i3 + 56 >> 0] | 0)) {
  i2 = i3 + 68 | 0;
  i2 = HEAP32[i2 >> 2] | 0;
  i1 = i3 + 8 | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  i1 = i1 + 32 | 0;
  i1 = HEAP32[i1 >> 2] | 0;
  i2 = Math_imul(i1, i2) | 0;
  i3 = i3 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  return;
 }
 i2 = HEAP32[i3 + 24 >> 2] | 0;
 i1 = _SDL_GetTicks() | 0;
 HEAP32[i3 + 16 >> 2] = Math_imul((((i1 >>> 0) / ((HEAP32[i3 + 64 >> 2] | 0) >>> 0) | 0) >>> 0) % ((HEAP32[i3 + 60 >> 2] | 0) >>> 0) | 0, i2) | 0;
 i2 = i3 + 68 | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 i1 = i3 + 8 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i1 = i1 + 32 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = Math_imul(i1, i2) | 0;
 i3 = i3 + 20 | 0;
 HEAP32[i3 >> 2] = i2;
 return;
}

function _SW_GetOutputSize(i4, i7, i8) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i9;
 i3 = i4 + 320 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 L1 : do if (!i1) {
  i2 = i5 + 4 | 0;
  i10 = HEAP32[i2 >> 2] | 0;
  HEAP32[i5 >> 2] = i10;
  i1 = i10;
  if (!i10) {
   i1 = _SDL_GetWindowSurface(HEAP32[i4 + 188 >> 2] | 0) | 0;
   do if (i1 | 0) {
    HEAP32[i2 >> 2] = i1;
    HEAP32[i5 >> 2] = i1;
    i2 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
    if (!i2) break L1;
    _SDL_SetClipRect(i2, i4 + 216 | 0) | 0;
    i1 = HEAP32[HEAP32[i3 >> 2] >> 2] | 0;
    if (i1 | 0) if (!(HEAP32[i4 + 280 >> 2] | 0)) {
     _SDL_SetClipRect(i1, 0) | 0;
     break;
    } else {
     _SDL_SetClipRect(i1, i4 + 248 | 0) | 0;
     break;
    }
   } while (0);
   i1 = HEAP32[i5 >> 2] | 0;
  }
  if (!i1) {
   _SDL_SetError(48492, i6) | 0;
   i10 = -1;
   STACKTOP = i9;
   return i10 | 0;
  }
 } while (0);
 if (i7 | 0) HEAP32[i7 >> 2] = HEAP32[i1 + 8 >> 2];
 if (!i8) {
  i10 = 0;
  STACKTOP = i9;
  return i10 | 0;
 }
 HEAP32[i8 >> 2] = HEAP32[i1 + 12 >> 2];
 i10 = 0;
 STACKTOP = i9;
 return i10 | 0;
}

function _SDL_MapRGBA(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i2) {
  i11 = (i4 & 255) >>> (HEAPU8[i1 + 29 >> 0] | 0) << HEAPU8[i1 + 33 >> 0] | (i3 & 255) >>> (HEAPU8[i1 + 28 >> 0] | 0) << HEAPU8[i1 + 32 >> 0] | (i5 & 255) >>> (HEAPU8[i1 + 30 >> 0] | 0) << HEAPU8[i1 + 34 >> 0] | (i6 & 255) >>> (HEAPU8[i1 + 31 >> 0] | 0) << HEAPU8[i1 + 35 >> 0] & HEAP32[i1 + 24 >> 2];
  return i11 | 0;
 }
 i11 = HEAP32[i2 >> 2] | 0;
 L5 : do if ((i11 | 0) > 0) {
  i10 = HEAP32[i2 + 4 >> 2] | 0;
  i9 = i3 & 255;
  i8 = i4 & 255;
  i7 = i5 & 255;
  i5 = i6 & 255;
  i4 = 0;
  i2 = -1;
  i1 = 0;
  do {
   i3 = i10 + (i4 << 2) | 0;
   i12 = (HEAPU8[i3 >> 0] | 0) - i9 | 0;
   i13 = (HEAPU8[i3 + 1 >> 0] | 0) - i8 | 0;
   i6 = (HEAPU8[i3 + 2 >> 0] | 0) - i7 | 0;
   i3 = (HEAPU8[i3 + 3 >> 0] | 0) - i5 | 0;
   i3 = (Math_imul(i13, i13) | 0) + (Math_imul(i12, i12) | 0) + (Math_imul(i6, i6) | 0) + (Math_imul(i3, i3) | 0) | 0;
   if (i3 >>> 0 < i2 >>> 0) {
    i1 = i4 & 255;
    if (!i3) break L5; else i2 = i3;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i11 | 0));
 } else i1 = 0; while (0);
 i13 = i1 & 255;
 return i13 | 0;
}

function _png_build_16bit_table(i9, i1, i2, i3) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d4 = 0.0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i11 = 8 - i2 | 0;
 i12 = 1 << i11;
 i8 = (1 << 16 - i2) + -1 | 0;
 d6 = 1.0 / +(i8 | 0);
 i7 = 1 << 15 - i2;
 i10 = _png_calloc(i9, i12 << 2) | 0;
 HEAP32[i1 >> 2] = i10;
 i5 = (i2 | 0) == 0;
 d4 = +(i3 | 0) * 1.0e-05;
 if ((i3 + -95e3 | 0) >>> 0 < 10001) i2 = 0; else {
  i1 = 0;
  do {
   i3 = _png_malloc(i9, 512) | 0;
   HEAP32[i10 + (i1 << 2) >> 2] = i3;
   i2 = 0;
   do {
    HEAP16[i3 + (i2 << 1) >> 1] = ~~+Math_floor(+(+Math_pow(+(d6 * +(((i2 << i11) + i1 | 0) >>> 0)), +d4) * 65535.0 + .5));
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != 256);
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i12 >>> 0);
  return;
 }
 do {
  i3 = _png_malloc(i9, 512) | 0;
  HEAP32[i10 + (i2 << 2) >> 2] = i3;
  if (i5) {
   i1 = 0;
   do {
    HEAP16[i3 + (i1 << 1) >> 1] = (i1 << i11) + i2;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 256);
  } else {
   i1 = 0;
   do {
    HEAP16[i3 + (i1 << 1) >> 1] = (((((i1 << i11) + i2 | 0) * 65535 | 0) + i7 | 0) >>> 0) / (i8 >>> 0) | 0;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 256);
  }
  i2 = i2 + 1 | 0;
 } while (i2 >>> 0 < i12 >>> 0);
 return;
}

function _Emscripten_RegisterEventHandlers(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 _emscripten_set_mousemove_callback(50423, i1 | 0, 0, 41) | 0;
 _emscripten_set_mousedown_callback(50423, i1 | 0, 0, 42) | 0;
 _emscripten_set_mouseup_callback(50431, i1 | 0, 0, 42) | 0;
 _emscripten_set_mouseenter_callback(50423, i1 | 0, 0, 43) | 0;
 _emscripten_set_mouseleave_callback(50423, i1 | 0, 0, 43) | 0;
 _emscripten_set_wheel_callback(50423, i1 | 0, 0, 44) | 0;
 _emscripten_set_focus_callback(50441, i1 | 0, 0, 45) | 0;
 _emscripten_set_blur_callback(50441, i1 | 0, 0, 45) | 0;
 _emscripten_set_touchstart_callback(50423, i1 | 0, 0, 46) | 0;
 _emscripten_set_touchend_callback(50423, i1 | 0, 0, 46) | 0;
 _emscripten_set_touchmove_callback(50423, i1 | 0, 0, 46) | 0;
 _emscripten_set_touchcancel_callback(50423, i1 | 0, 0, 46) | 0;
 i2 = _SDL_GetHint(50449) | 0;
 i2 = i2 | 0 ? i2 : 50441;
 _emscripten_set_keydown_callback(i2 | 0, i1 | 0, 0, 47) | 0;
 _emscripten_set_keyup_callback(i2 | 0, i1 | 0, 0, 47) | 0;
 _emscripten_set_keypress_callback(i2 | 0, i1 | 0, 0, 48) | 0;
 _emscripten_set_fullscreenchange_callback(50431, i1 | 0, 0, 49) | 0;
 _emscripten_set_resize_callback(50441, i1 | 0, 0, 50) | 0;
 _emscripten_set_visibilitychange_callback(i1 | 0, 0, 51) | 0;
 return;
}

function _png_set_sCAL_s(i6, i7, i2, i5, i8) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 if ((i6 | 0) == 0 | (i7 | 0) == 0) return;
 if ((i2 + -1 | 0) >>> 0 > 1) _png_error(i6, 64126);
 if (!i5) _png_error(i6, 64144);
 i1 = _strlen(i5) | 0;
 if (!i1) _png_error(i6, 64144);
 if ((HEAP8[i5 >> 0] | 0) == 45) _png_error(i6, 64144);
 if (!(_png_check_fp_string(i5, i1) | 0)) _png_error(i6, 64144);
 if (!i8) _png_error(i6, 64163);
 i3 = _strlen(i8) | 0;
 if (!i3) _png_error(i6, 64163);
 if ((HEAP8[i8 >> 0] | 0) == 45) _png_error(i6, 64163);
 if (!(_png_check_fp_string(i8, i3) | 0)) _png_error(i6, 64163);
 HEAP8[i7 + 252 >> 0] = i2;
 i1 = i1 + 1 | 0;
 i2 = _png_malloc_warn(i6, i1) | 0;
 i4 = i7 + 256 | 0;
 HEAP32[i4 >> 2] = i2;
 if (!i2) {
  _png_warning(i6, 64183);
  return;
 }
 _memcpy(i2 | 0, i5 | 0, i1 | 0) | 0;
 i1 = i3 + 1 | 0;
 i2 = _png_malloc_warn(i6, i1) | 0;
 HEAP32[i7 + 260 >> 2] = i2;
 if (!i2) {
  _png_free(i6, HEAP32[i4 >> 2] | 0);
  HEAP32[i4 >> 2] = 0;
  _png_warning(i6, 64183);
  return;
 } else {
  _memcpy(i2 | 0, i8 | 0, i1 | 0) | 0;
  i8 = i7 + 8 | 0;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 16384;
  i8 = i7 + 232 | 0;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 256;
  return;
 }
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoll_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  L7 : do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) {
   do if ((i3 | 0) == 34) {
    HEAP32[i5 >> 2] = 4;
    if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0) {
     i1 = 2147483647;
     break L7;
    }
   } else {
    if ((i2 | 0) < -1 | (i2 | 0) == -1 & i1 >>> 0 < 2147483648) {
     HEAP32[i5 >> 2] = 4;
     break;
    }
    if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 2147483647) {
     HEAP32[i5 >> 2] = 4;
     i1 = 2147483647;
     break L7;
    } else break L7;
   } while (0);
   i1 = -2147483648;
  } else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _SDL_HasIntersection(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i7 + 8 | 0;
 i1 = i7;
 do if (!i5) {
  HEAP32[i1 >> 2] = 41291;
  _SDL_SetError(59509, i1) | 0;
  i1 = 0;
 } else {
  if (!i6) {
   HEAP32[i2 >> 2] = 41293;
   _SDL_SetError(59509, i2) | 0;
   i1 = 0;
   break;
  }
  i3 = HEAP32[i5 + 8 >> 2] | 0;
  if ((i3 | 0) < 1) i1 = 0; else {
   i4 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i4 | 0) > 0) {
    i1 = HEAP32[i6 + 8 >> 2] | 0;
    if ((i1 | 0) < 1) i1 = 0; else {
     i2 = HEAP32[i6 + 12 >> 2] | 0;
     if ((i2 | 0) > 0) {
      i8 = HEAP32[i5 >> 2] | 0;
      i9 = i3 + i8 | 0;
      i3 = HEAP32[i6 >> 2] | 0;
      i1 = i1 + i3 | 0;
      if ((((i1 | 0) < (i9 | 0) ? i1 : i9) | 0) > (((i3 | 0) > (i8 | 0) ? i3 : i8) | 0)) {
       i1 = HEAP32[i5 + 4 >> 2] | 0;
       i8 = i4 + i1 | 0;
       i9 = HEAP32[i6 + 4 >> 2] | 0;
       i6 = i2 + i9 | 0;
       i1 = (((i6 | 0) < (i8 | 0) ? i6 : i8) | 0) > (((i9 | 0) > (i1 | 0) ? i9 : i1) | 0) & 1;
      } else i1 = 0;
     } else i1 = 0;
    }
   } else i1 = 0;
  }
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i3, i7, i1, i2, i4, i5, i6) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(416);
 i1 = i8 + 8 | 0;
 i2 = i8;
 HEAP32[i2 >> 2] = i1 + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc(i3 + 8 | 0, i1, i2, i4, i5, i6);
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 while (1) {
  if ((i5 | 0) == (i6 | 0)) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if (!i1) i1 = 0; else {
   i3 = i1 + 24 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
    i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i2) | 0;
    i2 = FUNCTION_TABLE_iii[i7 & 63](i1, i2) | 0;
   } else {
    HEAP32[i3 >> 2] = i4 + 4;
    HEAP32[i4 >> 2] = i2;
    i2 = __ZNSt3__211char_traitsIwE11to_int_typeEw(i2) | 0;
   }
   i7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i2, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   i1 = i7 ? 0 : i1;
  }
  i5 = i5 + 4 | 0;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i3, i7, i1, i2, i4, i5, i6) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112);
 i1 = i8 + 4 | 0;
 i2 = i8;
 HEAP32[i2 >> 2] = i1 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i3 + 8 | 0, i1, i2, i4, i5, i6);
 i6 = HEAP32[i2 >> 2] | 0;
 i5 = i1;
 i1 = HEAP32[i7 >> 2] | 0;
 while (1) {
  if ((i5 | 0) == (i6 | 0)) break;
  i2 = HEAP8[i5 >> 0] | 0;
  if (!i1) i1 = 0; else {
   i3 = i1 + 24 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i7 = HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] | 0;
    i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
    i2 = FUNCTION_TABLE_iii[i7 & 63](i1, i2) | 0;
   } else {
    HEAP32[i3 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i2;
    i2 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i2) | 0;
   }
   i7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii(i2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   i1 = i7 ? 0 : i1;
  }
  i5 = i5 + 1 | 0;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _png_warning(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i6;
 if (!i2) i1 = 0; else {
  if ((HEAP8[i4 >> 0] | 0) == 35) if ((HEAP8[i4 + 1 >> 0] | 0) == 32) i1 = 1; else if ((HEAP8[i4 + 2 >> 0] | 0) == 32) i1 = 2; else if ((HEAP8[i4 + 3 >> 0] | 0) == 32) i1 = 3; else if ((HEAP8[i4 + 4 >> 0] | 0) == 32) i1 = 4; else if ((HEAP8[i4 + 5 >> 0] | 0) == 32) i1 = 5; else if ((HEAP8[i4 + 6 >> 0] | 0) == 32) i1 = 6; else if ((HEAP8[i4 + 7 >> 0] | 0) == 32) i1 = 7; else if ((HEAP8[i4 + 8 >> 0] | 0) == 32) i1 = 8; else if ((HEAP8[i4 + 9 >> 0] | 0) == 32) i1 = 9; else if ((HEAP8[i4 + 10 >> 0] | 0) == 32) i1 = 10; else if ((HEAP8[i4 + 11 >> 0] | 0) == 32) i1 = 11; else if ((HEAP8[i4 + 12 >> 0] | 0) == 32) i1 = 12; else if ((HEAP8[i4 + 13 >> 0] | 0) == 32) i1 = 13; else i1 = (HEAP8[i4 + 14 >> 0] | 0) == 32 ? 14 : 15; else i1 = 0;
  i3 = HEAP32[i2 + 172 >> 2] | 0;
  if (i3) {
   FUNCTION_TABLE_vii[i3 & 127](i2, i4 + i1 | 0);
   STACKTOP = i6;
   return;
  }
 }
 i3 = HEAP32[6836] | 0;
 HEAP32[i5 >> 2] = i4 + i1;
 _fprintf(i3, 60584, i5) | 0;
 _fputc(10, i3) | 0;
 STACKTOP = i6;
 return;
}

function _png_read_chunk_header(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5;
 i4 = i2 + 800 | 0;
 HEAP32[i4 >> 2] = 33;
 _png_read_data(i2, i1, 8);
 i3 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 if ((i3 | 0) < 0) _png_error(i2, 63585);
 i7 = i1 + 4 | 0;
 i6 = i2 + 376 | 0;
 HEAP32[i6 >> 2] = (HEAPU8[i1 + 5 >> 0] | 0) << 16 | (HEAPU8[i7 >> 0] | 0) << 24 | (HEAPU8[i1 + 6 >> 0] | 0) << 8 | (HEAPU8[i1 + 7 >> 0] | 0);
 _png_reset_crc(i2);
 _png_calculate_crc(i2, i7, 4);
 i1 = HEAP32[i6 >> 2] | 0;
 i6 = i1 & 255;
 if ((i6 + -65 | 0) >>> 0 > 57 | (i6 + -91 | 0) >>> 0 < 6) _png_chunk_error(i2, 65425);
 i7 = i1 >>> 8 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i2, 65425);
 i7 = i1 >>> 16 & 255;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i2, 65425);
 i7 = i1 >>> 24;
 if ((i7 + -65 | 0) >>> 0 > 57 | (i7 + -91 | 0) >>> 0 < 6) _png_chunk_error(i2, 65425); else {
  HEAP32[i4 >> 2] = 65;
  STACKTOP = i5;
  return i3 | 0;
 }
 return 0;
}

function _copy_transl_565(i4, i6, i19, i1, i2) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0;
 if ((i19 | 0) <= 0) {
  i21 = i19 << 2;
  return i21 | 0;
 }
 i20 = i1 + 12 | 0;
 i21 = HEAPU8[i1 + 32 >> 0] | 0;
 i14 = i1 + 16 | 0;
 i15 = HEAPU8[i1 + 33 >> 0] | 0;
 i16 = i1 + 20 | 0;
 i17 = HEAPU8[i1 + 34 >> 0] | 0;
 i18 = i1 + 24 | 0;
 i7 = HEAPU8[i1 + 35 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i13 = HEAPU8[i2 + 34 >> 0] | 0;
 i5 = i2 + 24 | 0;
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i4 = HEAP32[i1 >> 2] | 0;
  i6 = (HEAP32[i14 >> 2] & i4) >>> i15 >>> i10 << i11 | (HEAP32[i20 >> 2] & i4) >>> i21 >>> i8 << i9 | HEAP32[i5 >> 2] | (HEAP32[i16 >> 2] & i4) >>> i17 >>> i12 << i13;
  HEAP32[i2 >> 2] = i6 & 63519 | (HEAP32[i18 >> 2] & i4) >>> i7 << 2 & 2016 | i6 << 16 & 132120576;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i19 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i21 = i19 << 2;
 return i21 | 0;
}

function _copy_transl_555(i4, i6, i19, i1, i2) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0;
 if ((i19 | 0) <= 0) {
  i21 = i19 << 2;
  return i21 | 0;
 }
 i20 = i1 + 12 | 0;
 i21 = HEAPU8[i1 + 32 >> 0] | 0;
 i14 = i1 + 16 | 0;
 i15 = HEAPU8[i1 + 33 >> 0] | 0;
 i16 = i1 + 20 | 0;
 i17 = HEAPU8[i1 + 34 >> 0] | 0;
 i18 = i1 + 24 | 0;
 i7 = HEAPU8[i1 + 35 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i13 = HEAPU8[i2 + 34 >> 0] | 0;
 i5 = i2 + 24 | 0;
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i4 = HEAP32[i1 >> 2] | 0;
  i6 = (HEAP32[i14 >> 2] & i4) >>> i15 >>> i10 << i11 | (HEAP32[i20 >> 2] & i4) >>> i21 >>> i8 << i9 | HEAP32[i5 >> 2] | (HEAP32[i16 >> 2] & i4) >>> i17 >>> i12 << i13;
  HEAP32[i2 >> 2] = i6 & 64543 | (HEAP32[i18 >> 2] & i4) >>> i7 << 2 & 992 | i6 << 16 & 65011712;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i19 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i21 = i19 << 2;
 return i21 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i8;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i7, i6);
 do if (HEAP8[i7 >> 0] | 0) {
  i2 = HEAP32[i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  i3 = i2;
  if (i2 | 0) {
   i4 = i3 + 24 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) {
    i5 = HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] | 0;
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
    i1 = FUNCTION_TABLE_iii[i5 & 63](i3, i1) | 0;
   } else {
    HEAP32[i4 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i1;
    i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) | 0;
   }
   if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
  }
  i5 = i6 + (HEAP32[(HEAP32[i6 >> 2] | 0) + -12 >> 2] | 0) | 0;
  __ZNSt3__28ios_base5clearEj(i5, HEAP32[i5 + 16 >> 2] | 1);
 } while (0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i7);
 STACKTOP = i8;
 return i6 | 0;
}

function __ZNSt3__212__deque_baseIP11SDL_TextureNS_9allocatorIS2_EEE5clearEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = i1 + 4 | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 i11 = i1 + 16 | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i4 = i2 + (i3 >>> 10 << 2) | 0;
 i10 = i1 + 8 | 0;
 i8 = HEAP32[i10 >> 2] | 0;
 i6 = i8;
 i7 = i2;
 if ((i8 | 0) == (i2 | 0)) {
  i8 = 0;
  i5 = i1 + 20 | 0;
  i1 = 0;
 } else {
  i5 = i1 + 20 | 0;
  i8 = i3 + (HEAP32[i5 >> 2] | 0) | 0;
  i8 = (HEAP32[i2 + (i8 >>> 10 << 2) >> 2] | 0) + ((i8 & 1023) << 2) | 0;
  i1 = (HEAP32[i4 >> 2] | 0) + ((i3 & 1023) << 2) | 0;
 }
 L5 : while (1) {
  do {
   if ((i8 | 0) == (i1 | 0)) break L5;
   i1 = i1 + 4 | 0;
  } while ((i1 - (HEAP32[i4 >> 2] | 0) | 0) != 4096);
  i1 = i4 + 4 | 0;
  i4 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i1 = i6 - i7 >> 2;
 if (i1 >>> 0 > 2) do {
  __ZdlPv(HEAP32[i2 >> 2] | 0);
  i2 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
  HEAP32[i9 >> 2] = i2;
  i1 = (HEAP32[i10 >> 2] | 0) - i2 >> 2;
 } while (i1 >>> 0 > 2);
 switch (i1 | 0) {
 case 1:
  {
   i1 = 512;
   break;
  }
 case 2:
  {
   i1 = 1024;
   break;
  }
 default:
  return;
 }
 HEAP32[i11 >> 2] = i1;
 return;
}

function __ZN14TextureManager11LoadTextureEPKcb(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i6 = i3 + 4 | 0;
 i1 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(82748, 39536, 5) | 0;
 i1 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i1, i4, _strlen(i4) | 0) | 0;
 __ZNKSt3__28ios_base6getlocEv(i6, i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 i5 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 83620) | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 28 >> 2] & 63](i5, 10) | 0;
 __ZNSt3__26localeD2Ev(i6);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc(i1, i5) | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
 i1 = _IMG_Load(i4) | 0;
 if (!i4) {
  HEAP32[i2 >> 2] = _SDL_GetError() | 0;
  _printf(39522, i2) | 0;
  i6 = 0;
  STACKTOP = i3;
  return i6 | 0;
 } else {
  i6 = _SDL_CreateTextureFromSurface(HEAP32[19464] | 0, i1) | 0;
  _SDL_FreeSurface(i1);
  STACKTOP = i3;
  return i6 | 0;
 }
 return 0;
}

function _GLES2_UpdateClipRect(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i5;
 i4 = HEAP32[i1 + 320 >> 2] | 0;
 if ((HEAP32[19486] | 0) != (HEAP32[i4 >> 2] | 0)) {
  STACKTOP = i5;
  return 0;
 }
 if (!(HEAP32[i1 + 280 >> 2] | 0)) {
  FUNCTION_TABLE_vi[HEAP32[i4 + 68 >> 2] & 511](3089);
  STACKTOP = i5;
  return 0;
 }
 i2 = i1 + 248 | 0;
 FUNCTION_TABLE_vi[HEAP32[i4 + 80 >> 2] & 511](3089);
 if (!(HEAP32[i1 + 308 >> 2] | 0)) {
  _SDL_GL_GetDrawableSize(HEAP32[i1 + 188 >> 2] | 0, i5 + 4 | 0, i3);
  i6 = HEAP32[i1 + 260 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[i4 + 144 >> 2] & 63]((HEAP32[i2 >> 2] | 0) + (HEAP32[i1 + 216 >> 2] | 0) | 0, (HEAP32[i3 >> 2] | 0) - (HEAP32[i1 + 220 >> 2] | 0) - (HEAP32[i1 + 252 >> 2] | 0) - i6 | 0, HEAP32[i1 + 256 >> 2] | 0, i6);
  STACKTOP = i5;
  return 0;
 } else {
  FUNCTION_TABLE_viiii[HEAP32[i4 + 144 >> 2] & 63]((HEAP32[i2 >> 2] | 0) + (HEAP32[i1 + 216 >> 2] | 0) | 0, (HEAP32[i1 + 252 >> 2] | 0) + (HEAP32[i1 + 220 >> 2] | 0) | 0, HEAP32[i1 + 256 >> 2] | 0, HEAP32[i1 + 260 >> 2] | 0);
  STACKTOP = i5;
  return 0;
 }
 return 0;
}

function _SDL_BlitCopy(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = Math_imul(HEAP32[i3 + 24 >> 2] | 0, HEAPU8[(HEAP32[i3 + 44 >> 2] | 0) + 9 >> 0] | 0) | 0;
 i4 = HEAP32[i3 + 28 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i3 + 20 >> 2] | 0;
 i9 = HEAP32[i3 + 12 >> 2] | 0;
 i8 = HEAP32[i3 + 32 >> 2] | 0;
 i7 = i2 >>> 0 < i1 >>> 0;
 if ((i7 ? i1 : i2) >>> 0 >= ((i7 ? i2 : i1) + (Math_imul(i7 ? i9 : i8, i4) | 0) | 0) >>> 0) {
  if (!i4) return; else i3 = i4;
  while (1) {
   i3 = i3 + -1 | 0;
   _SDL_memcpy(i1, i2, i10) | 0;
   if (!i3) break; else {
    i1 = i1 + i8 | 0;
    i2 = i2 + i9 | 0;
   }
  }
  return;
 }
 if (i1 >>> 0 < i2 >>> 0) {
  if (!i4) return; else i3 = i4;
  while (1) {
   i3 = i3 + -1 | 0;
   _SDL_memmove(i1, i2, i10) | 0;
   if (!i3) break; else {
    i2 = i2 + i9 | 0;
    i1 = i1 + i8 | 0;
   }
  }
  return;
 }
 i5 = i4 + -1 | 0;
 if (!i4) return;
 i6 = 0 - i9 | 0;
 i7 = 0 - i8 | 0;
 i3 = i1 + (Math_imul(i8, i5) | 0) | 0;
 i1 = i2 + (Math_imul(i9, i5) | 0) | 0;
 while (1) {
  i4 = i4 + -1 | 0;
  _SDL_memmove(i3, i1, i10) | 0;
  if (!i4) break; else {
   i3 = i3 + i7 | 0;
   i1 = i1 + i6 | 0;
  }
 }
 return;
}

function _png_icc_check_tag_table(i6, i7, i8, i10, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i11 = 0, i12 = 0;
 i11 = 0;
 i9 = (HEAPU8[i1 + 129 >> 0] | 0) << 16 | (HEAPU8[i1 + 128 >> 0] | 0) << 24 | (HEAPU8[i1 + 130 >> 0] | 0) << 8 | (HEAPU8[i1 + 131 >> 0] | 0);
 if (!i9) {
  i11 = 1;
  return i11 | 0;
 }
 i5 = 0;
 i1 = i1 + 132 | 0;
 while (1) {
  i2 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
  i12 = HEAPU8[i1 + 7 >> 0] | 0;
  i3 = (HEAPU8[i1 + 5 >> 0] | 0) << 16 | (HEAPU8[i1 + 4 >> 0] | 0) << 24 | (HEAPU8[i1 + 6 >> 0] | 0) << 8 | i12;
  i4 = (HEAPU8[i1 + 9 >> 0] | 0) << 16 | (HEAPU8[i1 + 8 >> 0] | 0) << 24 | (HEAPU8[i1 + 10 >> 0] | 0) << 8 | (HEAPU8[i1 + 11 >> 0] | 0);
  if (i12 & 3 | 0) _png_icc_profile_error(i6, 0, i8, i2, 61671);
  if (i3 >>> 0 > i10 >>> 0 | i4 >>> 0 > (i10 - i3 | 0) >>> 0) break;
  i5 = i5 + 1 | 0;
  if (i5 >>> 0 >= i9 >>> 0) {
   i1 = 1;
   i11 = 8;
   break;
  } else i1 = i1 + 12 | 0;
 }
 if ((i11 | 0) == 8) return i1 | 0;
 _png_icc_profile_error(i6, i7, i8, i2, 61713);
 i12 = 0;
 return i12 | 0;
}

function _SDL_PrivateJoystickButton(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i6 = i7;
 switch (i5 << 24 >> 24) {
 case 1:
  {
   i1 = 1539;
   break;
  }
 case 0:
  {
   i1 = 1540;
   break;
  }
 default:
  {
   i6 = 0;
   STACKTOP = i7;
   return i6 | 0;
  }
 }
 HEAP32[i6 >> 2] = i1;
 i1 = i4 & 255;
 if ((HEAP32[i3 + 36 >> 2] | 0) <= (i1 | 0)) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = i3 + 40 | 0;
 if ((HEAP8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] | 0) == i5 << 24 >> 24) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 if (!(HEAP32[20468] | 0)) if (_SDL_WasInit(32) | 0) if (i5 << 24 >> 24 == 1 & (_SDL_GetKeyboardFocus() | 0) == 0) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP8[(HEAP32[i2 >> 2] | 0) + i1 >> 0] = i5;
 if ((_SDL_EventState(HEAP32[i6 >> 2] | 0, -1) | 0) << 24 >> 24 != 1) {
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 HEAP32[i6 + 8 >> 2] = HEAP32[i3 >> 2];
 HEAP8[i6 + 12 >> 0] = i4;
 HEAP8[i6 + 13 >> 0] = i5;
 i6 = (_SDL_PushEvent(i6) | 0) == 1 & 1;
 STACKTOP = i7;
 return i6 | 0;
}

function _memchr(i2, i5, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i1 | 0) != 0;
 L1 : do if (i3 & (i2 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i2 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i2 = i2 + 1 | 0;
   i1 = i1 + -1 | 0;
   i3 = (i1 | 0) != 0;
   if (!(i3 & (i2 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i1 = 0;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i2 >> 0] | 0) != i4 << 24 >> 24) {
   i3 = Math_imul(i6, 16843009) | 0;
   L11 : do if (i1 >>> 0 > 3) while (1) {
    i6 = HEAP32[i2 >> 2] ^ i3;
    if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009 | 0) break;
    i2 = i2 + 4 | 0;
    i1 = i1 + -4 | 0;
    if (i1 >>> 0 <= 3) {
     i7 = 11;
     break L11;
    }
   } else i7 = 11; while (0);
   if ((i7 | 0) == 11) if (!i1) {
    i1 = 0;
    break;
   }
   while (1) {
    if ((HEAP8[i2 >> 0] | 0) == i4 << 24 >> 24) break L8;
    i2 = i2 + 1 | 0;
    i1 = i1 + -1 | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
   }
  }
 } while (0);
 return (i1 | 0 ? i2 : 0) | 0;
}

function _SDL_SetTextureAlphaMod(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 L1 : do if (i3 << 24 >> 24 == -1) while (1) {
  if (!i1) {
   i5 = 7;
   break L1;
  }
  if ((HEAP32[i1 >> 2] | 0) != 85557) {
   i5 = 7;
   break L1;
  }
  i2 = i1 + 20 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -3;
  HEAP8[i1 + 31 >> 0] = -1;
  i2 = HEAP32[i1 + 36 >> 2] | 0;
  if (!i2) {
   i3 = i1;
   break;
  } else i1 = i2;
 } else while (1) {
  if (!i1) {
   i5 = 7;
   break L1;
  }
  if ((HEAP32[i1 >> 2] | 0) != 85557) {
   i5 = 7;
   break L1;
  }
  i2 = i1 + 20 | 0;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
  HEAP8[i1 + 31 >> 0] = i3;
  i2 = HEAP32[i1 + 36 >> 2] | 0;
  if (!i2) {
   i3 = i1;
   break;
  } else i1 = i2;
 } while (0);
 if ((i5 | 0) == 7) {
  _SDL_SetError(41358, i4) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i3 + 32 >> 2] | 0;
 i2 = HEAP32[i1 + 20 >> 2] | 0;
 if (!i2) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i5 = FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _png_colorspace_endpoints_match(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 24 >> 2] | 0;
 i4 = HEAP32[i2 + 24 >> 2] | 0;
 if ((i5 | 0) < (i4 - i3 | 0) | (i5 | 0) > (i4 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 28 >> 2] | 0;
 i5 = HEAP32[i2 + 28 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i5 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 12 >> 2] | 0;
 i5 = HEAP32[i2 + 12 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0;
 i4 = HEAP32[i1 + 16 >> 2] | 0;
 i5 = HEAP32[i2 + 16 >> 2] | 0;
 if ((i4 | 0) < (i5 - i3 | 0) | (i4 | 0) > (i5 + i3 | 0)) return 0; else {
  i4 = HEAP32[i1 + 20 >> 2] | 0;
  i5 = HEAP32[i2 + 20 >> 2] | 0;
  return (i4 | 0) <= (i5 + i3 | 0) & (i4 | 0) >= (i5 - i3 | 0) & 1 | 0;
 }
 return 0;
}

function _png_handle_hIST(i4, i5, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(528);
 i6 = i8;
 i7 = i8 + 512 | 0;
 i1 = HEAP32[i4 + 208 >> 2] | 0;
 if (!(i1 & 1)) _png_chunk_error(i4, 63643);
 if ((i1 & 6 | 0) != 2) {
  _png_crc_finish(i4, i2) | 0;
  _png_chunk_benign_error(i4, 64026);
  STACKTOP = i8;
  return;
 }
 if (i5 | 0) if (HEAP32[i5 + 8 >> 2] & 64 | 0) {
  _png_crc_finish(i4, i2) | 0;
  _png_chunk_benign_error(i4, 63980);
  STACKTOP = i8;
  return;
 }
 i3 = i2 >>> 1;
 if (i2 >>> 0 > 513 ? 1 : (i3 | 0) != (HEAPU16[i4 + 420 >> 1] | 0 | 0)) {
  _png_crc_finish(i4, i2) | 0;
  _png_chunk_benign_error(i4, 63990);
  STACKTOP = i8;
  return;
 }
 if (i3 | 0) {
  i2 = i7 + 1 | 0;
  i1 = 0;
  do {
   _png_read_data(i4, i7, 2);
   _png_calculate_crc(i4, i7, 2);
   HEAP16[i6 + (i1 << 1) >> 1] = (HEAPU8[i7 >> 0] | 0) << 8 | (HEAPU8[i2 >> 0] | 0);
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i3 | 0));
 }
 if (_png_crc_finish(i4, 0) | 0) {
  STACKTOP = i8;
  return;
 }
 _png_set_hIST(i4, i5, i6);
 STACKTOP = i8;
 return;
}

function _SDL_GetDisplayBounds(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i6 + 8 | 0;
 i3 = HEAP32[19487] | 0;
 if (!i3) {
  _SDL_SetError(40203, i6) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i3 + 264 >> 2] | 0;
 if (!((i4 | 0) > -1 & (i1 | 0) > (i4 | 0))) {
  HEAP32[i2 >> 2] = i1 + -1;
  _SDL_SetError(47108, i2) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!i5) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i2 = HEAP32[i3 + 268 >> 2] | 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 if (i1 | 0) if (!(FUNCTION_TABLE_iiii[i1 & 63](i3, i2 + (i4 * 68 | 0) | 0, i5) | 0)) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (!i4) {
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  i1 = i5 + 8 | 0;
 } else {
  _SDL_GetDisplayBounds(i4 + -1 | 0, i5) | 0;
  i1 = i5 + 8 | 0;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + (HEAP32[i1 >> 2] | 0);
 }
 i4 = i2 + (i4 * 68 | 0) | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 + 40 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i4 + 44 >> 2];
 i5 = 0;
 STACKTOP = i6;
 return i5 | 0;
}

function _SDL_MapRGB(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i2) {
  i9 = (i4 & 255) >>> (HEAPU8[i1 + 29 >> 0] | 0) << HEAPU8[i1 + 33 >> 0] | (i3 & 255) >>> (HEAPU8[i1 + 28 >> 0] | 0) << HEAPU8[i1 + 32 >> 0] | HEAP32[i1 + 24 >> 2] | (i5 & 255) >>> (HEAPU8[i1 + 30 >> 0] | 0) << HEAPU8[i1 + 34 >> 0];
  return i9 | 0;
 }
 i9 = HEAP32[i2 >> 2] | 0;
 L5 : do if ((i9 | 0) > 0) {
  i8 = HEAP32[i2 + 4 >> 2] | 0;
  i7 = i3 & 255;
  i6 = i4 & 255;
  i5 = i5 & 255;
  i4 = 0;
  i2 = -1;
  i1 = 0;
  do {
   i3 = i8 + (i4 << 2) | 0;
   i11 = (HEAPU8[i3 >> 0] | 0) - i7 | 0;
   i12 = (HEAPU8[i3 + 1 >> 0] | 0) - i6 | 0;
   i10 = (HEAPU8[i3 + 2 >> 0] | 0) - i5 | 0;
   i3 = (HEAPU8[i3 + 3 >> 0] | 0) + -255 | 0;
   i3 = (Math_imul(i12, i12) | 0) + (Math_imul(i11, i11) | 0) + (Math_imul(i10, i10) | 0) + (Math_imul(i3, i3) | 0) | 0;
   if (i3 >>> 0 < i2 >>> 0) {
    i1 = i4 & 255;
    if (!i3) break L5; else i2 = i3;
   }
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) < (i9 | 0));
 } else i1 = 0; while (0);
 i12 = i1 & 255;
 return i12 | 0;
}

function _SDL_StartEventLoop() {
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[19523] | 0;
 if (!i1) {
  i1 = _SDL_calloc(1, 32) | 0;
  HEAP32[19523] = i1;
  if (!i1) i3 = 6; else {
   i2 = HEAP32[i1 >> 2] | 0;
   i3 = 5;
  }
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  if (!(i2 & 8)) i3 = 5; else i3 = 7;
 }
 if ((i3 | 0) == 5) {
  HEAP32[i1 >> 2] = i2 | 8;
  _SDL_FlushEvents(771, 771);
  i1 = HEAP32[19523] | 0;
  i3 = 6;
 }
 if ((i3 | 0) == 6) if (!i1) {
  i1 = _SDL_calloc(1, 32) | 0;
  HEAP32[19523] = i1;
  if (i1 | 0) {
   i2 = HEAP32[i1 >> 2] | 0;
   i3 = 10;
  }
 } else i3 = 7;
 if ((i3 | 0) == 7) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (!(i2 & 4)) i3 = 10;
 }
 if ((i3 | 0) == 10) {
  HEAP32[i1 >> 2] = i2 | 4;
  _SDL_FlushEvents(770, 770);
 }
 i2 = HEAP32[19522] | 0;
 do if (!i2) {
  i2 = _SDL_calloc(1, 32) | 0;
  HEAP32[19522] = i2;
  if (!i2) {
   _SDL_AtomicSet(15136, 1) | 0;
   return 0;
  } else {
   i1 = HEAP32[i2 >> 2] | 0;
   break;
  }
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 & 2) {
   _SDL_AtomicSet(15136, 1) | 0;
   return 0;
  }
 } while (0);
 HEAP32[i2 >> 2] = i1 | 2;
 _SDL_FlushEvents(513, 513);
 _SDL_AtomicSet(15136, 1) | 0;
 return 0;
}

function _Emscripten_HandleKeyPress(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 i1 = HEAP32[i3 + 152 >> 2] | 0;
 do if (i1 >>> 0 < 128) {
  HEAP8[i2 >> 0] = i1;
  i1 = 1;
 } else {
  if (i1 >>> 0 < 2048) {
   HEAP8[i2 >> 0] = i1 >>> 6 & 31 | 192;
   HEAP8[i2 + 1 >> 0] = i1 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i1 >>> 0 < 65536) {
   HEAP8[i2 >> 0] = i1 >>> 12 & 15 | 224;
   HEAP8[i2 + 1 >> 0] = i1 >>> 6 & 63 | 128;
   HEAP8[i2 + 2 >> 0] = i1 & 63 | 128;
   i1 = 3;
   break;
  }
  if (i1 >>> 0 < 1114112) {
   HEAP8[i2 >> 0] = i1 >>> 18 | 240;
   HEAP8[i2 + 1 >> 0] = i1 >>> 12 & 63 | 128;
   HEAP8[i2 + 2 >> 0] = i1 >>> 6 & 63 | 128;
   HEAP8[i2 + 3 >> 0] = i1 & 63 | 128;
   i1 = 4;
   break;
  } else {
   i3 = _SDL_EventState(771, -1) | 0;
   i3 = i3 << 24 >> 24 == 1;
   i3 = i3 & 1;
   STACKTOP = i4;
   return i3 | 0;
  }
 } while (0);
 HEAP8[i2 + i1 >> 0] = 0;
 _SDL_SendKeyboardText(i2) | 0;
 i3 = _SDL_EventState(771, -1) | 0;
 i3 = i3 << 24 >> 24 == 1;
 i3 = i3 & 1;
 STACKTOP = i4;
 return i3 | 0;
}

function _Emscripten_HandleMouseMove(i1, i6, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 i1 = i5 + 16 | 0;
 i9 = i5 + 8 | 0;
 i7 = i5;
 _emscripten_get_element_css_size(0, i9 | 0, i7 | 0) | 0;
 i2 = i2 + 4 | 0;
 i8 = HEAP32[i2 >> 2] | 0;
 d3 = +(HEAP32[i8 + 24 >> 2] | 0) / +HEAPF64[i9 >> 3];
 d4 = +(HEAP32[i8 + 28 >> 2] | 0) / +HEAPF64[i7 >> 3];
 i7 = (_emscripten_get_pointerlock_status(i1 | 0) | 0) == 0;
 i1 = i7 ? HEAP32[i1 >> 2] | 0 : 0;
 if (!i1) {
  i8 = ~~(d3 * +(HEAP32[i6 + 60 >> 2] | 0));
  i9 = ~~(d4 * +(HEAP32[i6 + 64 >> 2] | 0));
  i7 = HEAP32[i2 >> 2] | 0;
  _SDL_SendMouseMotion(i7, 0, i1, i8, i9) | 0;
  STACKTOP = i5;
  return 0;
 } else {
  d3 = +HEAPF64[9598] + d3 * +(HEAP32[i6 + 44 >> 2] | 0);
  d4 = +HEAPF64[9599] + d4 * +(HEAP32[i6 + 48 >> 2] | 0);
  i8 = ~~d3;
  HEAPF64[9598] = d3 - +(i8 | 0);
  i9 = ~~d4;
  HEAPF64[9599] = d4 - +(i9 | 0);
  i7 = HEAP32[i2 >> 2] | 0;
  _SDL_SendMouseMotion(i7, 0, i1, i8, i9) | 0;
  STACKTOP = i5;
  return 0;
 }
 return 0;
}

function _png_handle_tIME(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i8 + 8 | 0;
 i5 = i8;
 i6 = i1 + 208 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!(i7 & 1)) _png_chunk_error(i1, 63643);
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 512 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63980);
  STACKTOP = i8;
  return;
 }
 if (i7 & 4 | 0) HEAP32[i6 >> 2] = i7 | 8;
 if ((i3 | 0) != 7) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63990);
  STACKTOP = i8;
  return;
 }
 _png_read_data(i1, i4, 7);
 _png_calculate_crc(i1, i4, 7);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i8;
  return;
 }
 HEAP8[i5 + 6 >> 0] = HEAP8[i4 + 6 >> 0] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[i4 + 5 >> 0] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[i4 + 4 >> 0] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[i4 + 3 >> 0] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[i4 + 2 >> 0] | 0;
 HEAP16[i5 >> 1] = (HEAPU8[i4 >> 0] | 0) << 8 | (HEAPU8[i4 + 1 >> 0] | 0);
 _png_set_tIME(i1, i2, i5);
 STACKTOP = i8;
 return;
}

function _png_handle_pHYs(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 i5 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i5 & 1)) _png_chunk_error(i1, 63643);
 if (i5 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 64026);
  STACKTOP = i6;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 128 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63980);
  STACKTOP = i6;
  return;
 }
 if ((i3 | 0) != 9) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63990);
  STACKTOP = i6;
  return;
 }
 _png_read_data(i1, i4, 9);
 _png_calculate_crc(i1, i4, 9);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i6;
  return;
 }
 _png_set_pHYs(i1, i2, (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0), (HEAPU8[i4 + 5 >> 0] | 0) << 16 | (HEAPU8[i4 + 4 >> 0] | 0) << 24 | (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0), HEAPU8[i4 + 8 >> 0] | 0);
 STACKTOP = i6;
 return;
}

function _png_handle_oFFs(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 i5 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i5 & 1)) _png_chunk_error(i1, 63643);
 if (i5 & 4 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 64026);
  STACKTOP = i6;
  return;
 }
 if (i2 | 0) if (HEAP32[i2 + 8 >> 2] & 256 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63980);
  STACKTOP = i6;
  return;
 }
 if ((i3 | 0) != 9) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63990);
  STACKTOP = i6;
  return;
 }
 _png_read_data(i1, i4, 9);
 _png_calculate_crc(i1, i4, 9);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i6;
  return;
 }
 _png_set_oFFs(i1, i2, (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0), (HEAPU8[i4 + 5 >> 0] | 0) << 16 | (HEAPU8[i4 + 4 >> 0] | 0) << 24 | (HEAPU8[i4 + 6 >> 0] | 0) << 8 | (HEAPU8[i4 + 7 >> 0] | 0), HEAPU8[i4 + 8 >> 0] | 0);
 STACKTOP = i6;
 return;
}

function _SDL_AddAudioDevice(i6, i1, i2) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i7 = i8;
 i3 = _SDL_strlen(i1) | 0;
 i4 = _SDL_malloc(i3 + 9 | 0) | 0;
 i5 = (i4 | 0) == 0;
 do if (!i6) if (i5) {
  STACKTOP = i8;
  return;
 } else {
  HEAP32[i4 >> 2] = i2;
  _SDL_strlcpy(i4 + 8 | 0, i1, i3 + 1 | 0) | 0;
  HEAP32[i4 + 4 >> 2] = HEAP32[20458];
  HEAP32[20458] = i4;
  i1 = HEAP32[20456] | 0;
  HEAP32[20456] = i1 + 1;
  break;
 } else if (i5) {
  STACKTOP = i8;
  return;
 } else {
  HEAP32[i4 >> 2] = i2;
  _SDL_strlcpy(i4 + 8 | 0, i1, i3 + 1 | 0) | 0;
  HEAP32[i4 + 4 >> 2] = HEAP32[20459];
  HEAP32[20459] = i4;
  i1 = HEAP32[20457] | 0;
  HEAP32[20457] = i1 + 1;
  break;
 } while (0);
 if ((i1 | 0) == -1) {
  STACKTOP = i8;
  return;
 }
 if ((_SDL_EventState(4352, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = i8;
  return;
 }
 _SDL_memset(i7, 0, 56) | 0;
 HEAP32[i7 >> 2] = 4352;
 HEAP32[i7 + 8 >> 2] = i1;
 HEAP8[i7 + 12 >> 0] = i6;
 _SDL_PushEvent(i7) | 0;
 STACKTOP = i8;
 return;
}

function _Emscripten_UnregisterEventHandlers(i1) {
 i1 = i1 | 0;
 _emscripten_set_mousemove_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_mousedown_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_mouseup_callback(50431, 0, 0, 0) | 0;
 _emscripten_set_mouseenter_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_mouseleave_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_wheel_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_focus_callback(50441, 0, 0, 0) | 0;
 _emscripten_set_blur_callback(50441, 0, 0, 0) | 0;
 _emscripten_set_touchstart_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_touchend_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_touchmove_callback(50423, 0, 0, 0) | 0;
 _emscripten_set_touchcancel_callback(50423, 0, 0, 0) | 0;
 i1 = _SDL_GetHint(50449) | 0;
 i1 = i1 | 0 ? i1 : 50441;
 _emscripten_set_keydown_callback(i1 | 0, 0, 0, 0) | 0;
 _emscripten_set_keyup_callback(i1 | 0, 0, 0, 0) | 0;
 _emscripten_set_keypress_callback(i1 | 0, 0, 0, 0) | 0;
 _emscripten_set_fullscreenchange_callback(50431, 0, 0, 0) | 0;
 _emscripten_set_resize_callback(50441, 0, 0, 0) | 0;
 _emscripten_set_visibilitychange_callback(0, 0, 0) | 0;
 return;
}

function _SW_CreateTexture(i1, i7) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i1 = i6 + 20 | 0;
 i2 = i6 + 16 | 0;
 i3 = i6 + 12 | 0;
 i4 = i6 + 8 | 0;
 i5 = i6 + 4 | 0;
 if (!(_SDL_PixelFormatEnumToMasks(HEAP32[i7 + 4 >> 2] | 0, i1, i2, i3, i4, i5) | 0)) {
  i7 = _SDL_SetError(48469, i6) | 0;
  STACKTOP = i6;
  return i7 | 0;
 }
 i5 = _SDL_CreateRGBSurface(0, HEAP32[i7 + 12 >> 2] | 0, HEAP32[i7 + 16 >> 2] | 0, HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 i1 = i7 + 68 | 0;
 HEAP32[i1 >> 2] = i5;
 _SDL_SetSurfaceColorMod(i5, HEAP8[i7 + 28 >> 0] | 0, HEAP8[i7 + 29 >> 0] | 0, HEAP8[i7 + 30 >> 0] | 0) | 0;
 _SDL_SetSurfaceAlphaMod(HEAP32[i1 >> 2] | 0, HEAP8[i7 + 31 >> 0] | 0) | 0;
 _SDL_SetSurfaceBlendMode(HEAP32[i1 >> 2] | 0, HEAP32[i7 + 24 >> 2] | 0) | 0;
 if (!(HEAP32[i7 + 8 >> 2] | 0)) _SDL_SetSurfaceRLE(HEAP32[i1 >> 2] | 0, 1) | 0;
 i7 = ((HEAP32[i1 >> 2] | 0) == 0) << 31 >> 31;
 STACKTOP = i6;
 return i7 | 0;
}

function _copy_32(i4, i6, i18, i1, i2) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0, i20 = 0;
 if ((i18 | 0) <= 0) {
  i20 = i18 << 2;
  return i20 | 0;
 }
 i19 = i1 + 12 | 0;
 i20 = HEAPU8[i1 + 32 >> 0] | 0;
 i13 = i1 + 16 | 0;
 i14 = HEAPU8[i1 + 33 >> 0] | 0;
 i15 = i1 + 20 | 0;
 i16 = HEAPU8[i1 + 34 >> 0] | 0;
 i17 = i1 + 24 | 0;
 i7 = HEAPU8[i1 + 35 >> 0] | 0;
 i8 = HEAPU8[i2 + 28 >> 0] | 0;
 i9 = HEAPU8[i2 + 32 >> 0] | 0;
 i10 = HEAPU8[i2 + 29 >> 0] | 0;
 i11 = HEAPU8[i2 + 33 >> 0] | 0;
 i12 = HEAPU8[i2 + 30 >> 0] | 0;
 i5 = HEAPU8[i2 + 34 >> 0] | 0;
 i3 = 0;
 i2 = i4;
 i1 = i6;
 while (1) {
  i6 = HEAP32[i1 >> 2] | 0;
  HEAP32[i2 >> 2] = (HEAP32[i19 >> 2] & i6) >>> i20 >>> i8 << i9 | (HEAP32[i17 >> 2] & i6) >>> i7 << 24 | (HEAP32[i13 >> 2] & i6) >>> i14 >>> i10 << i11 | (HEAP32[i15 >> 2] & i6) >>> i16 >>> i12 << i5;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i18 | 0)) break; else {
   i2 = i2 + 4 | 0;
   i1 = i1 + 4 | 0;
  }
 }
 i20 = i18 << 2;
 return i20 | 0;
}

function __ZN14TextureManager11LoadTextureEPKc(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 i7 = i8 + 4 | 0;
 i1 = __Znwj(48) | 0;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i7 + 8 >> 2] = -2147483600;
 HEAP32[i7 + 4 >> 2] = 38;
 i2 = i1;
 i3 = 39483;
 i4 = i2 + 38 | 0;
 do {
  HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
  i2 = i2 + 1 | 0;
  i3 = i3 + 1 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP8[i1 + 38 >> 0] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i7, i5) | 0;
 i2 = i7 + 11 | 0;
 _emscripten_async_wget(((HEAP8[i2 >> 0] | 0) < 0 ? HEAP32[i7 >> 2] | 0 : i7) | 0, i5 | 0, 276, 277);
 i1 = _IMG_Load(i5) | 0;
 if (!i5) {
  HEAP32[i6 >> 2] = _SDL_GetError() | 0;
  _printf(39522, i6) | 0;
  i1 = 0;
 } else {
  i6 = _SDL_CreateTextureFromSurface(HEAP32[19464] | 0, i1) | 0;
  _SDL_FreeSurface(i1);
  i1 = i6;
 }
 if ((HEAP8[i2 >> 0] | 0) >= 0) {
  STACKTOP = i8;
  return i1 | 0;
 }
 __ZdlPv(HEAP32[i7 >> 2] | 0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i9;
 i8 = i9 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 i2 = i6 + 8 | 0;
 i5 = i2 + 3 | 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i3 = i1 << 24 >> 24 < 0;
 if (i3) {
  i4 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i4 = i1 & 255;
  i1 = 1;
 }
 if ((i4 | 0) == (i1 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i6, i1, 1, i1, i1, 0, 0);
  if ((HEAP8[i5 >> 0] | 0) < 0) i2 = 8; else i2 = 7;
 } else if (i3) i2 = 8; else i2 = 7;
 if ((i2 | 0) == 7) {
  HEAP8[i5 >> 0] = i4 + 1;
  i1 = i6;
 } else if ((i2 | 0) == 8) {
  i1 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 + 4 >> 2] = i4 + 1;
 }
 i6 = i1 + (i4 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i7);
 HEAP32[i8 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i6 + 4 | 0, i8);
 STACKTOP = i9;
 return;
}

function __ZNSt3__26vectorIP17ColliderComponentNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = i6 + 4 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 i10 = (HEAP32[i8 >> 2] | 0) - i9 | 0;
 i5 = i10 >> 2;
 i1 = i5 + 1 | 0;
 if (i1 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i6);
 i11 = i6 + 8 | 0;
 i4 = (HEAP32[i11 >> 2] | 0) - i9 | 0;
 i2 = i4 >> 1;
 i2 = i4 >> 2 >>> 0 < 536870911 ? (i2 >>> 0 < i1 >>> 0 ? i1 : i2) : 1073741823;
 do if (!i2) {
  i3 = 0;
  i4 = 0;
 } else if (i2 >>> 0 > 1073741823) {
  i11 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i11, 38941);
  HEAP32[i11 >> 2] = 35044;
  ___cxa_throw(i11 | 0, 2680, 272);
 } else {
  i4 = __Znwj(i2 << 2) | 0;
  i3 = i4;
  break;
 } while (0);
 i1 = i3 + (i5 << 2) | 0;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 if ((i10 | 0) > 0) _memcpy(i4 | 0, i9 | 0, i10 | 0) | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i8 >> 2] = i1 + 4;
 HEAP32[i11 >> 2] = i3 + (i2 << 2);
 if (!i9) return;
 __ZdlPv(i9);
 return;
}

function _SDL_GameControllerInit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i4 = i5;
 _SDL_GameControllerAddMapping(58002) | 0;
 i1 = _SDL_GetHint(58252) | 0;
 if (i1 | 0) if (HEAP8[i1 >> 0] | 0) {
  i2 = _SDL_strlen(i1) | 0;
  i3 = _SDL_malloc(i2 + 1 | 0) | 0;
  _SDL_memcpy(i3, i1, i2) | 0;
  HEAP8[i3 + i2 >> 0] = 0;
  if (i3 | 0) {
   i2 = _SDL_strchr(i3, 10) | 0;
   if (!i2) i1 = i3; else {
    i1 = i3;
    do {
     HEAP8[i2 >> 0] = 0;
     _SDL_GameControllerAddMapping(i1) | 0;
     i1 = i2 + 1 | 0;
     i2 = _SDL_strchr(i1, 10) | 0;
    } while ((i2 | 0) != 0);
   }
   _SDL_GameControllerAddMapping(i1) | 0;
  }
  _SDL_free(i3);
 }
 _SDL_AddEventWatch(41, 0);
 if ((_SDL_NumJoysticks() | 0) <= 0) {
  STACKTOP = i5;
  return 0;
 }
 i2 = i4 + 8 | 0;
 i1 = 0;
 do {
  if (_SDL_PrivateGetControllerMapping(i1) | 0) {
   HEAP32[i4 >> 2] = 1619;
   HEAP32[i2 >> 2] = i1;
   _SDL_PushEvent(i4) | 0;
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) < (_SDL_NumJoysticks() | 0));
 STACKTOP = i5;
 return 0;
}

function __ZN17ColliderComponent4initEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5;
 i1 = i3 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i6 = HEAP32[19475] | 0;
  HEAP32[19475] = i6 + 1;
  HEAP32[19476] = i6;
 }
 if (!(1 << HEAP32[19476] & HEAP32[i2 + 148 >> 2])) __ZN6Entity12addComponentI18TransformComponentJEEERT_DpOT0_(HEAP32[i1 >> 2] | 0) | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i6 = HEAP32[19475] | 0;
  HEAP32[19475] = i6 + 1;
  HEAP32[19476] = i6;
 }
 HEAP32[i3 + 36 >> 2] = HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2];
 HEAP32[i4 >> 2] = i3;
 i1 = HEAP32[19466] | 0;
 if (i1 >>> 0 < (HEAP32[19467] | 0) >>> 0) {
  HEAP32[i1 >> 2] = i3;
  HEAP32[19466] = (HEAP32[19466] | 0) + 4;
  STACKTOP = i5;
  return;
 } else {
  __ZNSt3__26vectorIP17ColliderComponentNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(77860, i4);
  STACKTOP = i5;
  return;
 }
}

function __ZNSt3__26vectorIP6EntityNS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRS2_EEEvDpOT_(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = i6 + 4 | 0;
 i9 = HEAP32[i6 >> 2] | 0;
 i10 = (HEAP32[i8 >> 2] | 0) - i9 | 0;
 i5 = i10 >> 2;
 i1 = i5 + 1 | 0;
 if (i1 >>> 0 > 1073741823) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i6);
 i11 = i6 + 8 | 0;
 i4 = (HEAP32[i11 >> 2] | 0) - i9 | 0;
 i2 = i4 >> 1;
 i2 = i4 >> 2 >>> 0 < 536870911 ? (i2 >>> 0 < i1 >>> 0 ? i1 : i2) : 1073741823;
 do if (!i2) {
  i3 = 0;
  i4 = 0;
 } else if (i2 >>> 0 > 1073741823) {
  i11 = ___cxa_allocate_exception(8) | 0;
  __ZNSt11logic_errorC2EPKc(i11, 38941);
  HEAP32[i11 >> 2] = 35044;
  ___cxa_throw(i11 | 0, 2680, 272);
 } else {
  i4 = __Znwj(i2 << 2) | 0;
  i3 = i4;
  break;
 } while (0);
 i1 = i3 + (i5 << 2) | 0;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 if ((i10 | 0) > 0) _memcpy(i4 | 0, i9 | 0, i10 | 0) | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i8 >> 2] = i1 + 4;
 HEAP32[i11 >> 2] = i3 + (i2 << 2);
 if (!i9) return;
 __ZdlPv(i9);
 return;
}

function _fread(i3, i7, i1, i8) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0;
 i10 = 0;
 i9 = Math_imul(i1, i7) | 0;
 i1 = (i7 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i8 + 76 >> 2] | 0) > -1) i6 = ___lockfile(i8) | 0; else i6 = 0;
 i2 = i8 + 74 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i4 + 255 | i4;
 i2 = i8 + 4 | 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i5 = (HEAP32[i8 + 8 >> 2] | 0) - i4 | 0;
 if ((i5 | 0) > 0) {
  i5 = i5 >>> 0 < i9 >>> 0 ? i5 : i9;
  _memcpy(i3 | 0, i4 | 0, i5 | 0) | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + i5;
  i2 = i9 - i5 | 0;
  i3 = i3 + i5 | 0;
 } else i2 = i9;
 L7 : do if (!i2) i10 = 13; else {
  i5 = i8 + 32 | 0;
  while (1) {
   if (___toread(i8) | 0) break;
   i4 = FUNCTION_TABLE_iiii[HEAP32[i5 >> 2] & 63](i8, i3, i2) | 0;
   if ((i4 + 1 | 0) >>> 0 < 2) break;
   i2 = i2 - i4 | 0;
   if (!i2) {
    i10 = 13;
    break L7;
   } else i3 = i3 + i4 | 0;
  }
  if (i6 | 0) ___unlockfile(i8);
  i1 = ((i9 - i2 | 0) >>> 0) / (i7 >>> 0) | 0;
 } while (0);
 if ((i10 | 0) == 13) if (i6) ___unlockfile(i8);
 return i1 | 0;
}

function _vsnprintf(i2, i1, i8, i9) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0;
 i7 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i3 = i11 + 124 | 0;
 i10 = i11;
 i4 = i10;
 i5 = 27732;
 i6 = i4 + 124 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i2 = i3;
  i1 = 1;
  i7 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i1 = -1;
 } else i7 = 4;
 if ((i7 | 0) == 4) {
  i7 = -2 - i2 | 0;
  i7 = i1 >>> 0 > i7 >>> 0 ? i7 : i1;
  HEAP32[i10 + 48 >> 2] = i7;
  i3 = i10 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i10 + 44 >> 2] = i2;
  i1 = i2 + i7 | 0;
  i2 = i10 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i10 + 28 >> 2] = i1;
  i1 = _vfprintf(i10, i8, i9) | 0;
  if (i7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP8[i10 + (((i10 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function ___fwritex(i7, i2, i6) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = 0;
 i1 = i6 + 16 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) if (!(___towrite(i6) | 0)) {
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = 5;
 } else i1 = 0; else i4 = 5;
 L5 : do if ((i4 | 0) == 5) {
  i8 = i6 + 20 | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  i1 = i5;
  if ((i3 - i5 | 0) >>> 0 < i2 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i7, i2) | 0;
   break;
  }
  L10 : do if ((HEAP8[i6 + 75 >> 0] | 0) > -1) {
   i5 = i2;
   while (1) {
    if (!i5) {
     i4 = 0;
     i3 = i7;
     break L10;
    }
    i3 = i5 + -1 | 0;
    if ((HEAP8[i7 + i3 >> 0] | 0) == 10) break; else i5 = i3;
   }
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i7, i5) | 0;
   if (i1 >>> 0 < i5 >>> 0) break L5;
   i4 = i5;
   i3 = i7 + i5 | 0;
   i2 = i2 - i5 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
  } else {
   i4 = 0;
   i3 = i7;
  } while (0);
  _memcpy(i1 | 0, i3 | 0, i2 | 0) | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i2;
  i1 = i4 + i2 | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj(i7, i5, i6) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i10;
 i2 = i7 + 8 | 0;
 i9 = i2 + 3 | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 i4 = i1 << 24 >> 24 < 0;
 if (i4) {
  i3 = HEAP32[i7 + 4 >> 2] | 0;
  i1 = (HEAP32[i2 >> 2] & 2147483647) + -1 | 0;
 } else {
  i3 = i1 & 255;
  i1 = 1;
 }
 if ((i1 - i3 | 0) >>> 0 < i6 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i7, i1, i6 - i1 + i3 | 0, i3, i3, 0, i6, i5); else if (i6 | 0) {
  if (i4) i2 = HEAP32[i7 >> 2] | 0; else i2 = i7;
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i2 + (i3 << 2) | 0, i5, i6) | 0;
  i1 = i3 + i6 | 0;
  if ((HEAP8[i9 >> 0] | 0) < 0) HEAP32[i7 + 4 >> 2] = i1; else HEAP8[i9 >> 0] = i1;
  HEAP32[i8 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i2 + (i1 << 2) | 0, i8);
 }
 STACKTOP = i10;
 return i7 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 i7 = i8 + 1 | 0;
 HEAP8[i6 >> 0] = i1;
 i4 = i5 + 11 | 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 if (i2) {
  i3 = HEAP32[i5 + 4 >> 2] | 0;
  i1 = (HEAP32[i5 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i3 = i1 & 255;
  i1 = 10;
 }
 if ((i3 | 0) == (i1 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i5, i1, 1, i1, i1, 0, 0);
  if ((HEAP8[i4 >> 0] | 0) < 0) i2 = 8; else i2 = 7;
 } else if (i2) i2 = 8; else i2 = 7;
 if ((i2 | 0) == 7) {
  HEAP8[i4 >> 0] = i3 + 1;
  i1 = i5;
 } else if ((i2 | 0) == 8) {
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 + 4 >> 2] = i3 + 1;
 }
 i5 = i1 + i3 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5, i6);
 HEAP8[i7 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i5 + 1 | 0, i7);
 STACKTOP = i8;
 return;
}

function _SDL_GetRGB(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = i2 + 4 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (!i7) {
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 28 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 12 >> 2] & i1) >>> (HEAPU8[i2 + 32 >> 0] | 0)) >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 29 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 16 >> 2] & i1) >>> (HEAPU8[i2 + 33 >> 0] | 0)) >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[(HEAP32[5724 + ((HEAPU8[i2 + 30 >> 0] | 0) << 2) >> 2] | 0) + ((HEAP32[i2 + 20 >> 2] & i1) >>> (HEAPU8[i2 + 34 >> 0] | 0)) >> 0] | 0;
  return;
 }
 if ((HEAP32[i7 >> 2] | 0) >>> 0 > i1 >>> 0) {
  HEAP8[i3 >> 0] = HEAP8[(HEAP32[i7 + 4 >> 2] | 0) + (i1 << 2) >> 0] | 0;
  HEAP8[i4 >> 0] = HEAP8[(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + (i1 << 2) + 1 >> 0] | 0;
  HEAP8[i5 >> 0] = HEAP8[(HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0) + (i1 << 2) + 2 >> 0] | 0;
  return;
 } else {
  HEAP8[i5 >> 0] = 0;
  HEAP8[i4 >> 0] = 0;
  HEAP8[i3 >> 0] = 0;
  return;
 }
}

function _SDL_FreeSurface(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!i4) return;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 & 4 | 0) return;
 i2 = i4 + 56 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = i3 + -1;
 if ((i3 | 0) > 1) return;
 i3 = i4 + 28 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if ((i2 | 0) > 0) {
  while (1) {
   i1 = i2 + -1 | 0;
   HEAP32[i3 >> 2] = i1;
   if ((i2 | 0) == 1) {
    i2 = HEAP32[i4 >> 2] | 0;
    if (i2 & 2) {
     HEAP32[i4 >> 2] = i2 & -3;
     _SDL_RLESurface(i4) | 0;
     i1 = HEAP32[i3 >> 2] | 0;
    }
   }
   if ((i1 | 0) > 0) i2 = i1; else break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 }
 if (i1 & 2 | 0) _SDL_UnRLESurface(i4, 0);
 i1 = i4 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  if ((_SDL_SetPixelFormatPalette(i2, 0) | 0) >= 0) _SDL_InvalidateMap(HEAP32[i4 + 52 >> 2] | 0);
  _SDL_FreeFormat(HEAP32[i1 >> 2] | 0);
  HEAP32[i1 >> 2] = 0;
 }
 i1 = i4 + 52 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  _SDL_FreeBlitMap(i2);
  HEAP32[i1 >> 2] = 0;
 }
 if (!(HEAP32[i4 >> 2] & 1)) _SDL_free(HEAP32[i4 + 20 >> 2] | 0);
 _SDL_free(i4);
 return;
}

function _SDL_ConvertAudio(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1 + 16 | 0;
 if (!(HEAPU8[i2 >> 0] | HEAPU8[i2 + 1 >> 0] << 8 | HEAPU8[i2 + 2 >> 0] << 16 | HEAPU8[i2 + 3 >> 0] << 24)) {
  _SDL_SetError(56570, i3) | 0;
  i2 = -1;
  STACKTOP = i3;
  return i2 | 0;
 }
 i4 = i1 + 20 | 0;
 i4 = HEAPU8[i4 >> 0] | HEAPU8[i4 + 1 >> 0] << 8 | HEAPU8[i4 + 2 >> 0] << 16 | HEAPU8[i4 + 3 >> 0] << 24;
 i2 = i1 + 24 | 0;
 HEAP8[i2 >> 0] = i4;
 HEAP8[i2 + 1 >> 0] = i4 >> 8;
 HEAP8[i2 + 2 >> 0] = i4 >> 16;
 HEAP8[i2 + 3 >> 0] = i4 >> 24;
 i2 = i1 + 40 | 0;
 i2 = HEAPU8[i2 >> 0] | HEAPU8[i2 + 1 >> 0] << 8 | HEAPU8[i2 + 2 >> 0] << 16 | HEAPU8[i2 + 3 >> 0] << 24;
 if (!i2) {
  i4 = 0;
  STACKTOP = i3;
  return i4 | 0;
 }
 i4 = i1 + 80 | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP8[i4 + 1 >> 0] = 0;
 HEAP8[i4 + 2 >> 0] = 0;
 HEAP8[i4 + 3 >> 0] = 0;
 i4 = i1 + 4 | 0;
 FUNCTION_TABLE_vii[i2 & 127](i1, HEAPU8[i4 >> 0] | HEAPU8[i4 + 1 >> 0] << 8);
 i4 = 0;
 STACKTOP = i3;
 return i4 | 0;
}

function _png_read_filter_row_paeth_multibyte_pixel(i6, i7, i2) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i8 = ((HEAPU8[i6 + 11 >> 0] | 0) + 7 | 0) >>> 3;
 i5 = i7 + i8 | 0;
 if (!i8) i1 = i7; else {
  i3 = i2;
  i4 = i7;
  while (1) {
   i2 = i3 + 1 | 0;
   i1 = i4 + 1 | 0;
   HEAP8[i4 >> 0] = (HEAPU8[i3 >> 0] | 0) + (HEAPU8[i4 >> 0] | 0);
   if (i1 >>> 0 < i5 >>> 0) {
    i3 = i2;
    i4 = i1;
   } else break;
  }
 }
 i4 = i7 + (HEAP32[i6 + 4 >> 2] | 0) | 0;
 if (i1 >>> 0 >= i4 >>> 0) return;
 i3 = 0 - i8 | 0;
 while (1) {
  i5 = HEAPU8[i2 + i3 >> 0] | 0;
  i8 = HEAPU8[i1 + i3 >> 0] | 0;
  i7 = HEAPU8[i2 >> 0] | 0;
  i6 = i7 - i5 | 0;
  i11 = i8 - i5 | 0;
  i9 = (i6 | 0) < 0 ? 0 - i6 | 0 : i6;
  i10 = (i11 | 0) < 0 ? 0 - i11 | 0 : i11;
  i11 = i6 + i11 | 0;
  i6 = (i10 | 0) < (i9 | 0);
  HEAP8[i1 >> 0] = ((((i11 | 0) < 0 ? 0 - i11 | 0 : i11) | 0) < ((i6 ? i10 : i9) | 0) ? i5 : i6 ? i7 : i8) + (HEAPU8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
  if ((i1 | 0) == (i4 | 0)) break; else i2 = i2 + 1 | 0;
 }
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i10;
 i1 = i7 + 8 | 0;
 i6 = i1 + 3 | 0;
 i3 = HEAP8[i6 >> 0] | 0;
 i4 = i3 << 24 >> 24 < 0;
 if (i4) i2 = (HEAP32[i1 >> 2] & 2147483647) + -1 | 0; else i2 = 1;
 do if (i2 >>> 0 < i9 >>> 0) {
  if (i4) i1 = HEAP32[i7 + 4 >> 2] | 0; else i1 = i3 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i7, i2, i9 - i2 | 0, i1, 0, i1, i9, i8);
 } else {
  if (i4) i1 = HEAP32[i7 >> 2] | 0; else i1 = i7;
  __ZNSt3__211char_traitsIwE4moveEPwPKwj(i1, i8, i9) | 0;
  HEAP32[i5 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i1 + (i9 << 2) | 0, i5);
  if ((HEAP8[i6 >> 0] | 0) < 0) {
   HEAP32[i7 + 4 >> 2] = i9;
   break;
  } else {
   HEAP8[i6 >> 0] = i9;
   break;
  }
 } while (0);
 STACKTOP = i10;
 return i7 | 0;
}

function ___stdio_read(i5, i6, i7) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i1 = i9;
 i4 = i9 + 16 | 0;
 HEAP32[i4 >> 2] = i6;
 i2 = i4 + 4 | 0;
 i8 = i5 + 48 | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 HEAP32[i2 >> 2] = i7 - ((i10 | 0) != 0 & 1);
 i3 = i5 + 44 | 0;
 HEAP32[i4 + 8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i4 + 12 >> 2] = i10;
 HEAP32[i1 >> 2] = HEAP32[i5 + 60 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = 2;
 i1 = ___syscall_ret(___syscall145(145, i1 | 0) | 0) | 0;
 if ((i1 | 0) < 1) HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | i1 & 48 ^ 16; else {
  i4 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 > i4 >>> 0) {
   i2 = HEAP32[i3 >> 2] | 0;
   i3 = i5 + 4 | 0;
   HEAP32[i3 >> 2] = i2;
   HEAP32[i5 + 8 >> 2] = i2 + (i1 - i4);
   if (!(HEAP32[i8 >> 2] | 0)) i1 = i7; else {
    HEAP32[i3 >> 2] = i2 + 1;
    HEAP8[i6 + (i7 + -1) >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i7;
   }
  }
 }
 STACKTOP = i9;
 return i1 | 0;
}

function _png_inflate_claim(i5, i3) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i1 = i6;
 i4 = i5 + 220 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2 | 0) {
  HEAP8[i1 >> 0] = i2 >>> 24;
  HEAP8[i1 + 1 >> 0] = i2 >>> 16;
  HEAP8[i1 + 2 >> 0] = i2 >>> 8;
  HEAP8[i1 + 3 >> 0] = i2;
  _png_safecat(i1, 64, 4, 63892) | 0;
  _png_chunk_warning(i5, i1);
  HEAP32[i4 >> 2] = 0;
 }
 i1 = i5 + 224 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i5 + 228 >> 2] = 0;
 HEAP32[i5 + 236 >> 2] = 0;
 HEAP32[i5 + 240 >> 2] = 0;
 i2 = i5 + 212 | 0;
 if (!(HEAP32[i2 >> 2] & 2)) {
  i1 = _inflateInit_(i1, 63907, 56) | 0;
  if (!i1) {
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
   i2 = 7;
  } else i2 = 8;
 } else {
  i1 = _inflateReset(i1) | 0;
  if (!i1) i2 = 7; else i2 = 8;
 }
 if ((i2 | 0) == 7) {
  HEAP32[i4 >> 2] = i3;
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 } else if ((i2 | 0) == 8) {
  _png_zstream_error(i5, i1);
  i5 = i1;
  STACKTOP = i6;
  return i5 | 0;
 }
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i6, i3, i5) {
 i6 = i6 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i9;
 if (i3 | 0) {
  i8 = i6 + 11 | 0;
  i1 = HEAP8[i8 >> 0] | 0;
  if (i1 << 24 >> 24 < 0) {
   i4 = HEAP32[i6 + 4 >> 2] | 0;
   i2 = (HEAP32[i6 + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   i4 = i1 & 255;
   i2 = 10;
  }
  if ((i2 - i4 | 0) >>> 0 < i3 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i6, i2, i3 - i2 + i4 | 0, i4, i4, 0, 0);
   i1 = HEAP8[i8 >> 0] | 0;
  }
  if (i1 << 24 >> 24 < 0) i2 = HEAP32[i6 >> 2] | 0; else i2 = i6;
  __ZNSt3__211char_traitsIcE6assignEPcjc(i2 + i4 | 0, i3, i5) | 0;
  i1 = i4 + i3 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) HEAP32[i6 + 4 >> 2] = i1; else HEAP8[i8 >> 0] = i1;
  HEAP8[i7 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + i1 | 0, i7);
 }
 STACKTOP = i9;
 return i6 | 0;
}

function _SDL_GL_LoadLibrary(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  i4 = _SDL_SetError(40203, i5) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 do if (!(HEAP32[i1 + 388 >> 2] | 0)) {
  i2 = HEAP32[i1 + 164 >> 2] | 0;
  if (!i2) {
   i4 = _SDL_SetError(46488, i4) | 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i2 = FUNCTION_TABLE_iii[i2 & 63](i1, i3) | 0;
  i1 = HEAP32[19487] | 0;
  if (i2) {
   i3 = HEAP32[i1 + 172 >> 2] | 0;
   if (!i3) {
    i4 = i2;
    STACKTOP = i5;
    return i4 | 0;
   }
   FUNCTION_TABLE_vi[i3 & 511](i1);
   i4 = i2;
   STACKTOP = i5;
   return i4 | 0;
  }
 } else if (i3) {
  if (!(_SDL_strcmp(i3, i1 + 392 | 0) | 0)) {
   i1 = HEAP32[19487] | 0;
   break;
  }
  i4 = _SDL_SetError(50784, i2) | 0;
  STACKTOP = i5;
  return i4 | 0;
 } while (0);
 i4 = i1 + 388 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _wcrtomb(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 do if (!i1) i1 = 1; else {
  if (i2 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i2;
   i1 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_447() | 0) + 188 >> 2] >> 2] | 0)) if ((i2 & -128 | 0) == 57216) {
   HEAP8[i1 >> 0] = i2;
   i1 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
  if (i2 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i2 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i2 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i2 >>> 0 < 55296 | (i2 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i2 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i2 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i2 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i2 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i2 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i2 & 63 | 128;
   i1 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _SDL_GetRendererOutputSize(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i8 + 16 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 do if (!i3) i7 = 3; else if ((HEAP32[i3 >> 2] | 0) == 85556) {
  i1 = HEAP32[i3 + 308 >> 2] | 0;
  if (!i1) {
   i1 = HEAP32[i3 + 8 >> 2] | 0;
   if (i1 | 0) {
    i1 = FUNCTION_TABLE_iiii[i1 & 63](i3, i4, i5) | 0;
    break;
   }
   i1 = HEAP32[i3 + 188 >> 2] | 0;
   if (!i1) {
    i1 = _SDL_SetError(41374, i6) | 0;
    break;
   } else {
    _SDL_GetWindowSize(i1, i4, i5);
    i1 = 0;
    break;
   }
  }
  if ((HEAP32[i1 >> 2] | 0) != 85557) {
   _SDL_SetError(41358, i2) | 0;
   i1 = -1;
   break;
  }
  if (i4 | 0) HEAP32[i4 >> 2] = HEAP32[i1 + 12 >> 2];
  if (!i5) i1 = 0; else {
   HEAP32[i5 >> 2] = HEAP32[i1 + 16 >> 2];
   i1 = 0;
  }
 } else i7 = 3; while (0);
 if ((i7 | 0) == 3) {
  _SDL_SetError(41341, i1) | 0;
  i1 = -1;
 }
 STACKTOP = i8;
 return i1 | 0;
}

function _SDL_AddVideoDisplay(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i7 = i10;
 i3 = HEAP32[19487] | 0;
 i3 = _SDL_realloc(HEAP32[i3 + 268 >> 2] | 0, ((HEAP32[i3 + 264 >> 2] | 0) * 68 | 0) + 68 | 0) | 0;
 if (!i3) {
  _SDL_Error(0) | 0;
  i9 = -1;
  STACKTOP = i10;
  return i9 | 0;
 }
 i2 = HEAP32[19487] | 0;
 i9 = i2 + 264 | 0;
 i8 = HEAP32[i9 >> 2] | 0;
 HEAP32[i9 >> 2] = i8 + 1;
 i9 = i3 + (i8 * 68 | 0) | 0;
 i4 = i9;
 i5 = i1;
 i6 = i4 + 68 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 HEAP32[i3 + (i8 * 68 | 0) + 60 >> 2] = i2;
 HEAP32[i2 + 268 >> 2] = i3;
 i1 = HEAP32[i1 >> 2] | 0;
 if (!i1) {
  _SDL_itoa(i8, i7, 10) | 0;
  HEAP32[i9 >> 2] = _SDL_strdup(i7) | 0;
  i9 = i8;
  STACKTOP = i10;
  return i9 | 0;
 } else {
  HEAP32[i9 >> 2] = _SDL_strdup(i1) | 0;
  i9 = i8;
  STACKTOP = i10;
  return i9 | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i1 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 255](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP8[i12 + 8 + 3 >> 0] | 0;
 i13 = i3 << 24 >> 24 < 0;
 i2 = i13 ? HEAP32[i12 >> 2] | 0 : i12;
 i3 = i2 + ((i13 ? HEAP32[i12 + 4 >> 2] | 0 : i3 & 255) << 2) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i9, i8, i4, i5, i6, i2, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i5;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 if ((HEAP8[i2 + 11 >> 0] | 0) < 0) {
  i4 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i2 + 4 >> 2] | 0;
  if (i2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1);
  if (i2 >>> 0 < 11) HEAP8[i1 + 11 >> 0] = i2; else {
   i7 = i2 + 16 & -16;
   i6 = __Znwj(i7) | 0;
   HEAP32[i1 >> 2] = i6;
   HEAP32[i1 + 8 >> 2] = i7 | -2147483648;
   HEAP32[i1 + 4 >> 2] = i2;
   i1 = i6;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, i4, i2) | 0;
  HEAP8[i3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i2 | 0, i3);
 } else {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
 }
 STACKTOP = i5;
 return;
}

function _Emscripten_HandleMouseFocus(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288);
 i9 = i7 + 16 | 0;
 i4 = i7 + 8 | 0;
 i5 = i7;
 i6 = HEAP32[i1 + 60 >> 2] | 0;
 i1 = HEAP32[i1 + 64 >> 2] | 0;
 i8 = (_emscripten_get_pointerlock_status(i9 | 0) | 0) != 0;
 if ((HEAP32[i9 >> 2] | 0) == 0 | i8) {
  _emscripten_get_element_css_size(0, i4 | 0, i5 | 0) | 0;
  i9 = HEAP32[i3 + 4 >> 2] | 0;
  _SDL_SendMouseMotion(i9, 0, 0, ~~(+(HEAP32[i9 + 24 >> 2] | 0) / +HEAPF64[i4 >> 3] * +(i6 | 0)), ~~(+(HEAP32[i9 + 28 >> 2] | 0) / +HEAPF64[i5 >> 3] * +(i1 | 0))) | 0;
 }
 if ((i2 | 0) != 33) {
  i9 = 0;
  _SDL_SetMouseFocus(i9);
  i9 = _SDL_EventState(512, -1) | 0;
  i9 = i9 << 24 >> 24 == 1;
  i9 = i9 & 1;
  STACKTOP = i7;
  return i9 | 0;
 }
 i9 = HEAP32[i3 + 4 >> 2] | 0;
 _SDL_SetMouseFocus(i9);
 i9 = _SDL_EventState(512, -1) | 0;
 i9 = i9 << 24 >> 24 == 1;
 i9 = i9 & 1;
 STACKTOP = i7;
 return i9 | 0;
}

function __ZN15SpriteComponent4initEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, f5 = f0;
 i2 = i3 + 8 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  i1 = HEAP32[i3 + 4 >> 2] | 0;
  if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
   i4 = HEAP32[19475] | 0;
   HEAP32[19475] = i4 + 1;
   HEAP32[19476] = i4;
  }
  i1 = HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2] | 0;
  HEAP32[i2 >> 2] = i1;
 }
 f5 = Math_fround(HEAPF32[i1 + 8 >> 2]);
 HEAPF32[i3 + 48 >> 2] = f5;
 HEAP32[i3 + 32 >> 2] = ~~f5;
 f5 = Math_fround(HEAPF32[i1 + 12 >> 2]);
 HEAPF32[i3 + 52 >> 2] = f5;
 HEAP32[i3 + 36 >> 2] = ~~f5;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 i2 = i3 + 24 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  HEAP32[i2 >> 2] = HEAP32[i1 + 36 >> 2];
  HEAP32[i3 + 28 >> 2] = HEAP32[i1 + 32 >> 2];
 }
 f5 = Math_fround(HEAP32[i1 + 36 >> 2] | 0);
 HEAP32[i3 + 40 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i1 + 40 >> 2]) * f5);
 f5 = Math_fround(HEAP32[i1 + 32 >> 2] | 0);
 HEAP32[i3 + 44 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i1 + 44 >> 2]) * f5);
 return;
}

function _SDL_AddTouch(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i3 = HEAP32[20425] | 0;
 L1 : do if ((i3 | 0) > 0) {
  i1 = HEAP32[20426] | 0;
  i2 = 0;
  while (1) {
   i6 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   if ((HEAP32[i6 >> 2] | 0) == (i4 | 0) ? (HEAP32[i6 + 4 >> 2] | 0) == (i5 | 0) : 0) break;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (i3 | 0)) break L1;
  }
  if ((i2 | 0) > -1) {
   i6 = i2;
   return i6 | 0;
  }
 } else i1 = HEAP32[20426] | 0; while (0);
 i1 = _SDL_realloc(i1, (i3 << 2) + 4 | 0) | 0;
 if (!i1) {
  i6 = _SDL_Error(0) | 0;
  return i6 | 0;
 }
 HEAP32[20426] = i1;
 i1 = HEAP32[20425] | 0;
 i2 = _SDL_malloc(24) | 0;
 HEAP32[(HEAP32[20426] | 0) + (i1 << 2) >> 2] = i2;
 if (!i2) {
  i6 = _SDL_Error(0) | 0;
  return i6 | 0;
 } else {
  HEAP32[20425] = (HEAP32[20425] | 0) + 1;
  i6 = i2;
  HEAP32[i6 >> 2] = i4;
  HEAP32[i6 + 4 >> 2] = i5;
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 12 >> 2] = 0;
  HEAP32[i2 + 16 >> 2] = 0;
  _SDL_GestureAddTouch(i4, i5) | 0;
  i6 = i1;
  return i6 | 0;
 }
 return 0;
}

function _png_do_invert(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 switch (HEAP8[i1 + 8 >> 0] | 0) {
 case 0:
  {
   i3 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i3) return; else {
    i2 = 0;
    i1 = i4;
   }
   while (1) {
    HEAP8[i1 >> 0] = ~HEAP8[i1 >> 0];
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == (i3 | 0)) break; else i1 = i1 + 1 | 0;
   }
   return;
  }
 case 4:
  switch (HEAP8[i1 + 9 >> 0] | 0) {
  case 8:
   {
    i3 = HEAP32[i1 + 4 >> 2] | 0;
    if (!i3) return; else {
     i2 = 0;
     i1 = i4;
    }
    while (1) {
     HEAP8[i1 >> 0] = ~HEAP8[i1 >> 0];
     i2 = i2 + 2 | 0;
     if (i2 >>> 0 >= i3 >>> 0) break; else i1 = i1 + 2 | 0;
    }
    return;
   }
  case 16:
   {
    i3 = HEAP32[i1 + 4 >> 2] | 0;
    if (!i3) return; else {
     i2 = 0;
     i1 = i4;
    }
    while (1) {
     HEAP8[i1 >> 0] = ~HEAP8[i1 >> 0];
     i4 = i1 + 1 | 0;
     HEAP8[i4 >> 0] = ~HEAP8[i4 >> 0];
     i2 = i2 + 4 | 0;
     if (i2 >>> 0 >= i3 >>> 0) break; else i1 = i1 + 4 | 0;
    }
    return;
   }
  default:
   return;
  }
 default:
  return;
 }
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i1 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 255](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 i3 = HEAP8[i12 + 11 >> 0] | 0;
 i13 = i3 << 24 >> 24 < 0;
 i2 = i13 ? HEAP32[i12 >> 2] | 0 : i12;
 i3 = i2 + (i13 ? HEAP32[i12 + 4 >> 2] | 0 : i3 & 255) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i9, i8, i4, i5, i6, i2, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _png_handle_sRGB(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i6;
 i2 = HEAP32[i3 + 208 >> 2] | 0;
 if (!(i2 & 1)) _png_chunk_error(i3, 63643);
 if (i2 & 6 | 0) {
  _png_crc_finish(i3, i1) | 0;
  _png_chunk_benign_error(i3, 64026);
  STACKTOP = i6;
  return;
 }
 if ((i1 | 0) != 1) {
  _png_crc_finish(i3, i1) | 0;
  _png_chunk_benign_error(i3, 63990);
  STACKTOP = i6;
  return;
 }
 _png_read_data(i3, i5, 1);
 _png_calculate_crc(i3, i5, 1);
 if (_png_crc_finish(i3, 0) | 0) {
  STACKTOP = i6;
  return;
 }
 i1 = i3 + 898 | 0;
 i2 = HEAPU16[i1 >> 1] | 0;
 if (i2 & 32768 | 0) {
  STACKTOP = i6;
  return;
 }
 if (!(i2 & 4)) {
  _png_colorspace_set_sRGB(i3, i3 + 824 | 0, HEAPU8[i5 >> 0] | 0) | 0;
  _png_colorspace_sync(i3, i4);
  STACKTOP = i6;
  return;
 } else {
  HEAP16[i1 >> 1] = i2 | 32768;
  _png_colorspace_sync(i3, i4);
  _png_chunk_benign_error(i3, 64944);
  STACKTOP = i6;
  return;
 }
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i6, i4, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i9;
 i8 = i6 + 11 | 0;
 i1 = HEAP8[i8 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 if (i2) {
  i3 = HEAP32[i6 + 4 >> 2] | 0;
  i1 = (HEAP32[i6 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  i3 = i1 & 255;
  i1 = 10;
 }
 if ((i1 - i3 | 0) >>> 0 < i5 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i1, i5 - i1 + i3 | 0, i3, i3, 0, i5, i4); else if (i5 | 0) {
  if (i2) i2 = HEAP32[i6 >> 2] | 0; else i2 = i6;
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i2 + i3 | 0, i4, i5) | 0;
  i1 = i3 + i5 | 0;
  if ((HEAP8[i8 >> 0] | 0) < 0) HEAP32[i6 + 4 >> 2] = i1; else HEAP8[i8 >> 0] = i1;
  HEAP8[i7 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + i1 | 0, i7);
 }
 STACKTOP = i9;
 return i6 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i6, i7, i8) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i9;
 i5 = i6 + 11 | 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i2 = i1 << 24 >> 24 < 0;
 if (i2) i3 = (HEAP32[i6 + 8 >> 2] & 2147483647) + -1 | 0; else i3 = 10;
 do if (i3 >>> 0 < i8 >>> 0) {
  if (i2) i1 = HEAP32[i6 + 4 >> 2] | 0; else i1 = i1 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i3, i8 - i3 | 0, i1, 0, i1, i8, i7);
 } else {
  if (i2) i1 = HEAP32[i6 >> 2] | 0; else i1 = i6;
  __ZNSt3__211char_traitsIcE4moveEPcPKcj(i1, i7, i8) | 0;
  HEAP8[i4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i8 | 0, i4);
  if ((HEAP8[i5 >> 0] | 0) < 0) {
   HEAP32[i6 + 4 >> 2] = i8;
   break;
  } else {
   HEAP8[i5 >> 0] = i8;
   break;
  }
 } while (0);
 STACKTOP = i9;
 return i6 | 0;
}

function _Emscripten_CreateWindowFramebuffer(i1, i2, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i4 + 24 | 0;
 i12 = i4 + 20 | 0;
 i11 = i4 + 16 | 0;
 i10 = i4 + 12 | 0;
 i9 = i4 + 8 | 0;
 i8 = i4 + 4 | 0;
 i1 = i4;
 i3 = (HEAP32[i2 + 144 >> 2] | 0) + 8 | 0;
 _SDL_FreeSurface(HEAP32[i3 >> 2] | 0);
 _SDL_PixelFormatEnumToMasks(374740996, i11, i10, i9, i8, i1) | 0;
 _SDL_GetWindowSize(i2, i13, i12);
 i1 = _SDL_CreateRGBSurface(0, HEAP32[i13 >> 2] | 0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 if (!i1) {
  i13 = -1;
  STACKTOP = i4;
  return i13 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i5 >> 2] = 374740996;
 HEAP32[i6 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i7 >> 2] = HEAP32[i1 + 16 >> 2];
 i13 = 0;
 STACKTOP = i4;
 return i13 | 0;
}

function _SDL_FirstAudioFormat(i1) {
 i1 = i1 | 0;
 HEAP32[20427] = 0;
 if (i1 << 16 >> 16 == 8) i1 = 0; else {
  HEAP32[20427] = 1;
  if (i1 << 16 >> 16 == -32760) i1 = 1; else {
   HEAP32[20427] = 2;
   if (i1 << 16 >> 16 == -32752) i1 = 2; else {
    HEAP32[20427] = 3;
    if (i1 << 16 >> 16 == -28656) i1 = 3; else {
     HEAP32[20427] = 4;
     if (i1 << 16 >> 16 == 16) i1 = 4; else {
      HEAP32[20427] = 5;
      if (i1 << 16 >> 16 == 4112) i1 = 5; else {
       HEAP32[20427] = 6;
       if (i1 << 16 >> 16 == -32736) i1 = 6; else {
        HEAP32[20427] = 7;
        if (i1 << 16 >> 16 == -28640) i1 = 7; else {
         HEAP32[20427] = 8;
         if (i1 << 16 >> 16 == -32480) i1 = 8; else {
          HEAP32[20427] = 9;
          if (i1 << 16 >> 16 == -28384) i1 = 9; else {
           HEAP32[20427] = 10;
           HEAP32[20428] = 0;
           i1 = 0;
           return i1 | 0;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 HEAP32[20428] = 1;
 i1 = HEAP16[35096 + (i1 * 20 | 0) >> 1] | 0;
 return i1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   break;
  }
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 65535 | (i3 | 0) == 34) {
   HEAP32[i5 >> 2] = 4;
   i1 = -1;
   break;
  } else {
   i1 = i1 & 65535;
   break;
  } else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _sift(i3, i10, i7, i1, i8) {
 i3 = i3 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i11 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(240);
 i11 = i12;
 HEAP32[i11 >> 2] = i3;
 L1 : do if ((i1 | 0) > 1) {
  i9 = 0 - i10 | 0;
  i2 = i3;
  i6 = i1;
  i1 = 1;
  while (1) {
   i4 = i2 + i9 | 0;
   i5 = i6 + -2 | 0;
   i2 = i4 + (0 - (HEAP32[i8 + (i5 << 2) >> 2] | 0)) | 0;
   if ((FUNCTION_TABLE_iii[i7 & 63](i3, i2) | 0) > -1) if ((FUNCTION_TABLE_iii[i7 & 63](i3, i4) | 0) > -1) break L1;
   i3 = i1 + 1 | 0;
   i1 = i11 + (i1 << 2) | 0;
   if ((FUNCTION_TABLE_iii[i7 & 63](i2, i4) | 0) > -1) {
    HEAP32[i1 >> 2] = i2;
    i1 = i6 + -1 | 0;
   } else {
    HEAP32[i1 >> 2] = i4;
    i2 = i4;
    i1 = i5;
   }
   if ((i1 | 0) <= 1) {
    i1 = i3;
    break L1;
   }
   i6 = i1;
   i1 = i3;
   i3 = HEAP32[i11 >> 2] | 0;
  }
 } else i1 = 1; while (0);
 _cycle(i10, i11, i1);
 STACKTOP = i12;
 return;
}

function _BlitBto3(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i11 = HEAP32[i1 + 36 >> 2] | 0;
 i7 = HEAP32[i1 + 48 >> 2] | 0;
 i8 = ((i10 + 7 | 0) / -8 | 0) + i10 + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 if (!((i2 | 0) != 0 & (i10 | 0) > 0)) return;
 i9 = i10 * 3 | 0;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  i3 = 0;
  i4 = 0;
  i5 = i6;
  while (1) {
   if (!(i4 & 7)) {
    i3 = HEAP8[i1 >> 0] | 0;
    i1 = i1 + 1 | 0;
   }
   i13 = (i3 & 255) >>> 7 << 2 & 255;
   i12 = i13 | 1;
   HEAP8[i5 >> 0] = HEAP8[i7 + i13 >> 0] | 0;
   HEAP8[i5 + 1 >> 0] = HEAP8[i7 + i12 >> 0] | 0;
   HEAP8[i5 + 2 >> 0] = HEAP8[i7 + (i12 + 1) >> 0] | 0;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i10 | 0)) break; else {
    i3 = (i3 & 255) << 1 & 255;
    i5 = i5 + 3 | 0;
   }
  }
  if (!i2) break; else {
   i6 = i6 + i9 + i11 | 0;
   i1 = i1 + i8 | 0;
  }
 }
 return;
}

function _png_cache_unknown_chunk(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = 0;
 i2 = i4 + 772 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  _png_free(i4, i1);
  HEAP32[i2 >> 2] = 0;
 }
 i1 = HEAP32[i4 + 760 >> 2] | 0;
 switch (i1 | 0) {
 case -1:
 case 0:
  {
   i3 = 5;
   break;
  }
 default:
  if (i1 >>> 0 < i5 >>> 0) i1 = 0; else i3 = 5;
 }
 if ((i3 | 0) == 5) {
  i3 = HEAP32[i4 + 376 >> 2] | 0;
  HEAP8[i4 + 764 >> 0] = i3 >>> 24;
  HEAP8[i4 + 765 >> 0] = i3 >>> 16;
  HEAP8[i4 + 766 >> 0] = i3 >>> 8;
  HEAP8[i4 + 767 >> 0] = i3;
  HEAP8[i4 + 768 >> 0] = 0;
  HEAP32[i4 + 776 >> 2] = i5;
  HEAP8[i4 + 780 >> 0] = HEAP32[i4 + 208 >> 2];
  if (!i5) i1 = 0; else i1 = _png_malloc_warn(i4, i5) | 0;
  HEAP32[i2 >> 2] = i1;
 }
 i2 = (i5 | 0) != 0;
 if (i2 & (i1 | 0) == 0) {
  _png_crc_finish(i4, i5) | 0;
  _png_chunk_benign_error(i4, 65389);
  i5 = 0;
  return i5 | 0;
 }
 if (i2) {
  _png_read_data(i4, i1, i5);
  _png_calculate_crc(i4, i1, i5);
 }
 _png_crc_finish(i4, 0) | 0;
 i5 = 1;
 return i5 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i4, i7, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i8 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i9;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i7 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  i6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i5, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i6;
  if ((HEAP32[i5 >> 2] | 0) == (i4 | 0)) {
   if ((i3 | 0) == 34) {
    i1 = -1;
    i2 = -1;
    i8 = 8;
   }
  } else {
   i1 = 0;
   i2 = 0;
   i8 = 8;
  }
  if ((i8 | 0) == 8) HEAP32[i7 >> 2] = 4;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_(i7, i1, i8, i9) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i7 + 4 >> 2] = 0;
 HEAP32[i7 + 8 >> 2] = 0;
 i3 = i9 - i8 >> 2;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i7);
 do if (i3 >>> 0 < 2) {
  HEAP8[i7 + 8 + 3 >> 0] = i3;
  i5 = i8;
  i6 = i7;
 } else {
  i1 = i3 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else {
   i6 = __Znwj(i1 << 2) | 0;
   HEAP32[i7 >> 2] = i6;
   HEAP32[i7 + 8 >> 2] = i1 | -2147483648;
   HEAP32[i7 + 4 >> 2] = i3;
   i5 = i8;
   break;
  }
 } while (0);
 while (1) {
  if ((i5 | 0) == (i9 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i5);
  i5 = i5 + 4 | 0;
  i6 = i6 + 4 | 0;
 }
 HEAP32[i2 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i6, i2);
 STACKTOP = i4;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i4, i5, i1, i3, i8, i9, i10) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i2 = 0, i6 = 0, i7 = 0, i11 = 0;
 if ((1073741807 - i5 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i4);
 i11 = i4 + 8 | 0;
 if ((HEAP8[i11 + 3 >> 0] | 0) < 0) i7 = HEAP32[i4 >> 2] | 0; else i7 = i4;
 if (i5 >>> 0 < 536870887) {
  i1 = i1 + i5 | 0;
  i2 = i5 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i1 = i1 >>> 0 < 2 ? 2 : i1 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else i6 = i1;
 } else i6 = 1073741807;
 i2 = __Znwj(i6 << 2) | 0;
 if (i8 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i2, i7, i8) | 0;
 i1 = i3 - i9 - i8 | 0;
 if (i1 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwj(i2 + (i8 << 2) + (i10 << 2) | 0, i7 + (i8 << 2) + (i9 << 2) | 0, i1) | 0;
 if ((i5 | 0) != 1) __ZdlPv(i7);
 HEAP32[i4 >> 2] = i2;
 HEAP32[i11 >> 2] = i6 | -2147483648;
 return;
}

function _GLES2_DestroyTexture(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = 0;
 i3 = i2 + 320 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i6 = i1 + 68 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i5;
  i4 = 4;
 } else {
  HEAP32[i5 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i2 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i5 >> 2];
   _GLES2_UpdateViewport(i2) | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   i4 = 4;
  }
 }
 if ((i4 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 if (!i7) return;
 i2 = i5 + 64 | 0;
 FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i7);
 i1 = i7 + 32 | 0;
 if (HEAP32[i1 >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i1);
 i1 = i7 + 36 | 0;
 if (HEAP32[i1 >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[i2 >> 2] & 127](1, i1);
 _SDL_free(HEAP32[i7 + 16 >> 2] | 0);
 _SDL_free(i7);
 HEAP32[i6 >> 2] = 0;
 return;
}

function _SDL_DUMMY_CreateWindowFramebuffer(i1, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i12 = i2 + 24 | 0;
 i11 = i2 + 20 | 0;
 i10 = i2 + 16 | 0;
 i9 = i2 + 12 | 0;
 i8 = i2 + 8 | 0;
 i7 = i2 + 4 | 0;
 i1 = i2;
 _SDL_FreeSurface(_SDL_GetWindowData(i3, 57447) | 0);
 _SDL_PixelFormatEnumToMasks(370546692, i10, i9, i8, i7, i1) | 0;
 _SDL_GetWindowSize(i3, i12, i11);
 i1 = _SDL_CreateRGBSurface(0, HEAP32[i12 >> 2] | 0, HEAP32[i11 >> 2] | 0, HEAP32[i10 >> 2] | 0, HEAP32[i9 >> 2] | 0, HEAP32[i8 >> 2] | 0, HEAP32[i7 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 if (!i1) {
  i12 = -1;
  STACKTOP = i2;
  return i12 | 0;
 }
 _SDL_SetWindowData(i3, 57447, i1) | 0;
 HEAP32[i4 >> 2] = 370546692;
 HEAP32[i5 >> 2] = HEAP32[i1 + 20 >> 2];
 HEAP32[i6 >> 2] = HEAP32[i1 + 16 >> 2];
 i12 = 0;
 STACKTOP = i2;
 return i12 | 0;
}

function _memset(i5, i6, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = i5 + i4 | 0;
 i6 = i6 & 255;
 if ((i4 | 0) >= 67) {
  while (i5 & 3) {
   HEAP8[i5 >> 0] = i6;
   i5 = i5 + 1 | 0;
  }
  i1 = i3 & -4 | 0;
  i2 = i1 - 64 | 0;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  while ((i5 | 0) <= (i2 | 0)) {
   HEAP32[i5 >> 2] = i7;
   HEAP32[i5 + 4 >> 2] = i7;
   HEAP32[i5 + 8 >> 2] = i7;
   HEAP32[i5 + 12 >> 2] = i7;
   HEAP32[i5 + 16 >> 2] = i7;
   HEAP32[i5 + 20 >> 2] = i7;
   HEAP32[i5 + 24 >> 2] = i7;
   HEAP32[i5 + 28 >> 2] = i7;
   HEAP32[i5 + 32 >> 2] = i7;
   HEAP32[i5 + 36 >> 2] = i7;
   HEAP32[i5 + 40 >> 2] = i7;
   HEAP32[i5 + 44 >> 2] = i7;
   HEAP32[i5 + 48 >> 2] = i7;
   HEAP32[i5 + 52 >> 2] = i7;
   HEAP32[i5 + 56 >> 2] = i7;
   HEAP32[i5 + 60 >> 2] = i7;
   i5 = i5 + 64 | 0;
  }
  while ((i5 | 0) < (i1 | 0)) {
   HEAP32[i5 >> 2] = i7;
   i5 = i5 + 4 | 0;
  }
 }
 while ((i5 | 0) < (i3 | 0)) {
  HEAP8[i5 >> 0] = i6;
  i5 = i5 + 1 | 0;
 }
 return i3 - i4 | 0;
}

function _png_set_IHDR(i1, i10, i9, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i8 = 0, i11 = 0;
 if ((i1 | 0) == 0 | (i10 | 0) == 0) return;
 HEAP32[i10 >> 2] = i9;
 HEAP32[i10 + 4 >> 2] = i2;
 i8 = i10 + 24 | 0;
 HEAP8[i8 >> 0] = i3;
 i11 = i10 + 25 | 0;
 HEAP8[i11 >> 0] = i4;
 HEAP8[i10 + 26 >> 0] = i6;
 HEAP8[i10 + 27 >> 0] = i7;
 HEAP8[i10 + 28 >> 0] = i5;
 _png_check_IHDR(i1, i9, i2, i3 & 255, i4 & 255, i5 & 255, i6 & 255, i7 & 255);
 i1 = HEAP8[i11 >> 0] | 0;
 if (i1 << 24 >> 24 == 3) {
  i1 = 1;
  i2 = 1;
 } else {
  i11 = i1 & 2 | 1;
  i7 = (i1 & 4) == 0;
  i2 = i11 + 1 << 24 >> 24;
  i1 = i7 ? i11 : i2;
  i2 = i7 ? i11 : i2;
 }
 HEAP8[i10 + 29 >> 0] = i2;
 i1 = Math_imul(HEAPU8[i8 >> 0] | 0, i1 & 255) | 0;
 HEAP8[i10 + 30 >> 0] = i1;
 i1 = i1 & 255;
 if (i1 >>> 0 > 7) i1 = Math_imul(i1 >>> 3, i9) | 0; else i1 = ((Math_imul(i1, i9) | 0) + 7 | 0) >>> 3;
 HEAP32[i10 + 12 >> 2] = i1;
 return;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   break;
  }
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i5 >> 2] = 4;
   i1 = -1;
   break;
  } else break; else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 do if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i1 = 0;
 } else {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   break;
  }
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoull_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  do if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i5 >> 2] = 4;
   i1 = -1;
   break;
  } else break; else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
  } while (0);
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function ___shgetc(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = i5 + 104 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) i6 = 3; else if ((HEAP32[i5 + 108 >> 2] | 0) < (i1 | 0)) i6 = 3; else i6 = 4;
 if ((i6 | 0) == 3) {
  i1 = ___uflow(i5) | 0;
  if ((i1 | 0) < 0) i6 = 4; else {
   i3 = HEAP32[i2 >> 2] | 0;
   i2 = i5 + 8 | 0;
   if (!i3) {
    i3 = HEAP32[i2 >> 2] | 0;
    i2 = i3;
   } else {
    i7 = HEAP32[i2 >> 2] | 0;
    i4 = HEAP32[i5 + 4 >> 2] | 0;
    i2 = i3 - (HEAP32[i5 + 108 >> 2] | 0) | 0;
    i3 = i7;
    if ((i7 - i4 | 0) < (i2 | 0)) i2 = i3; else i2 = i4 + (i2 + -1) | 0;
   }
   HEAP32[i5 + 100 >> 2] = i2;
   i2 = i5 + 4 | 0;
   if (!i3) i2 = HEAP32[i2 >> 2] | 0; else {
    i2 = HEAP32[i2 >> 2] | 0;
    i7 = i5 + 108 | 0;
    HEAP32[i7 >> 2] = i3 + 1 - i2 + (HEAP32[i7 >> 2] | 0);
   }
   i2 = i2 + -1 | 0;
   if ((i1 | 0) != (HEAPU8[i2 >> 0] | 0 | 0)) HEAP8[i2 >> 0] = i1;
  }
 }
 if ((i6 | 0) == 4) {
  HEAP32[i5 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function _SDL_AllocFormat(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4;
 i1 = HEAP32[19489] | 0;
 L1 : do if (i1 | 0) {
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
   i1 = HEAP32[i1 + 40 >> 2] | 0;
   if (!i1) break L1;
  }
  i3 = i1 + 36 | 0;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 1;
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 } while (0);
 i1 = _SDL_malloc(44) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((_SDL_InitFormat(i1, i2) | 0) < 0) {
  _SDL_free(i1);
  HEAP32[i3 >> 2] = 41077;
  _SDL_SetError(59509, i3) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((i2 | 0) == 0 | (i2 & -268435456 | 0) == 268435456) if (((i2 >>> 24 & 15) + -1 | 0) >>> 0 < 3) {
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i1 + 40 >> 2] = HEAP32[19489];
 HEAP32[19489] = i1;
 i3 = i1;
 STACKTOP = i4;
 return i3 | 0;
}

function ___newlocale(i7, i8, i1) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i9;
 L1 : do if (!(___loc_is_allocated(i1) | 0)) {
  i6 = (i1 | 0) != 0;
  i3 = 0;
  i4 = 0;
  do {
   i2 = 1 << i4 & i7;
   if (i6 & (i2 | 0) == 0) i2 = HEAP32[i1 + (i4 << 2) >> 2] | 0; else i2 = ___get_locale(i4, i2 | 0 ? i8 : 89710) | 0;
   i3 = i3 + ((i2 | 0) != 0 & 1) | 0;
   HEAP32[i5 + (i4 << 2) >> 2] = i2;
   i4 = i4 + 1 | 0;
  } while ((i4 | 0) != 6);
  switch (i3 | 0) {
  case 0:
   {
    i1 = 82512;
    break L1;
   }
  case 1:
   {
    if ((HEAP32[i5 >> 2] | 0) == 27068) {
     i1 = 27116;
     break L1;
    }
    break;
   }
  default:
   {}
  }
 } else {
  i2 = 0;
  do {
   if (1 << i2 & i7 | 0) HEAP32[i1 + (i2 << 2) >> 2] = ___get_locale(i2, i8) | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != 6);
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function _SDL_TLSSet(i4, i5, i6) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i7 = 0;
 i3 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i7;
 if (!i4) {
  HEAP32[i1 >> 2] = 46526;
  i6 = _SDL_SetError(59509, i1) | 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 i1 = _SDL_SYS_GetTLSData() | 0;
 if (!i1) {
  i2 = 0;
  i3 = 5;
 } else {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) i3 = 5;
 }
 if ((i3 | 0) == 5) {
  i3 = i4 + 4 | 0;
  i1 = _SDL_realloc(i1, (i4 << 3) + 36 | 0) | 0;
  if (!i1) {
   i6 = _SDL_Error(0) | 0;
   STACKTOP = i7;
   return i6 | 0;
  }
  HEAP32[i1 >> 2] = i3;
  if (i3 >>> 0 > i2 >>> 0) _memset(i1 + (i2 << 3 | 4) | 0, 0, i3 - i2 << 3 | 0) | 0;
  if (_SDL_SYS_SetTLSData(i1) | 0) {
   i6 = -1;
   STACKTOP = i7;
   return i6 | 0;
  }
 }
 i4 = i4 + -1 | 0;
 i4 = i1 + 4 + (i4 << 3) | 0;
 HEAP32[i4 >> 2] = i5;
 HEAP32[i4 + 4 >> 2] = i6;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _BlitBto3Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i11 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i13 = HEAP32[i1 + 36 >> 2] | 0;
 i8 = HEAP32[i1 + 56 >> 2] | 0;
 i9 = HEAP32[i1 + 48 >> 2] | 0;
 i10 = ((i11 + 7 | 0) / -8 | 0) + i11 + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 if (!((i2 | 0) != 0 & (i11 | 0) > 0)) return;
 i12 = i11 * 3 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  i1 = 0;
  i6 = 0;
  i5 = i7;
  while (1) {
   if (!(i6 & 7)) {
    i4 = HEAP8[i3 >> 0] | 0;
    i3 = i3 + 1 | 0;
   } else i4 = i1;
   i1 = (i4 & 255) >>> 7;
   if ((i8 | 0) != (i1 & 255 | 0)) _SDL_memcpy(i5, i9 + (i1 << 2 & 255) | 0, 3) | 0;
   i6 = i6 + 1 | 0;
   if ((i6 | 0) == (i11 | 0)) break; else {
    i1 = (i4 & 255) << 1 & 255;
    i5 = i5 + 3 | 0;
   }
  }
  if (!i2) break; else {
   i3 = i3 + i10 | 0;
   i7 = i7 + i12 + i13 | 0;
  }
 }
 return;
}

function _SDL_SetKeyboardFocus(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = HEAP32[19783] | 0;
 i4 = (i3 | 0) != 0;
 if (!(i4 | (i1 | 0) == 0)) {
  i1 = 0;
  do {
   if ((HEAP8[79138 + i1 >> 0] | 0) == 1) _SDL_SendKeyboardKey(0, i1) | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 512);
  i1 = HEAP32[19783] | 0;
 }
 if (!((i1 | 0) == 0 | (i1 | 0) == (i3 | 0))) {
  if (HEAP32[i1 + 48 >> 2] & 16384) {
   _SDL_CaptureMouse(0) | 0;
   i1 = HEAP32[19783] | 0;
  }
  _SDL_SendWindowEvent(i1, 13, 0, 0) | 0;
  if ((_SDL_EventState(771, -1) | 0) << 24 >> 24) {
   i1 = _SDL_GetVideoDevice() | 0;
   if (i1 | 0) {
    i2 = HEAP32[i1 + 216 >> 2] | 0;
    if (i2 | 0) FUNCTION_TABLE_vi[i2 & 511](i1);
   }
  }
 }
 HEAP32[19783] = i3;
 if (!i4) return;
 _SDL_SendWindowEvent(i3, 12, 0, 0) | 0;
 if (!((_SDL_EventState(771, -1) | 0) << 24 >> 24)) return;
 i1 = _SDL_GetVideoDevice() | 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 212 >> 2] | 0;
 if (!i2) return;
 FUNCTION_TABLE_vi[i2 & 511](i1);
 return;
}

function _BlitBto2Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i8 = HEAP32[i1 + 56 >> 2] | 0;
 i9 = HEAP32[i1 + 48 >> 2] | 0;
 i10 = ((i12 + 7 | 0) / -8 | 0) + i12 + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 i11 = (HEAP32[i1 + 36 >> 2] | 0) / 2 | 0;
 if (!((i2 | 0) != 0 & (i12 | 0) > 0)) return;
 i3 = HEAP32[i1 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  i1 = 0;
  i6 = 0;
  i5 = i7;
  while (1) {
   if (!(i6 & 7)) {
    i4 = HEAP8[i3 >> 0] | 0;
    i3 = i3 + 1 | 0;
   } else i4 = i1;
   i1 = (i4 & 255) >>> 7 & 255;
   if ((i8 | 0) != (i1 | 0)) HEAP16[i5 >> 1] = HEAP16[i9 + (i1 << 1) >> 1] | 0;
   i6 = i6 + 1 | 0;
   if ((i6 | 0) == (i12 | 0)) break; else {
    i1 = (i4 & 255) << 1 & 255;
    i5 = i5 + 2 | 0;
   }
  }
  if (!i2) break; else {
   i3 = i3 + i10 | 0;
   i7 = i7 + (i12 << 1) + (i11 << 1) | 0;
  }
 }
 return;
}

function _Emscripten_CreateSystemCursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 do switch (i1 | 0) {
 case 0:
  {
   i1 = 50869;
   break;
  }
 case 1:
  {
   i1 = 50965;
   break;
  }
 case 2:
  {
   i1 = 50960;
   break;
  }
 case 3:
  {
   i1 = 50950;
   break;
  }
 case 4:
  {
   i1 = 50941;
   break;
  }
 case 5:
  {
   i1 = 50929;
   break;
  }
 case 6:
  {
   i1 = 50917;
   break;
  }
 case 7:
  {
   i1 = 50907;
   break;
  }
 case 8:
  {
   i1 = 50897;
   break;
  }
 case 9:
  {
   i1 = 0;
   break;
  }
 case 10:
  {
   i1 = 50885;
   break;
  }
 case 11:
  {
   i1 = 50877;
   break;
  }
 default:
  {
   i3 = 0;
   return i3 | 0;
  }
 } while (0);
 i2 = _SDL_calloc(1, 8) | 0;
 if (!i2) {
  _SDL_Error(0) | 0;
  i3 = i2;
  return i3 | 0;
 }
 i3 = _SDL_calloc(1, 8) | 0;
 if (!i3) {
  _SDL_Error(0) | 0;
  _SDL_free(i2);
  i3 = 0;
  return i3 | 0;
 } else {
  HEAP32[i3 >> 2] = i1;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = i3;
  i3 = i2;
  return i3 | 0;
 }
 return 0;
}

function _SDL_SetPixelFormatPalette(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i5 + 8 | 0;
 if (!i1) {
  i4 = _SDL_SetError(41084, i5) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i4 = (i3 | 0) != 0;
 if (i4) if ((HEAP32[i3 >> 2] | 0) != (1 << (HEAPU8[i1 + 8 >> 0] | 0) | 0)) {
  i4 = _SDL_SetError(41131, i2) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = i1 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (i2 | 0) {
  i7 = i2 + 12 | 0;
  i6 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = i6 + -1;
  if ((i6 | 0) <= 1) {
   _SDL_free(HEAP32[i2 + 4 >> 2] | 0);
   _SDL_free(i2);
  }
 }
 HEAP32[i1 >> 2] = i3;
 if (!i4) {
  i7 = 0;
  STACKTOP = i5;
  return i7 | 0;
 }
 i7 = i3 + 12 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 i7 = 0;
 STACKTOP = i5;
 return i7 | 0;
}

function _BlitBto4Key(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i12 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i8 = HEAP32[i1 + 56 >> 2] | 0;
 i9 = HEAP32[i1 + 48 >> 2] | 0;
 i10 = ((i12 + 7 | 0) / -8 | 0) + i12 + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 i11 = (HEAP32[i1 + 36 >> 2] | 0) / 4 | 0;
 if (!((i2 | 0) != 0 & (i12 | 0) > 0)) return;
 i3 = HEAP32[i1 >> 2] | 0;
 i7 = HEAP32[i1 + 20 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  i1 = 0;
  i6 = 0;
  i5 = i7;
  while (1) {
   if (!(i6 & 7)) {
    i4 = HEAP8[i3 >> 0] | 0;
    i3 = i3 + 1 | 0;
   } else i4 = i1;
   i1 = (i4 & 255) >>> 7 & 255;
   if ((i8 | 0) != (i1 | 0)) HEAP32[i5 >> 2] = HEAP32[i9 + (i1 << 2) >> 2];
   i6 = i6 + 1 | 0;
   if ((i6 | 0) == (i12 | 0)) break; else {
    i1 = (i4 & 255) << 1 & 255;
    i5 = i5 + 4 | 0;
   }
  }
  if (!i2) break; else {
   i3 = i3 + i10 | 0;
   i7 = i7 + (i12 << 2) + (i11 << 2) | 0;
  }
 }
 return;
}

function _SDL_GL_CreateContext(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i5 + 16 | 0;
 i2 = i5 + 8 | 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i5) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (i4 | 0) if ((HEAP32[i4 >> 2] | 0) == (i1 + 280 | 0)) {
  if (!(HEAP32[i4 + 48 >> 2] & 2)) {
   _SDL_SetError(40244, i3) | 0;
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i1 = FUNCTION_TABLE_iii[HEAP32[i1 + 176 >> 2] & 63](i1, i4) | 0;
  if (!i1) {
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i3 = HEAP32[19487] | 0;
  HEAP32[i3 + 652 >> 2] = i4;
  HEAP32[i3 + 656 >> 2] = i1;
  _SDL_TLSSet(HEAP32[i3 + 660 >> 2] | 0, i4, 0) | 0;
  _SDL_TLSSet(HEAP32[(HEAP32[19487] | 0) + 664 >> 2] | 0, i1, 0) | 0;
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 _SDL_SetError(59973, i2) | 0;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 if (!(HEAP8[76896] | 0)) if (___cxa_guard_acquire(76896) | 0) {
  HEAP32[21129] = 0;
  HEAP32[21130] = 0;
  HEAP32[21131] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(32596) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(84516);
  do if (i3 >>> 0 < 2) {
   HEAP8[84527] = i3;
   i5 = 84516;
  } else {
   i2 = i3 + 4 & -4;
   if (i2 >>> 0 > 1073741823) _abort(); else {
    i5 = __Znwj(i2 << 2) | 0;
    HEAP32[21129] = i5;
    HEAP32[21131] = i2 | -2147483648;
    HEAP32[21130] = i3;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 32596, i3) | 0;
  HEAP32[i1 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i3 << 2) | 0, i1);
 }
 STACKTOP = i4;
 return 84516;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 if (!(HEAP8[76904] | 0)) if (___cxa_guard_acquire(76904) | 0) {
  HEAP32[21132] = 0;
  HEAP32[21133] = 0;
  HEAP32[21134] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(32632) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(84528);
  do if (i3 >>> 0 < 2) {
   HEAP8[84539] = i3;
   i5 = 84528;
  } else {
   i2 = i3 + 4 & -4;
   if (i2 >>> 0 > 1073741823) _abort(); else {
    i5 = __Znwj(i2 << 2) | 0;
    HEAP32[21132] = i5;
    HEAP32[21134] = i2 | -2147483648;
    HEAP32[21133] = i3;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 32632, i3) | 0;
  HEAP32[i1 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i3 << 2) | 0, i1);
 }
 STACKTOP = i4;
 return 84528;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 if (!(HEAP8[76912] | 0)) if (___cxa_guard_acquire(76912) | 0) {
  HEAP32[21135] = 0;
  HEAP32[21136] = 0;
  HEAP32[21137] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(32680) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(84540);
  do if (i3 >>> 0 < 2) {
   HEAP8[84551] = i3;
   i5 = 84540;
  } else {
   i2 = i3 + 4 & -4;
   if (i2 >>> 0 > 1073741823) _abort(); else {
    i5 = __Znwj(i2 << 2) | 0;
    HEAP32[21135] = i5;
    HEAP32[21137] = i2 | -2147483648;
    HEAP32[21136] = i3;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 32680, i3) | 0;
  HEAP32[i1 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i3 << 2) | 0, i1);
 }
 STACKTOP = i4;
 return 84540;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 if (!(HEAP8[76888] | 0)) if (___cxa_guard_acquire(76888) | 0) {
  HEAP32[21126] = 0;
  HEAP32[21127] = 0;
  HEAP32[21128] = 0;
  i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(32560) | 0;
  if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(84504);
  do if (i3 >>> 0 < 2) {
   HEAP8[84515] = i3;
   i5 = 84504;
  } else {
   i2 = i3 + 4 & -4;
   if (i2 >>> 0 > 1073741823) _abort(); else {
    i5 = __Znwj(i2 << 2) | 0;
    HEAP32[21126] = i5;
    HEAP32[21128] = i2 | -2147483648;
    HEAP32[21127] = i3;
    break;
   }
  } while (0);
  __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 32560, i3) | 0;
  HEAP32[i1 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i3 << 2) | 0, i1);
 }
 STACKTOP = i4;
 return 84504;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji(i1, i4, i5, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i8;
 if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } else {
  i7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  i1 = _strtoll_l(i1, i6, i2, __ZNSt3__26__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i3) HEAP32[(___errno_location() | 0) >> 2] = i7;
  if ((HEAP32[i6 >> 2] | 0) == (i4 | 0)) {
   if ((i3 | 0) == 34) {
    HEAP32[i5 >> 2] = 4;
    i2 = (i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0;
    i1 = i2 ? -1 : 0;
    i2 = i2 ? 2147483647 : -2147483648;
   }
  } else {
   HEAP32[i5 >> 2] = 4;
   i1 = 0;
   i2 = 0;
  }
 }
 tempRet0 = i2;
 STACKTOP = i8;
 return i1 | 0;
}

function __ZN15CanvasComponent4initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, f4 = f0, i5 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i3 = HEAP32[19475] | 0;
  HEAP32[19475] = i3 + 1;
  HEAP32[19476] = i3;
 }
 i3 = HEAP32[i2 + 20 + (HEAP32[19476] << 2) >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = i3;
 HEAP32[i1 + 56 >> 2] = 0;
 f4 = Math_fround(HEAPF32[i3 + 8 >> 2]);
 HEAPF32[i1 + 44 >> 2] = f4;
 HEAP32[i1 + 28 >> 2] = ~~f4;
 f4 = Math_fround(HEAPF32[i3 + 12 >> 2]);
 HEAPF32[i1 + 48 >> 2] = f4;
 HEAP32[i1 + 32 >> 2] = ~~f4;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 i5 = HEAP32[i3 + 36 >> 2] | 0;
 HEAP32[i1 + 20 >> 2] = i5;
 i2 = HEAP32[i3 + 32 >> 2] | 0;
 HEAP32[i1 + 24 >> 2] = i2;
 f4 = Math_fround(i5 | 0);
 HEAP32[i1 + 36 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i3 + 40 >> 2]) * f4);
 f4 = Math_fround(i2 | 0);
 HEAP32[i1 + 40 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * f4);
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i6 = i7;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i4, i1, 0) | 0) i1 = 1; else if (!i1) i1 = 0; else {
  i1 = ___dynamic_cast(i1, 2624, 2608, 0) | 0;
  if (!i1) i1 = 0; else {
   i2 = i6 + 4 | 0;
   i3 = i2 + 52 | 0;
   do {
    HEAP32[i2 >> 2] = 0;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) < (i3 | 0));
   HEAP32[i6 >> 2] = i1;
   HEAP32[i6 + 8 >> 2] = i4;
   HEAP32[i6 + 12 >> 2] = -1;
   HEAP32[i6 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, i6, HEAP32[i5 >> 2] | 0, 1);
   if ((HEAP32[i6 + 24 >> 2] | 0) == 1) {
    HEAP32[i5 >> 2] = HEAP32[i6 + 16 >> 2];
    i1 = 1;
   } else i1 = 0;
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function _SDL_FreeFormat(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 if (!i3) {
  HEAP32[i1 >> 2] = 41077;
  _SDL_SetError(59509, i1) | 0;
  STACKTOP = i4;
  return;
 }
 i1 = i3 + 36 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 + -1;
 if ((i2 | 0) > 1) {
  STACKTOP = i4;
  return;
 }
 i1 = HEAP32[19489] | 0;
 L8 : do if ((i1 | 0) == (i3 | 0)) HEAP32[19489] = HEAP32[i3 + 40 >> 2]; else if (i1 | 0) {
  do {
   i2 = i1 + 40 | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) break L8;
  } while ((i1 | 0) != (i3 | 0));
  HEAP32[i2 >> 2] = HEAP32[i3 + 40 >> 2];
 } while (0);
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 if (i1 | 0) {
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = i2 + -1;
  if ((i2 | 0) <= 1) {
   _SDL_free(HEAP32[i1 + 4 >> 2] | 0);
   _SDL_free(i1);
  }
 }
 _SDL_free(i3);
 STACKTOP = i4;
 return;
}

function _SDL_GameControllerGetButtonFromString(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = -1; else if (!(HEAP8[i1 >> 0] | 0)) i1 = -1; else if (!(_SDL_strcasecmp(i1, 58763) | 0)) i1 = 0; else if (!(_SDL_strcasecmp(i1, 58765) | 0)) i1 = 1; else if (!(_SDL_strcasecmp(i1, 58767) | 0)) i1 = 2; else if (!(_SDL_strcasecmp(i1, 58769) | 0)) i1 = 3; else if (!(_SDL_strcasecmp(i1, 58771) | 0)) i1 = 4; else if (!(_SDL_strcasecmp(i1, 58776) | 0)) i1 = 5; else if (!(_SDL_strcasecmp(i1, 58782) | 0)) i1 = 6; else if (!(_SDL_strcasecmp(i1, 58788) | 0)) i1 = 7; else if (!(_SDL_strcasecmp(i1, 58798) | 0)) i1 = 8; else if (!(_SDL_strcasecmp(i1, 58809) | 0)) i1 = 9; else if (!(_SDL_strcasecmp(i1, 58822) | 0)) i1 = 10; else if (!(_SDL_strcasecmp(i1, 58836) | 0)) i1 = 11; else if (!(_SDL_strcasecmp(i1, 58841) | 0)) i1 = 12; else if (!(_SDL_strcasecmp(i1, 58848) | 0)) i1 = 13; else {
  i1 = (_SDL_strcasecmp(i1, 58855) | 0) == 0;
  return (i1 ? 14 : -1) | 0;
 }
 return i1 | 0;
}

function _SDL_GameControllerQuit() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = HEAP32[20465] | 0;
 if (i1 | 0) do {
  HEAP32[i1 + 4 >> 2] = 0;
  _SDL_JoystickClose(HEAP32[i1 >> 2] | 0);
  i2 = HEAP32[20465] | 0;
  L4 : do if (i2 | 0) {
   i3 = 0;
   while (1) {
    if ((i2 | 0) == (i1 | 0)) break;
    i3 = HEAP32[i2 + 1344 >> 2] | 0;
    if (!i3) break L4; else {
     i4 = i2;
     i2 = i3;
     i3 = i4;
    }
   }
   i2 = HEAP32[i1 + 1344 >> 2] | 0;
   if (!i3) {
    HEAP32[20465] = i2;
    break;
   } else {
    HEAP32[i3 + 1344 >> 2] = i2;
    break;
   }
  } while (0);
  _SDL_free(i1);
  i1 = HEAP32[20465] | 0;
 } while ((i1 | 0) != 0);
 i1 = HEAP32[20460] | 0;
 if (!i1) {
  _SDL_DelEventWatch(41, 0);
  return;
 }
 do {
  HEAP32[20460] = HEAP32[i1 + 24 >> 2];
  _SDL_free(HEAP32[i1 + 16 >> 2] | 0);
  _SDL_free(HEAP32[i1 + 20 >> 2] | 0);
  _SDL_free(i1);
  i1 = HEAP32[20460] | 0;
 } while ((i1 | 0) != 0);
 _SDL_DelEventWatch(41, 0);
 return;
}

function _png_user_version_check(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i8;
 i3 = i5 + 212 | 0;
 if (!i6) {
  i1 = HEAP32[i3 >> 2] | 131072;
  HEAP32[i3 >> 2] = i1;
 } else {
  i1 = 0;
  i2 = -1;
  do {
   i2 = i2 + 1 | 0;
   i4 = HEAP8[i6 + i2 >> 0] | 0;
   if (i4 << 24 >> 24 != (HEAP8[60603 + i2 >> 0] | 0)) HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 131072;
   i1 = i1 + (i4 << 24 >> 24 == 46 & 1) | 0;
   if ((i1 | 0) >= 2) break;
  } while (!((i2 | 0) == 6 | i4 << 24 >> 24 == 0));
  i1 = HEAP32[i3 >> 2] | 0;
 }
 if (!(i1 & 131072)) {
  i7 = 1;
  STACKTOP = i8;
  return i7 | 0;
 }
 _png_safecat(i7, 128, _png_safecat(i7, 128, _png_safecat(i7, 128, _png_safecat(i7, 128, 0, 60610) | 0, i6) | 0, 60641) | 0, 60603) | 0;
 _png_warning(i5, i7);
 i7 = 0;
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_(i2, i1, i4, i8) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i7;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i6 = i8 - i4 | 0;
 if (i6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i6 >>> 0 < 11) {
  HEAP8[i2 + 11 >> 0] = i6;
  i3 = i2;
 } else {
  i1 = i6 + 16 & -16;
  i3 = __Znwj(i1) | 0;
  HEAP32[i2 >> 2] = i3;
  HEAP32[i2 + 8 >> 2] = i1 | -2147483648;
  HEAP32[i2 + 4 >> 2] = i6;
 }
 i1 = i4;
 i2 = i3;
 while (1) {
  if ((i1 | 0) == (i8 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2, i1);
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 HEAP8[i5 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i3 + i6 | 0, i5);
 STACKTOP = i7;
 return;
}

function _SDL_utf8strlcpy(i4, i5, i1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = _strlen(i5) | 0;
 i1 = i1 + -1 | 0;
 i1 = i3 >>> 0 < i1 >>> 0 ? i3 : i1;
 if (!i1) {
  i5 = 0;
  i4 = i4 + i5 | 0;
  HEAP8[i4 >> 0] = 0;
  return i5 | 0;
 }
 i2 = i1 + -1 | 0;
 i3 = HEAP8[i5 + i2 >> 0] | 0;
 L4 : do if ((i3 + 64 & 255) < 53) i1 = i2; else if (!((i3 & 255) > 191 | i3 << 24 >> 24 > -1 | (i2 | 0) == 0)) {
  L7 : do if ((i3 & -32) << 24 >> 24 == -64) i3 = 2; else while (1) {
   if ((i3 & -16) << 24 >> 24 == -32) {
    i3 = 3;
    break L7;
   }
   if ((i3 + 16 & 255) < 5) {
    i3 = 4;
    break L7;
   }
   i2 = i2 + -1 | 0;
   if (!i2) break L4;
   i3 = HEAP8[i5 + i2 >> 0] | 0;
   if ((i3 & -32) << 24 >> 24 == -64) {
    i3 = 2;
    break;
   }
  } while (0);
  i1 = (i1 - i2 | 0) == (i3 | 0) ? i1 : i2;
 } while (0);
 _memcpy(i4 | 0, i5 | 0, i1 | 0) | 0;
 i5 = i1;
 i4 = i4 + i5 | 0;
 HEAP8[i4 >> 0] = 0;
 return i5 | 0;
}

function _SDL_GetWindowData(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i6 + 16 | 0;
 i3 = i6 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 L1 : do if (!i2) {
  _SDL_SetError(40203, i6) | 0;
  i1 = 0;
 } else {
  if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i2 + 280 | 0)) {
   if (i5 | 0) if (HEAP8[i5 >> 0] | 0) {
    i1 = HEAP32[i1 + 140 >> 2] | 0;
    if (!i1) {
     i1 = 0;
     break;
    }
    while (1) {
     i2 = HEAP32[i1 >> 2] | 0;
     if (i2 | 0) if (!(_SDL_strcmp(i2, i5) | 0)) break;
     i1 = HEAP32[i1 + 8 >> 2] | 0;
     if (!i1) {
      i1 = 0;
      break L1;
     }
    }
    i1 = HEAP32[i1 + 4 >> 2] | 0;
    break;
   }
   HEAP32[i4 >> 2] = 59004;
   _SDL_SetError(59509, i4) | 0;
   i1 = 0;
   break;
  }
  _SDL_SetError(59973, i3) | 0;
  i1 = 0;
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _SDL_UpdateWindowGrab(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 i1 = HEAP32[(_SDL_GetMouse() | 0) + 76 >> 2] | 0;
 i3 = HEAP32[i6 + 48 >> 2] | 0;
 i4 = HEAP32[19487] | 0;
 i2 = HEAP32[i4 + 276 >> 2] | 0;
 if ((i1 | i3 & 256 | 0) == 0 | (i3 & 512 | 0) == 0) if ((i2 | 0) == (i6 | 0)) {
  i1 = 0;
  i3 = 0;
  i2 = i4;
  i5 = 6;
 } else {
  i3 = 0;
  i2 = i4;
 } else if ((i2 | 0) == 0 | (i2 | 0) == (i6 | 0)) {
  i1 = 1;
  i3 = i6;
  i2 = i4;
  i5 = 6;
 } else {
  i1 = i2 + 48 | 0;
  HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -257;
  i1 = HEAP32[i4 + 124 >> 2] | 0;
  if (!i1) {
   i1 = 1;
   i3 = i6;
   i2 = i4;
   i5 = 6;
  } else {
   FUNCTION_TABLE_viii[i1 & 63](i4, i2, 0);
   i1 = 1;
   i3 = i6;
   i2 = HEAP32[19487] | 0;
   i5 = 6;
  }
 }
 if ((i5 | 0) == 6) {
  HEAP32[i2 + 276 >> 2] = i3;
  i3 = i1;
 }
 i1 = HEAP32[i2 + 124 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_viii[i1 & 63](i2, i6, i3);
 return;
}

function _dollarDifference(i4, i5, f1) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 f1 = Math_fround(f1);
 var i2 = 0, d3 = 0.0, f6 = f0, f7 = f0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0;
 d3 = +f1;
 f1 = Math_fround(0.0);
 i2 = 0;
 do {
  i8 = i4 + (i2 << 3) | 0;
  i11 = i8 | 0;
  d9 = +Math_fround(HEAPF32[i11 >> 2]);
  d9 = +_SDL_cos(d3) * d9;
  i8 = i8 + 4 | 0;
  d10 = +Math_fround(HEAPF32[i8 >> 2]);
  f7 = Math_fround(d9 - +_SDL_sin(d3) * d10);
  d10 = +Math_fround(HEAPF32[i11 >> 2]);
  d10 = +_SDL_sin(d3) * d10;
  d9 = +Math_fround(HEAPF32[i8 >> 2]);
  f6 = Math_fround(d10 + +_SDL_cos(d3) * d9);
  i8 = i5 + (i2 << 3) | 0;
  f7 = Math_fround(f7 - Math_fround(HEAPF32[i8 >> 2]));
  f7 = Math_fround(f7 * f7);
  f6 = Math_fround(f6 - Math_fround(HEAPF32[i8 + 4 >> 2]));
  f1 = Math_fround(f1 + Math_fround(+_SDL_sqrt(+Math_fround(f7 + Math_fround(f6 * f6)))));
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != 64);
 return Math_fround(f1 * Math_fround(.015625));
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i3, i4, i5, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i3 + 8 >> 2] | 0, i2) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, i3, i4, i5); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i3 >> 2] | 0, i2) | 0) {
  if ((HEAP32[i3 + 16 >> 2] | 0) != (i4 | 0)) {
   i1 = i3 + 20 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) {
    HEAP32[i3 + 32 >> 2] = i5;
    HEAP32[i1 >> 2] = i4;
    i5 = i3 + 40 | 0;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
    if ((HEAP32[i3 + 36 >> 2] | 0) == 1) if ((HEAP32[i3 + 24 >> 2] | 0) == 2) HEAP8[i3 + 54 >> 0] = 1;
    HEAP32[i3 + 44 >> 2] = 4;
    break;
   }
  }
  if ((i5 | 0) == 1) HEAP32[i3 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _SDL_RWFromFile(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5 + 8 | 0;
 i2 = i5;
 if (i3 | 0) if ((i1 | 0) != 0 & (HEAP8[i3 >> 0] | 0) != 0) if (HEAP8[i1 >> 0] | 0) {
  i2 = _fopen(i3, i1) | 0;
  if (!i2) {
   HEAP32[i4 >> 2] = i3;
   _SDL_SetError(57693, i4) | 0;
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i1 = _SDL_malloc(36) | 0;
  if (!i1) {
   _SDL_Error(0) | 0;
   i4 = i1;
   STACKTOP = i5;
   return i4 | 0;
  } else {
   HEAP32[i1 >> 2] = 119;
   HEAP32[i1 + 4 >> 2] = 22;
   HEAP32[i1 + 8 >> 2] = 23;
   HEAP32[i1 + 12 >> 2] = 24;
   HEAP32[i1 + 16 >> 2] = 120;
   HEAP32[i1 + 28 >> 2] = i2;
   HEAP32[i1 + 24 >> 2] = 1;
   HEAP32[i1 + 20 >> 2] = 2;
   i4 = i1;
   STACKTOP = i5;
   return i4 | 0;
  }
 }
 _SDL_SetError(57646, i2) | 0;
 i4 = 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _SDL_DestroyTexture(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5;
 if (i4 | 0) if ((HEAP32[i4 >> 2] | 0) == 85557) {
  i3 = HEAP32[i4 + 32 >> 2] | 0;
  if ((HEAP32[i3 + 308 >> 2] | 0) == (i4 | 0)) _SDL_SetRenderTarget(i3, 0) | 0;
  HEAP32[i4 >> 2] = 0;
  i2 = HEAP32[i4 + 76 >> 2] | 0;
  i1 = i4 + 72 | 0;
  if (i2 | 0) HEAP32[i2 + 72 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  HEAP32[((i1 | 0) == 0 ? i3 + 304 | 0 : i1 + 76 | 0) >> 2] = i2;
  i1 = HEAP32[i4 + 36 >> 2] | 0;
  if (i1 | 0) _SDL_DestroyTexture(i1);
  i1 = HEAP32[i4 + 40 >> 2] | 0;
  if (i1 | 0) _SDL_SW_DestroyYUVTexture(i1);
  _SDL_free(HEAP32[i4 + 44 >> 2] | 0);
  FUNCTION_TABLE_vii[HEAP32[i3 + 88 >> 2] & 127](i3, i4);
  _SDL_free(i4);
  STACKTOP = i5;
  return;
 }
 _SDL_SetError(41358, i1) | 0;
 STACKTOP = i5;
 return;
}

function _SDL_CaptureMouse(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i6;
 do if (!(HEAP32[19499] | 0)) i1 = _SDL_Error(4) | 0; else {
  i2 = _SDL_GetKeyboardFocus() | 0;
  i3 = (i2 | 0) != 0;
  if (i3) i4 = (HEAP32[i2 + 48 >> 2] | 0) >>> 14 & 1; else i4 = 0;
  if ((i4 | 0) == (i1 | 0)) i1 = 0; else {
   if (!i1) {
    if ((FUNCTION_TABLE_ii[HEAP32[77996 >> 2] & 255](0) | 0) == -1) {
     i1 = -1;
     break;
    }
    i1 = i2 + 48 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -16385;
    i1 = 0;
    break;
   }
   if (!i3) {
    i1 = _SDL_SetError(50669, i5) | 0;
    break;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[77996 >> 2] & 255](i2) | 0) == -1) i1 = -1; else {
    i1 = i2 + 48 | 0;
    HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 16384;
    i1 = 0;
   }
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _png_colorspace_set_gamma(i7, i5, i6) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0;
 if ((i6 + -16 | 0) >>> 0 > 624999984) {
  i1 = i5 + 74 | 0;
  i3 = 60933;
  i2 = i1;
  i1 = HEAP16[i1 >> 1] | 0;
 } else {
  i2 = i5 + 74 | 0;
  i1 = HEAP16[i2 >> 1] | 0;
  if ((i1 & 8) == 0 ? 1 : (HEAP32[i7 + 208 >> 2] & 32768 | 0) == 0) {
   if (i1 << 16 >> 16 < 0) return;
   do if (i1 & 1) {
    i3 = HEAP32[i5 >> 2] | 0;
    if (i3 | 0) {
     d4 = +Math_floor(+(+(i3 | 0) * 1.0e5 / +(i6 | 0) + .5));
     if (d4 <= 2147483647.0 & d4 >= -2147483648.0) if ((~~d4 + -95e3 | 0) >>> 0 < 10001) break;
    }
    if (!(i1 & 32)) {
     _png_chunk_report(i7, 60858, 0);
     break;
    }
    _png_chunk_report(i7, 60901, 2);
    return;
   } while (0);
   HEAP32[i5 >> 2] = i6;
   HEAP16[i2 >> 1] = i1 | 9;
   return;
  } else i3 = 63980;
 }
 HEAP16[i2 >> 1] = i1 | -32768;
 _png_chunk_report(i7, i3, 1);
 return;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(34584) | 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6);
 do if (i3 >>> 0 < 2) {
  HEAP8[i6 + 8 + 3 >> 0] = i3;
  i5 = i6;
 } else {
  i1 = i3 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else {
   i5 = __Znwj(i1 << 2) | 0;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i6 + 8 >> 2] = i1 | -2147483648;
   HEAP32[i6 + 4 >> 2] = i3;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 34584, i3) | 0;
 HEAP32[i2 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i3 << 2) | 0, i2);
 STACKTOP = i4;
 return;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i3 = __ZNSt3__211char_traitsIwE6lengthEPKw(34608) | 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i6);
 do if (i3 >>> 0 < 2) {
  HEAP8[i6 + 8 + 3 >> 0] = i3;
  i5 = i6;
 } else {
  i1 = i3 + 4 & -4;
  if (i1 >>> 0 > 1073741823) _abort(); else {
   i5 = __Znwj(i1 << 2) | 0;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i6 + 8 >> 2] = i1 | -2147483648;
   HEAP32[i6 + 4 >> 2] = i3;
   break;
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwj(i5, 34608, i3) | 0;
 HEAP32[i2 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i5 + (i3 << 2) | 0, i2);
 STACKTOP = i4;
 return;
}

function _close_audio_device(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if (!i2) return;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  i1 = 81876 + (i1 + -1 << 2) | 0;
  if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) HEAP32[i1 >> 2] = 0;
 }
 _SDL_AtomicSet(i2 + 132 | 0, 1) | 0;
 _SDL_AtomicSet(i2 + 136 | 0, 0) | 0;
 i1 = HEAP32[i2 + 156 >> 2] | 0;
 if (i1 | 0) _SDL_WaitThread(i1, 0);
 i1 = HEAP32[i2 + 152 >> 2] | 0;
 if (i1 | 0) _SDL_DestroyMutex(i1);
 _SDL_free(HEAP32[i2 + 148 >> 2] | 0);
 if (HEAP32[i2 + 28 >> 2] | 0) _SDL_free(HEAP32[i2 + 44 >> 2] | 0);
 if (HEAP32[i2 + 180 >> 2] | 0) FUNCTION_TABLE_vi[HEAP32[81768 >> 2] & 511](i2);
 i1 = HEAP32[i2 + 164 >> 2] | 0;
 if (i1 | 0) do {
  i3 = i1;
  i1 = HEAP32[i1 + 8200 >> 2] | 0;
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 i1 = HEAP32[i2 + 172 >> 2] | 0;
 if (i1 | 0) do {
  i3 = i1;
  i1 = HEAP32[i1 + 8200 >> 2] | 0;
  _SDL_free(i3);
 } while ((i1 | 0) != 0);
 _SDL_free(i2);
 return;
}

function __ZNSt3__211__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i10 + 8 | 0;
 i4 = i10;
 i5 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i1, HEAP32[i6 >> 2] | 0, i3, i7, i4) | 0;
  i11 = (HEAP32[i4 >> 2] | 0) - i8 | 0;
  if ((_fwrite(i3, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i9 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i10 + 8 | 0;
 i4 = i10;
 i5 = i1 + 36 | 0;
 i6 = i1 + 40 | 0;
 i7 = i3 + 8 | 0;
 i8 = i3;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i1, HEAP32[i6 >> 2] | 0, i3, i7, i4) | 0;
  i11 = (HEAP32[i4 >> 2] | 0) - i8 | 0;
  if ((_fwrite(i3, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 28 | 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i6 | 0)) break;
  i3 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (i3 >>> 0 < i4 >>> 0) {
   i4 = i4 - i3 >> 2;
   i10 = i6 - i2 | 0;
   i4 = (i10 | 0) < (i4 | 0) ? i10 : i4;
   __ZNSt3__211char_traitsIwE4copyEPwPKwj(i3, i1, i4) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + (i4 << 2);
   i1 = i1 + (i4 << 2) | 0;
   i2 = i4 + i2 | 0;
   continue;
  }
  i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0;
  i10 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iii[i4 & 63](i5, i10) | 0) == (i7 | 0)) break;
  i1 = i1 + 4 | 0;
  i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function _png_handle_gAMA(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 i5 = HEAP32[i1 + 208 >> 2] | 0;
 if (!(i5 & 1)) _png_chunk_error(i1, 63643);
 if (i5 & 6 | 0) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 64026);
  STACKTOP = i6;
  return;
 }
 if ((i3 | 0) != 4) {
  _png_crc_finish(i1, i3) | 0;
  _png_chunk_benign_error(i1, 63990);
  STACKTOP = i6;
  return;
 }
 _png_read_data(i1, i4, 4);
 _png_calculate_crc(i1, i4, 4);
 if (_png_crc_finish(i1, 0) | 0) {
  STACKTOP = i6;
  return;
 }
 i5 = (HEAPU8[i4 + 1 >> 0] | 0) << 16 | (HEAPU8[i4 >> 0] | 0) << 24 | (HEAPU8[i4 + 2 >> 0] | 0) << 8 | (HEAPU8[i4 + 3 >> 0] | 0);
 _png_colorspace_set_gamma(i1, i1 + 824 | 0, (i5 | 0) > -1 ? i5 : -1);
 _png_colorspace_sync(i1, i2);
 STACKTOP = i6;
 return;
}

function _png_realloc_array(i3, i6, i4, i7, i8) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i9 = 0;
 i5 = 0;
 if ((i4 | 0) < 0 | ((i7 | 0) < 1 | (i8 | 0) == 0)) _png_error(i3, 62604);
 i9 = (i4 | 0) > 0;
 if ((i6 | 0) == 0 & i9) _png_error(i3, 62604);
 if ((2147483647 - i4 | 0) < (i7 | 0)) {
  i9 = 0;
  return i9 | 0;
 }
 i1 = i7 + i4 | 0;
 if ((4294967295 / (i8 >>> 0) | 0) >>> 0 < i1 >>> 0) {
  i9 = 0;
  return i9 | 0;
 }
 i1 = Math_imul(i1, i8) | 0;
 if (!i1) {
  i9 = 0;
  return i9 | 0;
 }
 if (!i3) i5 = 10; else {
  i2 = HEAP32[i3 + 720 >> 2] | 0;
  if (!i2) i5 = 10; else i2 = FUNCTION_TABLE_iii[i2 & 63](i3, i1) | 0;
 }
 if ((i5 | 0) == 10) i2 = _malloc(i1) | 0;
 if (!i2) {
  i9 = 0;
  return i9 | 0;
 }
 i1 = Math_imul(i8, i4) | 0;
 if (i9) _memcpy(i2 | 0, i6 | 0, i1 | 0) | 0;
 _memset(i2 + i1 | 0, 0, Math_imul(i8, i7) | 0) | 0;
 i9 = i2;
 return i9 | 0;
}

function _HandleCaptureProcess(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 if (!(_SDL_AtomicGet(i5 + 136 | 0) | 0)) return;
 if (_SDL_AtomicGet(i5 + 140 | 0) | 0) return;
 i6 = i5 + 28 | 0;
 if (!(HEAP32[i6 >> 2] | 0)) {
  i1 = i5 + 180 | 0;
  i2 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  i4 = i5 + 16 | 0;
  if (!i2) {
   i2 = _SDL_malloc(HEAP32[i4 >> 2] | 0) | 0;
   HEAP32[HEAP32[i1 >> 2] >> 2] = i2;
   if (!i2) return; else {
    i1 = i4;
    i3 = i2;
    i2 = i4;
   }
  } else {
   i1 = i4;
   i3 = i2;
   i2 = i4;
  }
 } else {
  i1 = i5 + 52 | 0;
  i3 = HEAP32[i5 + 44 >> 2] | 0;
  i2 = i5 + 16 | 0;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 _emscripten_asm_const_iii(14, i3 | 0, ((HEAP32[i2 >> 2] | 0) >>> 2 >>> 0) / ((HEAPU8[i5 + 10 >> 0] | 0) >>> 0) | 0 | 0) | 0;
 if (HEAP32[i6 >> 2] | 0) _SDL_ConvertAudio(i6) | 0;
 FUNCTION_TABLE_viii[HEAP32[i5 + 20 >> 2] & 63](HEAP32[i5 + 24 >> 2] | 0, i3, i1);
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i5, i6); else {
  i4 = HEAP32[i1 + 12 >> 2] | 0;
  i3 = i1 + 16 + (i4 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1 + 16 | 0, i2, i5, i6);
  if ((i4 | 0) > 1) {
   i4 = i2 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i5, i6);
    if (HEAP8[i4 >> 0] | 0) break L1;
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i3 >>> 0);
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i1, i5, i3, i2, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 HEAP8[i5 + 53 >> 0] = 1;
 do if ((HEAP32[i5 + 4 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i5 + 52 >> 0] = 1;
  i1 = i5 + 16 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i5 + 24 >> 2] = i4;
   HEAP32[i5 + 36 >> 2] = 1;
   if (!((i4 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  if ((i2 | 0) != (i3 | 0)) {
   i4 = i5 + 36 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  i2 = i5 + 24 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == 2) {
   HEAP32[i2 >> 2] = i4;
   i1 = i4;
  }
  if ((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0) HEAP8[i5 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i8 = i5 + 24 | 0;
 i9 = i5 + 28 | 0;
 i2 = 0;
 while (1) {
  if ((i2 | 0) >= (i6 | 0)) break;
  i3 = HEAP32[i8 >> 2] | 0;
  i4 = HEAP32[i9 >> 2] | 0;
  if (i3 >>> 0 < i4 >>> 0) {
   i4 = i4 - i3 | 0;
   i10 = i6 - i2 | 0;
   i4 = (i10 | 0) < (i4 | 0) ? i10 : i4;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj(i3, i1, i4) | 0;
   HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i4;
   i1 = i1 + i4 | 0;
   i2 = i4 + i2 | 0;
   continue;
  }
  i4 = HEAP32[(HEAP32[i5 >> 2] | 0) + 52 >> 2] | 0;
  i10 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iii[i4 & 63](i5, i10) | 0) == (i7 | 0)) break;
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
 }
 return i2 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i5, i6, i1, i4, i8, i9, i10) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i2 = 0, i3 = 0, i7 = 0;
 if ((-17 - i6 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i5);
 if ((HEAP8[i5 + 11 >> 0] | 0) < 0) i7 = HEAP32[i5 >> 2] | 0; else i7 = i5;
 if (i6 >>> 0 < 2147483623) {
  i2 = i1 + i6 | 0;
  i3 = i6 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i8 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i3, i7, i8) | 0;
 i1 = i4 - i9 - i8 | 0;
 if (i1 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcj(i3 + i8 + i10 | 0, i7 + i8 + i9 | 0, i1) | 0;
 if ((i6 | 0) != 10) __ZdlPv(i7);
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 8 >> 2] = i2 | -2147483648;
 return;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc(i1, i5, i6, i2, i3, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i10 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i8 = i7;
 i9 = i7 + 8 | 0;
 HEAP32[i11 >> 2] = i10 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1, i10, i11, i2, i3, i4);
 i2 = i8;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = i10;
 i2 = __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_(i5, HEAP32[i6 >> 2] | 0) | 0;
 i1 = ___uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i2 = _mbsrtowcs(i5, i9, i2, i8) | 0;
 if (i1 | 0) ___uselocale(i1) | 0;
 if ((i2 | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(0); else {
  HEAP32[i6 >> 2] = i5 + (i2 << 2);
  STACKTOP = i7;
  return;
 }
}

function ___strchrnul(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i3 = i4 & 255;
 L1 : do if (!i3) i1 = i1 + (_strlen(i1) | 0) | 0; else {
  if (i1 & 3) {
   i2 = i4 & 255;
   do {
    i5 = HEAP8[i1 >> 0] | 0;
    if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break L1;
    i1 = i1 + 1 | 0;
   } while ((i1 & 3 | 0) != 0);
  }
  i3 = Math_imul(i3, 16843009) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  L10 : do if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) do {
   i5 = i2 ^ i3;
   if ((i5 & -2139062144 ^ -2139062144) & i5 + -16843009 | 0) break L10;
   i1 = i1 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009 | 0)); while (0);
  i2 = i4 & 255;
  while (1) {
   i5 = HEAP8[i1 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? 1 : i5 << 24 >> 24 == i2 << 24 >> 24) break; else i1 = i1 + 1 | 0;
  }
 } while (0);
 return i1 | 0;
}

function _cos(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
 L1 : do if (i3 >>> 0 < 1072243196) if (i3 >>> 0 < 1044816030) d1 = 1.0; else d1 = +___cos(d1, 0.0); else {
  if (i3 >>> 0 > 2146435071) {
   d1 = d1 - d1;
   break;
  }
  switch ((___rem_pio2(d1, i2) | 0) & 3) {
  case 0:
   {
    d1 = +___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  case 1:
   {
    d1 = -+___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  case 2:
   {
    d1 = -+___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  default:
   {
    d1 = +___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  }
 } while (0);
 STACKTOP = i4;
 return +d1;
}

function _sin(d1) {
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
 L1 : do if (i3 >>> 0 < 1072243196) {
  if (i3 >>> 0 >= 1045430272) d1 = +___sin(d1, 0.0, 0);
 } else {
  if (i3 >>> 0 > 2146435071) {
   d1 = d1 - d1;
   break;
  }
  switch ((___rem_pio2(d1, i2) | 0) & 3) {
  case 0:
   {
    d1 = +___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  case 1:
   {
    d1 = +___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  case 2:
   {
    d1 = -+___sin(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3], 1);
    break L1;
   }
  default:
   {
    d1 = -+___cos(+HEAPF64[i2 >> 3], +HEAPF64[i2 + 8 >> 3]);
    break L1;
   }
  }
 } while (0);
 STACKTOP = i4;
 return +d1;
}

function _Emscripten_CreateDevice(i1) {
 i1 = i1 | 0;
 i1 = _SDL_calloc(1, 688) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i1 = 0;
  return i1 | 0;
 } else {
  _SDL_SetHint(48569, 48602) | 0;
  HEAP32[i1 + 4 >> 2] = 108;
  HEAP32[i1 + 8 >> 2] = 318;
  HEAP32[i1 + 28 >> 2] = 37;
  HEAP32[i1 + 204 >> 2] = 319;
  HEAP32[i1 + 32 >> 2] = 32;
  HEAP32[i1 + 40 >> 2] = 49;
  HEAP32[i1 + 52 >> 2] = 50;
  HEAP32[i1 + 128 >> 2] = 51;
  HEAP32[i1 + 112 >> 2] = 9;
  HEAP32[i1 + 132 >> 2] = 35;
  HEAP32[i1 + 136 >> 2] = 15;
  HEAP32[i1 + 140 >> 2] = 52;
  HEAP32[i1 + 164 >> 2] = 33;
  HEAP32[i1 + 168 >> 2] = 34;
  HEAP32[i1 + 172 >> 2] = 320;
  HEAP32[i1 + 176 >> 2] = 35;
  HEAP32[i1 + 180 >> 2] = 38;
  HEAP32[i1 + 188 >> 2] = 36;
  HEAP32[i1 + 192 >> 2] = 109;
  HEAP32[i1 + 196 >> 2] = 53;
  HEAP32[i1 + 200 >> 2] = 54;
  HEAP32[i1 + 184 >> 2] = 10;
  HEAP32[i1 + 684 >> 2] = 321;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 16 | 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) >= (i6 | 0)) break;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if (i2 >>> 0 < i3 >>> 0) {
   i3 = i3 - i2 >> 2;
   i9 = i6 - i4 | 0;
   i3 = (i9 | 0) < (i3 | 0) ? i9 : i3;
   __ZNSt3__211char_traitsIwE4copyEPwPKwj(i1, i2, i3) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + (i3 << 2);
   i1 = i1 + (i3 << 2) | 0;
   i4 = i3 + i4 | 0;
   continue;
  }
  i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 255](i5) | 0;
  if ((i2 | 0) == -1) break;
  HEAP32[i1 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(i2) | 0;
  i1 = i1 + 4 | 0;
  i4 = i4 + 1 | 0;
 }
 return i4 | 0;
}

function _SDL_UpdateWindowSurface(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i5 = i6 + 16 | 0;
 i4 = i6 + 8 | 0;
 i2 = i6 + 24 | 0;
 i3 = HEAP32[19487] | 0;
 if (!i3) {
  _SDL_SetError(40203, i6) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i3 + 280 | 0)) {
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 24 >> 2];
  HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 28 >> 2];
  if (!(HEAP32[i1 + 112 >> 2] | 0)) {
   i5 = _SDL_SetError(47451, i5) | 0;
   STACKTOP = i6;
   return i5 | 0;
  } else {
   i5 = FUNCTION_TABLE_iiiii[HEAP32[i3 + 136 >> 2] & 31](i3, i1, i2, 1) | 0;
   STACKTOP = i6;
   return i5 | 0;
  }
 }
 _SDL_SetError(59973, i4) | 0;
 i5 = -1;
 STACKTOP = i6;
 return i5 | 0;
}

function _Emscripten_SetWindowFullscreen(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i7;
 i6 = HEAP32[i3 + 144 >> 2] | 0;
 if (!i6) {
  STACKTOP = i7;
  return;
 }
 if (!i4) {
  _emscripten_exit_fullscreen() | 0;
  STACKTOP = i7;
  return;
 }
 i4 = i3 + 48 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = i1 & 4097;
 i3 = (i2 | 0) == 4097;
 HEAP32[i5 >> 2] = i3 ? 1 : 2;
 if (i3) i1 = (i1 >>> 13 & 1) + 1 | 0; else i1 = 0;
 HEAP32[i5 + 4 >> 2] = i1;
 HEAP32[i5 + 8 >> 2] = 0;
 HEAP32[i5 + 12 >> 2] = 39;
 HEAP32[i5 + 16 >> 2] = i6;
 HEAP32[i6 + 20 >> 2] = i2;
 HEAP32[i6 + 24 >> 2] = i3 & 1;
 if ((_emscripten_request_fullscreen_strategy(0, 1, i5 | 0) | 0) >>> 0 > 1) HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -4098;
 STACKTOP = i7;
 return;
}

function _fputc(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = 0;
 if ((HEAP32[i7 + 76 >> 2] | 0) < 0) i5 = 3; else if (!(___lockfile(i7) | 0)) i5 = 3; else {
  i2 = i6 & 255;
  i1 = i6 & 255;
  if ((i1 | 0) == (HEAP8[i7 + 75 >> 0] | 0)) i5 = 10; else {
   i3 = i7 + 20 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i3 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i2;
   } else i5 = 10;
  }
  if ((i5 | 0) == 10) i1 = ___overflow(i7, i6) | 0;
  ___unlockfile(i7);
 }
 do if ((i5 | 0) == 3) {
  i4 = i6 & 255;
  i1 = i6 & 255;
  if ((i1 | 0) != (HEAP8[i7 + 75 >> 0] | 0)) {
   i2 = i7 + 20 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i7 + 16 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i4;
    break;
   }
  }
  i1 = ___overflow(i7, i6) | 0;
 } while (0);
 return i1 | 0;
}

function _SDL_CreateRGBSurfaceFrom(i6, i7, i8, i1, i9, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = _SDL_MasksToPixelFormatEnum(i1, i2, i3, i4, i5) | 0;
 if (!i1) {
  _SDL_SetError(47710, i10) | 0;
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i1 = _SDL_CreateRGBSurfaceWithFormat(0, 0, 0, 0, i1) | 0;
 if (!i1) {
  i9 = 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 HEAP32[i1 + 20 >> 2] = i6;
 HEAP32[i1 + 8 >> 2] = i7;
 HEAP32[i1 + 12 >> 2] = i8;
 HEAP32[i1 + 16 >> 2] = i9;
 HEAP32[i1 + 36 >> 2] = 0;
 HEAP32[i1 + 40 >> 2] = 0;
 HEAP32[i1 + 44 >> 2] = i7;
 HEAP32[i1 + 48 >> 2] = i8;
 i9 = i1;
 STACKTOP = i10;
 return i9 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 if (!(HEAP8[76816] | 0)) if (___cxa_guard_acquire(76816) | 0) {
  HEAP32[20926] = 0;
  HEAP32[20927] = 0;
  HEAP32[20928] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(73601) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(83704);
  if (i3 >>> 0 < 11) {
   HEAP8[83715] = i3;
   i1 = 83704;
  } else {
   i5 = i3 + 16 & -16;
   i1 = __Znwj(i5) | 0;
   HEAP32[20926] = i1;
   HEAP32[20928] = i5 | -2147483648;
   HEAP32[20927] = i3;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 73601, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i3 | 0, i2);
 }
 STACKTOP = i4;
 return 83704;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 if (!(HEAP8[76824] | 0)) if (___cxa_guard_acquire(76824) | 0) {
  HEAP32[20929] = 0;
  HEAP32[20930] = 0;
  HEAP32[20931] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(73610) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(83716);
  if (i3 >>> 0 < 11) {
   HEAP8[83727] = i3;
   i1 = 83716;
  } else {
   i5 = i3 + 16 & -16;
   i1 = __Znwj(i5) | 0;
   HEAP32[20929] = i1;
   HEAP32[20931] = i5 | -2147483648;
   HEAP32[20930] = i3;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 73610, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i3 | 0, i2);
 }
 STACKTOP = i4;
 return 83716;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 if (!(HEAP8[76832] | 0)) if (___cxa_guard_acquire(76832) | 0) {
  HEAP32[20932] = 0;
  HEAP32[20933] = 0;
  HEAP32[20934] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(73622) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(83728);
  if (i3 >>> 0 < 11) {
   HEAP8[83739] = i3;
   i1 = 83728;
  } else {
   i5 = i3 + 16 & -16;
   i1 = __Znwj(i5) | 0;
   HEAP32[20932] = i1;
   HEAP32[20934] = i5 | -2147483648;
   HEAP32[20933] = i3;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 73622, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i3 | 0, i2);
 }
 STACKTOP = i4;
 return 83728;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 if (!(HEAP8[76808] | 0)) if (___cxa_guard_acquire(76808) | 0) {
  HEAP32[20923] = 0;
  HEAP32[20924] = 0;
  HEAP32[20925] = 0;
  i3 = __ZNSt3__211char_traitsIcE6lengthEPKc(73592) | 0;
  if (i3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(83692);
  if (i3 >>> 0 < 11) {
   HEAP8[83703] = i3;
   i1 = 83692;
  } else {
   i5 = i3 + 16 & -16;
   i1 = __Znwj(i5) | 0;
   HEAP32[20923] = i1;
   HEAP32[20925] = i5 | -2147483648;
   HEAP32[20924] = i3;
  }
  __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 73592, i3) | 0;
  HEAP8[i2 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i3 | 0, i2);
 }
 STACKTOP = i4;
 return 83692;
}

function _GLES2_BindTexture(i2, i1, i6, i7) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i5 = 0;
 i3 = i2 + 320 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i8;
  i5 = 4;
 } else {
  HEAP32[i8 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i2 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i8 >> 2];
   _GLES2_UpdateViewport(i2) | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   i5 = 4;
  }
 }
 if ((i5 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 FUNCTION_TABLE_vii[HEAP32[i8 + 28 >> 2] & 127](HEAP32[i4 + 4 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 if (i6 | 0) HEAPF32[i6 >> 2] = Math_fround(1.0);
 if (!i7) return 0;
 HEAPF32[i7 >> 2] = Math_fround(1.0);
 return 0;
}

function ___stpcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = 0;
 i3 = i2;
 L1 : do if (!((i3 ^ i1) & 3)) {
  if (i3 & 3) do {
   i3 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i3;
   if (!(i3 << 24 >> 24)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  } while ((i2 & 3 | 0) != 0);
  i3 = HEAP32[i2 >> 2] | 0;
  if (!((i3 & -2139062144 ^ -2139062144) & i3 + -16843009)) {
   i4 = i1;
   while (1) {
    i2 = i2 + 4 | 0;
    i1 = i4 + 4 | 0;
    HEAP32[i4 >> 2] = i3;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 & -2139062144 ^ -2139062144) & i3 + -16843009 | 0) break; else i4 = i1;
   }
  }
  i4 = 8;
 } else i4 = 8; while (0);
 if ((i4 | 0) == 8) {
  i4 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i4;
  if (i4 << 24 >> 24) do {
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
   i4 = HEAP8[i2 >> 0] | 0;
   HEAP8[i1 >> 0] = i4;
  } while (i4 << 24 >> 24 != 0);
 }
 return i1 | 0;
}

function _fopen(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i6 = i7 + 32 | 0;
 i5 = i7 + 16 | 0;
 i2 = i7;
 if (!(_strchr(72535, HEAP8[i3 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i1 = 0;
 } else {
  i4 = ___fmodeflags(i3) | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 4 >> 2] = i4 | 32768;
  HEAP32[i2 + 8 >> 2] = 438;
  i2 = ___syscall_ret(___syscall5(5, i2 | 0) | 0) | 0;
  if ((i2 | 0) < 0) i1 = 0; else {
   if (i4 & 524288 | 0) {
    HEAP32[i5 >> 2] = i2;
    HEAP32[i5 + 4 >> 2] = 2;
    HEAP32[i5 + 8 >> 2] = 1;
    ___syscall221(221, i5 | 0) | 0;
   }
   i1 = ___fdopen(i2, i3) | 0;
   if (!i1) {
    HEAP32[i6 >> 2] = i2;
    ___syscall6(6, i6 | 0) | 0;
    i1 = 0;
   }
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i8;
 i6 = i2 + 11 | 0;
 i1 = HEAP8[i6 >> 0] | 0;
 i7 = i1 << 24 >> 24 < 0;
 if (i7) i1 = HEAP32[i2 + 4 >> 2] | 0; else i1 = i1 & 255;
 do if (i1 >>> 0 < i3 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i2, i3 - i1 | 0, i4) | 0; else if (i7) {
  i7 = (HEAP32[i2 >> 2] | 0) + i3 | 0;
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i7, i5);
  HEAP32[i2 + 4 >> 2] = i3;
  break;
 } else {
  HEAP8[i5 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + i3 | 0, i5);
  HEAP8[i6 >> 0] = i3;
  break;
 } while (0);
 STACKTOP = i8;
 return;
}

function _SDL_FlushEvents(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = (_SDL_AtomicGet(15136) | 0) != 0;
 i1 = HEAP32[3783] | 0;
 if (!(i6 & (i1 | 0) != 0)) return;
 if (_SDL_LockMutex(i1) | 0) return;
 i1 = HEAP32[3787] | 0;
 if (i1 | 0) do {
  i4 = i1 + 72 | 0;
  i3 = i1;
  i1 = HEAP32[i4 >> 2] | 0;
  i6 = HEAP32[i3 >> 2] | 0;
  i2 = i1;
  if (!(i6 >>> 0 < i7 >>> 0 | i6 >>> 0 > i8 >>> 0)) {
   i5 = i3 + 68 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if (!i6) i2 = i1; else {
    HEAP32[i6 + 72 >> 2] = i2;
    i2 = HEAP32[i4 >> 2] | 0;
   }
   if (i2 | 0) HEAP32[i2 + 68 >> 2] = i6;
   if ((HEAP32[3787] | 0) == (i3 | 0)) HEAP32[3787] = i2;
   if ((HEAP32[3788] | 0) == (i3 | 0)) HEAP32[3788] = HEAP32[i5 >> 2];
   HEAP32[i4 >> 2] = HEAP32[3789];
   HEAP32[3789] = i3;
   _SDL_AtomicAdd(15140, -1) | 0;
  }
 } while ((i1 | 0) != 0);
 return;
}

function _png_read_image(i6, i7) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 if (!i6) return;
 i1 = i6 + 212 | 0;
 do if (!(HEAP32[i1 >> 2] & 64)) {
  i2 = _png_set_interlace_handling(i6) | 0;
  if (!(HEAP32[i1 >> 2] & 64)) {
   _png_read_start_row(i6);
   break;
  } else {
   _png_app_error(i6, 66002);
   break;
  }
 } else {
  if (HEAP8[i6 + 432 >> 0] | 0) if (!(HEAP32[i6 + 216 >> 2] & 2)) {
   _png_warning(i6, 66268);
   HEAP32[i6 + 356 >> 2] = HEAP32[i6 + 352 >> 2];
  }
  i2 = _png_set_interlace_handling(i6) | 0;
 } while (0);
 i5 = HEAP32[i6 + 352 >> 2] | 0;
 if ((i2 | 0) < 1 | (i5 | 0) == 0) return; else i1 = 0;
 do {
  i3 = 0;
  i4 = i7;
  while (1) {
   _png_read_row(i6, HEAP32[i4 >> 2] | 0, 0);
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i5 | 0)) break; else i4 = i4 + 4 | 0;
  }
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != (i2 | 0));
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(i5, i1, i6) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 i7 = i5 + 12 | 0;
 i8 = i5 + 16 | 0;
 i4 = 0;
 while (1) {
  if ((i4 | 0) >= (i6 | 0)) break;
  i2 = HEAP32[i7 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if (i2 >>> 0 < i3 >>> 0) {
   i3 = i3 - i2 | 0;
   i9 = i6 - i4 | 0;
   i3 = (i9 | 0) < (i3 | 0) ? i9 : i3;
   __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, i2, i3) | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i3;
   i1 = i1 + i3 | 0;
   i4 = i3 + i4 | 0;
   continue;
  }
  i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 40 >> 2] & 255](i5) | 0;
  if ((i2 | 0) == -1) break;
  HEAP8[i1 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(i2) | 0;
  i1 = i1 + 1 | 0;
  i4 = i4 + 1 | 0;
 }
 return i4 | 0;
}

function _BlitBto2(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = (HEAP32[i1 + 36 >> 2] | 0) / 2 | 0;
 i7 = HEAP32[i1 + 48 >> 2] | 0;
 i8 = ((i9 + 7 | 0) / -8 | 0) + i9 + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 if (!((i2 | 0) != 0 & (i9 | 0) > 0)) return;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  i3 = 0;
  i4 = 0;
  i5 = i6;
  while (1) {
   if (!(i4 & 7)) {
    i3 = HEAP8[i1 >> 0] | 0;
    i1 = i1 + 1 | 0;
   }
   HEAP16[i5 >> 1] = HEAP16[i7 + (((i3 & 255) >>> 7 & 255) << 1) >> 1] | 0;
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i9 | 0)) break; else {
    i3 = (i3 & 255) << 1 & 255;
    i5 = i5 + 2 | 0;
   }
  }
  if (!i2) break; else {
   i6 = i6 + (i9 << 1) + (i10 << 1) | 0;
   i1 = i1 + i8 | 0;
  }
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 288 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 288 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZN4Game7AddTileEiiiiPKc(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i13 = i6 + 20 | 0;
 i12 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i10 = i6 + 4 | 0;
 i9 = i6;
 i8 = i6 + 24 | 0;
 i7 = i6 + 16 | 0;
 HEAP32[i13 >> 2] = i1;
 HEAP32[i12 >> 2] = i2;
 HEAP32[i11 >> 2] = i3;
 HEAP32[i10 >> 2] = i4;
 HEAP32[i9 >> 2] = i5;
 i5 = __ZN7Manager9addEntityEv(77460) | 0;
 __ZN6Entity12addComponentI18TransformComponentJRiS2_S2_S2_EEERT_DpOT0_(i5, i13, i12, i11, i10) | 0;
 HEAP32[i8 >> 2] = 1;
 HEAP32[i7 >> 2] = 0;
 __ZN6Entity12addComponentI15SpriteComponentJRPKciiEEERT_DpOT0_(i5, i9, i8, i7) | 0;
 __ZN6Entity8addGroupEj(i5, 0);
 STACKTOP = i6;
 return;
}

function _SW_UpdateTexture(i1, i2, i7, i9, i10) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0;
 i8 = HEAP32[i2 + 68 >> 2] | 0;
 if (HEAP32[i8 >> 2] & 2 | 0) _SDL_LockSurface(i8) | 0;
 i4 = i8 + 16 | 0;
 i1 = HEAPU8[(HEAP32[i8 + 4 >> 2] | 0) + 9 >> 0] | 0;
 i5 = Math_imul(HEAP32[i7 + 8 >> 2] | 0, i1) | 0;
 i6 = i7 + 12 | 0;
 if ((HEAP32[i6 >> 2] | 0) > 0) {
  i2 = (HEAP32[i8 + 20 >> 2] | 0) + (Math_imul(HEAP32[i4 >> 2] | 0, HEAP32[i7 + 4 >> 2] | 0) | 0) | 0;
  i3 = 0;
  i2 = i2 + (Math_imul(HEAP32[i7 >> 2] | 0, i1) | 0) | 0;
  i1 = i9;
  while (1) {
   _SDL_memcpy(i2, i1, i5) | 0;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) >= (HEAP32[i6 >> 2] | 0)) break; else {
    i2 = i2 + (HEAP32[i4 >> 2] | 0) | 0;
    i1 = i1 + i10 | 0;
   }
  }
 }
 if (!(HEAP32[i8 >> 2] & 2)) return 0;
 _SDL_UnlockSurface(i8);
 return 0;
}

function _BlitBto4(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i1 + 24 >> 2] | 0;
 i2 = HEAP32[i1 + 28 >> 2] | 0;
 i10 = (HEAP32[i1 + 36 >> 2] | 0) / 4 | 0;
 i7 = HEAP32[i1 + 48 >> 2] | 0;
 i8 = ((i9 + 7 | 0) / -8 | 0) + i9 + (HEAP32[i1 + 16 >> 2] | 0) | 0;
 if (!((i2 | 0) != 0 & (i9 | 0) > 0)) return;
 i3 = HEAP32[i1 >> 2] | 0;
 i6 = HEAP32[i1 + 20 >> 2] | 0;
 while (1) {
  i2 = i2 + -1 | 0;
  i1 = 0;
  i5 = 0;
  i4 = i6;
  while (1) {
   if (!(i5 & 7)) {
    i1 = HEAP8[i3 >> 0] | 0;
    i3 = i3 + 1 | 0;
   }
   HEAP32[i4 >> 2] = HEAP32[i7 + (((i1 & 255) >>> 7 & 255) << 2) >> 2];
   i5 = i5 + 1 | 0;
   if ((i5 | 0) == (i9 | 0)) break; else {
    i1 = (i1 & 255) << 1 & 255;
    i4 = i4 + 4 | 0;
   }
  }
  if (!i2) break; else {
   i3 = i3 + i8 | 0;
   i6 = i6 + (i9 << 2) + (i10 << 2) | 0;
  }
 }
 return;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 __ZNKSt3__28ios_base6getlocEv(i7, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 83652) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 31](i2, 73125, 73157, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 83660) | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 255](i3) | 0;
 HEAP32[i5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 255](i3) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i1, i3);
 __ZNSt3__26localeD2Ev(i7);
 STACKTOP = i6;
 return;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i2 & 1024) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i7 = i2 & 260;
 i4 = (i2 & 16384 | 0) != 0;
 i5 = (i7 | 0) == 260;
 if (i5) i6 = 0; else {
  HEAP8[i1 >> 0] = 46;
  HEAP8[i1 + 1 >> 0] = 42;
  i6 = 1;
  i1 = i1 + 2 | 0;
 }
 while (1) {
  i2 = HEAP8[i3 >> 0] | 0;
  if (!(i2 << 24 >> 24)) break;
  HEAP8[i1 >> 0] = i2;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 L14 : do switch (i7 & 511) {
 case 4:
  {
   i2 = i4 ? 70 : 102;
   break;
  }
 case 256:
  {
   i2 = i4 ? 69 : 101;
   break;
  }
 default:
  if (i5) {
   i2 = i4 ? 65 : 97;
   break L14;
  } else {
   i2 = i4 ? 71 : 103;
   break L14;
  }
 } while (0);
 HEAP8[i1 >> 0] = i2;
 return i6 | 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 __ZNKSt3__28ios_base6getlocEv(i7, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 83620) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 31](i2, 73125, 73157, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i7, 83636) | 0;
 HEAP8[i4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 255](i3) | 0;
 HEAP8[i5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 255](i3) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i1, i3);
 __ZNSt3__26localeD2Ev(i7);
 STACKTOP = i6;
 return;
}

function _Emscripten_HandleKey(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 i4 = i2 + 156 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1 >>> 0 < 223) {
  i1 = HEAP32[15272 + (i1 << 2) >> 2] | 0;
  if (i1 | 0) {
   L4 : do if ((HEAP32[i2 + 64 >> 2] | 0) == 2) switch (i1 | 0) {
   case 225:
    {
     i1 = 229;
     break L4;
    }
   case 224:
    {
     i1 = 228;
     break L4;
    }
   case 226:
    {
     i1 = 230;
     break L4;
    }
   case 227:
    {
     i1 = 231;
     break L4;
    }
   default:
    break L4;
   } while (0);
   _SDL_SendKeyboardKey((i3 | 0) == 2 & 1, i1) | 0;
  }
 }
 i3 = (i3 | 0) == 2;
 i1 = (_SDL_EventState(i3 ? 768 : 769, -1) | 0) << 24 >> 24 == 1;
 i2 = i1 & 1;
 if (!i3) return i2 | 0;
 if ((_SDL_EventState(771, -1) | 0) << 24 >> 24 == 1) return i1 & (HEAP32[i4 >> 2] & -2 | 0) == 8 & 1 | 0; else return i2 | 0;
 return 0;
}

function _png_chunk_unknown_handling(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i6;
 HEAP8[i4 >> 0] = i1 >>> 24;
 HEAP8[i4 + 1 >> 0] = i1 >>> 16;
 HEAP8[i4 + 2 >> 0] = i1 >>> 8;
 HEAP8[i4 + 3 >> 0] = i1;
 HEAP8[i4 + 4 >> 0] = 0;
 if (!i2) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i2 + 692 >> 2] | 0;
 if (!i1) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i3 = HEAP32[i2 + 696 >> 2] | 0;
 i1 = i3 + (i1 * 5 | 0) | 0;
 while (1) {
  i2 = i1 + -5 | 0;
  if (!(_memcmp(i4, i2, 4) | 0)) break;
  if (i2 >>> 0 > i3 >>> 0) i1 = i2; else {
   i1 = 0;
   i5 = 7;
   break;
  }
 }
 if ((i5 | 0) == 7) {
  STACKTOP = i6;
  return i1 | 0;
 }
 i5 = HEAPU8[i1 + -1 >> 0] | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i1 >> 2] >> 2] & 255](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 168 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 i1 = i1 + 8 | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i1 >> 2] >> 2] & 255](i1) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i2, i8, i1, i1 + 168 | 0, i5, i4, 0) | 0) - i1 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function _SDL_GetTicks() {
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i3;
 do if (!(HEAP32[19777] | 0)) {
  HEAP32[19777] = 1;
  if (!(_clock_gettime(4, 79112) | 0)) {
   HEAP32[19780] = 1;
   break;
  } else {
   _gettimeofday(79124, 0) | 0;
   i2 = 5;
   break;
  }
 } else i2 = 5; while (0);
 if ((i2 | 0) == 5) if (!(HEAP32[19780] | 0)) {
  _gettimeofday(i1 | 0, 0) | 0;
  i2 = (((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[19782] | 0) | 0) / 1e3 | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[19781] | 0) | 0) * 1e3 | 0) | 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 _clock_gettime(4, i1 | 0) | 0;
 i2 = (((HEAP32[i1 + 4 >> 2] | 0) - (HEAP32[19779] | 0) | 0) / 1e6 | 0) + (((HEAP32[i1 >> 2] | 0) - (HEAP32[19778] | 0) | 0) * 1e3 | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _SDL_JoystickClose(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 if (!i3) return;
 i1 = i3 + 48 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 + -1;
 if ((i2 | 0) > 1 | (HEAP32[20487] | 0) == (i3 | 0)) return;
 _SDL_SYS_JoystickClose(i3);
 HEAP32[i3 + 44 >> 2] = 0;
 i1 = HEAP32[20486] | 0;
 L7 : do if (i1 | 0) {
  i2 = 0;
  while (1) {
   if ((i1 | 0) == (i3 | 0)) break;
   i2 = HEAP32[i1 + 60 >> 2] | 0;
   if (!i2) break L7; else {
    i4 = i1;
    i1 = i2;
    i2 = i4;
   }
  }
  i1 = HEAP32[i3 + 60 >> 2] | 0;
  if (!i2) {
   HEAP32[20486] = i1;
   break;
  } else {
   HEAP32[i2 + 60 >> 2] = i1;
   break;
  }
 } while (0);
 _SDL_free(HEAP32[i3 + 4 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 12 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 24 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 32 >> 2] | 0);
 _SDL_free(HEAP32[i3 + 40 >> 2] | 0);
 _SDL_free(i3);
 return;
}

function _strncasecmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (!i3) i1 = 0; else {
  i4 = HEAP8[i1 >> 0] | 0;
  L3 : do if (!(i4 << 24 >> 24)) i1 = 0; else {
   i6 = i1;
   i1 = i4;
   i4 = i4 & 255;
   while (1) {
    i3 = i3 + -1 | 0;
    i5 = HEAP8[i2 >> 0] | 0;
    if (!((i3 | 0) != 0 & i5 << 24 >> 24 != 0)) break L3;
    if (i1 << 24 >> 24 != i5 << 24 >> 24) {
     i5 = _tolower(i4) | 0;
     if ((i5 | 0) != (_tolower(HEAPU8[i2 >> 0] | 0) | 0)) break;
    }
    i1 = i6 + 1 | 0;
    i2 = i2 + 1 | 0;
    i4 = HEAP8[i1 >> 0] | 0;
    if (!(i4 << 24 >> 24)) {
     i1 = 0;
     break L3;
    } else {
     i6 = i1;
     i1 = i4;
     i4 = i4 & 255;
    }
   }
   i1 = HEAP8[i6 >> 0] | 0;
  } while (0);
  i1 = _tolower(i1 & 255) | 0;
  i1 = i1 - (_tolower(HEAPU8[i2 >> 0] | 0) | 0) | 0;
 }
 return i1 | 0;
}

function _SDL_PrivateGetControllerMapping(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 _SDL_JoystickGetDeviceGUID(i2, i3);
 i1 = HEAP32[20460] | 0;
 L1 : do if (!i1) i1 = 0; else while (1) {
  if (!(_SDL_memcmp(i2, i1, 16) | 0)) break L1;
  i1 = HEAP32[i1 + 24 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   break;
  }
 } while (0);
 i2 = HEAP32[20461] | 0;
 i1 = (i1 | 0) == 0 & (i2 | 0) != 0 ? i2 : i1;
 if (i1 | 0) {
  i3 = i1;
  STACKTOP = i4;
  return i3 | 0;
 }
 i1 = _SDL_JoystickNameForIndex(i3) | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (!(_SDL_strstr(i1, 58277) | 0)) if (!(_SDL_strstr(i1, 58282) | 0)) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i3 = HEAP32[20462] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i7 = i5 + 4 | 0;
 i4 = i6 + 4 | 0;
 i3 = (HEAP32[i7 >> 2] | 0) - i2 | 0;
 i1 = (HEAP32[i4 >> 2] | 0) + (0 - (i3 >> 2) << 2) | 0;
 HEAP32[i4 >> 2] = i1;
 if ((i3 | 0) > 0) {
  _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
  i2 = i4;
  i1 = HEAP32[i4 >> 2] | 0;
 } else i2 = i4;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i2 >> 2] = i4;
 i4 = i6 + 8 | 0;
 i3 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = i3;
 i4 = i5 + 8 | 0;
 i7 = i6 + 12 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = i5;
 HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
 return;
}

function _Emscripten_JoyStickDisconnected(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i5 = 0;
 i1 = HEAP32[20463] | 0;
 if (!i1) return 1;
 i3 = HEAP32[i3 + 1300 >> 2] | 0;
 i4 = i1;
 i2 = 0;
 while (1) {
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) break;
  i1 = HEAP32[i4 + 1320 >> 2] | 0;
  if (!i1) {
   i5 = 13;
   break;
  } else {
   i2 = i4;
   i4 = i1;
  }
 }
 if ((i5 | 0) == 13) return 1;
 i1 = HEAP32[i4 + 16 >> 2] | 0;
 if (i1 | 0) HEAP32[i1 + 44 >> 2] = 0;
 i1 = HEAP32[i4 + 1320 >> 2] | 0;
 if (!i2) HEAP32[20463] = i1; else HEAP32[i2 + 1320 >> 2] = i1;
 if ((i4 | 0) == (HEAP32[20466] | 0)) HEAP32[20466] = i2;
 HEAP32[20464] = (HEAP32[20464] | 0) + -1;
 _SDL_PrivateJoystickRemoved(HEAP32[i4 + 12 >> 2] | 0);
 _SDL_free(HEAP32[i4 + 4 >> 2] | 0);
 _SDL_free(HEAP32[i4 + 8 >> 2] | 0);
 _SDL_free(i4);
 return 1;
}

function _SDL_Generic_SetTLSData(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i4 = 0;
 i6 = _SDL_ThreadID() | 0;
 i1 = HEAP32[19488] | 0;
 L1 : do if (!i1) i4 = 7; else {
  i2 = 0;
  i3 = i1;
  while (1) {
   if ((HEAP32[i3 >> 2] | 0) == (i6 | 0)) break;
   i1 = HEAP32[i3 + 8 >> 2] | 0;
   if (!i1) {
    i4 = 7;
    break L1;
   } else {
    i2 = i3;
    i3 = i1;
   }
  }
  if (!i5) {
   HEAP32[(i2 | 0 ? i2 + 8 | 0 : 77952) >> 2] = HEAP32[i3 + 8 >> 2];
   _SDL_free(i3);
   break;
  } else {
   HEAP32[i3 + 4 >> 2] = i5;
   break;
  }
 } while (0);
 do if ((i4 | 0) == 7) {
  i1 = _SDL_malloc(12) | 0;
  if (i1 | 0) {
   HEAP32[i1 >> 2] = i6;
   HEAP32[i1 + 4 >> 2] = i5;
   HEAP32[i1 + 8 >> 2] = HEAP32[19488];
   HEAP32[19488] = i1;
   break;
  }
  i6 = _SDL_Error(0) | 0;
  return i6 | 0;
 } while (0);
 i6 = 0;
 return i6 | 0;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var f1 = f0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i8;
 if ((i2 | 0) == (i3 | 0)) {
  HEAP32[i6 >> 2] = 4;
  f1 = Math_fround(0.0);
 } else {
  i5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  f1 = Math_fround(_strtof_l(i2, i4, __ZNSt3__26__clocEv() | 0));
  i2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i2) HEAP32[(___errno_location() | 0) >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) {
   if ((i2 | 0) == 34) i7 = 6;
  } else {
   f1 = Math_fround(0.0);
   i7 = 6;
  }
  if ((i7 | 0) == 6) HEAP32[i6 >> 2] = 4;
 }
 STACKTOP = i8;
 return Math_fround(f1);
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i5;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i4 = __ZNSt3__211char_traitsIcE6lengthEPKc(75216) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i4 >>> 0 < 11) {
  HEAP8[i2 + 11 >> 0] = i4;
  i1 = i2;
 } else {
  i6 = i4 + 16 & -16;
  i1 = __Znwj(i6) | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = i6 | -2147483648;
  HEAP32[i2 + 4 >> 2] = i4;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 75216, i4) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i4 | 0, i3);
 STACKTOP = i5;
 return;
}

function _IMG_Load(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i5 + 4 | 0;
 i3 = i5;
 i4 = _emscripten_get_preloaded_image_data(i1 | 0, i2 | 0, i3 | 0) | 0;
 if (!i4) {
  i2 = _SDL_RWFromFile(i1, 57822) | 0;
  i1 = _strrchr(i1, 46) | 0;
  if (!i2) {
   i4 = 0;
   STACKTOP = i5;
   return i4 | 0;
  }
  i4 = _IMG_LoadTyped_RW(i2, 1, (i1 | 0) == 0 ? 0 : i1 + 1 | 0) | 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  i1 = _SDL_CreateRGBSurface(0, HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0, 32, 255, 65280, 16711680, -16777216) | 0;
  if (i1 | 0) _memcpy(HEAP32[i1 + 20 >> 2] | 0, i4 | 0, Math_imul(HEAP32[i2 >> 2] << 2, HEAP32[i3 >> 2] | 0) | 0) | 0;
  _free(i4);
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i5;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i4 = __ZNSt3__211char_traitsIcE6lengthEPKc(75222) | 0;
 if (i4 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i4 >>> 0 < 11) {
  HEAP8[i2 + 11 >> 0] = i4;
  i1 = i2;
 } else {
  i6 = i4 + 16 & -16;
  i1 = __Znwj(i6) | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = i6 | -2147483648;
  HEAP32[i2 + 4 >> 2] = i4;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, 75222, i4) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i1 + i4 | 0, i3);
 STACKTOP = i5;
 return;
}

function _SDL_EventState(i7, i2) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = 0;
 i5 = 78080 + ((i7 >>> 8 & 255) << 2) | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i3 = (i1 | 0) == 0;
 if (i3) i4 = 3; else if (!(HEAP32[i1 + ((i7 >>> 5 & 7) << 2) >> 2] & 1 << (i7 & 31))) i4 = 3; else i6 = 0;
 if ((i4 | 0) == 3) i6 = 1;
 if ((i6 & 255 | 0) == (i2 | 0)) return i6 | 0;
 switch (i2 | 0) {
 case 0:
  {
   if (i3) {
    i1 = _SDL_calloc(1, 32) | 0;
    HEAP32[i5 >> 2] = i1;
    if (!i1) return i6 | 0;
   }
   i5 = i1 + ((i7 >>> 5 & 7) << 2) | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1 << (i7 & 31);
   _SDL_FlushEvents(i7, i7);
   return i6 | 0;
  }
 case 1:
  {
   i5 = i1 + ((i7 >>> 5 & 7) << 2) | 0;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & ~(1 << (i7 & 31));
   return i6 | 0;
  }
 default:
  return i6 | 0;
 }
 return 0;
}

function _png_set_tIME(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0) return;
 if (HEAP32[i1 + 208 >> 2] & 512 | 0) return;
 if (((HEAP8[i3 + 2 >> 0] | 0) + -1 & 255) <= 11) if (((HEAP8[i3 + 3 >> 0] | 0) + -1 & 255) <= 30) if ((HEAPU8[i3 + 4 >> 0] | 0) <= 23) if ((HEAPU8[i3 + 5 >> 0] | 0) <= 59) if ((HEAPU8[i3 + 6 >> 0] | 0) <= 60) {
  i1 = i3;
  i5 = i1;
  i5 = HEAPU16[i5 >> 1] | HEAPU16[i5 + 2 >> 1] << 16;
  i1 = i1 + 4 | 0;
  i1 = HEAPU16[i1 >> 1] | HEAPU16[i1 + 2 >> 1] << 16;
  i3 = i2 + 140 | 0;
  i4 = i3;
  HEAP16[i4 >> 1] = i5;
  HEAP16[i4 + 2 >> 1] = i5 >>> 16;
  i3 = i3 + 4 | 0;
  HEAP16[i3 >> 1] = i1;
  HEAP16[i3 + 2 >> 1] = i1 >>> 16;
  i3 = i2 + 8 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 512;
  return;
 }
 _png_warning(i1, 63998);
 return;
}

function _png_get_IHDR(i7, i8, i1, i2, i3, i4, i9, i5, i6) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if ((i7 | 0) == 0 | (i8 | 0) == 0) {
  i9 = 0;
  return i9 | 0;
 }
 if (i1 | 0) HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 if (i2 | 0) HEAP32[i2 >> 2] = HEAP32[i8 + 4 >> 2];
 if (i3 | 0) HEAP32[i3 >> 2] = HEAPU8[i8 + 24 >> 0];
 if (i4 | 0) HEAP32[i4 >> 2] = HEAPU8[i8 + 25 >> 0];
 if (i5 | 0) HEAP32[i5 >> 2] = HEAPU8[i8 + 26 >> 0];
 if (i6 | 0) HEAP32[i6 >> 2] = HEAPU8[i8 + 27 >> 0];
 i1 = HEAP8[i8 + 28 >> 0] | 0;
 if (i9 | 0) HEAP32[i9 >> 2] = i1 & 255;
 _png_check_IHDR(i7, HEAP32[i8 >> 2] | 0, HEAP32[i8 + 4 >> 2] | 0, HEAPU8[i8 + 24 >> 0] | 0, HEAPU8[i8 + 25 >> 0] | 0, i1 & 255, HEAPU8[i8 + 26 >> 0] | 0, HEAPU8[i8 + 27 >> 0] | 0);
 i9 = 1;
 return i9 | 0;
}

function ___overflow(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, i9 = 0;
 i3 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i9;
 i8 = i5 & 255;
 HEAP8[i7 >> 0] = i8;
 i1 = i6 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) if (!(___towrite(i6) | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = 4;
 } else i1 = -1; else i3 = 4;
 do if ((i3 | 0) == 4) {
  i4 = i6 + 20 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i2 >>> 0) {
   i1 = i5 & 255;
   if ((i1 | 0) != (HEAP8[i6 + 75 >> 0] | 0)) {
    HEAP32[i4 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i8;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 63](i6, i7, 1) | 0) == 1) i1 = HEAPU8[i7 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i4, i3, i5, i6) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i2 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i7;
 HEAP32[i6 >> 2] = i3;
 i3 = ___uselocale(HEAP32[i1 + 8 >> 2] | 0) | 0;
 i1 = _wcrtomb(i2, 0, i4) | 0;
 if (i3 | 0) ___uselocale(i3) | 0;
 L4 : do if ((i1 + 1 | 0) >>> 0 < 2) i1 = 2; else {
  i1 = i1 + -1 | 0;
  if (i1 >>> 0 > (i5 - (HEAP32[i6 >> 2] | 0) | 0) >>> 0) i1 = 1; else while (1) {
   if (!i1) {
    i1 = 0;
    break L4;
   }
   i4 = HEAP8[i2 >> 0] | 0;
   i5 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = i5 + 1;
   HEAP8[i5 >> 0] = i4;
   i2 = i2 + 1 | 0;
   i1 = i1 + -1 | 0;
  }
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function _png_chunk_report(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i1 = i5;
 if (HEAP32[i2 + 208 >> 2] & 32768 | 0) {
  if ((i4 | 0) < 2) {
   _png_format_buffer(HEAP32[i2 + 376 >> 2] | 0, i1, i3);
   _png_warning(i2, i1);
   STACKTOP = i5;
   return;
  }
  if (!(HEAP32[i2 + 212 >> 2] & 1048576)) _png_chunk_error(i2, i3);
  _png_format_buffer(HEAP32[i2 + 376 >> 2] | 0, i1, i3);
  _png_warning(i2, i1);
  STACKTOP = i5;
  return;
 }
 i1 = HEAP32[i2 + 212 >> 2] | 0;
 if ((i4 | 0) < 1) {
  if (!(i1 & 2097152)) _png_error(i2, i3);
  _png_warning(i2, i3);
  STACKTOP = i5;
  return;
 } else {
  if (!(i1 & 4194304)) _png_error(i2, i3);
  _png_warning(i2, i3);
  STACKTOP = i5;
  return;
 }
}

function _SDL_GL_SwapWindow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i6 + 24 | 0;
 i4 = i6 + 16 | 0;
 i3 = i6 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i6) | 0;
  STACKTOP = i6;
  return;
 }
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i2 + 280 | 0)) {
  if (!(HEAP32[i1 + 48 >> 2] & 2)) {
   _SDL_SetError(40244, i4) | 0;
   STACKTOP = i6;
   return;
  }
  if ((_SDL_TLSGet(HEAP32[i2 + 660 >> 2] | 0) | 0) == (i1 | 0)) {
   i5 = HEAP32[19487] | 0;
   FUNCTION_TABLE_vii[HEAP32[i5 + 196 >> 2] & 127](i5, i1);
   STACKTOP = i6;
   return;
  } else {
   _SDL_SetError(40288, i5) | 0;
   STACKTOP = i6;
   return;
  }
 }
 _SDL_SetError(59973, i3) | 0;
 STACKTOP = i6;
 return;
}

function _SDL_LoadFunction(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i7;
 i1 = _dlsym(i4 | 0, i5 | 0) | 0;
 if (i1 | 0) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i2 = (_SDL_strlen(i5) | 0) + 2 | 0;
 i1 = i2;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
 HEAP8[i3 >> 0] = 95;
 _SDL_strlcpy(i3 + 1 | 0, i5, i2) | 0;
 i1 = _dlsym(i4 | 0, i3 | 0) | 0;
 if (i1 | 0) {
  i6 = i1;
  STACKTOP = i7;
  return i6 | 0;
 }
 i4 = _dlerror() | 0;
 HEAP32[i6 >> 2] = i5;
 HEAP32[i6 + 4 >> 2] = i4;
 _SDL_SetError(48850, i6) | 0;
 i6 = 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if (HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i2, i1);
  if (HEAP8[i2 >> 0] | 0) {
   i4 = HEAP32[i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 255](i4) | 0) == -1) {
    i4 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj(i4, HEAP32[i4 + 16 >> 2] | 1);
   }
  }
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i2);
 }
 STACKTOP = i3;
 return i1 | 0;
}

function _png_read_filter_row_paeth_1byte_pixel(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i6 = i5 + i4 | 0;
 i3 = HEAPU8[i2 >> 0] | 0;
 i1 = (HEAPU8[i5 >> 0] | 0) + i3 | 0;
 HEAP8[i5 >> 0] = i1;
 if ((i4 | 0) <= 1) return;
 i4 = i2;
 i2 = i5 + 1 | 0;
 do {
  i4 = i4 + 1 | 0;
  i5 = i1 & 255;
  i8 = i3;
  i3 = HEAPU8[i4 >> 0] | 0;
  i7 = i3 - i8 | 0;
  i11 = i5 - i8 | 0;
  i9 = (i7 | 0) < 0 ? 0 - i7 | 0 : i7;
  i10 = (i11 | 0) < 0 ? 0 - i11 | 0 : i11;
  i11 = i7 + i11 | 0;
  i7 = (i10 | 0) < (i9 | 0);
  i1 = ((((i11 | 0) < 0 ? 0 - i11 | 0 : i11) | 0) < ((i7 ? i10 : i9) | 0) ? i8 : i7 ? i3 : i5) + (HEAPU8[i2 >> 0] | 0) | 0;
  HEAP8[i2 >> 0] = i1;
  i2 = i2 + 1 | 0;
 } while (i2 >>> 0 < i6 >>> 0);
 return;
}

function __ZN15PaintController4initEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i2 = i3 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP8[75976] | 0)) if (___cxa_guard_acquire(75976) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19478] = i4;
 }
 HEAP32[i3 + 36 >> 2] = HEAP32[i1 + 20 + (HEAP32[19478] << 2) >> 2];
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP8[76e3] | 0)) if (___cxa_guard_acquire(76e3) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19481] = i4;
 }
 HEAP32[i3 + 40 >> 2] = HEAP32[i1 + 20 + (HEAP32[19481] << 2) >> 2];
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19476] = i4;
 }
 HEAP32[i3 + 44 >> 2] = HEAP32[i1 + 20 + (HEAP32[19476] << 2) >> 2];
 return;
}

function _inflateReset(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) {
  i3 = -2;
  return i3 | 0;
 }
 i3 = HEAP32[i1 + 28 >> 2] | 0;
 if (!i3) {
  i3 = -2;
  return i3 | 0;
 }
 HEAP32[i3 + 40 >> 2] = 0;
 HEAP32[i3 + 44 >> 2] = 0;
 HEAP32[i3 + 48 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 if (i2 | 0) HEAP32[i1 + 48 >> 2] = i2 & 1;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 32768;
 HEAP32[i3 + 32 >> 2] = 0;
 HEAP32[i3 + 56 >> 2] = 0;
 HEAP32[i3 + 60 >> 2] = 0;
 i2 = i3 + 1328 | 0;
 HEAP32[i3 + 108 >> 2] = i2;
 HEAP32[i3 + 80 >> 2] = i2;
 HEAP32[i3 + 76 >> 2] = i2;
 HEAP32[i3 + 7104 >> 2] = 1;
 HEAP32[i3 + 7108 >> 2] = -1;
 i3 = 0;
 return i3 | 0;
}

function _SDL_SetSurfaceBlendMode(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 if (!i1) {
  i6 = -1;
  return i6 | 0;
 }
 i3 = i1 + 52 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i4 = i1 + 68 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i2 = i6 & -113;
 HEAP32[i4 >> 2] = i2;
 switch (i5 | 0) {
 case 0:
  {
   i3 = 0;
   break;
  }
 case 1:
  {
   i2 = i2 | 16;
   HEAP32[i4 >> 2] = i2;
   i3 = 0;
   break;
  }
 case 2:
  {
   i2 = i2 | 32;
   HEAP32[i4 >> 2] = i2;
   i3 = 0;
   break;
  }
 case 4:
  {
   i2 = i2 | 64;
   HEAP32[i4 >> 2] = i2;
   i3 = 0;
   break;
  }
 default:
  {
   i2 = _SDL_Error(4) | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   i3 = i2;
   i2 = HEAP32[i1 + 68 >> 2] | 0;
  }
 }
 if ((i2 | 0) == (i6 | 0)) {
  i6 = i3;
  return i6 | 0;
 }
 _SDL_InvalidateMap(i1);
 i6 = i3;
 return i6 | 0;
}

function _GLES2_SetRenderTarget(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = HEAP32[i1 + 320 >> 2] | 0;
 if (!i2) {
  FUNCTION_TABLE_vii[HEAP32[i1 + 192 >> 2] & 127](36160, HEAP32[i1 + 236 >> 2] | 0);
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = HEAP32[i2 + 68 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[i1 + 192 >> 2] & 127](36160, HEAP32[(HEAP32[i2 + 40 >> 2] | 0) + 8 >> 2] | 0);
 FUNCTION_TABLE_viiiii[HEAP32[i1 + 196 >> 2] & 7](36160, 36064, HEAP32[i2 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0, 0);
 if ((FUNCTION_TABLE_ii[HEAP32[i1 + 200 >> 2] & 255](36160) | 0) == 36053) {
  i2 = 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 i2 = _SDL_SetError(45934, i3) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _cmpmodes(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if ((i5 | 0) == (i6 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 i1 = HEAP32[i5 + 4 >> 2] | 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  i6 = i2 - i1 | 0;
  return i6 | 0;
 }
 i1 = HEAP32[i5 + 8 >> 2] | 0;
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  i6 = i2 - i1 | 0;
  return i6 | 0;
 }
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = i1 >>> 8 & 255;
 i4 = HEAP32[i6 >> 2] | 0;
 i3 = i4 >>> 8 & 255;
 if ((i3 | 0) != (i2 | 0)) {
  i6 = i3 - i2 | 0;
  return i6 | 0;
 }
 i2 = i1 >>> 16 & 15;
 i1 = i4 >>> 16 & 15;
 if ((i1 | 0) == (i2 | 0)) {
  i5 = HEAP32[i5 + 12 >> 2] | 0;
  i6 = HEAP32[i6 + 12 >> 2] | 0;
  return ((i6 | 0) == (i5 | 0) ? 0 : i6 - i5 | 0) | 0;
 }
 i6 = i1 - i2 | 0;
 return i6 | 0;
}

function __ZN18TransformComponent6updateEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, f4 = f0, f5 = f0;
 _SDL_PumpEvents();
 if (HEAP8[i1 + 52 >> 0] | 0) {
  i2 = i1 + 56 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (!(HEAP8[i3 + (_SDL_GetScancodeFromKey(97) | 0) >> 0] | 0)) {
   i3 = HEAP32[i2 >> 2] | 0;
   if (!(HEAP8[i3 + (_SDL_GetScancodeFromKey(100) | 0) >> 0] | 0)) HEAPF32[i1 + 24 >> 2] = Math_fround(0.0);
  }
 }
 if (HEAP8[i1 + 53 >> 0] | 0) return;
 f5 = Math_fround(HEAPF32[i1 + 24 >> 2]);
 f4 = Math_fround(HEAP32[i1 + 48 >> 2] | 0);
 f5 = Math_fround(f5 * f4);
 i3 = i1 + 8 | 0;
 HEAPF32[i3 >> 2] = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + f5);
 f4 = Math_fround(Math_fround(HEAPF32[i1 + 28 >> 2]) * f4);
 i3 = i1 + 12 | 0;
 HEAPF32[i3 >> 2] = Math_fround(Math_fround(HEAPF32[i3 >> 2]) + f4);
 return;
}

function __ZN15SpriteComponent4drawEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i3 = i2 + 16 | 0;
 i4 = i2;
 i5 = HEAP32[i1 + 12 >> 2] | 0;
 i7 = i1 + 16 | 0;
 i6 = i1 + 32 | 0;
 i1 = HEAP32[i1 + 84 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i4 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i4 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i4 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i3 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i6 + 12 >> 2];
 __ZN14TextureManager4DrawEP11SDL_Texture8SDL_RectS2_16SDL_RendererFlip(i5, i4, i3, i1);
 STACKTOP = i2;
 return;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i4, i5, i7) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0;
 i8 = i4 + 4 | 0;
 i2 = (HEAP32[i8 >> 2] | 0) != 372;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = (HEAP32[i7 >> 2] | 0) - i1 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i3 = (i3 | 0) == 0 ? 4 : i3;
 i6 = (HEAP32[i5 >> 2] | 0) - i1 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (i2) HEAP32[i4 >> 2] = i1; else {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 511](i2);
   i1 = HEAP32[i4 >> 2] | 0;
  }
 }
 HEAP32[i8 >> 2] = 373;
 HEAP32[i5 >> 2] = i1 + (i6 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i4, i5, i7) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0;
 i8 = i4 + 4 | 0;
 i2 = (HEAP32[i8 >> 2] | 0) != 372;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = (HEAP32[i7 >> 2] | 0) - i1 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i3 = (i3 | 0) == 0 ? 4 : i3;
 i6 = (HEAP32[i5 >> 2] | 0) - i1 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (i2) HEAP32[i4 >> 2] = i1; else {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 511](i2);
   i1 = HEAP32[i4 >> 2] | 0;
  }
 }
 HEAP32[i8 >> 2] = 373;
 HEAP32[i5 >> 2] = i1 + (i6 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i8;
 if ((i2 | 0) == (i3 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  d1 = +_strtold_l(i2, i4, __ZNSt3__26__clocEv() | 0);
  i2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i2) HEAP32[(___errno_location() | 0) >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) {
   if ((i2 | 0) == 34) i7 = 6;
  } else {
   d1 = 0.0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) HEAP32[i6 >> 2] = 4;
 }
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj(i2, i3, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i8;
 if ((i2 | 0) == (i3 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i5 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  d1 = +_strtod_l(i2, i4, __ZNSt3__26__clocEv() | 0);
  i2 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!i2) HEAP32[(___errno_location() | 0) >> 2] = i5;
  if ((HEAP32[i4 >> 2] | 0) == (i3 | 0)) {
   if ((i2 | 0) == 34) i7 = 6;
  } else {
   d1 = 0.0;
   i7 = 6;
  }
  if ((i7 | 0) == 6) HEAP32[i6 >> 2] = 4;
 }
 STACKTOP = i8;
 return +d1;
}

function _png_read_filter_row_avg(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = ((HEAPU8[i1 + 11 >> 0] | 0) + 7 | 0) >>> 3;
 i7 = (HEAP32[i1 + 4 >> 2] | 0) - i6 | 0;
 if (!i6) i1 = i2; else {
  i1 = i2 + i6 | 0;
  i5 = i3;
  i4 = 0;
  while (1) {
   HEAP8[i5 >> 0] = ((HEAPU8[i2 >> 0] | 0) >>> 1 & 255) + (HEAPU8[i5 >> 0] | 0);
   i4 = i4 + 1 | 0;
   if ((i4 | 0) == (i6 | 0)) break; else {
    i5 = i5 + 1 | 0;
    i2 = i2 + 1 | 0;
   }
  }
  i3 = i3 + i6 | 0;
 }
 if (!i7) return;
 i4 = 0 - i6 | 0;
 i2 = 0;
 while (1) {
  HEAP8[i3 >> 0] = (((HEAPU8[i3 + i4 >> 0] | 0) + (HEAPU8[i1 >> 0] | 0) | 0) >>> 1) + (HEAPU8[i3 >> 0] | 0);
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i7 | 0)) break; else {
   i3 = i3 + 1 | 0;
   i1 = i1 + 1 | 0;
  }
 }
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83652) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 16 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83652) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 24 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83620) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 16 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83620) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 24 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function _png_set_PLTE(i1, i2, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 if (i6 >>> 0 > 256) {
  if ((HEAP8[i2 + 25 >> 0] | 0) == 3) _png_error(i1, 65059);
  _png_warning(i1, 65059);
  return;
 }
 i3 = (i6 | 0) != 0;
 if ((i5 | 0) == 0 & i3) _png_error(i1, 65082);
 if (!i6) if (!(HEAP32[i1 + 708 >> 2] & 1)) _png_error(i1, 65082);
 _png_free_data(i1, i2, 4096, 0);
 i4 = _png_calloc(i1, 768) | 0;
 HEAP32[i1 + 416 >> 2] = i4;
 if (i3) _memcpy(i4 | 0, i5 | 0, i6 * 3 | 0) | 0;
 HEAP32[i2 + 16 >> 2] = i4;
 i6 = i6 & 65535;
 HEAP16[i1 + 420 >> 1] = i6;
 HEAP16[i2 + 20 >> 1] = i6;
 i6 = i2 + 232 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4096;
 i6 = i2 + 8 | 0;
 HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 8;
 return;
}

function _Emscripten_SetWindowSize(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, f5 = f0, i6 = 0, i7 = 0;
 i6 = HEAP32[i3 + 144 >> 2] | 0;
 if (!i6) return;
 if (!(HEAP32[i3 + 48 >> 2] & 8192)) {
  i4 = i6 + 12 | 0;
  i2 = i4;
  f5 = Math_fround(HEAPF32[i4 >> 2]);
 } else {
  f5 = Math_fround(+_emscripten_get_device_pixel_ratio());
  i2 = i6 + 12 | 0;
  HEAPF32[i2 >> 2] = f5;
 }
 i4 = i3 + 24 | 0;
 i7 = ~~Math_fround(f5 * Math_fround(HEAP32[i4 >> 2] | 0));
 i1 = i3 + 28 | 0;
 _emscripten_set_canvas_size(i7 | 0, ~~Math_fround(f5 * Math_fround(HEAP32[i1 >> 2] | 0)) | 0);
 if (HEAP32[i6 + 16 >> 2] | 0) return;
 if (!(Math_fround(HEAPF32[i2 >> 2]) != Math_fround(1.0))) return;
 _emscripten_set_element_css_size(0, +(+(HEAP32[i4 >> 2] | 0)), +(+(HEAP32[i1 >> 2] | 0))) | 0;
 return;
}

function _SDL_AddBasicVideoDisplay(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80);
 i3 = i4;
 _SDL_memset(i3, 0, 68) | 0;
 i1 = i3 + 16 | 0;
 if (i2 | 0) {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
  HEAP32[i1 + 16 >> 2] = HEAP32[i2 + 16 >> 2];
 }
 i2 = i3 + 36 | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i2 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 HEAP32[i2 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
 i3 = _SDL_AddVideoDisplay(i3) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i1, i9, i8, i4, i5, i6, 33808, 33840) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i1, i9, i8, i4, i5, i6, 73904, 73912) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _GLES2_LockTexture(i1, i3, i2, i6, i7) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i3 + 68 >> 2] | 0;
 i4 = HEAP32[i5 + 20 >> 2] | 0;
 i5 = (HEAP32[i5 + 16 >> 2] | 0) + (Math_imul(HEAP32[i2 + 4 >> 2] | 0, i4) | 0) | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 L1 : do if ((i1 | 0) == 0 | (i1 & -268435456 | 0) == 268435456) i1 = i1 & 255; else {
  if ((i1 | 0) < 1498831189) switch (i1 | 0) {
  case 844715353:
   {
    i1 = 2;
    break L1;
   }
  default:
   {}
  } else switch (i1 | 0) {
  case 1498831189:
   {
    i1 = 2;
    break L1;
   }
  default:
   {}
  }
  i1 = (i1 | 0) == 1431918169 ? 2 : 1;
 } while (0);
 HEAP32[i6 >> 2] = i5 + (Math_imul(i1, i2) | 0);
 HEAP32[i7 >> 2] = i4;
 return 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83652) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6 + 20 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 4 | 0;
 i9 = i7;
 __ZNKSt3__28ios_base6getlocEv(i8, i4);
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i8, 83620) | 0;
 __ZNSt3__26localeD2Ev(i8);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6 + 20 | 0, i2, i8, i5, i4);
 STACKTOP = i7;
 return HEAP32[i2 >> 2] | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_FilterEvents(i7, i8) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[3783] | 0;
 if (!i1) return;
 if (_SDL_LockMutex(i1) | 0) return;
 i1 = HEAP32[3787] | 0;
 if (i1 | 0) do {
  i6 = i1 + 72 | 0;
  i2 = i1;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!(FUNCTION_TABLE_iii[i7 & 63](i8, i2) | 0)) {
   i3 = i2 + 68 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if (i4 | 0) HEAP32[i4 + 72 >> 2] = HEAP32[i6 >> 2];
   i5 = HEAP32[i6 >> 2] | 0;
   if (i5 | 0) HEAP32[i5 + 68 >> 2] = i4;
   if ((HEAP32[3787] | 0) == (i2 | 0)) HEAP32[3787] = i5;
   if ((HEAP32[3788] | 0) == (i2 | 0)) HEAP32[3788] = HEAP32[i3 >> 2];
   HEAP32[i6 >> 2] = HEAP32[3789];
   HEAP32[3789] = i2;
   _SDL_AtomicAdd(15140, -1) | 0;
  }
 } while ((i1 | 0) != 0);
 return;
}

function _png_set_longjmp_fn(i6, i7, i5) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 if (!i6) {
  i7 = 0;
  return i7 | 0;
 }
 i2 = i6 + 160 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i4 = i6 + 164 | 0;
 do if (!i1) {
  HEAP32[i4 >> 2] = 0;
  if (i5 >>> 0 < 157) {
   HEAP32[i2 >> 2] = i6;
   i1 = i6;
   break;
  }
  i1 = _png_malloc_warn(i6, i5) | 0;
  HEAP32[i2 >> 2] = i1;
  if (!i1) {
   i7 = 0;
   return i7 | 0;
  } else {
   HEAP32[i4 >> 2] = i5;
   break;
  }
 } else {
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) if ((i1 | 0) == (i6 | 0)) i3 = 156; else _png_error(i6, 62512); else i3 = i2;
  if ((i3 | 0) != (i5 | 0)) {
   _png_warning(i6, 62543);
   i7 = 0;
   return i7 | 0;
  }
 } while (0);
 HEAP32[i6 + 156 >> 2] = i7;
 i7 = i1;
 return i7 | 0;
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i4, i5, i7) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i8 = 0;
 i8 = i4 + 4 | 0;
 i2 = (HEAP32[i8 >> 2] | 0) != 372;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = (HEAP32[i7 >> 2] | 0) - i1 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i3 = (i3 | 0) == 0 ? 1 : i3;
 i6 = (HEAP32[i5 >> 2] | 0) - i1 | 0;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (i2) HEAP32[i4 >> 2] = i1; else {
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i8 >> 2] & 511](i2);
   i1 = HEAP32[i4 >> 2] | 0;
  }
 }
 HEAP32[i8 >> 2] = 373;
 HEAP32[i5 >> 2] = i1 + i6;
 HEAP32[i7 >> 2] = (HEAP32[i4 >> 2] | 0) + i3;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _cycle(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i2 = i7;
 L1 : do if ((i5 | 0) >= 2) {
  i6 = i4 + (i5 << 2) | 0;
  HEAP32[i6 >> 2] = i2;
  if (i1 | 0) while (1) {
   i3 = i1 >>> 0 < 256 ? i1 : 256;
   _memcpy(i2 | 0, HEAP32[i4 >> 2] | 0, i3 | 0) | 0;
   i2 = 0;
   do {
    i8 = i4 + (i2 << 2) | 0;
    i2 = i2 + 1 | 0;
    _memcpy(HEAP32[i8 >> 2] | 0, HEAP32[i4 + (i2 << 2) >> 2] | 0, i3 | 0) | 0;
    HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + i3;
   } while ((i2 | 0) != (i5 | 0));
   i1 = i1 - i3 | 0;
   if (!i1) break L1;
   i2 = HEAP32[i6 >> 2] | 0;
  }
 } while (0);
 STACKTOP = i7;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i3, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i4, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 | 0) < 100 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i3, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i4, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 | 0) < 100 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i9, i8, i4, i5, i6) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _SDL_DUMMY_UpdateWindowFramebuffer(i1, i5, i2, i3) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i3 = i4 + 8 | 0;
 i1 = i4 + 16 | 0;
 i2 = _SDL_GetWindowData(i5, 57447) | 0;
 if (!i2) {
  i5 = _SDL_SetError(57465, i4) | 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 if (!(_SDL_getenv(57504) | 0)) {
  i5 = 0;
  STACKTOP = i4;
  return i5 | 0;
 }
 i6 = _SDL_GetWindowID(i5) | 0;
 i5 = (HEAP32[20429] | 0) + 1 | 0;
 HEAP32[20429] = i5;
 HEAP32[i3 >> 2] = i6;
 HEAP32[i3 + 4 >> 2] = i5;
 _SDL_snprintf(i1, 128, 57532, i3) | 0;
 _SDL_SaveBMP_RW(i2, _SDL_RWFromFile(i1, 57825) | 0, 1) | 0;
 i5 = 0;
 STACKTOP = i4;
 return i5 | 0;
}

function _SDL_SendAppEvent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i3 = i4;
 i2 = HEAP32[78080 + ((i1 >>> 8 & 255) << 2) >> 2] | 0;
 if (i2 | 0) if (HEAP32[i2 + ((i1 >>> 5 & 7) << 2) >> 2] & 1 << (i1 & 31) | 0) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = _SDL_GetTicks() | 0;
 i1 = HEAP32[19776] | 0;
 if (i1 | 0) do {
  FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i3) | 0;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
 } while ((i1 | 0) != 0);
 if ((_SDL_PeepEvents(i3, 1, 0, 0, 0) | 0) < 1) i1 = 0; else {
  _SDL_GestureProcessEvent(i3);
  i1 = 1;
 }
 i3 = i1;
 STACKTOP = i4;
 return i3 | 0;
}

function ___fseeko_unlocked(i4, i1, i5) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i6 = 0;
 if ((i5 | 0) == 1) i1 = i1 - (HEAP32[i4 + 8 >> 2] | 0) + (HEAP32[i4 + 4 >> 2] | 0) | 0;
 i2 = i4 + 20 | 0;
 i3 = i4 + 28 | 0;
 if ((HEAP32[i2 >> 2] | 0) >>> 0 > (HEAP32[i3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i4 + 36 >> 2] & 63](i4, 0, 0) | 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = -1; else i6 = 5;
 } else i6 = 5;
 if ((i6 | 0) == 5) {
  HEAP32[i4 + 16 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[i4 + 40 >> 2] & 63](i4, i1, i5) | 0) < 0) i1 = -1; else {
   HEAP32[i4 + 8 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] & -17;
   i1 = 0;
  }
 }
 return i1 | 0;
}

function _SDL_GL_GetDrawableSize(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i6 + 8 | 0;
 i5 = HEAP32[19487] | 0;
 if (!i5) {
  _SDL_SetError(40203, i6) | 0;
  STACKTOP = i6;
  return;
 }
 if (i2 | 0) if ((HEAP32[i2 >> 2] | 0) == (i5 + 280 | 0)) {
  i1 = HEAP32[i5 + 184 >> 2] | 0;
  if (i1 | 0) {
   FUNCTION_TABLE_viiii[i1 & 63](i5, i2, i3, i4);
   STACKTOP = i6;
   return;
  }
  if (i3 | 0) HEAP32[i3 >> 2] = HEAP32[i2 + 24 >> 2];
  if (!i4) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i4 >> 2] = HEAP32[i2 + 28 >> 2];
  STACKTOP = i6;
  return;
 }
 _SDL_SetError(59973, i1) | 0;
 STACKTOP = i6;
 return;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 __ZNKSt3__28ios_base6getlocEv(i6, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 83652) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 48 >> 2] & 31](i2, 73125, 73151, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 83660) | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 255](i3) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i1, i3);
 __ZNSt3__26localeD2Ev(i6);
 STACKTOP = i5;
 return;
}

function _SDL_SetTextureBlendMode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i6;
 i5 = i1;
 while (1) {
  if (!i5) {
   i4 = 4;
   break;
  }
  if ((HEAP32[i5 >> 2] | 0) != 85557) {
   i4 = 4;
   break;
  }
  HEAP32[i5 + 24 >> 2] = i2;
  i1 = HEAP32[i5 + 36 >> 2] | 0;
  if (!i1) break; else i5 = i1;
 }
 if ((i4 | 0) == 4) {
  _SDL_SetError(41358, i3) | 0;
  i5 = -1;
  STACKTOP = i6;
  return i5 | 0;
 }
 i1 = HEAP32[i5 + 32 >> 2] | 0;
 i2 = HEAP32[i1 + 24 >> 2] | 0;
 if (!i2) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i5 = FUNCTION_TABLE_iii[i2 & 63](i1, i5) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 __ZNKSt3__28ios_base6getlocEv(i6, i2);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 83620) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 31](i2, 73125, 73151, i3) | 0;
 i3 = __ZNKSt3__26locale9use_facetERNS0_2idE(i6, 83636) | 0;
 HEAP8[i4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 255](i3) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 127](i1, i3);
 __ZNSt3__26localeD2Ev(i6);
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _SDL_AllocPalette(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5;
 if ((i4 | 0) < 1) {
  HEAP32[i1 >> 2] = 47743;
  _SDL_SetError(59509, i1) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i1 = _SDL_malloc(16) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = i4 << 2;
 i3 = _SDL_malloc(i2) | 0;
 HEAP32[i1 + 4 >> 2] = i3;
 if (!i3) {
  _SDL_free(i1);
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 } else {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i1 + 8 >> 2] = 1;
  HEAP32[i1 + 12 >> 2] = 1;
  _SDL_memset(i3, 255, i2) | 0;
  i4 = i1;
  STACKTOP = i5;
  return i4 | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1 + -1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1 + -1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _SDL_SetClipRect(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
 i1 = i1 + 36 | 0;
 if (!i2) {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i1 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
  i3 = 1;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = _SDL_IntersectRect(i2, i3, i1) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function __ZN6Entity8addGroupEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i7;
 i4 = i1 + 152 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1 << i2;
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i3 >> 2] = i1;
 i5 = i4 + 12 + (i2 * 12 | 0) + 4 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (i6 >>> 0 < (HEAP32[i4 + 12 + (i2 * 12 | 0) + 8 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = i1;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
  STACKTOP = i7;
  return;
 } else {
  __ZNSt3__26vectorIP6EntityNS_9allocatorIS2_EEE24__emplace_back_slow_pathIJRS2_EEEvDpOT_(i4 + 12 + (i2 * 12 | 0) | 0, i3);
  STACKTOP = i7;
  return;
 }
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 1) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 1) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _IMG_isPNG(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i6;
 if (!i2) {
  i5 = 0;
  STACKTOP = i6;
  return i5 | 0;
 }
 i3 = i2 + 4 | 0;
 i4 = FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 31](i2, 0, 0, 1) | 0;
 i5 = tempRet0;
 i7 = (FUNCTION_TABLE_iiiii[HEAP32[i2 + 8 >> 2] & 31](i2, i1, 1, 4) | 0) == 4;
 if (i7 & (HEAP8[i1 >> 0] | 0) == -119) if ((HEAP8[i1 + 1 >> 0] | 0) == 80) if ((HEAP8[i1 + 2 >> 0] | 0) == 78) i1 = (HEAP8[i1 + 3 >> 0] | 0) == 71 & 1; else i1 = 0; else i1 = 0; else i1 = 0;
 FUNCTION_TABLE_iiiii[HEAP32[i3 >> 2] & 31](i2, i4, i5, 0) | 0;
 i7 = i1;
 STACKTOP = i6;
 return i7 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (!i2) {
  if (!(HEAP32[6932] | 0)) i1 = 0; else i1 = _fflush(HEAP32[6932] | 0) | 0;
  i2 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3 | 0) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___ofl_unlock();
 } else {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } while (0);
 return i1 | 0;
}

function _fclose(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) > -1) i5 = ___lockfile(i4) | 0; else i5 = 0;
 ___unlist_locked_file(i4);
 i6 = (HEAP32[i4 >> 2] & 1 | 0) != 0;
 if (!i6) {
  i3 = ___ofl_lock() | 0;
  i2 = HEAP32[i4 + 52 >> 2] | 0;
  i1 = i4 + 56 | 0;
  if (i2 | 0) HEAP32[i2 + 56 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) HEAP32[i1 + 52 >> 2] = i2;
  if ((HEAP32[i3 >> 2] | 0) == (i4 | 0)) HEAP32[i3 >> 2] = i1;
  ___ofl_unlock();
 }
 i1 = _fflush(i4) | 0;
 i1 = FUNCTION_TABLE_ii[HEAP32[i4 + 12 >> 2] & 255](i4) | 0 | i1;
 i2 = HEAP32[i4 + 92 >> 2] | 0;
 if (i2 | 0) _free(i2);
 if (i6) {
  if (i5 | 0) ___unlockfile(i4);
 } else _free(i4);
 return i1 | 0;
}

function _png_set_hIST(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 if ((i1 | 0) == 0 | (i3 | 0) == 0) return;
 i2 = i3 + 20 | 0;
 if (((HEAP16[i2 >> 1] | 0) + -1 & 65535) > 255) {
  _png_warning(i1, 64531);
  return;
 }
 _png_free_data(i1, i3, 8, 0);
 i5 = _png_malloc_warn(i1, 512) | 0;
 HEAP32[i3 + 204 >> 2] = i5;
 if (!i5) {
  _png_warning(i1, 64577);
  return;
 }
 i1 = i3 + 232 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8;
 i1 = HEAP16[i2 >> 1] | 0;
 if (i1 << 16 >> 16) {
  i2 = i1 & 65535;
  i1 = 0;
  do {
   HEAP16[i5 + (i1 << 1) >> 1] = HEAP16[i4 + (i1 << 1) >> 1] | 0;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) < (i2 | 0));
 }
 i5 = i3 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 64;
 return;
}

function _GLES2_UnbindTexture(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = 0;
 i3 = i2 + 320 | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i4 = HEAP32[i1 + 68 >> 2] | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i1 | 0)) {
  i1 = i6;
  i5 = 4;
 } else {
  HEAP32[i6 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i2 + 188 >> 2] | 0, i1) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i6 >> 2];
   _GLES2_UpdateViewport(i2) | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   i5 = 4;
  }
 }
 if ((i5 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 FUNCTION_TABLE_vii[HEAP32[i6 + 28 >> 2] & 127](HEAP32[i4 + 4 >> 2] | 0, 0);
 return 0;
}

function _strstr(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i2 = HEAP8[i3 >> 0] | 0;
 do if (i2 << 24 >> 24) {
  i1 = _strchr(i1, i2 << 24 >> 24) | 0;
  if (!i1) i1 = 0; else if (HEAP8[i3 + 1 >> 0] | 0) if (!(HEAP8[i1 + 1 >> 0] | 0)) i1 = 0; else {
   if (!(HEAP8[i3 + 2 >> 0] | 0)) {
    i1 = _twobyte_strstr(i1, i3) | 0;
    break;
   }
   if (!(HEAP8[i1 + 2 >> 0] | 0)) i1 = 0; else {
    if (!(HEAP8[i3 + 3 >> 0] | 0)) {
     i1 = _threebyte_strstr(i1, i3) | 0;
     break;
    }
    if (!(HEAP8[i1 + 3 >> 0] | 0)) i1 = 0; else if (!(HEAP8[i3 + 4 >> 0] | 0)) {
     i1 = _fourbyte_strstr(i1, i3) | 0;
     break;
    } else {
     i1 = _twoway_strstr(i1, i3) | 0;
     break;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function _strcasecmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP8[i1 >> 0] | 0;
 L1 : do if (!(i3 << 24 >> 24)) i1 = 0; else {
  i5 = i1;
  i1 = i3;
  i4 = i3 & 255;
  while (1) {
   i3 = HEAP8[i2 >> 0] | 0;
   if (!(i3 << 24 >> 24)) break L1;
   if (i1 << 24 >> 24 != i3 << 24 >> 24) {
    i4 = _tolower(i4) | 0;
    if ((i4 | 0) != (_tolower(HEAPU8[i2 >> 0] | 0) | 0)) break;
   }
   i1 = i5 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = HEAP8[i1 >> 0] | 0;
   if (!(i3 << 24 >> 24)) {
    i1 = 0;
    break L1;
   } else {
    i5 = i1;
    i1 = i3;
    i4 = i3 & 255;
   }
  }
  i1 = HEAP8[i5 >> 0] | 0;
 } while (0);
 i5 = _tolower(i1 & 255) | 0;
 return i5 - (_tolower(HEAPU8[i2 >> 0] | 0) | 0) | 0;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i10;
 HEAP8[i7 >> 0] = 37;
 i8 = i7 + 1 | 0;
 HEAP8[i8 >> 0] = i5;
 i9 = i7 + 2 | 0;
 HEAP8[i9 >> 0] = i6;
 HEAP8[i7 + 3 >> 0] = 0;
 if (i6 << 24 >> 24) {
  HEAP8[i8 >> 0] = i6;
  HEAP8[i9 >> 0] = i5;
 }
 i9 = __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_(i2, HEAP32[i3 >> 2] | 0) | 0;
 HEAP32[i3 >> 2] = i2 + (_strftime_l(i2 | 0, i9 | 0, i7 | 0, i4 | 0, HEAP32[i1 >> 2] | 0) | 0);
 STACKTOP = i10;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = i1 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i2 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (HEAP32[i2 + 24 >> 2] | 0) if (!(HEAP32[i2 + 16 >> 2] | 0)) if (HEAP32[i2 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i2 = HEAP32[i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 255](i2) | 0) == -1) {
   i2 = HEAP32[i1 >> 2] | 0;
   i2 = i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __ZNSt3__28ios_base5clearEj(i2, HEAP32[i2 + 16 >> 2] | 1);
  }
 }
 return;
}

function __ZNKSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEjjPKcj(i1, i5, i3, i6, i7) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i4 = 0;
 i2 = HEAP8[i1 + 11 >> 0] | 0;
 i4 = i2 << 24 >> 24 < 0;
 if (i4) i2 = HEAP32[i1 + 4 >> 2] | 0; else i2 = i2 & 255;
 if ((i7 | 0) == -1 | i2 >>> 0 < i5 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv(i1);
 i2 = i2 - i5 | 0;
 i3 = i2 >>> 0 < i3 >>> 0 ? i2 : i3;
 if (i4) i1 = HEAP32[i1 >> 2] | 0;
 i2 = i3 >>> 0 > i7 >>> 0;
 i1 = __ZNSt3__211char_traitsIcE7compareEPKcS3_j(i1 + i5 | 0, i6, i2 ? i7 : i3) | 0;
 if (!i1) return (i3 >>> 0 < i7 >>> 0 ? -1 : i2 & 1) | 0; else return i1 | 0;
 return 0;
}

function _SDL_EGL_MakeCurrent(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = HEAP32[i1 + 676 >> 2] | 0;
 if (!i1) {
  i4 = _SDL_SetError(48660, i5) | 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i2 = HEAP32[i1 + 56 >> 2] | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!((i3 | 0) != 0 & (i4 | 0) != 0)) {
  FUNCTION_TABLE_iiiii[i2 & 31](i1, 0, 0, 0) | 0;
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 if (FUNCTION_TABLE_iiiii[i2 & 31](i1, i3, i3, i4) | 0) {
  i4 = 0;
  STACKTOP = i5;
  return i4 | 0;
 }
 i4 = _SDL_SetError(48683, i5 + 8 | 0) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _SDL_OpenedAudioDeviceDisconnected(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i2 = i4;
 i3 = i1 + 136 | 0;
 if (!(_SDL_AtomicGet(i3) | 0)) {
  STACKTOP = i4;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[81772 >> 2] & 511](i1);
 _SDL_AtomicSet(i3, 0) | 0;
 FUNCTION_TABLE_vi[HEAP32[81776 >> 2] & 511](i1);
 if ((_SDL_EventState(4353, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = i4;
  return;
 }
 _SDL_memset(i2, 0, 56) | 0;
 HEAP32[i2 >> 2] = 4353;
 HEAP32[i2 + 8 >> 2] = HEAP32[i1 >> 2];
 HEAP8[i2 + 12 >> 0] = (HEAP32[i1 + 144 >> 2] | 0) != 0 & 1;
 _SDL_PushEvent(i2) | 0;
 STACKTOP = i4;
 return;
}

function _SDL_CalculateBlit0(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((HEAP8[(HEAP32[i1 + 4 >> 2] | 0) + 8 >> 0] | 0) != 1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[i1 + 52 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
 if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) i1 = 0; else i1 = HEAPU8[i1 + 9 >> 0] | 0;
 switch (HEAP32[i2 + 68 >> 2] & -28673 | 0) {
 case 0:
  {
   i2 = HEAP32[14412 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 256:
  {
   i2 = HEAP32[14432 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 18:
  {
   i2 = i1 >>> 0 > 1 ? 288 : 0;
   return i2 | 0;
  }
 case 274:
  {
   i2 = i1 >>> 0 > 1 ? 289 : 0;
   return i2 | 0;
  }
 default:
  {
   i2 = 0;
   return i2 | 0;
  }
 }
 return 0;
}

function _ungetc(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = 0;
 do if ((i1 | 0) == -1) i1 = -1; else {
  if ((HEAP32[i3 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i3) | 0; else i4 = 0;
  i5 = i3 + 4 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if (!i2) {
   ___toread(i3) | 0;
   i2 = HEAP32[i5 >> 2] | 0;
   if (i2 | 0) i6 = 6;
  } else i6 = 6;
  if ((i6 | 0) == 6) if (i2 >>> 0 > ((HEAP32[i3 + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   i6 = i2 + -1 | 0;
   HEAP32[i5 >> 2] = i6;
   HEAP8[i6 >> 0] = i1;
   HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -17;
   if (!i4) break;
   ___unlockfile(i3);
   break;
  }
  if (!i4) i1 = -1; else {
   ___unlockfile(i3);
   i1 = -1;
  }
 } while (0);
 return i1 | 0;
}

function _atoi(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = 0;
 while (1) {
  i4 = i1 + 1 | 0;
  if (!(_isspace(HEAP8[i1 >> 0] | 0) | 0)) break; else i1 = i4;
 }
 i3 = HEAP8[i1 >> 0] | 0;
 switch (i3 << 24 >> 24 | 0) {
 case 45:
  {
   i1 = 1;
   i5 = 5;
   break;
  }
 case 43:
  {
   i1 = 0;
   i5 = 5;
   break;
  }
 default:
  {
   i6 = 0;
   i2 = i1;
   i1 = i3;
  }
 }
 if ((i5 | 0) == 5) {
  i6 = i1;
  i2 = i4;
  i1 = HEAP8[i4 >> 0] | 0;
 }
 if (!(_isdigit(i1 << 24 >> 24) | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (i1 * 10 | 0) + 48 - (HEAP8[i2 >> 0] | 0) | 0;
   i2 = i2 + 1 | 0;
  } while ((_isdigit(HEAP8[i2 >> 0] | 0) | 0) != 0);
 }
 return (i6 | 0 ? i1 : 0 - i1 | 0) | 0;
}
function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = 0;
 L1 : do switch ((HEAP32[i2 + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 43:
   case 45:
    {
     i1 = i1 + 1 | 0;
     break L1;
    }
   default:
    {}
   }
   if ((i3 - i1 | 0) > 1 & i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i4 = 7;
      break L1;
     }
    }
    i1 = i1 + 2 | 0;
   } else i4 = 7;
   break;
  }
 case 32:
  {
   i1 = i3;
   break;
  }
 default:
  i4 = 7;
 } while (0);
 return i1 | 0;
}

function _strtox(i6, i7, i1) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i5 = i8;
 i3 = i5;
 i4 = i3 + 124 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5 + 4 | 0;
 HEAP32[i3 >> 2] = i6;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i6;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d2 = +___floatscan(i5, i1, 1);
 i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i7 | 0) HEAP32[i7 >> 2] = i1 | 0 ? i6 + i1 | 0 : i6;
 STACKTOP = i8;
 return +d2;
}

function _scalbn(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i1 | 0) > 1023) {
  d2 = d2 * 8988465674311579538646525.0e283;
  i4 = (i1 | 0) > 2046;
  i3 = i1 + -2046 | 0;
  d2 = i4 ? d2 * 8988465674311579538646525.0e283 : d2;
  i1 = i4 ? ((i3 | 0) < 1023 ? i3 : 1023) : i1 + -1023 | 0;
 } else if ((i1 | 0) < -1022) {
  d2 = d2 * 2.2250738585072014e-308;
  i3 = (i1 | 0) < -2044;
  i4 = i1 + 2044 | 0;
  d2 = i3 ? d2 * 2.2250738585072014e-308 : d2;
  i1 = i3 ? ((i4 | 0) > -1022 ? i4 : -1022) : i1 + 1022 | 0;
 }
 i3 = _bitshift64Shl(i1 + 1023 | 0, 0, 52) | 0;
 i4 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i3;
 HEAP32[tempDoublePtr + 4 >> 2] = i4;
 return +(d2 * +HEAPF64[tempDoublePtr >> 3]);
}

function ___fflush_unlocked(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i2 = 0;
 i6 = i5 + 20 | 0;
 i7 = i5 + 28 | 0;
 if ((HEAP32[i6 >> 2] | 0) >>> 0 > (HEAP32[i7 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[i5 + 36 >> 2] & 63](i5, 0, 0) | 0;
  if (!(HEAP32[i6 >> 2] | 0)) i1 = -1; else i2 = 3;
 } else i2 = 3;
 if ((i2 | 0) == 3) {
  i1 = i5 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = i5 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i5 + 40 >> 2] & 63](i5, i2 - i4 | 0, 1) | 0;
  HEAP32[i5 + 16 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function _SDL_SYS_JoystickGetDeviceGUID(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5;
 i1 = HEAP32[20463] | 0;
 if ((i2 | 0) > 0) while (1) {
  i1 = HEAP32[i1 + 1320 >> 2] | 0;
  if ((i2 | 0) > 1) i2 = i2 + -1 | 0; else break;
 }
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 _SDL_memset(i4, 0, 16) | 0;
 if ((_SDL_strlen(i2) | 0) >>> 0 > 16) i1 = 16; else i1 = _SDL_strlen(i2) | 0;
 _SDL_memcpy(i4, i2, i1) | 0;
 i1 = i4;
 i2 = i3 + 16 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) < (i2 | 0));
 STACKTOP = i5;
 return;
}

function _SDL_GL_SetSwapInterval(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  i3 = _SDL_SetError(40203, i4) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (!(_SDL_TLSGet(HEAP32[i1 + 664 >> 2] | 0) | 0)) {
  i3 = _SDL_SetError(46326, i4 + 8 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 i2 = HEAP32[19487] | 0;
 i1 = HEAP32[i2 + 188 >> 2] | 0;
 if (!i1) {
  i3 = _SDL_SetError(46366, i4 + 16 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = FUNCTION_TABLE_iii[i1 & 63](i2, i3) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 31848;
 HEAP32[i1 + 32 >> 2] = i2;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 85420) | 0;
 __ZNSt3__26localeD2Ev(i5);
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 255](i2) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 31912;
 HEAP32[i1 + 32 >> 2] = i2;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i5, 85412) | 0;
 __ZNSt3__26localeD2Ev(i5);
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 255](i2) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNSt3__26locale2id5__getEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 i1 = i5 + 32 | 0;
 i3 = i5 + 24 | 0;
 i4 = i5;
 i6 = i5 + 16 | 0;
 HEAP32[i6 >> 2] = 370;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_(i4, i1, i2);
 if ((HEAP32[i2 >> 2] | 0) != -1) {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 >> 2] = i1;
  __ZNSt3__211__call_onceERVmPvPFvS2_E(i2, i3, 371);
 }
 STACKTOP = i5;
 return (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 4) | 0;
 if (!(HEAP32[i7 >> 2] & 4)) HEAP32[i6 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i3, i7, i4) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i4, 4) | 0;
 if (!(HEAP32[i7 >> 2] & 4)) HEAP32[i6 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 switch (i4 & 2047) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709551616.0, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = (i4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function _SDL_Delay(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i5 + 8 | 0;
 i3 = i5;
 HEAP32[i2 >> 2] = (i1 >>> 0) / 1e3 | 0;
 i4 = i2 + 4 | 0;
 HEAP32[i4 >> 2] = ((i1 >>> 0) % 1e3 | 0) * 1e6;
 i1 = i3 + 4 | 0;
 while (1) {
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
  if (!(_nanosleep(i3 | 0, i2 | 0) | 0)) {
   i1 = 4;
   break;
  }
  if ((HEAP32[(___errno_location() | 0) >> 2] | 0) != 4) {
   i1 = 4;
   break;
  }
 }
 if ((i1 | 0) == 4) {
  STACKTOP = i5;
  return;
 }
}

function _SDL_DestroyRenderer(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 if (i3 | 0) if ((HEAP32[i3 >> 2] | 0) == 85556) {
  _SDL_DelEventWatch(42, i3);
  i2 = i3 + 304 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 | 0) do {
   _SDL_DestroyTexture(i1);
   i1 = HEAP32[i2 >> 2] | 0;
  } while ((i1 | 0) != 0);
  i1 = HEAP32[i3 + 188 >> 2] | 0;
  if (i1 | 0) _SDL_SetWindowData(i1, 59371, 0) | 0;
  HEAP32[i3 >> 2] = 0;
  FUNCTION_TABLE_vi[HEAP32[i3 + 92 >> 2] & 511](i3);
  STACKTOP = i4;
  return;
 }
 _SDL_SetError(41341, i1) | 0;
 STACKTOP = i4;
 return;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 31976;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP32[i1 + 48 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP8[i1 + 52 >> 0] = 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 FUNCTION_TABLE_vii[i3 & 127](i1, i5);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1);
 HEAP32[i1 >> 2] = 32040;
 HEAP32[i1 + 32 >> 2] = i2;
 HEAP32[i1 + 40 >> 2] = i3;
 HEAP32[i1 + 48 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP8[i1 + 52 >> 0] = 0;
 i3 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_(i5, i1 + 4 | 0);
 FUNCTION_TABLE_vii[i3 & 127](i1, i5);
 __ZNSt3__26localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function _UpdateEventsForDeviceRemoval_352() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i2 = _SDL_PeepEvents(0, 0, 1, 1541, 1541) | 0;
 if ((i2 | 0) < 1) {
  STACKTOP = i4;
  return;
 }
 i1 = i2 * 56 | 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
 i2 = _SDL_PeepEvents(i3, i2, 2, 1541, 1541) | 0;
 if ((i2 | 0) > 0) {
  i1 = 0;
  do {
   i5 = i3 + (i1 * 56 | 0) + 8 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 _SDL_PeepEvents(i3, i2, 0, 0, 0) | 0;
 STACKTOP = i4;
 return;
}

function _strtox_767(i4, i5, i1, i2, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i7 = i9;
 HEAP32[i7 >> 2] = 0;
 i8 = i7 + 4 | 0;
 HEAP32[i8 >> 2] = i4;
 HEAP32[i7 + 44 >> 2] = i4;
 i6 = i7 + 8 | 0;
 HEAP32[i6 >> 2] = (i4 | 0) < 0 ? -1 : i4 + 2147483647 | 0;
 HEAP32[i7 + 76 >> 2] = -1;
 ___shlim(i7, 0);
 i1 = ___intscan(i7, i1, 1, i2, i3) | 0;
 if (i5 | 0) HEAP32[i5 >> 2] = i4 + ((HEAP32[i8 >> 2] | 0) + (HEAP32[i7 + 108 >> 2] | 0) - (HEAP32[i6 >> 2] | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function _UpdateEventsForDeviceRemoval() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 i2 = _SDL_PeepEvents(0, 0, 1, 1619, 1619) | 0;
 if ((i2 | 0) < 1) {
  STACKTOP = i4;
  return;
 }
 i1 = i2 * 56 | 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * i1 | 0) + 15 & -16) | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow((1 * i1 | 0) + 15 & -16 | 0);
 i2 = _SDL_PeepEvents(i3, i2, 2, 1619, 1619) | 0;
 if ((i2 | 0) > 0) {
  i1 = 0;
  do {
   i5 = i3 + (i1 * 56 | 0) + 8 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + -1;
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 _SDL_PeepEvents(i3, i2, 0, 0, 0) | 0;
 STACKTOP = i4;
 return;
}

function _SDL_SendKeyboardText(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i3 = i4;
 i1 = HEAP8[i2 >> 0] | 0;
 if ((i1 & 255) < 32 | i1 << 24 >> 24 == 127) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((_SDL_EventState(771, -1) | 0) << 24 >> 24 != 1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 HEAP32[i3 >> 2] = 771;
 i1 = HEAP32[19783] | 0;
 if (!i1) i1 = 0; else i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i3 + 8 >> 2] = i1;
 _SDL_utf8strlcpy(i3 + 12 | 0, i2, 32) | 0;
 i3 = (_SDL_PushEvent(i3) | 0) > 0 & 1;
 STACKTOP = i4;
 return i3 | 0;
}

function _png_colorspace_sync(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (!i5) return;
 i1 = i5 + 40 | 0;
 i2 = i4 + 824 | 0;
 i3 = i1 + 76 | 0;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
 } while ((i1 | 0) < (i3 | 0));
 i1 = HEAP16[i5 + 114 >> 1] | 0;
 i2 = i1 & 65535;
 if (!(i2 & 32768)) {
  i5 = i5 + 8 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i4 = i2 & 128 | 0 ? i4 | 2048 : i4 & -2049;
  i4 = i1 & 2 ? i4 | 4 : i4 & -5;
  HEAP32[i5 >> 2] = i1 & 1 ? i4 | 1 : i4 & -2;
  return;
 } else {
  i3 = i5 + 8 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -6150;
  _png_free_data(i4, i5, 16, -1);
  return;
 }
}

function _SDL_JoystickGetDeviceGUID(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i5;
 i1 = i5 + 8 | 0;
 if ((i3 | 0) >= 0) if ((_SDL_SYS_NumJoysticks() | 0) > (i3 | 0)) {
  _SDL_SYS_JoystickGetDeviceGUID(i2, i3);
  STACKTOP = i5;
  return;
 }
 HEAP32[i4 >> 2] = _SDL_SYS_NumJoysticks() | 0;
 _SDL_SetError(58288, i4) | 0;
 _SDL_memset(i1, 0, 16) | 0;
 i3 = i2;
 i2 = i3 + 16 | 0;
 do {
  HEAP8[i3 >> 0] = HEAP8[i1 >> 0] | 0;
  i3 = i3 + 1 | 0;
  i1 = i1 + 1 | 0;
 } while ((i3 | 0) < (i2 | 0));
 STACKTOP = i5;
 return;
}

function _Emscripten_CreateCursor(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _SDL_ConvertSurfaceFormat(i3, 376840196, 0) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = _emscripten_asm_const_iiii(4, HEAP32[i3 + 8 >> 2] | 0, HEAP32[i3 + 12 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
 _SDL_FreeSurface(i1);
 i1 = _SDL_calloc(1, 8) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i3 = i1;
  return i3 | 0;
 }
 i2 = _SDL_calloc(1, 8) | 0;
 if (!i2) {
  _SDL_Error(0) | 0;
  _SDL_free(i1);
  i3 = 0;
  return i3 | 0;
 } else {
  HEAP32[i2 >> 2] = i3;
  HEAP32[i2 + 4 >> 2] = 1;
  HEAP32[i1 + 4 >> 2] = i2;
  i3 = i1;
  return i3 | 0;
 }
 return 0;
}

function _SDL_EGL_GetProcAddress(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 676 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i1 + 32 >> 2] | 0;
 do if (i2) {
  i1 = FUNCTION_TABLE_ii[i2 & 255](i4) | 0;
  if (!i1) {
   i1 = HEAP32[i3 >> 2] | 0;
   break;
  } else {
   i4 = i1;
   return i4 | 0;
  }
 } while (0);
 i1 = _SDL_LoadFunction(HEAP32[i1 >> 2] | 0, i4) | 0;
 if (i1 | 0) {
  i4 = i1;
  return i4 | 0;
 }
 if ((_SDL_strlen(i4) | 0) >>> 0 >= 1023) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP8[86582] = 95;
 _SDL_strlcpy(86583, i4, 1022) | 0;
 i4 = _SDL_LoadFunction(HEAP32[HEAP32[i3 >> 2] >> 2] | 0, 86582) | 0;
 return i4 | 0;
}

function _SDL_GL_GetProcAddress(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i5 = i6 + 16 | 0;
 i4 = i6 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 do if (!i2) {
  _SDL_SetError(40203, i6) | 0;
  i1 = 0;
 } else {
  i3 = HEAP32[i2 + 168 >> 2] | 0;
  if (!i3) {
   _SDL_SetError(46488, i5) | 0;
   i1 = 0;
   break;
  }
  if (!(HEAP32[i2 + 388 >> 2] | 0)) {
   _SDL_SetError(46459, i4) | 0;
   i1 = 0;
   break;
  } else {
   i1 = FUNCTION_TABLE_iii[i3 & 63](i2, i1) | 0;
   break;
  }
 } while (0);
 STACKTOP = i6;
 return i1 | 0;
}

function _getc(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) < 0) i3 = 3; else if (!(___lockfile(i4) | 0)) i3 = 3; else {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i4 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
  } else i1 = ___uflow(i4) | 0;
  ___unlockfile(i4);
 }
 do if ((i3 | 0) == 3) {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i4 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
   break;
  } else {
   i1 = ___uflow(i4) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _SDL_GetHintBoolean(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 i5 = 0;
 i1 = _SDL_getenv(i3) | 0;
 i2 = HEAP32[19490] | 0;
 L1 : do if (!i2) i5 = 7; else {
  while (1) {
   if (!(_SDL_strcmp(i3, HEAP32[i2 >> 2] | 0) | 0)) break;
   i2 = HEAP32[i2 + 16 >> 2] | 0;
   if (!i2) {
    i5 = 7;
    break L1;
   }
  }
  if (i1 | 0) if ((HEAP32[i2 + 8 >> 2] | 0) != 2) break;
  i1 = HEAP32[i2 + 4 >> 2] | 0;
  i5 = 7;
 } while (0);
 if ((i5 | 0) == 7) if (!i1) {
  i5 = i4;
  return i5 | 0;
 }
 if ((HEAP8[i1 >> 0] | 0) == 48) {
  i5 = 0;
  return i5 | 0;
 } else return (_SDL_strcasecmp(i1, 75216) | 0) != 0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i7, i2, i8, i9) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = i8;
 i6 = i1 + 8 | 0;
 i4 = 0;
 i5 = 0;
 L1 : while (1) {
  if ((i2 | 0) == (i8 | 0) | i4 >>> 0 >= i9 >>> 0) break;
  i3 = ___uselocale(HEAP32[i6 >> 2] | 0) | 0;
  i1 = _mbrlen(i2, i10 - i2 | 0, i7) | 0;
  if (i3 | 0) ___uselocale(i3) | 0;
  switch (i1 | 0) {
  case -2:
  case -1:
   break L1;
  case 0:
   {
    i1 = 1;
    break;
   }
  default:
   {}
  }
  i4 = i4 + 1 | 0;
  i5 = i1 + i5 | 0;
  i2 = i2 + i1 | 0;
 }
 return i5 | 0;
}

function _SDL_Generic_GetTLSData() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i3 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i4;
 i2 = _SDL_ThreadID() | 0;
 HEAP32[i1 >> 2] = 0;
 _SDL_AtomicLock(i1);
 _SDL_AtomicUnlock(i1);
 i1 = HEAP32[19488] | 0;
 if (!i1) {
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 5) {
  STACKTOP = i4;
  return i1 | 0;
 }
 i3 = HEAP32[i1 + 4 >> 2] | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _png_get_tRNS(i1, i4, i2, i5, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 if (!((i1 | 0) != 0 & (i4 | 0) != 0)) {
  i5 = 0;
  return i5 | 0;
 }
 if (!(HEAP32[i4 + 8 >> 2] & 16)) {
  i5 = 0;
  return i5 | 0;
 }
 if ((HEAP8[i4 + 25 >> 0] | 0) == 3) {
  if (!i2) i1 = 0; else {
   HEAP32[i2 >> 2] = HEAP32[i4 + 156 >> 2];
   i1 = 16;
  }
  if (i3) HEAP32[i3 >> 2] = i4 + 160;
 } else {
  if (!i3) i1 = 0; else {
   HEAP32[i3 >> 2] = i4 + 160;
   i1 = 16;
  }
  if (i2) HEAP32[i2 >> 2] = 0;
 }
 if (!i5) {
  i5 = i1;
  return i5 | 0;
 }
 HEAP32[i5 >> 2] = HEAPU16[i4 + 22 >> 1];
 i5 = 16;
 return i5 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = i6;
 i7 = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i2, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return i7 | 0;
}

function _GLES2_RenderPresent(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = 0;
 i2 = i5 + 320 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if ((HEAP32[19486] | 0) == (i3 | 0)) i4 = 4; else {
  HEAP32[i1 + 268 >> 2] = 0;
  if ((_SDL_GL_MakeCurrent(HEAP32[i5 + 188 >> 2] | 0, i3) | 0) >= 0) {
   HEAP32[19486] = HEAP32[i1 >> 2];
   _GLES2_UpdateViewport(i5) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   i4 = 4;
  }
 }
 if ((i4 | 0) == 4) if (HEAP32[i1 + 4 >> 2] | 0) {
  i1 = i1 + 108 | 0;
  do {} while ((FUNCTION_TABLE_i[HEAP32[i1 >> 2] & 7]() | 0) != 0);
 }
 _SDL_GL_SwapWindow(HEAP32[i5 + 188 >> 2] | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = i6;
 i7 = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i2, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return i7 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = i6;
 i7 = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i2, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return i7 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i9 = i1 + 4 | 0;
 i2 = i1;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = i6;
 i7 = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i3, i4, i9, i6, i7, i2, 1114111, 0) | 0;
 HEAP32[i5 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i2 >> 2];
 STACKTOP = i1;
 return i7 | 0;
}

function _Emscripten_VideoInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i3;
 HEAP32[i2 >> 2] = 370546692;
 HEAP32[i2 + 4 >> 2] = _emscripten_asm_const_i(0) | 0;
 HEAP32[i2 + 8 >> 2] = _emscripten_asm_const_i(1) | 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 if ((_SDL_AddBasicVideoDisplay(i2) | 0) < 0) {
  i2 = -1;
  STACKTOP = i3;
  return i2 | 0;
 }
 _SDL_memset(i2, 0, 20) | 0;
 _SDL_AddDisplayMode(HEAP32[i1 + 268 >> 2] | 0, i2) | 0;
 _Emscripten_InitMouse();
 i2 = 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _Emscripten_InitMouse() {
 var i1 = 0, i2 = 0;
 i1 = _SDL_GetMouse() | 0;
 HEAP32[i1 >> 2] = 52;
 HEAP32[i1 + 8 >> 2] = 115;
 HEAP32[i1 + 16 >> 2] = 322;
 HEAP32[i1 + 20 >> 2] = 4;
 HEAP32[i1 + 4 >> 2] = 116;
 HEAP32[i1 + 28 >> 2] = 117;
 i1 = _SDL_calloc(1, 8) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i2 = i1;
  _SDL_SetDefaultCursor(i2);
  return;
 }
 i2 = _SDL_calloc(1, 8) | 0;
 if (!i2) {
  _SDL_Error(0) | 0;
  _SDL_free(i1);
  i2 = 0;
  _SDL_SetDefaultCursor(i2);
  return;
 } else {
  HEAP32[i2 >> 2] = 50869;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = i2;
  i2 = i1;
  _SDL_SetDefaultCursor(i2);
  return;
 }
}

function _png_benign_error(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i4 = i5;
 i1 = (HEAP32[i2 + 208 >> 2] & 32768 | 0) != 0;
 if (!(HEAP32[i2 + 212 >> 2] & 1048576)) {
  if (!i1) _png_error(i2, i3);
  if (!(HEAP32[i2 + 376 >> 2] | 0)) _png_error(i2, i3); else _png_chunk_error(i2, i3);
 }
 if (i1) {
  i1 = HEAP32[i2 + 376 >> 2] | 0;
  if (i1 | 0) {
   _png_format_buffer(i1, i4, i3);
   _png_warning(i2, i4);
   STACKTOP = i5;
   return;
  }
 }
 _png_warning(i2, i3);
 STACKTOP = i5;
 return;
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 74 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i2 + 255 | i2;
 i1 = i3 + 20 | 0;
 i2 = i3 + 28 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 63](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 4)) {
  i2 = (HEAP32[i3 + 44 >> 2] | 0) + (HEAP32[i3 + 48 >> 2] | 0) | 0;
  HEAP32[i3 + 8 >> 2] = i2;
  HEAP32[i3 + 4 >> 2] = i2;
  i1 = i1 << 27 >> 31;
 } else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIPKc9AnimationEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i2) return; else {
  __ZNSt3__26__treeINS_12__value_typeIPKc9AnimationEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i1, HEAP32[i2 >> 2] | 0);
  __ZNSt3__26__treeINS_12__value_typeIPKc9AnimationEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i1, HEAP32[i2 + 4 >> 2] | 0);
  __ZdlPv(i2);
  return;
 }
}

function __ZNSt3__212__deque_baseIP11SDL_TextureNS_9allocatorIS2_EEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 __ZNSt3__212__deque_baseIP11SDL_TextureNS_9allocatorIS2_EEE5clearEv(i4);
 i2 = i4 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i5 = i4 + 8 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  do {
   __ZdlPv(HEAP32[i1 >> 2] | 0);
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i3 | 0));
  i1 = HEAP32[i2 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i5 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 }
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function _SDL_GetWindowSize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i6 + 8 | 0;
 i4 = HEAP32[19487] | 0;
 if (!i4) {
  _SDL_SetError(40203, i6) | 0;
  STACKTOP = i6;
  return;
 }
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i4 + 280 | 0)) {
  if (i2 | 0) HEAP32[i2 >> 2] = HEAP32[i1 + 24 >> 2];
  if (!i3) {
   STACKTOP = i6;
   return;
  }
  HEAP32[i3 >> 2] = HEAP32[i1 + 28 >> 2];
  STACKTOP = i6;
  return;
 }
 _SDL_SetError(59973, i5) | 0;
 STACKTOP = i6;
 return;
}

function _SDL_CalculateBlit1(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 52 >> 2] | 0;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] | 0;
 if ((HEAPU8[i1 + 8 >> 0] | 0) < 8) i1 = 0; else i1 = HEAPU8[i1 + 9 >> 0] | 0;
 switch (HEAP32[i2 + 68 >> 2] & -28673 | 0) {
 case 0:
  {
   i2 = HEAP32[14372 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 256:
  {
   i2 = HEAP32[14392 + (i1 << 2) >> 2] | 0;
   return i2 | 0;
  }
 case 18:
  {
   i2 = i1 >>> 0 > 1 ? 290 : 0;
   return i2 | 0;
  }
 case 274:
  {
   i2 = i1 >>> 0 > 1 ? 291 : 0;
   return i2 | 0;
  }
 default:
  {
   i2 = 0;
   return i2 | 0;
  }
 }
 return 0;
}

function _SDL_EGL_SetSwapInterval(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i1 + 676 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) {
  i3 = _SDL_SetError(48604, i4) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if ((FUNCTION_TABLE_iii[HEAP32[i2 + 64 >> 2] & 63](HEAP32[i2 + 8 >> 2] | 0, i3) | 0) == 1) {
  HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] = i3;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i3 = _SDL_SetError(48624, i4 + 8 | 0) | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _realloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 if (!i2) {
  i3 = _malloc(i3) | 0;
  return i3 | 0;
 }
 if (i3 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i2 + -8 | 0, i3 >>> 0 < 11 ? 16 : i3 + 11 & -8) | 0;
 if (i1 | 0) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i3) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i2 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i2 | 0, (i4 >>> 0 < i3 >>> 0 ? i4 : i3) | 0) | 0;
 _free(i2);
 i3 = i1;
 return i3 | 0;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwi(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 L1 : do if (!(HEAP8[i3 + 44 >> 0] | 0)) {
  i1 = 0;
  while (1) {
   if ((i1 | 0) >= (i4 | 0)) break L1;
   i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0;
   i5 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i2 >> 2] | 0) | 0;
   i5 = FUNCTION_TABLE_iii[i6 & 63](i3, i5) | 0;
   if ((i5 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) break L1;
   i1 = i1 + 1 | 0;
   i2 = i2 + 4 | 0;
  }
 } else i1 = _fwrite(i2, 4, i4, HEAP32[i3 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKci(i3, i2, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 L1 : do if (!(HEAP8[i3 + 44 >> 0] | 0)) {
  i1 = 0;
  while (1) {
   if ((i1 | 0) >= (i4 | 0)) break L1;
   i6 = HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] | 0;
   i5 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i2 >> 0] | 0) | 0;
   i5 = FUNCTION_TABLE_iii[i6 & 63](i3, i5) | 0;
   if ((i5 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) break L1;
   i1 = i1 + 1 | 0;
   i2 = i2 + 1 | 0;
  }
 } else i1 = _fwrite(i2, 1, i4, HEAP32[i3 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function _SDL_SetMouseFocus(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[19502] | 0;
 if ((i2 | 0) == (i1 | 0)) return;
 if (i2 | 0) _SDL_SendWindowEvent(i2, 11, 0, 0) | 0;
 HEAP32[19502] = i1;
 if (!i1) i1 = 78060; else {
  _SDL_SendWindowEvent(i1, 10, 0, 0) | 0;
  i1 = (HEAP32[19502] | 0) == 0 ? 78060 : 78064;
 }
 i3 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[19493] | 0;
 i2 = (i1 | 0) == 0;
 if ((i3 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
  if (i2) return;
  FUNCTION_TABLE_ii[i1 & 255](i3) | 0;
  return;
 } else {
  if (i2) return;
  FUNCTION_TABLE_ii[i1 & 255](0) | 0;
  return;
 }
}

function __ZNSt3__26locale5__impD2Ev(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0;
 HEAP32[i3 >> 2] = 34440;
 i4 = i3 + 8 | 0;
 i5 = i3 + 12 | 0;
 i2 = 0;
 while (1) {
  i1 = HEAP32[i4 >> 2] | 0;
  if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) - i1 >> 2 >>> 0) break;
  i1 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
  if (i1 | 0) __ZNSt3__214__shared_count16__release_sharedEv(i1) | 0;
  i2 = i2 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3 + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4);
 __ZNSt3__26locale5facetD2Ev(i3);
 return;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj(i1, i2, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i3 = 0;
 if (i5 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (!(i5 & 512)) i3 = i1; else {
  HEAP8[i1 >> 0] = 35;
  i3 = i1 + 1 | 0;
 }
 while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  if (!(i1 << 24 >> 24)) break;
  HEAP8[i3 >> 0] = i1;
  i2 = i2 + 1 | 0;
  i3 = i3 + 1 | 0;
 }
 switch (i5 & 74) {
 case 64:
  {
   i1 = 111;
   break;
  }
 case 8:
  {
   i1 = i5 & 16384 | 0 ? 88 : 120;
   break;
  }
 default:
  i1 = i4 ? 100 : 117;
 }
 HEAP8[i3 >> 0] = i1;
 return;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0;
 __ZNSt3__214__shared_count12__add_sharedEv(i4);
 i3 = i2 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) - i1 >> 2 >>> 0 > i5 >>> 0) i2 = i3; else {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i3, i5 + 1 | 0);
  i2 = i3;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 i1 = HEAP32[i1 + (i5 << 2) >> 2] | 0;
 if (i1 | 0) __ZNSt3__214__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[(HEAP32[i2 >> 2] | 0) + (i5 << 2) >> 2] = i4;
 return;
}

function _png_read_sig(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = i3 + 441 | 0;
 i4 = HEAP8[i2 >> 0] | 0;
 i5 = i4 & 255;
 if ((i4 & 255) > 7) return;
 i6 = 8 - i5 | 0;
 HEAP32[i3 + 800 >> 2] = 17;
 _png_read_data(i3, i1 + 32 + i5 | 0, i6);
 HEAP8[i2 >> 0] = 8;
 i1 = i1 + 32 | 0;
 if (!(_png_sig_cmp(i1, i5, i6) | 0)) {
  if ((i4 & 255) >= 3) return;
  i6 = i3 + 208 | 0;
  HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | 4096;
  return;
 }
 if ((i4 & 255) >= 4) _png_error(i3, 65730);
 if (!(_png_sig_cmp(i1, i5, i6 + -4 | 0) | 0)) _png_error(i3, 65730); else _png_error(i3, 65715);
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i3, i4, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0;
 i1 = i3 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (!i2) {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 + 24 >> 2] = i5;
  HEAP32[i3 + 36 >> 2] = 1;
 } else {
  if ((i2 | 0) != (i4 | 0)) {
   i5 = i3 + 36 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[i3 + 24 >> 2] = 2;
   HEAP8[i3 + 54 >> 0] = 1;
   break;
  }
  i1 = i3 + 24 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 2) HEAP32[i1 >> 2] = i5;
 } while (0);
 return;
}

function _fmt_u(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i3 >>> 0 > 4294967295) {
  while (1) {
   i4 = ___uremdi3(i3 | 0, i2 | 0, 10, 0) | 0;
   i1 = i1 + -1 | 0;
   HEAP8[i1 >> 0] = i4 & 255 | 48;
   i4 = i3;
   i3 = ___udivdi3(i3 | 0, i2 | 0, 10, 0) | 0;
   if (!(i2 >>> 0 > 9 | (i2 | 0) == 9 & i4 >>> 0 > 4294967295)) break; else i2 = tempRet0;
  }
  i2 = i3;
 } else i2 = i3;
 if (i2) while (1) {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
  if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
 }
 return i1 | 0;
}

function _fourbyte_strstr(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8 | (HEAPU8[i1 + 3 >> 0] | 0);
 i1 = i3 + 3 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (HEAPU8[i3 + 2 >> 0] | 0) << 8 | i2 & 255;
 if (!(i2 << 24 >> 24 == 0 | (i3 | 0) == (i4 | 0))) do {
  i1 = i1 + 1 | 0;
  i2 = HEAP8[i1 >> 0] | 0;
  i3 = i3 << 8 | i2 & 255;
 } while (!(i2 << 24 >> 24 == 0 | (i3 | 0) == (i4 | 0)));
 return (i2 << 24 >> 24 ? i1 + -3 | 0 : 0) | 0;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_(i1, i3, i5, i2, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i4 = 0, i7 = 0;
 i7 = 0;
 i1 = i3;
 while (1) {
  if ((i2 | 0) == (i6 | 0)) {
   i7 = 7;
   break;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = -1;
   break;
  }
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24 < i4 << 24 >> 24) {
   i1 = -1;
   break;
  }
  if (i4 << 24 >> 24 < i3 << 24 >> 24) {
   i1 = 1;
   break;
  }
  i2 = i2 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 if ((i7 | 0) == 7) i1 = (i1 | 0) != (i5 | 0) & 1;
 return i1 | 0;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[76928] | 0)) if (___cxa_guard_acquire(76928) | 0) {
  i2 = 84552;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 84840);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84552, 32764) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(84564, 32776) | 0;
 return;
}

function _pad_673(i5, i2, i3, i4, i1) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256);
 i6 = i7;
 if ((i3 | 0) > (i4 | 0) & (i1 & 73728 | 0) == 0) {
  i1 = i3 - i4 | 0;
  _memset(i6 | 0, i2 << 24 >> 24 | 0, (i1 >>> 0 < 256 ? i1 : 256) | 0) | 0;
  if (i1 >>> 0 > 255) {
   i2 = i3 - i4 | 0;
   do {
    _out(i5, i6, 256);
    i1 = i1 + -256 | 0;
   } while (i1 >>> 0 > 255);
   i1 = i2 & 255;
  }
  _out(i5, i6, i1);
 }
 STACKTOP = i7;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var i1 = 0, i2 = 0;
 if (!(HEAP8[76848] | 0)) if (___cxa_guard_acquire(76848) | 0) {
  i2 = 83740;
  do {
   HEAP32[i2 >> 2] = 0;
   HEAP32[i2 + 4 >> 2] = 0;
   HEAP32[i2 + 8 >> 2] = 0;
   i1 = 0;
   while (1) {
    if ((i1 | 0) == 3) break;
    HEAP32[i2 + (i1 << 2) >> 2] = 0;
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 12 | 0;
  } while ((i2 | 0) != 84028);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(83740, 73643) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(83752, 73646) | 0;
 return;
}

function _SDL_Error(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48);
 switch (i1 | 0) {
 case 0:
  {
   _SDL_SetError(60570, i2) | 0;
   break;
  }
 case 1:
  {
   _SDL_SetError(46572, i2 + 8 | 0) | 0;
   break;
  }
 case 2:
  {
   _SDL_SetError(46602, i2 + 16 | 0) | 0;
   break;
  }
 case 3:
  {
   _SDL_SetError(46630, i2 + 24 | 0) | 0;
   break;
  }
 case 4:
  {
   _SDL_SetError(46658, i2 + 32 | 0) | 0;
   break;
  }
 default:
  _SDL_SetError(46690, i2 + 40 | 0) | 0;
 }
 STACKTOP = i2;
 return -1;
}

function _png_zstream_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 248 | 0;
 if (HEAP32[i3 >> 2] | 0) return;
 switch (i2 | 0) {
 case -7:
  {
   i1 = 60677;
   break;
  }
 case 1:
  {
   i1 = 60802;
   break;
  }
 case 2:
  {
   i1 = 60780;
   break;
  }
 case -1:
  {
   i1 = 60766;
   break;
  }
 case -2:
  {
   i1 = 60743;
   break;
  }
 case -3:
  {
   i1 = 60725;
   break;
  }
 case -4:
  {
   i1 = 63704;
   break;
  }
 case -5:
  {
   i1 = 63724;
   break;
  }
 case -6:
  {
   i1 = 60700;
   break;
  }
 default:
  i1 = 60830;
 }
 HEAP32[i3 >> 2] = i1;
 return;
}

function _SW_SetTextureColorMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 i4 = i2 + 28 | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 i6 = i2 + 29 | 0;
 i7 = HEAP8[i6 >> 0] | 0;
 i2 = i2 + 30 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if ((i7 & i5 & i1) << 24 >> 24 == -1) {
  i6 = i7;
  i7 = i1;
  i7 = _SDL_SetSurfaceColorMod(i3, i5, i6, i7) | 0;
  return i7 | 0;
 }
 _SDL_SetSurfaceRLE(i3, 0) | 0;
 i5 = HEAP8[i4 >> 0] | 0;
 i6 = HEAP8[i6 >> 0] | 0;
 i7 = HEAP8[i2 >> 0] | 0;
 i7 = _SDL_SetSurfaceColorMod(i3, i5, i6, i7) | 0;
 return i7 | 0;
}

function __ZN18KeyboardController4initEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i1 = i3 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP8[75960] | 0)) if (___cxa_guard_acquire(75960) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19476] = i4;
 }
 HEAP32[i3 + 16 >> 2] = HEAP32[i2 + 20 + (HEAP32[19476] << 2) >> 2];
 i1 = HEAP32[i1 >> 2] | 0;
 if (!(HEAP8[75984] | 0)) if (___cxa_guard_acquire(75984) | 0) {
  i4 = HEAP32[19475] | 0;
  HEAP32[19475] = i4 + 1;
  HEAP32[19479] = i4;
 }
 HEAP32[i3 + 20 >> 2] = HEAP32[i1 + 20 + (HEAP32[19479] << 2) >> 2];
 return;
}

function _png_safecat(i7, i2, i1, i3) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 if (!((i7 | 0) != 0 & i1 >>> 0 < i2 >>> 0)) {
  i7 = i1;
  return i7 | 0;
 }
 if (i3) {
  i5 = HEAP8[i3 >> 0] | 0;
  i6 = i2 + -1 | 0;
  if (i6 >>> 0 > i1 >>> 0 & i5 << 24 >> 24 != 0) {
   i4 = i1;
   i2 = i5;
   while (1) {
    i3 = i3 + 1 | 0;
    i1 = i4 + 1 | 0;
    HEAP8[i7 + i4 >> 0] = i2;
    i2 = HEAP8[i3 >> 0] | 0;
    if (!(i1 >>> 0 < i6 >>> 0 & i2 << 24 >> 24 != 0)) break; else i4 = i1;
   }
  }
 }
 HEAP8[i7 + i1 >> 0] = 0;
 i7 = i1;
 return i7 | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i3, i4, i5, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = i1;
 do if (!i4) i1 = 0; else {
  i2 = i1 + 112 | 0;
  if (i4 >>> 0 < 29 & (HEAP8[i2 >> 0] | 0) == 0) {
   HEAP8[i2 >> 0] = 1;
   break;
  } else {
   i1 = __Znwj(i4 << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[i3 >> 2] = i1;
 i5 = i1 + (i5 << 2) | 0;
 HEAP32[i3 + 8 >> 2] = i5;
 HEAP32[i3 + 4 >> 2] = i5;
 HEAP32[i3 + 12 >> 2] = i1 + (i4 << 2);
 return;
}

function _inflateEnd(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 if (!i3) {
  i6 = -2;
  return i6 | 0;
 }
 i6 = i3 + 28 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (!i1) {
  i6 = -2;
  return i6 | 0;
 }
 i4 = i3 + 36 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (!i2) {
  i6 = -2;
  return i6 | 0;
 }
 i5 = HEAP32[i1 + 52 >> 2] | 0;
 i3 = i3 + 40 | 0;
 if (i5) {
  FUNCTION_TABLE_vii[i2 & 127](HEAP32[i3 >> 2] | 0, i5);
  i2 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 FUNCTION_TABLE_vii[i2 & 127](HEAP32[i3 >> 2] | 0, i1);
 HEAP32[i6 >> 2] = 0;
 i6 = 0;
 return i6 | 0;
}

function _SDL_GetRenderDriverInfo(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 if (i3 >>> 0 > 1) {
  HEAP32[i2 >> 2] = 1;
  i3 = _SDL_SetError(60164, i2) | 0;
  STACKTOP = i4;
  return i3 | 0;
 } else {
  i2 = (HEAP32[16256 + (i3 << 2) >> 2] | 0) + 4 | 0;
  i3 = i1 + 84 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 return 0;
}

function _saveSetjmp(i1, i3, i5, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[i1 >> 2] = setjmpId;
 while ((i2 | 0) < (i4 | 0)) {
  if (!(HEAP32[i5 + (i2 << 3) >> 2] | 0)) {
   HEAP32[i5 + (i2 << 3) >> 2] = setjmpId;
   HEAP32[i5 + ((i2 << 3) + 4) >> 2] = i3;
   HEAP32[i5 + ((i2 << 3) + 8) >> 2] = 0;
   tempRet0 = i4;
   return i5 | 0;
  }
  i2 = i2 + 1 | 0;
 }
 i4 = i4 * 2 | 0;
 i5 = _realloc(i5 | 0, 8 * (i4 + 1 | 0) | 0) | 0;
 i5 = _saveSetjmp(i1 | 0, i3 | 0, i5 | 0, i4 | 0) | 0;
 tempRet0 = i4;
 return i5 | 0;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_(i1, i3, i5, i2, i6) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i4 = 0, i7 = 0;
 i7 = 0;
 i1 = i3;
 while (1) {
  if ((i2 | 0) == (i6 | 0)) {
   i7 = 7;
   break;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = -1;
   break;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) < (i4 | 0)) {
   i1 = -1;
   break;
  }
  if ((i4 | 0) < (i3 | 0)) {
   i1 = 1;
   break;
  }
  i2 = i2 + 4 | 0;
  i1 = i1 + 4 | 0;
 }
 if ((i7 | 0) == 7) i1 = (i1 | 0) != (i5 | 0) & 1;
 return i1 | 0;
}

function ___strerror_l(i2, i4) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0;
 i3 = 0;
 while (1) {
  if ((HEAPU8[70519 + i3 >> 0] | 0) == (i2 | 0)) {
   i2 = 2;
   break;
  }
  i1 = i3 + 1 | 0;
  if ((i1 | 0) == 87) {
   i1 = 70607;
   i3 = 87;
   i2 = 5;
   break;
  } else i3 = i1;
 }
 if ((i2 | 0) == 2) if (!i3) i1 = 70607; else {
  i1 = 70607;
  i2 = 5;
 }
 if ((i2 | 0) == 5) while (1) {
  do {
   i2 = i1;
   i1 = i1 + 1 | 0;
  } while ((HEAP8[i2 >> 0] | 0) != 0);
  i3 = i3 + -1 | 0;
  if (!i3) break; else i2 = 5;
 }
 return ___lctrans(i1, HEAP32[i4 + 20 >> 2] | 0) | 0;
}

function _SDL_EGL_UnloadLibrary(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 676 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_ii[HEAP32[i1 + 28 >> 2] & 255](i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 8 >> 2] = 0;
 }
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 if (i2) {
  _SDL_UnloadObject(i2);
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 + 4 >> 2] = 0;
 }
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  _SDL_UnloadObject(i2);
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
 }
 _SDL_free(i1);
 HEAP32[i3 >> 2] = 0;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i2 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 i4 = i1 - i5 >> 2;
 L1 : do if (i4 >>> 0 < i3 >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i2, i3 - i4 | 0); else if (i4 >>> 0 > i3 >>> 0) {
  i2 = i5 + (i3 << 2) | 0;
  while (1) {
   if ((i1 | 0) == (i2 | 0)) break L1;
   i5 = i1 + -4 | 0;
   HEAP32[i6 >> 2] = i5;
   i1 = i5;
  }
 } while (0);
 return;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = 0;
 i4 = i1;
 L1 : do if (!(i4 & 3)) i3 = 4; else {
  i2 = i4;
  while (1) {
   if (!(HEAP8[i1 >> 0] | 0)) {
    i1 = i2;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i1;
   if (!(i2 & 3)) {
    i3 = 4;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 4) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function _IMG_Init(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 do if (!(i2 & 1)) i1 = 0; else {
  if (!(HEAP32[19482] & 1)) if (_IMG_InitJPG() | 0) {
   i1 = 0;
   break;
  }
  i1 = 1;
 } while (0);
 do if (i2 & 2) {
  if (!(HEAP32[19482] & 2)) if (_IMG_InitPNG() | 0) break;
  i1 = i1 | 2;
 } while (0);
 do if (i2 & 4) {
  if (!(HEAP32[19482] & 4)) if (_IMG_InitTIF() | 0) break;
  i1 = i1 | 4;
 } while (0);
 do if (i2 & 8) {
  if (!(HEAP32[19482] & 8)) if (_IMG_InitWEBP() | 0) break;
  i1 = i1 | 8;
 } while (0);
 i2 = HEAP32[19482] | i1;
 HEAP32[19482] = i2;
 return i2 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5); else {
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 15](i1, i2, i3, i4, i5, i6);
 }
 return;
}

function _DISKAUDIO_CaptureFromDevice(i4, i2, i5) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0, i6 = 0;
 i3 = HEAP32[i4 + 180 >> 2] | 0;
 _SDL_Delay(HEAP32[i3 + 4 >> 2] | 0);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) i1 = i5; else {
  i6 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i1, i2, 1, i5) | 0;
  i1 = i5 - i6 | 0;
  i2 = i2 + i6 | 0;
  if ((i1 | 0) > 0) {
   i6 = HEAP32[i3 >> 2] | 0;
   FUNCTION_TABLE_ii[HEAP32[i6 + 16 >> 2] & 255](i6) | 0;
   HEAP32[i3 >> 2] = 0;
  }
 }
 _SDL_memset(i2, HEAPU8[i4 + 11 >> 0] | 0, i1) | 0;
 return i5 | 0;
}

function _SDL_CreateRGBSurface(i1, i8, i9, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = _SDL_MasksToPixelFormatEnum(i2, i3, i4, i5, i6) | 0;
 if (!i1) {
  _SDL_SetError(47710, i7) | 0;
  i9 = 0;
  STACKTOP = i7;
  return i9 | 0;
 } else {
  i9 = _SDL_CreateRGBSurfaceWithFormat(0, i8, i9, 0, i1) | 0;
  STACKTOP = i7;
  return i9 | 0;
 }
 return 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i2) | 0) >>> 0 < i3 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i2);
 i1 = i2 + 128 | 0;
 if (i3 >>> 0 < 29 & (HEAP8[i1 >> 0] | 0) == 0) {
  HEAP8[i1 >> 0] = 1;
  i1 = i2 + 16 | 0;
 } else i1 = __Znwj(i3 << 2) | 0;
 HEAP32[i2 + 4 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 HEAP32[i2 + 8 >> 2] = i1 + (i3 << 2);
 return;
}

function ___stdio_seek(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i6 = i5;
 i4 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i4;
 HEAP32[i6 + 16 >> 2] = i3;
 if ((___syscall_ret(___syscall140(140, i6 | 0) | 0) | 0) < 0) {
  HEAP32[i4 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i4 >> 2] | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _Emscripten_FiniMouse() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i3 = _SDL_GetMouse() | 0;
 i4 = i3 + 96 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 | 0) {
  i2 = i5 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 | 0) {
   if (HEAP32[i1 + 4 >> 2] | 0) {
    _SDL_free(HEAP32[i1 >> 2] | 0);
    i1 = HEAP32[i2 >> 2] | 0;
   }
   _SDL_free(i1);
  }
  _SDL_free(i5);
 }
 HEAP32[i4 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 return;
}

function _EMSCRIPTENAUDIO_Init(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 HEAP32[i1 + 4 >> 2] = 20;
 HEAP32[i1 + 40 >> 2] = 323;
 HEAP32[i1 + 72 >> 2] = 1;
 HEAP32[i1 + 64 >> 2] = 1;
 HEAP32[i1 + 60 >> 2] = 1;
 i3 = _emscripten_asm_const_i(7) | 0;
 if (!i3) {
  _SDL_SetError(52208, i4) | 0;
  i2 = 0;
 } else i2 = (_emscripten_asm_const_i(8) | 0) != 0 & 1;
 HEAP32[i1 + 68 >> 2] = i2;
 HEAP32[i1 + 76 >> 2] = i2;
 STACKTOP = i4;
 return i3 | 0;
}

function _threebyte_strstr(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = (HEAPU8[i1 + 1 >> 0] | 0) << 16 | (HEAPU8[i1 >> 0] | 0) << 24 | (HEAPU8[i1 + 2 >> 0] | 0) << 8;
 i2 = i3 + 2 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i3 = (HEAPU8[i3 + 1 >> 0] | 0) << 16 | (HEAPU8[i3 >> 0] | 0) << 24 | (i1 & 255) << 8;
 if (!((i3 | 0) == (i4 | 0) | i1 << 24 >> 24 == 0)) do {
  i2 = i2 + 1 | 0;
  i1 = HEAP8[i2 >> 0] | 0;
  i3 = (i3 | i1 & 255) << 8;
 } while (!((i3 | 0) == (i4 | 0) | i1 << 24 >> 24 == 0));
 return (i1 << 24 >> 24 ? i2 + -2 | 0 : 0) | 0;
}

function _SDL_SetRenderDrawColor(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i7;
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == 85556) {
  HEAP8[i1 + 312 >> 0] = i2;
  HEAP8[i1 + 313 >> 0] = i3;
  HEAP8[i1 + 314 >> 0] = i4;
  HEAP8[i1 + 315 >> 0] = i5;
  i6 = 0;
  STACKTOP = i7;
  return i6 | 0;
 }
 _SDL_SetError(41341, i6) | 0;
 i6 = -1;
 STACKTOP = i7;
 return i6 | 0;
}

function _DUMMY_VideoInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i2 = i3;
 HEAP32[i2 >> 2] = 370546692;
 HEAP32[i2 + 4 >> 2] = 1024;
 HEAP32[i2 + 8 >> 2] = 768;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 if ((_SDL_AddBasicVideoDisplay(i2) | 0) < 0) {
  i2 = -1;
  STACKTOP = i3;
  return i2 | 0;
 }
 _SDL_memset(i2, 0, 20) | 0;
 _SDL_AddDisplayMode(HEAP32[i1 + 268 >> 2] | 0, i2) | 0;
 i2 = 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _Emscripten_UpdateWindowFramebuffer(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = HEAP32[(HEAP32[i4 + 144 >> 2] | 0) + 8 >> 2] | 0;
 if (!i1) {
  i4 = _SDL_SetError(48923, i2) | 0;
  STACKTOP = i2;
  return i4 | 0;
 } else {
  _emscripten_asm_const_iiii(3, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, HEAP32[i1 + 20 >> 2] | 0) | 0;
  i4 = 0;
  STACKTOP = i2;
  return i4 | 0;
 }
 return 0;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85420) | 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 255](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i1 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 255](i3) | 0) & 1;
 if ((HEAP32[i2 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(72977); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85412) | 0;
 i3 = i1 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i2 = i1 + 44 | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 255](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i1 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 255](i3) | 0) & 1;
 if ((HEAP32[i2 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(72977); else return;
}

function _png_gamma_correct(i2, i3, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0;
 i1 = i3 + -1 | 0;
 if ((HEAP8[i2 + 436 >> 0] | 0) == 8) {
  if (i1 >>> 0 < 254) i1 = ~~+Math_floor(+(+Math_pow(+(+(i3 | 0) / 255.0), +(+(i4 | 0) * 1.0e-05)) * 255.0 + .5)) & 255; else i1 = i3 & 255;
  i4 = i1 & 255;
  return i4 | 0;
 } else if (i1 >>> 0 < 65534) {
  i4 = ~~+Math_floor(+(+Math_pow(+(+(i3 | 0) / 65535.0), +(+(i4 | 0) * 1.0e-05)) * 65535.0 + .5)) & 65535;
  return i4 | 0;
 } else {
  i4 = i3 & 65535;
  return i4 | 0;
 }
 return 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i4 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 while (1) {
  if ((i3 | 0) == (i1 | 0)) break;
  i5 = i3 + -4 | 0;
  HEAP32[i2 >> 2] = i5;
  i3 = i5;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2 | 0) {
  i1 = HEAP32[i4 + 16 >> 2] | 0;
  if ((i2 | 0) == (i1 | 0)) {
   HEAP8[i1 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _pthread_mutex_lock(85460) | 0;
 while (1) {
  if ((HEAP32[i1 >> 2] | 0) != 1) break;
  _pthread_cond_wait(85488, 85460) | 0;
 }
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 1;
  _pthread_mutex_unlock(85460) | 0;
  FUNCTION_TABLE_vi[i3 & 511](i2);
  _pthread_mutex_lock(85460) | 0;
  HEAP32[i1 >> 2] = -1;
  _pthread_mutex_unlock(85460) | 0;
  _pthread_cond_broadcast(85488) | 0;
 } else _pthread_mutex_unlock(85460) | 0;
 return;
}

function _SDL_GetRendererInfo(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i4;
 if (i3 | 0) if ((HEAP32[i3 >> 2] | 0) == 85556) {
  i2 = i3 + 104 | 0;
  i3 = i1 + 84 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   i1 = i1 + 4 | 0;
   i2 = i2 + 4 | 0;
  } while ((i1 | 0) < (i3 | 0));
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(41341, i2) | 0;
 i3 = -1;
 STACKTOP = i4;
 return i3 | 0;
}

function _SDL_SetSurfaceColorMod(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 if (!i1) {
  i4 = -1;
  return i4 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 HEAP8[i1 + 76 >> 0] = i2;
 HEAP8[i1 + 77 >> 0] = i3;
 HEAP8[i1 + 78 >> 0] = i4;
 i6 = i1 + 68 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 i4 = (i3 & i2) << 24 >> 24 == -1 & i4 << 24 >> 24 == -1 ? i5 & -2 : i5 | 1;
 HEAP32[i6 >> 2] = i4;
 if ((i4 | 0) == (i5 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 _SDL_InvalidateMap(i1);
 i6 = 0;
 return i6 | 0;
}

function _png_do_packswap(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = HEAP8[i2 + 9 >> 0] | 0;
 if ((i3 & 255) >= 8) return;
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 i5 = i1 + i4 | 0;
 switch (i3 << 24 >> 24) {
 case 1:
  {
   i2 = 63329;
   break;
  }
 case 2:
  {
   i2 = 62817;
   break;
  }
 case 4:
  {
   i2 = 63073;
   break;
  }
 default:
  return;
 }
 if ((i4 | 0) <= 0) return;
 do {
  HEAP8[i1 >> 0] = HEAP8[i2 + (HEAPU8[i1 >> 0] | 0) >> 0] | 0;
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i5 >>> 0);
 return;
}

function _SDL_JoystickEventState(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((i1 | 0) == -1) i1 = 0; else {
  _SDL_EventState(1536, i1) | 0;
  _SDL_EventState(1537, i1) | 0;
  _SDL_EventState(1538, i1) | 0;
  _SDL_EventState(1539, i1) | 0;
  _SDL_EventState(1540, i1) | 0;
  _SDL_EventState(1541, i1) | 0;
  _SDL_EventState(1542, i1) | 0;
  i2 = i1;
  return i2 | 0;
 }
 do {
  i2 = _SDL_EventState(HEAP32[18312 + (i1 << 2) >> 2] | 0, -1) | 0;
  i1 = i1 + 1 | 0;
 } while (i2 << 24 >> 24 != 1 & i1 >>> 0 < 7);
 i2 = i2 & 255;
 return i2 | 0;
}

function _png_check_fp_string(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 do if (!(_png_check_fp_number(i2, i3, i4, i1) | 0)) i1 = 0; else {
  i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) if (HEAP8[i2 + i1 >> 0] | 0) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
 } while (0);
 STACKTOP = i5;
 return i1 | 0;
}

function _SDL_GestureAddTouch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = _SDL_realloc(HEAP32[19485] | 0, ((HEAP32[19484] | 0) * 8232 | 0) + 8232 | 0) | 0;
 if (!i3) {
  i3 = _SDL_Error(0) | 0;
  return i3 | 0;
 } else {
  HEAP32[19485] = i3;
  _SDL_memset(i3 + ((HEAP32[19484] | 0) * 8232 | 0) | 0, 0, 8232) | 0;
  i3 = HEAP32[19484] | 0;
  i4 = (HEAP32[19485] | 0) + (i3 * 8232 | 0) | 0;
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i2;
  HEAP32[19484] = i3 + 1;
  i3 = 0;
  return i3 | 0;
 }
 return 0;
}

function _SDL_GetWindowFlags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i4) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i2 + 280 | 0)) {
  i3 = HEAP32[i1 + 48 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(59973, i3) | 0;
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function ___stdout_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32);
 i4 = i5;
 HEAP32[i1 + 36 >> 2] = 1;
 if (!(HEAP32[i1 >> 2] & 64)) {
  HEAP32[i4 >> 2] = HEAP32[i1 + 60 >> 2];
  HEAP32[i4 + 4 >> 2] = 21523;
  HEAP32[i4 + 8 >> 2] = i5 + 16;
  if (___syscall54(54, i4 | 0) | 0) HEAP8[i1 + 75 >> 0] = -1;
 }
 i4 = ___stdio_write(i1, i2, i3) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZN3Map7LoadMapENSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZN4Game7AddTileEiiiiPKc(0, -60, 1469, 684, 39328);
 __ZN4Game7AddTileEiiiiPKc(1469, -60, 1872, 200, 39350);
 __ZN4Game7AddTileEiiiiPKc(1469, 92, 624, 532, 39370);
 __ZN4Game7AddTileEiiiiPKc(2093, 92, 624, 532, 39370);
 __ZN4Game7AddTileEiiiiPKc(2717, 92, 624, 532, 39370);
 __ZN4Game7AddTileEiiiiPKc(0, 624, 2e3, 200, 39393);
 __ZN4Game7AddTileEiiiiPKc(2e3, 624, 1341, 200, 39393);
 return;
}

function _SDL_GetWindowID(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4 + 8 | 0;
 i2 = HEAP32[19487] | 0;
 if (!i2) {
  _SDL_SetError(40203, i4) | 0;
  i3 = 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == (i2 + 280 | 0)) {
  i3 = HEAP32[i1 + 4 >> 2] | 0;
  STACKTOP = i4;
  return i3 | 0;
 }
 _SDL_SetError(59973, i3) | 0;
 i3 = 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _vsscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128);
 i4 = i6;
 i5 = i4;
 i7 = i5 + 124 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP32[i4 + 32 >> 2] = 61;
 HEAP32[i4 + 44 >> 2] = i1;
 HEAP32[i4 + 76 >> 2] = -1;
 HEAP32[i4 + 84 >> 2] = i1;
 i7 = _vfscanf(i4, i2, i3) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function _SDL_QuitInit() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i1 = i2;
 if (_SDL_GetHintBoolean(60304, 0) | 0) {
  STACKTOP = i2;
  return 0;
 }
 _sigaction(2, 0, i1 | 0) | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 333;
  _sigaction(2, i1 | 0, 0) | 0;
 }
 _sigaction(15, 0, i1 | 0) | 0;
 if (!(HEAP32[i1 >> 2] | 0)) {
  HEAP32[i1 >> 2] = 333;
  _sigaction(15, i1 | 0, 0) | 0;
 }
 STACKTOP = i2;
 return 0;
}

function _SDL_DelEventWatch(i4, i5) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0;
 i6 = 0;
 i1 = HEAP32[19776] | 0;
 if (!i1) return; else {
  i2 = 0;
  i3 = i1;
 }
 while (1) {
  if ((HEAP32[i3 >> 2] | 0) == (i4 | 0)) if ((HEAP32[i3 + 4 >> 2] | 0) == (i5 | 0)) break;
  i1 = HEAP32[i3 + 8 >> 2] | 0;
  if (!i1) {
   i6 = 6;
   break;
  } else {
   i2 = i3;
   i3 = i1;
  }
 }
 if ((i6 | 0) == 6) return;
 HEAP32[(i2 | 0 ? i2 + 8 | 0 : 79104) >> 2] = HEAP32[i3 + 8 >> 2];
 _SDL_free(i3);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4); else {
  i1 = HEAP32[i1 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i1, i2, i3, i4);
 }
 return;
}

function __ZN18TransformComponentC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 2780;
 i3 = i1 + 8 | 0;
 __ZN8Vector2dC2Ev(i3);
 i2 = i1 + 16 | 0;
 __ZN8Vector2dC2Ev(i2);
 __ZN8Vector2dC2Ev(i1 + 24 | 0);
 HEAP32[i1 + 32 >> 2] = 32;
 HEAP32[i1 + 36 >> 2] = 32;
 HEAPF32[i1 + 40 >> 2] = Math_fround(1.0);
 HEAPF32[i1 + 44 >> 2] = Math_fround(1.0);
 HEAP32[i1 + 48 >> 2] = 2;
 HEAP8[i1 + 52 >> 0] = 0;
 HEAP8[i1 + 53 >> 0] = 0;
 __ZN8Vector2d4ZeroEv(i3) | 0;
 __ZN8Vector2d4ZeroEv(i2) | 0;
 return;
}

function __GLOBAL__sub_I_Game_cpp() {
 _memset(77460, 0, 396) | 0;
 HEAP32[19465] = 0;
 HEAP32[19466] = 0;
 HEAP32[19467] = 0;
 HEAP32[19468] = __ZN7Manager9addEntityEv(77460) | 0;
 HEAP32[19469] = __ZN7Manager9addEntityEv(77460) | 0;
 HEAP32[19470] = __ZN7Manager9addEntityEv(77460) | 0;
 HEAP32[19471] = __ZN7Manager9addEntityEv(77460) | 0;
 HEAP32[19472] = __ZN7Manager9addEntityEv(77460) | 0;
 HEAP32[19473] = __ZN7Manager9addEntityEv(77460) | 0;
 HEAP32[19474] = __ZN7Manager9addEntityEv(77460) | 0;
 return;
}

function _png_read_filter_row(i3, i4, i5, i6, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i7 = 0;
 i1 = i1 + -1 | 0;
 if (i1 >>> 0 >= 4) return;
 i2 = i3 + 808 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  i7 = (HEAPU8[i3 + 438 >> 0] | 0) + 7 | 0;
  HEAP32[i2 >> 2] = 5;
  HEAP32[i3 + 812 >> 2] = 6;
  HEAP32[i3 + 816 >> 2] = 7;
  HEAP32[i3 + 820 >> 2] = (i7 & 504 | 0) == 8 ? 9 : 8;
 }
 FUNCTION_TABLE_viii[HEAP32[i3 + 808 + (i1 << 2) >> 2] & 63](i4, i5, i6);
 return;
}

function _GLES2_UnlockTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i3;
 i4 = HEAP32[i2 + 68 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = HEAP32[i2 + 12 >> 2];
 HEAP32[i5 + 12 >> 2] = HEAP32[i2 + 16 >> 2];
 _GLES2_UpdateTexture(i1, i2, i5, HEAP32[i4 + 16 >> 2] | 0, HEAP32[i4 + 20 >> 2] | 0) | 0;
 STACKTOP = i3;
 return;
}

function _SDL_FillRects(i3, i4, i5, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!i4) i1 = _SDL_SetError(48018, i7) | 0; else if ((i5 | 0) > 0) {
  i2 = 0;
  i1 = 0;
  do {
   i1 = (_SDL_FillRect(i3, i4 + (i2 << 4) | 0, i6) | 0) + i1 | 0;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i5 | 0));
 } else i1 = 0;
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i2, i3, i4, i5, i6, i7) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i8 = 0;
 i8 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i8 >> 8;
 if (i8 & 1) i1 = HEAP32[(HEAP32[i5 >> 2] | 0) + i1 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 20 >> 2] & 15](i2, i3, i4, i5 + i1 | 0, i8 & 2 | 0 ? i6 : 2, i7);
 return;
}

function _SDL_FreePalette(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if (!i1) {
  HEAP32[i2 >> 2] = 47735;
  _SDL_SetError(59509, i2) | 0;
  STACKTOP = i3;
  return;
 }
 i4 = i1 + 12 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = i2 + -1;
 if ((i2 | 0) > 1) {
  STACKTOP = i3;
  return;
 }
 _SDL_free(HEAP32[i1 + 4 >> 2] | 0);
 _SDL_free(i1);
 STACKTOP = i3;
 return;
}

function _Emscripten_HandleCanvasResize(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i3 + 8 | 0;
 i2 = i3;
 if (!(HEAP32[i4 + 24 >> 2] | 0)) {
  STACKTOP = i3;
  return 0;
 }
 _emscripten_get_element_css_size(0, i1 | 0, i2 | 0) | 0;
 _SDL_SendWindowEvent(HEAP32[i4 + 4 >> 2] | 0, 5, ~~+HEAPF64[i1 >> 3], ~~+HEAPF64[i2 >> 3]) | 0;
 STACKTOP = i3;
 return 0;
}

function _vasprintf(i3, i4, i5) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = i6;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 i1 = _vsnprintf(0, 0, i4, i1) | 0;
 if ((i1 | 0) < 0) i1 = -1; else {
  i1 = i1 + 1 | 0;
  i2 = _malloc(i1) | 0;
  HEAP32[i3 >> 2] = i2;
  if (!i2) i1 = -1; else i1 = _vsnprintf(i2, i1, i4, i5) | 0;
 }
 STACKTOP = i6;
 return i1 | 0;
}

function __ZN17ColliderComponent6updateEv(i1) {
 i1 = i1 | 0;
 var f2 = f0, i3 = 0;
 i3 = HEAP32[i1 + 36 >> 2] | 0;
 HEAP32[i1 + 8 >> 2] = ~~Math_fround(HEAPF32[i3 + 8 >> 2]);
 HEAP32[i1 + 12 >> 2] = ~~Math_fround(HEAPF32[i3 + 12 >> 2]);
 f2 = Math_fround(HEAP32[i3 + 36 >> 2] | 0);
 HEAP32[i1 + 16 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i3 + 40 >> 2]) * f2);
 f2 = Math_fround(HEAP32[i3 + 32 >> 2] | 0);
 HEAP32[i1 + 20 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i3 + 44 >> 2]) * f2);
 return;
}

function _SDL_RenderClear(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == 85556) {
  if (HEAP32[i1 + 192 >> 2] | 0) {
   i2 = 0;
   STACKTOP = i3;
   return i2 | 0;
  }
  i2 = FUNCTION_TABLE_ii[HEAP32[i1 + 56 >> 2] & 255](i1) | 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 _SDL_SetError(41341, i2) | 0;
 i2 = -1;
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 8 + 3 >> 0] = 1;
 __ZNSt3__211char_traitsIwE6assignEPwjw(i2, 1, 45) | 0;
 HEAP32[i3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i2 + 4 | 0, i3);
 STACKTOP = i1;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 8 + 3 >> 0] = 1;
 __ZNSt3__211char_traitsIwE6assignEPwjw(i2, 1, 45) | 0;
 HEAP32[i3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw(i2 + 4 | 0, i3);
 STACKTOP = i1;
 return;
}

function _store_int(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 L1 : do if (i1 | 0) switch (i2 | 0) {
 case -2:
  {
   HEAP8[i1 >> 0] = i3;
   break L1;
  }
 case -1:
  {
   HEAP16[i1 >> 1] = i3;
   break L1;
  }
 case 0:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
  }
 case 1:
  {
   HEAP32[i1 >> 2] = i3;
   break L1;
  }
 case 3:
  {
   i2 = i1;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i2 + 4 >> 2] = i4;
   break L1;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 11 >> 0] = 1;
 __ZNSt3__211char_traitsIcE6assignEPcjc(i2, 1, 45) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + 1 | 0, i3);
 STACKTOP = i1;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i1;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 11 >> 0] = 1;
 __ZNSt3__211char_traitsIcE6assignEPcjc(i2, 1, 45) | 0;
 HEAP8[i3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc(i2 + 1 | 0, i3);
 STACKTOP = i1;
 return;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2 | 0) {
  i3 = i1 + 4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  while (1) {
   if ((i4 | 0) == (i2 | 0)) break;
   i5 = i4 + -4 | 0;
   HEAP32[i3 >> 2] = i5;
   i4 = i5;
  }
  if ((i2 | 0) == (i1 + 16 | 0)) {
   HEAP8[i1 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function _SDL_GameControllerGetAxisFromString(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = -1; else if (!(HEAP8[i1 >> 0] | 0)) i1 = -1; else if (!(_SDL_strcasecmp(i1, 58712) | 0)) i1 = 0; else if (!(_SDL_strcasecmp(i1, 58718) | 0)) i1 = 1; else if (!(_SDL_strcasecmp(i1, 58724) | 0)) i1 = 2; else if (!(_SDL_strcasecmp(i1, 58731) | 0)) i1 = 3; else if (!(_SDL_strcasecmp(i1, 58738) | 0)) i1 = 4; else {
  i1 = (_SDL_strcasecmp(i1, 58750) | 0) == 0;
  return (i1 ? 5 : -1) | 0;
 }
 return i1 | 0;
}

function _SDL_GetHint(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0;
 i4 = 0;
 i1 = _SDL_getenv(i3) | 0;
 i2 = HEAP32[19490] | 0;
 if (!i2) {
  i4 = i1;
  return i4 | 0;
 }
 while (1) {
  if (!(_SDL_strcmp(i3, HEAP32[i2 >> 2] | 0) | 0)) break;
  i2 = HEAP32[i2 + 16 >> 2] | 0;
  if (!i2) {
   i4 = 7;
   break;
  }
 }
 if ((i4 | 0) == 7) return i1 | 0;
 if (i1 | 0) if ((HEAP32[i2 + 8 >> 2] | 0) != 2) {
  i4 = i1;
  return i4 | 0;
 }
 i4 = HEAP32[i2 + 4 >> 2] | 0;
 return i4 | 0;
}

function _png_calculate_crc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = HEAP32[i1 + 212 >> 2] | 0;
 if (!(i3 | 0 ? ((HEAP32[i1 + 376 >> 2] & 536870912 | 0) == 0 ? (i5 & 2048 | 0) == 0 : (i5 & 768 | 0) != 768) : 0)) return;
 i5 = i1 + 412 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 while (1) {
  i1 = (i3 | 0) == 0 ? -1 : i3;
  i4 = _crc32(i4, i2, i1) | 0;
  i3 = i3 - i1 | 0;
  if (!i3) break; else i2 = i2 + i1 | 0;
 }
 HEAP32[i5 >> 2] = i4;
 return;
}

function _SDL_PollEvent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = 0;
 i2 = _SDL_GetVideoDevice() | 0;
 if (i2 | 0) FUNCTION_TABLE_vi[HEAP32[i2 + 204 >> 2] & 511](i2);
 if (!(HEAP32[19526] | 0)) i3 = 5; else if (_SDL_JoystickEventState(-1) | 0) i3 = 5;
 if ((i3 | 0) == 5) _SDL_JoystickUpdate();
 _SDL_SendPendingQuit();
 switch (_SDL_PeepEvents(i1, 1, 2, 0, 65535) | 0) {
 case 0:
 case -1:
  break;
 default:
  {
   i3 = 1;
   return i3 | 0;
  }
 }
 i3 = 0;
 return i3 | 0;
}

function _png_malloc_array(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((i1 | 0) < 1 | (i2 | 0) == 0) _png_error(i3, 62576);
 if ((4294967295 / (i2 >>> 0) | 0) >>> 0 < i1 >>> 0) {
  i3 = 0;
  return i3 | 0;
 }
 i2 = Math_imul(i2, i1) | 0;
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 if (i3 | 0) {
  i1 = HEAP32[i3 + 720 >> 2] | 0;
  if (i1 | 0) {
   i3 = FUNCTION_TABLE_iii[i1 & 63](i3, i2) | 0;
   return i3 | 0;
  }
 }
 i3 = _malloc(i2) | 0;
 return i3 | 0;
}

function _SDL_QuitQuit() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144);
 i1 = i2;
 _sigaction(2, 0, i1 | 0) | 0;
 if ((HEAP32[i1 >> 2] | 0) == 333) {
  HEAP32[i1 >> 2] = 0;
  _sigaction(2, i1 | 0, 0) | 0;
 }
 _sigaction(15, 0, i1 | 0) | 0;
 if ((HEAP32[i1 >> 2] | 0) != 333) {
  STACKTOP = i2;
  return;
 }
 HEAP32[i1 >> 2] = 0;
 _sigaction(15, i1 | 0, 0) | 0;
 STACKTOP = i2;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i2, i3, i4, i5, i6) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0;
 i7 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i7 >> 8;
 if (i7 & 1) i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + i1 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 7](i2, i3, i4 + i1 | 0, i7 & 2 | 0 ? i5 : 2, i6);
 return;
}

function _SDL_JoystickNameForIndex(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if ((i1 | 0) >= 0) if ((_SDL_SYS_NumJoysticks() | 0) > (i1 | 0)) {
  i2 = _SDL_SYS_JoystickNameForDeviceIndex(i1) | 0;
  STACKTOP = i3;
  return i2 | 0;
 }
 HEAP32[i2 >> 2] = _SDL_SYS_NumJoysticks() | 0;
 _SDL_SetError(58288, i2) | 0;
 i2 = 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _SDL_SYS_JoystickQuit() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[20463] | 0;
 if (i1 | 0) do {
  i2 = i1;
  i1 = HEAP32[i1 + 1320 >> 2] | 0;
  _SDL_free(HEAP32[i2 + 8 >> 2] | 0);
  _SDL_free(HEAP32[i2 + 4 >> 2] | 0);
  _SDL_free(i2);
 } while ((i1 | 0) != 0);
 HEAP32[20466] = 0;
 HEAP32[20463] = 0;
 HEAP32[20464] = 0;
 HEAP32[20467] = 0;
 _emscripten_set_gamepadconnected_callback(0, 0, 0) | 0;
 _emscripten_set_gamepaddisconnected_callback(0, 0, 0) | 0;
 return;
}

function _Emscripten_GLES_GetDrawableSize(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var f5 = f0;
 i1 = HEAP32[i2 + 144 >> 2] | 0;
 if (!i1) return;
 if (i3 | 0) {
  f5 = Math_fround(HEAP32[i2 + 24 >> 2] | 0);
  HEAP32[i3 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i1 + 12 >> 2]) * f5);
 }
 if (!i4) return;
 f5 = Math_fround(HEAP32[i2 + 28 >> 2] | 0);
 HEAP32[i4 >> 2] = ~~Math_fround(Math_fround(HEAPF32[i1 + 12 >> 2]) * f5);
 return;
}

function _stdio_size(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = i1 + 4 | 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 31](i1, 0, 0, 1) | 0;
 i4 = tempRet0;
 if ((i4 | 0) < 0) {
  i3 = -1;
  i4 = -1;
  tempRet0 = i3;
  return i4 | 0;
 }
 i5 = FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 31](i1, 0, 0, 2) | 0;
 i6 = tempRet0;
 FUNCTION_TABLE_iiiii[HEAP32[i2 >> 2] & 31](i1, i3, i4, 0) | 0;
 i3 = i6;
 i4 = i5;
 tempRet0 = i3;
 return i4 | 0;
}

function ___towrite(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = i1 + 74 | 0;
 i3 = HEAP8[i2 >> 0] | 0;
 HEAP8[i2 >> 0] = i3 + 255 | i3;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 8)) {
  HEAP32[i1 + 8 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  i3 = HEAP32[i1 + 44 >> 2] | 0;
  HEAP32[i1 + 28 >> 2] = i3;
  HEAP32[i1 + 20 >> 2] = i3;
  HEAP32[i1 + 16 >> 2] = i3 + (HEAP32[i1 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i1 >> 2] = i2 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 8 | 0;
 i2 = ___uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i3 = _mbtowc(0, 0, 4) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 if (!i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = 1; else {
   i2 = ___uselocale(i1) | 0;
   i1 = ___ctype_get_mb_cur_max() | 0;
   if (i2 | 0) ___uselocale(i2) | 0;
   return (i1 | 0) == 1 | 0;
  }
 } else i1 = -1;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0;
 if ((i2 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) i1 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 4;
  i1 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[i1 >> 2] | 0) | 0;
 }
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 255](i1) | 0;
 if ((i2 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) i1 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 1;
  i1 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[i1 >> 0] | 0) | 0;
 }
 return i1 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i2, i3, i4, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = i6 >> 8;
 if (i6 & 1) i1 = HEAP32[(HEAP32[i4 >> 2] | 0) + i1 >> 2] | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i2, i3, i4 + i1 | 0, i6 & 2 | 0 ? i5 : 2);
 return;
}

function _png_do_swap(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 if ((HEAP8[i1 + 9 >> 0] | 0) != 16) return;
 i4 = Math_imul(HEAP32[i1 >> 2] | 0, HEAPU8[i1 + 10 >> 0] | 0) | 0;
 if (!i4) return; else {
  i2 = 0;
  i1 = i3;
 }
 while (1) {
  i5 = HEAP8[i1 >> 0] | 0;
  i3 = i1 + 1 | 0;
  HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
  HEAP8[i3 >> 0] = i5;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 2 | 0;
 }
 return;
}

function _png_set_bKGD(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0) return;
 i1 = i2 + 170 | 0;
 HEAP16[i1 >> 1] = HEAP16[i3 >> 1] | 0;
 HEAP16[i1 + 2 >> 1] = HEAP16[i3 + 2 >> 1] | 0;
 HEAP16[i1 + 4 >> 1] = HEAP16[i3 + 4 >> 1] | 0;
 HEAP16[i1 + 6 >> 1] = HEAP16[i3 + 6 >> 1] | 0;
 HEAP16[i1 + 8 >> 1] = HEAP16[i3 + 8 >> 1] | 0;
 i3 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 32;
 return;
}

function _png_destroy_png_struct(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 912 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(912);
 i2 = i4;
 if (!i1) {
  STACKTOP = i4;
  return;
 }
 _memcpy(i2 | 0, i1 | 0, 900) | 0;
 _memset(i1 | 0, 0, 900) | 0;
 i3 = HEAP32[i2 + 724 >> 2] | 0;
 if (!i3) _free(i1); else FUNCTION_TABLE_vii[i3 & 127](i2, i1);
 _png_free_jmpbuf(i2);
 STACKTOP = i4;
 return;
}

function __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz(i3, i4, i1, i5, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i7 = i6;
 HEAP32[i7 >> 2] = i2;
 i2 = ___uselocale(i1) | 0;
 i1 = _vsnprintf(i3, i4, i5, i7) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function _png_set_sBIT(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0 | (i3 | 0) == 0) return;
 i1 = i2 + 148 | 0;
 HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
 HEAP8[i1 + 1 >> 0] = HEAP8[i3 + 1 >> 0] | 0;
 HEAP8[i1 + 2 >> 0] = HEAP8[i3 + 2 >> 0] | 0;
 HEAP8[i1 + 3 >> 0] = HEAP8[i3 + 3 >> 0] | 0;
 HEAP8[i1 + 4 >> 0] = HEAP8[i3 + 4 >> 0] | 0;
 i3 = i2 + 8 | 0;
 HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 2;
 return;
}

function _SDL_RenderPresent(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if (i1 | 0) if ((HEAP32[i1 >> 2] | 0) == 85556) {
  if (HEAP32[i1 + 192 >> 2] | 0) {
   STACKTOP = i3;
   return;
  }
  FUNCTION_TABLE_vi[HEAP32[i1 + 84 >> 2] & 511](i1);
  STACKTOP = i3;
  return;
 }
 _SDL_SetError(41341, i2) | 0;
 STACKTOP = i3;
 return;
}

function _png_read_filter_row_sub(i2, i4, i1) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i5 = 0;
 i5 = HEAP32[i2 + 4 >> 2] | 0;
 i1 = ((HEAPU8[i2 + 11 >> 0] | 0) + 7 | 0) >>> 3;
 if (i1 >>> 0 >= i5 >>> 0) return;
 i3 = 0 - i1 | 0;
 i2 = i1;
 i1 = i4 + i1 | 0;
 while (1) {
  HEAP8[i1 >> 0] = (HEAPU8[i1 + i3 >> 0] | 0) + (HEAPU8[i1 >> 0] | 0);
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return;
}

function _arg_n(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i4;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 while (1) {
  i5 = (HEAP32[i3 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i3 >> 2] = i5 + 4;
  if (i1 >>> 0 > 1) i1 = i1 + -1 | 0; else break;
 }
 STACKTOP = i4;
 return i2 | 0;
}

function ___string_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i1 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i2 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i1 + 4 >> 2] = i6 + i3;
 i2 = i6 + i5 | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i4 >> 2] = i2;
 return i3 | 0;
}

function ___fmodeflags(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = (_strchr(i1, 43) | 0) == 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i2 = i2 << 24 >> 24 | 0;
 i3 = i3 ? (i2 | 0) != 114 & 1 : 2;
 i4 = (_strchr(i1, 120) | 0) == 0;
 i3 = i4 ? i3 : i3 | 128;
 i1 = (_strchr(i1, 101) | 0) == 0;
 i1 = i1 ? i3 : i3 | 524288;
 i1 = (i2 | 0) == 114 ? i1 : i1 | 64;
 i1 = (i2 | 0) == 119 ? i1 | 512 : i1;
 return ((i2 | 0) == 97 ? i1 | 1024 : i1) | 0;
}

function __ZNSt3__28ios_base4initEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP32[i2 + 16 >> 2] = (i1 | 0) == 0 & 1;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 4098;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 6;
 i3 = i2 + 28 | 0;
 i1 = i2 + 32 | 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 __ZNSt3__26localeC2Ev(i3);
 return;
}

function _SDL_GetSurfaceColorMod(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i1) {
  i4 = -1;
  return i4 | 0;
 }
 if (i2 | 0) HEAP8[i2 >> 0] = HEAP8[(HEAP32[i1 + 52 >> 2] | 0) + 76 >> 0] | 0;
 if (i3 | 0) HEAP8[i3 >> 0] = HEAP8[(HEAP32[i1 + 52 >> 2] | 0) + 77 >> 0] | 0;
 if (!i4) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP8[i4 >> 0] = HEAP8[(HEAP32[i1 + 52 >> 2] | 0) + 78 >> 0] | 0;
 i4 = 0;
 return i4 | 0;
}

function ___sin(d1, d2, i5) {
 d1 = +d1;
 d2 = +d2;
 i5 = i5 | 0;
 var d3 = 0.0, d4 = 0.0, d6 = 0.0;
 d6 = d1 * d1;
 d3 = d6 * (d6 * d6) * (d6 * 1.58969099521155e-10 + -2.5050760253406863e-08) + (d6 * (d6 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
 d4 = d6 * d1;
 if (!i5) d1 = d4 * (d6 * d3 + -.16666666666666632) + d1; else d1 = d1 - (d4 * .16666666666666632 + (d6 * (d2 * .5 - d4 * d3) - d2));
 return +d1;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP8[i1 + 128 >> 0] = 0;
 if (i2 | 0) {
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i1, i2);
  __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2);
 }
 return;
}

function _strcmp(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 i4 = HEAP8[i3 >> 0] | 0;
 if (i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24) i2 = i4; else {
  do {
   i2 = i2 + 1 | 0;
   i3 = i3 + 1 | 0;
   i1 = HEAP8[i2 >> 0] | 0;
   i4 = HEAP8[i3 >> 0] | 0;
  } while (!(i1 << 24 >> 24 == 0 ? 1 : i1 << 24 >> 24 != i4 << 24 >> 24));
  i2 = i4;
 }
 return (i1 & 255) - (i2 & 255) | 0;
}

function _png_muldiv(i5, i2, i3, i4) {
 i5 = i5 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d1 = 0.0;
 if (!i4) {
  i5 = 0;
  return i5 | 0;
 }
 if ((i2 | 0) == 0 | (i3 | 0) == 0) {
  HEAP32[i5 >> 2] = 0;
  i5 = 1;
  return i5 | 0;
 }
 d1 = +Math_floor(+(+(i2 | 0) * +(i3 | 0) / +(i4 | 0) + .5));
 if (!(d1 <= 2147483647.0 & d1 >= -2147483648.0)) {
  i5 = 0;
  return i5 | 0;
 }
 HEAP32[i5 >> 2] = ~~d1;
 i5 = 1;
 return i5 | 0;
}

function _SDL_SetDefaultCursor(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[19515] = i1;
 if (HEAP32[19516] | 0) return;
 if (!i1) i1 = 0; else HEAP32[19516] = i1;
 i3 = HEAP32[19493] | 0;
 i2 = (i3 | 0) == 0;
 if ((i1 | 0) != 0 & (HEAP32[19517] | 0) != 0 & (HEAP32[19510] | 0) == 0) {
  if (i2) return;
  FUNCTION_TABLE_ii[i3 & 255](i1) | 0;
  return;
 } else {
  if (i2) return;
  FUNCTION_TABLE_ii[i3 & 255](0) | 0;
  return;
 }
}

function _wmemmove(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i4 - i2 >> 2 >>> 0 < i1 >>> 0) do {
  i1 = i1 + -1 | 0;
  HEAP32[i4 + (i1 << 2) >> 2] = HEAP32[i2 + (i1 << 2) >> 2];
 } while ((i1 | 0) != 0); else if (i1 | 0) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function _memcmp(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (!i2) i1 = 0; else {
  while (1) {
   i4 = HEAP8[i1 >> 0] | 0;
   i5 = HEAP8[i3 >> 0] | 0;
   if (i4 << 24 >> 24 != i5 << 24 >> 24) break;
   i2 = i2 + -1 | 0;
   if (!i2) {
    i1 = 0;
    break L1;
   } else {
    i1 = i1 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
  }
  i1 = (i4 & 255) - (i5 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = ___uselocale(i1) | 0;
 i1 = _vasprintf(i3, i4, i6) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _sbrk(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 i2 = i3 + i1 | 0;
 if ((i1 | 0) > 0 & (i2 | 0) < (i3 | 0) | (i2 | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = i2;
 if ((i2 | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = i3;
  ___setErrNo(12);
  return -1;
 }
 return i3 | 0;
}

function _SDL_FreeBlitMap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i4 = i2 + 56 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i3 + -1;
  if ((i3 | 0) < 2) _SDL_FreeSurface(i2);
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 84 >> 2] = 0;
 HEAP32[i1 + 80 >> 2] = 0;
 i4 = i1 + 64 | 0;
 _SDL_free(HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 _SDL_free(i1);
 return;
}

function _png_error(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (i3 | 0) {
  i2 = HEAP32[i3 + 168 >> 2] | 0;
  if (i2 | 0) FUNCTION_TABLE_vii[i2 & 127](i3, i4);
 }
 i2 = HEAP32[6836] | 0;
 HEAP32[i1 >> 2] = i4 | 0 ? i4 : 60500;
 _fprintf(i2, 60510, i1) | 0;
 _fputc(10, i2) | 0;
 _png_longjmp(i3, 1);
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = ___uselocale(i1) | 0;
 i1 = _vsscanf(i3, i4, i6) | 0;
 if (i2 | 0) ___uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _fwrite(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 i5 = Math_imul(i1, i4) | 0;
 i1 = (i4 | 0) == 0 ? 0 : i1;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i5, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i5, i3) | 0;
 if ((i2 | 0) != (i5 | 0)) i1 = (i2 >>> 0) / (i4 >>> 0) | 0;
 return i1 | 0;
}

function ___cxa_can_catch(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i5;
 HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 63](i1, i2, i4) | 0;
 if (i1) HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 STACKTOP = i5;
 return i1 & 1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, i6) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i2, i3, i4, i5);
 return;
}

function _SW_LockTexture(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i6 = 0;
 i1 = HEAP32[i2 + 68 >> 2] | 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i6 = (HEAP32[i1 + 20 >> 2] | 0) + (Math_imul(i2, HEAP32[i3 + 4 >> 2] | 0) | 0) | 0;
 HEAP32[i4 >> 2] = i6 + (Math_imul(HEAP32[i3 >> 2] | 0, HEAPU8[(HEAP32[i1 + 4 >> 2] | 0) + 9 >> 0] | 0) | 0);
 HEAP32[i5 >> 2] = i2;
 return 0;
}

function _Emscripten_HandleFullscreenChange(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i2 >> 2] | 0)) {
  i3 = (HEAP32[i3 + 4 >> 2] | 0) + 48 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -4098;
  return 0;
 } else {
  i1 = i3 + 20 | 0;
  i3 = (HEAP32[i3 + 4 >> 2] | 0) + 48 | 0;
  i2 = HEAP32[i3 >> 2] | HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = 0;
  HEAP32[i3 >> 2] = i2 | 1;
  return 0;
 }
 return 0;
}

function _SDL_GetWindowFromID(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 272 >> 2] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 while (1) {
  if ((HEAP32[i1 + 4 >> 2] | 0) == (i2 | 0)) {
   i2 = 5;
   break;
  }
  i1 = HEAP32[i1 + 152 >> 2] | 0;
  if (!i1) {
   i1 = 0;
   i2 = 5;
   break;
  }
 }
 if ((i2 | 0) == 5) return i1 | 0;
 return 0;
}

function _DUMMY_CreateDevice(i1) {
 i1 = i1 | 0;
 i1 = _SDL_calloc(1, 688) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i1 = 0;
  return i1 | 0;
 } else {
  HEAP32[i1 + 4 >> 2] = 118;
  HEAP32[i1 + 8 >> 2] = 326;
  HEAP32[i1 + 28 >> 2] = 53;
  HEAP32[i1 + 204 >> 2] = 327;
  HEAP32[i1 + 132 >> 2] = 37;
  HEAP32[i1 + 136 >> 2] = 21;
  HEAP32[i1 + 140 >> 2] = 55;
  HEAP32[i1 + 684 >> 2] = 328;
  return i1 | 0;
 }
 return 0;
}

function ___ftello_unlocked(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!(HEAP32[i2 >> 2] & 128)) i1 = 1; else i1 = (HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 i1 = FUNCTION_TABLE_iiii[HEAP32[i2 + 40 >> 2] & 63](i2, 0, i1) | 0;
 if ((i1 | 0) >= 0) i1 = i1 - (HEAP32[i2 + 8 >> 2] | 0) + (HEAP32[i2 + 4 >> 2] | 0) + (HEAP32[i2 + 20 >> 2] | 0) - (HEAP32[i2 + 28 >> 2] | 0) | 0;
 return i1 | 0;
}

function _SDL_SetSurfaceAlphaMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 HEAP8[i1 + 79 >> 0] = i2;
 i4 = i1 + 68 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i2 = i2 << 24 >> 24 != -1 ? i3 | 2 : i3 & -3;
 HEAP32[i4 >> 2] = i2;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 _SDL_InvalidateMap(i1);
 i4 = 0;
 return i4 | 0;
}

function _SDL_InvalidateMap(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i1) return;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 | 0) {
  i4 = i2 + 56 | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = i3 + -1;
  if ((i3 | 0) < 2) _SDL_FreeSurface(i2);
 }
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 84 >> 2] = 0;
 HEAP32[i1 + 80 >> 2] = 0;
 i4 = i1 + 64 | 0;
 _SDL_free(HEAP32[i4 >> 2] | 0);
 HEAP32[i4 >> 2] = 0;
 return;
}

function _SDL_PushEvent(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i2 + 4 >> 2] = _SDL_GetTicks() | 0;
 i1 = HEAP32[19776] | 0;
 if (i1 | 0) do {
  FUNCTION_TABLE_iii[HEAP32[i1 >> 2] & 63](HEAP32[i1 + 4 >> 2] | 0, i2) | 0;
  i1 = HEAP32[i1 + 8 >> 2] | 0;
 } while ((i1 | 0) != 0);
 if ((_SDL_PeepEvents(i2, 1, 0, 0, 0) | 0) < 1) {
  i2 = -1;
  return i2 | 0;
 }
 _SDL_GestureProcessEvent(i2);
 i2 = 1;
 return i2 | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt(i2, i1, i4, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  if ((HEAP32[i1 >> 2] | 0) >>> 0 < 128) {
   i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   i2 = HEAPU16[i2 + (HEAP32[i1 >> 2] << 1) >> 1] | 0;
  } else i2 = 0;
  HEAP16[i3 >> 1] = i2;
  i3 = i3 + 2 | 0;
  i1 = i1 + 4 | 0;
 }
 return i4 | 0;
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = i2 + 32 | 0;
 i5 = i2 + 36 | 0;
 i1 = HEAP32[i2 + 40 >> 2] | 0;
 while (1) {
  if (!i1) break;
  i6 = i1 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i4 >> 2] | 0) + (i6 << 2) >> 2] & 63](i3, i2, HEAP32[(HEAP32[i5 >> 2] | 0) + (i6 << 2) >> 2] | 0);
  i1 = i6;
 }
 return;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) {
   i1 = i4;
   break;
  }
  if ((HEAP32[i1 >> 2] | 0) >>> 0 >= 128) break;
  i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[i2 + (HEAP32[i1 >> 2] << 1) >> 1] & i3) << 16 >> 16)) break;
  i1 = i1 + 4 | 0;
 }
 return i1 | 0;
}

function _SDL_GetSurfaceBlendMode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 switch (HEAP32[(HEAP32[i1 + 52 >> 2] | 0) + 68 >> 2] & 112) {
 case 16:
  {
   i1 = 1;
   break;
  }
 case 32:
  {
   i1 = 2;
   break;
  }
 case 64:
  {
   i1 = 4;
   break;
  }
 default:
  i1 = 0;
 }
 HEAP32[i2 >> 2] = i1;
 i2 = 0;
 return i2 | 0;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc(i1, i4, i5, i6, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i7 = 0;
 i3 = (i5 - i4 | 0) >>> 2;
 i1 = i2;
 i2 = i4;
 while (1) {
  if ((i2 | 0) == (i5 | 0)) break;
  i7 = HEAP32[i2 >> 2] | 0;
  HEAP8[i1 >> 0] = i7 >>> 0 < 128 ? i7 & 255 : i6;
  i1 = i1 + 1 | 0;
  i2 = i2 + 4 | 0;
 }
 return i4 + (i3 << 2) | 0;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_(i2, i3, i1, i4) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) {
   i1 = i4;
   break;
  }
  if ((HEAP32[i1 >> 2] | 0) >>> 0 < 128) {
   i2 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   if ((HEAP16[i2 + (HEAP32[i1 >> 2] << 1) >> 1] & i3) << 16 >> 16) break;
  }
  i1 = i1 + 4 | 0;
 }
 return i1 | 0;
}

function _SDL_WasInit(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = (i1 | 0) == 0 ? 29233 : i1;
 i1 = Math_clz32(i2 | 0) | 0;
 if (i1 >>> 0 > 31) {
  i4 = 0;
  return i4 | 0;
 }
 i4 = 32 - i1 | 0;
 i3 = 0;
 i1 = 0;
 while (1) {
  if (i2 & 1) i1 = ((HEAP8[87606 + i3 >> 0] | 0) == 0 ? 0 : 1 << i3) | i1;
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i4 | 0)) break; else i2 = i2 >>> 1;
 }
 return i1 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i2 >> 0] = 0;
 HEAP32[i2 + 4 >> 2] = i1;
 i1 = i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[i1 + 16 >> 2] | 0)) {
  i1 = HEAP32[i1 + 72 >> 2] | 0;
  if (i1 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  HEAP8[i2 >> 0] = 1;
 }
 return;
}

function _SDL_WarpMouseInWindow(i1, i3, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? HEAP32[19502] | 0 : i1;
 if (!i2) return;
 i1 = HEAP32[19496] | 0;
 if (i1 | 0) {
  FUNCTION_TABLE_viii[i1 & 63](i2, i3, i4);
  return;
 }
 i1 = HEAP32[19501] | 0;
 if (!(_SDL_UpdateMouseFocus(i2, i3, i4) | 0)) return;
 _SDL_PrivateSendMouseMotion(i2, i1, 0, i3, i4) | 0;
 return;
}

function _SDL_PrivateJoystickRemoved(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i2 = i3;
 HEAP32[i2 >> 2] = 1542;
 if ((_SDL_EventState(1542, -1) | 0) << 24 >> 24 == 1) {
  HEAP32[i2 + 8 >> 2] = i1;
  _SDL_PushEvent(i2) | 0;
 }
 _UpdateEventsForDeviceRemoval_352();
 STACKTOP = i3;
 return;
}

function _png_chunk_benign_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i3 = i4;
 if (!(HEAP32[i1 + 212 >> 2] & 1048576)) _png_chunk_error(i1, i2); else {
  _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i3, i2);
  _png_warning(i1, i3);
  STACKTOP = i4;
  return;
 }
}

function _SDL_TouchQuit() {
 var i1 = 0, i2 = 0;
 i2 = HEAP32[20425] | 0;
 i1 = HEAP32[20426] | 0;
 if (!i2) {
  i2 = i1;
  _SDL_free(i2);
  HEAP32[20426] = 0;
  return;
 }
 do {
  i2 = i2 + -1 | 0;
  i1 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
  _SDL_DelTouch(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
  i1 = HEAP32[20426] | 0;
 } while ((i2 | 0) != 0);
 _SDL_free(i1);
 HEAP32[20426] = 0;
 return;
}

function _twobyte_strstr(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i5 = (HEAPU8[i1 >> 0] | 0) << 8 | (HEAPU8[i1 + 1 >> 0] | 0);
 i4 = HEAPU8[i2 >> 0] | 0;
 while (1) {
  i1 = i2 + 1 | 0;
  i3 = HEAP8[i1 >> 0] | 0;
  if (!(i3 << 24 >> 24)) break;
  i4 = i4 << 8 & 65280 | i3 & 255;
  if ((i4 | 0) == (i5 | 0)) break; else i2 = i1;
 }
 return (i3 << 24 >> 24 ? i2 : 0) | 0;
}

function __ZNSt3__218__libcpp_refstringC2EPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = _strlen(i2) | 0;
 i3 = __Znwj(i4 + 13 | 0) | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = 0;
 i3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE(i3) | 0;
 _memcpy(i3 | 0, i2 | 0, i4 + 1 | 0) | 0;
 HEAP32[i1 >> 2] = i3;
 return;
}

function __ZNSt3__28numpunctIwEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 34552;
 HEAP32[i1 + 8 >> 2] = 46;
 HEAP32[i1 + 12 >> 2] = 44;
 i2 = i1 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function _SDL_HasAltiVec() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i1 = HEAP32[1440] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1440] = 0;
  HEAP32[i2 >> 2] = 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = 0; else {
   HEAP32[1440] = 2;
   i1 = 2;
  }
 }
 STACKTOP = i3;
 return i1 >>> 1 & 1 | 0;
}

function _png_chunk_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 i3 = i4;
 if (!i1) {
  _png_warning(0, i2);
  STACKTOP = i4;
  return;
 } else {
  _png_format_buffer(HEAP32[i1 + 376 >> 2] | 0, i3, i2);
  _png_warning(i1, i3);
  STACKTOP = i4;
  return;
 }
}

function __ZNSt3__28numpunctIcEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 34512;
 HEAP8[i1 + 8 >> 0] = 46;
 HEAP8[i1 + 9 >> 0] = 44;
 i2 = i1 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function _SDL_Has3DNow() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i1 = HEAP32[1440] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1440] = 0;
  HEAP32[i2 >> 2] = 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = 0; else {
   HEAP32[1440] = 2;
   i1 = 2;
  }
 }
 STACKTOP = i3;
 return i1 >>> 3 & 1 | 0;
}

function _SDL_GL_GetCurrentContext() {
 var i1 = 0, i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  _SDL_SetError(40203, i2) | 0;
  i1 = 0;
  STACKTOP = i2;
  return i1 | 0;
 } else {
  i1 = _SDL_TLSGet(HEAP32[i1 + 664 >> 2] | 0) | 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 return 0;
}

function _SDL_HasSSE2() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i1 = HEAP32[1440] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1440] = 0;
  HEAP32[i2 >> 2] = 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = 0; else {
   HEAP32[1440] = 2;
   i1 = 2;
  }
 }
 STACKTOP = i3;
 return i1 >>> 5 & 1 | 0;
}

function ___cos(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0;
 d3 = d1 * d1;
 d4 = d3 * d3;
 d5 = d3 * .5;
 d6 = 1.0 - d5;
 return +(d6 + (1.0 - d6 - d5 + (d3 * (d3 * (d3 * (d3 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + d4 * d4 * (d3 * (2.087572321298175e-09 - d3 * 1.1359647557788195e-11) + -2.7557314351390663e-07)) - d1 * d2)));
}

function _SDL_HasSSE() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i1 = HEAP32[1440] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1440] = 0;
  HEAP32[i2 >> 2] = 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = 0; else {
   HEAP32[1440] = 2;
   i1 = 2;
  }
 }
 STACKTOP = i3;
 return i1 >>> 4 & 1 | 0;
}

function _SDL_HasMMX() {
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 i1 = HEAP32[1440] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[1440] = 0;
  HEAP32[i2 >> 2] = 0;
  if (!(HEAP32[i2 >> 2] | 0)) i1 = 0; else {
   HEAP32[1440] = 2;
   i1 = 2;
  }
 }
 STACKTOP = i3;
 return i1 >>> 2 & 1 | 0;
}

function _SDL_EGL_GetSwapInterval(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i1 = HEAP32[i1 + 676 >> 2] | 0;
 if (!i1) {
  _SDL_SetError(48604, i2) | 0;
  i1 = 0;
  STACKTOP = i2;
  return i1 | 0;
 } else {
  i1 = HEAP32[i1 + 16 >> 2] | 0;
  STACKTOP = i2;
  return i1 | 0;
 }
 return 0;
}

function _SDL_LogOutput(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i1;
 i5 = HEAP32[6836] | 0;
 HEAP32[i2 >> 2] = HEAP32[15104 + (i3 << 2) >> 2];
 HEAP32[i2 + 4 >> 2] = i4;
 _fprintf(i5, 46412, i2) | 0;
 STACKTOP = i1;
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24 > -1) {
   i1 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP8[i2 >> 0] << 2) >> 2] & 255;
  }
  HEAP8[i2 >> 0] = i1;
  i2 = i2 + 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP8[i2 >> 0] | 0;
  if (i1 << 24 >> 24 > -1) {
   i1 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP8[i2 >> 0] << 2) >> 2] & 255;
  }
  HEAP8[i2 >> 0] = i1;
  i2 = i2 + 1 | 0;
 }
 return i3 | 0;
}

function dynCall_viiiiiiiiiii(i12, i1, i4, i5, i6, i7, i8, i9, i10, i11, i2, i3) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viiiiiiiiiii[i12 & 7](i1 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0, i10 | 0, i11 | 0, i2 | 0, i3 | 0);
}

function _shl(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = i4 + 4 | 0;
 if (i1 >>> 0 > 31) {
  i3 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = i3;
  HEAP32[i4 >> 2] = 0;
  i1 = i1 + -32 | 0;
  i2 = 0;
 } else {
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i5 >> 2] | 0;
 }
 HEAP32[i5 >> 2] = i2 >>> (32 - i1 | 0) | i3 << i1;
 HEAP32[i4 >> 2] = i2 << i1;
 return;
}

function _png_read_filter_row_up(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = HEAP32[i1 + 4 >> 2] | 0;
 if (!i5) return; else {
  i3 = 0;
  i1 = i4;
 }
 while (1) {
  HEAP8[i2 >> 0] = (HEAPU8[i1 >> 0] | 0) + (HEAPU8[i2 >> 0] | 0);
  i3 = i3 + 1 | 0;
  if ((i3 | 0) == (i5 | 0)) break; else {
   i2 = i2 + 1 | 0;
   i1 = i1 + 1 | 0;
  }
 }
 return;
}

function _SDL_PrivateJoystickAdded(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64);
 i2 = i3;
 HEAP32[i2 >> 2] = 1541;
 if ((_SDL_EventState(1541, -1) | 0) << 24 >> 24 != 1) {
  STACKTOP = i3;
  return;
 }
 HEAP32[i2 + 8 >> 2] = i1;
 _SDL_PushEvent(i2) | 0;
 STACKTOP = i3;
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < 128) {
   i1 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP32[i2 >> 2] << 2) >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i1;
  i2 = i2 + 4 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 while (1) {
  if ((i2 | 0) == (i3 | 0)) break;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < 128) {
   i1 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   i1 = HEAP32[i1 + (HEAP32[i2 >> 2] << 2) >> 2] | 0;
  }
  HEAP32[i2 >> 2] = i1;
  i2 = i2 + 4 | 0;
 }
 return i3 | 0;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, HEAP32[i2 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i3, i4);
 return;
}

function _SDL_AddEventWatch(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _SDL_malloc(12) | 0;
 if (!i3) return;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 + 8 >> 2] = 0;
 i1 = HEAP32[19776] | 0;
 if (!i1) i1 = 79104; else {
  i2 = i1;
  do {
   i1 = i2 + 8 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 0);
 }
 HEAP32[i1 >> 2] = i3;
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function _shr(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 i5 = i4 + 4 | 0;
 if (i1 >>> 0 > 31) {
  i3 = HEAP32[i5 >> 2] | 0;
  HEAP32[i4 >> 2] = i3;
  HEAP32[i5 >> 2] = 0;
  i1 = i1 + -32 | 0;
  i2 = 0;
 } else {
  i2 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2 << 32 - i1 | i3 >>> i1;
 HEAP32[i5 >> 2] = i2 >>> i1;
 return;
}

function _SDL_SetSurfaceRLE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 i4 = i1 + 68 | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 i2 = i2 | 0 ? i3 | 4096 : i3 & -4097;
 HEAP32[i4 >> 2] = i2;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = 0;
  return i4 | 0;
 }
 _SDL_InvalidateMap(i1);
 i4 = 0;
 return i4 | 0;
}

function _SDL_EGL_DeleteContext(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 i1 = i1 + 676 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i3 | 0) == 0 | (i2 | 0) == 0) return;
 FUNCTION_TABLE_iiiii[HEAP32[i2 + 56 >> 2] & 31](HEAP32[i2 + 8 >> 2] | 0, 0, 0, 0) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[i2 + 44 >> 2] & 63](HEAP32[i2 + 8 >> 2] | 0, i3) | 0;
 return;
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (i1 | 0) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1 | 0) {
   i2 = i1 + 48 | 0;
   if ((HEAP32[i2 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i2 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[i1 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function __ZNSt3__218__libcpp_refstringD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv(i1) | 0) {
  i1 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1163(HEAP32[i1 >> 2] | 0) | 0;
  i3 = i1 + 8 | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = i2 + -1;
  if ((i2 + -1 | 0) < 0) __ZdlPv(i1);
 }
 return;
}

function _Emscripten_HandleMouseButton(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i1 = HEAP16[i1 + 40 >> 1] | 0;
 if ((i1 & 65535) >= 3) {
  i3 = 0;
  return i3 | 0;
 }
 i2 = (i2 | 0) == 5;
 _SDL_SendMouseButton(HEAP32[i3 + 4 >> 2] | 0, 0, i2 & 1, (i1 & 255) + 1 << 24 >> 24) | 0;
 i3 = (_SDL_EventState(i2 & 1, -1) | 0) << 24 >> 24 == 1 & 1;
 return i3 | 0;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 255](i1) | 0;
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85420) | 0;
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 255](i2) | 0) & 1;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 255](i1) | 0;
 i2 = __ZNKSt3__26locale9use_facetERNS0_2idE(i2, 85412) | 0;
 HEAP32[i1 + 36 >> 2] = i2;
 HEAP8[i1 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 255](i2) | 0) & 1;
 return;
}

function _DISKAUDIO_PlayDevice(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i3 = HEAP32[i1 + 180 >> 2] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i2 = i1 + 16 | 0;
 i3 = FUNCTION_TABLE_iiiii[HEAP32[i4 + 12 >> 2] & 31](i4, HEAP32[i3 + 8 >> 2] | 0, 1, HEAP32[i2 >> 2] | 0) | 0;
 if ((i3 | 0) == (HEAP32[i2 >> 2] | 0)) return;
 _SDL_OpenedAudioDeviceDisconnected(i1);
 return;
}

function _SDL_GL_GetSwapInterval() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[19487] | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 if (!(_SDL_TLSGet(HEAP32[i1 + 664 >> 2] | 0) | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[19487] | 0;
 i2 = HEAP32[i1 + 192 >> 2] | 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = FUNCTION_TABLE_ii[i2 & 255](i1) | 0;
 return i2 | 0;
}

function _Emscripten_DestroyWindow(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 144 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 _Emscripten_UnregisterEventHandlers(i2);
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) {
  _SDL_EGL_DestroySurface(i4, i3);
  HEAP32[i2 >> 2] = 0;
 }
 _SDL_free(HEAP32[i1 >> 2] | 0);
 HEAP32[i1 >> 2] = 0;
 return;
}

function ___uflow(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if (!(___toread(i1) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[i1 + 32 >> 2] & 63](i1, i2, 1) | 0) == 1) i1 = HEAPU8[i2 >> 0] | 0; else i1 = -1; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function _png_get_PLTE(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i4 = 0;
  return i4 | 0;
 }
 if (!(i3 | 0 ? (HEAP32[i2 + 8 >> 2] & 8 | 0) != 0 : 0)) {
  i4 = 0;
  return i4 | 0;
 }
 HEAP32[i3 >> 2] = HEAP32[i2 + 16 >> 2];
 HEAP32[i4 >> 2] = HEAPU16[i2 + 20 >> 1];
 i4 = 8;
 return i4 | 0;
}

function _png_create_read_struct(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = _png_create_png_struct(i1, i2, i3, i4, 0, 0, 0) | 0;
 if (!i1) return i1 | 0;
 HEAP32[i1 + 208 >> 2] = 32768;
 HEAP32[i1 + 796 >> 2] = 8192;
 i4 = i1 + 212 | 0;
 HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 3145728;
 _png_set_read_fn(i1, 0, 0);
 return i1 | 0;
}

function _calloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if (!i2) i1 = 0; else {
  i1 = Math_imul(i3, i2) | 0;
  if ((i3 | i2) >>> 0 > 65535) i1 = ((i1 >>> 0) / (i2 >>> 0) | 0 | 0) == (i3 | 0) ? i1 : -1;
 }
 i2 = _malloc(i1) | 0;
 if (!i2) return i2 | 0;
 if (!(HEAP32[i2 + -4 >> 2] & 3)) return i2 | 0;
 _memset(i2 | 0, 0, i1 | 0) | 0;
 return i2 | 0;
}

function _SW_SetTextureAlphaMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 i2 = i2 + 31 | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if (i1 << 24 >> 24 == -1) i1 = -1; else if (HEAP32[(HEAP32[i3 + 4 >> 2] | 0) + 24 >> 2] | 0) {
  _SDL_SetSurfaceRLE(i3, 0) | 0;
  i1 = HEAP8[i2 >> 0] | 0;
 }
 return _SDL_SetSurfaceAlphaMod(i3, i1) | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 8 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function _png_malloc_warn(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (!i3) {
  i3 = 0;
  return i3 | 0;
 }
 if (i1 | 0) {
  i2 = HEAP32[i3 + 720 >> 2] | 0;
  if (!i2) i1 = _malloc(i1) | 0; else i1 = FUNCTION_TABLE_iii[i2 & 63](i3, i1) | 0;
  if (i1 | 0) {
   i3 = i1;
   return i3 | 0;
  }
 }
 _png_warning(i3, 60570);
 i3 = 0;
 return i3 | 0;
}

function _SDL_snprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i1, i2, (i3 | 0) == 0 ? 89710 : i3, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function _SDL_CalculatePitch(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i1 = Math_imul(HEAP32[i1 + 8 >> 2] | 0, HEAPU8[i2 + 9 >> 0] | 0) | 0;
 switch (HEAP8[i2 + 8 >> 0] | 0) {
 case 1:
  {
   i1 = (i1 + 7 | 0) / 8 | 0;
   break;
  }
 case 4:
  {
   i1 = (i1 + 1 | 0) / 2 | 0;
   break;
  }
 default:
  {}
 }
 return i1 + 3 & -4 | 0;
}

function _png_calloc(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 if (!i3) _png_error(i2, 60570);
 i1 = HEAP32[i2 + 720 >> 2] | 0;
 if (!i1) i1 = _malloc(i3) | 0; else i1 = FUNCTION_TABLE_iii[i1 & 63](i2, i3) | 0;
 if (!i1) _png_error(i2, 60570);
 _memset(i1 | 0, 0, i3 | 0) | 0;
 i3 = i1;
 return i3 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function ___unlist_locked_file(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (HEAP32[i1 + 68 >> 2] | 0) {
  i2 = HEAP32[i1 + 116 >> 2] | 0;
  i1 = i1 + 112 | 0;
  if (i2 | 0) HEAP32[i2 + 112 >> 2] = HEAP32[i1 >> 2];
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) i1 = (___pthread_self_606() | 0) + 232 | 0; else i1 = i1 + 116 | 0;
  HEAP32[i1 >> 2] = i2;
 }
 return;
}

function __ZN15SpriteComponentD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2836;
 _SDL_DestroyTexture(HEAP32[i1 + 12 >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIPKc9AnimationEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i1 + 72 | 0, HEAP32[i1 + 76 >> 2] | 0);
 __ZdlPv(i1);
 return;
}

function _getint(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if (!(_isdigit(HEAP8[HEAP32[i2 >> 2] >> 0] | 0) | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i3 = HEAP32[i2 >> 2] | 0;
   i1 = (i1 * 10 | 0) + -48 + (HEAP8[i3 >> 0] | 0) | 0;
   i3 = i3 + 1 | 0;
   HEAP32[i2 >> 2] = i3;
  } while ((_isdigit(HEAP8[i3 >> 0] | 0) | 0) != 0);
 }
 return i1 | 0;
}

function _png_malloc(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (!i3) {
  i3 = 0;
  return i3 | 0;
 }
 if (!i1) _png_error(i3, 60570);
 i2 = HEAP32[i3 + 720 >> 2] | 0;
 if (!i2) i1 = _malloc(i1) | 0; else i1 = FUNCTION_TABLE_iii[i2 & 63](i3, i1) | 0;
 if (!i1) _png_error(i3, 60570); else {
  i3 = i1;
  return i3 | 0;
 }
 return 0;
}

function _SW_SetTextureBlendMode(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i2 + 68 >> 2] | 0;
 i2 = i2 + 24 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 switch (i1 | 0) {
 case 4:
 case 2:
  {
   _SDL_SetSurfaceRLE(i3, 0) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   break;
  }
 default:
  {}
 }
 return _SDL_SetSurfaceBlendMode(i3, i1) | 0;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_once(85536, 10) | 0)) {
  i2 = _pthread_getspecific(HEAP32[21385] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(75569, i1);
 return 0;
}

function _fmt_x(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 if (!((i3 | 0) == 0 & (i2 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = HEAPU8[70501 + (i3 & 15) >> 0] | 0 | i4;
  i3 = _bitshift64Lshr(i3 | 0, i2 | 0, 4) | 0;
  i2 = tempRet0;
 } while (!((i3 | 0) == 0 & (i2 | 0) == 0));
 return i1 | 0;
}

function ___munmap(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 4 >> 2] = i2;
 i2 = ___syscall_ret(___syscall91(91, i4 | 0) | 0) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i6 = i1;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i1 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZN15SpriteComponentD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2836;
 _SDL_DestroyTexture(HEAP32[i1 + 12 >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIPKc9AnimationEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i1 + 72 | 0, HEAP32[i1 + 76 >> 2] | 0);
 return;
}

function dynCall_iiiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[i10 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0) | 0;
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i3 = i2;
 HEAP32[i3 >> 2] = _dummy_737(HEAP32[i1 + 60 >> 2] | 0) | 0;
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function _SDL_WriteLE32(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 12 >> 2] & 31](i1, i4, 4, 1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _SDL_WriteLE16(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP16[i4 >> 1] = i2;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 12 >> 2] & 31](i1, i4, 2, 1) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function _SDL_DestroyWindowTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = _SDL_SetWindowData(i2, 59348, 0) | 0;
 if (!i2) return;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 if (i1 | 0) _SDL_DestroyTexture(i1);
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) _SDL_DestroyRenderer(i1);
 _SDL_free(HEAP32[i2 + 8 >> 2] | 0);
 _SDL_free(i2);
 return;
}

function _DISKAUDIO_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 25;
 HEAP32[i1 + 12 >> 2] = 329;
 HEAP32[i1 + 16 >> 2] = 330;
 HEAP32[i1 + 24 >> 2] = 121;
 HEAP32[i1 + 28 >> 2] = 54;
 HEAP32[i1 + 32 >> 2] = 331;
 HEAP32[i1 + 40 >> 2] = 332;
 HEAP32[i1 >> 2] = 3;
 HEAP32[i1 + 80 >> 2] = 1;
 HEAP32[i1 + 68 >> 2] = 1;
 return 1;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = (HEAP32[i1 >> 2] | 0) + (i4 >> 1) | 0;
 if (!(i4 & 1)) i1 = i2; else i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i2 >> 2] | 0;
 FUNCTION_TABLE_vi[i1 & 511](i3);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[21385] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(75668, i2);
}

function _snprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i1, i2, i3, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 31592;
 __ZNSt3__26localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 31528;
 __ZNSt3__26localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function _SDL_CreateMutex() {
 var i1 = 0, i2 = 0;
 i1 = _SDL_malloc(12) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  return i1 | 0;
 }
 i2 = _SDL_CreateSemaphore(1) | 0;
 HEAP32[i1 + 8 >> 2] = i2;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 if (i2 | 0) {
  i2 = i1;
  return i2 | 0;
 }
 _SDL_free(i1);
 i2 = 0;
 return i2 | 0;
}

function _png_zalloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 if ((4294967295 / (i3 >>> 0) | 0) >>> 0 > i2 >>> 0) {
  i3 = _png_malloc_warn(i1, Math_imul(i3, i2) | 0) | 0;
  return i3 | 0;
 } else {
  _png_warning(i1, 60535);
  i3 = 0;
  return i3 | 0;
 }
 return 0;
}

function _DISKAUDIO_CloseDevice(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 180 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2) {
  FUNCTION_TABLE_ii[HEAP32[i2 + 16 >> 2] & 255](i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 _SDL_free(HEAP32[i1 + 8 >> 2] | 0);
 _SDL_free(HEAP32[i3 >> 2] | 0);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc(i3, i1, i4, i5, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  i3 = HEAP8[i1 >> 0] | 0;
  HEAP8[i2 >> 0] = i3 << 24 >> 24 > -1 ? i3 : i5;
  i2 = i2 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function dynCall_viiiiiiiii(i10, i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 FUNCTION_TABLE_viiiiiiiii[i10 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0, i9 | 0);
}

function _sn_write(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i3 >>> 0 ? i3 : i1;
 _memcpy(i5 | 0, i2 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i3 | 0;
}

function __Z6onFailPKc(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i2 = i3;
 if (!i1) ___assert_fail(39412, 39422, 10, 39448); else {
  HEAP32[i2 >> 2] = i1;
  _printf(39455, i2) | 0;
  STACKTOP = i3;
  return;
 }
}

function __ZNSt3__25ctypeIcEC2EPKtbj(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 34460;
 i1 = i2 + 8 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP8[i2 + 12 >> 0] = i4 & 1;
 if (!i3) HEAP32[i1 >> 2] = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
 return;
}

function _SDL_GL_DeleteContext(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[19487] | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) return;
 if ((_SDL_TLSGet(HEAP32[i2 + 664 >> 2] | 0) | 0) == (i1 | 0)) _SDL_GL_MakeCurrent(0, 0) | 0;
 i2 = HEAP32[19487] | 0;
 FUNCTION_TABLE_vii[HEAP32[i2 + 200 >> 2] & 127](i2, i1);
 return;
}

function __ZNSt3__28ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 31512;
 __ZNSt3__28ios_base16__call_callbacksENS0_5eventE(i1, 0);
 __ZNSt3__26localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i1 + 32 >> 2] | 0);
 _free(HEAP32[i1 + 36 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 return;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i4 = (HEAP32[i1 >> 2] | 0) + (i2 << 4) | 0;
  i5 = i4 & -268435456;
  i2 = (i5 >>> 24 | i5) ^ i4;
  i1 = i1 + 4 | 0;
 }
 return i2 | 0;
}

function __ZN15CanvasComponent6updateEv(i1) {
 i1 = i1 | 0;
 var f2 = f0;
 f2 = Math_fround(HEAPF32[i1 + 44 >> 2]);
 HEAP32[i1 + 28 >> 2] = ~~Math_fround(f2 - Math_fround(HEAP32[21387] | 0));
 f2 = Math_fround(HEAPF32[i1 + 48 >> 2]);
 HEAP32[i1 + 32 >> 2] = ~~Math_fround(f2 - Math_fround(HEAP32[21388] | 0));
 return;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i2 = 0;
 while (1) {
  if ((i1 | 0) == (i3 | 0)) break;
  i4 = (i2 << 4) + (HEAP8[i1 >> 0] | 0) | 0;
  i5 = i4 & -268435456;
  i2 = (i5 >>> 24 | i5) ^ i4;
  i1 = i1 + 1 | 0;
 }
 return i2 | 0;
}

function _Emscripten_ShowCursor(i1) {
 i1 = i1 | 0;
 if (!(_SDL_GetMouseFocus() | 0)) return 0;
 if (i1 | 0) {
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (i1 | 0) {
   i1 = HEAP32[i1 >> 2] | 0;
   if (!i1) return 0;
   _emscripten_asm_const_ii(5, i1 | 0) | 0;
   return 0;
  }
 }
 _emscripten_asm_const_i(6) | 0;
 return 0;
}

function _png_handle_IEND(i3, i1, i4) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0;
 i1 = i3 + 208 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 & 5 | 0) != 5) _png_chunk_error(i3, 64026);
 HEAP32[i1 >> 2] = i2 | 24;
 _png_crc_finish(i3, i4) | 0;
 if (!i4) return;
 _png_chunk_benign_error(i3, 63990);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if ((HEAP32[i2 + 4 >> 2] | 0) == (i3 | 0)) {
  i1 = i2 + 28 | 0;
  if ((HEAP32[i1 >> 2] | 0) != 1) HEAP32[i1 >> 2] = i4;
 }
 return;
}

function _SDL_GetColorKey(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 52 >> 2] | 0;
 if (!(HEAP32[i1 + 68 >> 2] & 256)) {
  i2 = -1;
  return i2 | 0;
 }
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 >> 2] = HEAP32[i1 + 72 >> 2];
 i2 = 0;
 return i2 | 0;
}

function _png_set_gray_to_rgb(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 20480;
  return;
 } else {
  _png_app_error(i1, 66333);
  return;
 }
}

function _png_set_pHYs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 HEAP32[i2 + 192 >> 2] = i3;
 HEAP32[i2 + 196 >> 2] = i4;
 HEAP8[i2 + 200 >> 0] = i5;
 i5 = i2 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 128;
 return;
}

function _png_set_oFFs(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 HEAP32[i2 + 180 >> 2] = i3;
 HEAP32[i2 + 184 >> 2] = i4;
 HEAP8[i2 + 188 >> 0] = i5;
 i5 = i2 + 8 | 0;
 HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 256;
 return;
}

function ___shlim(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i1 + 104 >> 2] = i2;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i4 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = i3 - i4 | 0;
 HEAP32[i1 + 108 >> 2] = i5;
 HEAP32[i1 + 100 >> 2] = (i2 | 0) != 0 & (i5 | 0) > (i2 | 0) ? i4 + i2 | 0 : i3;
 return;
}

function _SDL_SendMouseMotion(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 if (!((i1 | 0) == 0 | (i3 | 0) != 0)) if (!(_SDL_UpdateMouseFocus(i1, i4, i5) | 0)) {
  i5 = 0;
  return i5 | 0;
 }
 i5 = _SDL_PrivateSendMouseMotion(i1, i2, i3, i4, i5) | 0;
 return i5 | 0;
}

function _Emscripten_GLES_MakeCurrent(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i2 | 0) != 0 & (i3 | 0) != 0) {
  i3 = _SDL_EGL_MakeCurrent(i1, HEAP32[HEAP32[i2 + 144 >> 2] >> 2] | 0, i3) | 0;
  return i3 | 0;
 } else {
  i3 = _SDL_EGL_MakeCurrent(i1, 0, 0) | 0;
  return i3 | 0;
 }
 return 0;
}

function _png_set_expand(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 33558528;
  return;
 } else {
  _png_app_error(i1, 66333);
  return;
 }
}

function _png_sig_cmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 > 8) i1 = 8; else if (!i1) {
  i3 = -1;
  return i3 | 0;
 }
 if (i3 >>> 0 > 7) {
  i3 = -1;
  return i3 | 0;
 }
 i3 = _memcmp(i2 + i3 | 0, 60527 + i3 | 0, (i1 + i3 | 0) >>> 0 > 8 ? 8 - i3 | 0 : i1) | 0;
 return i3 | 0;
}

function _png_set_strip_16(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 if (!i1) return;
 i2 = i1 + 212 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 64)) {
  HEAP32[i2 >> 2] = i3 | 16384;
  i3 = i1 + 216 | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1024;
  return;
 } else {
  _png_app_error(i1, 66333);
  return;
 }
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i3 = HEAP32[6836] | 0;
 _vfprintf(i3, i1, i4) | 0;
 _fputc(10, i3) | 0;
 _abort();
}

function _png_set_read_fn(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i3) return;
 HEAP32[i3 + 188 >> 2] = i1;
 HEAP32[i3 + 184 >> 2] = i2 | 0 ? i2 : 10;
 i1 = i3 + 180 | 0;
 if (HEAP32[i1 >> 2] | 0) {
  HEAP32[i1 >> 2] = 0;
  _png_warning(i3, 65565);
 }
 HEAP32[i3 + 472 >> 2] = 0;
 return;
}

function _png_chunk_error(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224);
 if (!i2) _png_error(0, i3); else {
  _png_format_buffer(HEAP32[i2 + 376 >> 2] | 0, i1, i3);
  _png_error(i2, i1);
 }
}

function __ZNSt3__23mapIPKc9AnimationNS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26__treeINS_12__value_typeIPKc9AnimationEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i1, HEAP32[i1 + 4 >> 2] | 0);
 return;
}

function _SDL_sscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _fprintf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vfprintf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _SDL_LockSurface(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 28 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) if (!(HEAP32[i2 >> 2] & 2)) i1 = 0; else {
  _SDL_UnRLESurface(i2, 1);
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 2;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1 + 1;
 return 0;
}

function _SDL_EGL_CreateSurface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (_SDL_EGL_ChooseConfig(i1) | 0) {
  i2 = 0;
  return i2 | 0;
 }
 i1 = HEAP32[i1 + 676 >> 2] | 0;
 i2 = FUNCTION_TABLE_iiiii[HEAP32[i1 + 48 >> 2] & 31](HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 12 >> 2] | 0, i2, 0) | 0;
 return i2 | 0;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i5) | 0;
 STACKTOP = i6;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i1;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i1 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function _SDL_PumpEvents() {
 var i1 = 0;
 i1 = _SDL_GetVideoDevice() | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[i1 + 204 >> 2] & 511](i1);
 if (HEAP32[19526] | 0) if (!(_SDL_JoystickEventState(-1) | 0)) {
  _SDL_SendPendingQuit();
  return;
 }
 _SDL_JoystickUpdate();
 _SDL_SendPendingQuit();
 return;
}

function _SDL_LogDebug(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 _SDL_LogMessageV(i1, 2, i2, i5);
 STACKTOP = i4;
 return;
}

function dynCall_iiiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i9 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function _sscanf(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i1, i2, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function _SDL_UnlockSurface(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 28 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) return;
 HEAP32[i1 >> 2] = i2 + -1;
 if ((i2 | 0) > 1) return;
 i1 = HEAP32[i3 >> 2] | 0;
 if (!(i1 & 2)) return;
 HEAP32[i3 >> 2] = i1 & -3;
 _SDL_RLESurface(i3) | 0;
 return;
}

function _SDL_SW_DestroyYUVTexture(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _SDL_free(HEAP32[i1 + 16 >> 2] | 0);
 _SDL_free(HEAP32[i1 + 20 >> 2] | 0);
 _SDL_free(HEAP32[i1 + 24 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 56 >> 2] | 0);
 _SDL_FreeSurface(HEAP32[i1 + 60 >> 2] | 0);
 _SDL_free(i1);
 return;
}

function _SDL_LogInfo(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 _SDL_LogMessageV(i1, 3, i2, i5);
 STACKTOP = i4;
 return;
}

function _stdio_write(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i1 + 28 | 0;
 i1 = _fwrite(i2, i3, i4, HEAP32[i5 >> 2] | 0) | 0;
 if (i1 | 0) return i1 | 0;
 if (!(_ferror(HEAP32[i5 >> 2] | 0) | 0)) return i1 | 0;
 _SDL_Error(2) | 0;
 return i1 | 0;
}

function ___fseeko(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i4 = (___lockfile(i3) | 0) == 0;
  i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
  if (!i4) ___unlockfile(i3);
 } else i1 = ___fseeko_unlocked(i3, i1, i2) | 0;
 return i1 | 0;
}

function _png_reciprocal2(i2, i3) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 var d1 = 0.0;
 if ((i2 | 0) != 0 & (i3 | 0) != 0) {
  d1 = +Math_floor(+(1.0e15 / +(i2 | 0) / +(i3 | 0) + .5));
  if (!(!(d1 >= -2147483648.0) | !(d1 <= 2147483647.0))) {
   i3 = ~~d1;
   return i3 | 0;
  }
 }
 i3 = 0;
 return i3 | 0;
}

function _SDL_GetScancodeFromKey(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = 0;
 while (1) {
  if ((HEAP32[79652 + (i1 << 2) >> 2] | 0) == (i2 | 0)) {
   i2 = 4;
   break;
  }
  i1 = i1 + 1 | 0;
  if (i1 >>> 0 >= 512) {
   i1 = 0;
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) return i1 | 0;
 return 0;
}

function _SDL_CalculateAudioSpec(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP16[i1 + 4 >> 1] | 0;
 HEAP8[i1 + 7 >> 0] = i2 << 16 >> 16 == 8 ? -128 : 0;
 i2 = Math_imul(HEAPU8[i1 + 6 >> 0] | 0, (i2 & 65535) >>> 3 & 31) | 0;
 HEAP32[i1 + 12 >> 2] = Math_imul(i2, HEAPU16[i1 + 8 >> 1] | 0) | 0;
 return;
}

function _stdio_read(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0;
 i5 = i1 + 28 | 0;
 i1 = _fread(i2, i3, i4, HEAP32[i5 >> 2] | 0) | 0;
 if (i1 | 0) return i1 | 0;
 if (!(_ferror(HEAP32[i5 >> 2] | 0) | 0)) return i1 | 0;
 _SDL_Error(1) | 0;
 return i1 | 0;
}

function _printf(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 i2 = _vfprintf(HEAP32[6900] | 0, i1, i4) | 0;
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _catopen((HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _catopen((HEAP8[i2 + 11 >> 0] | 0) < 0 ? HEAP32[i2 >> 2] | 0 : i2, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function _png_malloc_base(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (!i2) {
  i3 = 0;
  return i3 | 0;
 }
 if (i1 | 0) {
  i3 = HEAP32[i1 + 720 >> 2] | 0;
  if (i3 | 0) {
   i3 = FUNCTION_TABLE_iii[i3 & 63](i1, i2) | 0;
   return i3 | 0;
  }
 }
 i3 = _malloc(i2) | 0;
 return i3 | 0;
}

function _Emscripten_FreeCursor(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 if (!i3) return;
 i2 = i3 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) {
  if (HEAP32[i1 + 4 >> 2] | 0) {
   _SDL_free(HEAP32[i1 >> 2] | 0);
   i1 = HEAP32[i2 >> 2] | 0;
  }
  _SDL_free(i1);
 }
 _SDL_free(i3);
 return;
}

function _SDL_TLSGet(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _SDL_SYS_GetTLSData() | 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) {
  i2 = 0;
  return i2 | 0;
 }
 if ((HEAP32[i2 >> 2] | 0) >>> 0 < i1 >>> 0) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP32[i2 + 4 + (i1 + -1 << 3) >> 2] | 0;
 return i2 | 0;
}

function _GLES2_WindowEvent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 switch (HEAP8[i2 + 12 >> 0] | 0) {
 case 2:
 case 1:
 case 6:
  {
   HEAP32[19486] = 0;
   return;
  }
 case 7:
  {
   FUNCTION_TABLE_v[HEAP32[(HEAP32[i1 + 320 >> 2] | 0) + 88 >> 2] & 15]();
   return;
  }
 default:
  return;
 }
}

function _testSetjmp(i3, i5, i4) {
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0;
 while ((i2 | 0) < (i4 | 0)) {
  i1 = HEAP32[i5 + (i2 << 3) >> 2] | 0;
  if (!i1) break;
  if ((i1 | 0) == (i3 | 0)) return HEAP32[i5 + ((i2 << 3) + 4) >> 2] | 0;
  i2 = i2 + 1 | 0;
 }
 return 0;
}

function _fmt_o(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!((i3 | 0) == 0 & (i2 | 0) == 0)) do {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i3 & 7 | 48;
  i3 = _bitshift64Lshr(i3 | 0, i2 | 0, 3) | 0;
  i2 = tempRet0;
 } while (!((i3 | 0) == 0 & (i2 | 0) == 0));
 return i1 | 0;
}

function _stdio_seek(i1, i3, i2, i4) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 + 28 | 0;
 if (!(___fseeko(HEAP32[i1 >> 2] | 0, i3, i4) | 0)) i1 = ___ftello(HEAP32[i1 >> 2] | 0) | 0; else i1 = _SDL_Error(3) | 0;
 tempRet0 = ((i1 | 0) < 0) << 31 >> 31;
 return i1 | 0;
}

function _png_destroy_info_struct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) return;
 HEAP32[i2 >> 2] = 0;
 _png_free_data(i1, i3, 32767, -1);
 _memset(i3 | 0, 0, 268) | 0;
 _png_free(i1, i3);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 if (!(_pthread_key_create(85540, 374) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(75618, i1);
}

function dynCall_viiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 FUNCTION_TABLE_viiiiiiii[i9 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0);
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i1 + 8 >> 2] = i2;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function _SW_UpdateClipRect(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[HEAP32[i1 + 320 >> 2] >> 2] | 0;
 if (!i2) return 0;
 if (!(HEAP32[i1 + 280 >> 2] | 0)) {
  _SDL_SetClipRect(i2, 0) | 0;
  return 0;
 } else {
  _SDL_SetClipRect(i2, i1 + 248 | 0) | 0;
  return 0;
 }
 return 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 34392;
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[i2 >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 i1 = 0;
 while (1) {
  if ((i1 | 0) == 3) break;
  HEAP32[i2 + (i1 << 2) >> 2] = 0;
  i1 = i1 + 1 | 0;
 }
 return;
}

function _SDL_strlcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = _strlen(i2) | 0;
 i5 = i3 + -1 | 0;
 i5 = i4 >>> 0 < i5 >>> 0 ? i4 : i5;
 if (!i3) return i4 | 0;
 _memcpy(i1 | 0, i2 | 0, i5 | 0) | 0;
 HEAP8[i1 + i5 >> 0] = 0;
 return i4 | 0;
}

function _wmemcpy(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i1 | 0) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0, i3 | 0 | 0) | 0;
}

function _png_gamma_8bit_correct(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((i1 + -1 | 0) >>> 0 < 254) {
  i2 = ~~+Math_floor(+(+Math_pow(+(+(i1 | 0) / 255.0), +(+(i2 | 0) * 1.0e-05)) * 255.0 + .5)) & 255;
  return i2 | 0;
 } else {
  i2 = i1 & 255;
  return i2 | 0;
 }
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i8 >> 2] = i6;
 return 3;
}

function _SDL_Log(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 i4 = i3;
 HEAP32[i4 >> 2] = i2;
 _SDL_LogMessageV(0, 3, i1, i4);
 STACKTOP = i3;
 return;
}

function dynCall_viffff(i6, i1, f2, f3, f4, f5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 FUNCTION_TABLE_viffff[i6 & 3](i1 | 0, Math_fround(f2), Math_fround(f3), Math_fround(f4), Math_fround(f5));
}

function _Emscripten_SetRelativeMouseMode(i1) {
 i1 = i1 | 0;
 if (!i1) {
  if ((_emscripten_exit_pointerlock() | 0) > -1) {
   i1 = 0;
   return i1 | 0;
  }
 } else if ((_emscripten_request_pointerlock(0, 1) | 0) > -1) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = -1;
 return i1 | 0;
}

function _Emscripten_HandleFocus(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) == 12) _SDL_ResetKeyboard();
 _SDL_SendWindowEvent(HEAP32[i3 + 4 >> 2] | 0, (i1 | 0) == 13 ? 12 : 13, 0, 0) | 0;
 return (_SDL_EventState(512, -1) | 0) << 24 >> 24 == 1 | 0;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 4 >> 2] & 74) {
 case 64:
  {
   i1 = 8;
   break;
  }
 case 8:
  {
   i1 = 16;
   break;
  }
 case 0:
  {
   i1 = 0;
   break;
  }
 default:
  i1 = 10;
 }
 return i1 | 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function _SDL_NextAudioFormat() {
 var i1 = 0, i2 = 0;
 i1 = HEAP32[20427] | 0;
 i2 = HEAP32[20428] | 0;
 if ((i1 | 0) == 10 | (i2 | 0) == 10) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[20428] = i2 + 1;
 i2 = HEAP16[35096 + (i1 * 20 | 0) + (i2 << 1) >> 1] | 0;
 return i2 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i1) i1 = 1; else {
  i2 = ___uselocale(i1) | 0;
  i1 = ___ctype_get_mb_cur_max() | 0;
  if (i2) ___uselocale(i2) | 0;
 }
 return i1 | 0;
}

function _stdio_close(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 if (!(HEAP32[i2 + 24 >> 2] | 0)) i1 = 0; else if (!(_fclose(HEAP32[i2 + 28 >> 2] | 0) | 0)) i1 = 0; else i1 = _SDL_Error(2) | 0;
 _SDL_free(i2);
 i2 = i1;
 return i2 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i1, i2, __ZNSt3__211char_traitsIwE6lengthEPKw(i2) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i1, i2, __ZNSt3__211char_traitsIcE6lengthEPKc(i2) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i1, i2, __ZNSt3__211char_traitsIcE6lengthEPKc(i2) | 0) | 0;
}

function dynCall_iiiiidii(i8, i1, i2, i3, i4, d5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiidii[i8 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5, i6 | 0, i7 | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[19305] = 0;
 HEAP32[19304] = 34636;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(77224);
 HEAP32[19304] = 32484;
 HEAP32[19306] = 32532;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[19301] = 0;
 HEAP32[19300] = 34636;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(77208);
 HEAP32[19300] = 32400;
 HEAP32[19302] = 32448;
 return;
}

function _RemovePendingSizeChangedEvents(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i2 >> 2] | 0) == 512) if ((HEAP8[i2 + 12 >> 0] | 0) == 6) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i1 + 8 >> 2] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function __ZNSt3__214__shared_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 if ((__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_(i1 + 4 | 0) | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 511](i1);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
  i2 = i2 + 1 | 0;
  i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function _ferror(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = (HEAP32[i2 >> 2] | 0) >>> 5 & 1;
  if (!i3) ___unlockfile(i2);
 } else i1 = (HEAP32[i2 >> 2] | 0) >>> 5 & 1;
 return i1 | 0;
}

function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 while (1) {
  i1 = _malloc(i2) | 0;
  if (i1 | 0) break;
  i1 = __ZSt15get_new_handlerv() | 0;
  if (!i1) {
   i1 = 0;
   break;
  }
  FUNCTION_TABLE_v[i1 & 15]();
 }
 return i1 | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw(i3, i1, i4, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 while (1) {
  if ((i1 | 0) == (i4 | 0)) break;
  HEAP32[i2 >> 2] = HEAP8[i1 >> 0];
  i2 = i2 + 4 | 0;
  i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function _RemovePendingResizedEvents(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i2 >> 2] | 0) == 512) if ((HEAP8[i2 + 12 >> 0] | 0) == 5) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i1 + 8 >> 2] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function _RemovePendingExposedEvents(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i2 >> 2] | 0) == 512) if ((HEAP8[i2 + 12 >> 0] | 0) == 3) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i1 + 8 >> 2] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function dynCall_viiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 FUNCTION_TABLE_viiiiiii[i8 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0);
}

function _Emscripten_HandleWheel(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _SDL_SendMouseWheel(HEAP32[i3 + 4 >> 2] | 0, 0, ~~+HEAPF64[i2 + 72 >> 3], ~~-+HEAPF64[i2 + 80 >> 3], 0) | 0;
 return (_SDL_EventState(1027, -1) | 0) << 24 >> 24 == 1 | 0;
}

function _RemovePendingMoveEvents(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if ((HEAP32[i2 >> 2] | 0) == 512) if ((HEAP8[i2 + 12 >> 0] | 0) == 4) if ((HEAP32[i2 + 8 >> 2] | 0) == (HEAP32[i1 + 8 >> 2] | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = 1;
 return i2 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i3, i4, i5, 1114111, 0) | 0;
}

function ___ftello(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 if ((HEAP32[i2 + 76 >> 2] | 0) > -1) {
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___ftello_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else i1 = ___ftello_unlocked(i2) | 0;
 return i1 | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85388) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85380) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85372) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85364) | 0);
 return;
}

function ___memrchr(i4, i1, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 & 255;
 do {
  if (!i2) {
   i1 = 0;
   break;
  }
  i2 = i2 + -1 | 0;
  i1 = i4 + i2 | 0;
 } while ((HEAP8[i1 >> 0] | 0) != i3 << 24 >> 24);
 return i1 | 0;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85324) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85316) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85308) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(84496) | 0);
 return;
}

function _SDL_JoystickQuit() {
 var i1 = 0;
 i1 = HEAP32[20486] | 0;
 if (i1 | 0) do {
  HEAP32[i1 + 48 >> 2] = 1;
  _SDL_JoystickClose(i1);
  i1 = HEAP32[20486] | 0;
 } while ((i1 | 0) != 0);
 _SDL_SYS_JoystickQuit();
 _SDL_QuitSubSystem(16384);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83684) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83676) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83668) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83644) | 0);
 return;
}

function _SDL_SYS_JoystickNameForDeviceIndex(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP32[20463] | 0;
 if ((i2 | 0) > 0) while (1) {
  i1 = HEAP32[i1 + 1320 >> 2] | 0;
  if ((i2 | 0) > 1) i2 = i2 + -1 | 0; else break;
 }
 return HEAP32[i1 + 4 >> 2] | 0;
}

function ___ofl_add(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = ___ofl_lock() | 0;
 HEAP32[i1 + 56 >> 2] = HEAP32[i2 >> 2];
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 | 0) HEAP32[i3 + 52 >> 2] = i1;
 HEAP32[i2 >> 2] = i1;
 ___ofl_unlock();
 return i1 | 0;
}

function dynCall_vffff(i5, f1, f2, f3, f4) {
 i5 = i5 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 FUNCTION_TABLE_vffff[i5 & 3](Math_fround(f1), Math_fround(f2), Math_fround(f3), Math_fround(f4));
}

function _png_set_interlace_handling(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = 1;
  return i1 | 0;
 }
 if (!(HEAP8[i1 + 432 >> 0] | 0)) {
  i1 = 1;
  return i1 | 0;
 }
 i1 = i1 + 216 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 2;
 i1 = 7;
 return i1 | 0;
}

function _png_read_update_info(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) return;
 if (!(HEAP32[i1 + 212 >> 2] & 64)) {
  _png_read_start_row(i1);
  _png_read_transform_info(i1, i2);
  return;
 } else {
  _png_app_error(i1, 65769);
  return;
 }
}

function _DUMMYAUDIO_CaptureFromDevice(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _SDL_Delay(((HEAPU16[i1 + 12 >> 1] | 0) * 1e3 | 0) / (HEAP32[i1 + 4 >> 2] | 0) | 0);
 _SDL_memset(i2, HEAPU8[i1 + 11 >> 0] | 0, i3) | 0;
 return i3 | 0;
}

function _pntz(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = _a_ctz_l_762((HEAP32[i1 >> 2] | 0) + -1 | 0) | 0;
 if (!i2) {
  i2 = _a_ctz_l_762(HEAP32[i1 + 4 >> 2] | 0) | 0;
  return ((i2 | 0) == 0 ? 0 : i2 + 32 | 0) | 0;
 } else return i2 | 0;
 return 0;
}

function _SDL_GetSurfaceAlphaMod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) {
  i2 = -1;
  return i2 | 0;
 }
 if (!i2) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP8[i2 >> 0] = HEAP8[(HEAP32[i1 + 52 >> 2] | 0) + 79 >> 0] | 0;
 i2 = 0;
 return i2 | 0;
}

function b35(i1, i2, i4, i5, i6, i7, i8, i9, i10, i11, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 nullFunc_viiiiiiiiiii(35);
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _SDL_ConvertSurfaceFormat(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i1 = _SDL_AllocFormat(i1) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = _SDL_ConvertSurface(i2, i1, i3) | 0;
 _SDL_FreeFormat(i1);
 return i3 | 0;
}

function _png_free(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i1 | 0) == 0 | (i2 | 0) == 0) return;
 i3 = HEAP32[i1 + 724 >> 2] | 0;
 if (!i3) {
  _free(i2);
  return;
 } else {
  FUNCTION_TABLE_vii[i3 & 127](i1, i2);
  return;
 }
}

function __ZNKSt3__25ctypeIwE5do_isEtw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 >>> 0 < 128) i1 = (HEAP16[(__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + (i3 << 1) >> 1] & i2) << 16 >> 16 != 0; else i1 = 0;
 return i1 | 0;
}

function _png_longjmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if (i1 | 0) {
  i3 = HEAP32[i1 + 156 >> 2] | 0;
  if (i3 | 0) {
   i1 = HEAP32[i1 + 160 >> 2] | 0;
   if (i1 | 0) FUNCTION_TABLE_vii[i3 & 127](i1, i2);
  }
 }
 _abort();
}

function ___uselocale(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (___pthread_self_231() | 0) + 188 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i1 | 0) HEAP32[i2 >> 2] = (i1 | 0) == (-1 | 0) ? 82488 : i1;
 return ((i3 | 0) == 82488 ? -1 : i3) | 0;
}

function _SDL_EGL_DestroySurface(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 676 >> 2] | 0;
 if (!((i2 | 0) != 0 & (i1 | 0) != 0)) return;
 FUNCTION_TABLE_iii[HEAP32[i1 + 52 >> 2] & 63](HEAP32[i1 + 8 >> 2] | 0, i2) | 0;
 return;
}

function dynCall_iiiiiid(i7, i1, i2, i3, i4, i5, d6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 return FUNCTION_TABLE_iiiiiid[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, +d6) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[19313] = 0;
 HEAP32[19312] = 34636;
 HEAP32[19314] = __ZNSt3__26__clocEv() | 0;
 HEAP32[19312] = 33872;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[19309] = 0;
 HEAP32[19308] = 34636;
 HEAP32[19310] = __ZNSt3__26__clocEv() | 0;
 HEAP32[19308] = 33848;
 return;
}

function _wmemset(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i1 | 0) {
  i2 = i3;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i2 >> 2] = i4;
   if (!i1) break; else i2 = i2 + 4 | 0;
  }
 }
 return i3 | 0;
}

function _SDL_JoystickInit() {
 var i1 = 0;
 _SDL_AddHintCallback(58863, 11, 0);
 if ((_SDL_InitSubSystem(16384) | 0) < 0) {
  i1 = -1;
  return i1 | 0;
 }
 i1 = _SDL_SYS_JoystickInit() | 0;
 i1 = (i1 | 0) < 0 ? i1 : 0;
 return i1 | 0;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 FUNCTION_TABLE_v[i1 & 15]();
 _abort_message(75721, i2);
}

function __ZN17ColliderComponentD0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 2752;
 i2 = i1 + 24 | 0;
 if ((HEAP8[i2 + 11 >> 0] | 0) >= 0) {
  __ZdlPv(i1);
  return;
 }
 __ZdlPv(HEAP32[i2 >> 2] | 0);
 __ZdlPv(i1);
 return;
}

function _emscripten_glVertexAttrib4f$legalf32(i1, f2, f3, f4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 _emscripten_glVertexAttrib4f(i1 | 0, +f2, +f3, +f4, +f5);
}

function _SDL_AtomicLock(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = 1;
 if (!i2) return;
 do {
  _SDL_Delay(0);
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 1;
 } while ((i2 | 0) != 0);
 return;
}

function dynCall_vifff(i5, i1, f2, f3, f4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 FUNCTION_TABLE_vifff[i5 & 3](i1 | 0, Math_fround(f2), Math_fround(f3), Math_fround(f4));
}

function _png_icc_check_length(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (i4 >>> 0 >= 132) {
  i4 = 1;
  return i4 | 0;
 }
 _png_icc_profile_error(i1, i2, i3, i4, 64911);
 i4 = 0;
 return i4 | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i3 << i1;
 }
 tempRet0 = i3 << i1 - 32;
 return 0;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[76936] | 0)) if (___cxa_guard_acquire(76936) | 0) {
  __ZNSt3__2L12init_wmonthsEv();
  HEAP32[21283] = 84844;
 }
 return HEAP32[21283] | 0;
}

function __ZN14TextureManager4DrawEP11SDL_Texture8SDL_RectS2_16SDL_RendererFlip(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _SDL_RenderCopyEx(HEAP32[19464] | 0, i1, i2, i3, 0.0, 0, i4) | 0;
 return;
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[76856] | 0)) if (___cxa_guard_acquire(76856) | 0) {
  __ZNSt3__2L11init_monthsEv();
  HEAP32[21080] = 84032;
 }
 return HEAP32[21080] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[76952] | 0)) if (___cxa_guard_acquire(76952) | 0) {
  __ZNSt3__2L11init_wweeksEv();
  HEAP32[21326] = 85136;
 }
 return HEAP32[21326] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[76920] | 0)) if (___cxa_guard_acquire(76920) | 0) {
  __ZNSt3__2L11init_wam_pmEv();
  HEAP32[21210] = 84552;
 }
 return HEAP32[21210] | 0;
}

function _SDL_AtomicGet(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 do {
  i3 = HEAP32[i1 >> 2] | 0;
  i2 = i3 | 0;
  i3 = i3 | 0;
  if ((i3 | 0) == (i2 | 0)) HEAP32[i1 >> 2] = i2;
 } while ((i3 | 0) != (i2 | 0));
 return i2 | 0;
}

function _EMSCRIPTENAUDIO_CloseDevice(i1) {
 i1 = i1 | 0;
 _emscripten_asm_const_ii(13, HEAP32[i1 + 144 >> 2] | 0) | 0;
 i1 = i1 + 180 | 0;
 _SDL_free(HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
 _SDL_free(HEAP32[i1 >> 2] | 0);
 return;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}

function __ZNSt3__211char_traitsIwE7not_eofEj(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) i1 = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0);
 return i1 | 0;
}

function __ZNSt3__211char_traitsIcE7not_eofEi(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) i1 = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0);
 return i1 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[76872] | 0)) if (___cxa_guard_acquire(76872) | 0) {
  __ZNSt3__2L10init_weeksEv();
  HEAP32[21123] = 84324;
 }
 return HEAP32[21123] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if (!(HEAP8[76840] | 0)) if (___cxa_guard_acquire(76840) | 0) {
  __ZNSt3__2L10init_am_pmEv();
  HEAP32[21007] = 83740;
 }
 return HEAP32[21007] | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
 return i1 | 0;
}

function __ZNSt3__211char_traitsIcE6assignEPcjc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i2 | 0) _memset(i1 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc(i3) | 0) & 255 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function _emscripten_glUniform4f$legalf32(i1, f2, f3, f4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 _emscripten_glUniform4f(i1 | 0, +f2, +f3, +f4, +f5);
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i4 = i4 - i3 | 0;
 return (i4 >>> 0 < i5 >>> 0 ? i4 : i5) | 0;
}

function _png_read_data(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 i4 = HEAP32[i1 + 184 >> 2] | 0;
 if (!i4) _png_error(i1, 62644); else {
  FUNCTION_TABLE_viii[i4 & 63](i1, i2, i3);
  return;
 }
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85428) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85436) | 0);
 return;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ((i1 & 255) << 2) >> 2] & 255;
 return i1 | 0;
}

function _a_ctz_l_762(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) i1 = 32; else if (!(i1 & 1)) {
  i2 = i1;
  i1 = 0;
  do {
   i1 = i1 + 1 | 0;
   i2 = i2 >>> 1;
  } while (!(i2 & 1 | 0));
 } else i1 = 0;
 return i1 | 0;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85420) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85412) | 0);
 return;
}

function __ZNSt3__25ctypeIcED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 34460;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 if (i2 | 0) if (HEAP8[i1 + 12 >> 0] | 0) __ZdaPv(i2);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function _png_set_packing(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (!i1) return;
 if ((HEAPU8[i1 + 436 >> 0] | 0) >= 8) return;
 i2 = i1 + 216 | 0;
 HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 4;
 HEAP8[i1 + 437 >> 0] = 8;
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev(i1, 31832);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, 31784);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev(i1, 31736);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, 31688);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1 + 8 | 0);
 return;
}

function _SDL_WaitThread(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i2) return;
 if (i1 | 0) HEAP32[i1 >> 2] = HEAP32[i2 + 8 >> 2];
 i1 = HEAP32[i2 + 792 >> 2] | 0;
 if (i1 | 0) _SDL_free(i1);
 _SDL_free(i2);
 return;
}

function _SDL_CreateSemaphore(i1) {
 i1 = i1 | 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _SDL_SetError(59147, i1) | 0;
 STACKTOP = i1;
 return 0;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function stackAlloc(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + i2 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(i2 | 0);
 return i1 | 0;
}

function _png_set_error_fn(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i1) return;
 HEAP32[i1 + 176 >> 2] = i2;
 HEAP32[i1 + 168 >> 2] = i3;
 HEAP32[i1 + 172 >> 2] = i4;
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85356) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85348) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85340) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85332) | 0);
 return;
}

function _SDL_JoystickAllowBackgroundEventsChanged(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i4) i1 = 0; else i1 = (HEAP8[i4 >> 0] | 0) == 49 & 1;
 HEAP32[20468] = i1;
 return;
}

function b12(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 nullFunc_iiiiiiiiii(12);
 return 0;
}

function _png_set_mem_fn(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 if (!i1) return;
 HEAP32[i1 + 716 >> 2] = i2;
 HEAP32[i1 + 720 >> 2] = i3;
 HEAP32[i1 + 724 >> 2] = i4;
 return;
}

function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 | 0;
 i4 = (i4 | 0) - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function dynCall_iiiiid(i6, i1, i2, i3, i4, d5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return FUNCTION_TABLE_iiiiid[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5) | 0;
}

function _png_default_read_data(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i1) return;
 if ((_fread(i2, 1, i3, HEAP32[i1 + 188 >> 2] | 0) | 0) == (i3 | 0)) return; else _png_error(i1, 65633);
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function _free_bits_at_bottom(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = 32;
  return i1 | 0;
 }
 if (!(i1 & 1)) return (_free_bits_at_bottom(i1 >>> 1) | 0) + 1 | 0; else {
  i1 = 0;
  return i1 | 0;
 }
 return 0;
}

function __ZNSt3__26locale8__globalEv() {
 if (!(HEAP8[77448] | 0)) if (___cxa_guard_acquire(77448) | 0) {
  __ZNSt3__26locale5__imp11make_globalEv() | 0;
  HEAP32[21364] = 85452;
 }
 return HEAP32[21364] | 0;
}

function __ZNSt3__26locale7classicEv() {
 if (!(HEAP8[77280] | 0)) if (___cxa_guard_acquire(77280) | 0) {
  __ZNSt3__26locale5__imp12make_classicEv() | 0;
  HEAP32[21362] = 85444;
 }
 return HEAP32[21362] | 0;
}

function _IMG_InitWEBP() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _SDL_SetError(39542, i1) | 0;
 STACKTOP = i1;
 return -1;
}

function __ZNSt3__28numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 34552;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 34512;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 12 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function _IMG_InitTIF() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _SDL_SetError(39572, i1) | 0;
 STACKTOP = i1;
 return -1;
}

function _IMG_InitJPG() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16);
 _SDL_SetError(39602, i1) | 0;
 STACKTOP = i1;
 return -1;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83660) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83636) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85404) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(85396) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83612) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83604) | 0);
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__26localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[(__ZNSt3__26locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 __ZNSt3__214__shared_count12__add_sharedEv(i2);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83652) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl(i1, i2, __ZNSt3__26locale2id5__getEv(83620) | 0);
 return;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl(i1, __ZNSt3__26locale2id5__getEv(i2) | 0) | 0;
}

function _SW_CreateRenderer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = _SDL_GetWindowSurface(i1) | 0;
 if (!i1) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = _SW_CreateRendererForSurface(i1) | 0;
 return i2 | 0;
}

function _SDL_TicksInit() {
 if (HEAP32[19777] | 0) return;
 HEAP32[19777] = 1;
 if (!(_clock_gettime(4, 79112) | 0)) {
  HEAP32[19780] = 1;
  return;
 } else {
  _gettimeofday(79124, 0) | 0;
  return;
 }
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 4 >> 2] = i2 + -1;
 HEAP32[i1 >> 2] = 34392;
 HEAP32[i1 + 8 >> 2] = __ZNSt3__26__clocEv() | 0;
 return;
}

function _SDL_AllocBlitMap() {
 var i1 = 0;
 i1 = _SDL_calloc(1, 88) | 0;
 if (!i1) {
  _SDL_Error(0) | 0;
  i1 = 0;
  return i1 | 0;
 } else {
  HEAP32[i1 + 76 >> 2] = -1;
  return i1 | 0;
 }
 return 0;
}

function b34(i1, i2, i3, i4, i5, i6, i7, i8, i9) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 nullFunc_viiiiiiiii(34);
}

function _emscripten_glVertexAttrib3f$legalf32(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glVertexAttrib3f(i1 | 0, +f2, +f3, +f4);
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_AudioUnlockDevice_Default(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (HEAP32[i1 + 156 >> 2] | 0) {
  i2 = _SDL_ThreadID() | 0;
  if ((i2 | 0) == (HEAP32[i1 + 160 >> 2] | 0)) return;
 }
 return;
}

function _emscripten_glClearColor$legalf32(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glClearColor(+f1, +f2, +f3, +f4);
}

function _emscripten_glBlendColor$legalf32(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glBlendColor(+f1, +f2, +f3, +f4);
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function _SDL_AudioLockDevice_Default(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if (HEAP32[i1 + 156 >> 2] | 0) {
  i2 = _SDL_ThreadID() | 0;
  if ((i2 | 0) == (HEAP32[i1 + 160 >> 2] | 0)) return;
 }
 return;
}

function _png_get_valid(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i3 = 0;
  return i3 | 0;
 }
 i3 = HEAP32[i2 + 8 >> 2] & i3;
 return i3 | 0;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i1) {
 i1 = i1 | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[i1 >> 2] >> 2] | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function dynCall_vdddddd(i7, d1, d2, d3, d4, d5, d6) {
 i7 = i7 | 0;
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 FUNCTION_TABLE_vdddddd[i7 & 1](+d1, +d2, +d3, +d4, +d5, +d6);
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i3;
 return 3;
}

function _SW_WindowEvent(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 320 >> 2] | 0;
 if ((HEAP8[i2 + 12 >> 0] | 0) != 6) return;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 return;
}

function _Emscripten_HandleVisibilityChange(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _SDL_SendWindowEvent(HEAP32[i3 + 4 >> 2] | 0, HEAP32[i2 >> 2] | 0 ? 2 : 1, 0, 0) | 0;
 return 0;
}

function _Emscripten_DestroyWindowFramebuffer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = (HEAP32[i2 + 144 >> 2] | 0) + 8 | 0;
 _SDL_FreeSurface(HEAP32[i2 >> 2] | 0);
 HEAP32[i2 >> 2] = 0;
 return;
}

function ___strdup(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = (_strlen(i1) | 0) + 1 | 0;
 i3 = _malloc(i2) | 0;
 if (!i3) i1 = 0; else i1 = _memcpy(i3 | 0, i1 | 0, i2 | 0) | 0;
 return i1 | 0;
}

function b11(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 nullFunc_iiiiiiiii(11);
 return 0;
}

function ___DOUBLE_BITS_674(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function ___DOUBLE_BITS_273(d1) {
 d1 = +d1;
 var i2 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return i2 | 0;
}

function _emscripten_glRotatef$legalf32(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glRotatef(+f1, +f2, +f3, +f4);
}

function _SDL_OnWindowEnter(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[19487] | 0;
 i3 = HEAP32[i2 + 144 >> 2] | 0;
 if (!i3) return;
 FUNCTION_TABLE_vii[i3 & 127](i2, i1);
 return;
}

function _DUMMYAUDIO_Init(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 4 >> 2] = 26;
 HEAP32[i1 + 28 >> 2] = 55;
 HEAP32[i1 + 72 >> 2] = 1;
 HEAP32[i1 + 76 >> 2] = 1;
 HEAP32[i1 + 68 >> 2] = 1;
 return 1;
}

function _png_read_data_323(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = _png_get_io_ptr(i1) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[i1 + 8 >> 2] & 31](i1, i2, i3, 1) | 0;
 return;
}

function _emscripten_glUniform3f$legalf32(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 _emscripten_glUniform3f(i1 | 0, +f2, +f3, +f4);
}

function ___lctrans_impl(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = ___mo_lookup(HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, i2) | 0;
 return (i1 | 0 ? i1 : i2) | 0;
}

function _SDL_EGL_SwapBuffers(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 676 >> 2] | 0;
 FUNCTION_TABLE_iii[HEAP32[i1 + 60 >> 2] & 63](HEAP32[i1 + 8 >> 2] | 0, i2) | 0;
 return;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function _SDL_ResetKeyboard() {
 var i1 = 0;
 i1 = 0;
 do {
  if ((HEAP8[79138 + i1 >> 0] | 0) == 1) _SDL_SendKeyboardKey(0, i1) | 0;
  i1 = i1 + 1 | 0;
 } while ((i1 | 0) != 512);
 return;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0, i3 | 0) | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__time_putD2Ev(i1 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 12 | 0);
 return;
}

function _SW_SetRenderTarget(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 + 320 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[((i2 | 0) == 0 ? i1 + 4 | 0 : i2 + 68 | 0) >> 2];
 return 0;
}

function dynCall_viff(i4, i1, f2, f3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 FUNCTION_TABLE_viff[i4 & 3](i1 | 0, Math_fround(f2), Math_fround(f3));
}

function __ZN17ColliderComponentD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2752;
 i1 = i1 + 24 | 0;
 if ((HEAP8[i1 + 11 >> 0] | 0) >= 0) return;
 __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNSt3__210__time_putD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__26__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function _SDL_GetMouseState(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (i1 | 0) HEAP32[i1 >> 2] = HEAP32[19503];
 if (i2 | 0) HEAP32[i2 >> 2] = HEAP32[19504];
 return HEAP32[19509] | 0;
}

function b33(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 nullFunc_viiiiiiii(33);
}

function _png_get_channels(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!((i1 | 0) != 0 & (i2 | 0) != 0)) {
  i2 = 0;
  return i2 | 0;
 }
 i2 = HEAP8[i2 + 29 >> 0] | 0;
 return i2 | 0;
}

function __ZNSt3__26localeC2ERKS0_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i2 = HEAP32[i2 >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 __ZNSt3__214__shared_count12__add_sharedEv(i2);
 return;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZNSt3__26__clocEv() {
 if (!(HEAP8[76800] | 0)) if (___cxa_guard_acquire(76800) | 0) HEAP32[20907] = ___newlocale(2147483647, 73161, 0) | 0;
 return HEAP32[20907] | 0;
}

function _SW_UpdateViewport(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[HEAP32[i1 + 320 >> 2] >> 2] | 0;
 if (!i2) return 0;
 _SDL_SetClipRect(i2, i1 + 216 | 0) | 0;
 return 0;
}

function _DUMMY_Available() {
 var i1 = 0;
 i1 = _SDL_getenv(59181) | 0;
 if (i1 | 0) if (!(_SDL_strcmp(i1, 57922) | 0)) {
  i1 = 1;
  return i1 | 0;
 }
 i1 = 0;
 return i1 | 0;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_j(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!i3) i1 = 0; else i1 = _memcmp(i1, i2, i3) | 0;
 return i1 | 0;
}

function b10(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 nullFunc_iiiiiiii(10);
 return 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 8 + 3 >> 0] | 0) < 0) __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function _png_reciprocal(i1) {
 i1 = i1 | 0;
 var d2 = 0.0;
 d2 = +Math_floor(+(1.0e10 / +(i1 | 0) + .5));
 return (d2 <= 2147483647.0 & d2 >= -2147483648.0 ? ~~d2 : 0) | 0;
}

function _png_create_info_struct(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else {
  i1 = _png_malloc_base(i1, 268) | 0;
  if (i1) _memset(i1 | 0, 0, 268) | 0;
 }
 return i1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[i1 >> 2] | 0);
 return;
}

function _SDL_OnWindowResized(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 112 >> 2] = 0;
 _SDL_SendWindowEvent(i1, 6, HEAP32[i1 + 24 >> 2] | 0, HEAP32[i1 + 28 >> 2] | 0) | 0;
 return;
}

function b6(i1, i2, i3, i4, d5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 i6 = i6 | 0;
 i7 = i7 | 0;
 nullFunc_iiiiidii(6);
 return 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[19299] = 0;
 HEAP32[19298] = 34204;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[19297] = 0;
 HEAP32[19296] = 34176;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[19295] = 0;
 HEAP32[19294] = 34148;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[19293] = 0;
 HEAP32[19292] = 34120;
 return;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 | 0) _memmove(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function _emscripten_glVertexAttrib2f$legalf32(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 _emscripten_glVertexAttrib2f(i1 | 0, +f2, +f3);
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3 | 0) _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function _png_app_warning(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP32[i1 + 212 >> 2] & 2097152)) _png_error(i1, i2); else {
  _png_warning(i1, i2);
  return;
 }
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[19283] = 0;
 HEAP32[19282] = 32348;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[19281] = 0;
 HEAP32[19280] = 32296;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[19279] = 0;
 HEAP32[19278] = 32232;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[19277] = 0;
 HEAP32[19276] = 32168;
 return;
}

function dynCall_viif(i4, i1, i2, f3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 FUNCTION_TABLE_viif[i4 & 1](i1 | 0, i2 | 0, Math_fround(f3));
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _png_app_error(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!(HEAP32[i1 + 212 >> 2] & 4194304)) _png_error(i1, i2); else {
  _png_warning(i1, i2);
  return;
 }
}

function b32(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 nullFunc_viiiiiii(32);
}

function _SDL_SendMouseButton(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _SDL_PrivateSendMouseButton(i1, i2, i3, i4, -1) | 0;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 if (i1 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 511](i1);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN18TransformComponent4initEv(i1) {
 i1 = i1 | 0;
 __ZN8Vector2d4ZeroEv(i1 + 24 | 0) | 0;
 HEAP32[i1 + 56 >> 2] = _SDL_GetKeyboardState(0) | 0;
 return;
}

function b25(i1, f2, f3, f4, f5) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 f5 = Math_fround(f5);
 nullFunc_viffff(25);
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 >>> 0 <= i1 >>> 0 & i1 >>> 0 < i3 >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i2 >>> 0 <= i1 >>> 0 & i1 >>> 0 < i3 >>> 0 | 0;
}

function __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2 + -1;
 return i2 + -1 | 0;
}

function __ZNSt11logic_errorC2EPKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 35024;
 __ZNSt3__218__libcpp_refstringC2EPKc(i1 + 4 | 0, i2);
 return;
}

function __Z8one_iterv() {
 __ZN4Game12handleEventsEv(HEAP32[19364] | 0);
 __ZN4Game6updateEv(HEAP32[19364] | 0);
 __ZN4Game6renderEv(HEAP32[19364] | 0);
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 63](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function _emscripten_glTexParameterf$legalf32(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 _emscripten_glTexParameterf(i1 | 0, i2 | 0, +f3);
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__26locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[20908] | 0;
 HEAP32[20908] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}

function _SDL_vsnprintf(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _vsnprintf(i1, i2, (i3 | 0) == 0 ? 89710 : i3, i4) | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _emscripten_glUniform2f$legalf32(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 _emscripten_glUniform2f(i1 | 0, +f2, +f3);
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_AudioDetectDevices_Default() {
 _SDL_AddAudioDevice(0, 59092, 1);
 if (!(HEAP32[20449] | 0)) return;
 _SDL_AddAudioDevice(1, 59119, 2);
 return;
}

function dynCall_vff(i3, f1, f2) {
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 FUNCTION_TABLE_vff[i3 & 3](Math_fround(f1), Math_fround(f2));
}

function _strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = ___strchrnul(i1, i2) | 0;
 return ((HEAP8[i1 >> 0] | 0) == (i2 & 255) << 24 >> 24 ? i1 : 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function _GLES2_GetOutputSize(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _SDL_GL_GetDrawableSize(HEAP32[i1 + 188 >> 2] | 0, i2, i3);
 return 0;
}

function _Emscripten_GLES_CreateContext(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_EGL_CreateContext(i1, HEAP32[HEAP32[i2 + 144 >> 2] >> 2] | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3) _wmemmove(i1, i2, i3) | 0;
 return i1 | 0;
}

function b9(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 nullFunc_iiiiiii(9);
 return 0;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 31592;
 __ZNSt3__26localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 31528;
 __ZNSt3__26localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__211char_traitsIwE6assignEPwjw(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i2) _wmemset(i1, i3, i2) | 0;
 return i1 | 0;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (i3) _wmemcpy(i1, i2, i3) | 0;
 return i1 | 0;
}

function _wcslen(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2;
 while (1) if (!(HEAP32[i1 >> 2] | 0)) break; else i1 = i1 + 4 | 0;
 return i1 - i2 >> 2 | 0;
}

function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 return;
}

function _fileno(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 76 >> 2] | 0) > -1) if (___lockfile(i1) | 0) ___unlockfile(i1);
 return HEAP32[i1 + 60 >> 2] | 0;
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[21361] = 77288;
 return 85444;
}

function b8(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 nullFunc_iiiiiid(8);
 return 0;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 63](i1 | 0, i2 | 0, i3 | 0);
}

function __ZN15PaintControllerD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2864;
 _SDL_DestroyTexture(HEAP32[i1 + 48 >> 2] | 0);
 __ZdlPv(i1);
 return;
}

function _Emscripten_GLES_SwapWindow(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SDL_EGL_SwapBuffers(i1, HEAP32[HEAP32[i2 + 144 >> 2] >> 2] | 0);
 return;
}

function ___ctype_get_mb_cur_max() {
 var i1 = 0;
 i1 = (HEAP32[HEAP32[(___pthread_self() | 0) + 188 >> 2] >> 2] | 0) != 0;
 return (i1 ? 4 : 1) | 0;
}

function _SDL_OnWindowRestored(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 48 >> 2] & 69 | 0) != 5) return;
 _SDL_UpdateFullscreenMode(i1, 1) | 0;
 return;
}

function _SDL_DUMMY_DestroyWindowFramebuffer(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SDL_FreeSurface(_SDL_SetWindowData(i2, 57447, 0) | 0);
 return;
}

function ___cxa_guard_acquire(i1) {
 i1 = i1 | 0;
 if ((HEAP8[i1 >> 0] | 0) == 1) i1 = 0; else {
  HEAP8[i1 >> 0] = 1;
  i1 = 1;
 }
 return i1 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNKSt3__26locale5__imp9use_facetEl(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = (___dynamic_cast(i1, 2624, 2712, 0) | 0) != 0 & 1;
 return i1 | 0;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function _SDL_getenv(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else if (!(_SDL_strlen(i1) | 0)) i1 = 0; else i1 = _getenv(i1 | 0) | 0;
 return i1 | 0;
}

function _SDL_OnWindowShown(i1) {
 i1 = i1 | 0;
 if ((HEAP32[i1 + 48 >> 2] & 69 | 0) != 5) return;
 _SDL_UpdateFullscreenMode(i1, 1) | 0;
 return;
}

function b31(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 nullFunc_viiiiii(31);
}

function __ZNSt3__28ios_base5clearEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 + 16 >> 2] = (HEAP32[i1 + 24 >> 2] | 0) == 0 | i2;
 return;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZN8Vector2d4ZeroEv(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
 return i1 | 0;
}

function _SDL_AtomicAdd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i3 + i2;
 return i3 | 0;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 >>> 0 < 128 ? i2 & 255 : i3) | 0;
}

function b19(f1, f2, f3, f4) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 nullFunc_vffff(19);
}

function _strtoull_l(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _strtoull(i1, i2, i3) | 0;
 return i4 | 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i2 << 24 >> 24 > -1 ? i2 : i3) | 0;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej(77016, 1);
 return;
}

function _strtoll_l(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = _strtoll(i1, i2, i3) | 0;
 return i4 | 0;
}

function _getpix_24(i1) {
 i1 = i1 | 0;
 return (HEAPU8[i1 + 1 >> 0] | 0) << 8 | (HEAPU8[i1 >> 0] | 0) | (HEAPU8[i1 + 2 >> 0] | 0) << 16 | 0;
}

function _emscripten_glPolygonOffset$legalf32(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 _emscripten_glPolygonOffset(+f1, +f2);
}

function _SW_RenderPresent(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 188 >> 2] | 0;
 if (!i1) return;
 _SDL_UpdateWindowSurface(i1) | 0;
 return;
}

function _Emscripten_SetWindowTitle(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _emscripten_asm_const_ii(2, HEAP32[i2 + 8 >> 2] | 0) | 0;
 return;
}

function _swapc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = _llvm_bswap_i32(i1 | 0) | 0;
 return ((i2 | 0) == 0 ? i1 : i3) | 0;
}

function _strtoll(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _strtox_767(i1, i2, i3, 0, -2147483648) | 0;
 return i3 | 0;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_AtomicSet(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 return i3 | 0;
}

function dynCall_vif(i3, i1, f2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 FUNCTION_TABLE_vif[i3 & 3](i1 | 0, Math_fround(f2));
}

function dynCall_vfi(i3, f1, i2) {
 i3 = i3 | 0;
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 FUNCTION_TABLE_vfi[i3 & 1](Math_fround(f1), i2 | 0);
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZNSt3__214__shared_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_(i1 + 4 | 0);
 return;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_AudioOpenDevice_Default(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return _SDL_Error(4) | 0;
}

function _emscripten_glVertexAttrib1f$legalf32(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 _emscripten_glVertexAttrib1f(i1 | 0, +f2);
}

function _emscripten_glSampleCoverage$legalf32(f1, i2) {
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 _emscripten_glSampleCoverage(+f1, i2 | 0);
}

function _emscripten_glDepthRangef$legalf32(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 _emscripten_glDepthRangef(+f1, +f2);
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_SYS_JoystickClose(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 44 >> 2] | 0;
 if (!i1) return;
 HEAP32[i1 + 16 >> 2] = 0;
 return;
}

function _Emscripten_GLES_DeleteContext(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _glClear(17664);
 _SDL_EGL_DeleteContext(i1, i2);
 return;
}

function _out(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 if (!(HEAP32[i1 >> 2] & 32)) ___fwritex(i2, i3, i1) | 0;
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(85452, __ZNSt3__26locale7classicEv() | 0);
 return 85452;
}

function __ZNSt11logic_errorD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 35024;
 __ZNSt3__218__libcpp_refstringD2Ev(i1 + 4 | 0);
 return;
}

function __ZN15PaintControllerD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2864;
 _SDL_DestroyTexture(HEAP32[i1 + 48 >> 2] | 0);
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_memset(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _memset(i1 | 0, i2 & 255 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function b7(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 nullFunc_iiiiii(7);
 return 0;
}

function _png_get_io_ptr(i1) {
 i1 = i1 | 0;
 if (!i1) {
  i1 = 0;
  return i1 | 0;
 }
 i1 = HEAP32[i1 + 188 >> 2] | 0;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[19259] = 0;
 HEAP32[19258] = 34772;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[19261] = 0;
 HEAP32[19260] = 34820;
 return;
}

function __ZN8Vector2dC2Ev(i1) {
 i1 = i1 | 0;
 HEAPF32[i1 >> 2] = Math_fround(0.0);
 HEAPF32[i1 + 4 >> 2] = Math_fround(0.0);
 return;
}

function b24(i1, f2, f3, f4) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 f4 = Math_fround(f4);
 nullFunc_vifff(24);
}

function _llvm_bswap_i32(i1) {
 i1 = i1 | 0;
 return (i1 & 255) << 24 | (i1 >> 8 & 255) << 16 | (i1 >> 16 & 255) << 8 | i1 >>> 24 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[19253] = 0;
 HEAP32[19252] = 34724;
 return;
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 63](i1 | 0, i2 | 0) | 0;
}

function _strtoull(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i3 = _strtox_767(i1, i2, i3, -1, -1) | 0;
 return i3 | 0;
}

function __ZNSt3__26localeD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__214__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
 return;
}

function b5(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 nullFunc_iiiiid(5);
 return 0;
}

function _SDL_memmove(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _memmove(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
 return;
}

function __ZNKSt3__28ios_base6getlocEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__26localeC2ERKS0_(i1, i2 + 28 | 0);
 return;
}

function _SDL_memcpy(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 return i1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbj(76984, 0, 0, 1);
 return;
}

function __ZNSt3__211__stdoutbufIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 return;
}

function __ZNSt3__211__stdoutbufIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv(i1) {
 i1 = i1 | 0;
 return 1073741823;
}

function __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[19291] = 0;
 HEAP32[19290] = 34064;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[19289] = 0;
 HEAP32[19288] = 34008;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[19287] = 0;
 HEAP32[19286] = 33952;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[19285] = 0;
 HEAP32[19284] = 33896;
 return;
}

function __ZNSt3__210__stdinbufIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 return;
}

function __ZNSt3__210__stdinbufIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function b16(d1, d2, d3, d4, d5, d6) {
 d1 = +d1;
 d2 = +d2;
 d3 = +d3;
 d4 = +d4;
 d5 = +d5;
 d6 = +d6;
 nullFunc_vdddddd(16);
}

function _emscripten_glUniform1f$legalf32(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 _emscripten_glUniform1f(i1 | 0, +f2);
}

function _SDL_qsort(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 _qsort(i1, i2, i3, i4);
 return;
}

function b30(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 nullFunc_viiiii(30);
}

function _mbrlen(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _mbrtowc(0, i1, i2, i3 | 0 ? i3 : 82568) | 0;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__217__widen_from_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _SDL_SendPendingQuit() {
 if (!(HEAP32[19519] | 0)) return;
 HEAP32[19519] = 0;
 _SDL_SendAppEvent(256) | 0;
 return;
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__216__narrow_to_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb(i1, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb(i1, 0) | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 127](i1 | 0, i2 | 0);
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE(i1) {
 i1 = i1 | 0;
 return i1 + 12 | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 | 0) == (i2 | 0) | 0;
}

function _DISKAUDIO_WaitDevice(i1) {
 i1 = i1 | 0;
 _SDL_Delay(HEAP32[(HEAP32[i1 + 180 >> 2] | 0) + 4 >> 2] | 0);
 return;
}

function _strerror(i1) {
 i1 = i1 | 0;
 return ___strerror_l(i1, HEAP32[(___pthread_self_107() | 0) + 188 >> 2] | 0) | 0;
}

function ___loc_is_allocated(i1) {
 i1 = i1 | 0;
 return (i1 | 0) != 27116 & ((i1 | 0) != 0 & (i1 | 0) != 82512) & 1 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[19319] = 0;
 HEAP32[19318] = 34264;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[19317] = 0;
 HEAP32[19316] = 34232;
 return;
}

function __ZNKSt11logic_error4whatEv(i1) {
 i1 = i1 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv(i1 + 4 | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[19245] = 0;
 HEAP32[19244] = 32136;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[19243] = 0;
 HEAP32[19242] = 32104;
 return;
}

function __ZNSt3__210__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__211__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__211__stdoutbufIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__211__stdoutbufIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SW_DestroyTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _SDL_FreeSurface(HEAP32[i2 + 68 >> 2] | 0);
 return;
}

function _SDL_strncasecmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _strncasecmp(i1, i2, i3) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Ej(77288, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[19251] = 0;
 HEAP32[19250] = 34656;
 return;
}

function _zcalloc(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _malloc(Math_imul(i3, i2) | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 - i1 >> 2 | 0;
}

function __ZNSt3__210__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__stdinbufIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__210__stdinbufIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function b4(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 nullFunc_iiiii(4);
 return 0;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1163(i1) {
 i1 = i1 | 0;
 return i1 + -12 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Ej(77072, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Ej(77048, 1);
 return;
}

function _DUMMYAUDIO_OpenDevice(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}

function _DISKAUDIO_DetectDevices() {
 _SDL_AddAudioDevice(0, 59092, 1);
 _SDL_AddAudioDevice(1, 59119, 2);
 return;
}

function _isxdigit(i1) {
 i1 = i1 | 0;
 return (((i1 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit(i1) | 0) != 0) & 1 | 0;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[21386] | 0;
 HEAP32[21386] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 return;
}

function _Emscripten_WarpMouse(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 _SDL_Error(4) | 0;
 return;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function _toupper(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_islower(i1) | 0) == 0;
 return (i2 ? i1 : i1 & 95) | 0;
}

function _tolower(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (_isupper(i1) | 0) == 0;
 return (i2 ? i1 : i1 | 32) | 0;
}

function _strrchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___memrchr(i1, i2, (_strlen(i1) | 0) + 1 | 0) | 0;
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0 & 1;
 return i1 | 0;
}

function _do_read(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return ___string_read(i1, i2, i3) | 0;
}

function __ZNSt3__26locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__26locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5__impD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strtof_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return Math_fround(_strtof(i1, i2));
}

function __ZNSt3__28messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 return HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 return HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 - i1 | 0;
}

function _SW_DestroyRenderer(i1) {
 i1 = i1 | 0;
 _SDL_free(HEAP32[i1 + 320 >> 2] | 0);
 _SDL_free(i1);
 return;
}

function _SDL_AudioCaptureFromDevice_Default(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return -1;
}

function dynCall_vf(i2, f1) {
 i2 = i2 | 0;
 f1 = Math_fround(f1);
 FUNCTION_TABLE_vf[i2 & 3](Math_fround(f1));
}

function __ZSt13get_terminatev() {
 var i1 = 0;
 i1 = HEAP32[8733] | 0;
 HEAP32[8733] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__28numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__28numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _DISKAUDIO_GetDeviceBuf(i1) {
 i1 = i1 | 0;
 return HEAP32[(HEAP32[i1 + 180 >> 2] | 0) + 8 >> 2] | 0;
}

function dynCall_vdd(i3, d1, d2) {
 i3 = i3 | 0;
 d1 = +d1;
 d2 = +d2;
 FUNCTION_TABLE_vdd[i3 & 1](+d1, +d2);
}

function __ZNSt3__27collateIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27collateIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__27collateIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__27collateIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN15CanvasComponentD0Ev(i1) {
 i1 = i1 | 0;
 __ZN15CanvasComponentD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _SDL_memcmp(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return _memcmp(i1, i2, i3) | 0;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _SDL_SetHint(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _SDL_SetHintWithPriority(i1, i2, 1) | 0;
}

function b29(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 nullFunc_viiii(29);
}

function _catgets(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return i4 | 0;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 255](i1 | 0) | 0;
}

function b23(i1, f2, f3) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 f3 = Math_fround(f3);
 nullFunc_viff(23);
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12length_errorD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt11logic_errorD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 << 24 >> 24 | 0;
}

function _strtold_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return +(+_strtold(i1, i2));
}

function _emscripten_glClearDepthf$legalf32(f1) {
 f1 = Math_fround(f1);
 _emscripten_glClearDepthf(+f1);
}

function __ZNSt3__28ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__28ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__25ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__25ctypeIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt11logic_errorD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt11logic_errorD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function __ZN18TransformComponentD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2780;
 __ZdlPv(i1);
 return;
}

function __Z6onLoadPKc(i1) {
 i1 = i1 | 0;
 if (!i1) ___assert_fail(39412, 39422, 6, 39441); else return;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 >> 0] | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function _strtod_l(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return +(+_strtod(i1, i2));
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 34904;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 34868;
 return;
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 _abort();
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _Emscripten_SetDisplayMode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}

function _emscripten_glLineWidth$legalf32(f1) {
 f1 = Math_fround(f1);
 _emscripten_glLineWidth(+f1);
}

function _SDL_GetKeyboardState(i1) {
 i1 = i1 | 0;
 if (i1 | 0) HEAP32[i1 >> 2] = 512;
 return 79138;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function _SDL_OnWindowMinimized(i1) {
 i1 = i1 | 0;
 _SDL_UpdateFullscreenMode(i1, 0) | 0;
 return;
}

function _SDL_HandleSIG(i1) {
 i1 = i1 | 0;
 _signal(i1 | 0, 333) | 0;
 HEAP32[19519] = 1;
 return;
}

function _png_reset_crc(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 412 >> 2] = _crc32(0, 0, 0) | 0;
 return;
}

function __ZNSt3__28messagesIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__28messagesIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function b3(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 nullFunc_iiii(3);
 return 0;
}

function b27(i1, i2, f3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 f3 = Math_fround(f3);
 nullFunc_viif(27);
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt3__27collateIwED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__27collateIcED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__26locale5facetD2Ev(i1);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 >> 2] | 0;
}

function _DUMMY_SetDisplayMode(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return 0;
}

function _strtof(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return Math_fround(+_strtox(i1, i2, 0));
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function _SDL_UnloadObject(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _dlclose(i1 | 0) | 0;
 return;
}

function _SDL_OnWindowHidden(i1) {
 i1 = i1 | 0;
 _SDL_UpdateFullscreenMode(i1, 0) | 0;
 return;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 511](i1 | 0);
}

function _SDL_strcasecmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcasecmp(i1, i2) | 0;
}

function _strcpy(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 ___stpcpy(i1, i2) | 0;
 return i1 | 0;
}

function _freelocale(i1) {
 i1 = i1 | 0;
 if (___loc_is_allocated(i1) | 0) _free(i1);
 return;
}

function ___lctrans(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return ___lctrans_impl(i1, i2) | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i2 | 0;
}

function _png_gamma_significant(i1) {
 i1 = i1 | 0;
 return (i1 + -95e3 | 0) >>> 0 > 1e4 | 0;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi(i1) {
 i1 = i1 | 0;
 return i1 & 255 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc(i1) {
 i1 = i1 | 0;
 return i1 & 255 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw(i1) {
 i1 = i1 | 0;
 return _wcslen(i1) | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc(i1) {
 i1 = i1 | 0;
 return _strlen(i1) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN4Game12handleEventsEv(i1) {
 i1 = i1 | 0;
 _SDL_PollEvent(75904) | 0;
 return;
}

function __ZN18TransformComponentD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2780;
 return;
}

function __ZNKSt3__28messagesIwE8do_closeEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEi(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function _SDL_realloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _realloc(i1, i2) | 0;
}

function _SDL_SYS_SetTLSData(i1) {
 i1 = i1 | 0;
 return _SDL_Generic_SetTLSData(i1) | 0;
}

function _SDL_DestroyMutex(i1) {
 i1 = i1 | 0;
 if (!i1) return;
 _SDL_free(i1);
 return;
}

function b28(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 nullFunc_viii(28);
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function _Blit_RGB565_ARGB8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 12324);
 return;
}

function _Blit_RGB565_ABGR8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 10276);
 return;
}

function dynCall_vd(i2, d1) {
 i2 = i2 | 0;
 d1 = +d1;
 FUNCTION_TABLE_vd[i2 & 1](+d1);
}

function b18(f1, f2) {
 f1 = Math_fround(f1);
 f2 = Math_fround(f2);
 nullFunc_vff(18);
}

function _strtold(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox(i1, i2, 2));
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _SDL_strstr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strstr(i1, i2) | 0;
}

function _SDL_strcmp(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strcmp(i1, i2) | 0;
}

function _SDL_strchr(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _strchr(i1, i2) | 0;
}

function _SDL_calloc(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _calloc(i1, i2) | 0;
}

function _Blit_RGB565_RGBA8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 8228);
 return;
}

function _Blit_RGB565_BGRA8888(i1) {
 i1 = i1 | 0;
 _Blit_RGB565_32(i1, 6180);
 return;
}

function _strtod(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +(+_strtox(i1, i2, 1));
}

function _png_zfree(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _png_free(i1, i2);
 return;
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function _isxdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isxdigit(i1) | 0;
}

function _Emscripten_VideoQuit(i1) {
 i1 = i1 | 0;
 _Emscripten_FiniMouse();
 return;
}

function _SDL_abs(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) > -1 ? i1 : 0 - i1 | 0) | 0;
}

function _isdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isdigit(i1) | 0;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function _SDL_SendQuit() {
 HEAP32[19519] = 0;
 return _SDL_SendAppEvent(256) | 0;
}

function _scalbnl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_scalbn(d1, i2));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioLockOrUnlockDeviceWithNoMixerLock(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN18KeyboardControllerD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _SDL_FlushEvent(i1) {
 i1 = i1 | 0;
 _SDL_FlushEvents(i1, i1);
 return;
}

function _frexpl(d1, i2) {
 d1 = +d1;
 i2 = i2 | 0;
 return +(+_frexp(d1, i2));
}

function _SDL_atan2(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_atan2(d1, d2));
}

function _SDL_KeyboardInit() {
 _SDL_memcpy(79652, 16264, 2048) | 0;
 return 0;
}

function dynCall_i(i1) {
 i1 = i1 | 0;
 return FUNCTION_TABLE_i[i1 & 7]() | 0;
}

function b22(i1, f2) {
 i1 = i1 | 0;
 f2 = Math_fround(f2);
 nullFunc_vif(22);
}

function b20(f1, i2) {
 f1 = Math_fround(f1);
 i2 = i2 | 0;
 nullFunc_vfi(20);
}

function b2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 nullFunc_iii(2);
 return 0;
}

function ___cxx_global_var_init() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function _IMG_InitPNG() {
 HEAP32[19483] = (HEAP32[19483] | 0) + 1;
 return 0;
}

function _Emscripten_DeleteDevice(i1) {
 i1 = i1 | 0;
 _SDL_free(i1);
 return;
}

function __ZNSt3__221__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 _abort();
}

function _SDL_AtomicUnlock(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 0;
 return;
}

function _isupper(i1) {
 i1 = i1 | 0;
 return (i1 + -65 | 0) >>> 0 < 26 | 0;
}

function _islower(i1) {
 i1 = i1 | 0;
 return (i1 + -97 | 0) >>> 0 < 26 | 0;
}

function _isdigit(i1) {
 i1 = i1 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _zcfree(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 _free(i2);
 return;
}

function _SDL_TLSCreate() {
 return (_SDL_AtomicAdd(81940, 1) | 0) + 1 | 0;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function _SDL_Init(i1) {
 i1 = i1 | 0;
 return _SDL_InitSubSystem(i1) | 0;
}

function _getpix_16(i1) {
 i1 = i1 | 0;
 return HEAPU16[i1 >> 1] | 0 | 0;
}

function _SW_UnlockTexture(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _SDL_AudioGetPendingBytes_Default(i1) {
 i1 = i1 | 0;
 return 0;
}

function _DUMMY_DeleteDevice(i1) {
 i1 = i1 | 0;
 _SDL_free(i1);
 return;
}

function _SDL_AudioFreeDeviceHandle_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _getpix_8(i1) {
 i1 = i1 | 0;
 return HEAPU8[i1 >> 0] | 0 | 0;
}

function _catopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1 | 0;
}

function _SDL_SYS_GetTLSData() {
 return _SDL_Generic_GetTLSData() | 0;
}

function _SDL_AudioPrepareToClose_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioGetDeviceBuf_Default(i1) {
 i1 = i1 | 0;
 return 0;
}

function b26(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 nullFunc_vii(26);
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 15]();
}

function _getpix_32(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__214__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioFlushCapture_Default(i1) {
 i1 = i1 | 0;
 return;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init();
 return;
}

function _SDL_strdup(i1) {
 i1 = i1 | 0;
 return ___strdup(i1) | 0;
}

function _SDL_NumJoysticks() {
 return _SDL_SYS_NumJoysticks() | 0;
}

function _SDL_AudioCloseDevice_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioWaitDevice_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioThreadInit_Default(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioPlayDevice_Default(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__26locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__212__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_strlen(i1) {
 i1 = i1 | 0;
 return _strlen(i1) | 0;
}

function _SDL_malloc(i1) {
 i1 = i1 | 0;
 return _malloc(i1) | 0;
}

function _SDL_floor(d1) {
 d1 = +d1;
 return +(+Math_floor(+d1));
}

function b15(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 nullFunc_vdd(15);
}

function _pthread_cond_broadcast(i1) {
 i1 = i1 | 0;
 return 0;
}

function _SDL_sqrt(d1) {
 d1 = +d1;
 return +(+Math_sqrt(+d1));
}

function _SDL_ceil(d1) {
 d1 = +d1;
 return +(+Math_ceil(+d1));
}

function _SDL_fabs(d1) {
 d1 = +d1;
 return +(+Math_abs(+d1));
}

function _pthread_mutex_unlock(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___pthread_self_606() {
 return _pthread_self() | 0;
}

function ___pthread_self_447() {
 return _pthread_self() | 0;
}

function ___pthread_self_444() {
 return _pthread_self() | 0;
}

function ___pthread_self_441() {
 return _pthread_self() | 0;
}

function ___pthread_self_438() {
 return _pthread_self() | 0;
}

function ___pthread_self_231() {
 return _pthread_self() | 0;
}

function ___pthread_self_107() {
 return _pthread_self() | 0;
}

function _SDL_atoi(i1) {
 i1 = i1 | 0;
 return _atoi(i1) | 0;
}

function _SDL_SYS_NumJoysticks() {
 return HEAP32[20464] | 0;
}

function _SDL_GetKeyboardFocus() {
 return HEAP32[19783] | 0;
}

function _DISKAUDIO_FlushCapture(i1) {
 i1 = i1 | 0;
 return;
}

function _Emscripten_PumpEvents(i1) {
 i1 = i1 | 0;
 return;
}

function b17(f1) {
 f1 = Math_fround(f1);
 nullFunc_vf(17);
}

function b1(i1) {
 i1 = i1 | 0;
 nullFunc_ii(1);
 return 0;
}

function _pthread_mutex_lock(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN9Component4drawEv(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_free(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function _SDL_GetVideoDevice() {
 return HEAP32[19487] | 0;
}

function _SDL_DestroySemaphore(i1) {
 i1 = i1 | 0;
 return;
}

function ___cxa_guard_release(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_MouseInit() {
 HEAP32[19517] = 1;
 return 0;
}

function _SDL_GetMouseFocus() {
 return HEAP32[19502] | 0;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function ___pthread_self() {
 return _pthread_self() | 0;
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function _SDL_SYS_WaitThread(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_ClearError() {
 HEAP32[19002] = 0;
 return;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function ___ofl_lock() {
 ___lock(82556);
 return 82564;
}

function __ZN9ComponentD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_sin(d1) {
 d1 = +d1;
 return +(+_sin(d1));
}

function _SDL_cos(d1) {
 d1 = +d1;
 return +(+_cos(d1));
}

function _SDL_UnlockMutex(i1) {
 i1 = i1 | 0;
 return 0;
}

function _SDL_OnWindowLeave(i1) {
 i1 = i1 | 0;
 return;
}

function _IMG_LoadWEBP_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _dummy_737(i1) {
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN8Vector2dD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _IMG_LoadXPM_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadXCF_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadTIF_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadTGA_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadPNM_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadPCX_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadLBM_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadJPG_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadICO_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadGIF_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadCUR_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadBMP_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _DUMMY_PumpEvents(i1) {
 i1 = i1 | 0;
 return;
}

function ___ofl_unlock() {
 ___unlock(82556);
 return;
}

function _SDL_LockMutex(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_LoadXV_RW(i1) {
 i1 = i1 | 0;
 return 0;
}

function _DUMMY_VideoQuit(i1) {
 i1 = i1 | 0;
 return;
}

function _SDL_AudioDeinitialize_Default() {
 return;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isWEBP(i1) {
 i1 = i1 | 0;
 return 0;
}

function emterpret(i1) {
 i1 = i1 | 0;
 assert(0);
}

function b21(i1) {
 i1 = i1 | 0;
 nullFunc_vi(21);
}

function __ZN3MapD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN3MapC2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _IMG_isXPM(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isXCF(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isTIF(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isPNM(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isPCX(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isLBM(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isJPG(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isICO(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isGIF(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isCUR(i1) {
 i1 = i1 | 0;
 return 0;
}

function _IMG_isBMP(i1) {
 i1 = i1 | 0;
 return 0;
}

function _catclose(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZSt17__throw_bad_allocv() {
 _abort();
}

function _IMG_isXV(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___ctype_toupper_loc() {
 return 29644;
}

function ___ctype_tolower_loc() {
 return 28104;
}

function _SDL_GetNumRenderDrivers() {
 return 2;
}

function b14(d1) {
 d1 = +d1;
 nullFunc_vd(14);
}

function getTempRet0() {
 return tempRet0 | 0;
}

function ___errno_location() {
 return 82536;
}

function _SDL_SYS_JoystickDetect() {
 return;
}

function _Emscripten_Available() {
 return 1;
}

function stackSave() {
 return STACKTOP | 0;
}

function b0() {
 nullFunc_i(0);
 return 0;
}

function ___ctype_b_loc() {
 return 28100;
}

function _pthread_self() {
 return 27856;
}

function _SDL_GetMouse() {
 return 77964;
}

function _SDL_KeyboardQuit() {
 return;
}

function _SDL_TouchInit() {
 return 0;
}

function _SDL_TimerInit() {
 return 0;
}

function _SDL_ThreadID() {
 return 0;
}

function _SDL_TimerQuit() {
 return;
}

function b13() {
 nullFunc_v(13);
}

function _dummy() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,_Emscripten_Available,_DUMMY_Available,_SDL_GetError,_eglWaitGL,_emscripten_glCreateProgram,_emscripten_glGetError,b0];
var FUNCTION_TABLE_ii = [b1,_IMG_LoadTGA_RW,_IMG_isCUR,_IMG_LoadCUR_RW,_IMG_isICO,_IMG_LoadICO_RW,_IMG_isBMP,_IMG_LoadBMP_RW,_IMG_isGIF,_IMG_LoadGIF_RW,_IMG_isJPG,_IMG_LoadJPG_RW,_IMG_isLBM,_IMG_LoadLBM_RW,_IMG_isPCX,_IMG_LoadPCX_RW,_IMG_isPNG,_IMG_LoadPNG_RW,_IMG_isPNM,_IMG_LoadPNM_RW,_IMG_isTIF,_IMG_LoadTIF_RW,_IMG_isXCF,_IMG_LoadXCF_RW,_IMG_isXPM,_IMG_LoadXPM_RW,_IMG_isXV,_IMG_LoadXV_RW,_IMG_isWEBP
,_IMG_LoadWEBP_RW,_getpix_8,_getpix_16,_getpix_24,_getpix_32,_Emscripten_CreateDevice,_EMSCRIPTENAUDIO_Init,_DUMMY_CreateDevice,_DISKAUDIO_Init,_DUMMYAUDIO_Init,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv
,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv
,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt11logic_error4whatEv,_IMG_Init,_png_create_info_struct,_SDL_malloc,_GLES2_UpdateViewport,_GLES2_UpdateClipRect,_GLES2_RenderClear,_SW_UpdateViewport,_SW_UpdateClipRect,_SW_RenderClear,_Emscripten_VideoInit,_SDL_EGL_GetSwapInterval,_eglGetDisplay,_eglTerminate,_eglGetProcAddress,_eglWaitNative,_eglBindAPI,_Emscripten_ShowCursor,_Emscripten_CreateSystemCursor,_Emscripten_SetRelativeMouseMode,_DUMMY_VideoInit
,_stdio_size,_stdio_close,_DISKAUDIO_GetDeviceBuf,_SDL_AudioGetPendingBytes_Default,_SDL_AudioGetDeviceBuf_Default,_emscripten_glGetString,_emscripten_glIsTexture,_emscripten_glIsBuffer,_emscripten_glIsRenderbuffer,_emscripten_glCreateShader,_emscripten_glIsShader,_emscripten_glIsProgram,_emscripten_glIsFramebuffer,_emscripten_glIsVertexArray,_emscripten_glCheckFramebufferStatus,_emscripten_glIsEnabled,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,_GLES2_CreateRenderer,_SW_CreateRenderer,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,_png_get_channels,_SDL_SetError,_GLES2_CreateTexture,_GLES2_SetRenderTarget,_GLES2_UnbindTexture,_RemovePendingResizedEvents,_RemovePendingSizeChangedEvents,_RemovePendingMoveEvents,_RemovePendingExposedEvents,_cmpmodes,_SW_CreateTexture,_SW_SetTextureColorMod
,_SW_SetTextureAlphaMod,_SW_SetTextureBlendMode,_SW_SetRenderTarget,_Emscripten_CreateWindow,_Emscripten_GLES_LoadLibrary,_SDL_EGL_GetProcAddress,_Emscripten_GLES_CreateContext,_SDL_EGL_SetSwapInterval,_eglDestroyContext,_eglDestroySurface,_eglSwapBuffers,_eglSwapInterval,_SDL_GameControllerEventWatcher,_SDL_RendererEventWatch,_png_user_version_check,_png_malloc_warn,_emscripten_glGetUniformLocation,_emscripten_glGetAttribLocation,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,_sn_write,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__211__stdoutbufIwE6xsputnEPKwi,__ZNSt3__211__stdoutbufIcE6xsputnEPKci,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_png_set_longjmp_fn,_png_get_valid,_SDL_SetColorKey
,_GLES2_GetOutputSize,_GLES2_RenderDrawPoints,_GLES2_RenderDrawLines,_GLES2_RenderFillRects,_SW_GetOutputSize,_SW_RenderDrawPoints,_SW_RenderDrawLines,_SW_RenderFillRects,_Emscripten_SetDisplayMode,_Emscripten_GLES_MakeCurrent,_Emscripten_HandleCanvasResize,_eglInitialize,_Emscripten_HandleMouseMove,_Emscripten_HandleMouseButton,_Emscripten_HandleMouseFocus,_Emscripten_HandleWheel,_Emscripten_HandleFocus,_Emscripten_HandleTouch,_Emscripten_HandleKey,_Emscripten_HandleKeyPress,_Emscripten_HandleFullscreenChange,_Emscripten_HandleResize,_Emscripten_HandleVisibilityChange,_Emscripten_CreateCursor,_DUMMY_SetDisplayMode,_DISKAUDIO_CaptureFromDevice,_DUMMYAUDIO_CaptureFromDevice,_SDL_AudioCaptureFromDevice_Default,_Emscripten_JoyStickConnected,_Emscripten_JoyStickDisconnected
,_png_zalloc,_zcalloc,_do_read,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,_png_create_read_struct,_SDL_MapRGB,_png_get_PLTE,_GLES2_RenderCopy,_GLES2_BindTexture,_SDL_SoftBlit,_SDL_RLEBlit,_SDL_RLEAlphaBlit,_SW_RenderCopy,_Emscripten_UpdateWindowFramebuffer,_eglGetConfigAttrib,_eglCreateContext,_eglCreateWindowSurface,_eglMakeCurrent,_EMSCRIPTENAUDIO_OpenDevice,_SDL_DUMMY_UpdateWindowFramebuffer,_stdio_seek,_stdio_read,_stdio_write,_DISKAUDIO_OpenDevice,_DUMMYAUDIO_OpenDevice,_SDL_UpdateWindowTexture,_SDL_AudioOpenDevice_Default
,b4,b4,b4];
var FUNCTION_TABLE_iiiiid = [b5,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b5,b5,b5];
var FUNCTION_TABLE_iiiiidii = [b6,_GLES2_RenderCopyEx,_SW_RenderCopyEx,b6];
var FUNCTION_TABLE_iiiiii = [b7,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,_png_get_tRNS,_GLES2_UpdateTexture,_GLES2_LockTexture,_GLES2_RenderReadPixels,_uncopy_32,_uncopy_opaque_16,_uncopy_transl_16,_copy_transl_565
,_copy_transl_555,_copy_opaque_16,_copy_32,_SW_UpdateTexture,_SW_LockTexture,_SW_RenderReadPixels,_Emscripten_CreateWindowFramebuffer,_eglChooseConfig,_SDL_DUMMY_CreateWindowFramebuffer,_SDL_CreateWindowTexture,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiiiiid = [b8,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b8];
var FUNCTION_TABLE_iiiiiii = [b9,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiiiii = [b10,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,_SDL_BlendFillRect_ARGB8888,_SDL_BlendFillRect_RGB888,_SDL_BlendFillRect_RGBA,_SDL_BlendFillRect_RGB,_SDL_BlendFillRect_RGB555,_SDL_BlendFillRect_RGB565,b10,b10,b10];
var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,_SDL_CreateRGBSurface,_SDL_BlendPoint_ARGB8888,_SDL_BlendPoint_RGB888,_SDL_BlendPoint_RGBA,_SDL_BlendPoint_RGB,_SDL_BlendPoint_RGB555,_SDL_BlendPoint_RGB565,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_iiiiiiiiii = [b12,_png_get_IHDR,_GLES2_UpdateTextureYUV,b12];
var FUNCTION_TABLE_v = [b13,__ZL25default_terminate_handlerv,__Z8one_iterv,_DISKAUDIO_DetectDevices,_SDL_AudioDetectDevices_Default,_SDL_AudioDeinitialize_Default,_emscripten_glLoadIdentity,_emscripten_glReleaseShaderCompiler,_emscripten_glFinish,_emscripten_glFlush,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b13,b13,b13,b13,b13];
var FUNCTION_TABLE_vd = [b14,_emscripten_glClearDepth];
var FUNCTION_TABLE_vdd = [b15,_emscripten_glDepthRange];
var FUNCTION_TABLE_vdddddd = [b16,_emscripten_glFrustum];
var FUNCTION_TABLE_vf = [b17,_emscripten_glClearDepthf$legalf32,_emscripten_glLineWidth$legalf32,b17];
var FUNCTION_TABLE_vff = [b18,_emscripten_glDepthRangef$legalf32,_emscripten_glPolygonOffset$legalf32,b18];
var FUNCTION_TABLE_vffff = [b19,_emscripten_glRotatef$legalf32,_emscripten_glClearColor$legalf32,_emscripten_glBlendColor$legalf32];
var FUNCTION_TABLE_vfi = [b20,_emscripten_glSampleCoverage$legalf32];
var FUNCTION_TABLE_vi = [b21,__ZN17ColliderComponent4initEv,__ZN17ColliderComponent6updateEv,__ZN9Component4drawEv,__ZN17ColliderComponentD2Ev,__ZN17ColliderComponentD0Ev,__ZN18TransformComponent4initEv,__ZN18TransformComponent6updateEv,__ZN18TransformComponentD2Ev,__ZN18TransformComponentD0Ev,__ZN18KeyboardController4initEv,__ZN18KeyboardController6updateEv,__ZN9ComponentD2Ev,__ZN18KeyboardControllerD0Ev,__ZN15SpriteComponent4initEv,__ZN15SpriteComponent6updateEv,__ZN15SpriteComponent4drawEv,__ZN15SpriteComponentD2Ev,__ZN15SpriteComponentD0Ev,__ZN15PaintController4initEv,__ZN15PaintController6updateEv,__ZN15PaintController4drawEv,__ZN15PaintControllerD2Ev,__ZN15PaintControllerD0Ev,__ZN15CanvasComponent4initEv,__ZN15CanvasComponent6updateEv,__ZN15CanvasComponent4drawEv,__ZN15CanvasComponentD2Ev,__ZN15CanvasComponentD0Ev
,_SDL_Blit_RGB888_RGB888_Scale,_SDL_Blit_RGB888_RGB888_Blend,_SDL_Blit_RGB888_RGB888_Blend_Scale,_SDL_Blit_RGB888_RGB888_Modulate,_SDL_Blit_RGB888_RGB888_Modulate_Scale,_SDL_Blit_RGB888_RGB888_Modulate_Blend,_SDL_Blit_RGB888_RGB888_Modulate_Blend_Scale,_SDL_Blit_RGB888_BGR888_Scale,_SDL_Blit_RGB888_BGR888_Blend,_SDL_Blit_RGB888_BGR888_Blend_Scale,_SDL_Blit_RGB888_BGR888_Modulate,_SDL_Blit_RGB888_BGR888_Modulate_Scale,_SDL_Blit_RGB888_BGR888_Modulate_Blend,_SDL_Blit_RGB888_BGR888_Modulate_Blend_Scale,_SDL_Blit_RGB888_ARGB8888_Scale,_SDL_Blit_RGB888_ARGB8888_Blend,_SDL_Blit_RGB888_ARGB8888_Blend_Scale,_SDL_Blit_RGB888_ARGB8888_Modulate,_SDL_Blit_RGB888_ARGB8888_Modulate_Scale,_SDL_Blit_RGB888_ARGB8888_Modulate_Blend,_SDL_Blit_RGB888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_BGR888_RGB888_Scale,_SDL_Blit_BGR888_RGB888_Blend,_SDL_Blit_BGR888_RGB888_Blend_Scale,_SDL_Blit_BGR888_RGB888_Modulate,_SDL_Blit_BGR888_RGB888_Modulate_Scale,_SDL_Blit_BGR888_RGB888_Modulate_Blend,_SDL_Blit_BGR888_RGB888_Modulate_Blend_Scale,_SDL_Blit_BGR888_BGR888_Scale,_SDL_Blit_BGR888_BGR888_Blend
,_SDL_Blit_BGR888_BGR888_Blend_Scale,_SDL_Blit_BGR888_BGR888_Modulate,_SDL_Blit_BGR888_BGR888_Modulate_Scale,_SDL_Blit_BGR888_BGR888_Modulate_Blend,_SDL_Blit_BGR888_BGR888_Modulate_Blend_Scale,_SDL_Blit_BGR888_ARGB8888_Scale,_SDL_Blit_BGR888_ARGB8888_Blend,_SDL_Blit_BGR888_ARGB8888_Blend_Scale,_SDL_Blit_BGR888_ARGB8888_Modulate,_SDL_Blit_BGR888_ARGB8888_Modulate_Scale,_SDL_Blit_BGR888_ARGB8888_Modulate_Blend,_SDL_Blit_BGR888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_ARGB8888_RGB888_Scale,_SDL_Blit_ARGB8888_RGB888_Blend,_SDL_Blit_ARGB8888_RGB888_Blend_Scale,_SDL_Blit_ARGB8888_RGB888_Modulate,_SDL_Blit_ARGB8888_RGB888_Modulate_Scale,_SDL_Blit_ARGB8888_RGB888_Modulate_Blend,_SDL_Blit_ARGB8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_ARGB8888_BGR888_Scale,_SDL_Blit_ARGB8888_BGR888_Blend,_SDL_Blit_ARGB8888_BGR888_Blend_Scale,_SDL_Blit_ARGB8888_BGR888_Modulate,_SDL_Blit_ARGB8888_BGR888_Modulate_Scale,_SDL_Blit_ARGB8888_BGR888_Modulate_Blend,_SDL_Blit_ARGB8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_ARGB8888_ARGB8888_Scale,_SDL_Blit_ARGB8888_ARGB8888_Blend,_SDL_Blit_ARGB8888_ARGB8888_Blend_Scale,_SDL_Blit_ARGB8888_ARGB8888_Modulate
,_SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale,_SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend,_SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_RGBA8888_RGB888_Scale,_SDL_Blit_RGBA8888_RGB888_Blend,_SDL_Blit_RGBA8888_RGB888_Blend_Scale,_SDL_Blit_RGBA8888_RGB888_Modulate,_SDL_Blit_RGBA8888_RGB888_Modulate_Scale,_SDL_Blit_RGBA8888_RGB888_Modulate_Blend,_SDL_Blit_RGBA8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_RGBA8888_BGR888_Scale,_SDL_Blit_RGBA8888_BGR888_Blend,_SDL_Blit_RGBA8888_BGR888_Blend_Scale,_SDL_Blit_RGBA8888_BGR888_Modulate,_SDL_Blit_RGBA8888_BGR888_Modulate_Scale,_SDL_Blit_RGBA8888_BGR888_Modulate_Blend,_SDL_Blit_RGBA8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_RGBA8888_ARGB8888_Scale,_SDL_Blit_RGBA8888_ARGB8888_Blend,_SDL_Blit_RGBA8888_ARGB8888_Blend_Scale,_SDL_Blit_RGBA8888_ARGB8888_Modulate,_SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale,_SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend,_SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_ABGR8888_RGB888_Scale,_SDL_Blit_ABGR8888_RGB888_Blend,_SDL_Blit_ABGR8888_RGB888_Blend_Scale,_SDL_Blit_ABGR8888_RGB888_Modulate,_SDL_Blit_ABGR8888_RGB888_Modulate_Scale,_SDL_Blit_ABGR8888_RGB888_Modulate_Blend
,_SDL_Blit_ABGR8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_ABGR8888_BGR888_Scale,_SDL_Blit_ABGR8888_BGR888_Blend,_SDL_Blit_ABGR8888_BGR888_Blend_Scale,_SDL_Blit_ABGR8888_BGR888_Modulate,_SDL_Blit_ABGR8888_BGR888_Modulate_Scale,_SDL_Blit_ABGR8888_BGR888_Modulate_Blend,_SDL_Blit_ABGR8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_ABGR8888_ARGB8888_Scale,_SDL_Blit_ABGR8888_ARGB8888_Blend,_SDL_Blit_ABGR8888_ARGB8888_Blend_Scale,_SDL_Blit_ABGR8888_ARGB8888_Modulate,_SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale,_SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend,_SDL_Blit_ABGR8888_ARGB8888_Modulate_Blend_Scale,_SDL_Blit_BGRA8888_RGB888_Scale,_SDL_Blit_BGRA8888_RGB888_Blend,_SDL_Blit_BGRA8888_RGB888_Blend_Scale,_SDL_Blit_BGRA8888_RGB888_Modulate,_SDL_Blit_BGRA8888_RGB888_Modulate_Scale,_SDL_Blit_BGRA8888_RGB888_Modulate_Blend,_SDL_Blit_BGRA8888_RGB888_Modulate_Blend_Scale,_SDL_Blit_BGRA8888_BGR888_Scale,_SDL_Blit_BGRA8888_BGR888_Blend,_SDL_Blit_BGRA8888_BGR888_Blend_Scale,_SDL_Blit_BGRA8888_BGR888_Modulate,_SDL_Blit_BGRA8888_BGR888_Modulate_Scale,_SDL_Blit_BGRA8888_BGR888_Modulate_Blend,_SDL_Blit_BGRA8888_BGR888_Modulate_Blend_Scale,_SDL_Blit_BGRA8888_ARGB8888_Scale
,_SDL_Blit_BGRA8888_ARGB8888_Blend,_SDL_Blit_BGRA8888_ARGB8888_Blend_Scale,_SDL_Blit_BGRA8888_ARGB8888_Modulate,_SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale,_SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend,_SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend_Scale,_BlitNtoN,_Blit_RGB565_ARGB8888,_Blit_RGB565_ABGR8888,_Blit_RGB565_RGBA8888,_Blit_RGB565_BGRA8888,_Blit_RGB888_RGB565,_Blit_RGB888_RGB555,_Blit1to1,_Blit1to2,_Blit1to3,_Blit1to4,_Blit1to1Key,_Blit1to2Key,_Blit1to3Key,_Blit1to4Key,_BlitBto1,_BlitBto2,_BlitBto3,_BlitBto4,_BlitBto1Key,_BlitBto2Key,_BlitBto3Key,_BlitBto4Key,__ZNSt3__28ios_baseD2Ev
,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__211__stdoutbufIwED2Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED2Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED2Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED2Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev
,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILj32EED0Ev,__ZNSt3__217__widen_from_utf8ILj32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev
,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__Z6onLoadPKc,__Z6onFailPKc,_png_set_strip_16,_png_set_packing,_png_set_expand,_png_set_gray_to_rgb,_SDL_free,_SDL_FreeSurface,_GLES2_RenderPresent,_GLES2_DestroyRenderer,_SDL_Blit_Slow,_SDL_BlitCopy,_BlitBtoNAlpha,_BlitBtoNAlphaKey,_Blit1toNAlpha,_Blit1toNAlphaKey,_BlitNtoNPixelAlpha,_BlitARGBto555PixelAlpha,_BlitARGBto565PixelAlpha,_BlitNtoNSurfaceAlpha,_Blit555to555SurfaceAlpha,_Blit565to565SurfaceAlpha,_BlitNtoNSurfaceAlphaKey
,_BlitNto1SurfaceAlphaKey,_BlitNto1PixelAlpha,_BlitRGBtoRGBPixelAlpha,_BlitNto1SurfaceAlpha,_BlitRGBtoRGBSurfaceAlpha,_BlitNtoNCopyAlpha,_Blit4to4CopyAlpha,_Blit_RGB888_index8,_Blit_RGB101010_index8,_BlitNto1,_Blit2101010toN,_BlitNto2101010,_Blit4to4MaskAlpha,_Blit2to2Key,_BlitNto1Key,_BlitNtoNKeyCopyAlpha,_BlitNtoNKey,_SW_RenderPresent,_SW_DestroyRenderer,_Emscripten_VideoQuit,_Emscripten_PumpEvents,_SDL_EGL_UnloadLibrary,_Emscripten_DeleteDevice,_Emscripten_FreeCursor,_EMSCRIPTENAUDIO_CloseDevice,_HandleCaptureProcess,_HandleAudioProcess,_DUMMY_VideoQuit,_DUMMY_PumpEvents,_DUMMY_DeleteDevice
,_DISKAUDIO_WaitDevice,_DISKAUDIO_PlayDevice,_DISKAUDIO_FlushCapture,_DISKAUDIO_CloseDevice,_SDL_HandleSIG,_SDL_AudioLockOrUnlockDeviceWithNoMixerLock,_SDL_AudioThreadInit_Default,_SDL_AudioWaitDevice_Default,_SDL_AudioPlayDevice_Default,_SDL_AudioFlushCapture_Default,_SDL_AudioPrepareToClose_Default,_SDL_AudioCloseDevice_Default,_SDL_AudioLockDevice_Default,_SDL_AudioUnlockDevice_Default,_SDL_AudioFreeDeviceHandle_Default,_emscripten_glDeleteShader,_emscripten_glCompileShader,_emscripten_glDeleteProgram,_emscripten_glLinkProgram,_emscripten_glUseProgram,_emscripten_glValidateProgram,_emscripten_glDeleteObjectARB,_emscripten_glEnableClientState,_emscripten_glClientActiveTexture,_emscripten_glBindVertexArray,_emscripten_glMatrixMode,_emscripten_glLoadMatrixf,_emscripten_glEnableVertexAttribArray,_emscripten_glDisableVertexAttribArray,_emscripten_glDepthFunc
,_emscripten_glEnable,_emscripten_glDisable,_emscripten_glFrontFace,_emscripten_glCullFace,_emscripten_glClear,_emscripten_glClearStencil,_emscripten_glDepthMask,_emscripten_glStencilMask,_emscripten_glGenerateMipmap,_emscripten_glActiveTexture,_emscripten_glBlendEquation,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21];
var FUNCTION_TABLE_vif = [b22,_emscripten_glUniform1f$legalf32,_emscripten_glVertexAttrib1f$legalf32,b22];
var FUNCTION_TABLE_viff = [b23,_emscripten_glUniform2f$legalf32,_emscripten_glVertexAttrib2f$legalf32,b23];
var FUNCTION_TABLE_vifff = [b24,_emscripten_glUniform3f$legalf32,_emscripten_glVertexAttrib3f$legalf32,b24];
var FUNCTION_TABLE_viffff = [b25,_emscripten_glUniform4f$legalf32,_emscripten_glVertexAttrib4f$legalf32,b25];
var FUNCTION_TABLE_vii = [b26,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv
,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEi,__ZNKSt3__28messagesIwE8do_closeEi,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,_emscripten_longjmp,_png_read_info,_png_read_update_info,_png_read_image,_GLES2_WindowEvent,_GLES2_UnlockTexture,_GLES2_DestroyTexture,_SW_WindowEvent,_SW_UnlockTexture,_SW_DestroyTexture,_Emscripten_SetWindowTitle,_Emscripten_SetWindowSize,_Emscripten_DestroyWindow,_Emscripten_DestroyWindowFramebuffer,_Emscripten_GLES_SwapWindow,_Emscripten_GLES_DeleteContext,_SDL_DUMMY_DestroyWindowFramebuffer,_SDL_DestroyWindowTexture,_png_zfree,_png_free
,_zcfree,_emscripten_glPixelStorei,_emscripten_glGetIntegerv,_emscripten_glGetFloatv,_emscripten_glGetBooleanv,_emscripten_glGenTextures,_emscripten_glDeleteTextures,_emscripten_glBindTexture,_emscripten_glGenBuffers,_emscripten_glDeleteBuffers,_emscripten_glGenRenderbuffers,_emscripten_glDeleteRenderbuffers,_emscripten_glBindRenderbuffer,_emscripten_glUniform1i,_emscripten_glBindBuffer,_emscripten_glVertexAttrib1fv,_emscripten_glVertexAttrib2fv,_emscripten_glVertexAttrib3fv,_emscripten_glVertexAttrib4fv,_emscripten_glAttachShader,_emscripten_glDetachShader,_emscripten_glBindFramebuffer,_emscripten_glGenFramebuffers,_emscripten_glDeleteFramebuffers,_emscripten_glBindProgramARB,_emscripten_glGetPointerv,_emscripten_glGenVertexArrays,_emscripten_glDeleteVertexArrays,_emscripten_glVertexAttribDivisor,_emscripten_glBlendFunc
,_emscripten_glBlendEquationSeparate,_emscripten_glStencilMaskSeparate,_emscripten_glHint,_emscripten_glDrawBuffers,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_viif = [b27,_emscripten_glTexParameterf$legalf32];
var FUNCTION_TABLE_viii = [b28,_png_set_read_fn,_png_read_data_323,_png_destroy_read_struct,_Emscripten_WarpMouse,_png_read_filter_row_sub,_png_read_filter_row_up,_png_read_filter_row_avg,_png_read_filter_row_paeth_multibyte_pixel,_png_read_filter_row_paeth_1byte_pixel,_png_default_read_data,_emscripten_glGetTexParameterfv,_emscripten_glGetTexParameteriv,_emscripten_glTexParameterfv,_emscripten_glTexParameteriv,_emscripten_glGetBufferParameteriv,_emscripten_glGetRenderbufferParameteriv,_emscripten_glGetUniformfv,_emscripten_glGetUniformiv,_emscripten_glGetVertexAttribfv,_emscripten_glGetVertexAttribiv,_emscripten_glGetVertexAttribPointerv,_emscripten_glUniform2i,_emscripten_glUniform1iv,_emscripten_glUniform2iv,_emscripten_glUniform3iv,_emscripten_glUniform4iv,_emscripten_glUniform1fv,_emscripten_glUniform2fv
,_emscripten_glUniform3fv,_emscripten_glUniform4fv,_emscripten_glGetShaderiv,_emscripten_glGetProgramiv,_emscripten_glBindAttribLocation,_emscripten_glGetObjectParameterivARB,_emscripten_glNormalPointer,_emscripten_glDrawArrays,_emscripten_glTexParameteri,_emscripten_glStencilFunc,_emscripten_glStencilOp,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28];
var FUNCTION_TABLE_viiii = [b29,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,_SDL_LogOutput,_Emscripten_SetWindowFullscreen,_Emscripten_GLES_GetDrawableSize,_SDL_JoystickAllowBackgroundEventsChanged,_png_set_mem_fn,_png_set_error_fn,_emscripten_glBufferData,_emscripten_glBufferSubData,_emscripten_glUniform3i,_emscripten_glUniformMatrix2fv,_emscripten_glUniformMatrix3fv,_emscripten_glUniformMatrix4fv,_emscripten_glGetAttachedShaders,_emscripten_glShaderSource,_emscripten_glGetShaderSource,_emscripten_glGetShaderInfoLog,_emscripten_glGetShaderPrecisionFormat,_emscripten_glGetProgramInfoLog,_emscripten_glFramebufferRenderbuffer,_emscripten_glGetFramebufferAttachmentParameteriv,_emscripten_glGetInfoLogARB
,_emscripten_glVertexPointer,_emscripten_glTexCoordPointer,_emscripten_glColorPointer,_emscripten_glDrawElements,_emscripten_glDrawArraysInstanced,_emscripten_glViewport,_emscripten_glScissor,_emscripten_glColorMask,_emscripten_glRenderbufferStorage,_emscripten_glBlendFuncSeparate,_emscripten_glStencilFuncSeparate,_emscripten_glStencilOpSeparate,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29];
var FUNCTION_TABLE_viiiii = [b30,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_emscripten_glUniform4i,_emscripten_glFramebufferTexture2D,_emscripten_glShaderBinary,_emscripten_glDrawElementsInstanced];
var FUNCTION_TABLE_viiiiii = [b31,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_emscripten_glDrawRangeElements,_emscripten_glVertexAttribPointer,b31,b31,b31,b31,b31,b31];
var FUNCTION_TABLE_viiiiiii = [b32,_SDL_DrawLine2,_SDL_DrawLine1,_SDL_DrawLine4,_emscripten_glReadPixels,_emscripten_glGetActiveUniform,_emscripten_glGetActiveAttrib,b32];
var FUNCTION_TABLE_viiiiiiii = [b33,_emscripten_glCompressedTexImage2D,_emscripten_glCopyTexImage2D,_emscripten_glCopyTexSubImage2D];
var FUNCTION_TABLE_viiiiiiiii = [b34,_Color16DitherYV12Mod1X,_Color16DitherYV12Mod2X,_Color24DitherYV12Mod1X,_Color24DitherYV12Mod2X,_Color32DitherYV12Mod1X,_Color32DitherYV12Mod2X,_Color16DitherYUY2Mod1X,_Color16DitherYUY2Mod2X,_Color24DitherYUY2Mod1X,_Color24DitherYUY2Mod2X,_Color32DitherYUY2Mod1X,_Color32DitherYUY2Mod2X,_emscripten_glCompressedTexSubImage2D,_emscripten_glTexImage2D,_emscripten_glTexSubImage2D];
var FUNCTION_TABLE_viiiiiiiiiii = [b35,_SDL_BlendLine_RGB2,_SDL_BlendLine_RGB565,_SDL_BlendLine_RGB555,_SDL_BlendLine_RGB888,_SDL_BlendLine_ARGB8888,_SDL_BlendLine_RGB4,_SDL_BlendLine_RGBA4];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_Game_cpp: __GLOBAL__sub_I_Game_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_GetProcAddress: _emscripten_GetProcAddress, _fflush: _fflush, _fileno: _fileno, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _realloc: _realloc, _saveSetjmp: _saveSetjmp, _sbrk: _sbrk, _strstr: _strstr, _testSetjmp: _testSetjmp, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiidii: dynCall_iiiiidii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_v: dynCall_v, dynCall_vd: dynCall_vd, dynCall_vdd: dynCall_vdd, dynCall_vdddddd: dynCall_vdddddd, dynCall_vf: dynCall_vf, dynCall_vff: dynCall_vff, dynCall_vffff: dynCall_vffff, dynCall_vfi: dynCall_vfi, dynCall_vi: dynCall_vi, dynCall_vif: dynCall_vif, dynCall_viff: dynCall_viff, dynCall_vifff: dynCall_vifff, dynCall_viffff: dynCall_viffff, dynCall_vii: dynCall_vii, dynCall_viif: dynCall_viif, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiiii: dynCall_viiiiiiiiiii, emterpret: emterpret, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_Game_cpp = asm["__GLOBAL__sub_I_Game_cpp"]; asm["__GLOBAL__sub_I_Game_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_Game_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"]; asm["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_GetProcAddress.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__fileno = asm["_fileno"]; asm["_fileno"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fileno.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__saveSetjmp.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__strstr = asm["_strstr"]; asm["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strstr.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__testSetjmp.apply(null, arguments);
};

var real_emterpret = asm["emterpret"]; asm["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_emterpret.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
Module["asm"] = asm;
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__I_000101"].apply(null, arguments) };
var __GLOBAL__sub_I_Game_cpp = Module["__GLOBAL__sub_I_Game_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_Game_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_iostream_cpp"].apply(null, arguments) };
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_can_catch"].apply(null, arguments) };
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___muldi3 = Module["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___muldi3"].apply(null, arguments) };
var ___udivdi3 = Module["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___udivdi3"].apply(null, arguments) };
var ___uremdi3 = Module["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___uremdi3"].apply(null, arguments) };
var _bitshift64Lshr = Module["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Lshr"].apply(null, arguments) };
var _bitshift64Shl = Module["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_bitshift64Shl"].apply(null, arguments) };
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments) };
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments) };
var _fileno = Module["_fileno"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fileno"].apply(null, arguments) };
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments) };
var _i64Add = Module["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Add"].apply(null, arguments) };
var _i64Subtract = Module["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i64Subtract"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments) };
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments) };
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_lock"].apply(null, arguments) };
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_unlock"].apply(null, arguments) };
var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_realloc"].apply(null, arguments) };
var _saveSetjmp = Module["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_saveSetjmp"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _strstr = Module["_strstr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strstr"].apply(null, arguments) };
var _testSetjmp = Module["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_testSetjmp"].apply(null, arguments) };
var emterpret = Module["emterpret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["emterpret"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getTempRet0 = Module["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getTempRet0"].apply(null, arguments) };
var runPostSets = Module["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["runPostSets"].apply(null, arguments) };
var setTempRet0 = Module["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setTempRet0"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments) };
var dynCall_iiiiidii = Module["dynCall_iiiiidii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiidii"].apply(null, arguments) };
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments) };
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments) };
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vd = Module["dynCall_vd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vd"].apply(null, arguments) };
var dynCall_vdd = Module["dynCall_vdd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vdd"].apply(null, arguments) };
var dynCall_vdddddd = Module["dynCall_vdddddd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vdddddd"].apply(null, arguments) };
var dynCall_vf = Module["dynCall_vf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vf"].apply(null, arguments) };
var dynCall_vff = Module["dynCall_vff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vff"].apply(null, arguments) };
var dynCall_vffff = Module["dynCall_vffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vffff"].apply(null, arguments) };
var dynCall_vfi = Module["dynCall_vfi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vfi"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments) };
var dynCall_viff = Module["dynCall_viff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viff"].apply(null, arguments) };
var dynCall_vifff = Module["dynCall_vifff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifff"].apply(null, arguments) };
var dynCall_viffff = Module["dynCall_viffff"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viffff"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments) };
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments) };
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiiii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
Module["Pointer_stringify"] = Pointer_stringify;
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });




/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}









