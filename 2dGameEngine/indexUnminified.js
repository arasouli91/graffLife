var Module = typeof Module !== "undefined" ? Module : {};
if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
    Module.finishedDataFileDownloads = 0
}
Module.expectedDataFileDownloads++;
((function() {
    var loadPackage = (function(metadata) {
        var PACKAGE_PATH;
        if (typeof window === "object") {
            PACKAGE_PATH = window["encodeURIComponent"](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf("/")) + "/")
        } else if (typeof location !== "undefined") {
            PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf("/")) + "/")
        } else {
            throw "using preloaded data can only be done on a web page or in a web worker"
        }
        var PACKAGE_NAME = "index.data";
        var REMOTE_PACKAGE_BASE = "index.data";
        if (typeof Module["locateFilePackage"] === "function" && !Module["locateFile"]) {
            Module["locateFile"] = Module["locateFilePackage"];
            Module.printErr("warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)")
        }
        var REMOTE_PACKAGE_NAME = typeof Module["locateFile"] === "function" ? Module["locateFile"](REMOTE_PACKAGE_BASE) : (Module["filePackagePrefixURL"] || "") + REMOTE_PACKAGE_BASE;
        var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
        var PACKAGE_UUID = metadata.package_uuid;

        function fetchRemotePackage(packageName, packageSize, callback, errback) {
            var xhr = new XMLHttpRequest;
            xhr.open("GET", packageName, true);
            xhr.responseType = "arraybuffer";
            xhr.onprogress = (function(event) {
                var url = packageName;
                var size = packageSize;
                if (event.total) size = event.total;
                if (event.loaded) {
                    if (!xhr.addedTotal) {
                        xhr.addedTotal = true;
                        if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
                        Module.dataFileDownloads[url] = {
                            loaded: event.loaded,
                            total: size
                        }
                    } else {
                        Module.dataFileDownloads[url].loaded = event.loaded
                    }
                    var total = 0;
                    var loaded = 0;
                    var num = 0;
                    for (var download in Module.dataFileDownloads) {
                        var data = Module.dataFileDownloads[download];
                        total += data.total;
                        loaded += data.loaded;
                        num++
                    }
                    total = Math.ceil(total * Module.expectedDataFileDownloads / num);
                    if (Module["setStatus"]) Module["setStatus"]("Downloading data... (" + loaded + "/" + total + ")")
                } else if (!Module.dataFileDownloads) {
                    if (Module["setStatus"]) Module["setStatus"]("Downloading data...")
                }
            });
            xhr.onerror = (function(event) {
                throw new Error("NetworkError for: " + packageName)
            });
            xhr.onload = (function(event) {
                if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || xhr.status == 0 && xhr.response) {
                    var packageData = xhr.response;
                    callback(packageData)
                } else {
                    throw new Error(xhr.statusText + " : " + xhr.responseURL)
                }
            });
            xhr.send(null)
        }

        function handleError(error) {
            console.error("package error:", error)
        }
        var fetchedCallback = null;
        var fetched = Module["getPreloadedPackage"] ? Module["getPreloadedPackage"](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;
        if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, (function(data) {
            if (fetchedCallback) {
                fetchedCallback(data);
                fetchedCallback = null
            } else {
                fetched = data
            }
        }), handleError);

        function runWithFS() {
            function assert(check, msg) {
                if (!check) throw msg + (new Error).stack
            }
            Module["FS_createPath"]("/", "assets", true, true);

            function DataRequest(start, end, crunched, audio) {
                this.start = start;
                this.end = end;
                this.crunched = crunched;
                this.audio = audio
            }
            DataRequest.prototype = {
                requests: {},
                open: (function(mode, name) {
                    this.name = name;
                    this.requests[name] = this;
                    Module["addRunDependency"]("fp " + this.name)
                }),
                send: (function() {}),
                onload: (function() {
                    var byteArray = this.byteArray.subarray(this.start, this.end);
                    this.finish(byteArray)
                }),
                finish: (function(byteArray) {
                    var that = this;
                    Module["FS_createPreloadedFile"](this.name, null, byteArray, true, true, (function() {
                        Module["removeRunDependency"]("fp " + that.name)
                    }), (function() {
                        if (that.audio) {
                            Module["removeRunDependency"]("fp " + that.name)
                        } else {
                            Module.printErr("Preloading file " + that.name + " failed")
                        }
                    }), false, true);
                    this.requests[this.name] = null
                })
            };
            var files = metadata.files;
            for (var i = 0; i < files.length; ++i) {
                (new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio)).open("GET", files[i].filename)
            }
            var fileData8 = [];
            fileData8.push.apply(fileData8, [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 2, 218, 0, 0, 1, 156, 8, 6, 0, 0, 0, 231, 7, 7, 223, 0, 0, 32, 0, 73, 68, 65, 84, 120, 156, 237, 221, 237, 149, 219, 56, 182, 46, 224, 119, 102, 221, 255, 170, 12, 168, 27, 65, 57, 3, 242, 68, 96, 159, 8, 168, 27, 129, 59, 3, 105, 34, 176, 39, 2, 213, 68, 80, 221, 17, 80, 29, 65, 217, 17, 72, 142, 160, 236, 8, 116, 127, 168, 56, 150, 101, 145, 220, 27, 196, 198, 23, 223, 103, 45, 174, 153, 238, 166, 0, 112, 23, 8, 130, 32, 8, 254, 3, 233, 170, 1, 188, 3, 240, 48, 178, 207, 151, 183, 237, 91, 144, 18, 17, 17, 17, 17, 17, 101, 168, 2, 176, 5, 208, 1, 56, 43, 183, 35, 128, 61, 128, 54, 120, 169, 137, 136, 136, 136, 136, 18, 245, 8, 183, 206, 245, 208, 246, 138, 75, 135, 157, 136, 136, 136, 136, 104, 145, 42, 248, 237, 96, 223, 235, 112, 127, 12, 118, 52, 68, 68, 68, 68, 68, 9, 216, 226, 210, 17, 182, 234, 100, 95, 111, 29, 46, 163, 230, 68, 68, 68, 68, 68, 197, 90, 225, 50, 151, 58, 68, 7, 251, 118, 116, 187, 14, 112, 124, 68, 68, 68, 68, 68, 193, 173, 0, 188, 32, 124, 39, 251, 122, 107, 205, 143, 146, 136, 136, 136, 136, 40, 176, 103, 196, 237, 100, 247, 27, 167, 145, 16, 17, 17, 17, 81, 49, 98, 76, 23, 25, 155, 70, 194, 206, 54, 17, 17, 17, 17, 101, 239, 35, 226, 119, 174, 111, 183, 23, 92, 166, 178, 16, 17, 17, 17, 17, 101, 169, 70, 252, 78, 245, 208, 246, 108, 120, 220, 68, 68, 68, 68, 68, 102, 86, 184, 124, 177, 49, 118, 135, 122, 108, 171, 205, 142, 158, 136, 136, 136, 136, 200, 200, 39, 196, 239, 72, 79, 109, 71, 179, 163, 39, 34, 34, 34, 34, 50, 80, 33, 126, 39, 90, 186, 181, 70, 49, 32, 34, 34, 34, 34, 242, 46, 135, 209, 108, 142, 106, 19, 17, 17, 17, 81, 86, 86, 8, 247, 121, 117, 95, 219, 123, 147, 72, 16, 17, 17, 17, 209, 98, 253, 211, 32, 205, 15, 0, 30, 12, 210, 181, 244, 33, 118, 1, 136, 136, 136, 136, 136, 166, 164, 242, 5, 72, 205, 246, 106, 18, 9, 34, 34, 34, 34, 34, 143, 114, 155, 54, 210, 111, 252, 90, 36, 17, 17, 17, 17, 121, 227, 123, 234, 72, 133, 252, 166, 141, 244, 154, 216, 5, 32, 34, 34, 34, 162, 114, 248, 238, 104, 175, 61, 167, 23, 82, 174, 55, 8, 68, 68, 68, 68, 148, 32, 223, 29, 237, 198, 115, 122, 33, 53, 177, 11, 64, 68, 68, 68, 68, 229, 176, 88, 117, 132, 136, 136, 136, 136, 104, 241, 216, 209, 38, 34, 34, 34, 34, 50, 192, 142, 54, 17, 17, 17, 17, 145, 1, 118, 180, 137, 136, 136, 136, 136, 12, 248, 238, 104, 127, 247, 156, 94, 72, 57, 151, 157, 136, 136, 136, 136, 18, 227, 187, 163, 253, 197, 115, 122, 33, 229, 92, 118, 34, 34, 34, 34, 74, 140, 239, 142, 246, 201, 115, 122, 33, 157, 98, 23, 128, 136, 136, 136, 136, 202, 225, 187, 163, 253, 13, 249, 78, 193, 224, 136, 54, 17, 17, 17, 17, 121, 99, 241, 50, 228, 193, 32, 77, 107, 223, 1, 124, 141, 93, 8, 34, 34, 34, 34, 42, 135, 69, 71, 251, 79, 131, 52, 173, 229, 88, 102, 34, 34, 34, 34, 74, 24, 59, 218, 23, 135, 216, 5, 32, 34, 34, 34, 34, 146, 216, 3, 56, 103, 178, 189, 26, 197, 128, 136, 136, 136, 136, 200, 187, 10, 241, 59, 208, 210, 237, 163, 81, 12, 136, 136, 136, 136, 136, 76, 124, 66, 252, 78, 244, 212, 118, 52, 59, 122, 34, 34, 34, 34, 34, 35, 43, 92, 58, 178, 177, 59, 211, 99, 219, 123, 179, 163, 39, 34, 34, 34, 34, 50, 84, 35, 126, 103, 122, 104, 219, 27, 30, 55, 17, 17, 17, 17, 145, 185, 45, 226, 119, 170, 111, 183, 23, 92, 70, 220, 137, 136, 136, 136, 136, 178, 182, 71, 252, 206, 117, 191, 189, 2, 120, 180, 61, 92, 34, 34, 34, 34, 162, 112, 82, 120, 57, 242, 8, 118, 178, 137, 136, 136, 136, 168, 64, 45, 56, 93, 132, 136, 136, 136, 136, 200, 68, 139, 203, 244, 13, 118, 178, 137, 136, 136, 136, 136, 60, 123, 196, 165, 243, 27, 162, 147, 253, 17, 236, 100, 19, 17, 17, 17, 209, 130, 172, 112, 233, 4, 91, 141, 110, 191, 128, 243, 177, 137, 136, 136, 136, 104, 193, 86, 184, 172, 74, 226, 171, 195, 253, 2, 126, 136, 134, 136, 136, 136, 136, 232, 191, 86, 184, 204, 223, 126, 134, 190, 211, 125, 196, 101, 85, 147, 58, 120, 169, 137, 136, 136, 136, 136, 50, 243, 136, 75, 199, 251, 136, 241, 78, 54, 71, 175, 137, 136, 136, 136, 136, 148, 30, 49, 61, 154, 189, 143, 86, 58, 34, 34, 34, 34, 162, 76, 237, 33, 155, 58, 194, 41, 35, 68, 68, 68, 68, 68, 10, 210, 185, 218, 71, 112, 9, 63, 34, 34, 34, 34, 34, 49, 205, 11, 145, 156, 66, 66, 68, 68, 68, 68, 36, 32, 153, 159, 205, 23, 35, 137, 136, 136, 136, 136, 148, 62, 66, 223, 209, 126, 5, 167, 144, 16, 17, 17, 17, 17, 141, 122, 134, 219, 7, 107, 158, 99, 20, 150, 136, 136, 136, 136, 40, 23, 115, 190, 20, 201, 41, 36, 68, 68, 68, 68, 68, 119, 184, 204, 207, 230, 20, 18, 34, 34, 34, 34, 74, 198, 63, 99, 23, 96, 64, 51, 243, 247, 15, 0, 254, 244, 80, 14, 34, 34, 34, 34, 162, 162, 116, 152, 55, 162, 221, 111, 31, 67, 23, 156, 136, 136, 136, 136, 40, 101, 62, 58, 217, 253, 20, 146, 42, 112, 217, 137, 136, 136, 136, 136, 146, 84, 195, 95, 71, 251, 140, 203, 232, 56, 17, 17, 17, 17, 81, 80, 41, 206, 209, 110, 12, 210, 227, 20, 18, 34, 34, 34, 34, 90, 60, 95, 243, 179, 57, 133, 132, 136, 136, 136, 136, 232, 138, 239, 78, 118, 191, 189, 132, 60, 8, 34, 34, 34, 34, 162, 148, 248, 158, 159, 125, 187, 109, 195, 29, 10, 17, 17, 17, 17, 81, 58, 62, 193, 182, 163, 125, 198, 229, 99, 56, 68, 68, 68, 68, 68, 139, 242, 2, 251, 142, 54, 167, 144, 16, 17, 17, 17, 209, 162, 172, 96, 223, 201, 230, 20, 18, 34, 34, 34, 34, 90, 156, 247, 8, 215, 209, 230, 20, 18, 34, 34, 34, 34, 50, 149, 210, 58, 218, 77, 224, 252, 254, 196, 101, 20, 157, 136, 136, 136, 136, 168, 104, 33, 230, 103, 223, 110, 159, 130, 28, 25, 17, 17, 17, 17, 81, 36, 62, 231, 103, 191, 42, 247, 175, 3, 28, 31, 17, 17, 17, 17, 81, 20, 45, 252, 117, 180, 181, 115, 189, 187, 0, 199, 71, 68, 68, 68, 68, 20, 197, 30, 254, 58, 218, 0, 240, 172, 252, 13, 95, 140, 36, 34, 34, 34, 162, 34, 29, 225, 183, 163, 189, 82, 166, 249, 209, 248, 248, 136, 136, 136, 136, 136, 130, 171, 224, 175, 147, 125, 126, 75, 15, 208, 125, 206, 125, 111, 123, 136, 68, 68, 68, 68, 180, 52, 41, 44, 239, 215, 120, 78, 111, 253, 246, 191, 127, 3, 120, 18, 254, 230, 157, 231, 50, 16, 17, 17, 17, 209, 194, 149, 216, 209, 190, 118, 16, 238, 247, 14, 92, 83, 155, 136, 136, 136, 136, 60, 42, 189, 163, 253, 69, 177, 47, 71, 181, 137, 136, 136, 136, 200, 155, 216, 29, 237, 22, 63, 167, 122, 88, 248, 10, 224, 187, 112, 223, 198, 176, 28, 68, 68, 68, 68, 180, 48, 177, 59, 218, 59, 225, 126, 135, 25, 121, 72, 71, 181, 57, 162, 77, 68, 68, 68, 68, 222, 196, 236, 104, 107, 70, 179, 15, 112, 239, 108, 75, 127, 199, 142, 54, 17, 17, 17, 17, 121, 19, 179, 163, 189, 83, 236, 123, 152, 145, 143, 116, 68, 123, 13, 190, 16, 73, 68, 68, 68, 68, 158, 196, 234, 104, 107, 70, 179, 79, 184, 44, 213, 247, 224, 152, 151, 230, 133, 200, 198, 49, 15, 34, 34, 34, 34, 162, 36, 104, 190, 218, 216, 190, 253, 70, 186, 127, 125, 39, 191, 87, 225, 111, 183, 94, 143, 146, 136, 136, 136, 136, 40, 160, 22, 242, 78, 243, 241, 234, 119, 115, 58, 218, 207, 194, 223, 118, 222, 142, 146, 136, 136, 136, 136, 22, 45, 198, 212, 145, 157, 209, 190, 99, 184, 242, 8, 17, 17, 17, 17, 21, 237, 35, 220, 70, 179, 161, 248, 221, 189, 17, 237, 90, 241, 251, 202, 199, 129, 18, 17, 17, 17, 17, 133, 178, 130, 124, 174, 244, 245, 220, 236, 222, 156, 142, 246, 74, 241, 251, 247, 30, 142, 149, 136, 136, 136, 136, 40, 152, 45, 220, 71, 179, 161, 248, 237, 144, 163, 240, 247, 91, 247, 67, 36, 34, 34, 34, 34, 10, 107, 238, 104, 54, 20, 191, 29, 194, 23, 34, 137, 136, 136, 136, 168, 56, 115, 71, 179, 43, 197, 239, 125, 148, 129, 136, 136, 136, 136, 40, 121, 218, 209, 236, 123, 115, 172, 107, 197, 239, 135, 104, 210, 120, 116, 60, 86, 34, 34, 34, 34, 34, 0, 97, 150, 247, 251, 3, 242, 175, 58, 30, 112, 249, 10, 164, 5, 77, 186, 92, 230, 143, 136, 136, 136, 136, 146, 230, 99, 52, 27, 144, 143, 70, 79, 205, 175, 126, 17, 166, 243, 73, 123, 160, 68, 68, 68, 68, 68, 215, 172, 71, 180, 125, 141, 102, 251, 26, 97, 230, 135, 107, 136, 136, 136, 136, 40, 8, 203, 142, 118, 5, 127, 95, 129, 148, 118, 214, 167, 72, 59, 218, 141, 167, 252, 136, 136, 136, 136, 104, 161, 44, 59, 218, 59, 197, 190, 7, 248, 153, 155, 61, 213, 145, 150, 118, 180, 129, 225, 105, 44, 68, 68, 68, 68, 68, 147, 172, 58, 218, 21, 128, 141, 98, 255, 221, 196, 127, 151, 78, 229, 248, 62, 241, 223, 249, 66, 36, 17, 17, 17, 17, 5, 97, 213, 209, 222, 41, 246, 61, 96, 186, 3, 236, 107, 234, 72, 159, 159, 4, 59, 218, 68, 68, 68, 68, 148, 20, 205, 199, 101, 164, 107, 86, 31, 133, 105, 73, 166, 123, 124, 18, 166, 245, 34, 72, 139, 136, 136, 136, 136, 40, 152, 61, 228, 157, 236, 189, 48, 205, 185, 203, 3, 94, 107, 21, 233, 17, 17, 17, 17, 17, 37, 65, 59, 154, 93, 9, 210, 92, 121, 78, 239, 81, 145, 30, 95, 136, 36, 34, 34, 34, 162, 36, 88, 140, 102, 215, 138, 52, 165, 164, 233, 109, 21, 105, 18, 17, 17, 17, 17, 153, 208, 140, 20, 75, 71, 159, 1, 224, 189, 48, 189, 87, 69, 89, 59, 97, 154, 207, 138, 52, 137, 136, 136, 136, 136, 254, 203, 231, 170, 35, 59, 197, 190, 79, 0, 190, 9, 247, 149, 174, 254, 161, 89, 35, 251, 224, 57, 111, 34, 34, 34, 34, 162, 95, 248, 236, 104, 55, 138, 125, 119, 138, 125, 215, 194, 253, 78, 138, 52, 165, 157, 242, 53, 46, 115, 196, 137, 136, 136, 136, 136, 84, 124, 118, 180, 165, 107, 93, 63, 65, 62, 154, 13, 196, 237, 104, 107, 242, 39, 34, 34, 34, 34, 50, 33, 125, 17, 82, 58, 55, 187, 247, 42, 76, 183, 85, 166, 123, 20, 164, 169, 153, 247, 77, 68, 68, 68, 68, 100, 66, 242, 50, 164, 118, 21, 15, 205, 210, 126, 218, 165, 248, 62, 26, 148, 151, 136, 136, 136, 136, 200, 68, 11, 191, 43, 120, 88, 44, 237, 119, 109, 108, 245, 145, 189, 99, 154, 68, 68, 68, 68, 68, 38, 106, 92, 70, 130, 187, 183, 237, 25, 250, 105, 29, 61, 201, 168, 243, 220, 41, 30, 31, 241, 251, 180, 23, 142, 100, 19, 17, 17, 17, 81, 209, 164, 243, 190, 187, 88, 5, 36, 34, 34, 34, 34, 202, 141, 102, 218, 200, 167, 72, 101, 36, 34, 34, 34, 34, 186, 203, 231, 242, 126, 190, 61, 41, 246, 253, 110, 85, 8, 34, 34, 34, 34, 34, 23, 169, 118, 180, 183, 208, 173, 95, 205, 142, 54, 17, 17, 17, 17, 209, 4, 201, 50, 129, 92, 134, 143, 136, 136, 136, 136, 146, 150, 226, 136, 246, 83, 236, 2, 16, 17, 17, 17, 17, 149, 102, 11, 253, 104, 182, 235, 26, 221, 68, 68, 68, 68, 68, 139, 80, 193, 173, 147, 205, 229, 253, 136, 136, 136, 136, 40, 57, 41, 77, 29, 121, 138, 93, 0, 34, 34, 34, 34, 162, 210, 72, 191, 0, 105, 241, 101, 72, 34, 34, 34, 34, 162, 34, 85, 184, 116, 148, 231, 116, 180, 207, 193, 75, 77, 68, 68, 68, 68, 148, 184, 14, 243, 59, 217, 236, 104, 19, 17, 17, 17, 17, 93, 105, 225, 167, 147, 125, 198, 101, 253, 109, 34, 34, 34, 34, 162, 197, 91, 193, 207, 148, 145, 126, 171, 195, 22, 159, 136, 136, 136, 136, 104, 88, 204, 85, 71, 158, 0, 60, 68, 204, 159, 136, 136, 136, 136, 200, 76, 172, 142, 246, 123, 0, 31, 60, 167, 217, 120, 78, 143, 136, 136, 136, 136, 200, 89, 140, 142, 246, 10, 92, 51, 155, 136, 136, 136, 136, 10, 23, 163, 163, 253, 25, 186, 41, 35, 39, 163, 114, 16, 17, 17, 17, 17, 21, 163, 134, 238, 5, 199, 23, 0, 91, 225, 190, 252, 12, 59, 17, 17, 17, 17, 37, 227, 255, 4, 204, 203, 101, 202, 200, 6, 124, 97, 146, 136, 136, 136, 136, 50, 20, 114, 234, 200, 14, 192, 90, 185, 255, 87, 139, 130, 16, 17, 17, 17, 17, 149, 194, 101, 202, 136, 203, 111, 137, 136, 136, 136, 136, 22, 99, 5, 224, 136, 121, 95, 121, 100, 71, 155, 136, 136, 136, 136, 232, 134, 244, 101, 198, 126, 251, 116, 39, 13, 118, 180, 137, 136, 136, 136, 136, 174, 60, 66, 215, 201, 62, 226, 50, 2, 126, 139, 159, 97, 39, 34, 34, 34, 34, 186, 242, 2, 93, 71, 123, 168, 163, 220, 205, 252, 61, 17, 17, 17, 17, 81, 80, 150, 171, 142, 108, 1, 188, 83, 236, 255, 25, 192, 223, 70, 101, 33, 34, 34, 34, 34, 42, 130, 175, 41, 35, 61, 233, 136, 246, 214, 255, 161, 16, 17, 17, 17, 17, 233, 89, 141, 104, 127, 86, 238, 191, 1, 240, 99, 228, 191, 31, 156, 75, 66, 68, 68, 68, 68, 20, 129, 69, 71, 251, 35, 128, 70, 177, 255, 159, 240, 55, 101, 132, 95, 145, 36, 34, 34, 34, 162, 34, 85, 0, 94, 33, 159, 50, 242, 138, 241, 41, 35, 189, 143, 194, 244, 58, 127, 135, 66, 68, 68, 68, 68, 228, 206, 247, 136, 246, 19, 116, 163, 202, 27, 140, 79, 25, 233, 125, 113, 41, 12, 17, 17, 17, 17, 81, 9, 164, 163, 206, 253, 246, 172, 72, 187, 22, 166, 249, 50, 148, 0, 17, 17, 17, 17, 81, 142, 86, 176, 153, 50, 210, 211, 172, 98, 66, 68, 68, 68, 68, 84, 140, 103, 232, 70, 179, 63, 58, 228, 193, 142, 54, 17, 17, 17, 17, 45, 202, 123, 232, 58, 217, 174, 47, 44, 74, 211, 215, 140, 148, 19, 17, 17, 17, 17, 37, 235, 8, 221, 148, 145, 202, 49, 31, 233, 212, 148, 218, 49, 125, 34, 34, 34, 34, 34, 111, 230, 174, 58, 242, 8, 96, 173, 216, 127, 7, 224, 155, 99, 94, 92, 121, 132, 136, 136, 136, 136, 178, 49, 183, 163, 253, 65, 177, 239, 1, 192, 191, 103, 230, 39, 193, 143, 214, 16, 17, 17, 17, 81, 116, 115, 59, 218, 141, 98, 223, 63, 102, 230, 245, 93, 184, 95, 51, 51, 31, 34, 34, 34, 34, 162, 168, 86, 144, 207, 205, 222, 122, 200, 111, 43, 204, 235, 232, 33, 47, 34, 34, 34, 34, 162, 104, 164, 171, 141, 248, 234, 248, 106, 62, 136, 195, 23, 34, 137, 136, 136, 136, 40, 170, 57, 83, 71, 26, 225, 126, 135, 25, 121, 184, 166, 179, 241, 148, 39, 17, 17, 17, 17, 81, 112, 210, 101, 253, 222, 123, 204, 243, 69, 152, 39, 215, 211, 38, 34, 34, 34, 162, 44, 85, 136, 211, 225, 213, 76, 31, 113, 249, 250, 36, 17, 17, 17, 17, 81, 84, 210, 14, 239, 139, 231, 124, 53, 47, 96, 250, 206, 155, 136, 136, 136, 136, 72, 204, 117, 142, 118, 35, 220, 239, 79, 199, 244, 135, 252, 0, 240, 36, 220, 247, 29, 46, 31, 212, 33, 34, 34, 34, 34, 202, 134, 244, 115, 232, 22, 29, 221, 90, 152, 247, 25, 192, 222, 32, 127, 34, 34, 34, 34, 34, 19, 210, 142, 238, 171, 97, 25, 164, 47, 98, 190, 130, 47, 69, 18, 17, 17, 17, 81, 4, 46, 83, 71, 26, 225, 126, 7, 135, 180, 165, 158, 132, 251, 61, 64, 247, 153, 120, 34, 34, 34, 34, 162, 104, 164, 75, 236, 181, 134, 101, 208, 172, 122, 210, 25, 150, 131, 136, 136, 136, 136, 200, 11, 205, 170, 31, 149, 113, 89, 158, 19, 42, 11, 17, 17, 17, 17, 209, 44, 161, 63, 187, 238, 163, 44, 103, 0, 159, 2, 148, 135, 136, 136, 136, 136, 200, 217, 30, 105, 117, 108, 165, 171, 159, 88, 190, 152, 73, 68, 68, 68, 68, 244, 27, 237, 203, 144, 141, 112, 191, 131, 50, 93, 87, 79, 194, 253, 30, 224, 247, 83, 240, 68, 68, 68, 68, 68, 222, 60, 66, 62, 85, 35, 212, 146, 122, 154, 151, 34, 159, 3, 149, 137, 136, 136, 136, 136, 72, 69, 250, 217, 245, 208, 171, 124, 116, 194, 114, 241, 165, 72, 34, 34, 34, 34, 10, 70, 51, 117, 164, 17, 238, 231, 251, 179, 235, 83, 158, 20, 251, 110, 140, 202, 64, 68, 68, 68, 68, 228, 76, 58, 106, 108, 241, 217, 245, 49, 43, 200, 95, 138, 12, 177, 26, 10, 17, 17, 17, 17, 145, 88, 141, 180, 87, 247, 144, 174, 134, 114, 198, 229, 88, 136, 136, 136, 136, 136, 76, 73, 167, 142, 72, 63, 99, 30, 122, 218, 72, 239, 179, 98, 223, 141, 85, 33, 136, 136, 136, 136, 136, 180, 82, 248, 236, 250, 20, 105, 25, 67, 174, 138, 66, 68, 68, 68, 68, 52, 40, 165, 207, 174, 143, 145, 174, 138, 114, 126, 219, 151, 136, 136, 136, 136, 40, 170, 22, 178, 206, 235, 75, 172, 2, 190, 209, 220, 16, 196, 46, 43, 17, 17, 17, 17, 21, 78, 50, 71, 187, 17, 166, 117, 112, 47, 134, 23, 63, 32, 95, 234, 239, 29, 194, 175, 142, 66, 68, 68, 68, 68, 244, 11, 233, 210, 121, 41, 124, 226, 92, 186, 58, 202, 25, 151, 149, 74, 136, 136, 136, 136, 136, 162, 208, 124, 118, 61, 21, 71, 200, 151, 34, 228, 75, 145, 68, 68, 68, 68, 100, 98, 106, 234, 72, 35, 76, 39, 214, 178, 126, 247, 60, 9, 247, 123, 128, 124, 217, 66, 34, 34, 34, 34, 34, 175, 58, 228, 183, 138, 71, 5, 249, 40, 124, 23, 169, 140, 68, 68, 68, 68, 180, 112, 210, 14, 107, 106, 47, 22, 62, 35, 143, 37, 9, 137, 136, 136, 136, 104, 129, 222, 67, 214, 81, 61, 198, 42, 224, 8, 105, 217, 207, 0, 62, 69, 42, 35, 17, 17, 17, 17, 45, 212, 39, 228, 189, 122, 135, 116, 181, 148, 215, 88, 5, 36, 34, 34, 34, 162, 114, 141, 189, 12, 217, 8, 211, 56, 204, 47, 134, 137, 39, 225, 126, 15, 72, 99, 105, 66, 34, 34, 34, 34, 90, 0, 205, 11, 133, 169, 46, 145, 167, 57, 134, 231, 72, 101, 36, 34, 34, 34, 162, 133, 105, 33, 235, 160, 166, 254, 41, 115, 233, 170, 41, 124, 41, 146, 136, 136, 136, 136, 188, 26, 154, 58, 34, 93, 95, 250, 224, 169, 28, 86, 158, 20, 251, 110, 140, 202, 64, 68, 68, 68, 68, 244, 95, 210, 23, 9, 235, 88, 5, 20, 90, 65, 126, 44, 41, 174, 158, 66, 68, 68, 68, 68, 5, 145, 126, 118, 61, 151, 213, 58, 246, 144, 79, 31, 73, 253, 198, 129, 136, 136, 136, 136, 50, 113, 111, 234, 72, 41, 211, 70, 122, 159, 21, 251, 110, 172, 10, 65, 68, 68, 68, 68, 36, 125, 129, 48, 165, 207, 174, 79, 121, 65, 254, 171, 168, 16, 17, 17, 17, 81, 198, 86, 40, 115, 149, 142, 143, 144, 31, 87, 78, 55, 16, 68, 68, 68, 68, 148, 137, 156, 63, 187, 62, 70, 115, 3, 145, 250, 146, 133, 68, 68, 68, 68, 148, 129, 219, 57, 218, 141, 240, 119, 7, 191, 197, 48, 247, 3, 242, 165, 254, 222, 225, 242, 66, 40, 17, 17, 17, 17, 145, 55, 71, 200, 70, 125, 115, 252, 100, 121, 13, 249, 168, 246, 62, 82, 25, 137, 136, 136, 136, 168, 64, 21, 202, 127, 97, 80, 122, 35, 241, 138, 124, 143, 145, 136, 136, 136, 136, 18, 112, 61, 117, 68, 186, 172, 223, 23, 92, 166, 98, 228, 232, 73, 184, 223, 3, 228, 241, 32, 34, 34, 34, 34, 26, 245, 12, 217, 104, 239, 54, 86, 1, 61, 208, 140, 218, 119, 145, 202, 72, 68, 68, 68, 68, 133, 145, 126, 170, 60, 247, 23, 5, 165, 55, 20, 185, 45, 97, 72, 68, 68, 68, 68, 9, 146, 190, 40, 152, 203, 103, 215, 199, 72, 151, 48, 60, 131, 159, 100, 39, 34, 34, 34, 34, 71, 247, 62, 193, 62, 230, 96, 81, 136, 192, 254, 2, 240, 61, 118, 33, 136, 136, 136, 136, 168, 108, 125, 71, 91, 218, 241, 60, 24, 149, 35, 180, 207, 130, 125, 190, 227, 242, 226, 39, 17, 17, 17, 17, 209, 44, 123, 44, 103, 201, 187, 21, 166, 231, 164, 183, 209, 74, 71, 68, 68, 68, 68, 69, 89, 225, 242, 249, 241, 161, 78, 118, 105, 243, 149, 91, 240, 131, 53, 68, 68, 68, 68, 100, 228, 31, 55, 255, 188, 2, 240, 7, 126, 126, 138, 253, 132, 203, 218, 211, 57, 175, 157, 61, 166, 2, 176, 193, 229, 179, 235, 15, 111, 255, 238, 9, 192, 127, 34, 149, 135, 136, 136, 136, 136, 10, 113, 219, 209, 78, 73, 141, 95, 59, 192, 247, 124, 121, 219, 190, 5, 41, 17, 17, 17, 17, 17, 165, 106, 133, 75, 223, 177, 153, 216, 239, 128, 64, 131, 200, 41, 117, 180, 251, 209, 229, 6, 211, 1, 186, 117, 194, 37, 104, 7, 148, 63, 26, 93, 227, 18, 159, 7, 92, 42, 211, 144, 211, 219, 246, 5, 151, 184, 148, 248, 68, 130, 136, 136, 202, 240, 136, 225, 129, 181, 239, 0, 190, 6, 44, 75, 74, 42, 252, 236, 23, 189, 195, 248, 117, 191, 95, 196, 225, 240, 182, 253, 109, 90, 178, 116, 212, 184, 124, 205, 187, 193, 120, 124, 238, 233, 227, 245, 39, 140, 226, 149, 66, 71, 251, 17, 192, 14, 254, 62, 121, 254, 29, 151, 85, 69, 254, 229, 41, 189, 20, 188, 199, 37, 62, 155, 25, 105, 28, 112, 153, 22, 115, 64, 217, 79, 0, 248, 36, 228, 62, 54, 214, 50, 201, 141, 134, 36, 230, 17, 191, 214, 163, 245, 200, 190, 75, 173, 71, 43, 252, 26, 163, 102, 98, 255, 3, 126, 141, 211, 18, 234, 212, 10, 63, 59, 70, 13, 198, 235, 209, 181, 19, 126, 198, 233, 79, 148, 27, 171, 21, 46, 215, 251, 63, 32, 143, 205, 144, 167, 183, 173, 196, 243, 239, 61, 46, 253, 189, 181, 167, 244, 78, 184, 196, 252, 47, 79, 233, 69, 87, 65, 247, 149, 70, 237, 246, 10, 224, 99, 176, 163, 177, 209, 2, 56, 194, 127, 92, 182, 40, 103, 5, 153, 10, 151, 227, 233, 160, 143, 197, 17, 151, 23, 95, 75, 93, 97, 102, 133, 203, 57, 224, 163, 14, 237, 81, 222, 11, 209, 189, 26, 192, 39, 12, 191, 12, 62, 182, 189, 188, 253, 182, 212, 216, 0, 151, 122, 180, 133, 191, 122, 148, 251, 215, 133, 135, 180, 112, 107, 135, 110, 183, 14, 229, 182, 73, 21, 46, 215, 125, 233, 151, 168, 167, 174, 101, 207, 40, 235, 11, 206, 125, 155, 237, 35, 62, 183, 219, 51, 202, 105, 167, 106, 248, 239, 27, 93, 111, 71, 20, 16, 171, 247, 176, 169, 72, 67, 141, 86, 110, 13, 251, 35, 220, 46, 250, 218, 70, 234, 125, 168, 3, 50, 240, 8, 191, 55, 106, 253, 13, 72, 9, 216, 88, 203, 188, 135, 223, 198, 250, 136, 188, 207, 169, 91, 125, 7, 219, 162, 253, 121, 70, 126, 237, 242, 144, 22, 54, 237, 245, 11, 202, 233, 112, 87, 176, 29, 88, 43, 161, 195, 93, 195, 182, 243, 216, 111, 159, 144, 239, 64, 219, 10, 211, 75, 81, 251, 220, 246, 200, 52, 86, 31, 17, 46, 72, 253, 150, 211, 242, 132, 33, 43, 209, 25, 151, 198, 60, 167, 138, 84, 129, 79, 66, 198, 212, 96, 99, 61, 197, 58, 70, 71, 228, 211, 222, 12, 105, 17, 102, 48, 228, 83, 168, 3, 50, 80, 193, 207, 8, 246, 212, 214, 33, 239, 78, 228, 22, 246, 49, 234, 183, 109, 160, 99, 242, 109, 143, 112, 49, 58, 227, 114, 110, 231, 118, 163, 91, 193, 126, 0, 242, 222, 246, 130, 204, 206, 191, 208, 149, 233, 118, 107, 237, 15, 209, 217, 10, 97, 26, 237, 123, 219, 17, 121, 156, 116, 124, 18, 50, 46, 244, 249, 149, 91, 99, 205, 209, 16, 153, 208, 245, 40, 183, 155, 125, 96, 252, 59, 12, 86, 91, 27, 228, 200, 252, 169, 192, 142, 209, 148, 152, 215, 253, 87, 228, 83, 167, 30, 17, 238, 218, 63, 20, 171, 44, 174, 117, 49, 70, 178, 239, 109, 169, 6, 43, 70, 131, 116, 91, 145, 82, 110, 156, 248, 36, 100, 24, 27, 235, 105, 21, 120, 209, 159, 194, 155, 125, 153, 79, 136, 19, 163, 51, 242, 121, 2, 192, 142, 145, 76, 236, 235, 254, 25, 233, 79, 119, 91, 33, 204, 83, 90, 73, 27, 149, 244, 128, 64, 139, 248, 65, 74, 249, 4, 220, 35, 126, 92, 206, 72, 119, 100, 41, 118, 124, 90, 251, 67, 156, 133, 141, 245, 56, 94, 244, 101, 98, 215, 163, 212, 111, 246, 129, 184, 157, 236, 126, 75, 189, 179, 205, 142, 145, 204, 30, 241, 99, 212, 159, 119, 169, 182, 79, 43, 196, 111, 151, 174, 183, 84, 251, 72, 120, 143, 248, 193, 185, 87, 177, 42, 203, 131, 86, 72, 161, 225, 190, 173, 72, 41, 225, 147, 144, 113, 123, 196, 143, 77, 127, 78, 165, 24, 35, 94, 244, 101, 82, 169, 71, 201, 94, 200, 144, 214, 128, 81, 107, 124, 172, 174, 216, 49, 146, 217, 34, 126, 108, 174, 183, 148, 250, 68, 215, 44, 223, 199, 114, 221, 246, 166, 71, 236, 160, 66, 220, 145, 164, 169, 19, 48, 182, 22, 241, 227, 144, 114, 69, 74, 41, 62, 41, 118, 36, 83, 187, 73, 123, 69, 90, 23, 53, 94, 244, 101, 82, 171, 71, 41, 180, 205, 183, 90, 196, 143, 203, 237, 150, 226, 83, 36, 118, 140, 166, 165, 56, 248, 216, 159, 119, 41, 181, 79, 91, 196, 143, 201, 208, 150, 212, 130, 9, 29, 226, 7, 100, 108, 219, 218, 29, 250, 164, 10, 233, 222, 132, 156, 17, 191, 17, 127, 68, 252, 24, 220, 110, 71, 164, 211, 16, 181, 136, 31, 143, 123, 91, 74, 157, 164, 20, 47, 250, 41, 197, 7, 72, 183, 30, 237, 45, 15, 90, 41, 197, 182, 232, 140, 244, 110, 254, 183, 136, 31, 147, 161, 45, 149, 142, 209, 10, 105, 95, 247, 83, 153, 150, 148, 234, 57, 119, 125, 238, 37, 209, 23, 104, 17, 63, 24, 146, 173, 178, 10, 192, 132, 78, 81, 198, 165, 85, 164, 148, 27, 163, 206, 240, 184, 165, 42, 164, 27, 159, 51, 210, 88, 98, 107, 139, 248, 113, 24, 218, 82, 185, 152, 165, 94, 143, 98, 223, 236, 3, 233, 76, 61, 26, 218, 58, 187, 67, 87, 97, 199, 72, 38, 181, 167, 71, 247, 182, 218, 236, 232, 229, 82, 122, 18, 57, 180, 237, 205, 142, 94, 225, 136, 248, 129, 72, 53, 88, 237, 140, 242, 150, 30, 27, 32, 205, 145, 200, 235, 45, 246, 232, 72, 135, 248, 49, 24, 219, 98, 207, 247, 139, 253, 242, 163, 100, 171, 205, 142, 94, 46, 135, 122, 20, 187, 115, 148, 67, 199, 104, 107, 118, 244, 114, 236, 24, 77, 171, 16, 63, 6, 146, 237, 104, 21, 0, 161, 22, 241, 99, 32, 221, 42, 163, 24, 136, 228, 20, 168, 24, 193, 58, 122, 44, 123, 105, 177, 73, 117, 254, 218, 245, 22, 179, 35, 217, 10, 203, 24, 123, 219, 91, 5, 64, 160, 27, 41, 87, 42, 219, 209, 236, 232, 101, 88, 143, 166, 85, 35, 229, 74, 105, 139, 125, 67, 146, 75, 93, 58, 35, 110, 199, 104, 63, 82, 174, 212, 182, 214, 40, 6, 18, 57, 220, 180, 245, 219, 222, 40, 6, 34, 199, 129, 66, 165, 186, 133, 12, 86, 109, 120, 28, 22, 219, 214, 38, 12, 131, 114, 169, 59, 33, 235, 204, 181, 92, 226, 115, 70, 156, 139, 90, 61, 163, 188, 161, 183, 214, 40, 6, 18, 172, 71, 211, 246, 138, 50, 198, 222, 182, 70, 49, 144, 96, 199, 104, 90, 165, 40, 99, 10, 91, 103, 19, 134, 73, 181, 162, 140, 169, 108, 81, 110, 114, 115, 171, 80, 103, 132, 29, 93, 74, 125, 90, 196, 237, 246, 106, 19, 134, 187, 114, 24, 205, 190, 222, 66, 159, 96, 181, 199, 178, 135, 216, 246, 54, 97, 24, 213, 205, 40, 111, 232, 237, 104, 20, 131, 41, 185, 213, 163, 173, 77, 24, 70, 85, 51, 202, 27, 99, 11, 217, 78, 95, 203, 173, 46, 157, 17, 167, 99, 148, 202, 50, 181, 154, 45, 198, 139, 182, 251, 25, 229, 141, 181, 181, 38, 145, 152, 144, 99, 133, 10, 85, 169, 86, 17, 143, 111, 206, 22, 234, 165, 164, 46, 224, 49, 249, 216, 182, 54, 97, 24, 196, 155, 180, 113, 149, 199, 178, 135, 218, 90, 147, 72, 140, 99, 61, 154, 182, 157, 81, 222, 88, 91, 140, 151, 71, 247, 51, 202, 27, 107, 107, 77, 34, 49, 46, 167, 81, 255, 126, 139, 241, 210, 118, 234, 239, 214, 220, 219, 158, 167, 14, 234, 159, 142, 193, 24, 243, 193, 32, 205, 16, 66, 148, 187, 9, 144, 135, 133, 38, 64, 30, 85, 160, 124, 124, 218, 4, 204, 107, 133, 252, 206, 173, 7, 132, 189, 248, 231, 22, 31, 32, 124, 157, 103, 61, 146, 201, 45, 70, 64, 156, 50, 51, 78, 211, 86, 0, 222, 5, 206, 211, 135, 38, 112, 126, 143, 184, 156, 235, 185, 105, 166, 118, 176, 232, 104, 231, 88, 161, 128, 48, 229, 102, 108, 134, 229, 216, 96, 175, 17, 238, 241, 90, 19, 40, 31, 223, 154, 128, 121, 229, 88, 135, 66, 151, 185, 9, 156, 159, 47, 77, 192, 188, 42, 228, 217, 86, 55, 129, 243, 43, 182, 99, 148, 121, 126, 190, 132, 62, 7, 114, 60, 231, 128, 203, 57, 48, 218, 15, 240, 221, 209, 94, 33, 207, 19, 15, 184, 116, 154, 172, 53, 1, 242, 176, 208, 20, 146, 135, 133, 38, 80, 62, 185, 54, 66, 77, 161, 121, 249, 242, 128, 176, 75, 253, 229, 90, 143, 66, 150, 59, 215, 24, 173, 17, 118, 254, 113, 174, 113, 154, 236, 24, 121, 150, 107, 156, 128, 176, 109, 211, 58, 96, 94, 190, 141, 246, 123, 125, 119, 180, 115, 174, 80, 33, 202, 190, 14, 144, 135, 149, 202, 56, 253, 92, 235, 78, 168, 114, 55, 129, 242, 241, 45, 84, 124, 82, 250, 66, 158, 86, 200, 186, 223, 4, 204, 203, 167, 38, 96, 94, 185, 182, 69, 64, 216, 178, 175, 3, 230, 229, 91, 200, 1, 193, 117, 192, 188, 124, 91, 7, 204, 171, 9, 152, 151, 111, 205, 216, 127, 180, 152, 58, 66, 195, 214, 177, 11, 48, 195, 58, 243, 244, 173, 172, 11, 203, 199, 130, 245, 77, 26, 144, 119, 124, 214, 133, 230, 229, 91, 136, 122, 4, 176, 163, 45, 213, 4, 204, 203, 183, 38, 96, 94, 235, 128, 121, 249, 182, 142, 93, 128, 18, 176, 163, 77, 41, 8, 249, 120, 202, 183, 38, 80, 62, 235, 64, 249, 88, 88, 7, 200, 131, 157, 35, 153, 117, 192, 188, 124, 91, 7, 202, 39, 215, 233, 143, 64, 222, 101, 39, 42, 18, 59, 218, 68, 68, 68, 68, 68, 6, 216, 209, 38, 34, 34, 34, 34, 50, 224, 187, 163, 125, 242, 156, 94, 72, 167, 216, 5, 32, 34, 34, 34, 90, 160, 239, 177, 11, 48, 195, 104, 217, 125, 119, 180, 191, 121, 78, 47, 164, 83, 128, 60, 190, 4, 200, 195, 74, 206, 101, 39, 34, 34, 191, 138, 237, 24, 121, 150, 243, 181, 51, 100, 217, 139, 141, 147, 197, 212, 145, 92, 131, 21, 162, 220, 57, 55, 76, 63, 12, 211, 206, 57, 46, 161, 202, 158, 235, 121, 5, 132, 41, 251, 41, 64, 30, 86, 78, 1, 243, 98, 61, 154, 118, 8, 148, 143, 133, 67, 192, 188, 88, 151, 100, 120, 125, 147, 57, 5, 204, 203, 183, 160, 35, 218, 64, 190, 39, 95, 136, 114, 31, 2, 228, 97, 225, 96, 156, 254, 87, 227, 244, 45, 133, 170, 239, 57, 55, 214, 150, 55, 105, 189, 83, 128, 60, 172, 156, 2, 230, 197, 122, 52, 45, 231, 24, 133, 116, 138, 93, 128, 25, 66, 254, 141, 15, 1, 243, 242, 237, 239, 128, 121, 229, 218, 119, 252, 142, 137, 62, 140, 69, 71, 251, 96, 144, 102, 8, 135, 0, 121, 228, 90, 145, 56, 34, 57, 236, 20, 40, 159, 67, 160, 124, 124, 11, 85, 231, 79, 129, 242, 177, 16, 178, 93, 56, 4, 204, 203, 167, 67, 192, 188, 114, 109, 167, 1, 118, 140, 36, 38, 59, 70, 158, 229, 26, 167, 208, 229, 254, 138, 60, 111, 114, 15, 83, 59, 88, 116, 180, 255, 52, 72, 211, 218, 23, 132, 153, 95, 126, 8, 144, 135, 133, 67, 128, 60, 216, 24, 165, 145, 143, 111, 135, 64, 249, 124, 67, 190, 157, 109, 206, 131, 156, 22, 178, 220, 33, 59, 171, 62, 29, 2, 231, 87, 108, 199, 200, 179, 31, 200, 243, 188, 59, 68, 200, 51, 199, 254, 227, 97, 106, 7, 139, 142, 246, 15, 228, 23, 172, 167, 64, 249, 228, 24, 155, 239, 0, 254, 10, 144, 207, 33, 64, 30, 22, 14, 133, 229, 227, 219, 161, 208, 188, 124, 57, 33, 236, 75, 228, 135, 128, 121, 249, 116, 8, 156, 95, 110, 237, 52, 192, 142, 145, 212, 33, 66, 158, 57, 198, 233, 115, 132, 60, 115, 140, 211, 83, 172, 140, 107, 0, 231, 76, 182, 87, 0, 43, 155, 48, 220, 213, 26, 29, 135, 213, 182, 183, 9, 195, 111, 170, 128, 199, 228, 107, 59, 154, 68, 98, 216, 179, 199, 178, 135, 216, 120, 110, 77, 111, 159, 76, 34, 49, 46, 199, 122, 20, 90, 142, 117, 169, 50, 137, 196, 184, 247, 51, 202, 27, 107, 11, 217, 38, 245, 170, 25, 229, 141, 177, 29, 109, 194, 32, 114, 28, 41, 87, 106, 219, 179, 81, 12, 196, 58, 196, 15, 130, 100, 219, 90, 5, 96, 68, 78, 21, 169, 50, 138, 193, 61, 47, 134, 199, 97, 177, 133, 238, 36, 181, 30, 203, 30, 98, 219, 219, 132, 97, 212, 235, 140, 242, 198, 216, 30, 109, 194, 48, 138, 245, 104, 218, 10, 121, 213, 165, 23, 155, 48, 136, 28, 71, 202, 149, 218, 22, 179, 99, 212, 141, 148, 43, 181, 173, 53, 138, 129, 68, 59, 82, 174, 212, 182, 218, 40, 6, 98, 53, 226, 7, 97, 106, 11, 61, 226, 214, 203, 165, 34, 237, 173, 2, 48, 32, 151, 184, 244, 91, 101, 19, 134, 81, 199, 25, 229, 13, 189, 213, 70, 49, 24, 179, 159, 81, 222, 208, 91, 103, 20, 3, 137, 156, 234, 81, 101, 20, 131, 41, 91, 69, 25, 99, 111, 173, 81, 12, 36, 218, 145, 114, 165, 182, 213, 70, 49, 144, 168, 70, 202, 149, 210, 118, 180, 10, 128, 194, 17, 241, 227, 48, 181, 117, 102, 71, 175, 180, 71, 252, 96, 140, 109, 173, 221, 161, 79, 74, 125, 244, 246, 21, 236, 72, 142, 109, 123, 171, 0, 76, 104, 21, 101, 140, 185, 117, 86, 1, 152, 80, 41, 202, 24, 123, 171, 141, 98, 32, 145, 75, 61, 218, 91, 5, 64, 32, 151, 81, 237, 163, 85, 0, 20, 142, 136, 31, 135, 169, 173, 51, 59, 122, 185, 61, 226, 199, 97, 106, 171, 205, 142, 94, 174, 70, 252, 56, 76, 109, 149, 217, 209, 43, 173, 144, 238, 9, 24, 123, 110, 77, 234, 21, 105, 107, 119, 232, 163, 90, 69, 25, 151, 122, 146, 165, 126, 147, 118, 70, 156, 41, 17, 189, 79, 35, 229, 74, 101, 235, 204, 142, 94, 46, 245, 122, 20, 235, 102, 255, 218, 71, 196, 143, 195, 212, 86, 155, 29, 189, 92, 141, 248, 113, 152, 218, 98, 215, 37, 32, 253, 155, 183, 24, 239, 140, 12, 217, 35, 126, 60, 114, 136, 19, 128, 203, 5, 55, 181, 138, 245, 130, 56, 83, 70, 110, 109, 17, 63, 22, 247, 182, 206, 242, 160, 5, 58, 196, 143, 193, 216, 182, 181, 59, 116, 145, 26, 241, 99, 48, 182, 237, 237, 14, 93, 36, 245, 139, 217, 25, 105, 92, 244, 83, 175, 71, 177, 207, 179, 94, 202, 55, 36, 157, 225, 113, 107, 237, 17, 63, 30, 67, 91, 74, 29, 163, 84, 207, 187, 84, 250, 69, 189, 21, 210, 60, 247, 98, 190, 15, 49, 170, 69, 252, 224, 244, 219, 43, 226, 142, 182, 221, 74, 109, 5, 128, 35, 226, 159, 108, 41, 222, 156, 93, 159, 100, 177, 227, 3, 164, 123, 147, 150, 66, 253, 1, 210, 106, 115, 110, 183, 143, 134, 199, 173, 149, 106, 61, 234, 44, 15, 90, 169, 66, 154, 237, 81, 172, 119, 140, 134, 176, 99, 36, 151, 218, 121, 151, 90, 191, 168, 151, 218, 185, 119, 68, 26, 131, 36, 131, 90, 196, 15, 216, 17, 233, 85, 166, 148, 26, 167, 148, 78, 182, 22, 241, 227, 145, 114, 124, 128, 244, 110, 210, 206, 72, 43, 62, 123, 196, 143, 199, 237, 182, 55, 61, 98, 55, 169, 213, 163, 35, 210, 234, 64, 2, 233, 141, 66, 190, 34, 141, 41, 35, 183, 42, 196, 191, 206, 223, 214, 165, 202, 244, 136, 221, 237, 17, 63, 62, 125, 93, 74, 169, 221, 190, 149, 202, 192, 91, 234, 113, 250, 175, 152, 1, 75, 101, 36, 242, 158, 21, 226, 95, 236, 94, 144, 94, 37, 74, 109, 174, 237, 123, 219, 195, 85, 75, 233, 38, 45, 213, 248, 116, 136, 31, 151, 235, 115, 44, 197, 54, 40, 165, 122, 148, 242, 197, 172, 69, 252, 248, 244, 91, 107, 124, 172, 115, 176, 99, 36, 23, 251, 29, 128, 23, 164, 123, 35, 114, 45, 118, 27, 149, 106, 219, 61, 232, 17, 225, 95, 144, 204, 37, 72, 123, 176, 18, 221, 138, 21, 147, 219, 173, 181, 62, 80, 71, 41, 220, 164, 189, 34, 189, 78, 118, 47, 149, 206, 118, 135, 116, 207, 49, 32, 141, 122, 148, 226, 205, 254, 173, 26, 113, 59, 145, 169, 142, 100, 223, 98, 199, 72, 174, 5, 99, 36, 17, 171, 78, 61, 35, 175, 56, 253, 87, 200, 70, 253, 35, 242, 10, 82, 232, 81, 220, 28, 42, 81, 172, 134, 232, 140, 60, 70, 69, 128, 120, 55, 36, 140, 207, 244, 182, 15, 112, 124, 190, 196, 138, 83, 78, 23, 253, 88, 35, 182, 185, 156, 107, 61, 118, 140, 228, 106, 132, 173, 83, 57, 198, 8, 184, 148, 121, 139, 112, 113, 74, 233, 125, 26, 103, 239, 97, 55, 186, 157, 195, 232, 200, 144, 16, 163, 254, 175, 72, 119, 148, 246, 158, 22, 225, 27, 236, 220, 234, 80, 232, 155, 180, 14, 121, 53, 214, 49, 166, 34, 237, 131, 28, 153, 95, 188, 217, 159, 86, 33, 108, 39, 50, 183, 182, 168, 199, 142, 145, 92, 136, 1, 200, 148, 159, 62, 106, 212, 176, 237, 35, 117, 200, 243, 124, 27, 181, 133, 191, 160, 189, 160, 140, 138, 212, 55, 80, 22, 119, 185, 159, 144, 199, 188, 172, 91, 53, 194, 93, 220, 246, 200, 239, 226, 15, 132, 187, 73, 251, 20, 234, 128, 60, 123, 143, 48, 35, 71, 185, 95, 208, 120, 179, 47, 243, 9, 246, 245, 105, 27, 236, 104, 236, 212, 96, 199, 72, 170, 134, 205, 117, 238, 19, 242, 188, 166, 141, 105, 225, 55, 86, 207, 200, 187, 221, 22, 121, 143, 75, 7, 71, 123, 66, 30, 113, 169, 68, 117, 248, 34, 155, 91, 225, 114, 151, 62, 183, 50, 245, 49, 170, 194, 22, 223, 187, 21, 108, 71, 220, 142, 200, 255, 68, 179, 188, 73, 123, 70, 254, 117, 168, 130, 109, 29, 202, 113, 132, 246, 30, 222, 236, 203, 84, 176, 25, 137, 124, 70, 57, 157, 199, 94, 11, 118, 140, 164, 106, 204, 175, 87, 175, 184, 156, 195, 165, 156, 107, 67, 106, 184, 245, 29, 207, 184, 212, 199, 45, 202, 59, 215, 68, 42, 200, 166, 150, 148, 122, 146, 221, 243, 136, 75, 167, 91, 123, 242, 229, 252, 56, 109, 72, 133, 203, 137, 229, 171, 19, 112, 196, 229, 34, 80, 66, 7, 169, 231, 235, 38, 173, 143, 79, 105, 141, 245, 35, 252, 206, 73, 206, 109, 14, 173, 148, 207, 122, 84, 194, 141, 218, 144, 190, 62, 205, 109, 147, 58, 148, 89, 143, 174, 205, 233, 24, 157, 223, 126, 91, 122, 140, 174, 189, 199, 229, 230, 180, 131, 60, 70, 109, 148, 146, 198, 87, 225, 210, 94, 109, 49, 29, 175, 165, 198, 232, 23, 143, 144, 157, 112, 75, 182, 194, 116, 195, 254, 18, 173, 116, 246, 42, 92, 78, 22, 77, 3, 116, 111, 59, 134, 46, 120, 96, 174, 55, 105, 215, 91, 174, 211, 69, 166, 244, 13, 179, 143, 81, 201, 109, 224, 178, 135, 54, 183, 30, 189, 162, 220, 142, 246, 181, 26, 63, 47, 244, 218, 142, 247, 82, 98, 212, 187, 238, 24, 245, 219, 212, 19, 167, 23, 148, 53, 40, 226, 98, 139, 233, 122, 180, 228, 24, 173, 48, 125, 35, 87, 250, 117, 95, 100, 15, 89, 195, 84, 199, 42, 96, 2, 62, 66, 22, 163, 54, 86, 1, 3, 123, 143, 95, 27, 236, 45, 228, 157, 130, 37, 215, 35, 233, 84, 138, 37, 140, 34, 213, 248, 253, 194, 63, 117, 81, 187, 222, 150, 124, 113, 147, 156, 107, 93, 180, 210, 197, 87, 65, 214, 241, 222, 199, 42, 96, 34, 36, 237, 81, 169, 55, 254, 82, 146, 122, 180, 141, 86, 186, 248, 90, 200, 218, 235, 37, 199, 8, 128, 124, 36, 96, 201, 119, 110, 210, 155, 145, 146, 71, 181, 167, 72, 59, 73, 75, 190, 184, 117, 96, 163, 52, 70, 242, 116, 141, 55, 108, 242, 24, 45, 225, 134, 237, 30, 233, 192, 200, 107, 172, 2, 38, 66, 114, 237, 95, 114, 140, 106, 200, 234, 209, 49, 86, 1, 19, 160, 121, 234, 102, 218, 102, 255, 211, 50, 113, 15, 30, 20, 251, 61, 25, 150, 35, 101, 107, 225, 126, 239, 176, 156, 81, 109, 87, 27, 44, 235, 145, 173, 139, 77, 236, 2, 68, 34, 109, 139, 0, 224, 131, 89, 41, 202, 241, 46, 118, 1, 34, 209, 92, 211, 150, 122, 51, 242, 8, 89, 156, 30, 176, 172, 119, 180, 92, 172, 177, 220, 235, 190, 166, 205, 126, 130, 225, 96, 109, 202, 29, 109, 109, 35, 243, 1, 203, 60, 233, 214, 138, 125, 63, 99, 153, 35, 255, 154, 139, 250, 198, 170, 16, 137, 251, 34, 220, 111, 141, 101, 143, 216, 74, 44, 181, 19, 169, 193, 24, 77, 107, 98, 23, 32, 3, 155, 216, 5, 136, 100, 173, 216, 247, 15, 171, 66, 36, 78, 211, 198, 172, 1, 236, 108, 138, 145, 54, 233, 35, 182, 219, 71, 73, 75, 27, 145, 212, 198, 104, 137, 143, 254, 165, 211, 34, 250, 58, 180, 196, 155, 17, 233, 244, 154, 165, 78, 177, 145, 62, 170, 237, 183, 37, 214, 33, 64, 190, 50, 73, 23, 171, 128, 145, 105, 206, 179, 37, 79, 247, 227, 185, 54, 78, 83, 143, 204, 167, 70, 36, 72, 51, 213, 239, 122, 51, 25, 172, 77, 121, 68, 187, 113, 248, 205, 210, 166, 144, 184, 156, 60, 59, 44, 239, 102, 68, 227, 1, 203, 29, 1, 144, 218, 96, 121, 23, 183, 147, 114, 255, 165, 78, 31, 145, 62, 25, 105, 44, 11, 145, 176, 147, 98, 223, 119, 96, 91, 45, 177, 137, 93, 128, 12, 236, 98, 23, 32, 176, 198, 241, 119, 79, 48, 184, 182, 149, 214, 209, 238, 127, 87, 226, 186, 209, 247, 172, 29, 127, 247, 217, 103, 33, 50, 160, 125, 76, 189, 177, 40, 68, 97, 54, 177, 11, 16, 216, 55, 229, 254, 75, 237, 104, 159, 20, 251, 46, 113, 14, 242, 73, 185, 255, 82, 235, 145, 198, 18, 7, 70, 214, 202, 253, 27, 44, 235, 124, 107, 28, 127, 103, 50, 88, 155, 106, 71, 91, 250, 50, 196, 144, 29, 150, 81, 169, 214, 142, 191, 251, 128, 101, 61, 74, 210, 214, 165, 53, 150, 251, 2, 137, 212, 38, 118, 1, 18, 215, 196, 46, 64, 6, 56, 79, 123, 90, 19, 187, 0, 25, 88, 99, 89, 215, 51, 192, 237, 218, 191, 164, 27, 146, 102, 198, 111, 63, 96, 33, 215, 127, 151, 249, 217, 75, 156, 223, 166, 153, 123, 188, 196, 248, 244, 92, 226, 115, 140, 82, 210, 120, 180, 115, 254, 206, 88, 198, 205, 236, 181, 36, 230, 251, 37, 174, 134, 60, 62, 75, 92, 7, 89, 19, 159, 37, 207, 65, 214, 198, 104, 31, 167, 152, 209, 184, 94, 251, 151, 48, 21, 201, 117, 126, 246, 245, 230, 245, 125, 191, 84, 71, 180, 125, 60, 46, 123, 135, 242, 95, 252, 155, 51, 34, 180, 148, 229, 254, 92, 59, 131, 107, 44, 111, 148, 68, 107, 73, 35, 36, 46, 248, 216, 127, 28, 71, 180, 101, 88, 143, 166, 109, 176, 172, 27, 146, 181, 227, 239, 118, 30, 203, 144, 42, 31, 231, 203, 34, 222, 247, 155, 123, 55, 178, 132, 81, 183, 21, 252, 220, 181, 149, 222, 56, 185, 140, 32, 245, 91, 23, 161, 188, 177, 108, 225, 86, 127, 150, 228, 8, 198, 103, 138, 118, 52, 105, 105, 42, 232, 207, 179, 231, 40, 37, 141, 203, 165, 189, 94, 194, 192, 81, 143, 215, 252, 97, 29, 252, 245, 31, 139, 125, 223, 111, 78, 199, 232, 222, 246, 130, 50, 43, 150, 175, 56, 109, 67, 23, 60, 176, 185, 113, 42, 245, 70, 237, 214, 22, 188, 184, 77, 113, 105, 192, 151, 82, 127, 174, 49, 62, 227, 92, 58, 71, 75, 227, 122, 173, 95, 10, 94, 243, 135, 249, 232, 23, 93, 159, 123, 179, 219, 168, 20, 167, 142, 52, 158, 211, 123, 135, 50, 31, 151, 248, 122, 236, 250, 7, 202, 158, 183, 53, 55, 78, 156, 30, 49, 110, 19, 187, 0, 137, 219, 196, 46, 64, 226, 56, 125, 100, 178, 196, 32, 215, 0, 0, 32, 0, 73, 68, 65, 84, 26, 191, 128, 40, 243, 14, 203, 184, 113, 155, 123, 189, 254, 3, 101, 14, 62, 2, 254, 167, 123, 122, 153, 66, 178, 132, 142, 54, 112, 169, 88, 190, 255, 0, 177, 173, 61, 165, 243, 128, 50, 111, 68, 122, 115, 86, 175, 1, 248, 89, 246, 41, 13, 24, 159, 49, 75, 156, 95, 43, 93, 75, 27, 240, 215, 142, 149, 110, 137, 245, 200, 197, 18, 6, 70, 214, 51, 127, 255, 128, 114, 7, 0, 26, 131, 52, 139, 124, 223, 207, 231, 176, 255, 245, 118, 68, 89, 119, 113, 46, 143, 177, 199, 182, 210, 110, 68, 122, 91, 204, 143, 205, 62, 120, 169, 195, 155, 19, 167, 165, 172, 30, 225, 122, 206, 45, 97, 148, 237, 154, 38, 78, 93, 164, 50, 198, 228, 250, 8, 123, 73, 92, 219, 162, 37, 204, 65, 174, 225, 167, 63, 84, 34, 223, 253, 34, 47, 237, 120, 106, 35, 218, 150, 157, 189, 53, 202, 122, 139, 212, 247, 35, 215, 157, 231, 244, 82, 225, 35, 78, 31, 80, 126, 227, 61, 199, 82, 70, 219, 78, 142, 191, 107, 60, 150, 161, 52, 75, 156, 58, 114, 114, 248, 205, 3, 150, 119, 195, 230, 226, 1, 229, 183, 71, 107, 79, 105, 180, 30, 210, 73, 77, 99, 152, 246, 159, 112, 236, 7, 164, 214, 209, 182, 62, 65, 62, 160, 140, 185, 110, 43, 204, 159, 18, 113, 171, 65, 153, 39, 158, 143, 56, 241, 179, 236, 227, 214, 40, 227, 188, 154, 114, 114, 252, 221, 198, 99, 25, 114, 112, 80, 236, 251, 128, 229, 77, 61, 58, 57, 254, 110, 227, 177, 12, 37, 219, 196, 46, 128, 177, 181, 167, 116, 118, 158, 210, 73, 133, 245, 53, 104, 13, 199, 152, 165, 214, 209, 110, 2, 228, 241, 132, 252, 71, 39, 173, 70, 129, 118, 200, 63, 54, 86, 216, 209, 30, 183, 137, 93, 128, 132, 189, 195, 242, 58, 147, 26, 75, 28, 213, 118, 81, 250, 72, 173, 47, 13, 120, 190, 73, 172, 81, 214, 148, 209, 38, 64, 30, 78, 239, 251, 165, 212, 209, 94, 33, 76, 131, 251, 128, 203, 35, 128, 156, 53, 70, 233, 174, 81, 94, 135, 114, 237, 41, 157, 7, 148, 57, 226, 239, 11, 167, 215, 140, 91, 82, 39, 233, 164, 220, 159, 29, 109, 153, 53, 56, 125, 68, 170, 180, 235, 216, 53, 159, 79, 179, 119, 30, 211, 138, 173, 9, 148, 143, 122, 10, 73, 74, 29, 237, 38, 112, 94, 57, 47, 68, 190, 54, 76, 187, 180, 229, 254, 214, 30, 211, 218, 121, 76, 171, 68, 155, 216, 5, 72, 88, 19, 187, 0, 1, 157, 148, 251, 55, 6, 101, 40, 85, 19, 187, 0, 153, 216, 196, 46, 128, 33, 159, 55, 166, 13, 202, 24, 213, 14, 53, 80, 11, 56, 44, 249, 183, 212, 142, 54, 112, 233, 52, 229, 218, 161, 92, 27, 166, 93, 250, 114, 127, 115, 172, 193, 81, 237, 49, 37, 143, 34, 1, 238, 115, 107, 1, 142, 248, 143, 89, 218, 136, 246, 105, 198, 111, 55, 158, 202, 80, 58, 62, 129, 148, 219, 196, 46, 128, 7, 77, 224, 252, 178, 125, 223, 239, 5, 118, 203, 178, 12, 109, 185, 126, 73, 42, 68, 108, 74, 184, 203, 173, 224, 63, 46, 93, 208, 35, 8, 103, 11, 214, 155, 41, 53, 230, 197, 102, 73, 23, 126, 109, 108, 114, 29, 244, 112, 49, 247, 92, 91, 66, 172, 124, 180, 69, 165, 126, 186, 222, 162, 175, 148, 123, 157, 250, 4, 255, 49, 153, 218, 94, 33, 140, 91, 42, 35, 218, 62, 135, 253, 191, 43, 246, 205, 113, 33, 242, 80, 39, 196, 46, 80, 62, 150, 214, 6, 105, 54, 40, 187, 51, 57, 215, 38, 118, 1, 18, 182, 164, 121, 218, 90, 75, 27, 213, 158, 131, 245, 72, 230, 3, 242, 239, 64, 222, 99, 113, 174, 236, 12, 210, 12, 169, 241, 148, 142, 166, 255, 40, 158, 66, 146, 74, 71, 219, 103, 195, 177, 131, 46, 88, 185, 125, 142, 116, 29, 40, 159, 6, 203, 26, 129, 211, 216, 197, 46, 64, 194, 56, 69, 98, 88, 19, 187, 0, 1, 105, 218, 96, 128, 29, 109, 141, 38, 118, 1, 50, 178, 137, 93, 128, 76, 108, 144, 111, 187, 93, 193, 95, 251, 241, 4, 221, 151, 109, 27, 8, 6, 222, 82, 233, 104, 55, 30, 211, 250, 2, 93, 71, 40, 183, 207, 145, 54, 1, 243, 218, 4, 204, 203, 194, 218, 40, 221, 6, 124, 251, 127, 200, 18, 62, 24, 225, 234, 1, 153, 206, 235, 115, 160, 185, 88, 1, 236, 60, 106, 240, 102, 86, 110, 19, 187, 0, 158, 89, 254, 221, 55, 134, 105, 91, 106, 60, 166, 245, 29, 250, 56, 76, 190, 155, 84, 98, 71, 27, 0, 254, 13, 221, 71, 19, 124, 231, 111, 41, 228, 200, 79, 19, 48, 47, 11, 107, 195, 180, 27, 195, 180, 115, 183, 142, 93, 0, 35, 39, 15, 105, 112, 228, 150, 78, 30, 210, 96, 61, 146, 89, 199, 46, 128, 103, 150, 127, 247, 198, 48, 109, 75, 141, 231, 244, 190, 66, 55, 88, 59, 153, 127, 10, 29, 237, 10, 126, 79, 134, 126, 141, 201, 13, 228, 143, 47, 115, 106, 180, 214, 30, 210, 56, 41, 246, 229, 200, 237, 125, 57, 213, 153, 208, 154, 216, 5, 48, 242, 45, 118, 1, 50, 162, 29, 209, 94, 146, 83, 236, 2, 44, 12, 223, 169, 145, 201, 245, 154, 214, 120, 76, 171, 239, 63, 254, 11, 242, 54, 108, 242, 235, 182, 41, 116, 180, 27, 207, 233, 245, 149, 229, 27, 228, 203, 141, 173, 145, 207, 163, 56, 31, 39, 195, 73, 177, 111, 227, 33, 191, 88, 214, 153, 166, 157, 187, 117, 236, 2, 80, 116, 218, 57, 218, 68, 86, 214, 177, 11, 224, 145, 207, 143, 213, 220, 90, 35, 159, 126, 80, 207, 247, 64, 237, 117, 255, 74, 51, 5, 114, 180, 95, 86, 98, 71, 251, 218, 65, 177, 111, 14, 119, 115, 62, 71, 151, 165, 119, 107, 57, 196, 101, 200, 218, 48, 237, 198, 48, 237, 220, 173, 99, 23, 32, 97, 77, 236, 2, 80, 17, 154, 216, 5, 200, 200, 58, 118, 1, 60, 178, 190, 30, 231, 118, 189, 111, 12, 211, 254, 6, 249, 160, 228, 162, 59, 218, 223, 32, 31, 89, 177, 44, 135, 47, 107, 143, 105, 29, 132, 251, 229, 118, 226, 133, 196, 105, 53, 195, 24, 155, 101, 59, 196, 46, 0, 209, 27, 94, 195, 228, 154, 216, 5, 80, 106, 140, 211, 151, 14, 72, 54, 99, 255, 49, 118, 71, 187, 133, 188, 243, 120, 112, 204, 163, 164, 145, 91, 159, 101, 212, 196, 37, 183, 199, 73, 189, 181, 113, 250, 57, 212, 153, 88, 44, 31, 113, 198, 116, 138, 93, 0, 202, 222, 41, 118, 1, 22, 166, 164, 182, 200, 250, 88, 114, 186, 166, 85, 144, 175, 16, 114, 112, 204, 195, 75, 255, 49, 118, 71, 123, 39, 220, 239, 48, 35, 15, 233, 111, 115, 168, 96, 27, 143, 105, 105, 94, 86, 202, 33, 54, 247, 172, 141, 211, 207, 53, 46, 33, 52, 177, 11, 96, 228, 20, 187, 0, 153, 56, 197, 46, 64, 194, 248, 82, 109, 88, 77, 236, 2, 120, 196, 169, 35, 63, 237, 20, 251, 30, 28, 243, 144, 254, 110, 244, 133, 200, 152, 29, 237, 16, 163, 217, 128, 188, 67, 185, 70, 218, 35, 183, 154, 120, 73, 124, 69, 89, 211, 106, 110, 133, 248, 216, 78, 78, 141, 210, 148, 117, 226, 233, 165, 98, 29, 249, 247, 185, 224, 203, 144, 195, 124, 124, 173, 112, 237, 33, 141, 84, 89, 92, 135, 75, 248, 66, 164, 207, 47, 104, 15, 89, 35, 237, 126, 80, 47, 196, 104, 54, 224, 105, 64, 50, 102, 71, 123, 167, 216, 247, 48, 35, 159, 82, 70, 110, 119, 6, 105, 150, 52, 173, 230, 214, 46, 64, 30, 57, 198, 229, 158, 21, 252, 127, 100, 102, 237, 57, 189, 20, 212, 96, 71, 91, 138, 31, 45, 26, 182, 241, 144, 198, 218, 67, 26, 169, 178, 168, 59, 107, 131, 52, 67, 219, 32, 204, 52, 152, 28, 174, 107, 59, 197, 190, 135, 25, 249, 252, 128, 135, 23, 34, 99, 117, 180, 53, 163, 179, 39, 0, 127, 207, 200, 171, 132, 23, 34, 125, 143, 102, 247, 14, 194, 253, 114, 56, 241, 174, 249, 232, 16, 73, 76, 174, 159, 153, 137, 13, 252, 55, 224, 185, 213, 25, 9, 233, 114, 161, 148, 110, 91, 154, 2, 214, 163, 113, 59, 131, 52, 75, 104, 143, 66, 213, 155, 38, 80, 62, 174, 52, 163, 217, 192, 229, 179, 234, 115, 204, 126, 33, 50, 86, 71, 123, 103, 180, 239, 144, 220, 71, 110, 119, 70, 233, 106, 166, 213, 228, 212, 161, 220, 5, 204, 43, 213, 58, 163, 97, 209, 128, 63, 32, 143, 71, 144, 82, 21, 56, 74, 171, 193, 88, 221, 215, 162, 172, 151, 243, 124, 123, 15, 155, 65, 18, 139, 52, 67, 178, 26, 108, 187, 39, 245, 107, 218, 78, 177, 239, 19, 230, 191, 19, 49, 187, 255, 24, 163, 163, 173, 29, 205, 254, 143, 135, 60, 15, 194, 253, 82, 172, 96, 150, 39, 88, 41, 211, 106, 174, 213, 8, 123, 71, 158, 75, 92, 134, 88, 93, 216, 128, 252, 99, 115, 141, 163, 144, 114, 143, 96, 103, 114, 8, 235, 209, 56, 171, 248, 228, 222, 22, 133, 172, 55, 41, 199, 74, 59, 154, 189, 243, 144, 231, 65, 184, 223, 224, 19, 238, 24, 29, 237, 157, 209, 190, 99, 114, 126, 33, 114, 167, 216, 247, 164, 76, 219, 219, 130, 236, 9, 217, 4, 206, 175, 9, 156, 159, 111, 150, 13, 248, 218, 48, 237, 144, 86, 240, 91, 175, 74, 95, 99, 156, 163, 217, 247, 213, 240, 215, 142, 230, 210, 30, 107, 84, 176, 107, 79, 215, 70, 233, 134, 224, 179, 222, 72, 172, 145, 94, 63, 168, 183, 83, 236, 251, 4, 63, 43, 252, 204, 30, 144, 12, 221, 209, 142, 49, 154, 13, 228, 59, 114, 171, 141, 215, 147, 67, 30, 94, 22, 100, 79, 132, 246, 110, 119, 204, 73, 184, 223, 218, 83, 126, 49, 60, 194, 246, 239, 186, 54, 76, 59, 164, 13, 252, 142, 208, 150, 62, 218, 203, 142, 246, 125, 62, 111, 106, 75, 172, 67, 59, 195, 180, 215, 134, 105, 91, 219, 121, 74, 231, 164, 216, 55, 165, 126, 80, 47, 198, 104, 54, 224, 225, 133, 200, 208, 29, 237, 221, 140, 125, 165, 13, 203, 189, 23, 31, 115, 125, 33, 114, 167, 220, 215, 37, 70, 37, 117, 180, 119, 30, 211, 122, 18, 238, 183, 70, 186, 119, 255, 83, 172, 31, 71, 166, 216, 88, 187, 224, 227, 126, 185, 16, 75, 144, 229, 136, 115, 252, 199, 249, 126, 106, 116, 79, 142, 79, 146, 124, 142, 242, 159, 144, 103, 63, 168, 183, 83, 236, 251, 132, 95, 71, 179, 231, 244, 31, 129, 153, 253, 164, 144, 29, 237, 185, 163, 217, 210, 198, 123, 40, 32, 185, 189, 16, 233, 18, 47, 151, 24, 29, 196, 37, 74, 187, 161, 242, 221, 80, 159, 20, 251, 166, 82, 103, 52, 66, 92, 216, 214, 198, 233, 135, 96, 57, 135, 189, 68, 236, 76, 222, 199, 155, 181, 113, 33, 226, 179, 14, 144, 135, 111, 59, 207, 233, 229, 214, 15, 234, 205, 29, 205, 142, 218, 127, 12, 217, 209, 222, 25, 237, 43, 117, 16, 238, 151]);
            fileData8.push.apply(fileData8, [74, 5, 219, 25, 237, 123, 75, 179, 116, 98, 42, 177, 185, 199, 119, 67, 125, 66, 222, 119, 255, 83, 66, 92, 216, 82, 174, 47, 82, 236, 32, 233, 52, 177, 11, 144, 160, 16, 55, 181, 185, 219, 4, 200, 35, 183, 246, 200, 231, 84, 200, 222, 65, 184, 223, 218, 115, 190, 115, 237, 20, 251, 62, 193, 255, 215, 87, 15, 194, 253, 238, 190, 16, 25, 170, 163, 253, 17, 113, 230, 102, 95, 203, 233, 133, 200, 208, 115, 217, 115, 189, 203, 237, 173, 96, 211, 33, 202, 61, 46, 99, 54, 129, 242, 201, 105, 89, 200, 91, 86, 47, 103, 89, 164, 153, 10, 142, 104, 255, 238, 3, 108, 230, 84, 215, 6, 105, 198, 16, 106, 233, 186, 16, 121, 248, 180, 241, 156, 222, 9, 121, 94, 211, 30, 17, 103, 110, 246, 181, 89, 239, 249, 133, 232, 104, 175, 16, 127, 52, 27, 200, 235, 133, 200, 157, 209, 190, 67, 114, 159, 167, 109, 113, 33, 251, 130, 252, 158, 130, 72, 133, 92, 147, 53, 84, 62, 22, 118, 177, 11, 144, 25, 46, 235, 119, 223, 46, 118, 1, 18, 183, 9, 148, 207, 58, 80, 62, 62, 88, 12, 30, 157, 160, 155, 18, 153, 202, 141, 220, 103, 197, 190, 79, 240, 63, 154, 13, 204, 124, 33, 50, 68, 71, 251, 15, 200, 27, 223, 19, 238, 143, 206, 106, 230, 6, 159, 6, 254, 125, 46, 47, 68, 206, 25, 205, 150, 118, 248, 78, 55, 255, 156, 227, 93, 238, 181, 157, 112, 63, 233, 223, 31, 184, 156, 88, 154, 167, 32, 57, 217, 4, 204, 171, 9, 152, 151, 79, 22, 159, 165, 47, 29, 227, 245, 187, 80, 95, 169, 205, 85, 200, 239, 30, 132, 202, 199, 7, 109, 191, 73, 234, 171, 98, 223, 20, 174, 247, 218, 250, 177, 27, 248, 247, 174, 125, 163, 107, 206, 3, 146, 214, 29, 109, 237, 93, 217, 110, 224, 223, 107, 70, 73, 198, 238, 102, 114, 232, 80, 238, 102, 236, 235, 122, 98, 30, 20, 121, 166, 114, 151, 219, 211, 220, 152, 104, 238, 140, 1, 221, 83, 144, 212, 226, 50, 196, 122, 73, 191, 91, 185, 142, 112, 110, 144, 111, 217, 99, 97, 71, 251, 119, 156, 227, 63, 110, 19, 56, 191, 216, 211, 66, 165, 54, 194, 253, 78, 144, 95, 167, 250, 129, 166, 131, 112, 255, 20, 58, 218, 59, 197, 190, 79, 24, 238, 255, 249, 184, 105, 113, 238, 63, 90, 119, 180, 125, 140, 102, 251, 116, 16, 238, 23, 171, 130, 197, 90, 103, 60, 183, 187, 220, 107, 210, 11, 217, 119, 232, 110, 40, 0, 221, 35, 168, 212, 226, 50, 36, 244, 133, 63, 151, 184, 220, 226, 135, 124, 116, 184, 172, 223, 239, 172, 151, 244, 91, 27, 166, 29, 130, 197, 203, 126, 83, 114, 168, 163, 154, 126, 192, 19, 228, 125, 172, 47, 55, 255, 59, 37, 118, 172, 124, 141, 102, 251, 114, 16, 238, 247, 219, 11, 145, 150, 29, 109, 237, 104, 246, 102, 228, 191, 173, 133, 105, 76, 77, 13, 72, 253, 133, 200, 221, 140, 125, 53, 47, 157, 221, 139, 211, 65, 248, 219, 70, 145, 143, 53, 205, 23, 179, 254, 84, 164, 235, 178, 252, 97, 236, 70, 73, 34, 198, 234, 7, 235, 192, 249, 249, 96, 189, 164, 159, 101, 218, 177, 112, 52, 251, 119, 214, 55, 181, 107, 227, 244, 173, 109, 34, 228, 185, 142, 144, 167, 214, 78, 184, 223, 119, 232, 159, 210, 2, 249, 116, 180, 119, 202, 125, 135, 6, 198, 230, 246, 141, 122, 206, 239, 249, 89, 118, 180, 53, 163, 217, 7, 140, 47, 51, 183, 22, 166, 51, 21, 136, 148, 95, 136, 156, 59, 154, 45, 253, 45, 112, 127, 4, 59, 151, 147, 239, 218, 206, 104, 223, 235, 147, 45, 199, 184, 12, 137, 241, 24, 123, 29, 33, 207, 185, 248, 184, 95, 175, 137, 93, 128, 196, 112, 73, 191, 105, 108, 143, 126, 167, 153, 211, 255, 25, 151, 119, 137, 26, 225, 254, 253, 117, 45, 135, 41, 145, 154, 209, 236, 169, 27, 142, 181, 34, 223, 177, 167, 251, 206, 47, 68, 90, 117, 180, 125, 205, 205, 246, 45, 229, 23, 34, 119, 70, 251, 74, 29, 132, 251, 173, 145, 198, 60, 55, 205, 92, 227, 39, 92, 254, 246, 46, 157, 225, 146, 58, 218, 27, 143, 105, 29, 20, 251, 230, 50, 127, 29, 176, 91, 210, 175, 116, 28, 209, 254, 149, 213, 146, 126, 165, 104, 225, 55, 62, 79, 194, 253, 26, 143, 121, 90, 216, 41, 246, 125, 82, 166, 253, 245, 230, 127, 37, 98, 93, 215, 118, 138, 125, 251, 27, 142, 16, 156, 94, 136, 180, 234, 104, 251, 28, 205, 6, 228, 39, 135, 36, 8, 41, 118, 156, 124, 204, 205, 110, 132, 191, 31, 58, 254, 148, 71, 251, 239, 209, 220, 200, 245, 119, 187, 218, 185, 108, 183, 255, 127, 74, 202, 95, 206, 244, 189, 164, 223, 119, 200, 239, 238, 115, 234, 112, 236, 98, 23, 32, 67, 92, 214, 239, 119, 187, 216, 5, 72, 220, 206, 115, 122, 7, 225, 126, 41, 215, 83, 151, 193, 35, 215, 107, 206, 65, 184, 95, 140, 107, 189, 207, 209, 108, 40, 210, 50, 235, 63, 90, 116, 180, 99, 142, 102, 75, 70, 171, 15, 194, 180, 66, 86, 176, 157, 209, 190, 247, 12, 197, 40, 229, 209, 254, 91, 154, 151, 104, 14, 248, 121, 7, 191, 22, 254, 230, 58, 14, 57, 220, 253, 75, 248, 126, 76, 251, 5, 51, 214, 21, 77, 84, 168, 199, 253, 185, 196, 67, 138, 163, 217, 191, 178, 158, 227, 223, 203, 181, 30, 249, 94, 242, 80, 115, 211, 159, 114, 204, 92, 250, 77, 210, 27, 135, 219, 107, 123, 138, 3, 142, 189, 157, 98, 95, 159, 163, 217, 62, 251, 143, 191, 188, 16, 105, 209, 209, 246, 61, 154, 13, 200, 255, 216, 146, 64, 165, 246, 66, 164, 175, 149, 70, 124, 196, 200, 233, 177, 72, 4, 59, 199, 125, 215, 142, 249, 165, 220, 40, 73, 104, 94, 26, 213, 200, 61, 46, 183, 66, 205, 25, 77, 121, 84, 205, 5, 59, 218, 191, 98, 61, 26, 103, 113, 211, 159, 251, 147, 71, 237, 224, 81, 255, 226, 95, 35, 252, 205, 109, 124, 82, 109, 187, 125, 143, 102, 3, 113, 250, 143, 191, 228, 235, 187, 163, 109, 53, 154, 237, 242, 200, 127, 206, 62, 189, 16, 149, 108, 231, 105, 95, 31, 49, 58, 8, 211, 136, 217, 113, 210, 124, 72, 228, 11, 126, 189, 145, 211, 220, 0, 222, 166, 35, 145, 106, 135, 114, 99, 144, 166, 102, 68, 59, 151, 14, 193, 38, 118, 1, 50, 196, 101, 253, 126, 197, 57, 254, 227, 44, 150, 60, 60, 225, 50, 170, 41, 125, 34, 155, 98, 123, 228, 218, 111, 90, 11, 127, 115, 186, 249, 231, 84, 95, 136, 220, 41, 246, 149, 142, 102, 251, 236, 63, 58, 189, 16, 233, 187, 163, 109, 49, 154, 173, 185, 251, 148, 156, 104, 41, 77, 145, 240, 185, 110, 182, 143, 187, 182, 131, 48, 141, 95, 30, 139, 4, 166, 169, 99, 183, 119, 187, 174, 29, 130, 92, 70, 250, 239, 209, 140, 148, 60, 41, 210, 253, 142, 188, 227, 114, 43, 228, 103, 233, 75, 194, 209, 236, 95, 237, 98, 23, 32, 113, 59, 197, 190, 39, 229, 126, 185, 182, 71, 154, 41, 107, 183, 131, 71, 107, 225, 239, 78, 55, 255, 156, 226, 148, 72, 139, 209, 108, 192, 239, 136, 54, 224, 80, 207, 124, 118, 180, 43, 196, 29, 205, 6, 228, 149, 39, 133, 17, 202, 21, 252, 206, 205, 246, 113, 215, 166, 185, 203, 109, 20, 251, 250, 162, 121, 98, 114, 194, 175, 55, 38, 154, 105, 64, 174, 143, 217, 128, 120, 55, 32, 67, 54, 138, 125, 53, 199, 169, 153, 23, 9, 164, 177, 82, 205, 152, 77, 224, 252, 82, 143, 135, 84, 19, 187, 0, 9, 209, 60, 109, 243, 33, 197, 145, 217, 49, 154, 248, 28, 160, 127, 2, 121, 18, 238, 159, 90, 220, 66, 12, 30, 29, 132, 255, 238, 158, 80, 29, 109, 105, 199, 185, 223, 87, 58, 55, 219, 231, 136, 182, 102, 63, 147, 184, 109, 1, 156, 133, 91, 103, 144, 238, 171, 65, 154, 71, 69, 154, 90, 31, 133, 101, 144, 148, 163, 86, 164, 53, 245, 132, 224, 40, 76, 231, 147, 244, 64, 61, 210, 212, 177, 246, 230, 183, 154, 24, 221, 35, 253, 237, 251, 217, 71, 233, 207, 10, 151, 243, 66, 122, 78, 182, 194, 125, 175, 99, 36, 221, 191, 54, 59, 202, 249, 52, 117, 67, 26, 207, 156, 227, 161, 225, 43, 30, 93, 232, 130, 27, 208, 180, 79, 190, 182, 156, 104, 226, 243, 94, 177, 239, 163, 50, 253, 148, 234, 154, 166, 141, 62, 222, 249, 189, 54, 70, 215, 62, 9, 127, 251, 50, 251, 40, 167, 213, 194, 178, 156, 113, 137, 151, 116, 160, 66, 147, 174, 116, 246, 132, 38, 205, 10, 240, 59, 162, 221, 40, 246, 221, 41, 246, 245, 125, 55, 162, 217, 119, 13, 187, 145, 167, 70, 177, 239, 110, 226, 191, 251, 28, 245, 63, 8, 211, 137, 49, 47, 179, 17, 238, 247, 29, 191, 127, 9, 114, 45, 252, 237, 80, 221, 56, 9, 127, 159, 210, 124, 213, 13, 228, 117, 227, 9, 110, 171, 178, 164, 240, 116, 104, 46, 205, 147, 184, 147, 85, 33, 50, 196, 101, 253, 126, 21, 234, 37, 200, 92, 105, 158, 70, 74, 31, 227, 3, 63, 175, 105, 57, 182, 69, 239, 224, 62, 154, 93, 43, 242, 73, 253, 35, 117, 141, 98, 95, 139, 209, 108, 192, 255, 140, 8, 224, 45, 118, 62, 59, 218, 210, 19, 227, 0, 217, 220, 236, 158, 244, 143, 108, 209, 209, 6, 236, 230, 109, 74, 43, 192, 9, 227, 115, 179, 1, 191, 49, 202, 117, 158, 219, 181, 123, 39, 226, 90, 248, 219, 161, 122, 156, 99, 92, 180, 117, 204, 165, 30, 157, 60, 151, 37, 6, 205, 205, 136, 166, 3, 80, 58, 206, 207, 254, 149, 180, 30, 221, 14, 2, 44, 133, 52, 62, 59, 197, 190, 167, 129, 255, 239, 163, 28, 41, 249, 142, 223, 223, 161, 113, 137, 209, 181, 148, 94, 136, 148, 182, 171, 154, 185, 217, 128, 77, 255, 81, 243, 66, 228, 26, 240, 219, 209, 126, 18, 238, 183, 83, 166, 187, 22, 238, 167, 185, 0, 126, 131, 44, 80, 223, 161, 123, 105, 64, 227, 73, 184, 223, 78, 176, 207, 90, 152, 150, 36, 70, 7, 97, 90, 210, 253, 124, 58, 9, 246, 25, 58, 17, 231, 158, 112, 7, 225, 239, 165, 251, 165, 228, 233, 237, 127, 215, 194, 253, 93, 70, 180, 75, 240, 132, 180, 110, 164, 74, 114, 138, 93, 128, 64, 180, 239, 54, 44, 77, 255, 52, 82, 218, 94, 159, 174, 254, 191, 213, 181, 218, 210, 73, 184, 223, 189, 193, 35, 151, 24, 93, 251, 10, 121, 191, 73, 51, 56, 234, 226, 73, 184, 159, 102, 52, 27, 176, 233, 63, 2, 145, 251, 3, 29, 198, 231, 171, 184, 204, 235, 149, 206, 133, 209, 222, 113, 73, 230, 72, 111, 29, 202, 43, 181, 194, 244, 124, 104, 233, 92, 178, 169, 184, 107, 143, 231, 69, 144, 86, 43, 76, 203, 167, 74, 80, 174, 161, 99, 148, 28, 211, 216, 239, 43, 200, 230, 210, 85, 51, 142, 207, 55, 73, 188, 174, 231, 187, 73, 207, 181, 235, 24, 73, 231, 82, 166, 184, 118, 109, 175, 197, 116, 249, 59, 92, 226, 36, 141, 209, 216, 22, 98, 206, 99, 8, 154, 247, 76, 166, 182, 58, 112, 217, 45, 236, 33, 59, 119, 36, 251, 73, 182, 24, 239, 201, 204, 33, 141, 143, 116, 223, 123, 49, 144, 180, 243, 207, 22, 7, 55, 195, 212, 177, 14, 205, 73, 118, 141, 209, 53, 201, 60, 237, 253, 156, 131, 83, 216, 78, 148, 195, 165, 221, 236, 38, 210, 188, 173, 119, 82, 143, 130, 52, 59, 135, 242, 138, 172, 48, 92, 209, 93, 42, 119, 61, 144, 214, 189, 173, 114, 72, 127, 236, 143, 16, 162, 114, 61, 98, 184, 243, 118, 132, 124, 126, 184, 52, 70, 173, 162, 92, 41, 156, 120, 247, 140, 53, 12, 47, 24, 142, 153, 52, 70, 245, 72, 222, 83, 29, 11, 105, 124, 67, 154, 106, 140, 251, 6, 70, 115, 174, 221, 30, 231, 212, 197, 205, 172, 193, 241, 232, 136, 233, 122, 161, 137, 209, 208, 118, 68, 218, 55, 29, 26, 146, 193, 2, 201, 150, 91, 135, 113, 72, 133, 241, 227, 236, 59, 76, 221, 196, 126, 146, 173, 67, 126, 43, 215, 72, 227, 3, 184, 119, 144, 36, 55, 254, 181, 197, 193, 205, 80, 97, 124, 16, 231, 182, 189, 237, 185, 198, 232, 218, 212, 57, 60, 118, 77, 181, 176, 31, 41, 71, 229, 144, 158, 244, 124, 26, 138, 241, 152, 237, 72, 122, 65, 226, 86, 227, 210, 41, 217, 190, 109, 174, 23, 22, 205, 136, 137, 171, 143, 248, 253, 143, 59, 86, 49, 125, 171, 222, 242, 123, 198, 229, 196, 233, 222, 202, 36, 253, 35, 73, 238, 172, 92, 26, 152, 250, 173, 44, 183, 13, 64, 10, 23, 197, 22, 191, 151, 109, 143, 225, 152, 105, 98, 52, 85, 87, 63, 226, 247, 6, 238, 21, 105, 118, 178, 129, 241, 11, 251, 254, 106, 191, 118, 96, 31, 73, 61, 122, 196, 112, 103, 59, 116, 67, 237, 234, 17, 195, 23, 156, 254, 111, 43, 109, 143, 94, 222, 246, 189, 61, 119, 142, 200, 35, 22, 26, 154, 115, 203, 215, 5, 46, 101, 45, 238, 119, 154, 94, 241, 179, 109, 209, 196, 230, 222, 192, 66, 106, 35, 178, 26, 146, 248, 224, 206, 127, 215, 92, 211, 182, 35, 251, 167, 90, 223, 42, 92, 218, 227, 235, 118, 244, 136, 241, 85, 172, 230, 196, 232, 54, 239, 103, 252, 222, 254, 117, 136, 211, 94, 61, 226, 242, 119, 218, 190, 109, 174, 43, 121, 89, 245, 141, 174, 189, 199, 229, 28, 189, 174, 211, 207, 184, 137, 219, 63, 28, 19, 15, 101, 15, 217, 250, 182, 7, 0, 255, 99, 90, 146, 116, 181, 144, 207, 111, 114, 249, 123, 175, 240, 115, 46, 152, 229, 156, 117, 75, 22, 49, 170, 240, 115, 254, 215, 9, 63, 63, 137, 155, 170, 71, 92, 254, 142, 235, 183, 127, 62, 224, 215, 121, 119, 207, 144, 191, 220, 54, 20, 163, 247, 248, 117, 165, 147, 19, 46, 43, 13, 104, 230, 212, 197, 86, 227, 215, 149, 0, 158, 112, 249, 219, 174, 112, 137, 153, 100, 94, 228, 159, 0, 254, 247, 42, 189, 158, 245, 60, 199, 88, 106, 92, 254, 206, 154, 151, 35, 79, 184, 196, 50, 167, 186, 33, 213, 183, 153, 205, 219, 63, 247, 47, 178, 253, 192, 229, 60, 212, 172, 122, 213, 215, 189, 220, 219, 224, 107, 99, 241, 1, 220, 98, 116, 171, 194, 165, 45, 106, 174, 254, 221, 103, 0, 127, 41, 202, 153, 178, 10, 186, 23, 242, 164, 215, 167, 146, 218, 43, 235, 190, 81, 17, 106, 200, 239, 70, 82, 24, 101, 141, 65, 179, 6, 103, 41, 243, 66, 93, 116, 96, 140, 198, 104, 158, 28, 189, 70, 42, 99, 76, 99, 83, 226, 238, 109, 219, 56, 197, 140, 74, 27, 163, 46, 78, 49, 163, 170, 160, 91, 119, 124, 137, 180, 245, 104, 169, 164, 215, 180, 165, 198, 136, 125, 35, 33, 94, 216, 166, 73, 94, 100, 88, 242, 133, 13, 208, 125, 248, 32, 231, 71, 178, 174, 180, 143, 254, 151, 86, 143, 180, 23, 254, 51, 210, 125, 60, 109, 105, 15, 93, 140, 150, 214, 102, 107, 235, 209, 82, 47, 254, 207, 96, 140, 166, 108, 193, 24, 77, 97, 223, 72, 64, 83, 145, 206, 184, 140, 200, 45, 77, 13, 94, 216, 166, 104, 238, 106, 151, 24, 35, 109, 124, 150, 22, 35, 151, 78, 246, 25, 105, 173, 60, 19, 130, 230, 162, 214, 111, 109, 148, 146, 198, 211, 65, 23, 159, 37, 222, 244, 107, 158, 172, 45, 181, 131, 164, 189, 238, 51, 70, 60, 215, 238, 114, 121, 185, 102, 73, 23, 127, 192, 237, 109, 255, 58, 74, 73, 227, 210, 118, 0, 150, 214, 65, 114, 233, 68, 186, 190, 152, 146, 27, 215, 78, 246, 210, 46, 108, 45, 244, 49, 90, 218, 185, 182, 7, 175, 105, 83, 180, 157, 163, 51, 226, 174, 126, 21, 131, 203, 117, 127, 105, 237, 17, 99, 36, 228, 114, 113, 91, 90, 163, 228, 50, 130, 84, 218, 106, 7, 83, 180, 55, 108, 75, 187, 171, 117, 185, 248, 47, 165, 65, 114, 237, 100, 159, 177, 156, 27, 17, 192, 125, 185, 195, 37, 157, 107, 218, 81, 218, 37, 214, 35, 151, 39, 107, 75, 188, 238, 107, 166, 213, 44, 173, 205, 238, 185, 244, 141, 150, 22, 35, 245, 148, 145, 37, 6, 202, 229, 226, 182, 196, 121, 90, 29, 116, 49, 106, 227, 20, 51, 138, 22, 250, 58, 244, 138, 101, 140, 66, 206, 233, 100, 31, 35, 148, 55, 150, 71, 184, 117, 142, 94, 177, 156, 155, 126, 151, 243, 172, 223, 150, 112, 174, 245, 92, 207, 183, 109, 140, 194, 70, 226, 90, 151, 216, 55, 146, 109, 139, 81, 193, 173, 225, 94, 90, 101, 114, 105, 148, 246, 81, 74, 26, 143, 118, 20, 105, 73, 43, 105, 184, 118, 144, 234, 24, 133, 13, 108, 78, 39, 251, 140, 229, 188, 43, 226, 58, 2, 121, 198, 114, 70, 179, 93, 207, 179, 165, 93, 248, 93, 70, 32, 251, 109, 27, 161, 188, 49, 176, 111, 36, 51, 167, 237, 94, 140, 14, 238, 65, 90, 202, 136, 237, 22, 236, 0, 76, 113, 233, 4, 236, 163, 148, 52, 60, 151, 249, 107, 75, 106, 172, 247, 112, 111, 131, 206, 88, 198, 72, 237, 220, 155, 145, 54, 124, 145, 131, 155, 211, 49, 90, 210, 249, 214, 98, 222, 249, 86, 135, 47, 114, 20, 115, 206, 183, 165, 212, 37, 215, 190, 209, 146, 218, 110, 231, 121, 108, 215, 91, 233, 92, 94, 18, 93, 90, 131, 4, 184, 117, 150, 30, 239, 166, 84, 158, 14, 110, 245, 103, 9, 241, 113, 169, 55, 215, 219, 62, 124, 145, 163, 112, 153, 39, 122, 189, 85, 225, 139, 28, 212, 220, 27, 145, 51, 150, 241, 93, 136, 185, 35, 254, 75, 185, 174, 109, 49, 47, 70, 93, 248, 34, 7, 55, 167, 111, 180, 152, 186, 84, 97, 254, 9, 119, 14, 94, 234, 240, 248, 88, 100, 90, 13, 125, 108, 142, 81, 74, 26, 158, 235, 35, 218, 125, 140, 194, 6, 182, 199, 252, 246, 135, 55, 35, 211, 219, 18, 158, 60, 118, 152, 95, 151, 218, 224, 165, 14, 203, 199, 205, 200, 18, 58, 71, 46, 215, 179, 219, 173, 11, 94, 234, 240, 88, 151, 4, 230, 142, 144, 244, 91, 21, 186, 224, 1, 205, 25, 241, 95, 194, 197, 173, 231, 114, 194, 45, 97, 90, 141, 230, 163, 61, 75, 58, 175, 0, 63, 157, 236, 37, 156, 99, 45, 230, 199, 169, 244, 145, 90, 31, 117, 105, 9, 23, 125, 94, 243, 167, 205, 121, 15, 226, 122, 235, 66, 23, 60, 48, 31, 179, 33, 206, 40, 252, 230, 118, 78, 7, 96, 41, 141, 83, 133, 121, 39, 92, 233, 23, 183, 158, 235, 9, 87, 250, 220, 172, 57, 143, 104, 183, 17, 202, 27, 210, 30, 108, 164, 37, 90, 176, 141, 158, 226, 235, 130, 127, 14, 93, 240, 192, 24, 39, 25, 95, 55, 35, 93, 232, 130, 7, 84, 193, 207, 205, 72, 209, 215, 58, 95, 119, 108, 165, 55, 226, 29, 216, 9, 152, 226, 122, 194, 149, 190, 2, 194, 156, 71, 180, 165, 47, 195, 182, 135, 159, 118, 167, 244, 21, 107, 124, 204, 165, 237, 183, 82, 181, 240, 119, 29, 43, 249, 233, 72, 13, 127, 113, 42, 185, 62, 249, 188, 25, 233, 2, 151, 61, 164, 14, 254, 226, 180, 13, 92, 246, 96, 124, 221, 177, 245, 91, 137, 83, 0, 124, 156, 112, 75, 152, 59, 234, 90, 151, 74, 255, 40, 196, 156, 115, 172, 196, 243, 169, 183, 135, 191, 118, 167, 228, 39, 70, 21, 252, 117, 178, 75, 189, 169, 245, 121, 35, 82, 114, 156, 124, 15, 172, 157, 195, 22, 63, 24, 223, 245, 169, 11, 91, 252, 96, 124, 222, 140, 20, 27, 167, 26, 126, 131, 116, 70, 121, 119, 36, 190, 26, 166, 210, 185, 214, 165, 210, 71, 34, 183, 112, 175, 51, 199, 8, 229, 13, 101, 15, 191, 237, 78, 21, 182, 248, 193, 248, 122, 97, 173, 223, 74, 188, 113, 171, 224, 191, 243, 88, 218, 117, 172, 231, 179, 46, 157, 81, 104, 199, 8, 140, 147, 132, 197, 77, 91, 113, 113, 114, 93, 203, 119, 105, 13, 148, 143, 17, 255, 226, 42, 207, 29, 174, 117, 169, 228, 145, 200, 26, 243, 234, 77, 169, 35, 253, 123, 176, 113, 150, 234, 224, 55, 86, 85, 216, 226, 155, 243, 125, 35, 210, 111, 117, 200, 131, 8, 100, 206, 71, 105, 150, 116, 238, 49, 78, 50, 190, 103, 67, 156, 81, 224, 148, 45, 109, 101, 146, 222, 185, 148, 84, 161, 124, 189, 36, 186, 13, 93, 240, 192, 182, 112, 143, 77, 21, 161, 188, 33, 84, 224, 199, 50, 238, 217, 195, 127, 227, 204, 27, 18, 217, 118, 12, 91, 252, 32, 58, 248, 175, 79, 37, 182, 75, 45, 108, 226, 84, 90, 59, 85, 131, 113, 146, 208, 246, 141, 142, 138, 125, 139, 161, 173, 76, 47, 138, 223, 148, 82, 161, 124, 62, 22, 41, 181, 35, 0, 204, 235, 80, 22, 119, 247, 250, 198, 199, 40, 91, 29, 188, 212, 246, 246, 240, 127, 1, 59, 6, 61, 130, 112, 182, 240, 31, 171, 125, 208, 35, 176, 103, 81, 159, 206, 40, 111, 58, 155, 203, 124, 99, 233, 254, 37, 213, 41, 151, 107, 190, 116, 192, 178, 11, 120, 28, 214, 180, 113, 122, 197, 165, 159, 32, 221, 191, 8, 46, 83, 70, 30, 33, 239, 104, 151, 210, 121, 242, 249, 88, 164, 10, 92, 246, 144, 58, 184, 199, 165, 141, 80, 222, 16, 246, 152, 87, 95, 74, 186, 120, 245, 230, 198, 100, 104, 219, 134, 60, 136, 64, 90, 216, 196, 170, 164, 27, 126, 151, 151, 176, 150, 248, 84, 214, 229, 122, 223, 65, 126, 163, 87, 210, 249, 167, 189, 150, 125, 194, 242, 6, 32, 1, 125, 223, 168, 127, 47, 68, 186, 127, 21, 232, 56, 76, 73, 79, 160, 219, 19, 73, 243, 121, 205, 220, 73, 79, 30, 105, 227, 94, 170, 185, 83, 107, 74, 92, 182, 174, 197, 252, 58, 83, 68, 67, 115, 101, 15, 127, 231, 83, 233, 117, 200, 199, 103, 140, 75, 143, 149, 203, 57, 214, 65, 222, 145, 42, 233, 189, 17, 109, 167, 168, 95, 78, 116, 43, 220, 127, 27, 238, 80, 76, 105, 111, 220, 94, 112, 137, 83, 45, 220, 191, 11, 119, 40, 166, 164, 199, 123, 239, 184, 143, 194, 223, 212, 1, 142, 195, 148, 182, 17, 63, 226, 215, 198, 89, 250, 187, 156, 249, 126, 73, 180, 148, 19, 236, 214, 220, 56, 237, 195, 23, 217, 156, 143, 78, 82, 73, 23, 121, 192, 182, 147, 93, 90, 29, 242, 189, 164, 88, 137, 237, 144, 75, 140, 250, 78, 145, 180, 189, 106, 131, 29, 141, 173, 45, 244, 245, 164, 95, 134, 86, 58, 37, 98, 27, 230, 80, 76, 185, 180, 219, 125, 156, 106, 225, 254, 37, 156, 127, 174, 179, 33, 122, 157, 240, 55, 181, 253, 161, 216, 210, 206, 27, 189, 61, 96, 151, 224, 230, 198, 247, 27, 199, 37, 52, 68, 247, 184, 52, 226, 215, 91, 73, 143, 177, 1, 63, 115, 250, 75, 251, 56, 205, 30, 126, 207, 165, 226, 26, 228, 43, 46, 243, 250, 95, 33, 191, 240, 149, 176, 172, 95, 5, 183, 185, 198, 21, 46, 241, 93, 82, 189, 170, 161, 63, 159, 174, 235, 72, 39, 252, 77, 238, 237, 184, 203, 121, 119, 29, 39, 105, 156, 59, 251, 67, 49, 167, 237, 27, 109, 111, 126, 47, 173, 83, 89, 183, 85, 91, 232, 130, 116, 111, 100, 77, 90, 33, 115, 109, 168, 92, 26, 167, 82, 99, 49, 102, 238, 200, 237, 49, 124, 145, 205, 249, 88, 98, 236, 182, 97, 202, 217, 30, 254, 207, 165, 235, 173, 148, 119, 65, 0, 247, 151, 103, 91, 197, 190, 57, 15, 126, 0, 238, 55, 34, 218, 145, 199, 115, 144, 163, 177, 85, 65, 127, 67, 178, 191, 73, 163, 19, 254, 46, 247, 235, 155, 182, 243, 216, 221, 252, 94, 90, 175, 110, 127, 151, 27, 205, 249, 51, 212, 62, 23, 255, 148, 164, 130, 46, 72, 71, 220, 31, 89, 43, 253, 228, 59, 66, 127, 177, 155, 218, 74, 26, 161, 236, 73, 235, 65, 113, 39, 210, 0, 31, 79, 65, 142, 193, 75, 109, 103, 15, 183, 24, 104, 126, 215, 6, 59, 26, 123, 46, 241, 106, 33, 127, 71, 162, 132, 247, 68, 92, 218, 156, 235, 58, 178, 21, 254, 166, 132, 27, 56, 237, 13, 73, 63, 181, 230, 154, 52, 222, 181, 237, 161, 152, 210, 190, 99, 116, 239, 137, 99, 45, 252, 109, 103, 123, 40, 230, 142, 208, 197, 234, 222, 141, 189, 244, 28, 220, 26, 30, 135, 41, 109, 35, 53, 116, 242, 72, 211, 201, 49, 80, 210, 74, 160, 217, 142, 65, 143, 32, 140, 22, 243, 227, 82, 5, 47, 181, 29, 31, 241, 56, 163, 156, 142, 227, 30, 238, 199, 47, 253, 109, 73, 83, 108, 92, 110, 210, 246, 202, 223, 246, 251, 231, 202, 165, 78, 221, 62, 126, 150, 166, 177, 180, 88, 245, 83, 107, 110, 73, 71, 196, 115, 125, 82, 226, 50, 213, 175, 190, 147, 78, 45, 252, 109, 103, 119, 40, 230, 182, 208, 197, 105, 59, 51, 157, 44, 99, 165, 125, 155, 246, 121, 36, 45, 105, 160, 134, 2, 157, 42, 171, 55, 253, 199, 98, 153, 35, 31, 243, 144, 179, 60, 137, 6, 248, 122, 121, 173, 148, 152, 104, 27, 228, 126, 107, 161, 123, 234, 182, 15, 117, 64, 198, 90, 204, 107, 83, 142, 194, 223, 180, 246, 135, 98, 198, 101, 25, 191, 123, 245, 67, 58, 202, 155, 219, 181, 235, 154, 75, 125, 26, 154, 99, 45, 253, 125, 174, 58, 232, 226, 52, 244, 146, 122, 45, 252, 125, 174, 109, 252, 220, 5, 52, 174, 21, 27, 171, 10, 250, 133, 197, 199, 70, 138, 182, 194, 116, 114, 91, 57, 193, 199, 252, 218, 210, 26, 237, 123, 124, 76, 145, 104, 131, 151, 218, 134, 207, 213, 105, 234, 192, 101, 183, 208, 98, 94, 125, 144, 182, 45, 103, 148, 241, 68, 68, 122, 209, 185, 222, 174, 31, 241, 87, 138, 223, 229, 58, 250, 239, 82, 167, 186, 129, 180, 74, 63, 23, 93, 110, 250, 199, 174, 79, 210, 52, 114, 164, 105, 107, 250, 243, 110, 136, 244, 60, 30, 170, 151, 169, 155, 187, 128, 198, 53, 105, 172, 178, 155, 190, 213, 65, 23, 164, 169, 55, 136, 165, 163, 11, 57, 85, 42, 237, 73, 167, 137, 105, 174, 141, 246, 61, 62, 70, 253, 75, 122, 228, 175, 61, 183, 134, 182, 18, 158, 122, 180, 112, 59, 246, 246, 42, 141, 163, 240, 55, 57, 181, 45, 67, 92, 58, 69, 183, 231, 142, 52, 230, 217, 93, 180, 222, 204, 89, 198, 239, 94, 90, 210, 52, 114, 108, 159, 92, 110, 250, 199, 206, 35, 205, 10, 45, 185, 209, 94, 199, 174, 95, 168, 189, 167, 22, 166, 147, 99, 187, 181, 133, 46, 86, 83, 3, 172, 154, 216, 103, 67, 59, 209, 95, 114, 193, 47, 173, 82, 85, 208, 53, 230, 71, 232, 30, 101, 150, 196, 199, 168, 255, 62, 120, 169, 109, 104, 27, 160, 177, 173, 10, 92, 118, 223, 90, 184, 29, 119, 235, 152, 198, 245, 239, 114, 228, 50, 253, 234, 222, 197, 254, 89, 248, 219, 173, 233, 209, 216, 208, 182, 203, 125, 140, 134, 206, 37, 105, 253, 202, 245, 165, 81, 105, 93, 232, 183, 35, 198, 111, 40, 106, 97, 58, 185, 221, 196, 185, 220, 144, 76, 45, 53, 39, 141, 85, 231, 247, 80, 204, 105, 207, 193, 169, 58, 213, 147, 166, 151, 5, 109, 99, 62, 214, 72, 93, 147, 86, 170, 163, 191, 67, 49, 213, 65, 119, 210, 189, 135, 124, 250, 68, 110, 141, 208, 24, 151, 121, 146, 247, 182, 92, 95, 156, 185, 166, 189, 129, 29, 219, 114, 155, 98, 117, 171, 133, 219, 113, 183, 55, 233, 72, 207, 195, 92, 218, 149, 33, 174, 203, 248, 213, 119, 210, 146, 182, 239, 247, 126, 155, 178, 185, 203, 248, 221, 179, 21, 166, 211, 121, 63, 26, 123, 210, 99, 211, 180, 195, 181, 48, 157, 220, 226, 181, 135, 46, 78, 75, 28, 124, 236, 73, 219, 228, 126, 155, 154, 13, 209, 147, 166, 87, 121, 58, 14, 83, 218, 59, 220, 169, 187, 182, 94, 165, 72, 51, 117, 174, 47, 137, 74, 47, 2, 251, 64, 199, 97, 205, 199, 11, 144, 103, 228, 223, 73, 2, 252, 126, 185, 47, 247, 105, 52, 45, 220, 142, 187, 189, 73, 71, 211, 166, 108, 45, 15, 40, 0, 109, 187, 124, 47, 94, 128, 252, 226, 158, 227, 8, 109, 7, 63, 49, 114, 73, 51, 183, 250, 37, 173, 7, 154, 88, 105, 210, 237, 252, 29, 138, 57, 31, 75, 249, 221, 83, 98, 172, 124, 46, 160, 113, 235, 40, 76, 179, 246, 112, 28, 166, 180, 21, 74, 91, 1, 164, 233, 166, 172, 130, 251, 75, 162, 210, 223, 72, 111, 94, 82, 183, 135, 190, 49, 47, 49, 30, 174, 163, 145, 67, 219, 54, 108, 241, 189, 106, 225, 118, 204, 237, 157, 180, 52, 47, 216, 86, 86, 7, 20, 128, 203, 121, 52, 244, 196, 99, 43, 252, 125, 110, 243, 255, 93, 98, 36, 105, 87, 164, 109, 253, 189, 250, 153, 170, 10, 243, 63, 74, 51, 68, 218, 209, 202, 165, 126, 185, 196, 170, 22, 166, 93, 11, 211, 235, 252, 28, 138, 57, 109, 172, 180, 3, 70, 157, 48, 93, 105, 252, 163, 176, 154, 50, 114, 77, 154, 118, 202, 211, 4, 164, 127, 236, 126, 235, 31, 139, 72, 79, 170, 212, 143, 95, 74, 115, 188, 83, 155, 182, 158, 165, 198, 101, 52, 114, 104, 59, 34, 223, 209, 236, 22, 110, 199, 188, 189, 147, 150, 166, 189, 218, 91, 29, 80, 0, 46, 49, 27, 59, 94, 233, 13, 95, 235, 255, 80, 204, 184, 76, 79, 147, 212, 9, 205, 139, 125, 57, 181, 217, 218, 155, 254, 161, 23, 69, 239, 217, 10, 211, 188, 119, 78, 167, 168, 195, 252, 182, 106, 72, 45, 76, 179, 243, 112, 28, 33, 104, 99, 37, 157, 50, 162, 77, 63, 233, 186, 165, 25, 29, 114, 61, 24, 233, 9, 94, 207, 56, 14, 75, 115, 70, 252, 151, 246, 34, 228, 17, 250, 139, 223, 189, 45, 151, 145, 143, 33, 190, 230, 168, 247, 91, 27, 182, 248, 222, 180, 112, 59, 222, 189, 135, 244, 82, 109, 79, 166, 184, 196, 108, 172, 83, 164, 233, 56, 86, 22, 7, 100, 192, 37, 70, 221, 221, 148, 126, 87, 43, 210, 204, 197, 30, 186, 88, 105, 7, 212, 182, 194, 116, 183, 243, 15, 197, 156, 244, 88, 174, 207, 61, 13, 105, 253, 146, 214, 215, 152, 172, 103, 67, 0, 5, 212, 45, 77, 131, 226, 82, 161, 122, 157, 48, 253, 218, 49, 125, 75, 115, 71, 252, 165, 13, 92, 14, 39, 213, 20, 109, 3, 53, 182, 181, 129, 203, 238, 147, 246, 188, 178, 58, 239, 98, 107, 225, 118, 188, 251, 145, 52, 165, 55, 237, 71, 239, 71, 19, 134, 207, 37, 234, 122, 210, 191, 67, 46, 49, 179, 136, 209, 53, 105, 59, 150, 203, 121, 233, 114, 30, 106, 71, 29, 165, 3, 118, 219, 121, 135, 98, 78, 219, 118, 187, 60, 225, 151, 230, 209, 205, 59, 20, 115, 33, 102, 67, 0, 5, 124, 139, 69, 251, 104, 219, 245, 49, 89, 39, 76, 63, 197, 147, 80, 250, 71, 238, 183, 219, 249, 127, 210, 142, 65, 178, 149, 68, 200, 215, 11, 144, 253, 9, 153, 43, 159, 113, 232, 183, 58, 232, 17, 248, 161, 189, 96, 245, 219, 222, 83, 154, 185, 206, 239, 151, 182, 149, 215, 231, 202, 84, 187, 188, 23, 166, 149, 75, 27, 116, 132, 62, 70, 149, 34, 125, 233, 117, 113, 172, 174, 166, 162, 130, 223, 143, 210, 12, 145, 214, 91, 109, 7, 62, 164, 21, 244, 117, 171, 117, 200, 71, 218, 142, 117, 238, 135, 18, 132, 246, 169, 173, 107, 155, 44, 205, 39, 201, 120, 105, 30, 39, 186, 158, 124, 189, 109, 128, 60, 172, 104, 26, 169, 219, 63, 180, 38, 198, 46, 39, 108, 74, 164, 127, 99, 201, 150, 203, 5, 255, 30, 223, 83, 70, 146, 108, 60, 4, 92, 94, 2, 221, 79, 164, 185, 23, 166, 147, 235, 234, 44, 53, 244, 49, 147, 12, 126, 72, 219, 176, 148, 59, 65, 189, 22, 186, 248, 72, 110, 68, 110, 73, 235, 110, 14, 55, 115, 210, 115, 102, 110, 123, 211, 9, 211, 175, 29, 211, 15, 65, 27, 43, 215, 233, 141, 210, 243, 60, 245, 182, 95, 211, 198, 207, 57, 150, 172, 227, 165, 153, 91, 51, 247, 17, 217, 86, 152, 79, 106, 29, 172, 71, 232, 26, 244, 234, 230, 247, 210, 10, 114, 70, 94, 47, 213, 220, 35, 109, 104, 75, 143, 133, 207, 56, 156, 145, 207, 156, 217, 91, 218, 227, 220, 79, 164, 167, 185, 105, 157, 74, 43, 85, 218, 39, 140, 173, 32, 77, 77, 27, 150, 3, 237, 59, 69, 146, 24, 221, 146, 166, 93, 207, 56, 142, 16, 42, 232, 98, 117, 132, 251, 13, 170, 180, 221, 75, 53, 102, 33, 99, 85, 11, 243, 232, 28, 211, 15, 65, 211, 30, 187, 78, 25, 233, 73, 227, 117, 156, 145, 199, 160, 127, 206, 252, 125, 163, 216, 247, 143, 153, 121, 125, 23, 238, 215, 204, 204, 199, 183, 119, 138, 125, 63, 3, 248, 118, 243, 239, 26, 225, 111, 191, 3, 248, 170, 200, 43, 69, 141, 167, 116, 190, 32, 255, 88, 248, 242, 132, 223, 235, 84, 169, 14, 19, 255, 93, 211, 6, 125, 158, 81, 142, 152, 30, 20, 251, 126, 6, 240, 31, 193, 126, 141, 48, 189, 63, 21, 121, 199, 164, 105, 147, 255, 128, 44, 70, 215, 52, 29, 193, 47, 202, 180, 67, 107, 148, 251, 127, 0, 240, 195, 49, 47, 233, 223, 69, 218, 23, 8, 77, 219, 199, 217, 192, 61, 86, 37, 104, 20, 251, 222, 235, 27, 105, 156, 132, 251, 173, 145, 224, 192, 212, 17, 178, 187, 4, 31, 163, 204, 210, 59, 146, 51, 210, 10, 212, 22, 243, 238, 164, 230, 254, 62, 39, 154, 209, 128, 146, 99, 225, 107, 234, 72, 174, 211, 31, 122, 46, 83, 71, 218, 145, 244, 164, 237, 85, 202, 163, 64, 83, 52, 117, 231, 8, 89, 253, 232, 132, 233, 229, 48, 13, 2, 144, 63, 222, 119, 125, 10, 219, 10, 211, 207, 161, 157, 146, 94, 127, 166, 206, 61, 9, 105, 62, 169, 210, 180, 87, 219, 153, 121, 213, 194, 124, 82, 174, 99, 214, 231, 225, 45, 233, 223, 38, 169, 118, 172, 130, 188, 224, 62, 46, 246, 154, 199, 151, 115, 43, 177, 79, 210, 139, 212, 126, 224, 247, 154, 11, 103, 14, 243, 35, 135, 72, 27, 142, 80, 141, 126, 76, 154, 115, 43, 151, 243, 192, 141, 161, 210, 61, 0, 0, 20, 200, 73, 68, 65, 84, 133, 118, 217, 167, 177, 191, 189, 166, 126, 229, 94, 119, 52, 239, 132, 72, 234, 136, 52, 173, 92, 166, 107, 109, 33, 59, 158, 46, 209, 244, 67, 234, 32, 59, 22, 31, 75, 169, 230, 92, 207, 52, 211, 32, 124, 252, 221, 53, 253, 161, 20, 227, 5, 200, 7, 62, 124, 245, 107, 164, 249, 29, 61, 229, 231, 69, 11, 89, 161, 125, 46, 95, 36, 189, 128, 164, 20, 40, 105, 153, 135, 46, 120, 161, 79, 224, 88, 106, 200, 143, 179, 244, 88, 0, 250, 121, 164, 183, 91, 238, 163, 217, 189, 61, 220, 142, 191, 189, 73, 103, 43, 252, 93, 206, 171, 213, 244, 164, 199, 218, 111, 213, 72, 90, 149, 34, 157, 92, 104, 218, 26, 23, 210, 248, 231, 176, 180, 223, 17, 110, 231, 155, 139, 78, 152, 215, 214, 67, 94, 190, 73, 7, 5, 230, 206, 53, 190, 38, 237, 91, 164, 246, 222, 26, 16, 126, 160, 22, 208, 93, 75, 106, 79, 121, 206, 38, 125, 233, 198, 231, 73, 161, 233, 124, 164, 48, 186, 171, 169, 76, 99, 127, 216, 44, 43, 136, 146, 244, 226, 164, 217, 114, 141, 69, 79, 243, 119, 191, 221, 218, 8, 229, 181, 226, 26, 135, 235, 24, 116, 194, 223, 248, 108, 175, 98, 242, 245, 54, 127, 173, 72, 167, 50, 56, 14, 11, 154, 118, 217, 101, 52, 176, 85, 164, 159, 250, 205, 112, 200, 182, 86, 122, 125, 79, 241, 6, 69, 90, 118, 159, 157, 94, 105, 187, 120, 244, 152, 167, 47, 49, 150, 219, 211, 60, 5, 216, 123, 204, 119, 22, 233, 221, 148, 143, 19, 176, 151, 91, 160, 52, 143, 190, 199, 26, 92, 205, 133, 33, 133, 227, 118, 33, 109, 168, 58, 225, 126, 57, 199, 226, 154, 180, 49, 189, 221, 218, 24, 133, 53, 52, 55, 14, 210, 122, 227, 179, 189, 138, 169, 134, 159, 250, 162, 121, 162, 150, 194, 224, 134, 148, 229, 114, 133, 154, 235, 84, 202, 245, 77, 83, 135, 124, 240, 117, 189, 140, 65, 122, 99, 235, 243, 28, 209, 196, 43, 181, 233, 35, 49, 6, 106, 1, 249, 19, 154, 36, 158, 8, 75, 79, 64, 139, 199, 176, 154, 145, 154, 216, 129, 218, 66, 86, 206, 163, 32, 45, 205, 178, 93, 149, 207, 131, 8, 164, 131, 252, 196, 219, 11, 247, 205, 53, 22, 183, 164, 177, 185, 221, 218, 24, 133, 53, 164, 249, 187, 95, 111, 159, 176, 188, 142, 54, 160, 123, 2, 56, 118, 97, 145, 94, 156, 182, 70, 199, 97, 65, 211, 222, 184, 152, 59, 101, 48, 5, 45, 252, 93, 191, 164, 114, 108, 219, 52, 55, 163, 190, 251, 36, 185, 78, 31, 145, 198, 203, 247, 13, 130, 230, 157, 183, 232, 117, 108, 11, 89, 65, 125, 188, 32, 113, 75, 122, 242, 159, 17, 255, 237, 81, 105, 99, 46, 137, 83, 45, 76, 235, 140, 60, 71, 114, 53, 35, 2, 154, 88, 164, 214, 192, 184, 88, 193, 109, 5, 142, 62, 94, 37, 217, 195, 45, 14, 210, 173, 14, 119, 40, 230, 86, 208, 189, 24, 57, 212, 110, 72, 111, 242, 59, 163, 227, 176, 32, 189, 9, 113, 189, 134, 249, 108, 251, 99, 217, 34, 252, 223, 93, 90, 215, 82, 138, 155, 116, 100, 217, 98, 202, 139, 180, 61, 60, 26, 228, 237, 170, 134, 172, 204, 22, 3, 181, 154, 155, 162, 232, 83, 148, 164, 23, 253, 214, 32, 239, 156, 2, 117, 132, 172, 156, 91, 97, 122, 210, 198, 59, 137, 199, 30, 74, 210, 191, 105, 253, 182, 127, 201, 177, 184, 71, 218, 56, 221, 59, 254, 212, 30, 27, 206, 37, 189, 184, 184, 108, 53, 202, 210, 98, 254, 241, 111, 133, 191, 205, 233, 69, 82, 233, 200, 214, 209, 49, 253, 18, 98, 38, 109, 99, 165, 215, 47, 9, 233, 223, 37, 165, 184, 197, 152, 159, 221, 203, 113, 250, 136, 52, 94, 123, 163, 252, 179, 152, 29, 160, 233, 232, 90, 21, 114, 175, 40, 67, 172, 202, 165, 137, 211, 189, 139, 219, 61, 173, 34, 77, 159, 141, 159, 181, 10, 242, 227, 234, 59, 205, 154, 88, 180, 129, 142, 195, 82, 13, 249, 241, 222, 187, 40, 165, 210, 200, 250, 162, 105, 3, 52, 155, 244, 92, 204, 73, 7, 249, 241, 223, 27, 156, 208, 212, 61, 171, 54, 223, 55, 205, 49, 185, 208, 116, 128, 82, 141, 217, 17, 225, 219, 87, 205, 181, 32, 149, 115, 53, 198, 252, 236, 107, 185, 77, 31, 137, 57, 80, 11, 232, 206, 205, 104, 49, 147, 22, 242, 104, 88, 6, 77, 35, 185, 55, 44, 135, 175, 50, 106, 26, 90, 105, 227, 103, 25, 127, 223, 92, 47, 122, 37, 198, 98, 136, 38, 70, 247, 54, 118, 182, 101, 91, 29, 244, 8, 194, 168, 160, 139, 193, 246, 230, 247, 165, 190, 16, 105, 89, 39, 74, 136, 89, 172, 115, 70, 218, 17, 75, 161, 227, 168, 57, 183, 172, 158, 172, 74, 219, 193, 20, 174, 131, 41, 12, 212, 2, 129, 251, 14, 46, 159, 96, 255, 32, 220, 207, 242, 115, 188, 127, 67, 254, 73, 77, 105, 121, 125, 107, 132, 251, 125, 135, 238, 211, 162, 59, 225, 126, 107, 228, 51, 146, 187, 22, 238, 119, 184, 249, 103, 233, 103, 178, 215, 72, 247, 98, 22, 202, 3, 46, 241, 43, 169, 179, 253, 255, 112, 249, 196, 60, 141, 251, 6, 121, 187, 1, 92, 62, 37, 125, 125, 145, 251, 1, 121, 123, 171, 249, 188, 121, 108, 39, 225, 126, 107, 135, 180, 53, 49, 107, 28, 210, 183, 166, 233, 60, 255, 237, 57, 239, 131, 112, 191, 198, 115, 190, 46, 26, 225, 126, 95, 96, 247, 185, 117, 105, 95, 107, 141, 248, 237, 191, 180, 63, 246, 5, 243, 62, 185, 62, 69, 19, 179, 217, 125, 7, 151, 142, 118, 35, 220, 239, 224, 144, 182, 198, 147, 112, 191, 7, 196, 233, 112, 74, 47, 56, 95, 148, 233, 254, 137, 75, 231, 92, 98, 167, 76, 59, 150, 181, 227, 239, 158, 32, 143, 197, 31, 142, 121, 148, 132, 157, 237, 229, 250, 23, 228, 29, 191, 7, 252, 126, 19, 43, 109, 167, 26, 225, 126, 41, 56, 9, 247, 115, 189, 121, 144, 198, 44, 197, 155, 147, 181, 112, 191, 147, 65, 222, 210, 78, 208, 59, 196, 159, 118, 211, 8, 247, 59, 24, 150, 225, 47, 228, 115, 29, 108, 132, 251, 29, 12, 203, 0, 200, 7, 233, 0, 96, 99, 85, 136, 33, 41, 60, 38, 113, 41, 75, 103, 92, 150, 123, 164, 143, 38, 182, 14, 105, 111, 133, 105, 91, 60, 214, 179, 32, 125, 244, 117, 47, 86, 210, 223, 158, 145, 119, 7, 179, 134, 252, 56, 167, 182, 18, 167, 145, 104, 150, 109, 202, 253, 124, 113, 165, 173, 67, 215, 35, 57, 210, 54, 39, 165, 151, 212, 166, 72, 143, 201, 245, 250, 161, 169, 147, 169, 177, 142, 205, 20, 233, 188, 227, 214, 40, 127, 169, 35, 100, 229, 180, 110, 87, 164, 215, 193, 216, 231, 167, 52, 94, 33, 158, 64, 39, 187, 84, 116, 140, 175, 249, 140, 73, 249, 237, 81, 151, 139, 153, 84, 165, 72, 63, 212, 223, 98, 142, 14, 178, 99, 217, 222, 249, 173, 38, 22, 123, 203, 131, 48, 86, 67, 126, 156, 210, 6, 183, 180, 206, 118, 139, 249, 113, 169, 131, 151, 58, 44, 77, 155, 121, 196, 207, 11, 140, 166, 254, 133, 110, 107, 93, 73, 223, 55, 114, 237, 156, 104, 98, 150, 218, 185, 56, 167, 77, 246, 33, 135, 101, 254, 52, 215, 30, 107, 154, 23, 252, 98, 77, 163, 212, 124, 200, 41, 4, 205, 245, 34, 232, 82, 209, 177, 190, 230, 51, 68, 19, 168, 144, 47, 78, 132, 184, 40, 237, 21, 121, 164, 214, 136, 223, 146, 142, 94, 212, 3, 191, 215, 116, 30, 114, 93, 234, 79, 83, 167, 164, 27, 59, 219, 242, 58, 86, 10, 237, 218, 218, 159, 174, 126, 39, 253, 77, 46, 239, 67, 104, 46, 252, 174, 237, 134, 52, 253, 216, 223, 124, 184, 117, 132, 172, 220, 173, 81, 254, 210, 243, 56, 230, 8, 173, 180, 140, 93, 160, 242, 72, 255, 102, 251, 64, 229, 185, 149, 218, 64, 173, 166, 45, 60, 6, 42, 19, 32, 44, 208, 25, 97, 47, 222, 41, 6, 42, 196, 35, 195, 74, 145, 71, 172, 19, 75, 106, 110, 189, 170, 21, 105, 108, 173, 14, 194, 152, 230, 24, 53, 27, 59, 219, 191, 110, 117, 132, 242, 134, 166, 157, 102, 211, 215, 143, 163, 112, 255, 156, 206, 49, 235, 122, 33, 125, 60, 157, 90, 27, 29, 251, 124, 209, 92, 223, 98, 157, 179, 123, 97, 249, 66, 157, 15, 210, 245, 169, 99, 221, 156, 116, 194, 242, 133, 188, 233, 148, 254, 13, 175, 219, 65, 83, 181, 176, 48, 161, 255, 136, 210, 202, 117, 70, 184, 145, 22, 233, 31, 175, 155, 153, 143, 180, 226, 158, 145, 238, 227, 92, 95, 143, 147, 164, 23, 180, 216, 115, 212, 92, 73, 207, 63, 151, 141, 157, 237, 159, 219, 11, 202, 139, 197, 61, 154, 249, 137, 125, 59, 37, 125, 114, 52, 183, 93, 11, 73, 26, 135, 173, 99, 250, 210, 235, 83, 236, 143, 171, 93, 211, 180, 53, 150, 82, 95, 230, 239, 40, 44, 95, 29, 168, 60, 154, 107, 105, 140, 167, 78, 210, 178, 133, 108, 127, 53, 117, 125, 31, 162, 64, 177, 191, 230, 51, 164, 18, 150, 235, 140, 112, 243, 185, 66, 53, 16, 154, 74, 146, 194, 154, 163, 247, 72, 143, 97, 170, 131, 220, 10, 211, 57, 35, 254, 11, 52, 46, 164, 113, 122, 129, 219, 231, 218, 95, 145, 238, 205, 152, 43, 77, 157, 184, 141, 69, 29, 161, 188, 33, 105, 46, 202, 103, 92, 70, 153, 182, 194, 125, 115, 186, 153, 221, 195, 246, 186, 166, 169, 131, 169, 76, 107, 147, 150, 249, 104, 92, 14, 105, 159, 195, 186, 28, 247, 84, 194, 178, 157, 3, 151, 235, 40, 44, 147, 107, 125, 118, 149, 194, 247, 87, 134, 72, 99, 246, 138, 0, 231, 104, 236, 175, 249, 248, 40, 91, 168, 198, 76, 90, 22, 31, 177, 210, 140, 228, 166, 210, 144, 95, 219, 66, 86, 254, 78, 144, 86, 138, 211, 136, 124, 169, 33, 143, 211, 10, 110, 157, 237, 23, 164, 89, 71, 230, 104, 161, 143, 67, 204, 182, 44, 36, 205, 211, 192, 87, 148, 241, 181, 195, 91, 62, 219, 159, 123, 52, 55, 52, 181, 235, 65, 120, 38, 173, 23, 174, 49, 145, 146, 182, 121, 49, 234, 155, 180, 93, 177, 142, 209, 173, 84, 167, 143, 164, 58, 80, 11, 232, 166, 210, 153, 94, 19, 82, 249, 154, 207, 16, 105, 165, 63, 195, 126, 254, 143, 166, 113, 240, 241, 136, 68, 115, 236, 91, 15, 249, 249, 182, 133, 191, 19, 80, 154, 214, 25, 233, 92, 212, 164, 164, 245, 170, 111, 216, 217, 217, 254, 73, 115, 142, 220, 110, 169, 62, 9, 242, 97, 5, 249, 104, 78, 95, 183, 164, 251, 230, 242, 66, 164, 166, 189, 118, 37, 29, 0, 72, 165, 125, 150, 254, 157, 67, 148, 87, 26, 187, 208, 47, 147, 238, 133, 229, 10, 253, 55, 77, 117, 250, 72, 202, 3, 181, 149, 176, 108, 125, 27, 104, 70, 122, 161, 138, 53, 207, 44, 165, 183, 71, 165, 177, 154, 211, 112, 223, 58, 10, 243, 179, 62, 118, 23, 62, 27, 117, 205, 13, 161, 233, 9, 99, 160, 134, 254, 184, 216, 217, 254, 73, 51, 122, 155, 123, 93, 209, 208, 140, 82, 107, 54, 201, 249, 154, 130, 10, 242, 99, 114, 29, 24, 145, 182, 113, 49, 151, 170, 187, 38, 189, 150, 134, 232, 168, 237, 133, 101, 9, 29, 187, 185, 43, 101, 89, 58, 10, 203, 182, 15, 84, 30, 205, 57, 22, 235, 186, 163, 89, 185, 172, 210, 38, 46, 253, 50, 100, 35, 220, 239, 160, 45, 128, 39, 63, 144, 206, 103, 72, 165, 95, 249, 58, 120, 204, 83, 243, 41, 242, 214, 99, 190, 33, 157, 4, 251, 252, 128, 252, 43, 129, 13, 242, 121, 188, 237, 234, 7, 46, 199, 169, 253, 250, 232, 59, 92, 234, 103, 73, 157, 109, 233, 151, 211, 238, 105, 144, 79, 199, 81, 235, 47, 216, 180, 219, 141, 65, 154, 22, 190, 65, 94, 55, 214, 142, 121, 28, 132, 251, 53, 142, 233, 251, 180, 194, 229, 203, 160, 18, 39, 195, 114, 244, 14, 194, 253, 164, 159, 246, 246, 225, 17, 242, 24, 249, 254, 60, 189, 132, 180, 47, 20, 42, 102, 141, 112, 63, 203, 207, 212, 79, 121, 82, 236, 107, 246, 117, 77, 233, 29, 82, 204, 199, 133, 245, 72, 185, 66, 222, 201, 73, 71, 47, 124, 150, 33, 165, 17, 125, 45, 233, 223, 76, 58, 50, 160, 185, 123, 14, 117, 71, 239, 131, 180, 126, 119, 119, 126, 203, 145, 237, 249, 235, 107, 223, 139, 107, 41, 42, 232, 214, 214, 150, 108, 57, 189, 16, 41, 109, 179, 183, 142, 233, 231, 52, 183, 93, 218, 206, 156, 3, 149, 39, 197, 245, 219, 165, 115, 122, 99, 61, 161, 72, 109, 250, 200, 94, 88, 150, 216, 211, 244, 204, 250, 80, 146, 17, 237, 71, 200, 239, 228, 255, 210, 22, 192, 163, 191, 33, 191, 195, 254, 0, 187, 14, 68, 35, 220, 79, 59, 202, 56, 230, 7, 116, 163, 218, 181, 199, 188, 231, 208, 252, 13, 78, 194, 253, 190, 65, 55, 10, 82, 74, 71, 114, 12, 71, 182, 195, 140, 190, 229, 234, 27, 228, 237, 135, 212, 3, 226, 119, 26, 165, 164, 231, 133, 244, 105, 229, 173, 131, 98, 95, 215, 60, 124, 145, 230, 239, 243, 250, 53, 230, 135, 34, 175, 198, 176, 28, 46, 249, 28, 12, 203, 48, 230, 43, 116, 125, 33, 107, 210, 60, 164, 35, 241, 86, 158, 132, 251, 173, 161, 188, 65, 145, 116, 180, 27, 97, 90, 7, 77, 198, 70, 164, 23, 139, 7, 216, 84, 48, 205, 148, 20, 223, 13, 213, 147, 98, 223, 157, 231, 188, 93, 105, 46, 42, 223, 20, 251, 238, 132, 251, 61, 192, 240, 49, 80, 98, 250, 206, 246, 73, 249, 187, 119, 208, 213, 45, 202, 211, 191, 224, 191, 77, 138, 221, 105, 148, 58, 9, 247, 115, 61, 158, 31, 138, 60, 26, 199, 60, 124, 89, 11, 247, 59, 25, 150, 225, 86, 174, 83, 33, 14, 134, 101, 152, 146, 74, 204, 82, 159, 102, 115, 77, 51, 216, 224, 61, 110, 210, 199, 106, 161, 223, 250, 189, 167, 66, 220, 71, 193, 154, 71, 132, 22, 164, 143, 104, 206, 72, 227, 163, 28, 210, 120, 185, 188, 100, 123, 20, 166, 173, 126, 12, 20, 137, 244, 145, 238, 84, 189, 126, 132, 219, 52, 129, 92, 70, 39, 199, 104, 143, 57, 181, 246, 205, 154, 180, 142, 73, 183, 109, 216, 226, 59, 211, 28, 183, 171, 92, 62, 246, 211, 33, 189, 191, 173, 102, 42, 132, 117, 59, 37, 45, 75, 236, 169, 83, 169, 76, 31, 217, 10, 203, 144, 202, 139, 192, 209, 150, 138, 150, 102, 154, 66, 199, 13, 48, 126, 123, 116, 130, 180, 82, 89, 173, 206, 82, 9, 243, 63, 35, 141, 249, 201, 210, 120, 185, 92, 124, 90, 97, 218, 103, 228, 241, 130, 104, 13, 127, 177, 114, 233, 108, 215, 254, 14, 37, 26, 205, 241, 222, 158, 175, 37, 76, 159, 145, 216, 195, 61, 78, 62, 206, 219, 88, 172, 207, 3, 205, 90, 189, 49, 165, 180, 226, 136, 75, 185, 172, 111, 136, 83, 159, 159, 125, 237, 136, 248, 125, 129, 78, 88, 134, 84, 6, 50, 90, 200, 207, 83, 111, 101, 78, 249, 107, 62, 67, 52, 163, 202, 190, 39, 223, 75, 43, 149, 229, 73, 40, 45, 195, 25, 241, 71, 41, 165, 75, 174, 185, 252, 157, 52, 47, 136, 198, 90, 150, 82, 163, 134, 236, 88, 58, 97, 122, 218, 206, 118, 237, 233, 56, 98, 146, 94, 120, 110, 235, 198, 82, 58, 217, 128, 238, 188, 153, 218, 98, 143, 234, 105, 72, 235, 70, 235, 152, 190, 244, 252, 61, 35, 222, 160, 149, 230, 197, 195, 208, 101, 220, 11, 203, 101, 221, 193, 149, 14, 228, 165, 208, 113, 140, 253, 241, 154, 212, 191, 191, 114, 143, 166, 204, 222, 250, 13, 41, 127, 205, 103, 76, 172, 21, 56, 82, 248, 48, 129, 166, 65, 143, 253, 150, 111, 7, 219, 120, 109, 133, 233, 159, 145, 126, 71, 82, 250, 119, 237, 20, 105, 74, 59, 219, 57, 117, 152, 198, 72, 235, 219, 30, 151, 186, 211, 198, 41, 102, 116, 45, 228, 231, 77, 46, 23, 208, 41, 210, 186, 49, 167, 205, 148, 198, 44, 86, 39, 77, 115, 237, 8, 77, 83, 39, 45, 73, 175, 241, 41, 60, 225, 143, 61, 125, 36, 199, 129, 90, 32, 194, 20, 220, 148, 191, 230, 51, 70, 243, 113, 10, 95, 21, 172, 82, 228, 89, 123, 202, 115, 136, 244, 239, 246, 138, 184, 163, 117, 199, 129, 114, 249, 250, 27, 105, 254, 38, 123, 215, 131, 8, 68, 122, 17, 236, 148, 233, 74, 58, 219, 41, 140, 206, 248, 208, 65, 22, 195, 82, 142, 119, 14, 105, 172, 66, 181, 175, 214, 182, 176, 57, 191, 174, 73, 219, 229, 88, 109, 145, 116, 90, 68, 140, 39, 128, 41, 44, 243, 151, 203, 252, 236, 107, 210, 107, 172, 69, 157, 203, 117, 160, 86, 122, 173, 21, 151, 125, 108, 213, 145, 10, 242, 183, 172, 99, 47, 203, 114, 75, 243, 246, 232, 198, 83, 158, 154, 55, 210, 173, 151, 70, 210, 172, 190, 178, 49, 44, 199, 148, 181, 112, 63, 215, 143, 141, 124, 131, 124, 197, 140, 13, 242, 25, 125, 243, 233, 43, 198, 151, 254, 219, 1, 248, 119, 168, 194, 24, 147, 158, 119, 210, 183, 228, 75, 182, 241, 148, 78, 46, 43, 143, 88, 47, 241, 7, 200, 87, 161, 136, 21, 179, 181, 112, 191, 147, 97, 25, 134, 104, 150, 249, 179, 90, 73, 67, 154, 238, 193, 40, 127, 23, 49, 87, 31, 201, 101, 89, 191, 91, 218, 165, 162, 103, 105, 145, 238, 221, 173, 68, 232, 183, 71, 165, 35, 34, 71, 15, 121, 73, 72, 239, 100, 67, 149, 231, 86, 37, 44, 223, 121, 102, 62, 154, 199, 103, 177, 167, 210, 140, 145, 222, 101, 119, 142, 233, 175, 112, 57, 254, 238, 109, 123, 70, 62, 163, 145, 82, 210, 115, 52, 229, 122, 16, 146, 52, 94, 22, 245, 49, 52, 77, 59, 225, 122, 189, 144, 94, 83, 125, 93, 147, 180, 58, 97, 217, 182, 17, 202, 6, 196, 191, 198, 74, 227, 147, 210, 19, 177, 88, 211, 71, 52, 215, 247, 20, 223, 129, 209, 180, 125, 237, 156, 140, 246, 194, 76, 82, 189, 40, 105, 26, 53, 31, 39, 134, 244, 37, 137, 80, 111, 35, 107, 222, 114, 159, 85, 81, 28, 213, 138, 242, 205, 37, 109, 32, 99, 79, 165, 25, 35, 141, 87, 23, 171, 128, 25, 144, 158, 19, 140, 225, 79, 67, 231, 206, 113, 224, 223, 223, 59, 167, 114, 33, 109, 143, 106, 199, 244, 53, 157, 30, 215, 60, 230, 72, 117, 197, 145, 158, 38, 126, 22, 115, 164, 165, 121, 87, 6, 121, 207, 33, 61, 87, 247, 30, 243, 108, 133, 121, 166, 58, 80, 91, 65, 254, 247, 158, 117, 189, 144, 158, 116, 49, 26, 4, 9, 205, 219, 243, 71, 15, 249, 73, 43, 243, 214, 67, 94, 18, 169, 175, 186, 17, 178, 211, 35, 61, 233, 207, 72, 107, 52, 226, 90, 141, 112, 241, 42, 21, 99, 232, 166, 197, 165, 221, 218, 226, 103, 123, 47, 141, 229, 25, 233, 117, 60, 134, 72, 159, 130, 206, 185, 230, 165, 240, 194, 252, 61, 41, 175, 56, 114, 77, 122, 157, 245, 221, 142, 75, 235, 251, 209, 115, 190, 62, 196, 88, 125, 68, 58, 240, 24, 186, 158, 107, 152, 47, 21, 173, 185, 115, 76, 217, 30, 97, 26, 143, 20, 94, 212, 184, 71, 243, 82, 232, 156, 139, 135, 139, 173, 176, 92, 190, 158, 0, 72, 27, 232, 20, 27, 74, 128, 157, 68, 31, 164, 49, 204, 105, 20, 54, 150, 84, 219, 188, 57, 164, 215, 139, 57, 79, 189, 58, 97, 30, 161, 215, 97, 150, 158, 27, 177, 175, 249, 210, 191, 145, 239, 118, 80, 122, 189, 218, 123, 206, 215, 135, 24, 211, 71, 114, 31, 168, 5, 116, 3, 116, 91, 151, 12, 164, 149, 42, 133, 69, 217, 199, 104, 26, 143, 57, 39, 136, 38, 159, 106, 70, 62, 90, 149, 162, 92, 190, 27, 166, 41, 161, 239, 120, 53, 83, 105, 82, 236, 24, 72, 235, 88, 232, 191, 99, 78, 52, 157, 67, 154, 118, 68, 216, 115, 216, 154, 228, 28, 155, 115, 157, 0, 228, 215, 214, 208, 55, 123, 41, 175, 56, 114, 77, 186, 100, 220, 25, 126, 167, 1, 118, 194, 60, 91, 143, 121, 250, 36, 61, 87, 125, 244, 233, 164, 215, 170, 28, 6, 52, 188, 204, 138, 24, 90, 117, 164, 17, 22, 226, 32, 220, 47, 22, 237, 219, 163, 174, 39, 102, 35, 220, 239, 59, 46, 43, 97, 132, 162, 89, 117, 163, 65, 216, 155, 0, 233, 202, 14, 174, 43, 142, 220, 122, 82, 164, 245, 135, 167, 60, 41, 45, 63, 20, 251, 166, 58, 87, 63, 37, 210, 85, 32, 26, 203, 66, 120, 244, 55, 46, 171, 236, 12, 249, 130, 249, 109, 131, 102, 229, 155, 20, 219, 227, 147, 101, 33, 4, 14, 138, 125, 27, 143, 249, 74, 211, 58, 120, 204, 211, 39, 205, 234, 35, 115, 219, 190, 70, 184, 223, 97, 102, 62, 33, 60, 9, 247, 91, 67, 57, 64, 151, 227, 215, 124, 198, 132, 120, 41, 80, 58, 58, 219, 185, 30, 196, 12, 154, 199, 70, 115, 71, 107, 52, 98, 60, 90, 74, 121, 42, 205, 20, 233, 40, 65, 140, 58, 150, 147, 18, 30, 105, 166, 98, 139, 114, 70, 174, 174, 213, 248, 125, 138, 66, 7, 63, 55, 95, 169, 78, 185, 145, 94, 39, 183, 1, 203, 52, 164, 67, 216, 235, 153, 180, 237, 61, 122, 202, 207, 130, 166, 31, 208, 206, 204, 43, 215, 239, 175, 220, 99, 214, 127, 202, 245, 107, 62, 67, 42, 200, 3, 229, 250, 88, 76, 90, 177, 98, 53, 82, 210, 134, 233, 140, 112, 55, 79, 210, 242, 248, 124, 241, 70, 83, 23, 82, 155, 22, 37, 109, 236, 187, 88, 5, 204, 132, 244, 92, 168, 99, 21, 48, 35, 210, 58, 25, 178, 93, 201, 193, 17, 178, 152, 133, 92, 209, 75, 218, 54, 166, 240, 197, 67, 233, 77, 129, 175, 62, 202, 86, 152, 223, 222, 83, 126, 86, 164, 253, 148, 57, 215, 190, 210, 6, 106, 1, 15, 75, 69, 223, 155, 58, 210, 8, 51, 63, 168, 138, 26, 207, 55, 200, 31, 155, 188, 131, 219, 31, 95, 250, 129, 1, 235, 15, 213, 12, 217, 41, 246, 221, 24, 149, 225, 154, 166, 19, 243, 213, 99, 190, 154, 186, 192, 143, 150, 44, 219, 58, 118, 1, 50, 160, 105, 207, 114, 249, 112]);
            fileData8.push.apply(fileData8, [77, 8, 33, 62, 142, 163, 245, 13, 211, 31, 58, 251, 19, 126, 219, 99, 87, 7, 225, 126, 107, 248, 185, 49, 200, 241, 67, 53, 247, 60, 9, 247, 11, 49, 141, 246, 132, 176, 211, 104, 231, 208, 124, 0, 81, 252, 1, 27, 233, 221, 118, 138, 47, 140, 13, 209, 188, 64, 161, 29, 69, 208, 140, 234, 228, 176, 44, 82, 136, 181, 164, 165, 49, 243, 53, 34, 225, 146, 119, 103, 144, 247, 28, 185, 150, 59, 53, 123, 200, 226, 184, 141, 85, 192, 204, 72, 219, 21, 198, 243, 39, 205, 116, 198, 208, 134, 206, 143, 79, 72, 235, 189, 5, 105, 189, 243, 177, 204, 159, 244, 111, 85, 121, 200, 203, 82, 5, 249, 177, 180, 142, 121, 72, 219, 215, 84, 191, 191, 114, 143, 102, 148, 94, 52, 43, 66, 243, 135, 72, 233, 164, 147, 144, 158, 152, 218, 249, 132, 41, 55, 154, 215, 90, 200, 203, 105, 125, 81, 220, 10, 203, 209, 25, 229, 223, 9, 242, 118, 109, 104, 172, 212, 136, 27, 179, 82, 72, 235, 158, 245, 57, 80, 138, 148, 223, 79, 73, 149, 244, 92, 62, 35, 206, 224, 76, 139, 159, 235, 166, 127, 68, 154, 215, 250, 61, 60, 118, 124, 38, 72, 242, 57, 122, 200, 39, 4, 235, 233, 35, 210, 126, 86, 78, 3, 181, 128, 231, 165, 162, 91, 97, 66, 177, 151, 248, 113, 161, 121, 17, 78, 83, 9, 164, 127, 128, 20, 46, 52, 210, 147, 192, 250, 229, 37, 233, 223, 98, 111, 148, 255, 212, 133, 46, 197, 250, 45, 189, 56, 167, 80, 207, 82, 182, 5, 227, 232, 147, 52, 158, 185, 189, 16, 105, 77, 122, 45, 74, 245, 3, 90, 177, 133, 92, 230, 79, 114, 221, 180, 186, 86, 249, 166, 25, 24, 212, 198, 173, 50, 76, 59, 182, 89, 179, 34, 110, 231, 104, 75, 231, 151, 72, 231, 185, 166, 68, 51, 207, 102, 163, 216, 55, 245, 249, 217, 215, 158, 132, 251, 89, 207, 79, 150, 198, 236, 100, 148, 255, 223, 24, 254, 27, 31, 144, 207, 114, 100, 164, 119, 136, 93, 128, 194, 28, 132, 251, 133, 94, 174, 46, 117, 41, 206, 211, 206, 201, 65, 177, 175, 120, 222, 236, 140, 223, 239, 102, 230, 17, 138, 166, 239, 166, 141, 155, 102, 46, 187, 102, 169, 213, 20, 252, 5, 121, 127, 100, 115, 251, 47, 110, 59, 218, 141, 48, 161, 131, 112, 191, 148, 124, 131, 188, 220, 31, 32, 191, 40, 228, 212, 209, 254, 12, 127, 235, 82, 207, 33, 237, 200, 91, 198, 236, 63, 184, 188, 44, 179, 187, 218, 26, 0, 255, 131, 252, 26, 1, 242, 111, 29, 187, 0, 153, 224, 11, 145, 110, 14, 194, 253, 24, 179, 251, 126, 64, 222, 105, 108, 102, 230, 245, 21, 195, 3, 51, 39, 92, 254, 70, 185, 188, 216, 247, 13, 242, 115, 86, 219, 209, 110, 132, 251, 29, 148, 233, 166, 226, 73, 184, 223, 3, 70, 166, 158, 74, 31, 77, 231, 252, 8, 176, 133, 223, 71, 118, 154, 53, 22, 83, 88, 22, 9, 144, 61, 234, 181, 126, 12, 38, 141, 89, 109, 92, 142, 156, 72, 207, 207, 46, 86, 1, 51, 161, 121, 188, 73, 50, 146, 71, 235, 103, 112, 222, 251, 53, 205, 181, 40, 183, 199, 236, 161, 72, 167, 65, 248, 234, 179, 84, 72, 127, 238, 186, 132, 213, 244, 145, 220, 250, 66, 90, 154, 107, 199, 224, 28, 119, 73, 7, 108, 52, 129, 12, 172, 224, 233, 147, 154, 111, 52, 141, 101, 42, 166, 98, 240, 10, 219, 71, 188, 154, 55, 120, 115, 109, 200, 44, 212, 96, 71, 219, 151, 220, 206, 217, 212, 241, 133, 72, 61, 205, 32, 77, 29, 169, 140, 169, 211, 116, 124, 114, 237, 220, 89, 208, 196, 173, 21, 166, 41, 189, 62, 229, 60, 80, 11, 56, 126, 147, 228, 122, 234, 72, 201, 243, 179, 123, 154, 199, 77, 107, 76, 159, 156, 57, 77, 27, 233, 253, 192, 229, 17, 207, 189, 41, 36, 167, 183, 255, 102, 249, 24, 76, 243, 40, 148, 83, 56, 40, 38, 118, 112, 100, 56, 223, 88, 239, 43, 228, 211, 248, 26, 195, 114, 228, 236, 27, 228, 243, 102, 231, 206, 211, 46, 137, 197, 244, 145, 37, 244, 31, 1, 249, 244, 17, 224, 42, 38, 215, 29, 109, 105, 35, 120, 80, 100, 148, 34, 205, 75, 145, 83, 115, 137, 215, 194, 116, 82, 234, 104, 3, 151, 70, 126, 13, 224, 15, 252, 156, 159, 188, 1, 240, 127, 145, 198, 7, 9, 128, 244, 98, 70, 229, 56, 196, 46, 64, 97, 14, 194, 253, 248, 66, 228, 175, 120, 131, 50, 95, 238, 29, 183, 88, 158, 132, 251, 73, 223, 167, 90, 74, 255, 241, 63, 144, 223, 32, 255, 55, 118, 247, 190, 12, 57, 230, 132, 124, 38, 253, 15, 249, 10, 127, 171, 89, 28, 60, 239, 23, 210, 15, 0, 255, 6, 240, 175, 183, 237, 63, 129, 242, 61, 121, 222, 143, 136, 226, 226, 77, 177, 155, 131, 112, 191, 147, 97, 25, 114, 119, 16, 238, 151, 194, 34, 0, 41, 137, 117, 131, 114, 136, 148, 175, 79, 179, 98, 119, 196, 244, 156, 147, 253, 204, 2, 166, 66, 50, 183, 90, 178, 150, 178, 100, 206, 247, 17, 156, 107, 124, 75, 50, 207, 73, 58, 55, 108, 73, 36, 239, 23, 112, 221, 221, 105, 146, 151, 129, 66, 124, 33, 181, 36, 146, 15, 97, 28, 163, 149, 46, 77, 210, 121, 218, 156, 194, 52, 110, 170, 239, 194, 107, 240, 125, 146, 235, 176, 244, 155, 34, 123, 65, 90, 165, 156, 255, 21, 100, 215, 143, 187, 79, 239, 36, 39, 125, 73, 143, 253, 166, 78, 78, 105, 227, 246, 136, 241, 14, 16, 27, 201, 223, 77, 197, 172, 139, 87, 180, 164, 77, 117, 16, 121, 65, 145, 145, 220, 32, 231, 246, 229, 178, 216, 106, 248, 187, 104, 47, 201, 212, 199, 187, 246, 241, 138, 150, 141, 22, 227, 49, 228, 139, 144, 247, 77, 125, 132, 69, 83, 247, 86, 152, 238, 83, 181, 190, 10, 158, 128, 169, 27, 139, 237, 216, 143, 135, 42, 236, 17, 229, 85, 214, 71, 12, 87, 12, 109, 133, 120, 196, 175, 35, 58, 71, 92, 2, 93, 90, 204, 124, 186, 215, 217, 238, 227, 70, 195, 182, 184, 95, 103, 95, 192, 250, 166, 113, 123, 206, 150, 122, 65, 8, 105, 168, 110, 50, 166, 195, 86, 24, 94, 181, 133, 157, 108, 185, 247, 184, 12, 208, 92, 95, 83, 158, 193, 54, 113, 74, 139, 251, 131, 14, 159, 160, 31, 180, 25, 26, 64, 123, 69, 121, 231, 255, 10, 195, 79, 4, 126, 59, 111, 255, 113, 39, 129, 10, 63, 23, 103, 255, 142, 203, 164, 249, 146, 87, 127, 168, 113, 153, 200, 223, 79, 92, 127, 66, 254, 243, 208, 115, 177, 194, 175, 47, 81, 252, 29, 171, 32, 153, 121, 143, 203, 57, 218, 215, 217, 47, 184, 188, 208, 90, 242, 121, 106, 165, 197, 229, 237, 240, 62, 150, 159, 113, 249, 10, 24, 185, 121, 196, 229, 156, 222, 92, 253, 187, 29, 120, 110, 75, 180, 248, 249, 130, 253, 23, 176, 30, 82, 56, 21, 126, 173, 123, 174, 215, 146, 21, 126, 189, 54, 61, 161, 236, 254, 84, 223, 222, 173, 223, 254, 249, 128, 59, 109, 221, 255, 7, 253, 6, 67, 253, 190, 171, 48, 168, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130]);
            Module["FS_createDataFile"]("/", "walkSheet.png", fileData8, true, true, false);

            function processPackageData(arrayBuffer) {
                Module.finishedDataFileDownloads++;
                assert(arrayBuffer, "Loading data file failed.");
                assert(arrayBuffer instanceof ArrayBuffer, "bad input to processPackageData");
                var byteArray = new Uint8Array(arrayBuffer);
                if (Module["SPLIT_MEMORY"]) Module.printErr("warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting");
                var ptr = Module["getMemory"](byteArray.length);
                Module["HEAPU8"].set(byteArray, ptr);
                DataRequest.prototype.byteArray = Module["HEAPU8"].subarray(ptr, ptr + byteArray.length);
                var files = metadata.files;
                for (var i = 0; i < files.length; ++i) {
                    DataRequest.prototype.requests[files[i].filename].onload()
                }
                Module["removeRunDependency"]("datafile_index.data")
            }
            Module["addRunDependency"]("datafile_index.data");
            if (!Module.preloadResults) Module.preloadResults = {};
            Module.preloadResults[PACKAGE_NAME] = {
                fromCache: false
            };
            if (fetched) {
                processPackageData(fetched);
                fetched = null
            } else {
                fetchedCallback = processPackageData
            }
        }
        if (Module["calledRun"]) {
            runWithFS()
        } else {
            if (!Module["preRun"]) Module["preRun"] = [];
            Module["preRun"].push(runWithFS)
        }
    });
    loadPackage({
        "files": [{
            "audio": 0,
            "start": 0,
            "crunched": 0,
            "end": 97804,
            "filename": "/assets/asphalt.png"
        }, {
            "audio": 0,
            "start": 97804,
            "crunched": 0,
            "end": 192929,
            "filename": "/assets/freewayWall.png"
        }, {
            "audio": 0,
            "start": 192929,
            "crunched": 0,
            "end": 195643,
            "filename": "/assets/nightSky.png"
        }, {
            "audio": 0,
            "start": 195643,
            "crunched": 0,
            "end": 201161,
            "filename": "/assets/spray - Copy - Copy.png"
        }, {
            "audio": 0,
            "start": 201161,
            "crunched": 0,
            "end": 208691,
            "filename": "/assets/spray.png"
        }, {
            "audio": 0,
            "start": 208691,
            "crunched": 0,
            "end": 208873,
            "filename": "/assets/transparent.png"
        }, {
            "audio": 0,
            "start": 208873,
            "crunched": 0,
            "end": 555031,
            "filename": "/assets/tunnelWall.png"
        }, {
            "audio": 0,
            "start": 555031,
            "crunched": 0,
            "end": 576816,
            "filename": "/assets/walkSheet.png"
        }],
        "remote_package_size": 598601,
        "package_uuid": "a6cfb431-3229-4e32-890b-a0504e674e67"
    })
}))();
var moduleOverrides = {};
var key;
for (key in Module) {
    if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key]
    }
}
Module["arguments"] = [];
Module["thisProgram"] = "./this.program";
Module["quit"] = (function(status, toThrow) {
    throw toThrow
});
Module["preRun"] = [];
Module["postRun"] = [];
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
if (Module["ENVIRONMENT"]) {
    if (Module["ENVIRONMENT"] === "WEB") {
        ENVIRONMENT_IS_WEB = true
    } else if (Module["ENVIRONMENT"] === "WORKER") {
        ENVIRONMENT_IS_WORKER = true
    } else if (Module["ENVIRONMENT"] === "NODE") {
        ENVIRONMENT_IS_NODE = true
    } else if (Module["ENVIRONMENT"] === "SHELL") {
        ENVIRONMENT_IS_SHELL = true
    } else {
        throw new Error("Module['ENVIRONMENT'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.")
    }
} else {
    ENVIRONMENT_IS_WEB = typeof window === "object";
    ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
    ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER
}
if (ENVIRONMENT_IS_NODE) {
    var nodeFS;
    var nodePath;
    Module["read"] = function shell_read(filename, binary) {
        var ret;
        if (!nodeFS) nodeFS = require("fs");
        if (!nodePath) nodePath = require("path");
        filename = nodePath["normalize"](filename);
        ret = nodeFS["readFileSync"](filename);
        return binary ? ret : ret.toString()
    };
    Module["readBinary"] = function readBinary(filename) {
        var ret = Module["read"](filename, true);
        if (!ret.buffer) {
            ret = new Uint8Array(ret)
        }
        assert(ret.buffer);
        return ret
    };
    if (process["argv"].length > 1) {
        Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/")
    }
    Module["arguments"] = process["argv"].slice(2);
    if (typeof module !== "undefined") {
        module["exports"] = Module
    }
    process["on"]("uncaughtException", (function(ex) {
        if (!(ex instanceof ExitStatus)) {
            throw ex
        }
    }));
    process["on"]("unhandledRejection", (function(reason, p) {
        Module["printErr"]("node.js exiting due to unhandled promise rejection");
        process["exit"](1)
    }));
    Module["inspect"] = (function() {
        return "[Emscripten Module object]"
    })
} else if (ENVIRONMENT_IS_SHELL) {
    if (typeof read != "undefined") {
        Module["read"] = function shell_read(f) {
            return read(f)
        }
    }
    Module["readBinary"] = function readBinary(f) {
        var data;
        if (typeof readbuffer === "function") {
            return new Uint8Array(readbuffer(f))
        }
        data = read(f, "binary");
        assert(typeof data === "object");
        return data
    };
    if (typeof scriptArgs != "undefined") {
        Module["arguments"] = scriptArgs
    } else if (typeof arguments != "undefined") {
        Module["arguments"] = arguments
    }
    if (typeof quit === "function") {
        Module["quit"] = (function(status, toThrow) {
            quit(status)
        })
    }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module["read"] = function shell_read(url) {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, false);
        xhr.send(null);
        return xhr.responseText
    };
    if (ENVIRONMENT_IS_WORKER) {
        Module["readBinary"] = function readBinary(url) {
            var xhr = new XMLHttpRequest;
            xhr.open("GET", url, false);
            xhr.responseType = "arraybuffer";
            xhr.send(null);
            return new Uint8Array(xhr.response)
        }
    }
    Module["readAsync"] = function readAsync(url, onload, onerror) {
        var xhr = new XMLHttpRequest;
        xhr.open("GET", url, true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                onload(xhr.response);
                return
            }
            onerror()
        };
        xhr.onerror = onerror;
        xhr.send(null)
    };
    Module["setWindowTitle"] = (function(title) {
        document.title = title
    })
} else {
    throw new Error("unknown runtime environment")
}
Module["print"] = typeof console !== "undefined" ? console.log.bind(console) : typeof print !== "undefined" ? print : null;
Module["printErr"] = typeof printErr !== "undefined" ? printErr : typeof console !== "undefined" && console.warn.bind(console) || Module["print"];
Module.print = Module["print"];
Module.printErr = Module["printErr"];
for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key]
    }
}
moduleOverrides = undefined;
var STACK_ALIGN = 16;
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = (function() {
    abort("cannot use the stack before compiled code is ready to run, and has provided stack access")
});

function staticAlloc(size) {
    assert(!staticSealed);
    var ret = STATICTOP;
    STATICTOP = STATICTOP + size + 15 & -16;
    return ret
}

function dynamicAlloc(size) {
    assert(DYNAMICTOP_PTR);
    var ret = HEAP32[DYNAMICTOP_PTR >> 2];
    var end = ret + size + 15 & -16;
    HEAP32[DYNAMICTOP_PTR >> 2] = end;
    if (end >= TOTAL_MEMORY) {
        var success = enlargeMemory();
        if (!success) {
            HEAP32[DYNAMICTOP_PTR >> 2] = ret;
            return 0
        }
    }
    return ret
}

function alignMemory(size, factor) {
    if (!factor) factor = STACK_ALIGN;
    var ret = size = Math.ceil(size / factor) * factor;
    return ret
}

function getNativeTypeSize(type) {
    switch (type) {
        case "i1":
        case "i8":
            return 1;
        case "i16":
            return 2;
        case "i32":
            return 4;
        case "i64":
            return 8;
        case "float":
            return 4;
        case "double":
            return 8;
        default:
            {
                if (type[type.length - 1] === "*") {
                    return 4
                } else if (type[0] === "i") {
                    var bits = parseInt(type.substr(1));
                    assert(bits % 8 === 0);
                    return bits / 8
                } else {
                    return 0
                }
            }
    }
}

function warnOnce(text) {
    if (!warnOnce.shown) warnOnce.shown = {};
    if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        Module.printErr(text)
    }
}
var jsCallStartIndex = 1;
var functionPointers = new Array(0);

function addFunction(func, sig) {
    if (typeof sig === "undefined") {
        Module.printErr("Warning: addFunction: Provide a wasm function signature " + "string as a second argument")
    }
    var base = 0;
    for (var i = base; i < base + 0; i++) {
        if (!functionPointers[i]) {
            functionPointers[i] = func;
            return jsCallStartIndex + i
        }
    }
    throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS."
}

function dynCall(sig, ptr, args) {
    if (args && args.length) {
        assert(args.length == sig.length - 1);
        assert("dynCall_" + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
        return Module["dynCall_" + sig].apply(null, [ptr].concat(args))
    } else {
        assert(sig.length == 1);
        assert("dynCall_" + sig in Module, "bad function pointer type - no table for sig '" + sig + "'");
        return Module["dynCall_" + sig].call(null, ptr)
    }
}
var Runtime = {
    dynCall: dynCall,
    getTempRet0: (function() {
        abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."')
    }),
    staticAlloc: (function() {
        abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."')
    }),
    stackAlloc: (function() {
        abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."')
    })
};
var GLOBAL_BASE = 1024;
var ABORT = 0;
var EXITSTATUS = 0;

function assert(condition, text) {
    if (!condition) {
        abort("Assertion failed: " + text)
    }
}

function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") type = "i32";
    switch (type) {
        case "i1":
            HEAP8[ptr >> 0] = value;
            break;
        case "i8":
            HEAP8[ptr >> 0] = value;
            break;
        case "i16":
            HEAP16[ptr >> 1] = value;
            break;
        case "i32":
            HEAP32[ptr >> 2] = value;
            break;
        case "i64":
            tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
            break;
        case "float":
            HEAPF32[ptr >> 2] = value;
            break;
        case "double":
            HEAPF64[ptr >> 3] = value;
            break;
        default:
            abort("invalid type for setValue: " + type)
    }
}
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_NONE = 4;

function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === "number") {
        zeroinit = true;
        size = slab
    } else {
        zeroinit = false;
        size = slab.length
    }
    var singleType = typeof types === "string" ? types : null;
    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr
    } else {
        ret = [typeof _malloc === "function" ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length))
    }
    if (zeroinit) {
        var stop;
        ptr = ret;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[ptr >> 2] = 0
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[ptr++ >> 0] = 0
        }
        return ret
    }
    if (singleType === "i8") {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(slab, ret)
        } else {
            HEAPU8.set(new Uint8Array(slab), ret)
        }
        return ret
    }
    var i = 0,
        type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];
        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue
        }
        assert(type, "Must know what type to store in allocate!");
        if (type == "i64") type = "i32";
        setValue(ret + i, curr, type);
        if (previousType !== type) {
            typeSize = getNativeTypeSize(type);
            previousType = type
        }
        i += typeSize
    }
    return ret
}

function getMemory(size) {
    if (!staticSealed) return staticAlloc(size);
    if (!runtimeInitialized) return dynamicAlloc(size);
    return _malloc(size)
}

function Pointer_stringify(ptr, length) {
    if (length === 0 || !ptr) return "";
    var hasUtf = 0;
    var t;
    var i = 0;
    while (1) {
        assert(ptr + i < TOTAL_MEMORY);
        t = HEAPU8[ptr + i >> 0];
        hasUtf |= t;
        if (t == 0 && !length) break;
        i++;
        if (length && i == length) break
    }
    if (!length) length = i;
    var ret = "";
    if (hasUtf < 128) {
        var MAX_CHUNK = 1024;
        var curr;
        while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK
        }
        return ret
    }
    return UTF8ToString(ptr)
}
var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(u8Array, idx) {
    var endPtr = idx;
    while (u8Array[endPtr]) ++endPtr;
    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr))
    } else {
        var u0, u1, u2, u3, u4, u5;
        var str = "";
        while (1) {
            u0 = u8Array[idx++];
            if (!u0) return str;
            if (!(u0 & 128)) {
                str += String.fromCharCode(u0);
                continue
            }
            u1 = u8Array[idx++] & 63;
            if ((u0 & 224) == 192) {
                str += String.fromCharCode((u0 & 31) << 6 | u1);
                continue
            }
            u2 = u8Array[idx++] & 63;
            if ((u0 & 240) == 224) {
                u0 = (u0 & 15) << 12 | u1 << 6 | u2
            } else {
                u3 = u8Array[idx++] & 63;
                if ((u0 & 248) == 240) {
                    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3
                } else {
                    u4 = u8Array[idx++] & 63;
                    if ((u0 & 252) == 248) {
                        u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4
                    } else {
                        u5 = u8Array[idx++] & 63;
                        u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5
                    }
                }
            }
            if (u0 < 65536) {
                str += String.fromCharCode(u0)
            } else {
                var ch = u0 - 65536;
                str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023)
            }
        }
    }
}

function UTF8ToString(ptr) {
    return UTF8ArrayToString(HEAPU8, ptr)
}

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) return 0;
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            if (outIdx >= endIdx) break;
            outU8Array[outIdx++] = u
        } else if (u <= 2047) {
            if (outIdx + 1 >= endIdx) break;
            outU8Array[outIdx++] = 192 | u >> 6;
            outU8Array[outIdx++] = 128 | u & 63
        } else if (u <= 65535) {
            if (outIdx + 2 >= endIdx) break;
            outU8Array[outIdx++] = 224 | u >> 12;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        } else if (u <= 2097151) {
            if (outIdx + 3 >= endIdx) break;
            outU8Array[outIdx++] = 240 | u >> 18;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        } else if (u <= 67108863) {
            if (outIdx + 4 >= endIdx) break;
            outU8Array[outIdx++] = 248 | u >> 24;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        } else {
            if (outIdx + 5 >= endIdx) break;
            outU8Array[outIdx++] = 252 | u >> 30;
            outU8Array[outIdx++] = 128 | u >> 24 & 63;
            outU8Array[outIdx++] = 128 | u >> 18 & 63;
            outU8Array[outIdx++] = 128 | u >> 12 & 63;
            outU8Array[outIdx++] = 128 | u >> 6 & 63;
            outU8Array[outIdx++] = 128 | u & 63
        }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
    assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite)
}

function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        var u = str.charCodeAt(i);
        if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
        if (u <= 127) {
            ++len
        } else if (u <= 2047) {
            len += 2
        } else if (u <= 65535) {
            len += 3
        } else if (u <= 2097151) {
            len += 4
        } else if (u <= 67108863) {
            len += 5
        } else {
            len += 6
        }
    }
    return len
}
var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;

function allocateUTF8(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = _malloc(size);
    if (ret) stringToUTF8Array(str, HEAP8, ret, size);
    return ret
}

function allocateUTF8OnStack(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = stackAlloc(size);
    stringToUTF8Array(str, HEAP8, ret, size);
    return ret
}

function demangle(func) {
    warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
    return func
}

function demangleAll(text) {
    var regex = /__Z[\w\d_]+/g;
    return text.replace(regex, (function(x) {
        var y = demangle(x);
        return x === y ? x : x + " [" + y + "]"
    }))
}

function jsStackTrace() {
    var err = new Error;
    if (!err.stack) {
        try {
            throw new Error(0)
        } catch (e) {
            err = e
        }
        if (!err.stack) {
            return "(no stack trace available)"
        }
    }
    return err.stack.toString()
}

function stackTrace() {
    var js = jsStackTrace();
    if (Module["extraStackTrace"]) js += "\n" + Module["extraStackTrace"]();
    return demangleAll(js)
}
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
    if (x % multiple > 0) {
        x += multiple - x % multiple
    }
    return x
}
var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
    Module["buffer"] = buffer = buf
}

function updateGlobalBufferViews() {
    Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
    Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
    Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer)
}
var STATIC_BASE, STATICTOP, staticSealed;
var STACK_BASE, STACKTOP, STACK_MAX;
var DYNAMIC_BASE, DYNAMICTOP_PTR;
STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;

function writeStackCookie() {
    assert((STACK_MAX & 3) == 0);
    HEAPU32[(STACK_MAX >> 2) - 1] = 34821223;
    HEAPU32[(STACK_MAX >> 2) - 2] = 2310721022
}

function checkStackCookie() {
    if (HEAPU32[(STACK_MAX >> 2) - 1] != 34821223 || HEAPU32[(STACK_MAX >> 2) - 2] != 2310721022) {
        abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x" + HEAPU32[(STACK_MAX >> 2) - 2].toString(16) + " " + HEAPU32[(STACK_MAX >> 2) - 1].toString(16))
    }
    if (HEAP32[0] !== 1668509029) throw "Runtime error: The application has corrupted its heap memory area (address zero)!"
}

function abortStackOverflow(allocSize) {
    abort("Stack overflow! Attempted to allocate " + allocSize + " bytes on the stack, but stack has only " + (STACK_MAX - stackSave() + allocSize) + " bytes available!")
}

function abortOnCannotGrowMemory() {
    abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ")
}

function enlargeMemory() {
    abortOnCannotGrowMemory()
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 134217728;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined, "JS engine does not provide full typed array support");
if (Module["buffer"]) {
    buffer = Module["buffer"];
    assert(buffer.byteLength === TOTAL_MEMORY, "provided buffer should be " + TOTAL_MEMORY + " bytes, but it is " + buffer.byteLength)
} else {
    if (typeof WebAssembly === "object" && typeof WebAssembly.Memory === "function") {
        assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
        Module["wasmMemory"] = new WebAssembly.Memory({
            "initial": TOTAL_MEMORY / WASM_PAGE_SIZE,
            "maximum": TOTAL_MEMORY / WASM_PAGE_SIZE
        });
        buffer = Module["wasmMemory"].buffer
    } else {
        buffer = new ArrayBuffer(TOTAL_MEMORY)
    }
    assert(buffer.byteLength === TOTAL_MEMORY);
    Module["buffer"] = buffer
}
updateGlobalBufferViews();

function getTotalMemory() {
    return TOTAL_MEMORY
}
HEAP32[0] = 1668509029;
HEAP16[1] = 25459;
if (HEAPU8[2] !== 115 || HEAPU8[3] !== 99) throw "Runtime error: expected the system to be little-endian!";

function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == "function") {
            callback();
            continue
        }
        var func = callback.func;
        if (typeof func === "number") {
            if (callback.arg === undefined) {
                Module["dynCall_v"](func)
            } else {
                Module["dynCall_vi"](func, callback.arg)
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg)
        }
    }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
    if (Module["preRun"]) {
        if (typeof Module["preRun"] == "function") Module["preRun"] = [Module["preRun"]];
        while (Module["preRun"].length) {
            addOnPreRun(Module["preRun"].shift())
        }
    }
    callRuntimeCallbacks(__ATPRERUN__)
}

function ensureInitRuntime() {
    checkStackCookie();
    if (runtimeInitialized) return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__)
}

function preMain() {
    checkStackCookie();
    callRuntimeCallbacks(__ATMAIN__)
}

function exitRuntime() {
    checkStackCookie();
    callRuntimeCallbacks(__ATEXIT__);
    runtimeExited = true
}

function postRun() {
    checkStackCookie();
    if (Module["postRun"]) {
        if (typeof Module["postRun"] == "function") Module["postRun"] = [Module["postRun"]];
        while (Module["postRun"].length) {
            addOnPostRun(Module["postRun"].shift())
        }
    }
    callRuntimeCallbacks(__ATPOSTRUN__)
}

function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb)
}

function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb)
}

function writeArrayToMemory(array, buffer) {
    assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
    HEAP8.set(array, buffer)
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === str.charCodeAt(i) & 255);
        HEAP8[buffer++ >> 0] = str.charCodeAt(i)
    }
    if (!dontAddNull) HEAP8[buffer >> 0] = 0
}
assert(Math["imul"] && Math["fround"] && Math["clz32"] && Math["trunc"], "this is a legacy browser, build with LEGACY_VM_SUPPORT");
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
    var orig = id;
    while (1) {
        if (!runDependencyTracking[id]) return id;
        id = orig + Math.random()
    }
    return id
}

function addRunDependency(id) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies)
    }
    if (id) {
        assert(!runDependencyTracking[id]);
        runDependencyTracking[id] = 1;
        if (runDependencyWatcher === null && typeof setInterval !== "undefined") {
            runDependencyWatcher = setInterval((function() {
                if (ABORT) {
                    clearInterval(runDependencyWatcher);
                    runDependencyWatcher = null;
                    return
                }
                var shown = false;
                for (var dep in runDependencyTracking) {
                    if (!shown) {
                        shown = true;
                        Module.printErr("still waiting on run dependencies:")
                    }
                    Module.printErr("dependency: " + dep)
                }
                if (shown) {
                    Module.printErr("(end of list)")
                }
            }), 1e4)
        }
    } else {
        Module.printErr("warning: run dependency added without ID")
    }
}

function removeRunDependency(id) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
        Module["monitorRunDependencies"](runDependencies)
    }
    if (id) {
        assert(runDependencyTracking[id]);
        delete runDependencyTracking[id]
    } else {
        Module.printErr("warning: run dependency removed without ID")
    }
    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback()
        }
    }
}
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
    return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0
}

function integrateWasmJS() {
    var wasmTextFile = "index.wast";
    var wasmBinaryFile = "index.wasm";
    var asmjsCodeFile = "index.temp.asm.js";
    if (typeof Module["locateFile"] === "function") {
        if (!isDataURI(wasmTextFile)) {
            wasmTextFile = Module["locateFile"](wasmTextFile)
        }
        if (!isDataURI(wasmBinaryFile)) {
            wasmBinaryFile = Module["locateFile"](wasmBinaryFile)
        }
        if (!isDataURI(asmjsCodeFile)) {
            asmjsCodeFile = Module["locateFile"](asmjsCodeFile)
        }
    }
    var wasmPageSize = 64 * 1024;
    var info = {
        "global": null,
        "env": null,
        "asm2wasm": {
            "f64-rem": (function(x, y) {
                return x % y
            }),
            "debugger": (function() {
                debugger
            })
        },
        "parent": Module
    };
    var exports = null;

    function mergeMemory(newBuffer) {
        var oldBuffer = Module["buffer"];
        if (newBuffer.byteLength < oldBuffer.byteLength) {
            Module["printErr"]("the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here")
        }
        var oldView = new Int8Array(oldBuffer);
        var newView = new Int8Array(newBuffer);
        newView.set(oldView);
        updateGlobalBuffer(newBuffer);
        updateGlobalBufferViews()
    }

    function fixImports(imports) {
        return imports
    }

    function getBinary() {
        try {
            if (Module["wasmBinary"]) {
                return new Uint8Array(Module["wasmBinary"])
            }
            if (Module["readBinary"]) {
                return Module["readBinary"](wasmBinaryFile)
            } else {
                throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)"
            }
        } catch (err) {
            abort(err)
        }
    }

    function getBinaryPromise() {
        if (!Module["wasmBinary"] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
            return fetch(wasmBinaryFile, {
                credentials: "same-origin"
            }).then((function(response) {
                if (!response["ok"]) {
                    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'"
                }
                return response["arrayBuffer"]()
            })).catch((function() {
                return getBinary()
            }))
        }
        return new Promise((function(resolve, reject) {
            resolve(getBinary())
        }))
    }

    function doNativeWasm(global, env, providedBuffer) {
        if (typeof WebAssembly !== "object") {
            Module["printErr"]("no native wasm support detected");
            return false
        }
        if (!(Module["wasmMemory"] instanceof WebAssembly.Memory)) {
            Module["printErr"]("no native wasm Memory in use");
            return false
        }
        env["memory"] = Module["wasmMemory"];
        info["global"] = {
            "NaN": NaN,
            "Infinity": Infinity
        };
        info["global.Math"] = Math;
        info["env"] = env;

        function receiveInstance(instance, module) {
            exports = instance.exports;
            if (exports.memory) mergeMemory(exports.memory);
            Module["asm"] = exports;
            Module["usingWasm"] = true;
            removeRunDependency("wasm-instantiate")
        }
        addRunDependency("wasm-instantiate");
        if (Module["instantiateWasm"]) {
            try {
                return Module["instantiateWasm"](info, receiveInstance)
            } catch (e) {
                Module["printErr"]("Module.instantiateWasm callback failed with error: " + e);
                return false
            }
        }
        var trueModule = Module;

        function receiveInstantiatedSource(output) {
            assert(Module === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
            trueModule = null;
            receiveInstance(output["instance"], output["module"])
        }

        function instantiateArrayBuffer(receiver) {
            getBinaryPromise().then((function(binary) {
                return WebAssembly.instantiate(binary, info)
            })).then(receiver).catch((function(reason) {
                Module["printErr"]("failed to asynchronously prepare wasm: " + reason);
                abort(reason)
            }))
        }
        if (!Module["wasmBinary"] && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function") {
            WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, {
                credentials: "same-origin"
            }), info).then(receiveInstantiatedSource).catch((function(reason) {
                Module["printErr"]("wasm streaming compile failed: " + reason);
                Module["printErr"]("falling back to ArrayBuffer instantiation");
                instantiateArrayBuffer(receiveInstantiatedSource)
            }))
        } else {
            instantiateArrayBuffer(receiveInstantiatedSource)
        }
        return {}
    }
    Module["asmPreload"] = Module["asm"];
    var asmjsReallocBuffer = Module["reallocBuffer"];
    var wasmReallocBuffer = (function(size) {
        var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE;
        size = alignUp(size, PAGE_MULTIPLE);
        var old = Module["buffer"];
        var oldSize = old.byteLength;
        if (Module["usingWasm"]) {
            try {
                var result = Module["wasmMemory"].grow((size - oldSize) / wasmPageSize);
                if (result !== (-1 | 0)) {
                    return Module["buffer"] = Module["wasmMemory"].buffer
                } else {
                    return null
                }
            } catch (e) {
                console.error("Module.reallocBuffer: Attempted to grow from " + oldSize + " bytes to " + size + " bytes, but got error: " + e);
                return null
            }
        }
    });
    Module["reallocBuffer"] = (function(size) {
        if (finalMethod === "asmjs") {
            return asmjsReallocBuffer(size)
        } else {
            return wasmReallocBuffer(size)
        }
    });
    var finalMethod = "";
    Module["asm"] = (function(global, env, providedBuffer) {
        env = fixImports(env);
        if (!env["table"]) {
            var TABLE_SIZE = Module["wasmTableSize"];
            if (TABLE_SIZE === undefined) TABLE_SIZE = 1024;
            var MAX_TABLE_SIZE = Module["wasmMaxTableSize"];
            if (typeof WebAssembly === "object" && typeof WebAssembly.Table === "function") {
                if (MAX_TABLE_SIZE !== undefined) {
                    env["table"] = new WebAssembly.Table({
                        "initial": TABLE_SIZE,
                        "maximum": MAX_TABLE_SIZE,
                        "element": "anyfunc"
                    })
                } else {
                    env["table"] = new WebAssembly.Table({
                        "initial": TABLE_SIZE,
                        element: "anyfunc"
                    })
                }
            } else {
                env["table"] = new Array(TABLE_SIZE)
            }
            Module["wasmTable"] = env["table"]
        }
        if (!env["memoryBase"]) {
            env["memoryBase"] = Module["STATIC_BASE"]
        }
        if (!env["tableBase"]) {
            env["tableBase"] = 0
        }
        var exports;
        exports = doNativeWasm(global, env, providedBuffer);
        if (!exports) abort("no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods");
        return exports
    })
}
integrateWasmJS();
var ASM_CONSTS = [(function() {
    return screen.width
}), (function() {
    return screen.height
}), (function($0) {
    if (typeof Module["setWindowTitle"] !== "undefined") {
        Module["setWindowTitle"](Module["Pointer_stringify"]($0))
    }
    return 0
}), (function($0, $1, $2) {
    var w = $0;
    var h = $1;
    var pixels = $2;
    if (!Module["SDL2"]) Module["SDL2"] = {};
    var SDL2 = Module["SDL2"];
    if (SDL2.ctxCanvas !== Module["canvas"]) {
        SDL2.ctx = Module["createContext"](Module["canvas"], false, true);
        SDL2.ctxCanvas = Module["canvas"]
    }
    if (SDL2.w !== w || SDL2.h !== h || SDL2.imageCtx !== SDL2.ctx) {
        SDL2.image = SDL2.ctx.createImageData(w, h);
        SDL2.w = w;
        SDL2.h = h;
        SDL2.imageCtx = SDL2.ctx
    }
    var data = SDL2.image.data;
    var src = pixels >> 2;
    var dst = 0;
    var num;
    if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
        num = data.length;
        while (dst < num) {
            var val = HEAP32[src];
            data[dst] = val & 255;
            data[dst + 1] = val >> 8 & 255;
            data[dst + 2] = val >> 16 & 255;
            data[dst + 3] = 255;
            src++;
            dst += 4
        }
    } else {
        if (SDL2.data32Data !== data) {
            SDL2.data32 = new Int32Array(data.buffer);
            SDL2.data8 = new Uint8Array(data.buffer)
        }
        var data32 = SDL2.data32;
        num = data32.length;
        data32.set(HEAP32.subarray(src, src + num));
        var data8 = SDL2.data8;
        var i = 3;
        var j = i + 4 * num;
        if (num % 8 == 0) {
            while (i < j) {
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0;
                data8[i] = 255;
                i = i + 4 | 0
            }
        } else {
            while (i < j) {
                data8[i] = 255;
                i = i + 4 | 0
            }
        }
    }
    SDL2.ctx.putImageData(SDL2.image, 0, 0);
    return 0
}), (function($0, $1, $2) {
    var w = $0;
    var h = $1;
    var pixels = $2;
    var canvas = document.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = canvas.getContext("2d");
    var image = ctx.createImageData(w, h);
    var data = image.data;
    var src = pixels >> 2;
    var dst = 0;
    var num;
    if (typeof CanvasPixelArray !== "undefined" && data instanceof CanvasPixelArray) {
        num = data.length;
        while (dst < num) {
            var val = HEAP32[src];
            data[dst] = val & 255;
            data[dst + 1] = val >> 8 & 255;
            data[dst + 2] = val >> 16 & 255;
            data[dst + 3] = val >> 24 & 255;
            src++;
            dst += 4
        }
    } else {
        var data32 = new Int32Array(data.buffer);
        num = data32.length;
        data32.set(HEAP32.subarray(src, src + num))
    }
    ctx.putImageData(image, 0, 0);
    var url = "url(" + canvas.toDataURL() + "), auto";
    var urlBuf = _malloc(url.length + 1);
    stringToUTF8(url, urlBuf, url.length + 1);
    return urlBuf
}), (function($0) {
    if (Module["canvas"]) {
        Module["canvas"].style["cursor"] = Module["Pointer_stringify"]($0)
    }
    return 0
}), (function() {
    if (Module["canvas"]) {
        Module["canvas"].style["cursor"] = "none"
    }
}), (function() {
    if (typeof AudioContext !== "undefined") {
        return 1
    } else if (typeof webkitAudioContext !== "undefined") {
        return 1
    }
    return 0
}), (function() {
    if (typeof navigator.mediaDevices !== "undefined" && typeof navigator.mediaDevices.getUserMedia !== "undefined") {
        return 1
    } else if (typeof navigator.webkitGetUserMedia !== "undefined") {
        return 1
    }
    return 0
}), (function($0) {
    if (typeof SDL2 === "undefined") {
        SDL2 = {}
    }
    if (!$0) {
        SDL2.audio = {}
    } else {
        SDL2.capture = {}
    }
    if (!SDL2.audioContext) {
        if (typeof AudioContext !== "undefined") {
            SDL2.audioContext = new AudioContext
        } else if (typeof webkitAudioContext !== "undefined") {
            SDL2.audioContext = new webkitAudioContext
        }
    }
    return SDL2.audioContext === undefined ? -1 : 0
}), (function() {
    return SDL2.audioContext.sampleRate
}), (function($0, $1, $2, $3) {
    var have_microphone = (function(stream) {
        if (SDL2.capture.silenceTimer !== undefined) {
            clearTimeout(SDL2.capture.silenceTimer);
            SDL2.capture.silenceTimer = undefined
        }
        SDL2.capture.mediaStreamNode = SDL2.audioContext.createMediaStreamSource(stream);
        SDL2.capture.scriptProcessorNode = SDL2.audioContext.createScriptProcessor($1, $0, 1);
        SDL2.capture.scriptProcessorNode.onaudioprocess = (function(audioProcessingEvent) {
            if (SDL2 === undefined || SDL2.capture === undefined) {
                return
            }
            audioProcessingEvent.outputBuffer.getChannelData(0).fill(0);
            SDL2.capture.currentCaptureBuffer = audioProcessingEvent.inputBuffer;
            Runtime.dynCall("vi", $2, [$3])
        });
        SDL2.capture.mediaStreamNode.connect(SDL2.capture.scriptProcessorNode);
        SDL2.capture.scriptProcessorNode.connect(SDL2.audioContext.destination);
        SDL2.capture.stream = stream
    });
    var no_microphone = (function(error) {});
    SDL2.capture.silenceBuffer = SDL2.audioContext.createBuffer($0, $1, SDL2.audioContext.sampleRate);
    SDL2.capture.silenceBuffer.getChannelData(0).fill(0);
    var silence_callback = (function() {
        SDL2.capture.currentCaptureBuffer = SDL2.capture.silenceBuffer;
        Runtime.dynCall("vi", $2, [$3])
    });
    SDL2.capture.silenceTimer = setTimeout(silence_callback, $1 / SDL2.audioContext.sampleRate * 1e3);
    if (navigator.mediaDevices !== undefined && navigator.mediaDevices.getUserMedia !== undefined) {
        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false
        }).then(have_microphone).catch(no_microphone)
    } else if (navigator.webkitGetUserMedia !== undefined) {
        navigator.webkitGetUserMedia({
            audio: true,
            video: false
        }, have_microphone, no_microphone)
    }
}), (function($0, $1, $2, $3) {
    SDL2.audio.scriptProcessorNode = SDL2.audioContext["createScriptProcessor"]($1, 0, $0);
    SDL2.audio.scriptProcessorNode["onaudioprocess"] = (function(e) {
        if (SDL2 === undefined || SDL2.audio === undefined) {
            return
        }
        SDL2.audio.currentOutputBuffer = e["outputBuffer"];
        Runtime.dynCall("vi", $2, [$3])
    });
    SDL2.audio.scriptProcessorNode["connect"](SDL2.audioContext["destination"])
}), (function($0) {
    if ($0) {
        if (SDL2.capture.silenceTimer !== undefined) {
            clearTimeout(SDL2.capture.silenceTimer)
        }
        if (SDL2.capture.stream !== undefined) {
            var tracks = SDL2.capture.stream.getAudioTracks();
            for (var i = 0; i < tracks.length; i++) {
                SDL2.capture.stream.removeTrack(tracks[i])
            }
            SDL2.capture.stream = undefined
        }
        if (SDL2.capture.scriptProcessorNode !== undefined) {
            SDL2.capture.scriptProcessorNode.onaudioprocess = (function(audioProcessingEvent) {});
            SDL2.capture.scriptProcessorNode.disconnect();
            SDL2.capture.scriptProcessorNode = undefined
        }
        if (SDL2.capture.mediaStreamNode !== undefined) {
            SDL2.capture.mediaStreamNode.disconnect();
            SDL2.capture.mediaStreamNode = undefined
        }
        if (SDL2.capture.silenceBuffer !== undefined) {
            SDL2.capture.silenceBuffer = undefined
        }
        SDL2.capture = undefined
    } else {
        if (SDL2.audio.scriptProcessorNode != undefined) {
            SDL2.audio.scriptProcessorNode.disconnect();
            SDL2.audio.scriptProcessorNode = undefined
        }
        SDL2.audio = undefined
    }
    if (SDL2.audioContext !== undefined && SDL2.audio === undefined && SDL2.capture === undefined) {
        SDL2.audioContext.close();
        SDL2.audioContext = undefined
    }
}), (function($0, $1) {
    var numChannels = SDL2.capture.currentCaptureBuffer.numberOfChannels;
    if (numChannels == 1) {
        var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(0);
        if (channelData.length != $1) {
            throw "Web Audio capture buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!"
        }
        for (var j = 0; j < $1; ++j) {
            setValue($0 + j * 4, channelData[j], "float")
        }
    } else {
        for (var c = 0; c < numChannels; ++c) {
            var channelData = SDL2.capture.currentCaptureBuffer.getChannelData(c);
            if (channelData.length != $1) {
                throw "Web Audio capture buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!"
            }
            for (var j = 0; j < $1; ++j) {
                setValue($0 + (j * numChannels + c) * 4, channelData[j], "float")
            }
        }
    }
}), (function($0, $1) {
    var numChannels = SDL2.audio.currentOutputBuffer["numberOfChannels"];
    for (var c = 0; c < numChannels; ++c) {
        var channelData = SDL2.audio.currentOutputBuffer["getChannelData"](c);
        if (channelData.length != $1) {
            throw "Web Audio output buffer length mismatch! Destination size: " + channelData.length + " samples vs expected " + $1 + " samples!"
        }
        for (var j = 0; j < $1; ++j) {
            channelData[j] = HEAPF32[$0 + (j * numChannels + c << 2) >> 2]
        }
    }
})];

function _emscripten_asm_const_i(code) {
    return ASM_CONSTS[code]()
}

function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {
    return ASM_CONSTS[code](a0, a1, a2, a3)
}

function _emscripten_asm_const_ii(code, a0) {
    return ASM_CONSTS[code](a0)
}

function _emscripten_asm_const_iii(code, a0, a1) {
    return ASM_CONSTS[code](a0, a1)
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
    return ASM_CONSTS[code](a0, a1, a2)
}
STATIC_BASE = GLOBAL_BASE;
STATICTOP = STATIC_BASE + 89712;
__ATINIT__.push({
    func: (function() {
        __GLOBAL__I_000101()
    })
}, {
    func: (function() {
        __GLOBAL__sub_I_Game_cpp()
    })
}, {
    func: (function() {
        __GLOBAL__sub_I_iostream_cpp()
    })
});
var STATIC_BUMP = 89712;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;
var tempDoublePtr = STATICTOP;
STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function _emscripten_set_main_loop_timing(mode, value) {
    Browser.mainLoop.timingMode = mode;
    Browser.mainLoop.timingValue = value;
    if (!Browser.mainLoop.func) {
        console.error("emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.");
        return 1
    }
    if (mode == 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
            var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;
            setTimeout(Browser.mainLoop.runner, timeUntilNextTick)
        };
        Browser.mainLoop.method = "timeout"
    } else if (mode == 1) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
            Browser.requestAnimationFrame(Browser.mainLoop.runner)
        };
        Browser.mainLoop.method = "rAF"
    } else if (mode == 2) {
        if (typeof setImmediate === "undefined") {
            var setImmediates = [];
            var emscriptenMainLoopMessageId = "setimmediate";

            function Browser_setImmediate_messageHandler(event) {
                if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
                    event.stopPropagation();
                    setImmediates.shift()()
                }
            }
            addEventListener("message", Browser_setImmediate_messageHandler, true);
            setImmediate = function Browser_emulated_setImmediate(func) {
                setImmediates.push(func);
                if (ENVIRONMENT_IS_WORKER) {
                    if (Module["setImmediates"] === undefined) Module["setImmediates"] = [];
                    Module["setImmediates"].push(func);
                    postMessage({
                        target: emscriptenMainLoopMessageId
                    })
                } else postMessage(emscriptenMainLoopMessageId, "*")
            }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
            setImmediate(Browser.mainLoop.runner)
        };
        Browser.mainLoop.method = "immediate"
    }
    return 0
}

function _emscripten_get_now() {
    abort()
}

function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
    Module["noExitRuntime"] = true;
    assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
    Browser.mainLoop.func = func;
    Browser.mainLoop.arg = arg;
    var browserIterationFunc;
    if (typeof arg !== "undefined") {
        browserIterationFunc = (function() {
            Module["dynCall_vi"](func, arg)
        })
    } else {
        browserIterationFunc = (function() {
            Module["dynCall_v"](func)
        })
    }
    var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
    Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
            var start = Date.now();
            var blocker = Browser.mainLoop.queue.shift();
            blocker.func(blocker.arg);
            if (Browser.mainLoop.remainingBlockers) {
                var remaining = Browser.mainLoop.remainingBlockers;
                var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
                if (blocker.counted) {
                    Browser.mainLoop.remainingBlockers = next
                } else {
                    next = next + .5;
                    Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9
                }
            }
            console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
            Browser.mainLoop.updateStatus();
            if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
            setTimeout(Browser.mainLoop.runner, 0);
            return
        }
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
            Browser.mainLoop.scheduler();
            return
        } else if (Browser.mainLoop.timingMode == 0) {
            Browser.mainLoop.tickStartTime = _emscripten_get_now()
        }
        if (Browser.mainLoop.method === "timeout" && Module.ctx) {
            Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
            Browser.mainLoop.method = ""
        }
        Browser.mainLoop.runIter(browserIterationFunc);
        checkStackCookie();
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
        if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
        Browser.mainLoop.scheduler()
    };
    if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps);
        else _emscripten_set_main_loop_timing(1, 1);
        Browser.mainLoop.scheduler()
    }
    if (simulateInfiniteLoop) {
        throw "SimulateInfiniteLoop"
    }
}
var Browser = {
    mainLoop: {
        scheduler: null,
        method: "",
        currentlyRunningMainloop: 0,
        func: null,
        arg: 0,
        timingMode: 0,
        timingValue: 0,
        currentFrameNumber: 0,
        queue: [],
        pause: (function() {
            Browser.mainLoop.scheduler = null;
            Browser.mainLoop.currentlyRunningMainloop++
        }),
        resume: (function() {
            Browser.mainLoop.currentlyRunningMainloop++;
            var timingMode = Browser.mainLoop.timingMode;
            var timingValue = Browser.mainLoop.timingValue;
            var func = Browser.mainLoop.func;
            Browser.mainLoop.func = null;
            _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
            _emscripten_set_main_loop_timing(timingMode, timingValue);
            Browser.mainLoop.scheduler()
        }),
        updateStatus: (function() {
            if (Module["setStatus"]) {
                var message = Module["statusMessage"] || "Please wait...";
                var remaining = Browser.mainLoop.remainingBlockers;
                var expected = Browser.mainLoop.expectedBlockers;
                if (remaining) {
                    if (remaining < expected) {
                        Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")")
                    } else {
                        Module["setStatus"](message)
                    }
                } else {
                    Module["setStatus"]("")
                }
            }
        }),
        runIter: (function(func) {
            if (ABORT) return;
            if (Module["preMainLoop"]) {
                var preRet = Module["preMainLoop"]();
                if (preRet === false) {
                    return
                }
            }
            try {
                func()
            } catch (e) {
                if (e instanceof ExitStatus) {
                    return
                } else {
                    if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [e, e.stack]);
                    throw e
                }
            }
            if (Module["postMainLoop"]) Module["postMainLoop"]()
        })
    },
    isFullscreen: false,
    pointerLock: false,
    moduleContextCreatedCallbacks: [],
    workers: [],
    init: (function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        if (Browser.initted) return;
        Browser.initted = true;
        try {
            new Blob;
            Browser.hasBlobConstructor = true
        } catch (e) {
            Browser.hasBlobConstructor = false;
            console.log("warning: no blob constructor, cannot create blobs with mimetypes")
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
        Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
            console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
            Module.noImageDecoding = true
        }
        var imagePlugin = {};
        imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
            return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name)
        };
        imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
            var b = null;
            if (Browser.hasBlobConstructor) {
                try {
                    b = new Blob([byteArray], {
                        type: Browser.getMimetype(name)
                    });
                    if (b.size !== byteArray.length) {
                        b = new Blob([(new Uint8Array(byteArray)).buffer], {
                            type: Browser.getMimetype(name)
                        })
                    }
                } catch (e) {
                    warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder")
                }
            }
            if (!b) {
                var bb = new Browser.BlobBuilder;
                bb.append((new Uint8Array(byteArray)).buffer);
                b = bb.getBlob()
            }
            var url = Browser.URLObject.createObjectURL(b);
            assert(typeof url == "string", "createObjectURL must return a url as a string");
            var img = new Image;
            img.onload = function img_onload() {
                assert(img.complete, "Image " + name + " could not be decoded");
                var canvas = document.createElement("canvas");
                canvas.width = img.width;
                canvas.height = img.height;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(img, 0, 0);
                Module["preloadedImages"][name] = canvas;
                Browser.URLObject.revokeObjectURL(url);
                if (onload) onload(byteArray)
            };
            img.onerror = function img_onerror(event) {
                console.log("Image " + url + " could not be decoded");
                if (onerror) onerror()
            };
            img.src = url
        };
        Module["preloadPlugins"].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
            return !Module.noAudioDecoding && name.substr(-4) in {
                ".ogg": 1,
                ".wav": 1,
                ".mp3": 1
            }
        };
        audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
            var done = false;

            function finish(audio) {
                if (done) return;
                done = true;
                Module["preloadedAudios"][name] = audio;
                if (onload) onload(byteArray)
            }

            function fail() {
                if (done) return;
                done = true;
                Module["preloadedAudios"][name] = new Audio;
                if (onerror) onerror()
            }
            if (Browser.hasBlobConstructor) {
                try {
                    var b = new Blob([byteArray], {
                        type: Browser.getMimetype(name)
                    })
                } catch (e) {
                    return fail()
                }
                var url = Browser.URLObject.createObjectURL(b);
                assert(typeof url == "string", "createObjectURL must return a url as a string");
                var audio = new Audio;
                audio.addEventListener("canplaythrough", (function() {
                    finish(audio)
                }), false);
                audio.onerror = function audio_onerror(event) {
                    if (done) return;
                    console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");

                    function encode64(data) {
                        var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                        var PAD = "=";
                        var ret = "";
                        var leftchar = 0;
                        var leftbits = 0;
                        for (var i = 0; i < data.length; i++) {
                            leftchar = leftchar << 8 | data[i];
                            leftbits += 8;
                            while (leftbits >= 6) {
                                var curr = leftchar >> leftbits - 6 & 63;
                                leftbits -= 6;
                                ret += BASE[curr]
                            }
                        }
                        if (leftbits == 2) {
                            ret += BASE[(leftchar & 3) << 4];
                            ret += PAD + PAD
                        } else if (leftbits == 4) {
                            ret += BASE[(leftchar & 15) << 2];
                            ret += PAD
                        }
                        return ret
                    }
                    audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
                    finish(audio)
                };
                audio.src = url;
                Browser.safeSetTimeout((function() {
                    finish(audio)
                }), 1e4)
            } else {
                return fail()
            }
        };
        Module["preloadPlugins"].push(audioPlugin);

        function pointerLockChange() {
            Browser.pointerLock = document["pointerLockElement"] === Module["canvas"] || document["mozPointerLockElement"] === Module["canvas"] || document["webkitPointerLockElement"] === Module["canvas"] || document["msPointerLockElement"] === Module["canvas"]
        }
        var canvas = Module["canvas"];
        if (canvas) {
            canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
            canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
            canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
            document.addEventListener("pointerlockchange", pointerLockChange, false);
            document.addEventListener("mozpointerlockchange", pointerLockChange, false);
            document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
            document.addEventListener("mspointerlockchange", pointerLockChange, false);
            if (Module["elementPointerLock"]) {
                canvas.addEventListener("click", (function(ev) {
                    if (!Browser.pointerLock && Module["canvas"].requestPointerLock) {
                        Module["canvas"].requestPointerLock();
                        ev.preventDefault()
                    }
                }), false)
            }
        }
    }),
    createContext: (function(canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
        var ctx;
        var contextHandle;
        if (useWebGL) {
            var contextAttributes = {
                antialias: false,
                alpha: false
            };
            if (webGLContextAttributes) {
                for (var attribute in webGLContextAttributes) {
                    contextAttributes[attribute] = webGLContextAttributes[attribute]
                }
            }
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
                ctx = GL.getContext(contextHandle).GLctx
            }
        } else {
            ctx = canvas.getContext("2d")
        }
        if (!ctx) return null;
        if (setInModule) {
            if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
            Module.ctx = ctx;
            if (useWebGL) GL.makeContextCurrent(contextHandle);
            Module.useWebGL = useWebGL;
            Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
                callback()
            }));
            Browser.init()
        }
        return ctx
    }),
    destroyContext: (function(canvas, useWebGL, setInModule) {}),
    fullscreenHandlersInstalled: false,
    lockPointer: undefined,
    resizeCanvas: undefined,
    requestFullscreen: (function(lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
        var canvas = Module["canvas"];

        function fullscreenChange() {
            Browser.isFullscreen = false;
            var canvasContainer = canvas.parentNode;
            if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
                canvas.exitFullscreen = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["msExitFullscreen"] || document["webkitCancelFullScreen"] || (function() {});
                canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
                if (Browser.lockPointer) canvas.requestPointerLock();
                Browser.isFullscreen = true;
                if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize()
            } else {
                canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
                canvasContainer.parentNode.removeChild(canvasContainer);
                if (Browser.resizeCanvas) Browser.setWindowedCanvasSize()
            }
            if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullscreen);
            if (Module["onFullscreen"]) Module["onFullscreen"](Browser.isFullscreen);
            Browser.updateCanvasDimensions(canvas)
        }
        if (!Browser.fullscreenHandlersInstalled) {
            Browser.fullscreenHandlersInstalled = true;
            document.addEventListener("fullscreenchange", fullscreenChange, false);
            document.addEventListener("mozfullscreenchange", fullscreenChange, false);
            document.addEventListener("webkitfullscreenchange", fullscreenChange, false);
            document.addEventListener("MSFullscreenChange", fullscreenChange, false)
        }
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        canvasContainer.requestFullscreen = canvasContainer["requestFullscreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullscreen"] ? (function() {
            canvasContainer["webkitRequestFullscreen"](Element["ALLOW_KEYBOARD_INPUT"])
        }) : null) || (canvasContainer["webkitRequestFullScreen"] ? (function() {
            canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"])
        }) : null);
        if (vrDevice) {
            canvasContainer.requestFullscreen({
                vrDisplay: vrDevice
            })
        } else {
            canvasContainer.requestFullscreen()
        }
    }),
    requestFullScreen: (function(lockPointer, resizeCanvas, vrDevice) {
        Module.printErr("Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.");
        Browser.requestFullScreen = (function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice)
        });
        return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice)
    }),
    nextRAF: 0,
    fakeRequestAnimationFrame: (function(func) {
        var now = Date.now();
        if (Browser.nextRAF === 0) {
            Browser.nextRAF = now + 1e3 / 60
        } else {
            while (now + 2 >= Browser.nextRAF) {
                Browser.nextRAF += 1e3 / 60
            }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay)
    }),
    requestAnimationFrame: function requestAnimationFrame(func) {
        if (typeof window === "undefined") {
            Browser.fakeRequestAnimationFrame(func)
        } else {
            if (!window.requestAnimationFrame) {
                window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame
            }
            window.requestAnimationFrame(func)
        }
    },
    safeCallback: (function(func) {
        return (function() {
            if (!ABORT) return func.apply(null, arguments)
        })
    }),
    allowAsyncCallbacks: true,
    queuedAsyncCallbacks: [],
    pauseAsyncCallbacks: (function() {
        Browser.allowAsyncCallbacks = false
    }),
    resumeAsyncCallbacks: (function() {
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
            var callbacks = Browser.queuedAsyncCallbacks;
            Browser.queuedAsyncCallbacks = [];
            callbacks.forEach((function(func) {
                func()
            }))
        }
    }),
    safeRequestAnimationFrame: (function(func) {
        return Browser.requestAnimationFrame((function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func()
            } else {
                Browser.queuedAsyncCallbacks.push(func)
            }
        }))
    }),
    safeSetTimeout: (function(func, timeout) {
        Module["noExitRuntime"] = true;
        return setTimeout((function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func()
            } else {
                Browser.queuedAsyncCallbacks.push(func)
            }
        }), timeout)
    }),
    safeSetInterval: (function(func, timeout) {
        Module["noExitRuntime"] = true;
        return setInterval((function() {
            if (ABORT) return;
            if (Browser.allowAsyncCallbacks) {
                func()
            }
        }), timeout)
    }),
    getMimetype: (function(name) {
        return {
            "jpg": "image/jpeg",
            "jpeg": "image/jpeg",
            "png": "image/png",
            "bmp": "image/bmp",
            "ogg": "audio/ogg",
            "wav": "audio/wav",
            "mp3": "audio/mpeg"
        }[name.substr(name.lastIndexOf(".") + 1)]
    }),
    getUserMedia: (function(func) {
        if (!window.getUserMedia) {
            window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"]
        }
        window.getUserMedia(func)
    }),
    getMovementX: (function(event) {
        return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0
    }),
    getMovementY: (function(event) {
        return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0
    }),
    getMouseWheelDelta: (function(event) {
        var delta = 0;
        switch (event.type) {
            case "DOMMouseScroll":
                delta = event.detail;
                break;
            case "mousewheel":
                delta = event.wheelDelta;
                break;
            case "wheel":
                delta = event["deltaY"];
                break;
            default:
                throw "unrecognized mouse wheel event: " + event.type
        }
        return delta
    }),
    mouseX: 0,
    mouseY: 0,
    mouseMovementX: 0,
    mouseMovementY: 0,
    touches: {},
    lastTouches: {},
    calculateMouseEvent: (function(event) {
        if (Browser.pointerLock) {
            if (event.type != "mousemove" && "mozMovementX" in event) {
                Browser.mouseMovementX = Browser.mouseMovementY = 0
            } else {
                Browser.mouseMovementX = Browser.getMovementX(event);
                Browser.mouseMovementY = Browser.getMovementY(event)
            }
            if (typeof SDL != "undefined") {
                Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
                Browser.mouseY = SDL.mouseY + Browser.mouseMovementY
            } else {
                Browser.mouseX += Browser.mouseMovementX;
                Browser.mouseY += Browser.mouseMovementY
            }
        } else {
            var rect = Module["canvas"].getBoundingClientRect();
            var cw = Module["canvas"].width;
            var ch = Module["canvas"].height;
            var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
            var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
            assert(typeof scrollX !== "undefined" && typeof scrollY !== "undefined", "Unable to retrieve scroll position, mouse positions likely broken.");
            if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
                var touch = event.touch;
                if (touch === undefined) {
                    return
                }
                var adjustedX = touch.pageX - (scrollX + rect.left);
                var adjustedY = touch.pageY - (scrollY + rect.top);
                adjustedX = adjustedX * (cw / rect.width);
                adjustedY = adjustedY * (ch / rect.height);
                var coords = {
                    x: adjustedX,
                    y: adjustedY
                };
                if (event.type === "touchstart") {
                    Browser.lastTouches[touch.identifier] = coords;
                    Browser.touches[touch.identifier] = coords
                } else if (event.type === "touchend" || event.type === "touchmove") {
                    var last = Browser.touches[touch.identifier];
                    if (!last) last = coords;
                    Browser.lastTouches[touch.identifier] = last;
                    Browser.touches[touch.identifier] = coords
                }
                return
            }
            var x = event.pageX - (scrollX + rect.left);
            var y = event.pageY - (scrollY + rect.top);
            x = x * (cw / rect.width);
            y = y * (ch / rect.height);
            Browser.mouseMovementX = x - Browser.mouseX;
            Browser.mouseMovementY = y - Browser.mouseY;
            Browser.mouseX = x;
            Browser.mouseY = y
        }
    }),
    asyncLoad: (function(url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
        Module["readAsync"](url, (function(arrayBuffer) {
            assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
            onload(new Uint8Array(arrayBuffer));
            if (dep) removeRunDependency(dep)
        }), (function(event) {
            if (onerror) {
                onerror()
            } else {
                throw 'Loading data file "' + url + '" failed.'
            }
        }));
        if (dep) addRunDependency(dep)
    }),
    resizeListeners: [],
    updateResizeListeners: (function() {
        var canvas = Module["canvas"];
        Browser.resizeListeners.forEach((function(listener) {
            listener(canvas.width, canvas.height)
        }))
    }),
    setCanvasSize: (function(width, height, noUpdates) {
        var canvas = Module["canvas"];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners()
    }),
    windowedWidth: 0,
    windowedHeight: 0,
    setFullscreenCanvasSize: (function() {
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[SDL.screen >> 2];
            flags = flags | 8388608;
            HEAP32[SDL.screen >> 2] = flags
        }
        Browser.updateResizeListeners()
    }),
    setWindowedCanvasSize: (function() {
        if (typeof SDL != "undefined") {
            var flags = HEAPU32[SDL.screen >> 2];
            flags = flags & ~8388608;
            HEAP32[SDL.screen >> 2] = flags
        }
        Browser.updateResizeListeners()
    }),
    updateCanvasDimensions: (function(canvas, wNative, hNative) {
        if (wNative && hNative) {
            canvas.widthNative = wNative;
            canvas.heightNative = hNative
        } else {
            wNative = canvas.widthNative;
            hNative = canvas.heightNative
        }
        var w = wNative;
        var h = hNative;
        if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
            if (w / h < Module["forcedAspectRatio"]) {
                w = Math.round(h * Module["forcedAspectRatio"])
            } else {
                h = Math.round(w / Module["forcedAspectRatio"])
            }
        }
        if ((document["fullscreenElement"] || document["mozFullScreenElement"] || document["msFullscreenElement"] || document["webkitFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
            var factor = Math.min(screen.width / w, screen.height / h);
            w = Math.round(w * factor);
            h = Math.round(h * factor)
        }
        if (Browser.resizeCanvas) {
            if (canvas.width != w) canvas.width = w;
            if (canvas.height != h) canvas.height = h;
            if (typeof canvas.style != "undefined") {
                canvas.style.removeProperty("width");
                canvas.style.removeProperty("height")
            }
        } else {
            if (canvas.width != wNative) canvas.width = wNative;
            if (canvas.height != hNative) canvas.height = hNative;
            if (typeof canvas.style != "undefined") {
                if (w != wNative || h != hNative) {
                    canvas.style.setProperty("width", w + "px", "important");
                    canvas.style.setProperty("height", h + "px", "important")
                } else {
                    canvas.style.removeProperty("width");
                    canvas.style.removeProperty("height")
                }
            }
        }
    }),
    wgetRequests: {},
    nextWgetRequestHandle: 0,
    getNextWgetRequestHandle: (function() {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle
    })
};

function __ZSt18uncaught_exceptionv() {
    return !!__ZSt18uncaught_exceptionv.uncaught_exception
}

function ___assert_fail(condition, filename, line, func) {
    abort("Assertion failed: " + Pointer_stringify(condition) + ", at: " + [filename ? Pointer_stringify(filename) : "unknown filename", line, func ? Pointer_stringify(func) : "unknown function"])
}

function ___cxa_allocate_exception(size) {
    return _malloc(size)
}
var EXCEPTIONS = {
    last: 0,
    caught: [],
    infos: {},
    deAdjust: (function(adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
            var info = EXCEPTIONS.infos[ptr];
            if (info.adjusted === adjusted) {
                return ptr
            }
        }
        return adjusted
    }),
    addRef: (function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++
    }),
    decRef: (function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0 && !info.rethrown) {
            if (info.destructor) {
                Module["dynCall_vi"](info.destructor, ptr)
            }
            delete EXCEPTIONS.infos[ptr];
            ___cxa_free_exception(ptr)
        }
    }),
    clearRef: (function(ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0
    })
};

function ___cxa_throw(ptr, type, destructor) {
    EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
    };
    EXCEPTIONS.last = ptr;
    if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1
    } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++
    }
    throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch."
}

function ___lock() {}
var ERRNO_CODES = {
    EPERM: 1,
    ENOENT: 2,
    ESRCH: 3,
    EINTR: 4,
    EIO: 5,
    ENXIO: 6,
    E2BIG: 7,
    ENOEXEC: 8,
    EBADF: 9,
    ECHILD: 10,
    EAGAIN: 11,
    EWOULDBLOCK: 11,
    ENOMEM: 12,
    EACCES: 13,
    EFAULT: 14,
    ENOTBLK: 15,
    EBUSY: 16,
    EEXIST: 17,
    EXDEV: 18,
    ENODEV: 19,
    ENOTDIR: 20,
    EISDIR: 21,
    EINVAL: 22,
    ENFILE: 23,
    EMFILE: 24,
    ENOTTY: 25,
    ETXTBSY: 26,
    EFBIG: 27,
    ENOSPC: 28,
    ESPIPE: 29,
    EROFS: 30,
    EMLINK: 31,
    EPIPE: 32,
    EDOM: 33,
    ERANGE: 34,
    ENOMSG: 42,
    EIDRM: 43,
    ECHRNG: 44,
    EL2NSYNC: 45,
    EL3HLT: 46,
    EL3RST: 47,
    ELNRNG: 48,
    EUNATCH: 49,
    ENOCSI: 50,
    EL2HLT: 51,
    EDEADLK: 35,
    ENOLCK: 37,
    EBADE: 52,
    EBADR: 53,
    EXFULL: 54,
    ENOANO: 55,
    EBADRQC: 56,
    EBADSLT: 57,
    EDEADLOCK: 35,
    EBFONT: 59,
    ENOSTR: 60,
    ENODATA: 61,
    ETIME: 62,
    ENOSR: 63,
    ENONET: 64,
    ENOPKG: 65,
    EREMOTE: 66,
    ENOLINK: 67,
    EADV: 68,
    ESRMNT: 69,
    ECOMM: 70,
    EPROTO: 71,
    EMULTIHOP: 72,
    EDOTDOT: 73,
    EBADMSG: 74,
    ENOTUNIQ: 76,
    EBADFD: 77,
    EREMCHG: 78,
    ELIBACC: 79,
    ELIBBAD: 80,
    ELIBSCN: 81,
    ELIBMAX: 82,
    ELIBEXEC: 83,
    ENOSYS: 38,
    ENOTEMPTY: 39,
    ENAMETOOLONG: 36,
    ELOOP: 40,
    EOPNOTSUPP: 95,
    EPFNOSUPPORT: 96,
    ECONNRESET: 104,
    ENOBUFS: 105,
    EAFNOSUPPORT: 97,
    EPROTOTYPE: 91,
    ENOTSOCK: 88,
    ENOPROTOOPT: 92,
    ESHUTDOWN: 108,
    ECONNREFUSED: 111,
    EADDRINUSE: 98,
    ECONNABORTED: 103,
    ENETUNREACH: 101,
    ENETDOWN: 100,
    ETIMEDOUT: 110,
    EHOSTDOWN: 112,
    EHOSTUNREACH: 113,
    EINPROGRESS: 115,
    EALREADY: 114,
    EDESTADDRREQ: 89,
    EMSGSIZE: 90,
    EPROTONOSUPPORT: 93,
    ESOCKTNOSUPPORT: 94,
    EADDRNOTAVAIL: 99,
    ENETRESET: 102,
    EISCONN: 106,
    ENOTCONN: 107,
    ETOOMANYREFS: 109,
    EUSERS: 87,
    EDQUOT: 122,
    ESTALE: 116,
    ENOTSUP: 95,
    ENOMEDIUM: 123,
    EILSEQ: 84,
    EOVERFLOW: 75,
    ECANCELED: 125,
    ENOTRECOVERABLE: 131,
    EOWNERDEAD: 130,
    ESTRPIPE: 86
};

function ___setErrNo(value) {
    if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
    else Module.printErr("failed to set errno from JS");
    return value
}

function ___map_file(pathname, size) {
    ___setErrNo(ERRNO_CODES.EPERM);
    return -1
}
var ERRNO_MESSAGES = {
    0: "Success",
    1: "Not super-user",
    2: "No such file or directory",
    3: "No such process",
    4: "Interrupted system call",
    5: "I/O error",
    6: "No such device or address",
    7: "Arg list too long",
    8: "Exec format error",
    9: "Bad file number",
    10: "No children",
    11: "No more processes",
    12: "Not enough core",
    13: "Permission denied",
    14: "Bad address",
    15: "Block device required",
    16: "Mount device busy",
    17: "File exists",
    18: "Cross-device link",
    19: "No such device",
    20: "Not a directory",
    21: "Is a directory",
    22: "Invalid argument",
    23: "Too many open files in system",
    24: "Too many open files",
    25: "Not a typewriter",
    26: "Text file busy",
    27: "File too large",
    28: "No space left on device",
    29: "Illegal seek",
    30: "Read only file system",
    31: "Too many links",
    32: "Broken pipe",
    33: "Math arg out of domain of func",
    34: "Math result not representable",
    35: "File locking deadlock error",
    36: "File or path name too long",
    37: "No record locks available",
    38: "Function not implemented",
    39: "Directory not empty",
    40: "Too many symbolic links",
    42: "No message of desired type",
    43: "Identifier removed",
    44: "Channel number out of range",
    45: "Level 2 not synchronized",
    46: "Level 3 halted",
    47: "Level 3 reset",
    48: "Link number out of range",
    49: "Protocol driver not attached",
    50: "No CSI structure available",
    51: "Level 2 halted",
    52: "Invalid exchange",
    53: "Invalid request descriptor",
    54: "Exchange full",
    55: "No anode",
    56: "Invalid request code",
    57: "Invalid slot",
    59: "Bad font file fmt",
    60: "Device not a stream",
    61: "No data (for no delay io)",
    62: "Timer expired",
    63: "Out of streams resources",
    64: "Machine is not on the network",
    65: "Package not installed",
    66: "The object is remote",
    67: "The link has been severed",
    68: "Advertise error",
    69: "Srmount error",
    70: "Communication error on send",
    71: "Protocol error",
    72: "Multihop attempted",
    73: "Cross mount point (not really error)",
    74: "Trying to read unreadable message",
    75: "Value too large for defined data type",
    76: "Given log. name not unique",
    77: "f.d. invalid for this operation",
    78: "Remote address changed",
    79: "Can   access a needed shared lib",
    80: "Accessing a corrupted shared lib",
    81: ".lib section in a.out corrupted",
    82: "Attempting to link in too many libs",
    83: "Attempting to exec a shared library",
    84: "Illegal byte sequence",
    86: "Streams pipe error",
    87: "Too many users",
    88: "Socket operation on non-socket",
    89: "Destination address required",
    90: "Message too long",
    91: "Protocol wrong type for socket",
    92: "Protocol not available",
    93: "Unknown protocol",
    94: "Socket type not supported",
    95: "Not supported",
    96: "Protocol family not supported",
    97: "Address family not supported by protocol family",
    98: "Address already in use",
    99: "Address not available",
    100: "Network interface is not configured",
    101: "Network is unreachable",
    102: "Connection reset by network",
    103: "Connection aborted",
    104: "Connection reset by peer",
    105: "No buffer space available",
    106: "Socket is already connected",
    107: "Socket is not connected",
    108: "Can't send after socket shutdown",
    109: "Too many references",
    110: "Connection timed out",
    111: "Connection refused",
    112: "Host is down",
    113: "Host is unreachable",
    114: "Socket already connected",
    115: "Connection already in progress",
    116: "Stale file handle",
    122: "Quota exceeded",
    123: "No medium (in tape drive)",
    125: "Operation canceled",
    130: "Previous owner died",
    131: "State not recoverable"
};
var PATH = {
    splitPath: (function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1)
    }),
    normalizeArray: (function(parts, allowAboveRoot) {
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
            var last = parts[i];
            if (last === ".") {
                parts.splice(i, 1)
            } else if (last === "..") {
                parts.splice(i, 1);
                up++
            } else if (up) {
                parts.splice(i, 1);
                up--
            }
        }
        if (allowAboveRoot) {
            for (; up; up--) {
                parts.unshift("..")
            }
        }
        return parts
    }),
    normalize: (function(path) {
        var isAbsolute = path.charAt(0) === "/",
            trailingSlash = path.substr(-1) === "/";
        path = PATH.normalizeArray(path.split("/").filter((function(p) {
            return !!p
        })), !isAbsolute).join("/");
        if (!path && !isAbsolute) {
            path = "."
        }
        if (path && trailingSlash) {
            path += "/"
        }
        return (isAbsolute ? "/" : "") + path
    }),
    dirname: (function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
            return "."
        }
        if (dir) {
            dir = dir.substr(0, dir.length - 1)
        }
        return root + dir
    }),
    basename: (function(path) {
        if (path === "/") return "/";
        var lastSlash = path.lastIndexOf("/");
        if (lastSlash === -1) return path;
        return path.substr(lastSlash + 1)
    }),
    extname: (function(path) {
        return PATH.splitPath(path)[3]
    }),
    join: (function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join("/"))
    }),
    join2: (function(l, r) {
        return PATH.normalize(l + "/" + r)
    }),
    resolve: (function() {
        var resolvedPath = "",
            resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
            var path = i >= 0 ? arguments[i] : FS.cwd();
            if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings")
            } else if (!path) {
                return ""
            }
            resolvedPath = path + "/" + resolvedPath;
            resolvedAbsolute = path.charAt(0) === "/"
        }
        resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
            return !!p
        })), !resolvedAbsolute).join("/");
        return (resolvedAbsolute ? "/" : "") + resolvedPath || "."
    }),
    relative: (function(from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);

        function trim(arr) {
            var start = 0;
            for (; start < arr.length; start++) {
                if (arr[start] !== "") break
            }
            var end = arr.length - 1;
            for (; end >= 0; end--) {
                if (arr[end] !== "") break
            }
            if (start > end) return [];
            return arr.slice(start, end - start + 1)
        }
        var fromParts = trim(from.split("/"));
        var toParts = trim(to.split("/"));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
            if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break
            }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
            outputParts.push("..")
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join("/")
    })
};
var TTY = {
    ttys: [],
    init: (function() {}),
    shutdown: (function() {}),
    register: (function(dev, ops) {
        TTY.ttys[dev] = {
            input: [],
            output: [],
            ops: ops
        };
        FS.registerDevice(dev, TTY.stream_ops)
    }),
    stream_ops: {
        open: (function(stream) {
            var tty = TTY.ttys[stream.node.rdev];
            if (!tty) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            stream.tty = tty;
            stream.seekable = false
        }),
        close: (function(stream) {
            stream.tty.ops.flush(stream.tty)
        }),
        flush: (function(stream) {
            stream.tty.ops.flush(stream.tty)
        }),
        read: (function(stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.get_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
            }
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
                var result;
                try {
                    result = stream.tty.ops.get_char(stream.tty)
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
                if (result === undefined && bytesRead === 0) {
                    throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                }
                if (result === null || result === undefined) break;
                bytesRead++;
                buffer[offset + i] = result
            }
            if (bytesRead) {
                stream.node.timestamp = Date.now()
            }
            return bytesRead
        }),
        write: (function(stream, buffer, offset, length, pos) {
            if (!stream.tty || !stream.tty.ops.put_char) {
                throw new FS.ErrnoError(ERRNO_CODES.ENXIO)
            }
            for (var i = 0; i < length; i++) {
                try {
                    stream.tty.ops.put_char(stream.tty, buffer[offset + i])
                } catch (e) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
            }
            if (length) {
                stream.node.timestamp = Date.now()
            }
            return i
        })
    },
    default_tty_ops: {
        get_char: (function(tty) {
            if (!tty.input.length) {
                var result = null;
                if (ENVIRONMENT_IS_NODE) {
                    var BUFSIZE = 256;
                    var buf = new Buffer(BUFSIZE);
                    var bytesRead = 0;
                    var isPosixPlatform = process.platform != "win32";
                    var fd = process.stdin.fd;
                    if (isPosixPlatform) {
                        var usingDevice = false;
                        try {
                            fd = fs.openSync("/dev/stdin", "r");
                            usingDevice = true
                        } catch (e) {}
                    }
                    try {
                        bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null)
                    } catch (e) {
                        if (e.toString().indexOf("EOF") != -1) bytesRead = 0;
                        else throw e
                    }
                    if (usingDevice) {
                        fs.closeSync(fd)
                    }
                    if (bytesRead > 0) {
                        result = buf.slice(0, bytesRead).toString("utf-8")
                    } else {
                        result = null
                    }
                } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                    result = window.prompt("Input: ");
                    if (result !== null) {
                        result += "\n"
                    }
                } else if (typeof readline == "function") {
                    result = readline();
                    if (result !== null) {
                        result += "\n"
                    }
                }
                if (!result) {
                    return null
                }
                tty.input = intArrayFromString(result, true)
            }
            return tty.input.shift()
        }),
        put_char: (function(tty, val) {
            if (val === null || val === 10) {
                Module["print"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            } else {
                if (val != 0) tty.output.push(val)
            }
        }),
        flush: (function(tty) {
            if (tty.output && tty.output.length > 0) {
                Module["print"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            }
        })
    },
    default_tty1_ops: {
        put_char: (function(tty, val) {
            if (val === null || val === 10) {
                Module["printErr"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            } else {
                if (val != 0) tty.output.push(val)
            }
        }),
        flush: (function(tty) {
            if (tty.output && tty.output.length > 0) {
                Module["printErr"](UTF8ArrayToString(tty.output, 0));
                tty.output = []
            }
        })
    }
};
var MEMFS = {
    ops_table: null,
    mount: (function(mount) {
        return MEMFS.createNode(null, "/", 16384 | 511, 0)
    }),
    createNode: (function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (!MEMFS.ops_table) {
            MEMFS.ops_table = {
                dir: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        lookup: MEMFS.node_ops.lookup,
                        mknod: MEMFS.node_ops.mknod,
                        rename: MEMFS.node_ops.rename,
                        unlink: MEMFS.node_ops.unlink,
                        rmdir: MEMFS.node_ops.rmdir,
                        readdir: MEMFS.node_ops.readdir,
                        symlink: MEMFS.node_ops.symlink
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek
                    }
                },
                file: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: {
                        llseek: MEMFS.stream_ops.llseek,
                        read: MEMFS.stream_ops.read,
                        write: MEMFS.stream_ops.write,
                        allocate: MEMFS.stream_ops.allocate,
                        mmap: MEMFS.stream_ops.mmap,
                        msync: MEMFS.stream_ops.msync
                    }
                },
                link: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr,
                        readlink: MEMFS.node_ops.readlink
                    },
                    stream: {}
                },
                chrdev: {
                    node: {
                        getattr: MEMFS.node_ops.getattr,
                        setattr: MEMFS.node_ops.setattr
                    },
                    stream: FS.chrdev_stream_ops
                }
            }
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
            node.node_ops = MEMFS.ops_table.dir.node;
            node.stream_ops = MEMFS.ops_table.dir.stream;
            node.contents = {}
        } else if (FS.isFile(node.mode)) {
            node.node_ops = MEMFS.ops_table.file.node;
            node.stream_ops = MEMFS.ops_table.file.stream;
            node.usedBytes = 0;
            node.contents = null
        } else if (FS.isLink(node.mode)) {
            node.node_ops = MEMFS.ops_table.link.node;
            node.stream_ops = MEMFS.ops_table.link.stream
        } else if (FS.isChrdev(node.mode)) {
            node.node_ops = MEMFS.ops_table.chrdev.node;
            node.stream_ops = MEMFS.ops_table.chrdev.stream
        }
        node.timestamp = Date.now();
        if (parent) {
            parent.contents[name] = node
        }
        return node
    }),
    getFileDataAsRegularArray: (function(node) {
        if (node.contents && node.contents.subarray) {
            var arr = [];
            for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
            return arr
        }
        return node.contents
    }),
    getFileDataAsTypedArray: (function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
        return new Uint8Array(node.contents)
    }),
    expandFileStorage: (function(node, newCapacity) {
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
            node.contents = MEMFS.getFileDataAsRegularArray(node);
            node.usedBytes = node.contents.length
        }
        if (!node.contents || node.contents.subarray) {
            var prevCapacity = node.contents ? node.contents.length : 0;
            if (prevCapacity >= newCapacity) return;
            var CAPACITY_DOUBLING_MAX = 1024 * 1024;
            newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
            if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
            var oldContents = node.contents;
            node.contents = new Uint8Array(newCapacity);
            if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
            return
        }
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0)
    }),
    resizeFileStorage: (function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
            node.contents = null;
            node.usedBytes = 0;
            return
        }
        if (!node.contents || node.contents.subarray) {
            var oldContents = node.contents;
            node.contents = new Uint8Array(new ArrayBuffer(newSize));
            if (oldContents) {
                node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)))
            }
            node.usedBytes = newSize;
            return
        }
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else
            while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize
    }),
    node_ops: {
        getattr: (function(node) {
            var attr = {};
            attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
            attr.ino = node.id;
            attr.mode = node.mode;
            attr.nlink = 1;
            attr.uid = 0;
            attr.gid = 0;
            attr.rdev = node.rdev;
            if (FS.isDir(node.mode)) {
                attr.size = 4096
            } else if (FS.isFile(node.mode)) {
                attr.size = node.usedBytes
            } else if (FS.isLink(node.mode)) {
                attr.size = node.link.length
            } else {
                attr.size = 0
            }
            attr.atime = new Date(node.timestamp);
            attr.mtime = new Date(node.timestamp);
            attr.ctime = new Date(node.timestamp);
            attr.blksize = 4096;
            attr.blocks = Math.ceil(attr.size / attr.blksize);
            return attr
        }),
        setattr: (function(node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp
            }
            if (attr.size !== undefined) {
                MEMFS.resizeFileStorage(node, attr.size)
            }
        }),
        lookup: (function(parent, name) {
            throw FS.genericErrors[ERRNO_CODES.ENOENT]
        }),
        mknod: (function(parent, name, mode, dev) {
            return MEMFS.createNode(parent, name, mode, dev)
        }),
        rename: (function(old_node, new_dir, new_name) {
            if (FS.isDir(old_node.mode)) {
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name)
                } catch (e) {}
                if (new_node) {
                    for (var i in new_node.contents) {
                        throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
                    }
                }
            }
            delete old_node.parent.contents[old_node.name];
            old_node.name = new_name;
            new_dir.contents[new_name] = old_node;
            old_node.parent = new_dir
        }),
        unlink: (function(parent, name) {
            delete parent.contents[name]
        }),
        rmdir: (function(parent, name) {
            var node = FS.lookupNode(parent, name);
            for (var i in node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
            }
            delete parent.contents[name]
        }),
        readdir: (function(node) {
            var entries = [".", ".."];
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue
                }
                entries.push(key)
            }
            return entries
        }),
        symlink: (function(parent, newname, oldpath) {
            var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
            node.link = oldpath;
            return node
        }),
        readlink: (function(node) {
            if (!FS.isLink(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return node.link
        })
    },
    stream_ops: {
        read: (function(stream, buffer, offset, length, position) {
            var contents = stream.node.contents;
            if (position >= stream.node.usedBytes) return 0;
            var size = Math.min(stream.node.usedBytes - position, length);
            assert(size >= 0);
            if (size > 8 && contents.subarray) {
                buffer.set(contents.subarray(position, position + size), offset)
            } else {
                for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i]
            }
            return size
        }),
        write: (function(stream, buffer, offset, length, position, canOwn) {
            if (!length) return 0;
            var node = stream.node;
            node.timestamp = Date.now();
            if (buffer.subarray && (!node.contents || node.contents.subarray)) {
                if (canOwn) {
                    assert(position === 0, "canOwn must imply no weird position inside the file");
                    node.contents = buffer.subarray(offset, offset + length);
                    node.usedBytes = length;
                    return length
                } else if (node.usedBytes === 0 && position === 0) {
                    node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
                    node.usedBytes = length;
                    return length
                } else if (position + length <= node.usedBytes) {
                    node.contents.set(buffer.subarray(offset, offset + length), position);
                    return length
                }
            }
            MEMFS.expandFileStorage(node, position + length);
            if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position);
            else {
                for (var i = 0; i < length; i++) {
                    node.contents[position + i] = buffer[offset + i]
                }
            }
            node.usedBytes = Math.max(node.usedBytes, position + length);
            return length
        }),
        llseek: (function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.usedBytes
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return position
        }),
        allocate: (function(stream, offset, length) {
            MEMFS.expandFileStorage(stream.node, offset + length);
            stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length)
        }),
        mmap: (function(stream, buffer, offset, length, position, prot, flags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            var ptr;
            var allocated;
            var contents = stream.node.contents;
            if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
                allocated = false;
                ptr = contents.byteOffset
            } else {
                if (position > 0 || position + length < stream.node.usedBytes) {
                    if (contents.subarray) {
                        contents = contents.subarray(position, position + length)
                    } else {
                        contents = Array.prototype.slice.call(contents, position, position + length)
                    }
                }
                allocated = true;
                ptr = _malloc(length);
                if (!ptr) {
                    throw new FS.ErrnoError(ERRNO_CODES.ENOMEM)
                }
                buffer.set(contents, ptr)
            }
            return {
                ptr: ptr,
                allocated: allocated
            }
        }),
        msync: (function(stream, buffer, offset, length, mmapFlags) {
            if (!FS.isFile(stream.node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
            }
            if (mmapFlags & 2) {
                return 0
            }
            var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
            return 0
        })
    }
};
var IDBFS = {
    dbs: {},
    indexedDB: (function() {
        if (typeof indexedDB !== "undefined") return indexedDB;
        var ret = null;
        if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, "IDBFS used, but indexedDB not supported");
        return ret
    }),
    DB_VERSION: 21,
    DB_STORE_NAME: "FILE_DATA",
    mount: (function(mount) {
        return MEMFS.mount.apply(null, arguments)
    }),
    syncfs: (function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, (function(err, local) {
            if (err) return callback(err);
            IDBFS.getRemoteSet(mount, (function(err, remote) {
                if (err) return callback(err);
                var src = populate ? remote : local;
                var dst = populate ? local : remote;
                IDBFS.reconcile(src, dst, callback)
            }))
        }))
    }),
    getDB: (function(name, callback) {
        var db = IDBFS.dbs[name];
        if (db) {
            return callback(null, db)
        }
        var req;
        try {
            req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION)
        } catch (e) {
            return callback(e)
        }
        if (!req) {
            return callback("Unable to connect to IndexedDB")
        }
        req.onupgradeneeded = (function(e) {
            var db = e.target.result;
            var transaction = e.target.transaction;
            var fileStore;
            if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
                fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME)
            } else {
                fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME)
            }
            if (!fileStore.indexNames.contains("timestamp")) {
                fileStore.createIndex("timestamp", "timestamp", {
                    unique: false
                })
            }
        });
        req.onsuccess = (function() {
            db = req.result;
            IDBFS.dbs[name] = db;
            callback(null, db)
        });
        req.onerror = (function(e) {
            callback(this.error);
            e.preventDefault()
        })
    }),
    getLocalSet: (function(mount, callback) {
        var entries = {};

        function isRealDir(p) {
            return p !== "." && p !== ".."
        }

        function toAbsolute(root) {
            return (function(p) {
                return PATH.join2(root, p)
            })
        }
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
        while (check.length) {
            var path = check.pop();
            var stat;
            try {
                stat = FS.stat(path)
            } catch (e) {
                return callback(e)
            }
            if (FS.isDir(stat.mode)) {
                check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)))
            }
            entries[path] = {
                timestamp: stat.mtime
            }
        }
        return callback(null, {
            type: "local",
            entries: entries
        })
    }),
    getRemoteSet: (function(mount, callback) {
        var entries = {};
        IDBFS.getDB(mount.mountpoint, (function(err, db) {
            if (err) return callback(err);
            try {
                var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readonly");
                transaction.onerror = (function(e) {
                    callback(this.error);
                    e.preventDefault()
                });
                var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                var index = store.index("timestamp");
                index.openKeyCursor().onsuccess = (function(event) {
                    var cursor = event.target.result;
                    if (!cursor) {
                        return callback(null, {
                            type: "remote",
                            db: db,
                            entries: entries
                        })
                    }
                    entries[cursor.primaryKey] = {
                        timestamp: cursor.key
                    };
                    cursor.continue()
                })
            } catch (e) {
                return callback(e)
            }
        }))
    }),
    loadLocalEntry: (function(path, callback) {
        var stat, node;
        try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path)
        } catch (e) {
            return callback(e)
        }
        if (FS.isDir(stat.mode)) {
            return callback(null, {
                timestamp: stat.mtime,
                mode: stat.mode
            })
        } else if (FS.isFile(stat.mode)) {
            node.contents = MEMFS.getFileDataAsTypedArray(node);
            return callback(null, {
                timestamp: stat.mtime,
                mode: stat.mode,
                contents: node.contents
            })
        } else {
            return callback(new Error("node type not supported"))
        }
    }),
    storeLocalEntry: (function(path, entry, callback) {
        try {
            if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode)
            } else if (FS.isFile(entry.mode)) {
                FS.writeFile(path, entry.contents, {
                    canOwn: true
                })
            } else {
                return callback(new Error("node type not supported"))
            }
            FS.chmod(path, entry.mode);
            FS.utime(path, entry.timestamp, entry.timestamp)
        } catch (e) {
            return callback(e)
        }
        callback(null)
    }),
    removeLocalEntry: (function(path, callback) {
        try {
            var lookup = FS.lookupPath(path);
            var stat = FS.stat(path);
            if (FS.isDir(stat.mode)) {
                FS.rmdir(path)
            } else if (FS.isFile(stat.mode)) {
                FS.unlink(path)
            }
        } catch (e) {
            return callback(e)
        }
        callback(null)
    }),
    loadRemoteEntry: (function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = (function(event) {
            callback(null, event.target.result)
        });
        req.onerror = (function(e) {
            callback(this.error);
            e.preventDefault()
        })
    }),
    storeRemoteEntry: (function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = (function() {
            callback(null)
        });
        req.onerror = (function(e) {
            callback(this.error);
            e.preventDefault()
        })
    }),
    removeRemoteEntry: (function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = (function() {
            callback(null)
        });
        req.onerror = (function(e) {
            callback(this.error);
            e.preventDefault()
        })
    }),
    reconcile: (function(src, dst, callback) {
        var total = 0;
        var create = [];
        Object.keys(src.entries).forEach((function(key) {
            var e = src.entries[key];
            var e2 = dst.entries[key];
            if (!e2 || e.timestamp > e2.timestamp) {
                create.push(key);
                total++
            }
        }));
        var remove = [];
        Object.keys(dst.entries).forEach((function(key) {
            var e = dst.entries[key];
            var e2 = src.entries[key];
            if (!e2) {
                remove.push(key);
                total++
            }
        }));
        if (!total) {
            return callback(null)
        }
        var completed = 0;
        var db = src.type === "remote" ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], "readwrite");
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return callback(err)
                }
                return
            }
            if (++completed >= total) {
                return callback(null)
            }
        }
        transaction.onerror = (function(e) {
            done(this.error);
            e.preventDefault()
        });
        create.sort().forEach((function(path) {
            if (dst.type === "local") {
                IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
                    if (err) return done(err);
                    IDBFS.storeLocalEntry(path, entry, done)
                }))
            } else {
                IDBFS.loadLocalEntry(path, (function(err, entry) {
                    if (err) return done(err);
                    IDBFS.storeRemoteEntry(store, path, entry, done)
                }))
            }
        }));
        remove.sort().reverse().forEach((function(path) {
            if (dst.type === "local") {
                IDBFS.removeLocalEntry(path, done)
            } else {
                IDBFS.removeRemoteEntry(store, path, done)
            }
        }))
    })
};
var NODEFS = {
    isWindows: false,
    staticInit: (function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        if (flags["fs"]) {
            flags = flags["fs"]
        }
        NODEFS.flagsForNodeMap = {
            "1024": flags["O_APPEND"],
            "64": flags["O_CREAT"],
            "128": flags["O_EXCL"],
            "0": flags["O_RDONLY"],
            "2": flags["O_RDWR"],
            "4096": flags["O_SYNC"],
            "512": flags["O_TRUNC"],
            "1": flags["O_WRONLY"]
        }
    }),
    bufferFrom: (function(arrayBuffer) {
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer)
    }),
    mount: (function(mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0)
    }),
    createNode: (function(parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node
    }),
    getMode: (function(path) {
        var stat;
        try {
            stat = fs.lstatSync(path);
            if (NODEFS.isWindows) {
                stat.mode = stat.mode | (stat.mode & 292) >> 2
            }
        } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code])
        }
        return stat.mode
    }),
    realPath: (function(node) {
        var parts = [];
        while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts)
    }),
    flagsForNode: (function(flags) {
        flags &= ~2097152;
        flags &= ~2048;
        flags &= ~32768;
        flags &= ~524288;
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
            if (flags & k) {
                newFlags |= NODEFS.flagsForNodeMap[k];
                flags ^= k
            }
        }
        if (!flags) {
            return newFlags
        } else {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
    }),
    node_ops: {
        getattr: (function(node) {
            var path = NODEFS.realPath(node);
            var stat;
            try {
                stat = fs.lstatSync(path)
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
            if (NODEFS.isWindows && !stat.blksize) {
                stat.blksize = 4096
            }
            if (NODEFS.isWindows && !stat.blocks) {
                stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0
            }
            return {
                dev: stat.dev,
                ino: stat.ino,
                mode: stat.mode,
                nlink: stat.nlink,
                uid: stat.uid,
                gid: stat.gid,
                rdev: stat.rdev,
                size: stat.size,
                atime: stat.atime,
                mtime: stat.mtime,
                ctime: stat.ctime,
                blksize: stat.blksize,
                blocks: stat.blocks
            }
        }),
        setattr: (function(node, attr) {
            var path = NODEFS.realPath(node);
            try {
                if (attr.mode !== undefined) {
                    fs.chmodSync(path, attr.mode);
                    node.mode = attr.mode
                }
                if (attr.timestamp !== undefined) {
                    var date = new Date(attr.timestamp);
                    fs.utimesSync(path, date, date)
                }
                if (attr.size !== undefined) {
                    fs.truncateSync(path, attr.size)
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        lookup: (function(parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            var mode = NODEFS.getMode(path);
            return NODEFS.createNode(parent, name, mode)
        }),
        mknod: (function(parent, name, mode, dev) {
            var node = NODEFS.createNode(parent, name, mode, dev);
            var path = NODEFS.realPath(node);
            try {
                if (FS.isDir(node.mode)) {
                    fs.mkdirSync(path, node.mode)
                } else {
                    fs.writeFileSync(path, "", {
                        mode: node.mode
                    })
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
            return node
        }),
        rename: (function(oldNode, newDir, newName) {
            var oldPath = NODEFS.realPath(oldNode);
            var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
            try {
                fs.renameSync(oldPath, newPath)
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        unlink: (function(parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.unlinkSync(path)
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        rmdir: (function(parent, name) {
            var path = PATH.join2(NODEFS.realPath(parent), name);
            try {
                fs.rmdirSync(path)
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        readdir: (function(node) {
            var path = NODEFS.realPath(node);
            try {
                return fs.readdirSync(path)
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        symlink: (function(parent, newName, oldPath) {
            var newPath = PATH.join2(NODEFS.realPath(parent), newName);
            try {
                fs.symlinkSync(oldPath, newPath)
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        readlink: (function(node) {
            var path = NODEFS.realPath(node);
            try {
                path = fs.readlinkSync(path);
                path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
                return path
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        })
    },
    stream_ops: {
        open: (function(stream) {
            var path = NODEFS.realPath(stream.node);
            try {
                if (FS.isFile(stream.node.mode)) {
                    stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags))
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        close: (function(stream) {
            try {
                if (FS.isFile(stream.node.mode) && stream.nfd) {
                    fs.closeSync(stream.nfd)
                }
            } catch (e) {
                if (!e.code) throw e;
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        read: (function(stream, buffer, offset, length, position) {
            if (length === 0) return 0;
            try {
                return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position)
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        write: (function(stream, buffer, offset, length, position) {
            try {
                return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position)
            } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code])
            }
        }),
        llseek: (function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    try {
                        var stat = fs.fstatSync(stream.nfd);
                        position += stat.size
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES[e.code])
                    }
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return position
        })
    }
};
var WORKERFS = {
    DIR_MODE: 16895,
    FILE_MODE: 33279,
    reader: null,
    mount: (function(mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync;
        var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
        var createdParents = {};

        function ensureParent(path) {
            var parts = path.split("/");
            var parent = root;
            for (var i = 0; i < parts.length - 1; i++) {
                var curr = parts.slice(0, i + 1).join("/");
                if (!createdParents[curr]) {
                    createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0)
                }
                parent = createdParents[curr]
            }
            return parent
        }

        function base(path) {
            var parts = path.split("/");
            return parts[parts.length - 1]
        }
        Array.prototype.forEach.call(mount.opts["files"] || [], (function(file) {
            WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate)
        }));
        (mount.opts["blobs"] || []).forEach((function(obj) {
            WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"])
        }));
        (mount.opts["packages"] || []).forEach((function(pack) {
            pack["metadata"].files.forEach((function(file) {
                var name = file.filename.substr(1);
                WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end))
            }))
        }));
        return root
    }),
    createNode: (function(parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
            node.size = contents.size;
            node.contents = contents
        } else {
            node.size = 4096;
            node.contents = {}
        }
        if (parent) {
            parent.contents[name] = node
        }
        return node
    }),
    node_ops: {
        getattr: (function(node) {
            return {
                dev: 1,
                ino: undefined,
                mode: node.mode,
                nlink: 1,
                uid: 0,
                gid: 0,
                rdev: undefined,
                size: node.size,
                atime: new Date(node.timestamp),
                mtime: new Date(node.timestamp),
                ctime: new Date(node.timestamp),
                blksize: 4096,
                blocks: Math.ceil(node.size / 4096)
            }
        }),
        setattr: (function(node, attr) {
            if (attr.mode !== undefined) {
                node.mode = attr.mode
            }
            if (attr.timestamp !== undefined) {
                node.timestamp = attr.timestamp
            }
        }),
        lookup: (function(parent, name) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }),
        mknod: (function(parent, name, mode, dev) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }),
        rename: (function(oldNode, newDir, newName) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }),
        unlink: (function(parent, name) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }),
        rmdir: (function(parent, name) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }),
        readdir: (function(node) {
            var entries = [".", ".."];
            for (var key in node.contents) {
                if (!node.contents.hasOwnProperty(key)) {
                    continue
                }
                entries.push(key)
            }
            return entries
        }),
        symlink: (function(parent, newName, oldPath) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }),
        readlink: (function(node) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        })
    },
    stream_ops: {
        read: (function(stream, buffer, offset, length, position) {
            if (position >= stream.node.size) return 0;
            var chunk = stream.node.contents.slice(position, position + length);
            var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
            buffer.set(new Uint8Array(ab), offset);
            return chunk.size
        }),
        write: (function(stream, buffer, offset, length, position) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO)
        }),
        llseek: (function(stream, offset, whence) {
            var position = offset;
            if (whence === 1) {
                position += stream.position
            } else if (whence === 2) {
                if (FS.isFile(stream.node.mode)) {
                    position += stream.node.size
                }
            }
            if (position < 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
            }
            return position
        })
    }
};
STATICTOP += 16;
STATICTOP += 16;
STATICTOP += 16;
var FS = {
    root: null,
    mounts: [],
    devices: {},
    streams: [],
    nextInode: 1,
    nameTable: null,
    currentPath: "/",
    initialized: false,
    ignorePermissions: true,
    trackingDelegate: {},
    tracking: {
        openFlags: {
            READ: 1,
            WRITE: 2
        }
    },
    ErrnoError: null,
    genericErrors: {},
    filesystems: null,
    syncFSRequests: 0,
    handleFSError: (function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
        return ___setErrNo(e.errno)
    }),
    lookupPath: (function(path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
        if (!path) return {
            path: "",
            node: null
        };
        var defaults = {
            follow_mount: true,
            recurse_count: 0
        };
        for (var key in defaults) {
            if (opts[key] === undefined) {
                opts[key] = defaults[key]
            }
        }
        if (opts.recurse_count > 8) {
            throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
        }
        var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
            return !!p
        })), false);
        var current = FS.root;
        var current_path = "/";
        for (var i = 0; i < parts.length; i++) {
            var islast = i === parts.length - 1;
            if (islast && opts.parent) {
                break
            }
            current = FS.lookupNode(current, parts[i]);
            current_path = PATH.join2(current_path, parts[i]);
            if (FS.isMountpoint(current)) {
                if (!islast || islast && opts.follow_mount) {
                    current = current.mounted.root
                }
            }
            if (!islast || opts.follow) {
                var count = 0;
                while (FS.isLink(current.mode)) {
                    var link = FS.readlink(current_path);
                    current_path = PATH.resolve(PATH.dirname(current_path), link);
                    var lookup = FS.lookupPath(current_path, {
                        recurse_count: opts.recurse_count
                    });
                    current = lookup.node;
                    if (count++ > 40) {
                        throw new FS.ErrnoError(ERRNO_CODES.ELOOP)
                    }
                }
            }
        }
        return {
            path: current_path,
            node: current
        }
    }),
    getPath: (function(node) {
        var path;
        while (true) {
            if (FS.isRoot(node)) {
                var mount = node.mount.mountpoint;
                if (!path) return mount;
                return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path
            }
            path = path ? node.name + "/" + path : node.name;
            node = node.parent
        }
    }),
    hashName: (function(parentid, name) {
        var hash = 0;
        for (var i = 0; i < name.length; i++) {
            hash = (hash << 5) - hash + name.charCodeAt(i) | 0
        }
        return (parentid + hash >>> 0) % FS.nameTable.length
    }),
    hashAddNode: (function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node
    }),
    hashRemoveNode: (function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
            FS.nameTable[hash] = node.name_next
        } else {
            var current = FS.nameTable[hash];
            while (current) {
                if (current.name_next === node) {
                    current.name_next = node.name_next;
                    break
                }
                current = current.name_next
            }
        }
    }),
    lookupNode: (function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
            throw new FS.ErrnoError(err, parent)
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
            var nodeName = node.name;
            if (node.parent.id === parent.id && nodeName === name) {
                return node
            }
        }
        return FS.lookup(parent, name)
    }),
    createNode: (function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
            FS.FSNode = (function(parent, name, mode, rdev) {
                if (!parent) {
                    parent = this
                }
                this.parent = parent;
                this.mount = parent.mount;
                this.mounted = null;
                this.id = FS.nextInode++;
                this.name = name;
                this.mode = mode;
                this.node_ops = {};
                this.stream_ops = {};
                this.rdev = rdev
            });
            FS.FSNode.prototype = {};
            var readMode = 292 | 73;
            var writeMode = 146;
            Object.defineProperties(FS.FSNode.prototype, {
                read: {
                    get: (function() {
                        return (this.mode & readMode) === readMode
                    }),
                    set: (function(val) {
                        val ? this.mode |= readMode : this.mode &= ~readMode
                    })
                },
                write: {
                    get: (function() {
                        return (this.mode & writeMode) === writeMode
                    }),
                    set: (function(val) {
                        val ? this.mode |= writeMode : this.mode &= ~writeMode
                    })
                },
                isFolder: {
                    get: (function() {
                        return FS.isDir(this.mode)
                    })
                },
                isDevice: {
                    get: (function() {
                        return FS.isChrdev(this.mode)
                    })
                }
            })
        }
        var node = new FS.FSNode(parent, name, mode, rdev);
        FS.hashAddNode(node);
        return node
    }),
    destroyNode: (function(node) {
        FS.hashRemoveNode(node)
    }),
    isRoot: (function(node) {
        return node === node.parent
    }),
    isMountpoint: (function(node) {
        return !!node.mounted
    }),
    isFile: (function(mode) {
        return (mode & 61440) === 32768
    }),
    isDir: (function(mode) {
        return (mode & 61440) === 16384
    }),
    isLink: (function(mode) {
        return (mode & 61440) === 40960
    }),
    isChrdev: (function(mode) {
        return (mode & 61440) === 8192
    }),
    isBlkdev: (function(mode) {
        return (mode & 61440) === 24576
    }),
    isFIFO: (function(mode) {
        return (mode & 61440) === 4096
    }),
    isSocket: (function(mode) {
        return (mode & 49152) === 49152
    }),
    flagModes: {
        "r": 0,
        "rs": 1052672,
        "r+": 2,
        "w": 577,
        "wx": 705,
        "xw": 705,
        "w+": 578,
        "wx+": 706,
        "xw+": 706,
        "a": 1089,
        "ax": 1217,
        "xa": 1217,
        "a+": 1090,
        "ax+": 1218,
        "xa+": 1218
    },
    modeStringToFlags: (function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === "undefined") {
            throw new Error("Unknown file open mode: " + str)
        }
        return flags
    }),
    flagsToPermissionString: (function(flag) {
        var perms = ["r", "w", "rw"][flag & 3];
        if (flag & 512) {
            perms += "w"
        }
        return perms
    }),
    nodePermissions: (function(node, perms) {
        if (FS.ignorePermissions) {
            return 0
        }
        if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
            return ERRNO_CODES.EACCES
        } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
            return ERRNO_CODES.EACCES
        } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
            return ERRNO_CODES.EACCES
        }
        return 0
    }),
    mayLookup: (function(dir) {
        var err = FS.nodePermissions(dir, "x");
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0
    }),
    mayCreate: (function(dir, name) {
        try {
            var node = FS.lookupNode(dir, name);
            return ERRNO_CODES.EEXIST
        } catch (e) {}
        return FS.nodePermissions(dir, "wx")
    }),
    mayDelete: (function(dir, name, isdir) {
        var node;
        try {
            node = FS.lookupNode(dir, name)
        } catch (e) {
            return e.errno
        }
        var err = FS.nodePermissions(dir, "wx");
        if (err) {
            return err
        }
        if (isdir) {
            if (!FS.isDir(node.mode)) {
                return ERRNO_CODES.ENOTDIR
            }
            if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
                return ERRNO_CODES.EBUSY
            }
        } else {
            if (FS.isDir(node.mode)) {
                return ERRNO_CODES.EISDIR
            }
        }
        return 0
    }),
    mayOpen: (function(node, flags) {
        if (!node) {
            return ERRNO_CODES.ENOENT
        }
        if (FS.isLink(node.mode)) {
            return ERRNO_CODES.ELOOP
        } else if (FS.isDir(node.mode)) {
            if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) {
                return ERRNO_CODES.EISDIR
            }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags))
    }),
    MAX_OPEN_FDS: 4096,
    nextfd: (function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
            if (!FS.streams[fd]) {
                return fd
            }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE)
    }),
    getStream: (function(fd) {
        return FS.streams[fd]
    }),
    createStream: (function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
            FS.FSStream = (function() {});
            FS.FSStream.prototype = {};
            Object.defineProperties(FS.FSStream.prototype, {
                object: {
                    get: (function() {
                        return this.node
                    }),
                    set: (function(val) {
                        this.node = val
                    })
                },
                isRead: {
                    get: (function() {
                        return (this.flags & 2097155) !== 1
                    })
                },
                isWrite: {
                    get: (function() {
                        return (this.flags & 2097155) !== 0
                    })
                },
                isAppend: {
                    get: (function() {
                        return this.flags & 1024
                    })
                }
            })
        }
        var newStream = new FS.FSStream;
        for (var p in stream) {
            newStream[p] = stream[p]
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream
    }),
    closeStream: (function(fd) {
        FS.streams[fd] = null
    }),
    chrdev_stream_ops: {
        open: (function(stream) {
            var device = FS.getDevice(stream.node.rdev);
            stream.stream_ops = device.stream_ops;
            if (stream.stream_ops.open) {
                stream.stream_ops.open(stream)
            }
        }),
        llseek: (function() {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        })
    },
    major: (function(dev) {
        return dev >> 8
    }),
    minor: (function(dev) {
        return dev & 255
    }),
    makedev: (function(ma, mi) {
        return ma << 8 | mi
    }),
    registerDevice: (function(dev, ops) {
        FS.devices[dev] = {
            stream_ops: ops
        }
    }),
    getDevice: (function(dev) {
        return FS.devices[dev]
    }),
    getMounts: (function(mount) {
        var mounts = [];
        var check = [mount];
        while (check.length) {
            var m = check.pop();
            mounts.push(m);
            check.push.apply(check, m.mounts)
        }
        return mounts
    }),
    syncfs: (function(populate, callback) {
        if (typeof populate === "function") {
            callback = populate;
            populate = false
        }
        FS.syncFSRequests++;
        if (FS.syncFSRequests > 1) {
            console.log("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work")
        }
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;

        function doCallback(err) {
            assert(FS.syncFSRequests > 0);
            FS.syncFSRequests--;
            return callback(err)
        }

        function done(err) {
            if (err) {
                if (!done.errored) {
                    done.errored = true;
                    return doCallback(err)
                }
                return
            }
            if (++completed >= mounts.length) {
                doCallback(null)
            }
        }
        mounts.forEach((function(mount) {
            if (!mount.type.syncfs) {
                return done(null)
            }
            mount.type.syncfs(mount, populate, done)
        }))
    }),
    mount: (function(type, opts, mountpoint) {
        var root = mountpoint === "/";
        var pseudo = !mountpoint;
        var node;
        if (root && FS.root) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        } else if (!root && !pseudo) {
            var lookup = FS.lookupPath(mountpoint, {
                follow_mount: false
            });
            mountpoint = lookup.path;
            node = lookup.node;
            if (FS.isMountpoint(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
            }
            if (!FS.isDir(node.mode)) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
            }
        }
        var mount = {
            type: type,
            opts: opts,
            mountpoint: mountpoint,
            mounts: []
        };
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
        if (root) {
            FS.root = mountRoot
        } else if (node) {
            node.mounted = mount;
            if (node.mount) {
                node.mount.mounts.push(mount)
            }
        }
        return mountRoot
    }),
    unmount: (function(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, {
            follow_mount: false
        });
        if (!FS.isMountpoint(lookup.node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
        Object.keys(FS.nameTable).forEach((function(hash) {
            var current = FS.nameTable[hash];
            while (current) {
                var next = current.name_next;
                if (mounts.indexOf(current.mount) !== -1) {
                    FS.destroyNode(current)
                }
                current = next
            }
        }));
        node.mounted = null;
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1)
    }),
    lookup: (function(parent, name) {
        return parent.node_ops.lookup(parent, name)
    }),
    mknod: (function(path, mode, dev) {
        var lookup = FS.lookupPath(path, {
            parent: true
        });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === "." || name === "..") {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.mknod) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return parent.node_ops.mknod(parent, name, mode, dev)
    }),
    create: (function(path, mode) {
        mode = mode !== undefined ? mode : 438;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0)
    }),
    mkdir: (function(path, mode) {
        mode = mode !== undefined ? mode : 511;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0)
    }),
    mkdirTree: (function(path, mode) {
        var dirs = path.split("/");
        var d = "";
        for (var i = 0; i < dirs.length; ++i) {
            if (!dirs[i]) continue;
            d += "/" + dirs[i];
            try {
                FS.mkdir(d, mode)
            } catch (e) {
                if (e.errno != ERRNO_CODES.EEXIST) throw e
            }
        }
    }),
    mkdev: (function(path, mode, dev) {
        if (typeof dev === "undefined") {
            dev = mode;
            mode = 438
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev)
    }),
    symlink: (function(oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        var lookup = FS.lookupPath(newpath, {
            parent: true
        });
        var parent = lookup.node;
        if (!parent) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.symlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return parent.node_ops.symlink(parent, newname, oldpath)
    }),
    rename: (function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        var lookup, old_dir, new_dir;
        try {
            lookup = FS.lookupPath(old_path, {
                parent: true
            });
            old_dir = lookup.node;
            lookup = FS.lookupPath(new_path, {
                parent: true
            });
            new_dir = lookup.node
        } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        if (old_dir.mount !== new_dir.mount) {
            throw new FS.ErrnoError(ERRNO_CODES.EXDEV)
        }
        var old_node = FS.lookupNode(old_dir, old_name);
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== ".") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY)
        }
        var new_node;
        try {
            new_node = FS.lookupNode(new_dir, new_name)
        } catch (e) {}
        if (old_node === new_node) {
            return
        }
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!old_dir.node_ops.rename) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        if (new_dir !== old_dir) {
            err = FS.nodePermissions(old_dir, "w");
            if (err) {
                throw new FS.ErrnoError(err)
            }
        }
        try {
            if (FS.trackingDelegate["willMovePath"]) {
                FS.trackingDelegate["willMovePath"](old_path, new_path)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message)
        }
        FS.hashRemoveNode(old_node);
        try {
            old_dir.node_ops.rename(old_node, new_dir, new_name)
        } catch (e) {
            throw e
        } finally {
            FS.hashAddNode(old_node)
        }
        try {
            if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path)
        } catch (e) {
            console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message)
        }
    }),
    rmdir: (function(path) {
        var lookup = FS.lookupPath(path, {
            parent: true
        });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.rmdir) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        try {
            if (FS.trackingDelegate["willDeletePath"]) {
                FS.trackingDelegate["willDeletePath"](path)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message)
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path)
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message)
        }
    }),
    readdir: (function(path) {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        return node.node_ops.readdir(node)
    }),
    unlink: (function(path) {
        var lookup = FS.lookupPath(path, {
            parent: true
        });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
            throw new FS.ErrnoError(err)
        }
        if (!parent.node_ops.unlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY)
        }
        try {
            if (FS.trackingDelegate["willDeletePath"]) {
                FS.trackingDelegate["willDeletePath"](path)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message)
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
            if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path)
        } catch (e) {
            console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message)
        }
    }),
    readlink: (function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!link.node_ops.readlink) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link))
    }),
    stat: (function(path, dontFollow) {
        var lookup = FS.lookupPath(path, {
            follow: !dontFollow
        });
        var node = lookup.node;
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!node.node_ops.getattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        return node.node_ops.getattr(node)
    }),
    lstat: (function(path) {
        return FS.stat(path, true)
    }),
    chmod: (function(path, mode, dontFollow) {
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, {
                follow: !dontFollow
            });
            node = lookup.node
        } else {
            node = path
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        node.node_ops.setattr(node, {
            mode: mode & 4095 | node.mode & ~4095,
            timestamp: Date.now()
        })
    }),
    lchmod: (function(path, mode) {
        FS.chmod(path, mode, true)
    }),
    fchmod: (function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        FS.chmod(stream.node, mode)
    }),
    chown: (function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, {
                follow: !dontFollow
            });
            node = lookup.node
        } else {
            node = path
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        node.node_ops.setattr(node, {
            timestamp: Date.now()
        })
    }),
    lchown: (function(path, uid, gid) {
        FS.chown(path, uid, gid, true)
    }),
    fchown: (function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        FS.chown(stream.node, uid, gid)
    }),
    truncate: (function(path, len) {
        if (len < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var node;
        if (typeof path === "string") {
            var lookup = FS.lookupPath(path, {
                follow: true
            });
            node = lookup.node
        } else {
            node = path
        }
        if (!node.node_ops.setattr) {
            throw new FS.ErrnoError(ERRNO_CODES.EPERM)
        }
        if (FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!FS.isFile(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var err = FS.nodePermissions(node, "w");
        if (err) {
            throw new FS.ErrnoError(err)
        }
        node.node_ops.setattr(node, {
            size: len,
            timestamp: Date.now()
        })
    }),
    ftruncate: (function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        FS.truncate(stream.node, len)
    }),
    utime: (function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        var node = lookup.node;
        node.node_ops.setattr(node, {
            timestamp: Math.max(atime, mtime)
        })
    }),
    open: (function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === "undefined" ? 438 : mode;
        if (flags & 64) {
            mode = mode & 4095 | 32768
        } else {
            mode = 0
        }
        var node;
        if (typeof path === "object") {
            node = path
        } else {
            path = PATH.normalize(path);
            try {
                var lookup = FS.lookupPath(path, {
                    follow: !(flags & 131072)
                });
                node = lookup.node
            } catch (e) {}
        }
        var created = false;
        if (flags & 64) {
            if (node) {
                if (flags & 128) {
                    throw new FS.ErrnoError(ERRNO_CODES.EEXIST)
                }
            } else {
                node = FS.mknod(path, mode, 0);
                created = true
            }
        }
        if (!node) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (FS.isChrdev(node.mode)) {
            flags &= ~512
        }
        if (flags & 65536 && !FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        if (!created) {
            var err = FS.mayOpen(node, flags);
            if (err) {
                throw new FS.ErrnoError(err)
            }
        }
        if (flags & 512) {
            FS.truncate(node, 0)
        }
        flags &= ~(128 | 512);
        var stream = FS.createStream({
            node: node,
            path: FS.getPath(node),
            flags: flags,
            seekable: true,
            position: 0,
            stream_ops: node.stream_ops,
            ungotten: [],
            error: false
        }, fd_start, fd_end);
        if (stream.stream_ops.open) {
            stream.stream_ops.open(stream)
        }
        if (Module["logReadFiles"] && !(flags & 1)) {
            if (!FS.readFiles) FS.readFiles = {};
            if (!(path in FS.readFiles)) {
                FS.readFiles[path] = 1;
                Module["printErr"]("read file: " + path)
            }
        }
        try {
            if (FS.trackingDelegate["onOpenFile"]) {
                var trackingFlags = 0;
                if ((flags & 2097155) !== 1) {
                    trackingFlags |= FS.tracking.openFlags.READ
                }
                if ((flags & 2097155) !== 0) {
                    trackingFlags |= FS.tracking.openFlags.WRITE
                }
                FS.trackingDelegate["onOpenFile"](path, trackingFlags)
            }
        } catch (e) {
            console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message)
        }
        return stream
    }),
    close: (function(stream) {
        if (stream.getdents) stream.getdents = null;
        try {
            if (stream.stream_ops.close) {
                stream.stream_ops.close(stream)
            }
        } catch (e) {
            throw e
        } finally {
            FS.closeStream(stream.fd)
        }
    }),
    llseek: (function(stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position
    }),
    read: (function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!stream.stream_ops.read) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        var seeking = typeof position !== "undefined";
        if (!seeking) {
            position = stream.position
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead
    }),
    write: (function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EISDIR)
        }
        if (!stream.stream_ops.write) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if (stream.flags & 1024) {
            FS.llseek(stream, 0, 2)
        }
        var seeking = typeof position !== "undefined";
        if (!seeking) {
            position = stream.position
        } else if (!stream.seekable) {
            throw new FS.ErrnoError(ERRNO_CODES.ESPIPE)
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
            if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path)
        } catch (e) {
            console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message)
        }
        return bytesWritten
    }),
    allocate: (function(stream, offset, length) {
        if (offset < 0 || length <= 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL)
        }
        if ((stream.flags & 2097155) === 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EBADF)
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
        }
        if (!stream.stream_ops.allocate) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP)
        }
        stream.stream_ops.allocate(stream, offset, length)
    }),
    mmap: (function(stream, buffer, offset, length, position, prot, flags) {
        if ((stream.flags & 2097155) === 1) {
            throw new FS.ErrnoError(ERRNO_CODES.EACCES)
        }
        if (!stream.stream_ops.mmap) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV)
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags)
    }),
    msync: (function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
            return 0
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags)
    }),
    munmap: (function(stream) {
        return 0
    }),
    ioctl: (function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTTY)
        }
        return stream.stream_ops.ioctl(stream, cmd, arg)
    }),
    readFile: (function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || "r";
        opts.encoding = opts.encoding || "binary";
        if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
            throw new Error('Invalid encoding type "' + opts.encoding + '"')
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === "utf8") {
            ret = UTF8ArrayToString(buf, 0)
        } else if (opts.encoding === "binary") {
            ret = buf
        }
        FS.close(stream);
        return ret
    }),
    writeFile: (function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || "w";
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === "string") {
            var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
            var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
            FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn)
        } else if (ArrayBuffer.isView(data)) {
            FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn)
        } else {
            throw new Error("Unsupported data type")
        }
        FS.close(stream)
    }),
    cwd: (function() {
        return FS.currentPath
    }),
    chdir: (function(path) {
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        if (lookup.node === null) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOENT)
        }
        if (!FS.isDir(lookup.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR)
        }
        var err = FS.nodePermissions(lookup.node, "x");
        if (err) {
            throw new FS.ErrnoError(err)
        }
        FS.currentPath = lookup.path
    }),
    createDefaultDirectories: (function() {
        FS.mkdir("/tmp");
        FS.mkdir("/home");
        FS.mkdir("/home/web_user")
    }),
    createDefaultDevices: (function() {
        FS.mkdir("/dev");
        FS.registerDevice(FS.makedev(1, 3), {
            read: (function() {
                return 0
            }),
            write: (function(stream, buffer, offset, length, pos) {
                return length
            })
        });
        FS.mkdev("/dev/null", FS.makedev(1, 3));
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev("/dev/tty", FS.makedev(5, 0));
        FS.mkdev("/dev/tty1", FS.makedev(6, 0));
        var random_device;
        if (typeof crypto !== "undefined") {
            var randomBuffer = new Uint8Array(1);
            random_device = (function() {
                crypto.getRandomValues(randomBuffer);
                return randomBuffer[0]
            })
        } else if (ENVIRONMENT_IS_NODE) {
            random_device = (function() {
                return require("crypto")["randomBytes"](1)[0]
            })
        } else {
            random_device = (function() {
                return Math.random() * 256 | 0
            })
        }
        FS.createDevice("/dev", "random", random_device);
        FS.createDevice("/dev", "urandom", random_device);
        FS.mkdir("/dev/shm");
        FS.mkdir("/dev/shm/tmp")
    }),
    createSpecialDirectories: (function() {
        FS.mkdir("/proc");
        FS.mkdir("/proc/self");
        FS.mkdir("/proc/self/fd");
        FS.mount({
            mount: (function() {
                var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
                node.node_ops = {
                    lookup: (function(parent, name) {
                        var fd = +name;
                        var stream = FS.getStream(fd);
                        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                        var ret = {
                            parent: null,
                            mount: {
                                mountpoint: "fake"
                            },
                            node_ops: {
                                readlink: (function() {
                                    return stream.path
                                })
                            }
                        };
                        ret.parent = ret;
                        return ret
                    })
                };
                return node
            })
        }, {}, "/proc/self/fd")
    }),
    createStandardStreams: (function() {
        if (Module["stdin"]) {
            FS.createDevice("/dev", "stdin", Module["stdin"])
        } else {
            FS.symlink("/dev/tty", "/dev/stdin")
        }
        if (Module["stdout"]) {
            FS.createDevice("/dev", "stdout", null, Module["stdout"])
        } else {
            FS.symlink("/dev/tty", "/dev/stdout")
        }
        if (Module["stderr"]) {
            FS.createDevice("/dev", "stderr", null, Module["stderr"])
        } else {
            FS.symlink("/dev/tty1", "/dev/stderr")
        }
        var stdin = FS.open("/dev/stdin", "r");
        assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
        var stdout = FS.open("/dev/stdout", "w");
        assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
        var stderr = FS.open("/dev/stderr", "w");
        assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")")
    }),
    ensureErrnoError: (function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
            this.node = node;
            this.setErrno = (function(errno) {
                this.errno = errno;
                for (var key in ERRNO_CODES) {
                    if (ERRNO_CODES[key] === errno) {
                        this.code = key;
                        break
                    }
                }
            });
            this.setErrno(errno);
            this.message = ERRNO_MESSAGES[errno];
            if (this.stack) Object.defineProperty(this, "stack", {
                value: (new Error).stack,
                writable: true
            });
            if (this.stack) this.stack = demangleAll(this.stack)
        };
        FS.ErrnoError.prototype = new Error;
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        [ERRNO_CODES.ENOENT].forEach((function(code) {
            FS.genericErrors[code] = new FS.ErrnoError(code);
            FS.genericErrors[code].stack = "<generic error, no stack>"
        }))
    }),
    staticInit: (function() {
        FS.ensureErrnoError();
        FS.nameTable = new Array(4096);
        FS.mount(MEMFS, {}, "/");
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
        FS.filesystems = {
            "MEMFS": MEMFS,
            "IDBFS": IDBFS,
            "NODEFS": NODEFS,
            "WORKERFS": WORKERFS
        }
    }),
    init: (function(input, output, error) {
        assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
        FS.init.initialized = true;
        FS.ensureErrnoError();
        Module["stdin"] = input || Module["stdin"];
        Module["stdout"] = output || Module["stdout"];
        Module["stderr"] = error || Module["stderr"];
        FS.createStandardStreams()
    }),
    quit: (function() {
        FS.init.initialized = false;
        var fflush = Module["_fflush"];
        if (fflush) fflush(0);
        for (var i = 0; i < FS.streams.length; i++) {
            var stream = FS.streams[i];
            if (!stream) {
                continue
            }
            FS.close(stream)
        }
    }),
    getMode: (function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode
    }),
    joinPath: (function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == "/") path = path.substr(1);
        return path
    }),
    absolutePath: (function(relative, base) {
        return PATH.resolve(base, relative)
    }),
    standardizePath: (function(path) {
        return PATH.normalize(path)
    }),
    findObject: (function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
            return ret.object
        } else {
            ___setErrNo(ret.error);
            return null
        }
    }),
    analyzePath: (function(path, dontResolveLastLink) {
        try {
            var lookup = FS.lookupPath(path, {
                follow: !dontResolveLastLink
            });
            path = lookup.path
        } catch (e) {}
        var ret = {
            isRoot: false,
            exists: false,
            error: 0,
            name: null,
            path: null,
            object: null,
            parentExists: false,
            parentPath: null,
            parentObject: null
        };
        try {
            var lookup = FS.lookupPath(path, {
                parent: true
            });
            ret.parentExists = true;
            ret.parentPath = lookup.path;
            ret.parentObject = lookup.node;
            ret.name = PATH.basename(path);
            lookup = FS.lookupPath(path, {
                follow: !dontResolveLastLink
            });
            ret.exists = true;
            ret.path = lookup.path;
            ret.object = lookup.node;
            ret.name = lookup.node.name;
            ret.isRoot = lookup.path === "/"
        } catch (e) {
            ret.error = e.errno
        }
        return ret
    }),
    createFolder: (function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode)
    }),
    createPath: (function(parent, path, canRead, canWrite) {
        parent = typeof parent === "string" ? parent : FS.getPath(parent);
        var parts = path.split("/").reverse();
        while (parts.length) {
            var part = parts.pop();
            if (!part) continue;
            var current = PATH.join2(parent, part);
            try {
                FS.mkdir(current)
            } catch (e) {}
            parent = current
        }
        return current
    }),
    createFile: (function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode)
    }),
    createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
            if (typeof data === "string") {
                var arr = new Array(data.length);
                for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
                data = arr
            }
            FS.chmod(node, mode | 146);
            var stream = FS.open(node, "w");
            FS.write(stream, data, 0, data.length, 0, canOwn);
            FS.close(stream);
            FS.chmod(node, mode)
        }
        return node
    }),
    createDevice: (function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        FS.registerDevice(dev, {
            open: (function(stream) {
                stream.seekable = false
            }),
            close: (function(stream) {
                if (output && output.buffer && output.buffer.length) {
                    output(10)
                }
            }),
            read: (function(stream, buffer, offset, length, pos) {
                var bytesRead = 0;
                for (var i = 0; i < length; i++) {
                    var result;
                    try {
                        result = input()
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                    if (result === undefined && bytesRead === 0) {
                        throw new FS.ErrnoError(ERRNO_CODES.EAGAIN)
                    }
                    if (result === null || result === undefined) break;
                    bytesRead++;
                    buffer[offset + i] = result
                }
                if (bytesRead) {
                    stream.node.timestamp = Date.now()
                }
                return bytesRead
            }),
            write: (function(stream, buffer, offset, length, pos) {
                for (var i = 0; i < length; i++) {
                    try {
                        output(buffer[offset + i])
                    } catch (e) {
                        throw new FS.ErrnoError(ERRNO_CODES.EIO)
                    }
                }
                if (length) {
                    stream.node.timestamp = Date.now()
                }
                return i
            })
        });
        return FS.mkdev(path, mode, dev)
    }),
    createLink: (function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path)
    }),
    forceLoadFile: (function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== "undefined") {
            throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")
        } else if (Module["read"]) {
            try {
                obj.contents = intArrayFromString(Module["read"](obj.url), true);
                obj.usedBytes = obj.contents.length
            } catch (e) {
                success = false
            }
        } else {
            throw new Error("Cannot load without read() or XMLHttpRequest.")
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success
    }),
    createLazyFile: (function(parent, name, url, canRead, canWrite) {
        function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length - 1 || idx < 0) {
                return undefined
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = idx / this.chunkSize | 0;
            return this.getter(chunkNum)[chunkOffset]
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            var xhr = new XMLHttpRequest;
            xhr.open("HEAD", url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
            var chunkSize = 1024 * 1024;
            if (!hasByteServing) chunkSize = datalength;
            var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
                var xhr = new XMLHttpRequest;
                xhr.open("GET", url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
                if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
                if (xhr.overrideMimeType) {
                    xhr.overrideMimeType("text/plain; charset=x-user-defined")
                }
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                    return new Uint8Array(xhr.response || [])
                } else {
                    return intArrayFromString(xhr.responseText || "", true)
                }
            });
            var lazyArray = this;
            lazyArray.setDataGetter((function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum + 1) * chunkSize - 1;
                end = Math.min(end, datalength - 1);
                if (typeof lazyArray.chunks[chunkNum] === "undefined") {
                    lazyArray.chunks[chunkNum] = doXHR(start, end)
                }
                if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum]
            }));
            if (usesGzip || !datalength) {
                chunkSize = datalength = 1;
                datalength = this.getter(0).length;
                chunkSize = datalength;
                console.log("LazyFiles on gzip forces download of the whole file when length is accessed")
            }
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true
        };
        if (typeof XMLHttpRequest !== "undefined") {
            if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
            var lazyArray = new LazyUint8Array;
            Object.defineProperties(lazyArray, {
                length: {
                    get: (function() {
                        if (!this.lengthKnown) {
                            this.cacheLength()
                        }
                        return this._length
                    })
                },
                chunkSize: {
                    get: (function() {
                        if (!this.lengthKnown) {
                            this.cacheLength()
                        }
                        return this._chunkSize
                    })
                }
            });
            var properties = {
                isDevice: false,
                contents: lazyArray
            }
        } else {
            var properties = {
                isDevice: false,
                url: url
            }
        }
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        if (properties.contents) {
            node.contents = properties.contents
        } else if (properties.url) {
            node.contents = null;
            node.url = properties.url
        }
        Object.defineProperties(node, {
            usedBytes: {
                get: (function() {
                    return this.contents.length
                })
            }
        });
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((function(key) {
            var fn = node.stream_ops[key];
            stream_ops[key] = function forceLoadLazyFile() {
                if (!FS.forceLoadFile(node)) {
                    throw new FS.ErrnoError(ERRNO_CODES.EIO)
                }
                return fn.apply(null, arguments)
            }
        }));
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
            if (!FS.forceLoadFile(node)) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO)
            }
            var contents = stream.node.contents;
            if (position >= contents.length) return 0;
            var size = Math.min(contents.length - position, length);
            assert(size >= 0);
            if (contents.slice) {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents[position + i]
                }
            } else {
                for (var i = 0; i < size; i++) {
                    buffer[offset + i] = contents.get(position + i)
                }
            }
            return size
        };
        node.stream_ops = stream_ops;
        return node
    }),
    createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency("cp " + fullname);

        function processData(byteArray) {
            function finish(byteArray) {
                if (preFinish) preFinish();
                if (!dontCreateFile) {
                    FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn)
                }
                if (onload) onload();
                removeRunDependency(dep)
            }
            var handled = false;
            Module["preloadPlugins"].forEach((function(plugin) {
                if (handled) return;
                if (plugin["canHandle"](fullname)) {
                    plugin["handle"](byteArray, fullname, finish, (function() {
                        if (onerror) onerror();
                        removeRunDependency(dep)
                    }));
                    handled = true
                }
            }));
            if (!handled) finish(byteArray)
        }
        addRunDependency(dep);
        if (typeof url == "string") {
            Browser.asyncLoad(url, (function(byteArray) {
                processData(byteArray)
            }), onerror)
        } else {
            processData(url)
        }
    }),
    indexedDB: (function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB
    }),
    DB_NAME: (function() {
        return "EM_FS_" + window.location.pathname
    }),
    DB_VERSION: 20,
    DB_STORE_NAME: "FILE_DATA",
    saveFilesToDB: (function(paths, onload, onerror) {
        onload = onload || (function() {});
        onerror = onerror || (function() {});
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
        } catch (e) {
            return onerror(e)
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
            console.log("creating db");
            var db = openRequest.result;
            db.createObjectStore(FS.DB_STORE_NAME)
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            var transaction = db.transaction([FS.DB_STORE_NAME], "readwrite");
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0,
                fail = 0,
                total = paths.length;

            function finish() {
                if (fail == 0) onload();
                else onerror()
            }
            paths.forEach((function(path) {
                var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                putRequest.onsuccess = function putRequest_onsuccess() {
                    ok++;
                    if (ok + fail == total) finish()
                };
                putRequest.onerror = function putRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish()
                }
            }));
            transaction.onerror = onerror
        };
        openRequest.onerror = onerror
    }),
    loadFilesFromDB: (function(paths, onload, onerror) {
        onload = onload || (function() {});
        onerror = onerror || (function() {});
        var indexedDB = FS.indexedDB();
        try {
            var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION)
        } catch (e) {
            return onerror(e)
        }
        openRequest.onupgradeneeded = onerror;
        openRequest.onsuccess = function openRequest_onsuccess() {
            var db = openRequest.result;
            try {
                var transaction = db.transaction([FS.DB_STORE_NAME], "readonly")
            } catch (e) {
                onerror(e);
                return
            }
            var files = transaction.objectStore(FS.DB_STORE_NAME);
            var ok = 0,
                fail = 0,
                total = paths.length;

            function finish() {
                if (fail == 0) onload();
                else onerror()
            }
            paths.forEach((function(path) {
                var getRequest = files.get(path);
                getRequest.onsuccess = function getRequest_onsuccess() {
                    if (FS.analyzePath(path).exists) {
                        FS.unlink(path)
                    }
                    FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                    ok++;
                    if (ok + fail == total) finish()
                };
                getRequest.onerror = function getRequest_onerror() {
                    fail++;
                    if (ok + fail == total) finish()
                }
            }));
            transaction.onerror = onerror
        };
        openRequest.onerror = onerror
    })
};
var SYSCALLS = {
    DEFAULT_POLLMASK: 5,
    mappings: {},
    umask: 511,
    calculateAt: (function(dirfd, path) {
        if (path[0] !== "/") {
            var dir;
            if (dirfd === -100) {
                dir = FS.cwd()
            } else {
                var dirstream = FS.getStream(dirfd);
                if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                dir = dirstream.path
            }
            path = PATH.join2(dir, path)
        }
        return path
    }),
    doStat: (function(func, path, buf) {
        try {
            var stat = func(path)
        } catch (e) {
            if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
                return -ERRNO_CODES.ENOTDIR
            }
            throw e
        }
        HEAP32[buf >> 2] = stat.dev;
        HEAP32[buf + 4 >> 2] = 0;
        HEAP32[buf + 8 >> 2] = stat.ino;
        HEAP32[buf + 12 >> 2] = stat.mode;
        HEAP32[buf + 16 >> 2] = stat.nlink;
        HEAP32[buf + 20 >> 2] = stat.uid;
        HEAP32[buf + 24 >> 2] = stat.gid;
        HEAP32[buf + 28 >> 2] = stat.rdev;
        HEAP32[buf + 32 >> 2] = 0;
        HEAP32[buf + 36 >> 2] = stat.size;
        HEAP32[buf + 40 >> 2] = 4096;
        HEAP32[buf + 44 >> 2] = stat.blocks;
        HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
        HEAP32[buf + 52 >> 2] = 0;
        HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
        HEAP32[buf + 60 >> 2] = 0;
        HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
        HEAP32[buf + 68 >> 2] = 0;
        HEAP32[buf + 72 >> 2] = stat.ino;
        return 0
    }),
    doMsync: (function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags)
    }),
    doMkdir: (function(path, mode) {
        path = PATH.normalize(path);
        if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
        FS.mkdir(path, mode, 0);
        return 0
    }),
    doMknod: (function(path, mode, dev) {
        switch (mode & 61440) {
            case 32768:
            case 8192:
            case 24576:
            case 4096:
            case 49152:
                break;
            default:
                return -ERRNO_CODES.EINVAL
        }
        FS.mknod(path, mode, dev);
        return 0
    }),
    doReadlink: (function(path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf + len];
        stringToUTF8(ret, buf, bufsize + 1);
        HEAP8[buf + len] = endChar;
        return len
    }),
    doAccess: (function(path, amode) {
        if (amode & ~7) {
            return -ERRNO_CODES.EINVAL
        }
        var node;
        var lookup = FS.lookupPath(path, {
            follow: true
        });
        node = lookup.node;
        var perms = "";
        if (amode & 4) perms += "r";
        if (amode & 2) perms += "w";
        if (amode & 1) perms += "x";
        if (perms && FS.nodePermissions(node, perms)) {
            return -ERRNO_CODES.EACCES
        }
        return 0
    }),
    doDup: (function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd
    }),
    doReadv: (function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.read(stream, HEAP8, ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr;
            if (curr < len) break
        }
        return ret
    }),
    doWritev: (function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[iov + i * 8 >> 2];
            var len = HEAP32[iov + (i * 8 + 4) >> 2];
            var curr = FS.write(stream, HEAP8, ptr, len, offset);
            if (curr < 0) return -1;
            ret += curr
        }
        return ret
    }),
    varargs: 0,
    get: (function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
        return ret
    }),
    getStr: (function() {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret
    }),
    getStreamFromFD: (function() {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream
    }),
    getSocketFromFD: (function() {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket
    }),
    getSocketAddress: (function(allowNull) {
        var addrp = SYSCALLS.get(),
            addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info
    }),
    get64: (function() {
        var low = SYSCALLS.get(),
            high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low
    }),
    getZero: (function() {
        assert(SYSCALLS.get() === 0)
    })
};

function ___syscall140(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(),
            offset_high = SYSCALLS.get(),
            offset_low = SYSCALLS.get(),
            result = SYSCALLS.get(),
            whence = SYSCALLS.get();
        var offset = offset_low;
        FS.llseek(stream, offset, whence);
        HEAP32[result >> 2] = stream.position;
        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
        return 0
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall145(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(),
            iov = SYSCALLS.get(),
            iovcnt = SYSCALLS.get();
        return SYSCALLS.doReadv(stream, iov, iovcnt)
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall146(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(),
            iov = SYSCALLS.get(),
            iovcnt = SYSCALLS.get();
        return SYSCALLS.doWritev(stream, iov, iovcnt)
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall221(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(),
            cmd = SYSCALLS.get();
        switch (cmd) {
            case 0:
                {
                    var arg = SYSCALLS.get();
                    if (arg < 0) {
                        return -ERRNO_CODES.EINVAL
                    }
                    var newStream;
                    newStream = FS.open(stream.path, stream.flags, 0, arg);
                    return newStream.fd
                };
            case 1:
            case 2:
                return 0;
            case 3:
                return stream.flags;
            case 4:
                {
                    var arg = SYSCALLS.get();
                    stream.flags |= arg;
                    return 0
                };
            case 12:
            case 12:
                {
                    var arg = SYSCALLS.get();
                    var offset = 0;
                    HEAP16[arg + offset >> 1] = 2;
                    return 0
                };
            case 13:
            case 14:
            case 13:
            case 14:
                return 0;
            case 16:
            case 8:
                return -ERRNO_CODES.EINVAL;
            case 9:
                ___setErrNo(ERRNO_CODES.EINVAL);
                return -1;
            default:
                {
                    return -ERRNO_CODES.EINVAL
                }
        }
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall5(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var pathname = SYSCALLS.getStr(),
            flags = SYSCALLS.get(),
            mode = SYSCALLS.get();
        var stream = FS.open(pathname, flags, mode);
        return stream.fd
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall54(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD(),
            op = SYSCALLS.get();
        switch (op) {
            case 21509:
            case 21505:
                {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return 0
                };
            case 21510:
            case 21511:
            case 21512:
            case 21506:
            case 21507:
            case 21508:
                {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return 0
                };
            case 21519:
                {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    var argp = SYSCALLS.get();
                    HEAP32[argp >> 2] = 0;
                    return 0
                };
            case 21520:
                {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return -ERRNO_CODES.EINVAL
                };
            case 21531:
                {
                    var argp = SYSCALLS.get();
                    return FS.ioctl(stream, op, argp)
                };
            case 21523:
                {
                    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
                    return 0
                };
            default:
                abort("bad ioctl syscall " + op)
        }
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall6(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___syscall91(which, varargs) {
    SYSCALLS.varargs = varargs;
    try {
        var addr = SYSCALLS.get(),
            len = SYSCALLS.get();
        var info = SYSCALLS.mappings[addr];
        if (!info) return 0;
        if (len === info.len) {
            var stream = FS.getStream(info.fd);
            SYSCALLS.doMsync(addr, stream, len, info.flags);
            FS.munmap(stream);
            SYSCALLS.mappings[addr] = null;
            if (info.allocated) {
                _free(info.malloc)
            }
        }
        return 0
    } catch (e) {
        if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno
    }
}

function ___unlock() {}

function _abort() {
    Module["abort"]()
}

function _emscripten_get_now_is_monotonic() {
    return ENVIRONMENT_IS_NODE || typeof dateNow !== "undefined" || (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self["performance"] && self["performance"]["now"]
}

function _clock_gettime(clk_id, tp) {
    var now;
    if (clk_id === 0) {
        now = Date.now()
    } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now()
    } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1
    }
    HEAP32[tp >> 2] = now / 1e3 | 0;
    HEAP32[tp + 4 >> 2] = now % 1e3 * 1e3 * 1e3 | 0;
    return 0
}
var DLFCN = {
    error: null,
    errorMsg: null,
    loadedLibs: {},
    loadedLibNames: {}
};

function _dlclose(handle) {
    if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = "Tried to dlclose() unopened handle: " + handle;
        return 1
    } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
            if (lib_record.module.cleanups) {
                lib_record.module.cleanups.forEach((function(cleanup) {
                    cleanup()
                }))
            }
            delete DLFCN.loadedLibNames[lib_record.name];
            delete DLFCN.loadedLibs[handle]
        }
        return 0
    }
}

function _dlerror() {
    if (DLFCN.errorMsg === null) {
        return 0
    } else {
        if (DLFCN.error) _free(DLFCN.error);
        var msgArr = intArrayFromString(DLFCN.errorMsg);
        DLFCN.error = allocate(msgArr, "i8", ALLOC_NORMAL);
        DLFCN.errorMsg = null;
        return DLFCN.error
    }
}

function _dlsym(handle, symbol) {
    symbol = Pointer_stringify(symbol);
    if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = "Tried to dlsym() from an unopened handle: " + handle;
        return 0
    } else {
        var lib = DLFCN.loadedLibs[handle];
        symbol = "_" + symbol;
        if (!lib.module.hasOwnProperty(symbol)) {
            DLFCN.errorMsg = 'Tried to lookup unknown symbol "' + symbol + '" in dynamic lib: ' + lib.name;
            return 0
        } else {
            var result = lib.module[symbol];
            if (typeof result === "function") {
                return addFunction(result)
            }
            return result
        }
    }
}
var EGL = {
    errorCode: 12288,
    defaultDisplayInitialized: false,
    currentContext: 0,
    currentReadSurface: 0,
    currentDrawSurface: 0,
    stringCache: {},
    setErrorCode: (function(code) {
        EGL.errorCode = code
    }),
    chooseConfig: (function(display, attribList, config, config_size, numConfigs) {
        if (display != 62e3) {
            EGL.setErrorCode(12296);
            return 0
        }
        if ((!config || !config_size) && !numConfigs) {
            EGL.setErrorCode(12300);
            return 0
        }
        if (numConfigs) {
            HEAP32[numConfigs >> 2] = 1
        }
        if (config && config_size > 0) {
            HEAP32[config >> 2] = 62002
        }
        EGL.setErrorCode(12288);
        return 1
    })
};

function _eglWaitClient() {
    EGL.setErrorCode(12288);
    return 1
}

function _eglBindAPI(api) {
    if (api == 12448) {
        EGL.setErrorCode(12288);
        return 1
    } else {
        EGL.setErrorCode(12300);
        return 0
    }
}

function _eglChooseConfig(display, attrib_list, configs, config_size, numConfigs) {
    return EGL.chooseConfig(display, attrib_list, configs, config_size, numConfigs)
}
var GLUT = {
    initTime: null,
    idleFunc: null,
    displayFunc: null,
    keyboardFunc: null,
    keyboardUpFunc: null,
    specialFunc: null,
    specialUpFunc: null,
    reshapeFunc: null,
    motionFunc: null,
    passiveMotionFunc: null,
    mouseFunc: null,
    buttons: 0,
    modifiers: 0,
    initWindowWidth: 256,
    initWindowHeight: 256,
    initDisplayMode: 18,
    windowX: 0,
    windowY: 0,
    windowWidth: 0,
    windowHeight: 0,
    requestedAnimationFrame: false,
    saveModifiers: (function(event) {
        GLUT.modifiers = 0;
        if (event["shiftKey"]) GLUT.modifiers += 1;
        if (event["ctrlKey"]) GLUT.modifiers += 2;
        if (event["altKey"]) GLUT.modifiers += 4
    }),
    onMousemove: (function(event) {
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
        if (newX == lastX && newY == lastY) return;
        if (GLUT.buttons == 0 && event.target == Module["canvas"] && GLUT.passiveMotionFunc) {
            event.preventDefault();
            GLUT.saveModifiers(event);
            Module["dynCall_vii"](GLUT.passiveMotionFunc, lastX, lastY)
        } else if (GLUT.buttons != 0 && GLUT.motionFunc) {
            event.preventDefault();
            GLUT.saveModifiers(event);
            Module["dynCall_vii"](GLUT.motionFunc, lastX, lastY)
        }
    }),
    getSpecialKey: (function(keycode) {
        var key = null;
        switch (keycode) {
            case 8:
                key = 120;
                break;
            case 46:
                key = 111;
                break;
            case 112:
                key = 1;
                break;
            case 113:
                key = 2;
                break;
            case 114:
                key = 3;
                break;
            case 115:
                key = 4;
                break;
            case 116:
                key = 5;
                break;
            case 117:
                key = 6;
                break;
            case 118:
                key = 7;
                break;
            case 119:
                key = 8;
                break;
            case 120:
                key = 9;
                break;
            case 121:
                key = 10;
                break;
            case 122:
                key = 11;
                break;
            case 123:
                key = 12;
                break;
            case 37:
                key = 100;
                break;
            case 38:
                key = 101;
                break;
            case 39:
                key = 102;
                break;
            case 40:
                key = 103;
                break;
            case 33:
                key = 104;
                break;
            case 34:
                key = 105;
                break;
            case 36:
                key = 106;
                break;
            case 35:
                key = 107;
                break;
            case 45:
                key = 108;
                break;
            case 16:
            case 5:
                key = 112;
                break;
            case 6:
                key = 113;
                break;
            case 17:
            case 3:
                key = 114;
                break;
            case 4:
                key = 115;
                break;
            case 18:
            case 2:
                key = 116;
                break;
            case 1:
                key = 117;
                break
        }
        return key
    }),
    getASCIIKey: (function(event) {
        if (event["ctrlKey"] || event["altKey"] || event["metaKey"]) return null;
        var keycode = event["keyCode"];
        if (48 <= keycode && keycode <= 57) return keycode;
        if (65 <= keycode && keycode <= 90) return event["shiftKey"] ? keycode : keycode + 32;
        if (96 <= keycode && keycode <= 105) return keycode - 48;
        if (106 <= keycode && keycode <= 111) return keycode - 106 + 42;
        switch (keycode) {
            case 9:
            case 13:
            case 27:
            case 32:
            case 61:
                return keycode
        }
        var s = event["shiftKey"];
        switch (keycode) {
            case 186:
                return s ? 58 : 59;
            case 187:
                return s ? 43 : 61;
            case 188:
                return s ? 60 : 44;
            case 189:
                return s ? 95 : 45;
            case 190:
                return s ? 62 : 46;
            case 191:
                return s ? 63 : 47;
            case 219:
                return s ? 123 : 91;
            case 220:
                return s ? 124 : 47;
            case 221:
                return s ? 125 : 93;
            case 222:
                return s ? 34 : 39
        }
        return null
    }),
    onKeydown: (function(event) {
        if (GLUT.specialFunc || GLUT.keyboardFunc) {
            var key = GLUT.getSpecialKey(event["keyCode"]);
            if (key !== null) {
                if (GLUT.specialFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    Module["dynCall_viii"](GLUT.specialFunc, key, Browser.mouseX, Browser.mouseY)
                }
            } else {
                key = GLUT.getASCIIKey(event);
                if (key !== null && GLUT.keyboardFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    Module["dynCall_viii"](GLUT.keyboardFunc, key, Browser.mouseX, Browser.mouseY)
                }
            }
        }
    }),
    onKeyup: (function(event) {
        if (GLUT.specialUpFunc || GLUT.keyboardUpFunc) {
            var key = GLUT.getSpecialKey(event["keyCode"]);
            if (key !== null) {
                if (GLUT.specialUpFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    Module["dynCall_viii"](GLUT.specialUpFunc, key, Browser.mouseX, Browser.mouseY)
                }
            } else {
                key = GLUT.getASCIIKey(event);
                if (key !== null && GLUT.keyboardUpFunc) {
                    event.preventDefault();
                    GLUT.saveModifiers(event);
                    Module["dynCall_viii"](GLUT.keyboardUpFunc, key, Browser.mouseX, Browser.mouseY)
                }
            }
        }
    }),
    touchHandler: (function(event) {
        if (event.target != Module["canvas"]) {
            return
        }
        var touches = event.changedTouches,
            main = touches[0],
            type = "";
        switch (event.type) {
            case "touchstart":
                type = "mousedown";
                break;
            case "touchmove":
                type = "mousemove";
                break;
            case "touchend":
                type = "mouseup";
                break;
            default:
                return
        }
        var simulatedEvent = document.createEvent("MouseEvent");
        simulatedEvent.initMouseEvent(type, true, true, window, 1, main.screenX, main.screenY, main.clientX, main.clientY, false, false, false, false, 0, null);
        main.target.dispatchEvent(simulatedEvent);
        event.preventDefault()
    }),
    onMouseButtonDown: (function(event) {
        Browser.calculateMouseEvent(event);
        GLUT.buttons |= 1 << event["button"];
        if (event.target == Module["canvas"] && GLUT.mouseFunc) {
            try {
                event.target.setCapture()
            } catch (e) {}
            event.preventDefault();
            GLUT.saveModifiers(event);
            Module["dynCall_viiii"](GLUT.mouseFunc, event["button"], 0, Browser.mouseX, Browser.mouseY)
        }
    }),
    onMouseButtonUp: (function(event) {
        Browser.calculateMouseEvent(event);
        GLUT.buttons &= ~(1 << event["button"]);
        if (GLUT.mouseFunc) {
            event.preventDefault();
            GLUT.saveModifiers(event);
            Module["dynCall_viiii"](GLUT.mouseFunc, event["button"], 1, Browser.mouseX, Browser.mouseY)
        }
    }),
    onMouseWheel: (function(event) {
        Browser.calculateMouseEvent(event);
        var e = window.event || event;
        var delta = -Browser.getMouseWheelDelta(event);
        delta = delta == 0 ? 0 : delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1);
        var button = 3;
        if (delta < 0) {
            button = 4
        }
        if (GLUT.mouseFunc) {
            event.preventDefault();
            GLUT.saveModifiers(event);
            Module["dynCall_viiii"](GLUT.mouseFunc, button, 0, Browser.mouseX, Browser.mouseY)
        }
    }),
    onFullscreenEventChange: (function(event) {
        var width;
        var height;
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
            width = screen["width"];
            height = screen["height"]
        } else {
            width = GLUT.windowWidth;
            height = GLUT.windowHeight;
            document.removeEventListener("fullscreenchange", GLUT.onFullscreenEventChange, true);
            document.removeEventListener("mozfullscreenchange", GLUT.onFullscreenEventChange, true);
            document.removeEventListener("webkitfullscreenchange", GLUT.onFullscreenEventChange, true)
        }
        Browser.setCanvasSize(width, height);
        if (GLUT.reshapeFunc) {
            Module["dynCall_vii"](GLUT.reshapeFunc, width, height)
        }
        _glutPostRedisplay()
    }),
    requestFullscreen: (function() {
        Browser.requestFullscreen(false, false)
    }),
    requestFullScreen: (function() {
        Module.printErr("GLUT.requestFullScreen() is deprecated. Please call GLUT.requestFullscreen instead.");
        GLUT.requestFullScreen = (function() {
            return GLUT.requestFullscreen()
        });
        return GLUT.requestFullscreen()
    }),
    exitFullscreen: (function() {
        var CFS = document["exitFullscreen"] || document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || (function() {});
        CFS.apply(document, [])
    }),
    cancelFullScreen: (function() {
        Module.printErr("GLUT.cancelFullScreen() is deprecated. Please call GLUT.exitFullscreen instead.");
        GLUT.cancelFullScreen = (function() {
            return GLUT.exitFullscreen()
        });
        return GLUT.exitFullscreen()
    })
};

function _glutInitDisplayMode(mode) {
    GLUT.initDisplayMode = mode
}

function _glutCreateWindow(name) {
    var contextAttributes = {
        antialias: (GLUT.initDisplayMode & 128) != 0,
        depth: (GLUT.initDisplayMode & 16) != 0,
        stencil: (GLUT.initDisplayMode & 32) != 0,
        alpha: (GLUT.initDisplayMode & 8) != 0
    };
    Module.ctx = Browser.createContext(Module["canvas"], true, true, contextAttributes);
    return Module.ctx ? 1 : 0
}
var GL = {
    counter: 1,
    lastError: 0,
    buffers: [],
    mappedBuffers: {},
    programs: [],
    framebuffers: [],
    renderbuffers: [],
    textures: [],
    uniforms: [],
    shaders: [],
    vaos: [],
    contexts: [],
    currentContext: null,
    offscreenCanvases: {},
    timerQueriesEXT: [],
    byteSizeByTypeRoot: 5120,
    byteSizeByType: [1, 1, 2, 2, 4, 4, 4, 2, 3, 4, 8],
    programInfos: {},
    stringCache: {},
    tempFixedLengthArray: [],
    packAlignment: 4,
    unpackAlignment: 4,
    init: (function() {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
            GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i + 1)
        }
        for (var i = 0; i < 32; i++) {
            GL.tempFixedLengthArray.push(new Array(i))
        }
    }),
    recordError: function recordError(errorCode) {
        if (!GL.lastError) {
            GL.lastError = errorCode
        }
    },
    getNewId: (function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
            table[i] = null
        }
        return ret
    }),
    MINI_TEMP_BUFFER_SIZE: 256,
    miniTempBuffer: null,
    miniTempBufferViews: [0],
    getSource: (function(shader, count, string, length) {
        var source = "";
        for (var i = 0; i < count; ++i) {
            var frag;
            if (length) {
                var len = HEAP32[length + i * 4 >> 2];
                if (len < 0) {
                    frag = Pointer_stringify(HEAP32[string + i * 4 >> 2])
                } else {
                    frag = Pointer_stringify(HEAP32[string + i * 4 >> 2], len)
                }
            } else {
                frag = Pointer_stringify(HEAP32[string + i * 4 >> 2])
            }
            source += frag
        }
        return source
    }),
    createContext: (function(canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes["majorVersion"] === "undefined" && typeof webGLContextAttributes["minorVersion"] === "undefined") {
            webGLContextAttributes["majorVersion"] = 1;
            webGLContextAttributes["minorVersion"] = 0
        }
        var ctx;
        var errorInfo = "?";

        function onContextCreationError(event) {
            errorInfo = event.statusMessage || errorInfo
        }
        try {
            canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
            try {
                if (webGLContextAttributes["majorVersion"] == 1 && webGLContextAttributes["minorVersion"] == 0) {
                    ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes)
                } else if (webGLContextAttributes["majorVersion"] == 2 && webGLContextAttributes["minorVersion"] == 0) {
                    ctx = canvas.getContext("webgl2", webGLContextAttributes)
                } else {
                    throw "Unsupported WebGL context version " + majorVersion + "." + minorVersion + "!"
                }
            } finally {
                canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false)
            }
            if (!ctx) throw ":("
        } catch (e) {
            Module.print("Could not create canvas: " + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
            return 0
        }
        if (!ctx) return 0;
        var context = GL.registerContext(ctx, webGLContextAttributes);
        return context
    }),
    registerContext: (function(ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
            handle: handle,
            attributes: webGLContextAttributes,
            version: webGLContextAttributes["majorVersion"],
            GLctx: ctx
        };
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes["enableExtensionsByDefault"] === "undefined" || webGLContextAttributes["enableExtensionsByDefault"]) {
            GL.initExtensions(context)
        }
        return handle
    }),
    makeContextCurrent: (function(contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx;
        GL.currentContext = context;
        return true
    }),
    getContext: (function(contextHandle) {
        return GL.contexts[contextHandle]
    }),
    deleteContext: (function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === "object") JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas);
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined;
        GL.contexts[contextHandle] = null
    }),
    initExtensions: (function(context) {
        if (!context) context = GL.currentContext;
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
        var GLctx = context.GLctx;
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
        if (context.version < 2) {
            var instancedArraysExt = GLctx.getExtension("ANGLE_instanced_arrays");
            if (instancedArraysExt) {
                GLctx["vertexAttribDivisor"] = (function(index, divisor) {
                    instancedArraysExt["vertexAttribDivisorANGLE"](index, divisor)
                });
                GLctx["drawArraysInstanced"] = (function(mode, first, count, primcount) {
                    instancedArraysExt["drawArraysInstancedANGLE"](mode, first, count, primcount)
                });
                GLctx["drawElementsInstanced"] = (function(mode, count, type, indices, primcount) {
                    instancedArraysExt["drawElementsInstancedANGLE"](mode, count, type, indices, primcount)
                })
            }
            var vaoExt = GLctx.getExtension("OES_vertex_array_object");
            if (vaoExt) {
                GLctx["createVertexArray"] = (function() {
                    return vaoExt["createVertexArrayOES"]()
                });
                GLctx["deleteVertexArray"] = (function(vao) {
                    vaoExt["deleteVertexArrayOES"](vao)
                });
                GLctx["bindVertexArray"] = (function(vao) {
                    vaoExt["bindVertexArrayOES"](vao)
                });
                GLctx["isVertexArray"] = (function(vao) {
                    return vaoExt["isVertexArrayOES"](vao)
                })
            }
            var drawBuffersExt = GLctx.getExtension("WEBGL_draw_buffers");
            if (drawBuffersExt) {
                GLctx["drawBuffers"] = (function(n, bufs) {
                    drawBuffersExt["drawBuffersWEBGL"](n, bufs)
                })
            }
        }
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        var automaticallyEnabledExtensions = ["OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives", "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays", "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc", "WEBKIT_WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float", "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources", "EXT_shader_texture_lod", "EXT_color_buffer_float"];
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
            GLctx.getSupportedExtensions().forEach((function(ext) {
                if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
                    GLctx.getExtension(ext)
                }
            }))
        }
    }),
    populateUniformTable: (function(program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
            uniforms: {},
            maxUniformLength: 0,
            maxAttributeLength: -1,
            maxUniformBlockNameLength: -1
        };
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
            var u = GLctx.getActiveUniform(p, i);
            var name = u.name;
            ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length + 1);
            if (name.indexOf("]", name.length - 1) !== -1) {
                var ls = name.lastIndexOf("[");
                name = name.slice(0, ls)
            }
            var loc = GLctx.getUniformLocation(p, name);
            if (loc != null) {
                var id = GL.getNewId(GL.uniforms);
                utable[name] = [u.size, id];
                GL.uniforms[id] = loc;
                for (var j = 1; j < u.size; ++j) {
                    var n = name + "[" + j + "]";
                    loc = GLctx.getUniformLocation(p, n);
                    id = GL.getNewId(GL.uniforms);
                    GL.uniforms[id] = loc
                }
            }
        }
    })
};

function _eglCreateContext(display, config, hmm, contextAttribs) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    var glesContextVersion = 1;
    for (;;) {
        var param = HEAP32[contextAttribs >> 2];
        if (param == 12440) {
            glesContextVersion = HEAP32[contextAttribs + 4 >> 2]
        } else if (param == 12344) {
            break
        } else {
            EGL.setErrorCode(12292);
            return 0
        }
        contextAttribs += 8
    }
    if (glesContextVersion != 2) {
        EGL.setErrorCode(12293);
        return 0
    }
    _glutInitDisplayMode(178);
    EGL.windowID = _glutCreateWindow();
    if (EGL.windowID != 0) {
        EGL.setErrorCode(12288);
        return 62004
    } else {
        EGL.setErrorCode(12297);
        return 0
    }
}

function _eglCreateWindowSurface(display, config, win, attrib_list) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    if (config != 62002) {
        EGL.setErrorCode(12293);
        return 0
    }
    EGL.setErrorCode(12288);
    return 62006
}

function _eglDestroyContext(display, context) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    if (context != 62004) {
        EGL.setErrorCode(12294);
        return 0
    }
    EGL.setErrorCode(12288);
    return 1
}

function _eglDestroySurface(display, surface) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    if (surface != 62006) {
        EGL.setErrorCode(12301);
        return 1
    }
    if (EGL.currentReadSurface == surface) {
        EGL.currentReadSurface = 0
    }
    if (EGL.currentDrawSurface == surface) {
        EGL.currentDrawSurface = 0
    }
    EGL.setErrorCode(12288);
    return 1
}

function _eglGetConfigAttrib(display, config, attribute, value) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    if (config != 62002) {
        EGL.setErrorCode(12293);
        return 0
    }
    if (!value) {
        EGL.setErrorCode(12300);
        return 0
    }
    EGL.setErrorCode(12288);
    switch (attribute) {
        case 12320:
            HEAP32[value >> 2] = 32;
            return 1;
        case 12321:
            HEAP32[value >> 2] = 8;
            return 1;
        case 12322:
            HEAP32[value >> 2] = 8;
            return 1;
        case 12323:
            HEAP32[value >> 2] = 8;
            return 1;
        case 12324:
            HEAP32[value >> 2] = 8;
            return 1;
        case 12325:
            HEAP32[value >> 2] = 24;
            return 1;
        case 12326:
            HEAP32[value >> 2] = 8;
            return 1;
        case 12327:
            HEAP32[value >> 2] = 12344;
            return 1;
        case 12328:
            HEAP32[value >> 2] = 62002;
            return 1;
        case 12329:
            HEAP32[value >> 2] = 0;
            return 1;
        case 12330:
            HEAP32[value >> 2] = 4096;
            return 1;
        case 12331:
            HEAP32[value >> 2] = 16777216;
            return 1;
        case 12332:
            HEAP32[value >> 2] = 4096;
            return 1;
        case 12333:
            HEAP32[value >> 2] = 0;
            return 1;
        case 12334:
            HEAP32[value >> 2] = 0;
            return 1;
        case 12335:
            HEAP32[value >> 2] = 12344;
            return 1;
        case 12337:
            HEAP32[value >> 2] = 4;
            return 1;
        case 12338:
            HEAP32[value >> 2] = 1;
            return 1;
        case 12339:
            HEAP32[value >> 2] = 4;
            return 1;
        case 12340:
            HEAP32[value >> 2] = 12344;
            return 1;
        case 12341:
        case 12342:
        case 12343:
            HEAP32[value >> 2] = -1;
            return 1;
        case 12345:
        case 12346:
            HEAP32[value >> 2] = 0;
            return 1;
        case 12347:
        case 12348:
            HEAP32[value >> 2] = 1;
            return 1;
        case 12349:
        case 12350:
            HEAP32[value >> 2] = 0;
            return 1;
        case 12351:
            HEAP32[value >> 2] = 12430;
            return 1;
        case 12352:
            HEAP32[value >> 2] = 4;
            return 1;
        case 12354:
            HEAP32[value >> 2] = 0;
            return 1;
        default:
            EGL.setErrorCode(12292);
            return 0
    }
}

function _eglGetDisplay(nativeDisplayType) {
    EGL.setErrorCode(12288);
    return 62e3
}

function _eglGetProcAddress(name_) {
    return _emscripten_GetProcAddress(name_)
}

function _eglInitialize(display, majorVersion, minorVersion) {
    if (display == 62e3) {
        if (majorVersion) {
            HEAP32[majorVersion >> 2] = 1
        }
        if (minorVersion) {
            HEAP32[minorVersion >> 2] = 4
        }
        EGL.defaultDisplayInitialized = true;
        EGL.setErrorCode(12288);
        return 1
    } else {
        EGL.setErrorCode(12296);
        return 0
    }
}

function _eglMakeCurrent(display, draw, read, context) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    if (context != 0 && context != 62004) {
        EGL.setErrorCode(12294);
        return 0
    }
    if (read != 0 && read != 62006 || draw != 0 && draw != 62006) {
        EGL.setErrorCode(12301);
        return 0
    }
    EGL.currentContext = context;
    EGL.currentDrawSurface = draw;
    EGL.currentReadSurface = read;
    EGL.setErrorCode(12288);
    return 1
}

function _eglSwapBuffers() {
    if (!EGL.defaultDisplayInitialized) {
        EGL.setErrorCode(12289)
    } else if (!Module.ctx) {
        EGL.setErrorCode(12290)
    } else if (Module.ctx.isContextLost()) {
        EGL.setErrorCode(12302)
    } else {
        EGL.setErrorCode(12288);
        return 1
    }
    return 0
}

function _eglSwapInterval(display, interval) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    if (interval == 0) _emscripten_set_main_loop_timing(0, 0);
    else _emscripten_set_main_loop_timing(1, interval);
    EGL.setErrorCode(12288);
    return 1
}

function _eglTerminate(display) {
    if (display != 62e3) {
        EGL.setErrorCode(12296);
        return 0
    }
    EGL.currentContext = 0;
    EGL.currentReadSurface = 0;
    EGL.currentDrawSurface = 0;
    EGL.defaultDisplayInitialized = false;
    EGL.setErrorCode(12288);
    return 1
}

function _eglWaitGL() {
    return _eglWaitClient.apply(null, arguments)
}

function _eglWaitNative(nativeEngineId) {
    EGL.setErrorCode(12288);
    return 1
}

function _emscripten_async_wget(url, file, onload, onerror) {
    Module["noExitRuntime"] = true;
    var _url = Pointer_stringify(url);
    var _file = Pointer_stringify(file);
    _file = PATH.resolve(FS.cwd(), _file);

    function doCallback(callback) {
        if (callback) {
            var stack = stackSave();
            Module["dynCall_vi"](callback, allocate(intArrayFromString(_file), "i8", ALLOC_STACK));
            stackRestore(stack)
        }
    }
    var destinationDirectory = PATH.dirname(_file);
    FS.createPreloadedFile(destinationDirectory, PATH.basename(_file), _url, true, true, (function() {
        doCallback(onload)
    }), (function() {
        doCallback(onerror)
    }), false, false, (function() {
        try {
            FS.unlink(_file)
        } catch (e) {}
        FS.mkdirTree(destinationDirectory)
    }))
}
var JSEvents = {
    keyEvent: 0,
    mouseEvent: 0,
    wheelEvent: 0,
    uiEvent: 0,
    focusEvent: 0,
    deviceOrientationEvent: 0,
    deviceMotionEvent: 0,
    fullscreenChangeEvent: 0,
    pointerlockChangeEvent: 0,
    visibilityChangeEvent: 0,
    touchEvent: 0,
    lastGamepadState: null,
    lastGamepadStateFrame: null,
    numGamepadsConnected: 0,
    previousFullscreenElement: null,
    previousScreenX: null,
    previousScreenY: null,
    removeEventListenersRegistered: false,
    staticInit: (function() {
        if (typeof window !== "undefined") {
            window.addEventListener("gamepadconnected", (function() {
                ++JSEvents.numGamepadsConnected
            }));
            window.addEventListener("gamepaddisconnected", (function() {
                --JSEvents.numGamepadsConnected
            }));
            var firstState = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null;
            if (firstState) {
                JSEvents.numGamepadsConnected = firstState.length
            }
        }
    }),
    registerRemoveEventListeners: (function() {
        if (!JSEvents.removeEventListenersRegistered) {
            __ATEXIT__.push((function() {
                for (var i = JSEvents.eventHandlers.length - 1; i >= 0; --i) {
                    JSEvents._removeHandler(i)
                }
            }));
            JSEvents.removeEventListenersRegistered = true
        }
    }),
    findEventTarget: (function(target) {
        if (target) {
            if (typeof target == "number") {
                target = Pointer_stringify(target)
            }
            if (target == "#window") return window;
            else if (target == "#document") return document;
            else if (target == "#screen") return window.screen;
            else if (target == "#canvas") return Module["canvas"];
            if (typeof target == "string") return document.getElementById(target);
            else return target
        } else {
            return window
        }
    }),
    deferredCalls: [],
    deferCall: (function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
            if (arrA.length != arrB.length) return false;
            for (var i in arrA) {
                if (arrA[i] != arrB[i]) return false
            }
            return true
        }
        for (var i in JSEvents.deferredCalls) {
            var call = JSEvents.deferredCalls[i];
            if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
                return
            }
        }
        JSEvents.deferredCalls.push({
            targetFunction: targetFunction,
            precedence: precedence,
            argsList: argsList
        });
        JSEvents.deferredCalls.sort((function(x, y) {
            return x.precedence < y.precedence
        }))
    }),
    removeDeferredCalls: (function(targetFunction) {
        for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
            if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
                JSEvents.deferredCalls.splice(i, 1);
                --i
            }
        }
    }),
    canPerformEventHandlerRequests: (function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls
    }),
    runDeferredCalls: (function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
            return
        }
        for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
            var call = JSEvents.deferredCalls[i];
            JSEvents.deferredCalls.splice(i, 1);
            --i;
            call.targetFunction.apply(this, call.argsList)
        }
    }),
    inEventHandler: 0,
    currentEventHandler: null,
    eventHandlers: [],
    isInternetExplorer: (function() {
        return navigator.userAgent.indexOf("MSIE") !== -1 || navigator.appVersion.indexOf("Trident/") > 0
    }),
    removeAllHandlersOnTarget: (function(target, eventTypeString) {
        for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == target && (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
                JSEvents._removeHandler(i--)
            }
        }
    }),
    _removeHandler: (function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1)
    }),
    registerOrRemoveHandler: (function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
            ++JSEvents.inEventHandler;
            JSEvents.currentEventHandler = eventHandler;
            JSEvents.runDeferredCalls();
            eventHandler.handlerFunc(event);
            JSEvents.runDeferredCalls();
            --JSEvents.inEventHandler
        };
        if (eventHandler.callbackfunc) {
            eventHandler.eventListenerFunc = jsEventHandler;
            eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
            JSEvents.eventHandlers.push(eventHandler);
            JSEvents.registerRemoveEventListeners()
        } else {
            for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
                if (JSEvents.eventHandlers[i].target == eventHandler.target && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
                    JSEvents._removeHandler(i--)
                }
            }
        }
    }),
    registerKeyEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
            JSEvents.keyEvent = _malloc(164)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            stringToUTF8(e.key ? e.key : "", JSEvents.keyEvent + 0, 32);
            stringToUTF8(e.code ? e.code : "", JSEvents.keyEvent + 32, 32);
            HEAP32[JSEvents.keyEvent + 64 >> 2] = e.location;
            HEAP32[JSEvents.keyEvent + 68 >> 2] = e.ctrlKey;
            HEAP32[JSEvents.keyEvent + 72 >> 2] = e.shiftKey;
            HEAP32[JSEvents.keyEvent + 76 >> 2] = e.altKey;
            HEAP32[JSEvents.keyEvent + 80 >> 2] = e.metaKey;
            HEAP32[JSEvents.keyEvent + 84 >> 2] = e.repeat;
            stringToUTF8(e.locale ? e.locale : "", JSEvents.keyEvent + 88, 32);
            stringToUTF8(e.char ? e.char : "", JSEvents.keyEvent + 120, 32);
            HEAP32[JSEvents.keyEvent + 152 >> 2] = e.charCode;
            HEAP32[JSEvents.keyEvent + 156 >> 2] = e.keyCode;
            HEAP32[JSEvents.keyEvent + 160 >> 2] = e.which;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.keyEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    getBoundingClientRectOrZeros: (function(target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : {
            left: 0,
            top: 0
        }
    }),
    fillMouseEventData: (function(eventStruct, e, target) {
        HEAPF64[eventStruct >> 3] = JSEvents.tick();
        HEAP32[eventStruct + 8 >> 2] = e.screenX;
        HEAP32[eventStruct + 12 >> 2] = e.screenY;
        HEAP32[eventStruct + 16 >> 2] = e.clientX;
        HEAP32[eventStruct + 20 >> 2] = e.clientY;
        HEAP32[eventStruct + 24 >> 2] = e.ctrlKey;
        HEAP32[eventStruct + 28 >> 2] = e.shiftKey;
        HEAP32[eventStruct + 32 >> 2] = e.altKey;
        HEAP32[eventStruct + 36 >> 2] = e.metaKey;
        HEAP16[eventStruct + 40 >> 1] = e.button;
        HEAP16[eventStruct + 42 >> 1] = e.buttons;
        HEAP32[eventStruct + 44 >> 2] = e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || e.screenX - JSEvents.previousScreenX;
        HEAP32[eventStruct + 48 >> 2] = e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || e.screenY - JSEvents.previousScreenY;
        if (Module["canvas"]) {
            var rect = Module["canvas"].getBoundingClientRect();
            HEAP32[eventStruct + 60 >> 2] = e.clientX - rect.left;
            HEAP32[eventStruct + 64 >> 2] = e.clientY - rect.top
        } else {
            HEAP32[eventStruct + 60 >> 2] = 0;
            HEAP32[eventStruct + 64 >> 2] = 0
        }
        if (target) {
            var rect = JSEvents.getBoundingClientRectOrZeros(target);
            HEAP32[eventStruct + 52 >> 2] = e.clientX - rect.left;
            HEAP32[eventStruct + 56 >> 2] = e.clientY - rect.top
        } else {
            HEAP32[eventStruct + 52 >> 2] = 0;
            HEAP32[eventStruct + 56 >> 2] = 0
        }
        if (e.type !== "wheel" && e.type !== "mousewheel") {
            JSEvents.previousScreenX = e.screenX;
            JSEvents.previousScreenY = e.screenY
        }
    }),
    registerMouseEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
            JSEvents.mouseEvent = _malloc(72)
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.mouseEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: eventTypeString != "mousemove" && eventTypeString != "mouseenter" && eventTypeString != "mouseleave",
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        if (JSEvents.isInternetExplorer() && eventTypeString == "mousedown") eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    registerWheelEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
            JSEvents.wheelEvent = _malloc(104)
        }
        target = JSEvents.findEventTarget(target);
        var wheelHandlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
            HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["deltaX"];
            HEAPF64[JSEvents.wheelEvent + 80 >> 3] = e["deltaY"];
            HEAPF64[JSEvents.wheelEvent + 88 >> 3] = e["deltaZ"];
            HEAP32[JSEvents.wheelEvent + 96 >> 2] = e["deltaMode"];
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var mouseWheelHandlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
            HEAPF64[JSEvents.wheelEvent + 72 >> 3] = e["wheelDeltaX"] || 0;
            HEAPF64[JSEvents.wheelEvent + 80 >> 3] = -(e["wheelDeltaY"] ? e["wheelDeltaY"] : e["wheelDelta"]);
            HEAPF64[JSEvents.wheelEvent + 88 >> 3] = 0;
            HEAP32[JSEvents.wheelEvent + 96 >> 2] = 0;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: true,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: eventTypeString == "wheel" ? wheelHandlerFunc : mouseWheelHandlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    pageScrollPos: (function() {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
            return [window.pageXOffset, window.pageYOffset]
        }
        if (typeof document.documentElement.scrollLeft !== "undefined" || typeof document.documentElement.scrollTop !== "undefined") {
            return [document.documentElement.scrollLeft, document.documentElement.scrollTop]
        }
        return [document.body.scrollLeft | 0, document.body.scrollTop | 0]
    }),
    registerUiEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
            JSEvents.uiEvent = _malloc(36)
        }
        if (eventTypeString == "scroll" && !target) {
            target = document
        } else {
            target = JSEvents.findEventTarget(target)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            if (e.target != target) {
                return
            }
            var scrollPos = JSEvents.pageScrollPos();
            HEAP32[JSEvents.uiEvent >> 2] = e.detail;
            HEAP32[JSEvents.uiEvent + 4 >> 2] = document.body.clientWidth;
            HEAP32[JSEvents.uiEvent + 8 >> 2] = document.body.clientHeight;
            HEAP32[JSEvents.uiEvent + 12 >> 2] = window.innerWidth;
            HEAP32[JSEvents.uiEvent + 16 >> 2] = window.innerHeight;
            HEAP32[JSEvents.uiEvent + 20 >> 2] = window.outerWidth;
            HEAP32[JSEvents.uiEvent + 24 >> 2] = window.outerHeight;
            HEAP32[JSEvents.uiEvent + 28 >> 2] = scrollPos[0];
            HEAP32[JSEvents.uiEvent + 32 >> 2] = scrollPos[1];
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.uiEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    getNodeNameForTarget: (function(target) {
        if (!target) return "";
        if (target == window) return "#window";
        if (target == window.screen) return "#screen";
        return target && target.nodeName ? target.nodeName : ""
    }),
    registerFocusEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
            JSEvents.focusEvent = _malloc(256)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            var nodeName = JSEvents.getNodeNameForTarget(e.target);
            var id = e.target.id ? e.target.id : "";
            stringToUTF8(nodeName, JSEvents.focusEvent + 0, 128);
            stringToUTF8(id, JSEvents.focusEvent + 128, 128);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.focusEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    tick: (function() {
        if (window["performance"] && window["performance"]["now"]) return window["performance"]["now"]();
        else return Date.now()
    }),
    registerDeviceOrientationEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
            JSEvents.deviceOrientationEvent = _malloc(40)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            HEAPF64[JSEvents.deviceOrientationEvent >> 3] = JSEvents.tick();
            HEAPF64[JSEvents.deviceOrientationEvent + 8 >> 3] = e.alpha;
            HEAPF64[JSEvents.deviceOrientationEvent + 16 >> 3] = e.beta;
            HEAPF64[JSEvents.deviceOrientationEvent + 24 >> 3] = e.gamma;
            HEAP32[JSEvents.deviceOrientationEvent + 32 >> 2] = e.absolute;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.deviceOrientationEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    registerDeviceMotionEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
            JSEvents.deviceMotionEvent = _malloc(80)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            HEAPF64[JSEvents.deviceMotionEvent >> 3] = JSEvents.tick();
            HEAPF64[JSEvents.deviceMotionEvent + 8 >> 3] = e.acceleration.x;
            HEAPF64[JSEvents.deviceMotionEvent + 16 >> 3] = e.acceleration.y;
            HEAPF64[JSEvents.deviceMotionEvent + 24 >> 3] = e.acceleration.z;
            HEAPF64[JSEvents.deviceMotionEvent + 32 >> 3] = e.accelerationIncludingGravity.x;
            HEAPF64[JSEvents.deviceMotionEvent + 40 >> 3] = e.accelerationIncludingGravity.y;
            HEAPF64[JSEvents.deviceMotionEvent + 48 >> 3] = e.accelerationIncludingGravity.z;
            HEAPF64[JSEvents.deviceMotionEvent + 56 >> 3] = e.rotationRate.alpha;
            HEAPF64[JSEvents.deviceMotionEvent + 64 >> 3] = e.rotationRate.beta;
            HEAPF64[JSEvents.deviceMotionEvent + 72 >> 3] = e.rotationRate.gamma;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.deviceMotionEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    screenOrientation: (function() {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation
    }),
    fillOrientationChangeEventData: (function(eventStruct, e) {
        var orientations = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait", "portrait", "landscape", "landscape"];
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
            orientation = orientations2.indexOf(orientationString)
        }
        HEAP32[eventStruct >> 2] = 1 << orientation;
        HEAP32[eventStruct + 4 >> 2] = window.orientation
    }),
    registerOrientationChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
            JSEvents.orientationChangeEvent = _malloc(8)
        }
        if (!target) {
            target = window.screen
        } else {
            target = JSEvents.findEventTarget(target)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.orientationChangeEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
            eventTypeString = "mozorientationchange"
        }
        var eventHandler = {
            target: target,
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    fullscreenEnabled: (function() {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled
    }),
    fillFullscreenChangeEventData: (function(eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[eventStruct >> 2] = isFullscreen;
        HEAP32[eventStruct + 4 >> 2] = JSEvents.fullscreenEnabled();
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = reportedElement && reportedElement.id ? reportedElement.id : "";
        stringToUTF8(nodeName, eventStruct + 8, 128);
        stringToUTF8(id, eventStruct + 136, 128);
        HEAP32[eventStruct + 264 >> 2] = reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[eventStruct + 268 >> 2] = reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[eventStruct + 272 >> 2] = screen.width;
        HEAP32[eventStruct + 276 >> 2] = screen.height;
        if (isFullscreen) {
            JSEvents.previousFullscreenElement = fullscreenElement
        }
    }),
    registerFullscreenChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
            JSEvents.fullscreenChangeEvent = _malloc(280)
        }
        if (!target) {
            target = document
        } else {
            target = JSEvents.findEventTarget(target)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.fullscreenChangeEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    resizeCanvasForFullscreen: (function(target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
        if (strategy.scaleMode == 3) {
            __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
            cssWidth = windowedCssWidth;
            cssHeight = windowedCssHeight
        } else if (strategy.scaleMode == 2) {
            if (cssWidth * windowedRttHeight < windowedRttWidth * cssHeight) {
                var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
                __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
                cssHeight = desiredCssHeight
            } else {
                var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
                __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
                cssWidth = desiredCssWidth
            }
        }
        if (!target.style.backgroundColor) target.style.backgroundColor = "black";
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = "black";
        target.style.width = cssWidth + "px";
        target.style.height = cssHeight + "px";
        if (strategy.filteringMode == 1) {
            target.style.imageRendering = "optimizeSpeed";
            target.style.imageRendering = "-moz-crisp-edges";
            target.style.imageRendering = "-o-crisp-edges";
            target.style.imageRendering = "-webkit-optimize-contrast";
            target.style.imageRendering = "optimize-contrast";
            target.style.imageRendering = "crisp-edges";
            target.style.imageRendering = "pixelated"
        }
        var dpiScale = strategy.canvasResolutionScaleMode == 2 ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
            target.width = cssWidth * dpiScale;
            target.height = cssHeight * dpiScale;
            if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height)
        }
        return restoreOldStyle
    }),
    requestFullscreen: (function(target, strategy) {
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
            JSEvents.resizeCanvasForFullscreen(target, strategy)
        }
        if (target.requestFullscreen) {
            target.requestFullscreen()
        } else if (target.msRequestFullscreen) {
            target.msRequestFullscreen()
        } else if (target.mozRequestFullScreen) {
            target.mozRequestFullScreen()
        } else if (target.mozRequestFullscreen) {
            target.mozRequestFullscreen()
        } else if (target.webkitRequestFullscreen) {
            target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT)
        } else {
            if (typeof JSEvents.fullscreenEnabled() === "undefined") {
                return -1
            } else {
                return -3
            }
        }
        if (strategy.canvasResizedCallback) {
            Module["dynCall_iiii"](strategy.canvasResizedCallback, 37, 0, strategy.canvasResizedCallbackUserData)
        }
        return 0
    }),
    fillPointerlockChangeEventData: (function(eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[eventStruct >> 2] = isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = pointerLockElement && pointerLockElement.id ? pointerLockElement.id : "";
        stringToUTF8(nodeName, eventStruct + 4, 128);
        stringToUTF8(id, eventStruct + 132, 128)
    }),
    registerPointerlockChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
            JSEvents.pointerlockChangeEvent = _malloc(260)
        }
        if (!target) {
            target = document
        } else {
            target = JSEvents.findEventTarget(target)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.pointerlockChangeEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    registerPointerlockErrorEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
            target = document
        } else {
            target = JSEvents.findEventTarget(target)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, 0, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    requestPointerLock: (function(target) {
        if (target.requestPointerLock) {
            target.requestPointerLock()
        } else if (target.mozRequestPointerLock) {
            target.mozRequestPointerLock()
        } else if (target.webkitRequestPointerLock) {
            target.webkitRequestPointerLock()
        } else if (target.msRequestPointerLock) {
            target.msRequestPointerLock()
        } else {
            if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
                return -3
            } else {
                return -1
            }
        }
        return 0
    }),
    fillVisibilityChangeEventData: (function(eventStruct, e) {
        var visibilityStates = ["hidden", "visible", "prerender", "unloaded"];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
        HEAP32[eventStruct >> 2] = document.hidden;
        HEAP32[eventStruct + 4 >> 2] = visibilityState
    }),
    registerVisibilityChangeEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
            JSEvents.visibilityChangeEvent = _malloc(8)
        }
        if (!target) {
            target = document
        } else {
            target = JSEvents.findEventTarget(target)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.visibilityChangeEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    registerTouchEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
            JSEvents.touchEvent = _malloc(1684)
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = (function(event) {
            var e = event || window.event;
            var touches = {};
            for (var i = 0; i < e.touches.length; ++i) {
                var touch = e.touches[i];
                touches[touch.identifier] = touch
            }
            for (var i = 0; i < e.changedTouches.length; ++i) {
                var touch = e.changedTouches[i];
                touches[touch.identifier] = touch;
                touch.changed = true
            }
            for (var i = 0; i < e.targetTouches.length; ++i) {
                var touch = e.targetTouches[i];
                touches[touch.identifier].onTarget = true
            }
            var ptr = JSEvents.touchEvent;
            HEAP32[ptr + 4 >> 2] = e.ctrlKey;
            HEAP32[ptr + 8 >> 2] = e.shiftKey;
            HEAP32[ptr + 12 >> 2] = e.altKey;
            HEAP32[ptr + 16 >> 2] = e.metaKey;
            ptr += 20;
            var canvasRect = Module["canvas"] ? Module["canvas"].getBoundingClientRect() : undefined;
            var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
            var numTouches = 0;
            for (var i in touches) {
                var t = touches[i];
                HEAP32[ptr >> 2] = t.identifier;
                HEAP32[ptr + 4 >> 2] = t.screenX;
                HEAP32[ptr + 8 >> 2] = t.screenY;
                HEAP32[ptr + 12 >> 2] = t.clientX;
                HEAP32[ptr + 16 >> 2] = t.clientY;
                HEAP32[ptr + 20 >> 2] = t.pageX;
                HEAP32[ptr + 24 >> 2] = t.pageY;
                HEAP32[ptr + 28 >> 2] = t.changed;
                HEAP32[ptr + 32 >> 2] = t.onTarget;
                if (canvasRect) {
                    HEAP32[ptr + 44 >> 2] = t.clientX - canvasRect.left;
                    HEAP32[ptr + 48 >> 2] = t.clientY - canvasRect.top
                } else {
                    HEAP32[ptr + 44 >> 2] = 0;
                    HEAP32[ptr + 48 >> 2] = 0
                }
                HEAP32[ptr + 36 >> 2] = t.clientX - targetRect.left;
                HEAP32[ptr + 40 >> 2] = t.clientY - targetRect.top;
                ptr += 52;
                if (++numTouches >= 32) {
                    break
                }
            }
            HEAP32[JSEvents.touchEvent >> 2] = numTouches;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.touchEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: target,
            allowsDeferredCalls: eventTypeString == "touchstart" || eventTypeString == "touchend",
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    fillGamepadEventData: (function(eventStruct, e) {
        HEAPF64[eventStruct >> 3] = e.timestamp;
        for (var i = 0; i < e.axes.length; ++i) {
            HEAPF64[eventStruct + i * 8 + 16 >> 3] = e.axes[i]
        }
        for (var i = 0; i < e.buttons.length; ++i) {
            if (typeof e.buttons[i] === "object") {
                HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i].value
            } else {
                HEAPF64[eventStruct + i * 8 + 528 >> 3] = e.buttons[i]
            }
        }
        for (var i = 0; i < e.buttons.length; ++i) {
            if (typeof e.buttons[i] === "object") {
                HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i].pressed
            } else {
                HEAP32[eventStruct + i * 4 + 1040 >> 2] = e.buttons[i] == 1
            }
        }
        HEAP32[eventStruct + 1296 >> 2] = e.connected;
        HEAP32[eventStruct + 1300 >> 2] = e.index;
        HEAP32[eventStruct + 8 >> 2] = e.axes.length;
        HEAP32[eventStruct + 12 >> 2] = e.buttons.length;
        stringToUTF8(e.id, eventStruct + 1304, 64);
        stringToUTF8(e.mapping, eventStruct + 1368, 64)
    }),
    registerGamepadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
            JSEvents.gamepadEvent = _malloc(1432)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.gamepadEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: true,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    registerBeforeUnloadEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = (function(event) {
            var e = event || window.event;
            var confirmationMessage = Module["dynCall_iiii"](callbackfunc, eventTypeId, 0, userData);
            if (confirmationMessage) {
                confirmationMessage = Pointer_stringify(confirmationMessage)
            }
            if (confirmationMessage) {
                e.preventDefault();
                e.returnValue = confirmationMessage;
                return confirmationMessage
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    battery: (function() {
        return navigator.battery || navigator.mozBattery || navigator.webkitBattery
    }),
    fillBatteryEventData: (function(eventStruct, e) {
        HEAPF64[eventStruct >> 3] = e.chargingTime;
        HEAPF64[eventStruct + 8 >> 3] = e.dischargingTime;
        HEAPF64[eventStruct + 16 >> 3] = e.level;
        HEAP32[eventStruct + 24 >> 2] = e.charging
    }),
    registerBatteryEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
            JSEvents.batteryEvent = _malloc(32)
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, JSEvents.batteryEvent, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    }),
    registerWebGlEventCallback: (function(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
            target = Module["canvas"]
        }
        var handlerFunc = (function(event) {
            var e = event || window.event;
            var shouldCancel = Module["dynCall_iiii"](callbackfunc, eventTypeId, 0, userData);
            if (shouldCancel) {
                e.preventDefault()
            }
        });
        var eventHandler = {
            target: JSEvents.findEventTarget(target),
            allowsDeferredCalls: false,
            eventTypeString: eventTypeString,
            callbackfunc: callbackfunc,
            handlerFunc: handlerFunc,
            useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler)
    })
};
var __currentFullscreenStrategy = {};

function _emscripten_exit_fullscreen() {
    if (typeof JSEvents.fullscreenEnabled() === "undefined") return -1;
    JSEvents.removeDeferredCalls(JSEvents.requestFullscreen);
    if (document.exitFullscreen) {
        document.exitFullscreen()
    } else if (document.msExitFullscreen) {
        document.msExitFullscreen()
    } else if (document.mozCancelFullScreen) {
        document.mozCancelFullScreen()
    } else if (document.webkitExitFullscreen) {
        document.webkitExitFullscreen()
    } else {
        return -1
    }
    if (__currentFullscreenStrategy.canvasResizedCallback) {
        Module["dynCall_iiii"](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData)
    }
    return 0
}

function _emscripten_exit_pointerlock() {
    JSEvents.removeDeferredCalls(JSEvents.requestPointerLock);
    if (document.exitPointerLock) {
        document.exitPointerLock()
    } else if (document.msExitPointerLock) {
        document.msExitPointerLock()
    } else if (document.mozExitPointerLock) {
        document.mozExitPointerLock()
    } else if (document.webkitExitPointerLock) {
        document.webkitExitPointerLock()
    } else {
        return -1
    }
    return 0
}

function _emscripten_get_device_pixel_ratio() {
    return window.devicePixelRatio || 1
}

function _emscripten_get_element_css_size(target, width, height) {
    if (!target) {
        target = Module["canvas"]
    } else {
        target = JSEvents.findEventTarget(target)
    }
    if (!target) return -4;
    if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[width >> 3] = rect.right - rect.left;
        HEAPF64[height >> 3] = rect.bottom - rect.top
    } else {
        HEAPF64[width >> 3] = target.clientWidth;
        HEAPF64[height >> 3] = target.clientHeight
    }
    return 0
}

function __emscripten_sample_gamepad_data() {
    if (!JSEvents.numGamepadsConnected) return;
    if (Browser.mainLoop.currentFrameNumber !== JSEvents.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
        JSEvents.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads : null;
        JSEvents.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber
    }
}

function _emscripten_get_gamepad_status(index, gamepadState) {
    __emscripten_sample_gamepad_data();
    if (!JSEvents.lastGamepadState) return -1;
    if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
    if (!JSEvents.lastGamepadState[index]) return -7;
    JSEvents.fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
    return 0
}

function _emscripten_get_num_gamepads() {
    if (!JSEvents.numGamepadsConnected) return 0;
    __emscripten_sample_gamepad_data();
    if (!JSEvents.lastGamepadState) return -1;
    return JSEvents.lastGamepadState.length
}

function _emscripten_get_pointerlock_status(pointerlockStatus) {
    if (pointerlockStatus) JSEvents.fillPointerlockChangeEventData(pointerlockStatus);
    if (!document.body || !document.body.requestPointerLock && !document.body.mozRequestPointerLock && !document.body.webkitRequestPointerLock && !document.body.msRequestPointerLock) {
        return -1
    }
    return 0
}

function _emscripten_get_preloaded_image_data(path, w, h) {
    if (typeof path === "number") {
        path = Pointer_stringify(path)
    }
    path = PATH.resolve(path);
    var canvas = Module["preloadedImages"][path];
    if (canvas) {
        var ctx = canvas.getContext("2d");
        var image = ctx.getImageData(0, 0, canvas.width, canvas.height);
        var buf = _malloc(canvas.width * canvas.height * 4);
        HEAPU8.set(image.data, buf);
        HEAP32[w >> 2] = canvas.width;
        HEAP32[h >> 2] = canvas.height;
        return buf
    }
    return 0
}

function _emscripten_get_preloaded_image_data_from_FILE(file, w, h) {
    var fd = Module["_fileno"](file);
    var stream = FS.getStream(fd);
    if (stream) {
        return _emscripten_get_preloaded_image_data(stream.path, w, h)
    }
    return 0
}

function _emscripten_glActiveTexture(x0) {
    GLctx["activeTexture"](x0)
}

function _emscripten_glAttachShader(program, shader) {
    GLctx.attachShader(GL.programs[program], GL.shaders[shader])
}

function _emscripten_glBindAttribLocation(program, index, name) {
    name = Pointer_stringify(name);
    GLctx.bindAttribLocation(GL.programs[program], index, name)
}

function _emscripten_glBindBuffer(target, buffer) {
    var bufferObj = buffer ? GL.buffers[buffer] : null;
    GLctx.bindBuffer(target, bufferObj)
}

function _emscripten_glBindFramebuffer(target, framebuffer) {
    GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null)
}

function _emscripten_glBindProgramARB() {
    Module["printErr"]("missing function: emscripten_glBindProgramARB");
    abort(-1)
}

function _emscripten_glBindRenderbuffer(target, renderbuffer) {
    GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null)
}

function _emscripten_glBindTexture(target, texture) {
    GLctx.bindTexture(target, texture ? GL.textures[texture] : null)
}

function _emscripten_glBindVertexArray(vao) {
    GLctx["bindVertexArray"](GL.vaos[vao])
}

function _emscripten_glBlendColor(x0, x1, x2, x3) {
    GLctx["blendColor"](x0, x1, x2, x3)
}

function _emscripten_glBlendEquation(x0) {
    GLctx["blendEquation"](x0)
}

function _emscripten_glBlendEquationSeparate(x0, x1) {
    GLctx["blendEquationSeparate"](x0, x1)
}

function _emscripten_glBlendFunc(x0, x1) {
    GLctx["blendFunc"](x0, x1)
}

function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) {
    GLctx["blendFuncSeparate"](x0, x1, x2, x3)
}

function _emscripten_glBufferData(target, size, data, usage) {
    if (!data) {
        GLctx.bufferData(target, size, usage)
    } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data + size), usage)
    }
}

function _emscripten_glBufferSubData(target, offset, size, data) {
    GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data + size))
}

function _emscripten_glCheckFramebufferStatus(x0) {
    return GLctx["checkFramebufferStatus"](x0)
}

function _emscripten_glClear(x0) {
    GLctx["clear"](x0)
}

function _emscripten_glClearColor(x0, x1, x2, x3) {
    GLctx["clearColor"](x0, x1, x2, x3)
}

function _emscripten_glClearDepth(x0) {
    GLctx["clearDepth"](x0)
}

function _emscripten_glClearDepthf(x0) {
    GLctx["clearDepth"](x0)
}

function _emscripten_glClearStencil(x0) {
    GLctx["clearStencil"](x0)
}

function _emscripten_glClientActiveTexture() {
    Module["printErr"]("missing function: emscripten_glClientActiveTexture");
    abort(-1)
}

function _emscripten_glColorMask(red, green, blue, alpha) {
    GLctx.colorMask(!!red, !!green, !!blue, !!alpha)
}

function _emscripten_glColorPointer() {
    Module["printErr"]("missing function: emscripten_glColorPointer");
    abort(-1)
}

function _emscripten_glCompileShader(shader) {
    GLctx.compileShader(GL.shaders[shader])
}

function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
    GLctx["compressedTexImage2D"](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray(data, data + imageSize) : null)
}

function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
    GLctx["compressedTexSubImage2D"](target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray(data, data + imageSize) : null)
}

function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
    GLctx["copyTexImage2D"](x0, x1, x2, x3, x4, x5, x6, x7)
}

function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) {
    GLctx["copyTexSubImage2D"](x0, x1, x2, x3, x4, x5, x6, x7)
}

function _emscripten_glCreateProgram() {
    var id = GL.getNewId(GL.programs);
    var program = GLctx.createProgram();
    program.name = id;
    GL.programs[id] = program;
    return id
}

function _emscripten_glCreateShader(shaderType) {
    var id = GL.getNewId(GL.shaders);
    GL.shaders[id] = GLctx.createShader(shaderType);
    return id
}

function _emscripten_glCullFace(x0) {
    GLctx["cullFace"](x0)
}

function _emscripten_glDeleteBuffers(n, buffers) {
    for (var i = 0; i < n; i++) {
        var id = HEAP32[buffers + i * 4 >> 2];
        var buffer = GL.buffers[id];
        if (!buffer) continue;
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0
    }
}

function _emscripten_glDeleteFramebuffers(n, framebuffers) {
    for (var i = 0; i < n; ++i) {
        var id = HEAP32[framebuffers + i * 4 >> 2];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue;
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null
    }
}

function _emscripten_glDeleteObjectARB() {
    Module["printErr"]("missing function: emscripten_glDeleteObjectARB");
    abort(-1)
}

function _emscripten_glDeleteProgram(id) {
    if (!id) return;
    var program = GL.programs[id];
    if (!program) {
        GL.recordError(1281);
        return
    }
    GLctx.deleteProgram(program);
    program.name = 0;
    GL.programs[id] = null;
    GL.programInfos[id] = null
}

function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
    for (var i = 0; i < n; i++) {
        var id = HEAP32[renderbuffers + i * 4 >> 2];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue;
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null
    }
}

function _emscripten_glDeleteShader(id) {
    if (!id) return;
    var shader = GL.shaders[id];
    if (!shader) {
        GL.recordError(1281);
        return
    }
    GLctx.deleteShader(shader);
    GL.shaders[id] = null
}

function _emscripten_glDeleteTextures(n, textures) {
    for (var i = 0; i < n; i++) {
        var id = HEAP32[textures + i * 4 >> 2];
        var texture = GL.textures[id];
        if (!texture) continue;
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null
    }
}

function _emscripten_glDeleteVertexArrays(n, vaos) {
    for (var i = 0; i < n; i++) {
        var id = HEAP32[vaos + i * 4 >> 2];
        GLctx["deleteVertexArray"](GL.vaos[id]);
        GL.vaos[id] = null
    }
}

function _emscripten_glDepthFunc(x0) {
    GLctx["depthFunc"](x0)
}

function _emscripten_glDepthMask(flag) {
    GLctx.depthMask(!!flag)
}

function _emscripten_glDepthRange(x0, x1) {
    GLctx["depthRange"](x0, x1)
}

function _emscripten_glDepthRangef(x0, x1) {
    GLctx["depthRange"](x0, x1)
}

function _emscripten_glDetachShader(program, shader) {
    GLctx.detachShader(GL.programs[program], GL.shaders[shader])
}

function _emscripten_glDisable(x0) {
    GLctx["disable"](x0)
}

function _emscripten_glDisableVertexAttribArray(index) {
    GLctx.disableVertexAttribArray(index)
}

function _emscripten_glDrawArrays(mode, first, count) {
    GLctx.drawArrays(mode, first, count)
}

function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
    GLctx["drawArraysInstanced"](mode, first, count, primcount)
}

function _emscripten_glDrawBuffers(n, bufs) {
    var bufArray = GL.tempFixedLengthArray[n];
    for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[bufs + i * 4 >> 2]
    }
    GLctx["drawBuffers"](bufArray)
}

function _emscripten_glDrawElements(mode, count, type, indices) {
    GLctx.drawElements(mode, count, type, indices)
}

function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
    GLctx["drawElementsInstanced"](mode, count, type, indices, primcount)
}

function _emscripten_glDrawRangeElements() {
    Module["printErr"]("missing function: emscripten_glDrawRangeElements");
    abort(-1)
}

function _emscripten_glEnable(x0) {
    GLctx["enable"](x0)
}

function _emscripten_glEnableClientState() {
    Module["printErr"]("missing function: emscripten_glEnableClientState");
    abort(-1)
}

function _emscripten_glEnableVertexAttribArray(index) {
    GLctx.enableVertexAttribArray(index)
}

function _emscripten_glFinish() {
    GLctx["finish"]()
}

function _emscripten_glFlush() {
    GLctx["flush"]()
}

function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
    GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget, GL.renderbuffers[renderbuffer])
}

function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
    GLctx.framebufferTexture2D(target, attachment, textarget, GL.textures[texture], level)
}

function _emscripten_glFrontFace(x0) {
    GLctx["frontFace"](x0)
}

function _emscripten_glFrustum() {
    Module["printErr"]("missing function: emscripten_glFrustum");
    abort(-1)
}

function _emscripten_glGenBuffers(n, buffers) {
    for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
            GL.recordError(1282);
            while (i < n) HEAP32[buffers + i++ * 4 >> 2] = 0;
            return
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[buffers + i * 4 >> 2] = id
    }
}

function _emscripten_glGenFramebuffers(n, ids) {
    for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
            GL.recordError(1282);
            while (i < n) HEAP32[ids + i++ * 4 >> 2] = 0;
            return
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[ids + i * 4 >> 2] = id
    }
}

function _emscripten_glGenRenderbuffers(n, renderbuffers) {
    for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
            GL.recordError(1282);
            while (i < n) HEAP32[renderbuffers + i++ * 4 >> 2] = 0;
            return
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[renderbuffers + i * 4 >> 2] = id
    }
}

function _emscripten_glGenTextures(n, textures) {
    for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
            GL.recordError(1282);
            while (i < n) HEAP32[textures + i++ * 4 >> 2] = 0;
            return
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[textures + i * 4 >> 2] = id
    }
}

function _emscripten_glGenVertexArrays(n, arrays) {
    for (var i = 0; i < n; i++) {
        var vao = GLctx["createVertexArray"]();
        if (!vao) {
            GL.recordError(1282);
            while (i < n) HEAP32[arrays + i++ * 4 >> 2] = 0;
            return
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[arrays + i * 4 >> 2] = id
    }
}

function _emscripten_glGenerateMipmap(x0) {
    GLctx["generateMipmap"](x0)
}

function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
    program = GL.programs[program];
    var info = GLctx.getActiveAttrib(program, index);
    if (!info) return;
    if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[length >> 2] = numBytesWrittenExclNull
    } else {
        if (length) HEAP32[length >> 2] = 0
    }
    if (size) HEAP32[size >> 2] = info.size;
    if (type) HEAP32[type >> 2] = info.type
}

function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
    program = GL.programs[program];
    var info = GLctx.getActiveUniform(program, index);
    if (!info) return;
    if (bufSize > 0 && name) {
        var numBytesWrittenExclNull = stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[length >> 2] = numBytesWrittenExclNull
    } else {
        if (length) HEAP32[length >> 2] = 0
    }
    if (size) HEAP32[size >> 2] = info.size;
    if (type) HEAP32[type >> 2] = info.type
}

function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
    var result = GLctx.getAttachedShaders(GL.programs[program]);
    var len = result.length;
    if (len > maxCount) {
        len = maxCount
    }
    HEAP32[count >> 2] = len;
    for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        assert(id !== -1, "shader not bound to local id");
        HEAP32[shaders + i * 4 >> 2] = id
    }
}

function _emscripten_glGetAttribLocation(program, name) {
    program = GL.programs[program];
    name = Pointer_stringify(name);
    return GLctx.getAttribLocation(program, name)
}

function emscriptenWebGLGet(name_, p, type) {
    if (!p) {
        GL.recordError(1281);
        return
    }
    var ret = undefined;
    switch (name_) {
        case 36346:
            ret = 1;
            break;
        case 36344:
            if (type !== "Integer" && type !== "Integer64") {
                GL.recordError(1280)
            }
            return;
        case 36345:
            ret = 0;
            break;
        case 34466:
            var formats = GLctx.getParameter(34467);
            ret = formats.length;
            break
    }
    if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof result) {
            case "number":
                ret = result;
                break;
            case "boolean":
                ret = result ? 1 : 0;
                break;
            case "string":
                GL.recordError(1280);
                return;
            case "object":
                if (result === null) {
                    switch (name_) {
                        case 34964:
                        case 35725:
                        case 34965:
                        case 36006:
                        case 36007:
                        case 32873:
                        case 34068:
                            {
                                ret = 0;
                                break
                            };
                        default:
                            {
                                GL.recordError(1280);
                                return
                            }
                    }
                } else if (result instanceof Float32Array || result instanceof Uint32Array || result instanceof Int32Array || result instanceof Array) {
                    for (var i = 0; i < result.length; ++i) {
                        switch (type) {
                            case "Integer":
                                HEAP32[p + i * 4 >> 2] = result[i];
                                break;
                            case "Float":
                                HEAPF32[p + i * 4 >> 2] = result[i];
                                break;
                            case "Boolean":
                                HEAP8[p + i >> 0] = result[i] ? 1 : 0;
                                break;
                            default:
                                throw "internal glGet error, bad type: " + type
                        }
                    }
                    return
                } else if (result instanceof WebGLBuffer || result instanceof WebGLProgram || result instanceof WebGLFramebuffer || result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
                    ret = result.name | 0
                } else {
                    GL.recordError(1280);
                    return
                }
                break;
            default:
                GL.recordError(1280);
                return
        }
    }
    switch (type) {
        case "Integer64":
            tempI64 = [ret >>> 0, (tempDouble = ret, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[p >> 2] = tempI64[0], HEAP32[p + 4 >> 2] = tempI64[1];
            break;
        case "Integer":
            HEAP32[p >> 2] = ret;
            break;
        case "Float":
            HEAPF32[p >> 2] = ret;
            break;
        case "Boolean":
            HEAP8[p >> 0] = ret ? 1 : 0;
            break;
        default:
            throw "internal glGet error, bad type: " + type
    }
}

function _emscripten_glGetBooleanv(name_, p) {
    emscriptenWebGLGet(name_, p, "Boolean")
}

function _emscripten_glGetBufferParameteriv(target, value, data) {
    if (!data) {
        GL.recordError(1281);
        return
    }
    HEAP32[data >> 2] = GLctx.getBufferParameter(target, value)
}

function _emscripten_glGetError() {
    if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0;
        return error
    } else {
        return GLctx.getError()
    }
}

function _emscripten_glGetFloatv(name_, p) {
    emscriptenWebGLGet(name_, p, "Float")
}

function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
    var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
    if (result instanceof WebGLRenderbuffer || result instanceof WebGLTexture) {
        result = result.name | 0
    }
    HEAP32[params >> 2] = result
}

function _emscripten_glGetInfoLogARB() {
    Module["printErr"]("missing function: emscripten_glGetInfoLogARB");
    abort(-1)
}

function _emscripten_glGetIntegerv(name_, p) {
    emscriptenWebGLGet(name_, p, "Integer")
}

function _emscripten_glGetObjectParameterivARB() {
    Module["printErr"]("missing function: emscripten_glGetObjectParameterivARB");
    abort(-1)
}

function _emscripten_glGetPointerv() {
    Module["printErr"]("missing function: emscripten_glGetPointerv");
    abort(-1)
}

function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
    var log = GLctx.getProgramInfoLog(GL.programs[program]);
    if (log === null) log = "(unknown error)";
    if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[length >> 2] = numBytesWrittenExclNull
    } else {
        if (length) HEAP32[length >> 2] = 0
    }
}

function _emscripten_glGetProgramiv(program, pname, p) {
    if (!p) {
        GL.recordError(1281);
        return
    }
    if (program >= GL.counter) {
        GL.recordError(1281);
        return
    }
    var ptable = GL.programInfos[program];
    if (!ptable) {
        GL.recordError(1282);
        return
    }
    if (pname == 35716) {
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1
    } else if (pname == 35719) {
        HEAP32[p >> 2] = ptable.maxUniformLength
    } else if (pname == 35722) {
        if (ptable.maxAttributeLength == -1) {
            program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0;
            for (var i = 0; i < numAttribs; ++i) {
                var activeAttrib = GLctx.getActiveAttrib(program, i);
                ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length + 1)
            }
        }
        HEAP32[p >> 2] = ptable.maxAttributeLength
    } else if (pname == 35381) {
        if (ptable.maxUniformBlockNameLength == -1) {
            program = GL.programs[program];
            var numBlocks = GLctx.getProgramParameter(program, GLctx.ACTIVE_UNIFORM_BLOCKS);
            ptable.maxUniformBlockNameLength = 0;
            for (var i = 0; i < numBlocks; ++i) {
                var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
                ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length + 1)
            }
        }
        HEAP32[p >> 2] = ptable.maxUniformBlockNameLength
    } else {
        HEAP32[p >> 2] = GLctx.getProgramParameter(GL.programs[program], pname)
    }
}

function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
    if (!params) {
        GL.recordError(1281);
        return
    }
    HEAP32[params >> 2] = GLctx.getRenderbufferParameter(target, pname)
}

function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
    var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
    if (log === null) log = "(unknown error)";
    if (maxLength > 0 && infoLog) {
        var numBytesWrittenExclNull = stringToUTF8(log, infoLog, maxLength);
        if (length) HEAP32[length >> 2] = numBytesWrittenExclNull
    } else {
        if (length) HEAP32[length >> 2] = 0
    }
}

function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
    var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
    HEAP32[range >> 2] = result.rangeMin;
    HEAP32[range + 4 >> 2] = result.rangeMax;
    HEAP32[precision >> 2] = result.precision
}

function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
    var result = GLctx.getShaderSource(GL.shaders[shader]);
    if (!result) return;
    if (bufSize > 0 && source) {
        var numBytesWrittenExclNull = stringToUTF8(result, source, bufSize);
        if (length) HEAP32[length >> 2] = numBytesWrittenExclNull
    } else {
        if (length) HEAP32[length >> 2] = 0
    }
}

function _emscripten_glGetShaderiv(shader, pname, p) {
    if (!p) {
        GL.recordError(1281);
        return
    }
    if (pname == 35716) {
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = "(unknown error)";
        HEAP32[p >> 2] = log.length + 1
    } else if (pname == 35720) {
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = source === null || source.length == 0 ? 0 : source.length + 1;
        HEAP32[p >> 2] = sourceLength
    } else {
        HEAP32[p >> 2] = GLctx.getShaderParameter(GL.shaders[shader], pname)
    }
}

function _emscripten_glGetString(name_) {
    if (GL.stringCache[name_]) return GL.stringCache[name_];
    var ret;
    switch (name_) {
        case 7936:
        case 7937:
        case 37445:
        case 37446:
            ret = allocate(intArrayFromString(GLctx.getParameter(name_)), "i8", ALLOC_NORMAL);
            break;
        case 7938:
            var glVersion = GLctx.getParameter(GLctx.VERSION); {
                glVersion = "OpenGL ES 2.0 (" + glVersion + ")"
            }
            ret = allocate(intArrayFromString(glVersion), "i8", ALLOC_NORMAL);
            break;
        case 7939:
            var exts = GLctx.getSupportedExtensions();
            var gl_exts = [];
            for (var i = 0; i < exts.length; ++i) {
                gl_exts.push(exts[i]);
                gl_exts.push("GL_" + exts[i])
            }
            ret = allocate(intArrayFromString(gl_exts.join(" ")), "i8", ALLOC_NORMAL);
            break;
        case 35724:
            var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
            var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
            var ver_num = glslVersion.match(ver_re);
            if (ver_num !== null) {
                if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + "0";
                glslVersion = "OpenGL ES GLSL ES " + ver_num[1] + " (" + glslVersion + ")"
            }
            ret = allocate(intArrayFromString(glslVersion), "i8", ALLOC_NORMAL);
            break;
        default:
            GL.recordError(1280);
            return 0
    }
    GL.stringCache[name_] = ret;
    return ret
}

function _emscripten_glGetTexParameterfv(target, pname, params) {
    if (!params) {
        GL.recordError(1281);
        return
    }
    HEAPF32[params >> 2] = GLctx.getTexParameter(target, pname)
}

function _emscripten_glGetTexParameteriv(target, pname, params) {
    if (!params) {
        GL.recordError(1281);
        return
    }
    HEAP32[params >> 2] = GLctx.getTexParameter(target, pname)
}

function _emscripten_glGetUniformLocation(program, name) {
    name = Pointer_stringify(name);
    var arrayOffset = 0;
    if (name.indexOf("]", name.length - 1) !== -1) {
        var ls = name.lastIndexOf("[");
        var arrayIndex = name.slice(ls + 1, -1);
        if (arrayIndex.length > 0) {
            arrayOffset = parseInt(arrayIndex);
            if (arrayOffset < 0) {
                return -1
            }
        }
        name = name.slice(0, ls)
    }
    var ptable = GL.programInfos[program];
    if (!ptable) {
        return -1
    }
    var utable = ptable.uniforms;
    var uniformInfo = utable[name];
    if (uniformInfo && arrayOffset < uniformInfo[0]) {
        return uniformInfo[1] + arrayOffset
    } else {
        return -1
    }
}

function emscriptenWebGLGetUniform(program, location, params, type) {
    if (!params) {
        GL.recordError(1281);
        return
    }
    var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
    if (typeof data == "number" || typeof data == "boolean") {
        switch (type) {
            case "Integer":
                HEAP32[params >> 2] = data;
                break;
            case "Float":
                HEAPF32[params >> 2] = data;
                break;
            default:
                throw "internal emscriptenWebGLGetUniform() error, bad type: " + type
        }
    } else {
        for (var i = 0; i < data.length; i++) {
            switch (type) {
                case "Integer":
                    HEAP32[params + i * 4 >> 2] = data[i];
                    break;
                case "Float":
                    HEAPF32[params + i * 4 >> 2] = data[i];
                    break;
                default:
                    throw "internal emscriptenWebGLGetUniform() error, bad type: " + type
            }
        }
    }
}

function _emscripten_glGetUniformfv(program, location, params) {
    emscriptenWebGLGetUniform(program, location, params, "Float")
}

function _emscripten_glGetUniformiv(program, location, params) {
    emscriptenWebGLGetUniform(program, location, params, "Integer")
}

function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
    if (!pointer) {
        GL.recordError(1281);
        return
    }
    HEAP32[pointer >> 2] = GLctx.getVertexAttribOffset(index, pname)
}

function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
    if (!params) {
        GL.recordError(1281);
        return
    }
    var data = GLctx.getVertexAttrib(index, pname);
    if (pname == 34975) {
        HEAP32[params >> 2] = data["name"]
    } else if (typeof data == "number" || typeof data == "boolean") {
        switch (type) {
            case "Integer":
                HEAP32[params >> 2] = data;
                break;
            case "Float":
                HEAPF32[params >> 2] = data;
                break;
            case "FloatToInteger":
                HEAP32[params >> 2] = Math.fround(data);
                break;
            default:
                throw "internal emscriptenWebGLGetVertexAttrib() error, bad type: " + type
        }
    } else {
        for (var i = 0; i < data.length; i++) {
            switch (type) {
                case "Integer":
                    HEAP32[params + i * 4 >> 2] = data[i];
                    break;
                case "Float":
                    HEAPF32[params + i * 4 >> 2] = data[i];
                    break;
                case "FloatToInteger":
                    HEAP32[params + i * 4 >> 2] = Math.fround(data[i]);
                    break;
                default:
                    throw "internal emscriptenWebGLGetVertexAttrib() error, bad type: " + type
            }
        }
    }
}

function _emscripten_glGetVertexAttribfv(index, pname, params) {
    emscriptenWebGLGetVertexAttrib(index, pname, params, "Float")
}

function _emscripten_glGetVertexAttribiv(index, pname, params) {
    emscriptenWebGLGetVertexAttrib(index, pname, params, "FloatToInteger")
}

function _emscripten_glHint(x0, x1) {
    GLctx["hint"](x0, x1)
}

function _emscripten_glIsBuffer(buffer) {
    var b = GL.buffers[buffer];
    if (!b) return 0;
    return GLctx.isBuffer(b)
}

function _emscripten_glIsEnabled(x0) {
    return GLctx["isEnabled"](x0)
}

function _emscripten_glIsFramebuffer(framebuffer) {
    var fb = GL.framebuffers[framebuffer];
    if (!fb) return 0;
    return GLctx.isFramebuffer(fb)
}

function _emscripten_glIsProgram(program) {
    program = GL.programs[program];
    if (!program) return 0;
    return GLctx.isProgram(program)
}

function _emscripten_glIsRenderbuffer(renderbuffer) {
    var rb = GL.renderbuffers[renderbuffer];
    if (!rb) return 0;
    return GLctx.isRenderbuffer(rb)
}

function _emscripten_glIsShader(shader) {
    var s = GL.shaders[shader];
    if (!s) return 0;
    return GLctx.isShader(s)
}

function _emscripten_glIsTexture(texture) {
    var texture = GL.textures[texture];
    if (!texture) return 0;
    return GLctx.isTexture(texture)
}

function _emscripten_glIsVertexArray(array) {
    var vao = GL.vaos[array];
    if (!vao) return 0;
    return GLctx["isVertexArray"](vao)
}

function _emscripten_glLineWidth(x0) {
    GLctx["lineWidth"](x0)
}

function _emscripten_glLinkProgram(program) {
    GLctx.linkProgram(GL.programs[program]);
    GL.programInfos[program] = null;
    GL.populateUniformTable(program)
}

function _emscripten_glLoadIdentity() {
    throw "Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation."
}

function _emscripten_glLoadMatrixf() {
    Module["printErr"]("missing function: emscripten_glLoadMatrixf");
    abort(-1)
}

function _emscripten_glMatrixMode() {
    throw "Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation."
}

function _emscripten_glNormalPointer() {
    Module["printErr"]("missing function: emscripten_glNormalPointer");
    abort(-1)
}

function _emscripten_glPixelStorei(pname, param) {
    if (pname == 3333) {
        GL.packAlignment = param
    } else if (pname == 3317) {
        GL.unpackAlignment = param
    }
    GLctx.pixelStorei(pname, param)
}

function _emscripten_glPolygonOffset(x0, x1) {
    GLctx["polygonOffset"](x0, x1)
}

function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
    function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
    }
    var plainRowSize = width * sizePerPixel;
    var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
    return height <= 0 ? 0 : (height - 1) * alignedRowSize + plainRowSize
}

function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
    var sizePerPixel;
    var numChannels;
    switch (format) {
        case 6406:
        case 6409:
        case 6402:
            numChannels = 1;
            break;
        case 6410:
            numChannels = 2;
            break;
        case 6407:
        case 35904:
            numChannels = 3;
            break;
        case 6408:
        case 35906:
            numChannels = 4;
            break;
        default:
            GL.recordError(1280);
            return null
    }
    switch (type) {
        case 5121:
            sizePerPixel = numChannels * 1;
            break;
        case 5123:
        case 36193:
            sizePerPixel = numChannels * 2;
            break;
        case 5125:
        case 5126:
            sizePerPixel = numChannels * 4;
            break;
        case 34042:
            sizePerPixel = 4;
            break;
        case 33635:
        case 32819:
        case 32820:
            sizePerPixel = 2;
            break;
        default:
            GL.recordError(1280);
            return null
    }
    var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
    switch (type) {
        case 5121:
            return HEAPU8.subarray(pixels, pixels + bytes);
        case 5126:
            return HEAPF32.subarray(pixels >> 2, pixels + bytes >> 2);
        case 5125:
        case 34042:
            return HEAPU32.subarray(pixels >> 2, pixels + bytes >> 2);
        case 5123:
        case 33635:
        case 32819:
        case 32820:
        case 36193:
            return HEAPU16.subarray(pixels >> 1, pixels + bytes >> 1);
        default:
            GL.recordError(1280);
            return null
    }
}

function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
    var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
    if (!pixelData) {
        GL.recordError(1280);
        return
    }
    GLctx.readPixels(x, y, width, height, format, type, pixelData)
}

function _emscripten_glReleaseShaderCompiler() {}

function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) {
    GLctx["renderbufferStorage"](x0, x1, x2, x3)
}

function _emscripten_glRotatef() {
    Module["printErr"]("missing function: emscripten_glRotatef");
    abort(-1)
}

function _emscripten_glSampleCoverage(value, invert) {
    GLctx.sampleCoverage(value, !!invert)
}

function _emscripten_glScissor(x0, x1, x2, x3) {
    GLctx["scissor"](x0, x1, x2, x3)
}

function _emscripten_glShaderBinary() {
    GL.recordError(1280)
}

function _emscripten_glShaderSource(shader, count, string, length) {
    var source = GL.getSource(shader, count, string, length);
    GLctx.shaderSource(GL.shaders[shader], source)
}

function _emscripten_glStencilFunc(x0, x1, x2) {
    GLctx["stencilFunc"](x0, x1, x2)
}

function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) {
    GLctx["stencilFuncSeparate"](x0, x1, x2, x3)
}

function _emscripten_glStencilMask(x0) {
    GLctx["stencilMask"](x0)
}

function _emscripten_glStencilMaskSeparate(x0, x1) {
    GLctx["stencilMaskSeparate"](x0, x1)
}

function _emscripten_glStencilOp(x0, x1, x2) {
    GLctx["stencilOp"](x0, x1, x2)
}

function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) {
    GLctx["stencilOpSeparate"](x0, x1, x2, x3)
}

function _emscripten_glTexCoordPointer() {
    Module["printErr"]("missing function: emscripten_glTexCoordPointer");
    abort(-1)
}

function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
    var pixelData = null;
    if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
    GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData)
}

function _emscripten_glTexParameterf(x0, x1, x2) {
    GLctx["texParameterf"](x0, x1, x2)
}

function _emscripten_glTexParameterfv(target, pname, params) {
    var param = HEAPF32[params >> 2];
    GLctx.texParameterf(target, pname, param)
}

function _emscripten_glTexParameteri(x0, x1, x2) {
    GLctx["texParameteri"](x0, x1, x2)
}

function _emscripten_glTexParameteriv(target, pname, params) {
    var param = HEAP32[params >> 2];
    GLctx.texParameteri(target, pname, param)
}

function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
    var pixelData = null;
    if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
    GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData)
}

function _emscripten_glUniform1f(location, v0) {
    GLctx.uniform1f(GL.uniforms[location], v0)
}

function _emscripten_glUniform1fv(location, count, value) {
    var view;
    if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[count - 1];
        for (var i = 0; i < count; ++i) {
            view[i] = HEAPF32[value + 4 * i >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 4 >> 2)
    }
    GLctx.uniform1fv(GL.uniforms[location], view)
}

function _emscripten_glUniform1i(location, v0) {
    GLctx.uniform1i(GL.uniforms[location], v0)
}

function _emscripten_glUniform1iv(location, count, value) {
    GLctx.uniform1iv(GL.uniforms[location], HEAP32.subarray(value >> 2, value + count * 4 >> 2))
}

function _emscripten_glUniform2f(location, v0, v1) {
    GLctx.uniform2f(GL.uniforms[location], v0, v1)
}

function _emscripten_glUniform2fv(location, count, value) {
    var view;
    if (2 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[2 * count - 1];
        for (var i = 0; i < 2 * count; i += 2) {
            view[i] = HEAPF32[value + 4 * i >> 2];
            view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 8 >> 2)
    }
    GLctx.uniform2fv(GL.uniforms[location], view)
}

function _emscripten_glUniform2i(location, v0, v1) {
    GLctx.uniform2i(GL.uniforms[location], v0, v1)
}

function _emscripten_glUniform2iv(location, count, value) {
    GLctx.uniform2iv(GL.uniforms[location], HEAP32.subarray(value >> 2, value + count * 8 >> 2))
}

function _emscripten_glUniform3f(location, v0, v1, v2) {
    GLctx.uniform3f(GL.uniforms[location], v0, v1, v2)
}

function _emscripten_glUniform3fv(location, count, value) {
    var view;
    if (3 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[3 * count - 1];
        for (var i = 0; i < 3 * count; i += 3) {
            view[i] = HEAPF32[value + 4 * i >> 2];
            view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
            view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 12 >> 2)
    }
    GLctx.uniform3fv(GL.uniforms[location], view)
}

function _emscripten_glUniform3i(location, v0, v1, v2) {
    GLctx.uniform3i(GL.uniforms[location], v0, v1, v2)
}

function _emscripten_glUniform3iv(location, count, value) {
    GLctx.uniform3iv(GL.uniforms[location], HEAP32.subarray(value >> 2, value + count * 12 >> 2))
}

function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
    GLctx.uniform4f(GL.uniforms[location], v0, v1, v2, v3)
}

function _emscripten_glUniform4fv(location, count, value) {
    var view;
    if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[4 * count - 1];
        for (var i = 0; i < 4 * count; i += 4) {
            view[i] = HEAPF32[value + 4 * i >> 2];
            view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
            view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
            view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2)
    }
    GLctx.uniform4fv(GL.uniforms[location], view)
}

function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
    GLctx.uniform4i(GL.uniforms[location], v0, v1, v2, v3)
}

function _emscripten_glUniform4iv(location, count, value) {
    GLctx.uniform4iv(GL.uniforms[location], HEAP32.subarray(value >> 2, value + count * 16 >> 2))
}

function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
    var view;
    if (4 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[4 * count - 1];
        for (var i = 0; i < 4 * count; i += 4) {
            view[i] = HEAPF32[value + 4 * i >> 2];
            view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
            view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
            view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 16 >> 2)
    }
    GLctx.uniformMatrix2fv(GL.uniforms[location], !!transpose, view)
}

function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
    var view;
    if (9 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[9 * count - 1];
        for (var i = 0; i < 9 * count; i += 9) {
            view[i] = HEAPF32[value + 4 * i >> 2];
            view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
            view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
            view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
            view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
            view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
            view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
            view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
            view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 36 >> 2)
    }
    GLctx.uniformMatrix3fv(GL.uniforms[location], !!transpose, view)
}

function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
    var view;
    if (16 * count <= GL.MINI_TEMP_BUFFER_SIZE) {
        view = GL.miniTempBufferViews[16 * count - 1];
        for (var i = 0; i < 16 * count; i += 16) {
            view[i] = HEAPF32[value + 4 * i >> 2];
            view[i + 1] = HEAPF32[value + (4 * i + 4) >> 2];
            view[i + 2] = HEAPF32[value + (4 * i + 8) >> 2];
            view[i + 3] = HEAPF32[value + (4 * i + 12) >> 2];
            view[i + 4] = HEAPF32[value + (4 * i + 16) >> 2];
            view[i + 5] = HEAPF32[value + (4 * i + 20) >> 2];
            view[i + 6] = HEAPF32[value + (4 * i + 24) >> 2];
            view[i + 7] = HEAPF32[value + (4 * i + 28) >> 2];
            view[i + 8] = HEAPF32[value + (4 * i + 32) >> 2];
            view[i + 9] = HEAPF32[value + (4 * i + 36) >> 2];
            view[i + 10] = HEAPF32[value + (4 * i + 40) >> 2];
            view[i + 11] = HEAPF32[value + (4 * i + 44) >> 2];
            view[i + 12] = HEAPF32[value + (4 * i + 48) >> 2];
            view[i + 13] = HEAPF32[value + (4 * i + 52) >> 2];
            view[i + 14] = HEAPF32[value + (4 * i + 56) >> 2];
            view[i + 15] = HEAPF32[value + (4 * i + 60) >> 2]
        }
    } else {
        view = HEAPF32.subarray(value >> 2, value + count * 64 >> 2)
    }
    GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view)
}

function _emscripten_glUseProgram(program) {
    GLctx.useProgram(program ? GL.programs[program] : null)
}

function _emscripten_glValidateProgram(program) {
    GLctx.validateProgram(GL.programs[program])
}

function _emscripten_glVertexAttrib1f(x0, x1) {
    GLctx["vertexAttrib1f"](x0, x1)
}

function _emscripten_glVertexAttrib1fv(index, v) {
    GLctx.vertexAttrib1f(index, HEAPF32[v >> 2])
}

function _emscripten_glVertexAttrib2f(x0, x1, x2) {
    GLctx["vertexAttrib2f"](x0, x1, x2)
}

function _emscripten_glVertexAttrib2fv(index, v) {
    GLctx.vertexAttrib2f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2])
}

function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) {
    GLctx["vertexAttrib3f"](x0, x1, x2, x3)
}

function _emscripten_glVertexAttrib3fv(index, v) {
    GLctx.vertexAttrib3f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2])
}

function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) {
    GLctx["vertexAttrib4f"](x0, x1, x2, x3, x4)
}

function _emscripten_glVertexAttrib4fv(index, v) {
    GLctx.vertexAttrib4f(index, HEAPF32[v >> 2], HEAPF32[v + 4 >> 2], HEAPF32[v + 8 >> 2], HEAPF32[v + 12 >> 2])
}

function _emscripten_glVertexAttribDivisor(index, divisor) {
    GLctx["vertexAttribDivisor"](index, divisor)
}

function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
    GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr)
}

function _emscripten_glVertexPointer() {
    throw "Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation."
}

function _emscripten_glViewport(x0, x1, x2, x3) {
    GLctx["viewport"](x0, x1, x2, x3)
}

function _longjmp(env, value) {
    Module["setThrew"](env, value || 1);
    throw "longjmp"
}

function _emscripten_longjmp(env, value) {
    _longjmp(env, value)
}

function __setLetterbox(element, topBottom, leftRight) {
    if (JSEvents.isInternetExplorer()) {
        element.style.marginLeft = element.style.marginRight = leftRight + "px";
        element.style.marginTop = element.style.marginBottom = topBottom + "px"
    } else {
        element.style.paddingLeft = element.style.paddingRight = leftRight + "px";
        element.style.paddingTop = element.style.paddingBottom = topBottom + "px"
    }
}

function _emscripten_do_request_fullscreen(target, strategy) {
    if (typeof JSEvents.fullscreenEnabled() === "undefined") return -1;
    if (!JSEvents.fullscreenEnabled()) return -3;
    if (!target) target = "#canvas";
    target = JSEvents.findEventTarget(target);
    if (!target) return -4;
    if (!target.requestFullscreen && !target.msRequestFullscreen && !target.mozRequestFullScreen && !target.mozRequestFullscreen && !target.webkitRequestFullscreen) {
        return -3
    }
    var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
    if (!canPerformRequests) {
        if (strategy.deferUntilInEventHandler) {
            JSEvents.deferCall(JSEvents.requestFullscreen, 1, [target, strategy]);
            return 1
        } else {
            return -2
        }
    }
    return JSEvents.requestFullscreen(target, strategy)
}

function __registerRestoreOldStyle(canvas) {
    var oldWidth = canvas.width;
    var oldHeight = canvas.height;
    var oldCssWidth = canvas.style.width;
    var oldCssHeight = canvas.style.height;
    var oldBackgroundColor = canvas.style.backgroundColor;
    var oldDocumentBackgroundColor = document.body.style.backgroundColor;
    var oldPaddingLeft = canvas.style.paddingLeft;
    var oldPaddingRight = canvas.style.paddingRight;
    var oldPaddingTop = canvas.style.paddingTop;
    var oldPaddingBottom = canvas.style.paddingBottom;
    var oldMarginLeft = canvas.style.marginLeft;
    var oldMarginRight = canvas.style.marginRight;
    var oldMarginTop = canvas.style.marginTop;
    var oldMarginBottom = canvas.style.marginBottom;
    var oldDocumentBodyMargin = document.body.style.margin;
    var oldDocumentOverflow = document.documentElement.style.overflow;
    var oldDocumentScroll = document.body.scroll;
    var oldImageRendering = canvas.style.imageRendering;

    function restoreOldStyle() {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        if (!fullscreenElement) {
            document.removeEventListener("fullscreenchange", restoreOldStyle);
            document.removeEventListener("mozfullscreenchange", restoreOldStyle);
            document.removeEventListener("webkitfullscreenchange", restoreOldStyle);
            document.removeEventListener("MSFullscreenChange", restoreOldStyle);
            canvas.width = oldWidth;
            canvas.height = oldHeight;
            canvas.style.width = oldCssWidth;
            canvas.style.height = oldCssHeight;
            canvas.style.backgroundColor = oldBackgroundColor;
            if (!oldDocumentBackgroundColor) document.body.style.backgroundColor = "white";
            document.body.style.backgroundColor = oldDocumentBackgroundColor;
            canvas.style.paddingLeft = oldPaddingLeft;
            canvas.style.paddingRight = oldPaddingRight;
            canvas.style.paddingTop = oldPaddingTop;
            canvas.style.paddingBottom = oldPaddingBottom;
            canvas.style.marginLeft = oldMarginLeft;
            canvas.style.marginRight = oldMarginRight;
            canvas.style.marginTop = oldMarginTop;
            canvas.style.marginBottom = oldMarginBottom;
            document.body.style.margin = oldDocumentBodyMargin;
            document.documentElement.style.overflow = oldDocumentOverflow;
            document.body.scroll = oldDocumentScroll;
            canvas.style.imageRendering = oldImageRendering;
            if (canvas.GLctxObject) canvas.GLctxObject.GLctx.viewport(0, 0, oldWidth, oldHeight);
            if (__currentFullscreenStrategy.canvasResizedCallback) {
                Module["dynCall_iiii"](__currentFullscreenStrategy.canvasResizedCallback, 37, 0, __currentFullscreenStrategy.canvasResizedCallbackUserData)
            }
        }
    }
    document.addEventListener("fullscreenchange", restoreOldStyle);
    document.addEventListener("mozfullscreenchange", restoreOldStyle);
    document.addEventListener("webkitfullscreenchange", restoreOldStyle);
    document.addEventListener("MSFullscreenChange", restoreOldStyle);
    return restoreOldStyle
}

function _emscripten_request_fullscreen_strategy(target, deferUntilInEventHandler, fullscreenStrategy) {
    var strategy = {};
    strategy.scaleMode = HEAP32[fullscreenStrategy >> 2];
    strategy.canvasResolutionScaleMode = HEAP32[fullscreenStrategy + 4 >> 2];
    strategy.filteringMode = HEAP32[fullscreenStrategy + 8 >> 2];
    strategy.deferUntilInEventHandler = deferUntilInEventHandler;
    strategy.canvasResizedCallback = HEAP32[fullscreenStrategy + 12 >> 2];
    strategy.canvasResizedCallbackUserData = HEAP32[fullscreenStrategy + 16 >> 2];
    __currentFullscreenStrategy = strategy;
    return _emscripten_do_request_fullscreen(target, strategy)
}

function _emscripten_request_pointerlock(target, deferUntilInEventHandler) {
    if (!target) target = "#canvas";
    target = JSEvents.findEventTarget(target);
    if (!target) return -4;
    if (!target.requestPointerLock && !target.mozRequestPointerLock && !target.webkitRequestPointerLock && !target.msRequestPointerLock) {
        return -1
    }
    var canPerformRequests = JSEvents.canPerformEventHandlerRequests();
    if (!canPerformRequests) {
        if (deferUntilInEventHandler) {
            JSEvents.deferCall(JSEvents.requestPointerLock, 2, [target]);
            return 1
        } else {
            return -2
        }
    }
    return JSEvents.requestPointerLock(target)
}

function _emscripten_set_blur_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 12, "blur");
    return 0
}

function _emscripten_set_canvas_size(width, height) {
    Browser.setCanvasSize(width, height)
}

function _emscripten_set_element_css_size(target, width, height) {
    if (!target) {
        target = Module["canvas"]
    } else {
        target = JSEvents.findEventTarget(target)
    }
    if (!target) return -4;
    target.style.setProperty("width", width + "px");
    target.style.setProperty("height", height + "px");
    return 0
}

function _emscripten_set_focus_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerFocusEventCallback(target, userData, useCapture, callbackfunc, 13, "focus");
    return 0
}

function _emscripten_set_fullscreenchange_callback(target, userData, useCapture, callbackfunc) {
    if (typeof JSEvents.fullscreenEnabled() === "undefined") return -1;
    if (!target) target = document;
    else {
        target = JSEvents.findEventTarget(target);
        if (!target) return -4
    }
    JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange");
    JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "mozfullscreenchange");
    JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange");
    JSEvents.registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "msfullscreenchange");
    return 0
}

function _emscripten_set_gamepadconnected_callback(userData, useCapture, callbackfunc) {
    if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
    JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 26, "gamepadconnected");
    return 0
}

function _emscripten_set_gamepaddisconnected_callback(userData, useCapture, callbackfunc) {
    if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
    JSEvents.registerGamepadEventCallback(window, userData, useCapture, callbackfunc, 27, "gamepaddisconnected");
    return 0
}

function _emscripten_set_keydown_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown");
    return 0
}

function _emscripten_set_keypress_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress");
    return 0
}

function _emscripten_set_keyup_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup");
    return 0
}

function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
    return 0
}

function _emscripten_set_mouseenter_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter");
    return 0
}

function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
    return 0
}

function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
    return 0
}

function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
    return 0
}

function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
    return 0
}

function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
    return 0
}

function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
    return 0
}

function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
    return 0
}

function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
    JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
    return 0
}

function _emscripten_set_visibilitychange_callback(userData, useCapture, callbackfunc) {
    JSEvents.registerVisibilityChangeEventCallback(document, userData, useCapture, callbackfunc, 21, "visibilitychange");
    return 0
}

function _emscripten_set_wheel_callback(target, userData, useCapture, callbackfunc) {
    target = JSEvents.findEventTarget(target);
    if (typeof target.onwheel !== "undefined") {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel");
        return 0
    } else if (typeof target.onmousewheel !== "undefined") {
        JSEvents.registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel");
        return 0
    } else {
        return -1
    }
}
var _environ = STATICTOP;
STATICTOP += 16;

function ___buildEnvironment(env) {
    var MAX_ENV_VALUES = 64;
    var TOTAL_ENV_SIZE = 1024;
    var poolPtr;
    var envPtr;
    if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        ENV["USER"] = ENV["LOGNAME"] = "web_user";
        ENV["PATH"] = "/";
        ENV["PWD"] = "/";
        ENV["HOME"] = "/home/web_user";
        ENV["LANG"] = "C.UTF-8";
        ENV["_"] = Module["thisProgram"];
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[envPtr >> 2] = poolPtr;
        HEAP32[_environ >> 2] = envPtr
    } else {
        envPtr = HEAP32[_environ >> 2];
        poolPtr = HEAP32[envPtr >> 2]
    }
    var strings = [];
    var totalSize = 0;
    for (var key in env) {
        if (typeof env[key] === "string") {
            var line = key + "=" + env[key];
            strings.push(line);
            totalSize += line.length
        }
    }
    if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error("Environment size exceeded TOTAL_ENV_SIZE!")
    }
    var ptrSize = 4;
    for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
        poolPtr += line.length + 1
    }
    HEAP32[envPtr + strings.length * ptrSize >> 2] = 0
}
var ENV = {};

function _getenv(name) {
    if (name === 0) return 0;
    name = Pointer_stringify(name);
    if (!ENV.hasOwnProperty(name)) return 0;
    if (_getenv.ret) _free(_getenv.ret);
    _getenv.ret = allocateUTF8(ENV[name]);
    return _getenv.ret
}

function _gettimeofday(ptr) {
    var now = Date.now();
    HEAP32[ptr >> 2] = now / 1e3 | 0;
    HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
    return 0
}

function _glClear(x0) {
    GLctx["clear"](x0)
}

function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    return dest
}

function _usleep(useconds) {
    var msec = useconds / 1e3;
    if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self["performance"] && self["performance"]["now"]) {
        var start = self["performance"]["now"]();
        while (self["performance"]["now"]() - start < msec) {}
    } else {
        var start = Date.now();
        while (Date.now() - start < msec) {}
    }
    return 0
}

function _nanosleep(rqtp, rmtp) {
    var seconds = HEAP32[rqtp >> 2];
    var nanoseconds = HEAP32[rqtp + 4 >> 2];
    if (rmtp !== 0) {
        HEAP32[rmtp >> 2] = 0;
        HEAP32[rmtp + 4 >> 2] = 0
    }
    return _usleep(seconds * 1e6 + nanoseconds / 1e3)
}

function _pthread_cond_wait() {
    return 0
}
var PTHREAD_SPECIFIC = {};

function _pthread_getspecific(key) {
    return PTHREAD_SPECIFIC[key] || 0
}
var PTHREAD_SPECIFIC_NEXT_KEY = 1;

function _pthread_key_create(key, destructor) {
    if (key == 0) {
        return ERRNO_CODES.EINVAL
    }
    HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
    PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
    PTHREAD_SPECIFIC_NEXT_KEY++;
    return 0
}

function _pthread_once(ptr, func) {
    if (!_pthread_once.seen) _pthread_once.seen = {};
    if (ptr in _pthread_once.seen) return;
    Module["dynCall_v"](func);
    _pthread_once.seen[ptr] = 1
}

function _pthread_setspecific(key, value) {
    if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL
    }
    PTHREAD_SPECIFIC[key] = value;
    return 0
}

function _sigaction(signum, act, oldact) {
    Module.printErr("Calling stub instead of sigaction()");
    return 0
}
var __sigalrm_handler = 0;

function _signal(sig, func) {
    if (sig == 14) {
        __sigalrm_handler = func
    } else {
        Module.printErr("Calling stub instead of signal()")
    }
    return 0
}

function __isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)
}

function __arraySum(array, index) {
    var sum = 0;
    for (var i = 0; i <= index; sum += array[i++]);
    return sum
}
var __MONTH_DAYS_LEAP = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var __MONTH_DAYS_REGULAR = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function __addDays(date, days) {
    var newDate = new Date(date.getTime());
    while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
        if (days > daysInCurrentMonth - newDate.getDate()) {
            days -= daysInCurrentMonth - newDate.getDate() + 1;
            newDate.setDate(1);
            if (currentMonth < 11) {
                newDate.setMonth(currentMonth + 1)
            } else {
                newDate.setMonth(0);
                newDate.setFullYear(newDate.getFullYear() + 1)
            }
        } else {
            newDate.setDate(newDate.getDate() + days);
            return newDate
        }
    }
    return newDate
}

function _strftime(s, maxsize, format, tm) {
    var tm_zone = HEAP32[tm + 40 >> 2];
    var date = {
        tm_sec: HEAP32[tm >> 2],
        tm_min: HEAP32[tm + 4 >> 2],
        tm_hour: HEAP32[tm + 8 >> 2],
        tm_mday: HEAP32[tm + 12 >> 2],
        tm_mon: HEAP32[tm + 16 >> 2],
        tm_year: HEAP32[tm + 20 >> 2],
        tm_wday: HEAP32[tm + 24 >> 2],
        tm_yday: HEAP32[tm + 28 >> 2],
        tm_isdst: HEAP32[tm + 32 >> 2],
        tm_gmtoff: HEAP32[tm + 36 >> 2],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ""
    };
    var pattern = Pointer_stringify(format);
    var EXPANSION_RULES_1 = {
        "%c": "%a %b %d %H:%M:%S %Y",
        "%D": "%m/%d/%y",
        "%F": "%Y-%m-%d",
        "%h": "%b",
        "%r": "%I:%M:%S %p",
        "%R": "%H:%M",
        "%T": "%H:%M:%S",
        "%x": "%m/%d/%y",
        "%X": "%H:%M:%S"
    };
    for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule])
    }
    var WEEKDAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    function leadingSomething(value, digits, character) {
        var str = typeof value === "number" ? value.toString() : value || "";
        while (str.length < digits) {
            str = character[0] + str
        }
        return str
    }

    function leadingNulls(value, digits) {
        return leadingSomething(value, digits, "0")
    }

    function compareByDay(date1, date2) {
        function sgn(value) {
            return value < 0 ? -1 : value > 0 ? 1 : 0
        }
        var compare;
        if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
            if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
                compare = sgn(date1.getDate() - date2.getDate())
            }
        }
        return compare
    }

    function getFirstWeekStartDate(janFourth) {
        switch (janFourth.getDay()) {
            case 0:
                return new Date(janFourth.getFullYear() - 1, 11, 29);
            case 1:
                return janFourth;
            case 2:
                return new Date(janFourth.getFullYear(), 0, 3);
            case 3:
                return new Date(janFourth.getFullYear(), 0, 2);
            case 4:
                return new Date(janFourth.getFullYear(), 0, 1);
            case 5:
                return new Date(janFourth.getFullYear() - 1, 11, 31);
            case 6:
                return new Date(janFourth.getFullYear() - 1, 11, 30)
        }
    }

    function getWeekBasedYear(date) {
        var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
        var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
        var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
        var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
        var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
        if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
                return thisDate.getFullYear() + 1
            } else {
                return thisDate.getFullYear()
            }
        } else {
            return thisDate.getFullYear() - 1
        }
    }
    var EXPANSION_RULES_2 = {
        "%a": (function(date) {
            return WEEKDAYS[date.tm_wday].substring(0, 3)
        }),
        "%A": (function(date) {
            return WEEKDAYS[date.tm_wday]
        }),
        "%b": (function(date) {
            return MONTHS[date.tm_mon].substring(0, 3)
        }),
        "%B": (function(date) {
            return MONTHS[date.tm_mon]
        }),
        "%C": (function(date) {
            var year = date.tm_year + 1900;
            return leadingNulls(year / 100 | 0, 2)
        }),
        "%d": (function(date) {
            return leadingNulls(date.tm_mday, 2)
        }),
        "%e": (function(date) {
            return leadingSomething(date.tm_mday, 2, " ")
        }),
        "%g": (function(date) {
            return getWeekBasedYear(date).toString().substring(2)
        }),
        "%G": (function(date) {
            return getWeekBasedYear(date)
        }),
        "%H": (function(date) {
            return leadingNulls(date.tm_hour, 2)
        }),
        "%I": (function(date) {
            var twelveHour = date.tm_hour;
            if (twelveHour == 0) twelveHour = 12;
            else if (twelveHour > 12) twelveHour -= 12;
            return leadingNulls(twelveHour, 2)
        }),
        "%j": (function(date) {
            return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3)
        }),
        "%m": (function(date) {
            return leadingNulls(date.tm_mon + 1, 2)
        }),
        "%M": (function(date) {
            return leadingNulls(date.tm_min, 2)
        }),
        "%n": (function() {
            return "\n"
        }),
        "%p": (function(date) {
            if (date.tm_hour >= 0 && date.tm_hour < 12) {
                return "AM"
            } else {
                return "PM"
            }
        }),
        "%S": (function(date) {
            return leadingNulls(date.tm_sec, 2)
        }),
        "%t": (function() {
            return "\t"
        }),
        "%u": (function(date) {
            var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
            return day.getDay() || 7
        }),
        "%U": (function(date) {
            var janFirst = new Date(date.tm_year + 1900, 0, 1);
            var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
            var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
            if (compareByDay(firstSunday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
                var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2)
            }
            return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00"
        }),
        "%V": (function(date) {
            var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
            var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
            var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
            var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
            var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
            if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
                return "53"
            }
            if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
                return "01"
            }
            var daysDifference;
            if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
                daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate()
            } else {
                daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate()
            }
            return leadingNulls(Math.ceil(daysDifference / 7), 2)
        }),
        "%w": (function(date) {
            var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
            return day.getDay()
        }),
        "%W": (function(date) {
            var janFirst = new Date(date.tm_year, 0, 1);
            var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
            var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
            if (compareByDay(firstMonday, endDate) < 0) {
                var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
                var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
                var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
                return leadingNulls(Math.ceil(days / 7), 2)
            }
            return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00"
        }),
        "%y": (function(date) {
            return (date.tm_year + 1900).toString().substring(2)
        }),
        "%Y": (function(date) {
            return date.tm_year + 1900
        }),
        "%z": (function(date) {
            var off = date.tm_gmtoff;
            var ahead = off >= 0;
            off = Math.abs(off) / 60;
            off = off / 60 * 100 + off % 60;
            return (ahead ? "+" : "-") + String("0000" + off).slice(-4)
        }),
        "%Z": (function(date) {
            return date.tm_zone
        }),
        "%%": (function() {
            return "%"
        })
    };
    for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
            pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date))
        }
    }
    var bytes = intArrayFromString(pattern, false);
    if (bytes.length > maxsize) {
        return 0
    }
    writeArrayToMemory(bytes, s);
    return bytes.length - 1
}

function _strftime_l(s, maxsize, format, tm) {
    return _strftime(s, maxsize, format, tm)
}
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
    Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.");
    Module["requestFullScreen"] = Module["requestFullscreen"];
    Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice)
};
Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) {
    Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice)
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
    Browser.requestAnimationFrame(func)
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
    Browser.setCanvasSize(width, height, noUpdates)
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
    Browser.mainLoop.pause()
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
    Browser.mainLoop.resume()
};
Module["getUserMedia"] = function Module_getUserMedia() {
    Browser.getUserMedia()
};
Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
    return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes)
};
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
        var t = process["hrtime"]();
        return t[0] * 1e3 + t[1] / 1e6
    }
} else if (typeof dateNow !== "undefined") {
    _emscripten_get_now = dateNow
} else if (typeof self === "object" && self["performance"] && typeof self["performance"]["now"] === "function") {
    _emscripten_get_now = (function() {
        return self["performance"]["now"]()
    })
} else if (typeof performance === "object" && typeof performance["now"] === "function") {
    _emscripten_get_now = (function() {
        return performance["now"]()
    })
} else {
    _emscripten_get_now = Date.now
}
FS.staticInit();
__ATINIT__.unshift((function() {
    if (!Module["noFSInit"] && !FS.init.initialized) FS.init()
}));
__ATMAIN__.push((function() {
    FS.ignorePermissions = false
}));
__ATEXIT__.push((function() {
    FS.quit()
}));
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift((function() {
    TTY.init()
}));
__ATEXIT__.push((function() {
    TTY.shutdown()
}));
if (ENVIRONMENT_IS_NODE) {
    var fs = require("fs");
    var NODEJS_PATH = require("path");
    NODEFS.staticInit()
}
var GLctx;
GL.init();
JSEvents.staticInit();
___buildEnvironment(ENV);
DYNAMICTOP_PTR = staticAlloc(4);
STACK_BASE = STACKTOP = alignMemory(STATICTOP);
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = alignMemory(STACK_MAX);
HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
staticSealed = true;
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array
}

function nullFunc_i(x) {
    Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_ii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiid(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiidii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiiid(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_iiiiij(x) {
    Module["printErr"]("Invalid function pointer called with signature 'iiiiij'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_ji(x) {
    Module["printErr"]("Invalid function pointer called with signature 'ji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_jiji(x) {
    Module["printErr"]("Invalid function pointer called with signature 'jiji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_v(x) {
    Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vd(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vdd(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vdd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vdddddd(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vdddddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vf(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vf'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vff(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vffff(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vfi(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vfi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vi(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vif(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viff(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vifff(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vifff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viffff(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viffff'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_vii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viif(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viif'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiiiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viiiiiiiiiii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}

function nullFunc_viijii(x) {
    Module["printErr"]("Invalid function pointer called with signature 'viijii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");
    Module["printErr"]("Build with ASSERTIONS=2 for more info.");
    abort(x)
}
Module["wasmTableSize"] = 1510;
Module["wasmMaxTableSize"] = 1510;

function invoke_i(index) {
    try {
        return Module["dynCall_i"](index)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_ii(index, a1) {
    try {
        return Module["dynCall_ii"](index, a1)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_iii(index, a1, a2) {
    try {
        return Module["dynCall_iii"](index, a1, a2)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_iiii(index, a1, a2, a3) {
    try {
        return Module["dynCall_iiii"](index, a1, a2, a3)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_iiiii(index, a1, a2, a3, a4) {
    try {
        return Module["dynCall_iiiii"](index, a1, a2, a3, a4)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
    try {
        return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
    try {
        return Module["dynCall_iiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    try {
        return Module["dynCall_iiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_jiji(index, a1, a2, a3, a4) {
    try {
        return Module["dynCall_jiji"](index, a1, a2, a3, a4)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_vi(index, a1) {
    try {
        Module["dynCall_vi"](index, a1)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_vii(index, a1, a2) {
    try {
        Module["dynCall_vii"](index, a1, a2)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_viii(index, a1, a2, a3) {
    try {
        Module["dynCall_viii"](index, a1, a2, a3)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}

function invoke_viiii(index, a1, a2, a3, a4) {
    try {
        Module["dynCall_viiii"](index, a1, a2, a3, a4)
    } catch (e) {
        if (typeof e !== "number" && e !== "longjmp") throw e;
        Module["setThrew"](1, 0)
    }
}
Module.asmGlobalArg = {};
Module.asmLibraryArg = {
    "enlargeMemory": enlargeMemory,
    "getTotalMemory": getTotalMemory,
    "abortOnCannotGrowMemory": abortOnCannotGrowMemory,
    "abortStackOverflow": abortStackOverflow,
    "nullFunc_i": nullFunc_i,
    "nullFunc_ii": nullFunc_ii,
    "nullFunc_iii": nullFunc_iii,
    "nullFunc_iiii": nullFunc_iiii,
    "nullFunc_iiiii": nullFunc_iiiii,
    "nullFunc_iiiiid": nullFunc_iiiiid,
    "nullFunc_iiiiidii": nullFunc_iiiiidii,
    "nullFunc_iiiiii": nullFunc_iiiiii,
    "nullFunc_iiiiiid": nullFunc_iiiiiid,
    "nullFunc_iiiiiii": nullFunc_iiiiiii,
    "nullFunc_iiiiiiii": nullFunc_iiiiiiii,
    "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii,
    "nullFunc_iiiiiiiiii": nullFunc_iiiiiiiiii,
    "nullFunc_iiiiij": nullFunc_iiiiij,
    "nullFunc_ji": nullFunc_ji,
    "nullFunc_jiji": nullFunc_jiji,
    "nullFunc_v": nullFunc_v,
    "nullFunc_vd": nullFunc_vd,
    "nullFunc_vdd": nullFunc_vdd,
    "nullFunc_vdddddd": nullFunc_vdddddd,
    "nullFunc_vf": nullFunc_vf,
    "nullFunc_vff": nullFunc_vff,
    "nullFunc_vffff": nullFunc_vffff,
    "nullFunc_vfi": nullFunc_vfi,
    "nullFunc_vi": nullFunc_vi,
    "nullFunc_vif": nullFunc_vif,
    "nullFunc_viff": nullFunc_viff,
    "nullFunc_vifff": nullFunc_vifff,
    "nullFunc_viffff": nullFunc_viffff,
    "nullFunc_vii": nullFunc_vii,
    "nullFunc_viif": nullFunc_viif,
    "nullFunc_viii": nullFunc_viii,
    "nullFunc_viiii": nullFunc_viiii,
    "nullFunc_viiiii": nullFunc_viiiii,
    "nullFunc_viiiiii": nullFunc_viiiiii,
    "nullFunc_viiiiiii": nullFunc_viiiiiii,
    "nullFunc_viiiiiiii": nullFunc_viiiiiiii,
    "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii,
    "nullFunc_viiiiiiiiiii": nullFunc_viiiiiiiiiii,
    "nullFunc_viijii": nullFunc_viijii,
    "invoke_i": invoke_i,
    "invoke_ii": invoke_ii,
    "invoke_iii": invoke_iii,
    "invoke_iiii": invoke_iiii,
    "invoke_iiiii": invoke_iiiii,
    "invoke_iiiiii": invoke_iiiiii,
    "invoke_iiiiiiiii": invoke_iiiiiiiii,
    "invoke_iiiiiiiiii": invoke_iiiiiiiiii,
    "invoke_jiji": invoke_jiji,
    "invoke_vi": invoke_vi,
    "invoke_vii": invoke_vii,
    "invoke_viii": invoke_viii,
    "invoke_viiii": invoke_viiii,
    "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
    "___assert_fail": ___assert_fail,
    "___cxa_allocate_exception": ___cxa_allocate_exception,
    "___cxa_throw": ___cxa_throw,
    "___lock": ___lock,
    "___map_file": ___map_file,
    "___setErrNo": ___setErrNo,
    "___syscall140": ___syscall140,
    "___syscall145": ___syscall145,
    "___syscall146": ___syscall146,
    "___syscall221": ___syscall221,
    "___syscall5": ___syscall5,
    "___syscall54": ___syscall54,
    "___syscall6": ___syscall6,
    "___syscall91": ___syscall91,
    "___unlock": ___unlock,
    "_abort": _abort,
    "_clock_gettime": _clock_gettime,
    "_dlclose": _dlclose,
    "_dlerror": _dlerror,
    "_dlsym": _dlsym,
    "_eglBindAPI": _eglBindAPI,
    "_eglChooseConfig": _eglChooseConfig,
    "_eglCreateContext": _eglCreateContext,
    "_eglCreateWindowSurface": _eglCreateWindowSurface,
    "_eglDestroyContext": _eglDestroyContext,
    "_eglDestroySurface": _eglDestroySurface,
    "_eglGetConfigAttrib": _eglGetConfigAttrib,
    "_eglGetDisplay": _eglGetDisplay,
    "_eglGetProcAddress": _eglGetProcAddress,
    "_eglInitialize": _eglInitialize,
    "_eglMakeCurrent": _eglMakeCurrent,
    "_eglSwapBuffers": _eglSwapBuffers,
    "_eglSwapInterval": _eglSwapInterval,
    "_eglTerminate": _eglTerminate,
    "_eglWaitGL": _eglWaitGL,
    "_eglWaitNative": _eglWaitNative,
    "_emscripten_asm_const_i": _emscripten_asm_const_i,
    "_emscripten_asm_const_ii": _emscripten_asm_const_ii,
    "_emscripten_asm_const_iii": _emscripten_asm_const_iii,
    "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii,
    "_emscripten_asm_const_iiiii": _emscripten_asm_const_iiiii,
    "_emscripten_async_wget": _emscripten_async_wget,
    "_emscripten_exit_fullscreen": _emscripten_exit_fullscreen,
    "_emscripten_exit_pointerlock": _emscripten_exit_pointerlock,
    "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio,
    "_emscripten_get_element_css_size": _emscripten_get_element_css_size,
    "_emscripten_get_gamepad_status": _emscripten_get_gamepad_status,
    "_emscripten_get_num_gamepads": _emscripten_get_num_gamepads,
    "_emscripten_get_pointerlock_status": _emscripten_get_pointerlock_status,
    "_emscripten_get_preloaded_image_data": _emscripten_get_preloaded_image_data,
    "_emscripten_get_preloaded_image_data_from_FILE": _emscripten_get_preloaded_image_data_from_FILE,
    "_emscripten_glActiveTexture": _emscripten_glActiveTexture,
    "_emscripten_glAttachShader": _emscripten_glAttachShader,
    "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation,
    "_emscripten_glBindBuffer": _emscripten_glBindBuffer,
    "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer,
    "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB,
    "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer,
    "_emscripten_glBindTexture": _emscripten_glBindTexture,
    "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray,
    "_emscripten_glBlendColor": _emscripten_glBlendColor,
    "_emscripten_glBlendEquation": _emscripten_glBlendEquation,
    "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate,
    "_emscripten_glBlendFunc": _emscripten_glBlendFunc,
    "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate,
    "_emscripten_glBufferData": _emscripten_glBufferData,
    "_emscripten_glBufferSubData": _emscripten_glBufferSubData,
    "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus,
    "_emscripten_glClear": _emscripten_glClear,
    "_emscripten_glClearColor": _emscripten_glClearColor,
    "_emscripten_glClearDepth": _emscripten_glClearDepth,
    "_emscripten_glClearDepthf": _emscripten_glClearDepthf,
    "_emscripten_glClearStencil": _emscripten_glClearStencil,
    "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture,
    "_emscripten_glColorMask": _emscripten_glColorMask,
    "_emscripten_glColorPointer": _emscripten_glColorPointer,
    "_emscripten_glCompileShader": _emscripten_glCompileShader,
    "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D,
    "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D,
    "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D,
    "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D,
    "_emscripten_glCreateProgram": _emscripten_glCreateProgram,
    "_emscripten_glCreateShader": _emscripten_glCreateShader,
    "_emscripten_glCullFace": _emscripten_glCullFace,
    "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers,
    "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers,
    "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB,
    "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram,
    "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers,
    "_emscripten_glDeleteShader": _emscripten_glDeleteShader,
    "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures,
    "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays,
    "_emscripten_glDepthFunc": _emscripten_glDepthFunc,
    "_emscripten_glDepthMask": _emscripten_glDepthMask,
    "_emscripten_glDepthRange": _emscripten_glDepthRange,
    "_emscripten_glDepthRangef": _emscripten_glDepthRangef,
    "_emscripten_glDetachShader": _emscripten_glDetachShader,
    "_emscripten_glDisable": _emscripten_glDisable,
    "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray,
    "_emscripten_glDrawArrays": _emscripten_glDrawArrays,
    "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced,
    "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers,
    "_emscripten_glDrawElements": _emscripten_glDrawElements,
    "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced,
    "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements,
    "_emscripten_glEnable": _emscripten_glEnable,
    "_emscripten_glEnableClientState": _emscripten_glEnableClientState,
    "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray,
    "_emscripten_glFinish": _emscripten_glFinish,
    "_emscripten_glFlush": _emscripten_glFlush,
    "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer,
    "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D,
    "_emscripten_glFrontFace": _emscripten_glFrontFace,
    "_emscripten_glFrustum": _emscripten_glFrustum,
    "_emscripten_glGenBuffers": _emscripten_glGenBuffers,
    "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers,
    "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers,
    "_emscripten_glGenTextures": _emscripten_glGenTextures,
    "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays,
    "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap,
    "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib,
    "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform,
    "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders,
    "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation,
    "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv,
    "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv,
    "_emscripten_glGetError": _emscripten_glGetError,
    "_emscripten_glGetFloatv": _emscripten_glGetFloatv,
    "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv,
    "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB,
    "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv,
    "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB,
    "_emscripten_glGetPointerv": _emscripten_glGetPointerv,
    "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog,
    "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv,
    "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv,
    "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog,
    "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat,
    "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource,
    "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv,
    "_emscripten_glGetString": _emscripten_glGetString,
    "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv,
    "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv,
    "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation,
    "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv,
    "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv,
    "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv,
    "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv,
    "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv,
    "_emscripten_glHint": _emscripten_glHint,
    "_emscripten_glIsBuffer": _emscripten_glIsBuffer,
    "_emscripten_glIsEnabled": _emscripten_glIsEnabled,
    "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer,
    "_emscripten_glIsProgram": _emscripten_glIsProgram,
    "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer,
    "_emscripten_glIsShader": _emscripten_glIsShader,
    "_emscripten_glIsTexture": _emscripten_glIsTexture,
    "_emscripten_glIsVertexArray": _emscripten_glIsVertexArray,
    "_emscripten_glLineWidth": _emscripten_glLineWidth,
    "_emscripten_glLinkProgram": _emscripten_glLinkProgram,
    "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity,
    "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf,
    "_emscripten_glMatrixMode": _emscripten_glMatrixMode,
    "_emscripten_glNormalPointer": _emscripten_glNormalPointer,
    "_emscripten_glPixelStorei": _emscripten_glPixelStorei,
    "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset,
    "_emscripten_glReadPixels": _emscripten_glReadPixels,
    "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler,
    "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage,
    "_emscripten_glRotatef": _emscripten_glRotatef,
    "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage,
    "_emscripten_glScissor": _emscripten_glScissor,
    "_emscripten_glShaderBinary": _emscripten_glShaderBinary,
    "_emscripten_glShaderSource": _emscripten_glShaderSource,
    "_emscripten_glStencilFunc": _emscripten_glStencilFunc,
    "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate,
    "_emscripten_glStencilMask": _emscripten_glStencilMask,
    "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate,
    "_emscripten_glStencilOp": _emscripten_glStencilOp,
    "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate,
    "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer,
    "_emscripten_glTexImage2D": _emscripten_glTexImage2D,
    "_emscripten_glTexParameterf": _emscripten_glTexParameterf,
    "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv,
    "_emscripten_glTexParameteri": _emscripten_glTexParameteri,
    "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv,
    "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D,
    "_emscripten_glUniform1f": _emscripten_glUniform1f,
    "_emscripten_glUniform1fv": _emscripten_glUniform1fv,
    "_emscripten_glUniform1i": _emscripten_glUniform1i,
    "_emscripten_glUniform1iv": _emscripten_glUniform1iv,
    "_emscripten_glUniform2f": _emscripten_glUniform2f,
    "_emscripten_glUniform2fv": _emscripten_glUniform2fv,
    "_emscripten_glUniform2i": _emscripten_glUniform2i,
    "_emscripten_glUniform2iv": _emscripten_glUniform2iv,
    "_emscripten_glUniform3f": _emscripten_glUniform3f,
    "_emscripten_glUniform3fv": _emscripten_glUniform3fv,
    "_emscripten_glUniform3i": _emscripten_glUniform3i,
    "_emscripten_glUniform3iv": _emscripten_glUniform3iv,
    "_emscripten_glUniform4f": _emscripten_glUniform4f,
    "_emscripten_glUniform4fv": _emscripten_glUniform4fv,
    "_emscripten_glUniform4i": _emscripten_glUniform4i,
    "_emscripten_glUniform4iv": _emscripten_glUniform4iv,
    "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv,
    "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv,
    "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv,
    "_emscripten_glUseProgram": _emscripten_glUseProgram,
    "_emscripten_glValidateProgram": _emscripten_glValidateProgram,
    "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f,
    "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv,
    "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f,
    "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv,
    "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f,
    "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv,
    "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f,
    "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv,
    "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor,
    "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer,
    "_emscripten_glVertexPointer": _emscripten_glVertexPointer,
    "_emscripten_glViewport": _emscripten_glViewport,
    "_emscripten_longjmp": _emscripten_longjmp,
    "_emscripten_memcpy_big": _emscripten_memcpy_big,
    "_emscripten_request_fullscreen_strategy": _emscripten_request_fullscreen_strategy,
    "_emscripten_request_pointerlock": _emscripten_request_pointerlock,
    "_emscripten_set_blur_callback": _emscripten_set_blur_callback,
    "_emscripten_set_canvas_size": _emscripten_set_canvas_size,
    "_emscripten_set_element_css_size": _emscripten_set_element_css_size,
    "_emscripten_set_focus_callback": _emscripten_set_focus_callback,
    "_emscripten_set_fullscreenchange_callback": _emscripten_set_fullscreenchange_callback,
    "_emscripten_set_gamepadconnected_callback": _emscripten_set_gamepadconnected_callback,
    "_emscripten_set_gamepaddisconnected_callback": _emscripten_set_gamepaddisconnected_callback,
    "_emscripten_set_keydown_callback": _emscripten_set_keydown_callback,
    "_emscripten_set_keypress_callback": _emscripten_set_keypress_callback,
    "_emscripten_set_keyup_callback": _emscripten_set_keyup_callback,
    "_emscripten_set_main_loop": _emscripten_set_main_loop,
    "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback,
    "_emscripten_set_mouseenter_callback": _emscripten_set_mouseenter_callback,
    "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback,
    "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback,
    "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback,
    "_emscripten_set_resize_callback": _emscripten_set_resize_callback,
    "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback,
    "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback,
    "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback,
    "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback,
    "_emscripten_set_visibilitychange_callback": _emscripten_set_visibilitychange_callback,
    "_emscripten_set_wheel_callback": _emscripten_set_wheel_callback,
    "_getenv": _getenv,
    "_gettimeofday": _gettimeofday,
    "_glClear": _glClear,
    "_longjmp": _longjmp,
    "_nanosleep": _nanosleep,
    "_pthread_cond_wait": _pthread_cond_wait,
    "_pthread_getspecific": _pthread_getspecific,
    "_pthread_key_create": _pthread_key_create,
    "_pthread_once": _pthread_once,
    "_pthread_setspecific": _pthread_setspecific,
    "_sigaction": _sigaction,
    "_signal": _signal,
    "_strftime_l": _strftime_l,
    "DYNAMICTOP_PTR": DYNAMICTOP_PTR,
    "STACKTOP": STACKTOP,
    "STACK_MAX": STACK_MAX
};
var asm = Module["asm"](Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"];
asm["__GLOBAL__I_000101"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real___GLOBAL__I_000101.apply(null, arguments)
});
var real___GLOBAL__sub_I_Game_cpp = asm["__GLOBAL__sub_I_Game_cpp"];
asm["__GLOBAL__sub_I_Game_cpp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real___GLOBAL__sub_I_Game_cpp.apply(null, arguments)
});
var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"];
asm["__GLOBAL__sub_I_iostream_cpp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments)
});
var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real____cxa_can_catch.apply(null, arguments)
});
var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real____cxa_is_pointer_type.apply(null, arguments)
});
var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real____errno_location.apply(null, arguments)
});
var real__emscripten_GetProcAddress = asm["_emscripten_GetProcAddress"];
asm["_emscripten_GetProcAddress"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__emscripten_GetProcAddress.apply(null, arguments)
});
var real__fflush = asm["_fflush"];
asm["_fflush"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__fflush.apply(null, arguments)
});
var real__fileno = asm["_fileno"];
asm["_fileno"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__fileno.apply(null, arguments)
});
var real__free = asm["_free"];
asm["_free"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__free.apply(null, arguments)
});
var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"];
asm["_llvm_bswap_i32"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__llvm_bswap_i32.apply(null, arguments)
});
var real__main = asm["_main"];
asm["_main"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__main.apply(null, arguments)
});
var real__malloc = asm["_malloc"];
asm["_malloc"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__malloc.apply(null, arguments)
});
var real__memmove = asm["_memmove"];
asm["_memmove"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__memmove.apply(null, arguments)
});
var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"];
asm["_pthread_cond_broadcast"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__pthread_cond_broadcast.apply(null, arguments)
});
var real__pthread_mutex_lock = asm["_pthread_mutex_lock"];
asm["_pthread_mutex_lock"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__pthread_mutex_lock.apply(null, arguments)
});
var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"];
asm["_pthread_mutex_unlock"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__pthread_mutex_unlock.apply(null, arguments)
});
var real__realloc = asm["_realloc"];
asm["_realloc"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__realloc.apply(null, arguments)
});
var real__saveSetjmp = asm["_saveSetjmp"];
asm["_saveSetjmp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__saveSetjmp.apply(null, arguments)
});
var real__sbrk = asm["_sbrk"];
asm["_sbrk"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__sbrk.apply(null, arguments)
});
var real__strstr = asm["_strstr"];
asm["_strstr"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__strstr.apply(null, arguments)
});
var real__testSetjmp = asm["_testSetjmp"];
asm["_testSetjmp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real__testSetjmp.apply(null, arguments)
});
var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_establishStackSpace.apply(null, arguments)
});
var real_getTempRet0 = asm["getTempRet0"];
asm["getTempRet0"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_getTempRet0.apply(null, arguments)
});
var real_setTempRet0 = asm["setTempRet0"];
asm["setTempRet0"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_setTempRet0.apply(null, arguments)
});
var real_setThrew = asm["setThrew"];
asm["setThrew"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_setThrew.apply(null, arguments)
});
var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_stackAlloc.apply(null, arguments)
});
var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_stackRestore.apply(null, arguments)
});
var real_stackSave = asm["stackSave"];
asm["stackSave"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return real_stackSave.apply(null, arguments)
});
Module["asm"] = asm;
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["__GLOBAL__I_000101"].apply(null, arguments)
});
var __GLOBAL__sub_I_Game_cpp = Module["__GLOBAL__sub_I_Game_cpp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["__GLOBAL__sub_I_Game_cpp"].apply(null, arguments)
});
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["__GLOBAL__sub_I_iostream_cpp"].apply(null, arguments)
});
var ___cxa_can_catch = Module["___cxa_can_catch"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["___cxa_can_catch"].apply(null, arguments)
});
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments)
});
var ___errno_location = Module["___errno_location"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["___errno_location"].apply(null, arguments)
});
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_emscripten_GetProcAddress"].apply(null, arguments)
});
var _fflush = Module["_fflush"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_fflush"].apply(null, arguments)
});
var _fileno = Module["_fileno"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_fileno"].apply(null, arguments)
});
var _free = Module["_free"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_free"].apply(null, arguments)
});
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments)
});
var _main = Module["_main"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_main"].apply(null, arguments)
});
var _malloc = Module["_malloc"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_malloc"].apply(null, arguments)
});
var _memmove = Module["_memmove"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_memmove"].apply(null, arguments)
});
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments)
});
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_pthread_mutex_lock"].apply(null, arguments)
});
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_pthread_mutex_unlock"].apply(null, arguments)
});
var _realloc = Module["_realloc"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_realloc"].apply(null, arguments)
});
var _saveSetjmp = Module["_saveSetjmp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_saveSetjmp"].apply(null, arguments)
});
var _sbrk = Module["_sbrk"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_sbrk"].apply(null, arguments)
});
var _strstr = Module["_strstr"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_strstr"].apply(null, arguments)
});
var _testSetjmp = Module["_testSetjmp"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["_testSetjmp"].apply(null, arguments)
});
var establishStackSpace = Module["establishStackSpace"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["establishStackSpace"].apply(null, arguments)
});
var getTempRet0 = Module["getTempRet0"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["getTempRet0"].apply(null, arguments)
});
var setTempRet0 = Module["setTempRet0"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["setTempRet0"].apply(null, arguments)
});
var setThrew = Module["setThrew"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["setThrew"].apply(null, arguments)
});
var stackAlloc = Module["stackAlloc"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["stackAlloc"].apply(null, arguments)
});
var stackRestore = Module["stackRestore"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["stackRestore"].apply(null, arguments)
});
var stackSave = Module["stackSave"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["stackSave"].apply(null, arguments)
});
var dynCall_i = Module["dynCall_i"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_i"].apply(null, arguments)
});
var dynCall_ii = Module["dynCall_ii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_ii"].apply(null, arguments)
});
var dynCall_iii = Module["dynCall_iii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iii"].apply(null, arguments)
});
var dynCall_iiii = Module["dynCall_iiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiii"].apply(null, arguments)
});
var dynCall_iiiii = Module["dynCall_iiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
});
var dynCall_iiiiid = Module["dynCall_iiiiid"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiid"].apply(null, arguments)
});
var dynCall_iiiiidii = Module["dynCall_iiiiidii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiidii"].apply(null, arguments)
});
var dynCall_iiiiii = Module["dynCall_iiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
});
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments)
});
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
});
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments)
});
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
});
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiiiiiii"].apply(null, arguments)
});
var dynCall_iiiiij = Module["dynCall_iiiiij"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_iiiiij"].apply(null, arguments)
});
var dynCall_ji = Module["dynCall_ji"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_ji"].apply(null, arguments)
});
var dynCall_jiji = Module["dynCall_jiji"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_jiji"].apply(null, arguments)
});
var dynCall_v = Module["dynCall_v"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_v"].apply(null, arguments)
});
var dynCall_vd = Module["dynCall_vd"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vd"].apply(null, arguments)
});
var dynCall_vdd = Module["dynCall_vdd"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vdd"].apply(null, arguments)
});
var dynCall_vdddddd = Module["dynCall_vdddddd"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vdddddd"].apply(null, arguments)
});
var dynCall_vf = Module["dynCall_vf"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vf"].apply(null, arguments)
});
var dynCall_vff = Module["dynCall_vff"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vff"].apply(null, arguments)
});
var dynCall_vffff = Module["dynCall_vffff"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vffff"].apply(null, arguments)
});
var dynCall_vfi = Module["dynCall_vfi"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vfi"].apply(null, arguments)
});
var dynCall_vi = Module["dynCall_vi"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vi"].apply(null, arguments)
});
var dynCall_vif = Module["dynCall_vif"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vif"].apply(null, arguments)
});
var dynCall_viff = Module["dynCall_viff"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viff"].apply(null, arguments)
});
var dynCall_vifff = Module["dynCall_vifff"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vifff"].apply(null, arguments)
});
var dynCall_viffff = Module["dynCall_viffff"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viffff"].apply(null, arguments)
});
var dynCall_vii = Module["dynCall_vii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_vii"].apply(null, arguments)
});
var dynCall_viif = Module["dynCall_viif"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viif"].apply(null, arguments)
});
var dynCall_viii = Module["dynCall_viii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viii"].apply(null, arguments)
});
var dynCall_viiii = Module["dynCall_viiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiii"].apply(null, arguments)
});
var dynCall_viiiii = Module["dynCall_viiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
});
var dynCall_viiiiii = Module["dynCall_viiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
});
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
});
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiiiiiii"].apply(null, arguments)
});
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments)
});
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viiiiiiiiiii"].apply(null, arguments)
});
var dynCall_viijii = Module["dynCall_viijii"] = (function() {
    assert(runtimeInitialized, "you need to wait for the runtime to be ready (e.g. wait for main() to be called)");
    assert(!runtimeExited, "the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
    return Module["asm"]["dynCall_viijii"].apply(null, arguments)
});
Module["asm"] = asm;
if (!Module["intArrayFromString"]) Module["intArrayFromString"] = (function() {
    abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["intArrayToString"]) Module["intArrayToString"] = (function() {
    abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["ccall"]) Module["ccall"] = (function() {
    abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["cwrap"]) Module["cwrap"] = (function() {
    abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["setValue"]) Module["setValue"] = (function() {
    abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["getValue"]) Module["getValue"] = (function() {
    abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["allocate"]) Module["allocate"] = (function() {
    abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
Module["getMemory"] = getMemory;
Module["Pointer_stringify"] = Pointer_stringify;
if (!Module["AsciiToString"]) Module["AsciiToString"] = (function() {
    abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stringToAscii"]) Module["stringToAscii"] = (function() {
    abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = (function() {
    abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = (function() {
    abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = (function() {
    abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = (function() {
    abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = (function() {
    abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = (function() {
    abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = (function() {
    abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = (function() {
    abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = (function() {
    abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = (function() {
    abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = (function() {
    abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = (function() {
    abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stackTrace"]) Module["stackTrace"] = (function() {
    abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = (function() {
    abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["addOnInit"]) Module["addOnInit"] = (function() {
    abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = (function() {
    abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["addOnExit"]) Module["addOnExit"] = (function() {
    abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = (function() {
    abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = (function() {
    abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = (function() {
    abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = (function() {
    abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Module["FS"]) Module["FS"] = (function() {
    abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Module["GL"]) Module["GL"] = (function() {
    abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["staticAlloc"]) Module["staticAlloc"] = (function() {
    abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = (function() {
    abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["warnOnce"]) Module["warnOnce"] = (function() {
    abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = (function() {
    abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = (function() {
    abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["getLEB"]) Module["getLEB"] = (function() {
    abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = (function() {
    abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = (function() {
    abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["registerFunctions"]) Module["registerFunctions"] = (function() {
    abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["addFunction"]) Module["addFunction"] = (function() {
    abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["removeFunction"]) Module["removeFunction"] = (function() {
    abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = (function() {
    abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["prettyPrint"]) Module["prettyPrint"] = (function() {
    abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["makeBigInt"]) Module["makeBigInt"] = (function() {
    abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["dynCall"]) Module["dynCall"] = (function() {
    abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = (function() {
    abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stackSave"]) Module["stackSave"] = (function() {
    abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stackRestore"]) Module["stackRestore"] = (function() {
    abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["stackAlloc"]) Module["stackAlloc"] = (function() {
    abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
});
if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", {
    get: (function() {
        abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
    })
});
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", {
    get: (function() {
        abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
    })
});
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", {
    get: (function() {
        abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
    })
});
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", {
    get: (function() {
        abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
    })
});
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", {
    get: (function() {
        abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)")
    })
});

function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
    if (!Module["calledRun"]) run();
    if (!Module["calledRun"]) dependenciesFulfilled = runCaller
};
Module["callMain"] = function callMain(args) {
    assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
    assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
    args = args || [];
    ensureInitRuntime();
    var argc = args.length + 1;
    var argv = stackAlloc((argc + 1) * 4);
    HEAP32[argv >> 2] = allocateUTF8OnStack(Module["thisProgram"]);
    for (var i = 1; i < argc; i++) {
        HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1])
    }
    HEAP32[(argv >> 2) + argc] = 0;
    try {
        var ret = Module["_main"](argc, argv, 0);
        exit(ret, true)
    } catch (e) {
        if (e instanceof ExitStatus) {
            return
        } else if (e == "SimulateInfiniteLoop") {
            Module["noExitRuntime"] = true;
            return
        } else {
            var toLog = e;
            if (e && typeof e === "object" && e.stack) {
                toLog = [e, e.stack]
            }
            Module.printErr("exception thrown: " + toLog);
            Module["quit"](1, e)
        }
    } finally {
        calledMain = true
    }
};

function run(args) {
    args = args || Module["arguments"];
    if (runDependencies > 0) {
        return
    }
    writeStackCookie();
    preRun();
    if (runDependencies > 0) return;
    if (Module["calledRun"]) return;

    function doRun() {
        if (Module["calledRun"]) return;
        Module["calledRun"] = true;
        if (ABORT) return;
        ensureInitRuntime();
        preMain();
        if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
        if (Module["_main"] && shouldRunNow) Module["callMain"](args);
        postRun()
    }
    if (Module["setStatus"]) {
        Module["setStatus"]("Running...");
        setTimeout((function() {
            setTimeout((function() {
                Module["setStatus"]("")
            }), 1);
            doRun()
        }), 1)
    } else {
        doRun()
    }
    checkStackCookie()
}
Module["run"] = run;

function checkUnflushedContent() {
    var print = Module["print"];
    var printErr = Module["printErr"];
    var has = false;
    Module["print"] = Module["printErr"] = (function(x) {
        has = true
    });
    try {
        var flush = Module["_fflush"];
        if (flush) flush(0);
        var hasFS = true;
        if (hasFS) {
            ["stdout", "stderr"].forEach((function(name) {
                var info = FS.analyzePath("/dev/" + name);
                if (!info) return;
                var stream = info.object;
                var rdev = stream.rdev;
                var tty = TTY.ttys[rdev];
                if (tty && tty.output && tty.output.length) {
                    has = true
                }
            }))
        }
    } catch (e) {}
    Module["print"] = print;
    Module["printErr"] = printErr;
    if (has) {
        warnOnce("stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.")
    }
}

function exit(status, implicit) {
    checkUnflushedContent();
    if (implicit && Module["noExitRuntime"] && status === 0) {
        return
    }
    if (Module["noExitRuntime"]) {
        if (!implicit) {
            Module.printErr("exit(" + status + ") called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)")
        }
    } else {
        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;
        exitRuntime();
        if (Module["onExit"]) Module["onExit"](status)
    }
    if (ENVIRONMENT_IS_NODE) {
        process["exit"](status)
    }
    Module["quit"](status, new ExitStatus(status))
}
Module["exit"] = exit;
var abortDecorators = [];

function abort(what) {
    if (Module["onAbort"]) {
        Module["onAbort"](what)
    }
    if (what !== undefined) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what)
    } else {
        what = ""
    }
    ABORT = true;
    EXITSTATUS = 1;
    var extra = "";
    var output = "abort(" + what + ") at " + stackTrace() + extra;
    if (abortDecorators) {
        abortDecorators.forEach((function(decorator) {
            output = decorator(output, what)
        }))
    }
    throw output
}
Module["abort"] = abort;
if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function") Module["preInit"] = [Module["preInit"]];
    while (Module["preInit"].length > 0) {
        Module["preInit"].pop()()
    }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
    shouldRunNow = false
}
Module["noExitRuntime"] = true;
run()